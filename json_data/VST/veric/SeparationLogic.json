{
    "filename": "veric/SeparationLogic.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.veric.Clight_base.",
            "VernacRequire",
            "03391ebcbe352738cbe4d19626ab439bfac7c2e7"
        ],
        [
            "Require Export compcert.lib.Axioms.",
            "VernacRequire",
            "8ddcda43159f374e5bf93bff2105d79322e2897f"
        ],
        [
            "Require Import compcert.lib.Coqlib.",
            "VernacRequire",
            "0e8012a6c0062230df0c959370d96e0e84eae6bb"
        ],
        [
            "Require Export compcert.lib.Integers.",
            "VernacRequire",
            "7b3592fe9f9806d245f83298c6bbd65740d88efd"
        ],
        [
            "Require Export compcert.lib.Floats.",
            "VernacRequire",
            "ee323451e21fb9288981f1e27f07228ece0bebfe"
        ],
        [
            "Require Export compcert.lib.Maps.",
            "VernacRequire",
            "9784f84ea4c2dd8b36660a866e519b979be28c84"
        ],
        [
            "Require Export compcert.common.AST.",
            "VernacRequire",
            "5ae8ffae9052f93f51b0c833d08e77c451bb6a77"
        ],
        [
            "Require Export compcert.common.Values.",
            "VernacRequire",
            "c58ae82bb89fa3dc33487e4c1b9a46295525bd00"
        ],
        [
            "Require Export compcert.cfrontend.Ctypes.",
            "VernacRequire",
            "2d0d99a22d3ae854f49404e997d6f91b0d23506f"
        ],
        [
            "Require Export compcert.cfrontend.Clight.",
            "VernacRequire",
            "0ba09f8dc8b7081b47786e83eabe87a1952ab00d"
        ],
        [
            "Require Export VST.sepcomp.Address.",
            "VernacRequire",
            "aba5ccbf92e4cfe43efde5d06e17ffa8d84bcada"
        ],
        [
            "Require Export VST.msl.eq_dec.",
            "VernacRequire",
            "7211d0f3f73be3b56a2e383b31e34bb1e10e46b6"
        ],
        [
            "Require Export VST.msl.shares.",
            "VernacRequire",
            "7ad55a441a35226aa880258a3e4c8e7bc2f29a2d"
        ],
        [
            "Require Export VST.msl.predicates_rec.",
            "VernacRequire",
            "bcb9cada64705314050883aa1a42cefe6fe827a6"
        ],
        [
            "Require Export VST.msl.contractive.",
            "VernacRequire",
            "2f368b674efa3489ad11318bde6736b94386c31b"
        ],
        [
            "Require Export VST.msl.seplog.",
            "VernacRequire",
            "0fb94d5fc288623c286eccdc7ffd9ced8056cc66"
        ],
        [
            "Require Export VST.msl.ghost_seplog.",
            "VernacRequire",
            "c0bd44f574733a52fd998f3948d6fd2470ca676f"
        ],
        [
            "Require Export VST.msl.alg_seplog.",
            "VernacRequire",
            "26a3c9235f43d65a62f309c2eb17a4bdeb350419"
        ],
        [
            "Require Export VST.msl.log_normalize.",
            "VernacRequire",
            "14c258720d0610836bac649f4d43bfaa5f5da69e"
        ],
        [
            "Require Export VST.msl.wand_frame.",
            "VernacRequire",
            "af19c9b79b0155d49c711c084aaf7d0533f12b37"
        ],
        [
            "Require Export VST.msl.wandQ_frame.",
            "VernacRequire",
            "cca0b2f8ed05fa05954f2f421e4a6b4780a924c7"
        ],
        [
            "Require Export VST.msl.ramification_lemmas.",
            "VernacRequire",
            "00c147c53e4f083fd872e626b53050c65d970f1b"
        ],
        [
            "Require Export VST.veric.tycontext.",
            "VernacRequire",
            "4c6a266f946456242802e0efa8fd16680898526b"
        ],
        [
            "Require Export VST.veric.change_compspecs.",
            "VernacRequire",
            "76e1cdf6f82aef8f6a908c44894225e4559f921b"
        ],
        [
            "Require Export VST.veric.mpred.",
            "VernacRequire",
            "6c1ce67249b1383f3a9a9a3c23b6ee8c61a870a4"
        ],
        [
            "Require Export VST.veric.expr.",
            "VernacRequire",
            "e40fc58de74323be3d8b8ec4d1d13f605a07d3ce"
        ],
        [
            "Require Export VST.veric.expr_rel.",
            "VernacRequire",
            "12985db06d55fe0f160a45ed144e39ba1f85d589"
        ],
        [
            "Require Export VST.veric.Clight_lemmas.",
            "VernacRequire",
            "4825a38d092c48485d64ade58ba73d5e10b9dbda"
        ],
        [
            "Require Export VST.veric.composite_compute.",
            "VernacRequire",
            "03c7eaf17a63f520f0eac910f7ea07374387504e"
        ],
        [
            "Require Export VST.veric.align_mem.",
            "VernacRequire",
            "a867ba2d0c27d16f995c1f336af224db1ee64d49"
        ],
        [
            "Require Export VST.veric.shares.",
            "VernacRequire",
            "30cd0bcbdfe7d2b1f788c0c9d90885965b7ba0a7"
        ],
        [
            "Require VST.veric.Clight_seplog.",
            "VernacRequire",
            "18e7f268facfd3a6cfe34a1681755d8b991df008"
        ],
        [
            "Require VST.veric.Clight_assert_lemmas.",
            "VernacRequire",
            "fd8e2f33c2dbd262ba2625196d23c0aed0ee69a5"
        ],
        [
            "Require Import VST.msl.Coqlib2.",
            "VernacRequire",
            "8c6da0b17b3d2a1d9fdc906278adc35947d0c031"
        ],
        [
            "Require Import VST.veric.juicy_extspec.",
            "VernacRequire",
            "aa1a3d20d1c24cf96c29cb4ebe5c176da44989a3"
        ],
        [
            "Require Import VST.veric.valid_pointer.",
            "VernacRequire",
            "ae25d54881f8cec1adf9a2557270fc76a4168da9"
        ],
        [
            "Require Import VST.veric.own.",
            "VernacRequire",
            "5e9d4347a8f5c7601a2319fc2118c8d0952b82f5"
        ],
        [
            "Require VST.veric.semax_prog.",
            "VernacRequire",
            "dd382eca1054d2ddc9c0be6bfdd97c6ffbe6a4bf"
        ],
        [
            "Require VST.veric.semax_ext.",
            "VernacRequire",
            "d6bef9ab39e3b06c260be1cb51ac473c6a451764"
        ],
        [
            "Instance Nveric: NatDed mpred := algNatDed compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "797c828738e6225911c3ffbe565c0ac9075306fd"
        ],
        [
            "Instance Sveric: SepLog mpred := algSepLog compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "648c4973ea48f41ac144fceb3c057b9dbcce33e2"
        ],
        [
            "Instance Cveric: ClassicalSep mpred := algClassicalSep compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "afac613352f68f38bd1414820d8ebcfa9e58c79e"
        ],
        [
            "Instance Iveric: Indir mpred := algIndir compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "26ce37f3598deb8c0ce845b1e1f93c313c43c56a"
        ],
        [
            "Instance Rveric: RecIndir mpred := algRecIndir compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "175f948081ebb93a3457878a652d4cf95b06fc1c"
        ],
        [
            "Instance SIveric: SepIndir mpred := algSepIndir compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "17e1e7691d0b0a9b20d379daf8ad5b8d7e114a78"
        ],
        [
            "Instance CSLveric: CorableSepLog mpred := algCorableSepLog compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "1a75b8869ac41b3f0f5097ef068a54bf3aa36f39"
        ],
        [
            "Instance CIveric: CorableIndir mpred := algCorableIndir compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "3a7edcd69293bbc87cea3a73b34a41ee4d867cc6"
        ],
        [
            "Instance SRveric: SepRec mpred := algSepRec compcert_rmaps.RML.R.rmap.",
            "VernacInstance",
            "85cbefbdd8e2c0c69d3b009d372dd0f2a6f72fb8"
        ],
        [
            "Instance Bveric: BupdSepLog mpred gname compcert_rmaps.RML.R.preds := mkBSL _ _ _ _ _ bupd (@own) bupd_intro bupd_mono bupd_trans bupd_frame_r (@ghost_alloc) (@ghost_op) (@ghost_valid_2) (@ghost_update_ND) (@ghost_dealloc).",
            "VernacInstance",
            "f32dd25bbffa915083d3f1933d0e6e9cfaa8a378"
        ],
        [
            "Instance LiftNatDed' T {ND: NatDed T}: NatDed (LiftEnviron T) := LiftNatDed _ _.",
            "VernacInstance",
            "45af9347f2f1e1e1ba92c88be5800ff51c03ba18"
        ],
        [
            "Instance LiftSepLog' T {ND: NatDed T}{SL: SepLog T}: SepLog (LiftEnviron T) := LiftSepLog _ _.",
            "VernacInstance",
            "ca6c6ec213945f2858c7b1b886375b44230a95e5"
        ],
        [
            "Instance LiftClassicalSep' T {ND: NatDed T}{SL: SepLog T}{CS: ClassicalSep T} : ClassicalSep (LiftEnviron T) := LiftClassicalSep _ _.",
            "VernacInstance",
            "96575ebc1014f91dd01e1c1f44a3cef391ade2ed"
        ],
        [
            "Instance LiftIndir' T {ND: NatDed T}{SL: SepLog T}{IT: Indir T} : Indir (LiftEnviron T) := LiftIndir _ _.",
            "VernacInstance",
            "f9cfa9388ab59585c7a9b58c5094546d977a0dca"
        ],
        [
            "Instance LiftSepIndir' T {ND: NatDed T}{SL: SepLog T}{IT: Indir T}{SI: SepIndir T} : SepIndir (LiftEnviron T) := LiftSepIndir _ _.",
            "VernacInstance",
            "8d3bfe7291d8149fe563fb855d76a6f3ea60db29"
        ],
        [
            "Instance LiftCorableSepLog' T {ND: NatDed T}{SL: SepLog T}{CSL: CorableSepLog T} : CorableSepLog (LiftEnviron T) := LiftCorableSepLog _ _.",
            "VernacInstance",
            "ab825b25ba8407b8d05d6fbeef4a0ff3fe6deb7b"
        ],
        [
            "Instance LiftCorableIndir' T {ND: NatDed T}{SL: SepLog T}{IT: Indir T}{SI: SepIndir T}{CSL: CorableSepLog T}{CI: CorableIndir T} : CorableIndir (LiftEnviron T) := LiftCorableIndir _ _.",
            "VernacInstance",
            "7c359dcdff2aafa10391625589612af6afa967aa"
        ],
        [
            "Definition local: (environ -> Prop) -> environ->mpred := lift1 prop.",
            "VernacDefinition",
            "6b9fb7cdc3085ae0ffa8fba2823164604ee98f3e"
        ],
        [
            "Global Opaque mpred Nveric Sveric Cveric Iveric Rveric Sveric SIveric CSLveric CIveric SRveric Bveric.",
            "VernacSetOpacity",
            "ca41f04ba7e035f2639214b8617d8264cca8b18f"
        ],
        [
            "Hint Resolve any_environ : typeclass_instances.",
            "VernacHints",
            "e3e31aa826030a89a9adfce3d5b680b9ffdc19f5"
        ],
        [
            "Local Open Scope logic.",
            "VernacOpenCloseScope",
            "5937723d189e5aa98ad78e1018bed51ea2c1b0cd"
        ],
        [
            "Transparent mpred Nveric Sveric Cveric Iveric Rveric Sveric SIveric CSLveric CIveric SRveric Bveric.",
            "VernacSetOpacity",
            "b4648945109f3d9498a859ade99b8774514ec737"
        ],
        [
            "Definition denote_tc_iszero v : mpred := match v with | Vint i => prop (is_true (Int.eq i Int.zero)) | Vlong i => prop (is_true (Int64.eq i Int64.zero)) | _ => FF end.",
            "VernacDefinition",
            "63a5e3db37ec5c4b8bff576dc6be95e720bfaa23"
        ],
        [
            "Definition denote_tc_nonzero v : mpred := match v with | Vint i => prop (i <> Int.zero) | Vlong i =>prop (i <> Int64.zero) | _ => FF end.",
            "VernacDefinition",
            "60731b0ae755a8ba1fd0bb69192c71302c260ad5"
        ],
        [
            "Definition denote_tc_igt i v : mpred := match v with | Vint i1 => prop (Int.unsigned i1 < Int.unsigned i) | _ => FF end.",
            "VernacDefinition",
            "b4ae655e6ebe3a9f35de084b23379f89a533d723"
        ],
        [
            "Definition denote_tc_lgt l v : mpred := match v with | Vlong l1 => prop (Int64.unsigned l1 < Int64.unsigned l) | _ => FF end.",
            "VernacDefinition",
            "2cc00f665b3b6e8677a5d728791b837049c87c7f"
        ],
        [
            "Definition Zoffloat (f:float): option Z := match f with | Fappli_IEEE.B754_finite s m (Zpos e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e)%Z | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m)) | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e)) | Fappli_IEEE.B754_zero _ => Some 0 | _ => None end.",
            "VernacDefinition",
            "3f3fb1b5897310ac744df76d4967da69d022d463"
        ],
        [
            "Definition Zofsingle (f: float32): option Z := match f with | Fappli_IEEE.B754_finite s m (Zpos e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e)%Z | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m)) | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e)) | Fappli_IEEE.B754_zero _ => Some 0 | _ => None end.",
            "VernacDefinition",
            "10a764ed697c521e1219eef7179d6cfbb902e732"
        ],
        [
            "Definition denote_tc_Zge z v : mpred := match v with | Vfloat f => match Zoffloat f with | Some n => prop (z >= n) | None => FF end | Vsingle f => match Zofsingle f with | Some n => prop (z >= n) | None => FF end | _ => FF end.",
            "VernacDefinition",
            "69eb7343832a44304e47a011b76c368f3588be03"
        ],
        [
            "Definition denote_tc_Zle z v : mpred := match v with | Vfloat f => match Zoffloat f with | Some n => prop (z <= n) | None => FF end | Vsingle f => match Zofsingle f with | Some n => prop (z <= n) | None => FF end | _ => FF end.",
            "VernacDefinition",
            "afa2fb334ab923bb5bd05fd6f1c3a25b7033b3c8"
        ],
        [
            "Definition sameblock v1 v2 : bool := match v1, v2 with | Vptr b1 _, Vptr b2 _ => peq b1 b2 | _, _ => false end.",
            "VernacDefinition",
            "8ee1e45d79b442feadcd73c198e4d50d47829a0b"
        ],
        [
            "Definition denote_tc_samebase v1 v2 : mpred := prop (is_true (sameblock v1 v2)).",
            "VernacDefinition",
            "b43244f4eb489b248fffdf8f847fea62e8467ac7"
        ],
        [
            "Definition denote_tc_nodivover v1 v2 : mpred := match v1, v2 with | Vint n1, Vint n2 => prop (~(n1 = Int.repr Int.min_signed /\\ n2 = Int.mone)) | Vlong n1, Vlong n2 => prop (~(n1 = Int64.repr Int64.min_signed /\\ n2 = Int64.mone)) | Vint n1, Vlong n2 => TT | Vlong n1, Vint n2 => prop (~ (n1 = Int64.repr Int64.min_signed /\\ n2 = Int.mone)) | _ , _ => FF end.",
            "VernacDefinition",
            "fc39ba883b0155797e03339a13511f2352120358"
        ],
        [
            "Definition denote_tc_nosignedover (op: Z->Z->Z) v1 v2 : mpred := match v1,v2 with | Vint n1, Vint n2 => prop (Int.min_signed <= op (Int.signed n1) (Int.signed n2) <= Int.max_signed) | Vlong n1, Vlong n2 => prop (Int64.min_signed <= op (Int64.signed n1) (Int64.signed n2) <= Int64.max_signed) | Vint n1, Vlong n2 => prop (Int64.min_signed <= op (Int.signed n1) (Int64.signed n2) <= Int64.max_signed) | Vlong n1, Vint n2 => prop (Int64.min_signed <= op (Int64.signed n1) (Int.signed n2) <= Int64.max_signed) | _, _ => FF end.",
            "VernacDefinition",
            "305f3d4a22f2474787b3972f725c98095f617d12"
        ],
        [
            "Definition denote_tc_initialized id ty rho : mpred := prop (exists v, Map.get (te_of rho) id = Some v /\\ tc_val ty v).",
            "VernacDefinition",
            "115d5406e3862b5d38a83d33db3f54fe9812ad5b"
        ],
        [
            "Definition denote_tc_isptr v : mpred := prop (isptr v).",
            "VernacDefinition",
            "2790b9120e09799cbc1c889f44de516baa7f4c4a"
        ],
        [
            "Definition denote_tc_isint v : mpred := prop (is_int I32 Signed v).",
            "VernacDefinition",
            "50df5ed7d10b0e1b806cd36847325deb844a432f"
        ],
        [
            "Definition denote_tc_islong v : mpred := prop (is_long v).",
            "VernacDefinition",
            "1b05a895a4f2ee4182729266538ac4514559b47c"
        ],
        [
            "Definition test_eq_ptrs v1 v2 : mpred := if sameblock v1 v2 then (andp (weak_valid_pointer v1) (weak_valid_pointer v2)) else (andp (valid_pointer v1) (valid_pointer v2)).",
            "VernacDefinition",
            "5ccca53566dded6a17110581b99e3452a3e99162"
        ],
        [
            "Definition test_order_ptrs v1 v2 : mpred := if sameblock v1 v2 then (andp (weak_valid_pointer v1) (weak_valid_pointer v2)) else FF.",
            "VernacDefinition",
            "6c8750aa01072fd0d82bc67dc2b653783f4f196c"
        ],
        [
            "Definition denote_tc_test_eq v1 v2 : mpred := match v1, v2 with | Vint i, Vint j => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero)) | Vlong i, Vlong j => if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF | Vint i, Vptr _ _ => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v2) | Vlong i, Vptr _ _ => if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v2) else FF | Vptr _ _, Vint i => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v1) | Vptr _ _, Vlong i => if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v1) else FF | Vptr _ _, Vptr _ _ => test_eq_ptrs v1 v2 | _, _ => FF end.",
            "VernacDefinition",
            "d3ee29369c41a6ef7b329073edb621421e18c412"
        ],
        [
            "Definition denote_tc_test_order v1 v2 : mpred := match v1, v2 with | Vint i, Vint j => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero)) | Vlong i, Vlong j => if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF | Vptr _ _, Vptr _ _ => test_order_ptrs v1 v2 | _, _ => FF end.",
            "VernacDefinition",
            "0835e2798654172bbecd2446fa5076ae5b97e183"
        ],
        [
            "Definition typecheck_error (e: tc_error) : Prop := False.",
            "VernacDefinition",
            "99336c24f064e4ed1d6fd0ea4612b034d953035a"
        ],
        [
            "Global Opaque typecheck_error.",
            "VernacSetOpacity",
            "1e681323a4b296cc4583e45dd4628dd71e81da13"
        ],
        [
            "Definition fool := @map _ Type (fun it : ident * type => mpred).",
            "VernacDefinition",
            "83cb0eefcf18e1eae7ae9f62c4f7c9b7c35a2ee7"
        ],
        [
            "Fixpoint denote_tc_assert {CS: compspecs} (a: tc_assert) : environ -> mpred := match a with | tc_FF msg => `(prop (typecheck_error msg)) | tc_TT => TT | tc_andp' b c => fun rho => andp (denote_tc_assert b rho) (denote_tc_assert c rho) | tc_orp' b c => `orp (denote_tc_assert b) (denote_tc_assert c) | tc_nonzero' e => `denote_tc_nonzero (eval_expr e) | tc_isptr e => `denote_tc_isptr (eval_expr e) | tc_isint e => `denote_tc_isint (eval_expr e) | tc_islong e => `denote_tc_islong (eval_expr e) | tc_test_eq' e1 e2 => `denote_tc_test_eq (eval_expr e1) (eval_expr e2) | tc_test_order' e1 e2 => `denote_tc_test_order (eval_expr e1) (eval_expr e2) | tc_ilt' e i => `(denote_tc_igt i) (eval_expr e) | tc_llt' e i => `(denote_tc_lgt i) (eval_expr e) | tc_Zle e z => `(denote_tc_Zge z) (eval_expr e) | tc_Zge e z => `(denote_tc_Zle z) (eval_expr e) | tc_samebase e1 e2 => `denote_tc_samebase (eval_expr e1) (eval_expr e2) | tc_nodivover' v1 v2 => `denote_tc_nodivover (eval_expr v1) (eval_expr v2) | tc_initialized id ty => denote_tc_initialized id ty | tc_iszero' e => `denote_tc_iszero (eval_expr e) | tc_nosignedover op e1 e2 => `(denote_tc_nosignedover op) (eval_expr e1) (eval_expr e2) end.",
            "VernacFixpoint",
            "abd1d33fb963549b4014774489aa90671f6efeb9"
        ],
        [
            "Definition fool' := @map _ Type (fun it : ident * type => mpred).",
            "VernacDefinition",
            "58ce9e10fed9dd3f1a375ea97c5909c1dc21c506"
        ],
        [
            "Opaque mpred Nveric Sveric Cveric Iveric Rveric Sveric SIveric CSLveric CIveric SRveric Bveric.",
            "VernacSetOpacity",
            "217a914fe866dc566a5c8f1c9374affb6de05ae0"
        ],
        [
            "Definition cast_pointer_to_bool t1 t2 := match t1 with (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => match t2 with Tint IBool _ _ => true | _ => false end | _ => false end.",
            "VernacDefinition",
            "6fdfb689012a4b0fd1c967d78920c8e1faf7ca05"
        ],
        [
            "Fixpoint ext_link_prog' (dl: list (ident * globdef fundef type)) (s: String.string) : option ident := match dl with | (id, Gfun (External EF_malloc _ _ _)) :: dl' => if String.string_dec s \"_malloc\" then Some id else ext_link_prog' dl' s | (id, Gfun (External EF_free _ _ _)) :: dl' => if String.string_dec s \"_free\" then Some id else ext_link_prog' dl' s | (id, Gfun (External (EF_external s' _) _ _ _)) :: dl' => if String.string_dec s s' then Some id else ext_link_prog' dl' s | (id, Gfun (External (EF_builtin s' _) _ _ _)) :: dl' => if String.string_dec s s' then Some id else ext_link_prog' dl' s | _ :: dl' => ext_link_prog' dl' s | nil => None end.",
            "VernacFixpoint",
            "cc923d8d9c207c973af5aa31b5bba95800d4bf28"
        ],
        [
            "Definition ext_link_prog (p: program) (s: String.string) : ident := match ext_link_prog' (prog_defs p) s with Some id => id | None => 1%positive end.",
            "VernacDefinition",
            "8bfdfc60852a1c07803ff5cbde9ab1638276d6e1"
        ],
        [
            "Definition closed_wrt_vars {B} (S: ident -> Prop) (F: environ -> B) : Prop := forall rho te', (forall i, S i \\/ Map.get (te_of rho) i = Map.get te' i) -> F rho = F (mkEnviron (ge_of rho) (ve_of rho) te').",
            "VernacDefinition",
            "10cede97ae73a5b30036c83acb289cbbd6c041d8"
        ],
        [
            "Definition closed_wrt_lvars {B} (S: ident -> Prop) (F: environ -> B) : Prop := forall rho ve', (forall i, S i \\/ Map.get (ve_of rho) i = Map.get ve' i) -> F rho = F (mkEnviron (ge_of rho) ve' (te_of rho)).",
            "VernacDefinition",
            "2a382a0807ea41da227724d59d71225c176a0996"
        ],
        [
            "Definition not_a_param (params: list (ident * type)) (i : ident) : Prop := ~ In i (map (@fst _ _) params).",
            "VernacDefinition",
            "acb99d36a2203838c0beec5993f7958f40b49e92"
        ],
        [
            "Definition is_a_local (vars: list (ident * type)) (i: ident) : Prop := In i (map (@fst _ _) vars) .",
            "VernacDefinition",
            "613487d92479e767d4414774098878612965af56"
        ],
        [
            "Definition precondition_closed (f: function) {A: rmaps.TypeTree} (P: forall ts, functors.MixVariantFunctor._functor (rmaps.dependent_type_functor_rec ts (AssertTT A)) mpred) : Prop := forall ts x, closed_wrt_vars (not_a_param (fn_params f)) (P ts x) /\\ closed_wrt_lvars (is_a_local (fn_vars f)) (P ts x).",
            "VernacDefinition",
            "c36fc2f77671668277496128a8ae9e1dc8c0629b"
        ],
        [
            "Definition typed_true (t: type) (v: val) : Prop := strict_bool_val v t = Some true.",
            "VernacDefinition",
            "8b1990a1161950bd6327c54b33ac4ed573ba3f62"
        ],
        [
            "Definition typed_false (t: type)(v: val) : Prop := strict_bool_val v t = Some false.",
            "VernacDefinition",
            "8f5ee749bae666c1dd049e77805c2ca4409e18e7"
        ],
        [
            "Definition subst {A} (x: ident) (v: environ -> val) (P: environ -> A) : environ -> A := fun s => P (env_set s x (v s)).",
            "VernacDefinition",
            "f62e7eae06edd9353f19c36024e9c81bb9064b65"
        ],
        [
            "Definition substopt {A} (ret: option ident) (v: environ -> val) (P: environ -> A) : environ -> A := match ret with | Some id => subst id v P | None => P end.",
            "VernacDefinition",
            "55fc74214b1c072fb9cd359c0976f25121e108f9"
        ],
        [
            "Definition cast_expropt {CS: compspecs} (e: option expr) t : environ -> option val := match e with Some e' => `Some (eval_expr (Ecast e' t)) | None => `None end.",
            "VernacDefinition",
            "60c1bad203ebead4a7adaccc32f38da0e41849b8"
        ],
        [
            "Definition typecheck_tid_ptr_compare Delta id := match (temp_types Delta) ! id with | Some t => is_int_type t | None => false end.",
            "VernacDefinition",
            "333ac56c41beec15d7a86bdc2aac824fe55ad747"
        ],
        [
            "Definition mapsto (sh: Share.t) (t: type) (v1 v2 : val): mpred := match access_mode t with | By_value ch => match type_is_volatile t with | false => match v1 with | Vptr b ofs => if readable_share_dec sh then (!!tc_val t v2 && res_predicates.address_mapsto ch v2 sh (b, Ptrofs.unsigned ofs)) || (!! (v2 = Vundef) && EX v2':val, res_predicates.address_mapsto ch v2' sh (b, Ptrofs.unsigned ofs)) else !! (tc_val' t v2 /\\ (Memdata.align_chunk ch | Ptrofs.unsigned ofs)) && res_predicates.nonlock_permission_bytes sh (b, Ptrofs.unsigned ofs) (Memdata.size_chunk ch) | _ => FF end | _ => FF end | _ => FF end.",
            "VernacDefinition",
            "447fe6570ccb529960e17f37e77e2d2741425af8"
        ],
        [
            "Definition mapsto_ sh t v1 := mapsto sh t v1 Vundef.",
            "VernacDefinition",
            "988eeaf0a84aa1e1698662931b44bcff96dad288"
        ],
        [
            "Definition mapsto_zeros (n: Z) (sh: share) (a: val) : mpred := match a with | Vptr b z => !! (0 <= Ptrofs.unsigned z /\\ n + Ptrofs.unsigned z < Ptrofs.modulus)%Z && mapsto_memory_block.address_mapsto_zeros sh (nat_of_Z n) (b, Ptrofs.unsigned z) | _ => FF end.",
            "VernacDefinition",
            "7037abbe7ce5290ffb92c8fb7ad139bc333e60c6"
        ],
        [
            "Definition init_data2pred (d: init_data) (sh: share) (a: val) (rho: environ) : mpred := match d with | Init_int8 i => mapsto sh (Tint I8 Unsigned noattr) a (Vint (Int.zero_ext 8 i)) | Init_int16 i => mapsto sh (Tint I16 Unsigned noattr) a (Vint (Int.zero_ext 16 i)) | Init_int32 i => mapsto sh (Tint I32 Unsigned noattr) a (Vint i) | Init_int64 i => mapsto sh (Tlong Unsigned noattr) a (Vlong i) | Init_float32 r => mapsto sh (Tfloat F32 noattr) a (Vsingle r) | Init_float64 r => mapsto sh (Tfloat F64 noattr) a (Vfloat r) | Init_space n => mapsto_zeros n sh a | Init_addrof symb ofs => match Map.get (ge_of rho) symb with | Some b => mapsto sh (Tpointer Tvoid noattr) a (Vptr b ofs) | _ => mapsto_ sh (Tpointer Tvoid noattr) a end end.",
            "VernacDefinition",
            "45bd6f994a2a82d7dd59aad22b923b939ce4f187"
        ],
        [
            "Definition init_data_size (i: init_data) : Z := match i with | Init_int8 _ => 1 | Init_int16 _ => 2 | Init_int32 _ => 4 | Init_int64 _ => 8 | Init_float32 _ => 4 | Init_float64 _ => 8 | Init_addrof _ _ => if Archi.ptr64 then 8 else 4 | Init_space n => Z.max n 0 end.",
            "VernacDefinition",
            "b376ccbdd4b78ad3170928f7b3864fd46b064a97"
        ],
        [
            "Fixpoint init_data_list_size (il: list init_data) {struct il} : Z := match il with | nil => 0 | i :: il' => init_data_size i + init_data_list_size il' end.",
            "VernacFixpoint",
            "c8b6982814cac7e0b365ba7ce5757dc638e2a553"
        ],
        [
            "Fixpoint init_data_list2pred (dl: list init_data) (sh: share) (v: val) : environ -> mpred := match dl with | d::dl' => sepcon (init_data2pred d sh v) (init_data_list2pred dl' sh (offset_val (init_data_size d) v)) | nil => emp end.",
            "VernacFixpoint",
            "24033e221f9c49adf41c676511d5c18bd9cbe908"
        ],
        [
            "Definition readonly2share (rdonly: bool) : share := if rdonly then Ers else Ews.",
            "VernacDefinition",
            "483d95e07fd4a15b2e687cb7df30899897758134"
        ],
        [
            "Definition globals := ident -> val.",
            "VernacDefinition",
            "0cec2e339d71415d016af6eaf6e1e0c552e92a55"
        ],
        [
            "Definition globvar2pred (gv: globals) (idv: ident * globvar type) : environ->mpred := if (gvar_volatile (snd idv)) then lift0 TT else init_data_list2pred (gvar_init (snd idv)) (readonly2share (gvar_readonly (snd idv))) (gv (fst idv)).",
            "VernacDefinition",
            "4efc89749507e9a7056b8781c9e525f0630ff37a"
        ],
        [
            "Definition globals_of_env (rho: environ) (i: ident) : val := match Map.get (ge_of rho) i with Some b => Vptr b Ptrofs.zero | None => Vundef end.",
            "VernacDefinition",
            "4b3d152fcfc4a65cce9ca38e1b5a6b6e3100e319"
        ],
        [
            "Definition globvars2pred (gv: globals) (vl: list (ident * globvar type)) : environ->mpred := (lift2 andp) (fun rho => prop (gv = globals_of_env rho)) (fold_right sepcon emp (map (globvar2pred gv) vl)).",
            "VernacDefinition",
            "93ceaf7706c2465b644b1bab99d3edd1711744f5"
        ],
        [
            "Definition initializer_aligned (z: Z) (d: init_data) : bool := match d with | Init_int16 n => Zeq_bool (z mod 2) 0 | Init_int32 n => Zeq_bool (z mod 4) 0 | Init_int64 n => Zeq_bool (z mod 8) 0 | Init_float32 n => Zeq_bool (z mod 4) 0 | Init_float64 n => Zeq_bool (z mod 8) 0 | Init_addrof symb ofs => Zeq_bool (z mod (size_chunk Mptr)) 0 | _ => true end.",
            "VernacDefinition",
            "5e2314db2a636b322bfbc9f614c0d8ab276d0bb3"
        ],
        [
            "Fixpoint initializers_aligned (z: Z) (dl: list init_data) : bool := match dl with | nil => true | d::dl' => andb (initializer_aligned z d) (initializers_aligned (z + init_data_size d) dl') end.",
            "VernacFixpoint",
            "4c59c5e3110880237a48e51317bcc6be3e514cc1"
        ],
        [
            "Definition funsig := (list (ident*type) * type)%type.",
            "VernacDefinition",
            "51cbbee3db125be8a14baaa8dcbdcfca1aef91d2"
        ],
        [
            "Definition memory_block (sh: share) (n: Z) (v: val) : mpred := match v with | Vptr b ofs => (!! (Ptrofs.unsigned ofs + n < Ptrofs.modulus)) && mapsto_memory_block.memory_block' sh (nat_of_Z n) b (Ptrofs.unsigned ofs) | _ => FF end.",
            "VernacDefinition",
            "8f55c8846279dc56c75245452a2d07dfb34824ec"
        ],
        [
            "Lemma memory_block_zero_Vptr: forall sh b z, memory_block sh 0 (Vptr b z) = emp.",
            "VernacStartTheoremProof",
            "3aca34df5e7c8ace4a93699df4c660444dc45a56"
        ],
        [
            "exact mapsto_memory_block.memory_block_zero_Vptr.",
            "VernacExtend",
            "d305a7d2e51109d6c693d64d7c0cad6bb9a3b98a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_mapsto_: forall sh t v v', mapsto sh t v v' |-- mapsto_ sh t v.",
            "VernacStartTheoremProof",
            "af4b87311eb95af4a4619e46d01b8c80eab1650b"
        ],
        [
            "exact mapsto_memory_block.mapsto_mapsto_.",
            "VernacExtend",
            "244449e5c1794010bedaa487c25afc48427ea2c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_tc_val': forall sh t p v, mapsto sh t p v |-- !! tc_val' t v.",
            "VernacStartTheoremProof",
            "6228f63b0a2ae5367e3e297557a9d73b572b2fcf"
        ],
        [
            "exact mapsto_memory_block.mapsto_tc_val'.",
            "VernacExtend",
            "f962e16fd44ea1b88cbc4b63c58d1e3161127c7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memory_block_split: forall (sh : share) (b : block) (ofs n m : Z), 0 <= n -> 0 <= m -> n + m <= n + m + ofs < Ptrofs.modulus -> memory_block sh (n + m) (Vptr b (Ptrofs.repr ofs)) = memory_block sh n (Vptr b (Ptrofs.repr ofs)) * memory_block sh m (Vptr b (Ptrofs.repr (ofs + n))).",
            "VernacStartTheoremProof",
            "a344fb909b262ba948134782151d3af082226d61"
        ],
        [
            "exact mapsto_memory_block.memory_block_split.",
            "VernacExtend",
            "9d4ea65293cfb570ab761542b2d6dada7397eb5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_share_join: forall sh1 sh2 sh t p v, sepalg.join sh1 sh2 sh -> mapsto sh1 t p v * mapsto sh2 t p v = mapsto sh t p v.",
            "VernacStartTheoremProof",
            "053988d5dfa9e9cd73ea21ead3f922390479687a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply mapsto_memory_block.mapsto_share_join; auto.",
            "VernacExtend",
            "d003693b85bc0d066c1f762a1f4caf75e2637f36"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memory_block_share_join: forall sh1 sh2 sh n p, sepalg.join sh1 sh2 sh -> memory_block sh1 n p * memory_block sh2 n p = memory_block sh n p.",
            "VernacStartTheoremProof",
            "bad9edb138370239dd1c454bc475a19faea9c002"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply mapsto_memory_block.memory_block_share_join; auto.",
            "VernacExtend",
            "ef107d11202927c8953f389c8575f466f7cdc5df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_conflict: forall sh t v v2 v3, sepalg.nonunit sh -> mapsto sh t v v2 * mapsto sh t v v3 |-- FF.",
            "VernacStartTheoremProof",
            "3b459ebc2c0ec4f75e35516916646b8275bad44e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply mapsto_memory_block.mapsto_conflict; auto.",
            "VernacExtend",
            "811af90f38bb853317241f8009b744e5f211779d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memory_block_conflict: forall sh n m p, sepalg.nonunit sh -> 0 < n <= Ptrofs.max_unsigned -> 0 < m <= Ptrofs.max_unsigned -> memory_block sh n p * memory_block sh m p |-- FF.",
            "VernacStartTheoremProof",
            "f53631e154e4b8ba897adfc5247026da9a1e398a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply mapsto_memory_block.memory_block_conflict; auto.",
            "VernacExtend",
            "b84f7bfe465b4138d02d5770a4321e6a8b2d5aa6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition align_compatible {C: compspecs} t p := match p with | Vptr b i_ofs => align_compatible_rec cenv_cs t (Ptrofs.unsigned i_ofs) | _ => True end.",
            "VernacDefinition",
            "f41c92f819c72094d2ee10931cd30d6e84548902"
        ],
        [
            "Definition size_compatible {C: compspecs} t p := match p with | Vptr b i_ofs => Ptrofs.unsigned i_ofs + sizeof t < Ptrofs.modulus | _ => True end.",
            "VernacDefinition",
            "fcb00073999e8bb3d243e0c28bda754f171b192c"
        ],
        [
            "Lemma mapsto_valid_pointer: forall {cs: compspecs} sh t p v i, size_compatible t p -> 0 <= i < sizeof t -> sepalg.nonidentity sh -> mapsto sh t p v |-- valid_pointer (offset_val i p).",
            "VernacStartTheoremProof",
            "a1a9f06358b1d750fe3187f5f68d205d063e17db"
        ],
        [
            "exact @mapsto_valid_pointer.",
            "VernacExtend",
            "8c80e7e3e83cae7d68d13d55e79f96ae6f8efabf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memory_block_valid_pointer: forall {cs: compspecs} sh n p i, 0 <= i < n -> sepalg.nonidentity sh -> memory_block sh n p |-- valid_pointer (offset_val i p).",
            "VernacStartTheoremProof",
            "d288a75f28e7aa92f7edeeb5df41a71e4600a748"
        ],
        [
            "exact @memory_block_valid_pointer.",
            "VernacExtend",
            "f362de8736c51332771ce3eeca2b420504c93173"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memory_block_weak_valid_pointer: forall {cs: compspecs} sh n p i, 0 <= i <= n -> 0 < n -> sepalg.nonidentity sh -> memory_block sh n p |-- weak_valid_pointer (offset_val i p).",
            "VernacStartTheoremProof",
            "df698a218f0a66d813f991b89c41667449a27297"
        ],
        [
            "exact @memory_block_weak_valid_pointer.",
            "VernacExtend",
            "51c87196fcfa15a9cf5d916d6d151abd8ac19d3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_zeros_memory_block: forall sh n p, readable_share sh -> mapsto_zeros n sh p |-- memory_block sh n p.",
            "VernacStartTheoremProof",
            "864bd880975103e6dcc21d91be783ed5ec4e7834"
        ],
        [
            "exact mapsto_memory_block.mapsto_zeros_memory_block.",
            "VernacExtend",
            "d5f03f26a51317c3c1d2cd2bcca806ec088ed44b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_pointer_void: forall sh t a, eqb_type (Tpointer t a) int_or_ptr_type = false -> eqb_type (Tpointer Tvoid a) int_or_ptr_type = false -> mapsto sh (Tpointer t a) = mapsto sh (Tpointer Tvoid a).",
            "VernacStartTheoremProof",
            "9104b5385333a9d38fc5de35004a9ac6d676e589"
        ],
        [
            "exact mapsto_memory_block.mapsto_pointer_void.",
            "VernacExtend",
            "0dd96af3a0eda5313926e820234b31a84c9b8c21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_unsigned_signed: forall sign1 sign2 sh sz v i, mapsto sh (Tint sz sign1 noattr) v (Vint (Cop.cast_int_int sz sign1 i)) = mapsto sh (Tint sz sign2 noattr) v (Vint (Cop.cast_int_int sz sign2 i)).",
            "VernacStartTheoremProof",
            "a461ed5210d2841b84453c75e9cb10153d2ec7cd"
        ],
        [
            "exact Clight_mapsto_memory_block.mapsto_unsigned_signed.",
            "VernacExtend",
            "225c8d222cbcef66f25e8abc9d8bc818ce35b859"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_tuint_tint: forall sh, mapsto sh tuint = mapsto sh tint.",
            "VernacStartTheoremProof",
            "d8a59b28ed95d0c0f40903dc31fc06882366e1c8"
        ],
        [
            "exact Clight_mapsto_memory_block.mapsto_tuint_tint.",
            "VernacExtend",
            "90bdd3f560ca238a82226e51d0e9ff5ba838ed3b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_tuint_tptr_nullval: forall sh p t, mapsto sh (Tpointer t noattr) p nullval = mapsto sh size_t p nullval.",
            "VernacStartTheoremProof",
            "af5271b0d97ceb59a9cc8a589a4e6669a74225de"
        ],
        [
            "exact mapsto_memory_block.mapsto_tuint_tptr_nullval.",
            "VernacExtend",
            "0c5735cb04666a3c34318a2d6fc1ba017a665afa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_size_t_tptr_nullval: forall sh p t, mapsto sh (Tpointer t noattr) p nullval = mapsto sh size_t p nullval.",
            "VernacStartTheoremProof",
            "37892995daee4c81ca4161d0f456f2f9262f718b"
        ],
        [
            "exact mapsto_memory_block.mapsto_tuint_tptr_nullval.",
            "VernacExtend",
            "0c5735cb04666a3c34318a2d6fc1ba017a665afa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_int32_noattr_type t := match t with | Tint I32 _ {| attr_volatile := false; attr_alignas := None |} => True | _ => False end.",
            "VernacDefinition",
            "5e1f5359e34b095638fe691414a63bbee840471e"
        ],
        [
            "Lemma mapsto_mapsto_int32: forall sh t1 t2 p v, is_int32_noattr_type t1 -> is_int32_noattr_type t2 -> mapsto sh t1 p v |-- mapsto sh t2 p v.",
            "VernacStartTheoremProof",
            "0c9bf822520280181ebd736d5d4e69000eceacc8"
        ],
        [
            "exact mapsto_memory_block.mapsto_mapsto_int32.",
            "VernacExtend",
            "aeafe2b2144a5d553585fd84f92dcc48041a63e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_mapsto__int32: forall sh t1 t2 p v, is_int32_noattr_type t1 -> is_int32_noattr_type t2 -> mapsto sh t1 p v |-- mapsto_ sh t2 p.",
            "VernacStartTheoremProof",
            "62ac96c4a3f92bfcd2157771721ceaf91f5d3c71"
        ],
        [
            "exact mapsto_memory_block.mapsto_mapsto__int32.",
            "VernacExtend",
            "66bd3e37b67623f0daf2d713d146990bbfff4315"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapsto_null_mapsto_pointer: forall t sh v, Archi.ptr64 = false -> mapsto sh tint v nullval = mapsto sh (tptr t) v nullval.",
            "VernacStartTheoremProof",
            "91d20c5930673b37398f0cbfab93fdad0282d612"
        ],
        [
            "exact Clight_mapsto_memory_block.mapsto_null_mapsto_pointer.",
            "VernacExtend",
            "4e6774ad22c4eb1e86ca2d3d0485c1120ebef7b7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eval_lvar (id: ident) (ty: type) (rho: environ) := match Map.get (ve_of rho) id with | Some (b, ty') => if eqb_type ty ty' then Vptr b Ptrofs.zero else Vundef | None => Vundef end.",
            "VernacDefinition",
            "292c304c60174400ee99e5ad4011c979ba33f803"
        ],
        [
            "Definition var_block (sh: Share.t) {cs: compspecs} (idt: ident * type) : environ -> mpred := !! (sizeof (snd idt) <= Ptrofs.max_unsigned) && `(memory_block sh (sizeof (snd idt))) (eval_lvar (fst idt) (snd idt)).",
            "VernacDefinition",
            "01e815dd42d84f8d11bd63f13af21111ffa6469b"
        ],
        [
            "Definition stackframe_of {cs: compspecs} (f: Clight.function) : environ->mpred := fold_right sepcon emp (map (var_block Tsh) (fn_vars f)).",
            "VernacDefinition",
            "07e23b0446e44d0491ebe2e5176dffeb9cbcbea3"
        ],
        [
            "Lemma subst_derives {A}{NA: NatDed A}: forall a v (P Q: environ -> A), P |-- Q -> subst a v P |-- subst a v Q.",
            "VernacStartTheoremProof",
            "35863ad05dcefa30855222ddab7f9fe4b080fc5d"
        ],
        [
            "unfold subst, derives.",
            "VernacExtend",
            "793c8a7890c18c33c443c6dacbcf779f12b2ad37"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition func_ptr (f: funspec) (v: val): mpred := EX b: block, !! (v = Vptr b Ptrofs.zero) && seplog.func_at f (b, 0).",
            "VernacDefinition",
            "078914b316d878aa205e3721b39c61957013b765"
        ],
        [
            "Lemma corable_func_ptr: forall f v, corable (func_ptr f v).",
            "VernacStartTheoremProof",
            "d8c50d89d2e72551b0920433923b7683ef04d14f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold func_ptr.",
            "VernacExtend",
            "309a832a328a5096f01b5f3ab94b4877466d4231"
        ],
        [
            "apply corable_exp; intro.",
            "VernacExtend",
            "5cc0f3969e261867ddc45a041eb5b62e3df752b6"
        ],
        [
            "apply corable_andp; auto.",
            "VernacExtend",
            "18562b5457101177d78c2100e4273849256e7900"
        ],
        [
            "apply assert_lemmas.corable_func_at.",
            "VernacExtend",
            "1b5053b3ef86472370167da88d4840319e06a89c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma func_ptr_isptr: forall spec f, func_ptr spec f |-- !! isptr f.",
            "VernacStartTheoremProof",
            "292d54dec5d569840c31f5954caee24b7bf97ff4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold func_ptr.",
            "VernacExtend",
            "309a832a328a5096f01b5f3ab94b4877466d4231"
        ],
        [
            "destruct spec.",
            "VernacExtend",
            "0d5aae295773466ae71035e078e699a446202064"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition NDmk_funspec (f: funsig) (cc: calling_convention) (A: Type) (Pre Post: A -> environ -> mpred): funspec := mk_funspec f cc (rmaps.ConstType A) (fun _ => Pre) (fun _ => Post) (const_super_non_expansive _ _) (const_super_non_expansive _ _).",
            "VernacDefinition",
            "cdd07e1db6ff1c6d5f920bfd11052621236904f6"
        ],
        [
            "Lemma approx_func_ptr: forall (A: Type) fsig0 cc (P Q: A -> environ -> mpred) (v: val) (n: nat), compcert_rmaps.RML.R.approx n (func_ptr (NDmk_funspec fsig0 cc A P Q) v) = compcert_rmaps.RML.R.approx n (func_ptr (NDmk_funspec fsig0 cc A (fun a rho => compcert_rmaps.RML.R.approx n (P a rho)) (fun a rho => compcert_rmaps.RML.R.approx n (Q a rho))) v).",
            "VernacStartTheoremProof",
            "402923f3f2acf11aa21c3132a3b8fa684cca6d02"
        ],
        [
            "exact seplog.approx_func_ptr.",
            "VernacExtend",
            "8fae774e931e22ed24aeb5a24451bf945bc564e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition allp_fun_id (Delta : tycontext): environ -> mpred := (ALL id : ident , (ALL fs : funspec , !! ((glob_specs Delta) ! id = Some fs) --> (EX b : block, local (`eq (fun rho => Map.get (ge_of rho) id) `(Some b)) && `(seplog.func_at fs (b, 0))))).",
            "VernacDefinition",
            "8ef03d8dfde063d6a2c3a49078e0437dcbd51f9d"
        ],
        [
            "Lemma corable_allp_fun_id: forall Delta rho, corable (allp_fun_id Delta rho).",
            "VernacStartTheoremProof",
            "ff8be0e34373bb92db263a894a7fa5fa7b05baec"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold allp_fun_id; simpl.",
            "VernacExtend",
            "f39ef46e61b647a6731cdc777a3b7c47051e3125"
        ],
        [
            "apply corable_allp; intros id.",
            "VernacExtend",
            "a32d65836b0a4795faf719168d579120d58caf23"
        ],
        [
            "apply corable_allp; intros fs.",
            "VernacExtend",
            "668e2dbcaeb8959fb66aff9264f2f7e8bf7f43fc"
        ],
        [
            "apply corable_imp; [apply corable_prop |].",
            "VernacExtend",
            "1c6e52609546a6342f2d53ce191d0ed7308f3dc8"
        ],
        [
            "apply corable_exp; intros b.",
            "VernacExtend",
            "1c78781023195f98c8b88646b57b5ff6b5d38aad"
        ],
        [
            "apply corable_andp; [apply corable_prop |].",
            "VernacExtend",
            "0512c3ee4b810a2bfd6337fda2da52a590642b78"
        ],
        [
            "apply assert_lemmas.corable_func_at.",
            "VernacExtend",
            "1b5053b3ef86472370167da88d4840319e06a89c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition type_of_funsig (fsig: funsig) := Tfunction (type_of_params (fst fsig)) (snd fsig) cc_default.",
            "VernacDefinition",
            "0199a1121b3a5d3ecb01edaaefc017edb21f12e7"
        ],
        [
            "Definition fn_funsig (f: function) : funsig := (fn_params f, fn_return f).",
            "VernacDefinition",
            "961bc0a7c1804bd7d8fbe867421e4c1d53ebb846"
        ],
        [
            "Definition tc_fn_return (Delta: tycontext) (ret: option ident) (t: type) := match ret with | None => True | Some i => match (temp_types Delta) ! i with Some t' => t=t' | _ => False end end.",
            "VernacDefinition",
            "7cfe7d5bd0d33b122ee1cf5b28ae9f16533a53a5"
        ],
        [
            "Definition globals_only (rho: environ) : environ := mkEnviron (ge_of rho) (Map.empty _) (Map.empty _).",
            "VernacDefinition",
            "af8cd2c2c12dd5bbf565bd8b025146ae647906bb"
        ],
        [
            "Fixpoint make_args (il: list ident) (vl: list val) (rho: environ) := match il, vl with | nil, nil => globals_only rho | i::il', v::vl' => env_set (make_args il' vl' rho) i v | _ , _ => rho end.",
            "VernacFixpoint",
            "b2ee32fb5863643701a364e18638883fcbd5e52a"
        ],
        [
            "Definition make_args' (fsig: funsig) args rho := make_args (map (@fst _ _) (fst fsig)) (args rho) rho.",
            "VernacDefinition",
            "87cb8960a823e7b34dc242d2a83624187eff21ed"
        ],
        [
            "Definition ret_temp : ident := 1%positive.",
            "VernacDefinition",
            "b3b0bb0d6b1ba517f7be33ce73131853976f8ba6"
        ],
        [
            "Definition get_result1 (ret: ident) (rho: environ) : environ := make_args (ret_temp::nil) (eval_id ret rho :: nil) rho.",
            "VernacDefinition",
            "e187a75375ba2ec0a6315155a9c5117604010bc1"
        ],
        [
            "Definition get_result (ret: option ident) : environ -> environ := match ret with | None => make_args nil nil | Some x => get_result1 x end.",
            "VernacDefinition",
            "c1c32a3bac6bf8d874a460e91f15b6c6a5f3934c"
        ],
        [
            "Definition maybe_retval (Q: environ -> mpred) retty ret := match ret with | Some id => fun rho => Q (get_result1 id rho) | None => match retty with | Tvoid => (fun rho => Q (globals_only rho)) | _ => fun rho => EX v: val, Q (make_args (ret_temp::nil) (v::nil) rho) end end.",
            "VernacDefinition",
            "8241f9add304e261398d027c2a5175812a4aa9c0"
        ],
        [
            "Definition bind_ret (vl: option val) (t: type) (Q: environ -> mpred) : environ -> mpred := match vl, t with | None, Tvoid =>`Q (make_args nil nil) | Some v, _ => @andp (environ->mpred) _ (!! tc_val t v) (`Q (make_args (ret_temp::nil) (v::nil))) | _, _ => FF end.",
            "VernacDefinition",
            "b2552ad8067a2efeccc0b0f170362edb3927905e"
        ],
        [
            "Definition overridePost (Q: environ->mpred) (R: ret_assert) := match R with {| RA_normal := _; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := Q; RA_break := b; RA_continue := c; RA_return := r |} end.",
            "VernacDefinition",
            "ad94bf3718526d26efee8cf39aafc21434ccdd82"
        ],
        [
            "Definition existential_ret_assert {A: Type} (R: A -> ret_assert) := {| RA_normal := fun rho => EX x:A, (R x).(RA_normal) rho; RA_break := fun rho => EX x:A, (R x).(RA_break) rho; RA_continue := fun rho => EX x:A, (R x).(RA_continue) rho; RA_return := fun vl rho => EX x:A, (R x).(RA_return) vl rho |}.",
            "VernacDefinition",
            "554d6895bc0a980d4d098acdfc2581be8279f868"
        ],
        [
            "Definition normal_ret_assert (Q: environ->mpred) : ret_assert := {| RA_normal := Q; RA_break := seplog.FF; RA_continue := seplog.FF; RA_return := fun _ => seplog.FF |}.",
            "VernacDefinition",
            "f72c2ca15d3b67cf11ada318083d9c0737cb2426"
        ],
        [
            "Definition frame_ret_assert (R: ret_assert) (F: environ->mpred) : ret_assert := match R with {| RA_normal := n; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := n * F; RA_break := b * F; RA_continue := c * F; RA_return := fun vl => r vl * F |} end.",
            "VernacDefinition",
            "a7ddaf59efc30d66efd26cdd59e534a58f04b05e"
        ],
        [
            "Definition switch_ret_assert (R: ret_assert) : ret_assert := match R with {| RA_normal := n; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := FF; RA_break := n; RA_continue := c; RA_return := r |} end.",
            "VernacDefinition",
            "6924fe025b8556d9aeed524ee9414b44dc7a696b"
        ],
        [
            "Definition with_ge (ge: genviron) (G: environ->mpred) : mpred := G (mkEnviron ge (Map.empty _) (Map.empty _)).",
            "VernacDefinition",
            "2b412d444a26a350c3254086ee9a5ba05487bbf5"
        ],
        [
            "Fixpoint prog_funct' {F V} (l: list (ident * globdef F V)) : list (ident * F) := match l with nil => nil | (i,Gfun f)::r => (i,f):: prog_funct' r | _::r => prog_funct' r end.",
            "VernacFixpoint",
            "1403465e787ed23c85825262b4002f86e8d54b3b"
        ],
        [
            "Definition prog_funct (p: program) := prog_funct' (prog_defs p).",
            "VernacDefinition",
            "cfb8d36ec1487b50b7a85821ecabc87b76ed05bf"
        ],
        [
            "Fixpoint prog_vars' {F V} (l: list (ident * globdef F V)) : list (ident * globvar V) := match l with nil => nil | (i,Gvar v)::r => (i,v):: prog_vars' r | _::r => prog_vars' r end.",
            "VernacFixpoint",
            "e20ee68042f04368278a7db5a077cb9af40c4dfd"
        ],
        [
            "Definition prog_vars (p: program) := prog_vars' (prog_defs p).",
            "VernacDefinition",
            "6dfd6a26792445a8cde0749650ad86b6eb845c9e"
        ],
        [
            "Definition all_initializers_aligned (prog: program) := forallb (fun idv => andb (initializers_aligned 0 (gvar_init (snd idv))) (Zlt_bool (init_data_list_size (gvar_init (snd idv))) Ptrofs.modulus)) (prog_vars prog) = true.",
            "VernacDefinition",
            "0c2dd47f4a4edc01171d17bbdca5a8fb1db202c1"
        ],
        [
            "Definition loop1_ret_assert (Inv: environ->mpred) (R: ret_assert) : ret_assert := match R with {| RA_normal := n; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := Inv; RA_break := n; RA_continue := Inv; RA_return := r |} end.",
            "VernacDefinition",
            "9e35b8d17420097a802c19831fefc6ee51e136a3"
        ],
        [
            "Definition loop2_ret_assert (Inv: environ->mpred) (R: ret_assert) : ret_assert := match R with {| RA_normal := n; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := Inv; RA_break := n; RA_continue := seplog.FF; RA_return := r |} end.",
            "VernacDefinition",
            "5dc5e615fb90ccef430eaf377357927f63214446"
        ],
        [
            "Definition function_body_ret_assert (ret: type) (Q: environ->mpred) : ret_assert := {| RA_normal := seplog.FF; RA_break := seplog.FF; RA_continue := seplog.FF; RA_return := fun vl => bind_ret vl ret Q |}.",
            "VernacDefinition",
            "0300ca5bc512901d5da4fc06f97b66d67647da93"
        ],
        [
            "Definition loop_nocontinue_ret_assert (Inv: environ->mpred) (R: ret_assert) : ret_assert := match R with {| RA_normal := n; RA_break := b; RA_continue := c; RA_return := r |} => {| RA_normal := Inv; RA_break := n; RA_continue := seplog.FF; RA_return := r |} end.",
            "VernacDefinition",
            "30a4d6a24dbc45740551177775870923ebef68e5"
        ],
        [
            "Definition tc_environ (Delta: tycontext) : environ -> Prop := fun rho => typecheck_environ Delta rho.",
            "VernacDefinition",
            "26b72a9813192d8dc3a035e038f2198ad17f8236"
        ],
        [
            "Definition tc_temp_id (id: ident) (ty: type) {CS: compspecs} (Delta: tycontext) (e:expr): environ -> mpred := denote_tc_assert (typecheck_temp_id id ty Delta e).",
            "VernacDefinition",
            "b3aeb50fb9a8881055fba56878fb4ae963821632"
        ],
        [
            "Definition typeof_temp (Delta: tycontext) (id: ident) : option type := match (temp_types Delta) ! id with | Some t => Some t | None => None end.",
            "VernacDefinition",
            "785a4f20ee966e0dd8d6f1130bdd5ec68f6de500"
        ],
        [
            "Definition tc_expr {CS: compspecs} (Delta: tycontext) (e: expr) : environ -> mpred := denote_tc_assert (typecheck_expr Delta e).",
            "VernacDefinition",
            "bb8b8d16c0cbb4f316f5835c2c4d8cc98ad69a8a"
        ],
        [
            "Definition tc_exprlist {CS: compspecs} (Delta: tycontext) (t: list type) (e: list expr) : environ -> mpred := denote_tc_assert (typecheck_exprlist Delta t e).",
            "VernacDefinition",
            "b35d367881913cad574dfa41031c1fe90c35ef56"
        ],
        [
            "Definition tc_lvalue {CS: compspecs} (Delta: tycontext) (e: expr) : environ -> mpred := denote_tc_assert (typecheck_lvalue Delta e).",
            "VernacDefinition",
            "be35050c40bae2dda452a3ed73ca657d3a89fe36"
        ],
        [
            "Definition tc_expropt {CS: compspecs} Delta (e: option expr) (t: type) : environ -> mpred := match e with None => `!!(t=Tvoid) | Some e' => tc_expr Delta (Ecast e' t) end.",
            "VernacDefinition",
            "05e17b24e8d254a709984f3d80f477065835922f"
        ],
        [
            "Definition is_comparison op := match op with | Cop.Oeq | Cop.One | Cop.Olt | Cop.Ogt | Cop.Ole | Cop.Oge => true | _ => false end.",
            "VernacDefinition",
            "7538c416484e3e2e4a20c05234f7c4f07b4ef255"
        ],
        [
            "Definition blocks_match op v1 v2 := match op with Cop.Olt | Cop.Ogt | Cop.Ole | Cop.Oge => match v1, v2 with Vptr b _, Vptr b2 _ => b=b2 | _, _ => False end | _ => True end.",
            "VernacDefinition",
            "7183eedc670eaef9b8b33dac1478a89ad125c1da"
        ],
        [
            "Definition cmp_ptr_no_mem c v1 v2 := match v1, v2 with Vptr b o, Vptr b1 o1 => if peq b b1 then Val.of_bool (Ptrofs.cmpu c o o1) else match Val.cmp_different_blocks c with | Some b => Val.of_bool b | None => Vundef end | _, _ => Vundef end.",
            "VernacDefinition",
            "04a2aee6c20ff59e6d87b550f79997c870f20ae5"
        ],
        [
            "Definition op_to_cmp cop := match cop with | Cop.Oeq => Ceq | Cop.One => Cne | Cop.Olt => Clt | Cop.Ogt => Cgt | Cop.Ole => Cle | Cop.Oge => Cge | _ => Ceq end.",
            "VernacDefinition",
            "aee3f94c55716419c23fa005d3fd848266d0bbea"
        ],
        [
            "Fixpoint arglist (n: positive) (tl: typelist) : list (ident*type) := match tl with | Tnil => nil | Tcons t tl' => (n,t):: arglist (n+1)%positive tl' end.",
            "VernacFixpoint",
            "7a997bfd243a29fced10ec738589b4c10f602cdf"
        ],
        [
            "Definition closed_wrt_modvars c (F: environ->mpred) : Prop := closed_wrt_vars (modifiedvars c) F.",
            "VernacDefinition",
            "c7b8f9b25a0758bf8f114c87946dde1c9ab93f7b"
        ],
        [
            "Definition initblocksize (V: Type) (a: ident * globvar V) : (ident * Z) := match a with (id,l) => (id , init_data_list_size (gvar_init l)) end.",
            "VernacDefinition",
            "40f65897820296c2e216e8dfc04d1836b098ad54"
        ],
        [
            "Definition main_pre (prog: program) : list Type -> globals -> environ -> mpred := (fun nil gv => globvars2pred gv (prog_vars prog)).",
            "VernacDefinition",
            "a857048a4615a69351c33128860a680b481e4906"
        ],
        [
            "Definition main_pre_ext {Espec: OracleKind} (prog: program) (ora: OK_ty) : list Type -> globals -> environ -> mpred := (fun nil gv rho => globvars2pred gv (prog_vars prog) rho * has_ext ora).",
            "VernacDefinition",
            "7e7d3d46287a19b229649b2b4b358b78c4abffbb"
        ],
        [
            "Definition main_post (prog: program) : list Type -> (ident->val) -> environ->mpred := (fun nil _ _ => TT).",
            "VernacDefinition",
            "dfdbab600c758bcc5e0524a87b8b82a9699a9f51"
        ],
        [
            "Definition main_spec' (prog: program) (post: list Type -> globals -> environ -> mpred): funspec := mk_funspec (nil, tint) cc_default (rmaps.ConstType globals) (main_pre prog) post (const_super_non_expansive _ _) (const_super_non_expansive _ _).",
            "VernacDefinition",
            "718240792adf6f95c33db453e06313161567de68"
        ],
        [
            "Definition main_spec (prog: program): funspec := mk_funspec (nil, tint) cc_default (rmaps.ConstType globals) (main_pre prog) (main_post prog) (const_super_non_expansive _ _) (const_super_non_expansive _ _).",
            "VernacDefinition",
            "1560ea8ec8bc548b18eed8757aa53fe9a652172f"
        ],
        [
            "Definition main_spec_ext' {Espec: OracleKind} (prog: program) (ora: OK_ty) (post: list Type -> globals -> environ -> mpred): funspec := mk_funspec (nil, tint) cc_default (rmaps.ConstType globals) (main_pre_ext prog ora) post (const_super_non_expansive _ _) (const_super_non_expansive _ _).",
            "VernacDefinition",
            "88d14db451d9c15f56c30a5f13202b9c669ede23"
        ],
        [
            "Definition main_spec_ext {Espec: OracleKind} (prog: program) (ora: OK_ty) : funspec := mk_funspec (nil, tint) cc_default (rmaps.ConstType globals) (main_pre_ext prog ora) (main_post prog) (const_super_non_expansive _ _) (const_super_non_expansive _ _).",
            "VernacDefinition",
            "1f94dd980a9c0c6c6b225796721556dec8734fba"
        ],
        [
            "Fixpoint match_globvars (gvs: list (ident * globvar type)) (V: varspecs) : bool := match V with | nil => true | (id,t)::V' => match gvs with | nil => false | (j,g)::gvs' => if eqb_ident id j then andb (eqb_type t (gvar_info g)) (match_globvars gvs' V') else match_globvars gvs' V end end.",
            "VernacFixpoint",
            "d074c8e11ebb914ac876bc61c6e4d578d3abdf4d"
        ],
        [
            "Definition int_range (sz: intsize) (sgn: signedness) (i: int) := match sz, sgn with | I8, Signed => -128 <= Int.signed i < 128 | I8, Unsigned => 0 <= Int.unsigned i < 256 | I16, Signed => -32768 <= Int.signed i < 32768 | I16, Unsigned => 0 <= Int.unsigned i < 65536 | I32, Signed => -2147483648 <= Int.signed i < 2147483648 | I32, Unsigned => 0 <= Int.unsigned i < 4294967296 | IBool, _ => 0 <= Int.unsigned i < 256 end.",
            "VernacDefinition",
            "a58386005240d29271c1c55c25663ad8a93f8b92"
        ],
        [
            "Lemma mapsto_value_range: forall sh v sz sgn i, readable_share sh -> mapsto sh (Tint sz sgn noattr) v (Vint i) = !! int_range sz sgn i && mapsto sh (Tint sz sgn noattr) v (Vint i).",
            "VernacStartTheoremProof",
            "1afe21a25b92b1eeae27b6549f7cde93b235ea98"
        ],
        [
            "exact mapsto_memory_block.mapsto_value_range.",
            "VernacExtend",
            "dd208ce51970ecad166b288e29eaed7c797d1db3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition semax_body_params_ok f : bool := andb (compute_list_norepet (map (@fst _ _) (fn_params f) ++ map (@fst _ _) (fn_temps f))) (compute_list_norepet (map (@fst _ _) (fn_vars f))).",
            "VernacDefinition",
            "fdeed52b179fad427a25e9c9a3c8d623bc6fbad8"
        ],
        [
            "Definition var_sizes_ok {cs: compspecs} (vars: list (ident*type)) := Forall (fun var : ident * type => sizeof (snd var) <= Ptrofs.max_unsigned)%Z vars.",
            "VernacDefinition",
            "5a3121851910c1ed239f38ca773706b71293919b"
        ],
        [
            "Definition make_ext_rval (gx: genviron) (v: option val):= match v with | Some v' => mkEnviron gx (Map.empty _) (Map.set 1%positive v' (Map.empty _)) | None => mkEnviron gx (Map.empty _) (Map.empty _) end.",
            "VernacDefinition",
            "e311d6e2063a1cbe68c77f875d7aabd545764805"
        ],
        [
            "Definition tc_option_val (sig: type) (ret: option val) := match sig, ret with | Tvoid, None => True | Tvoid, Some _ => False | ty, Some v => tc_val ty v | _, _ => False end.",
            "VernacDefinition",
            "de07617b7d7f63615fbc358cd55495282351335e"
        ],
        [
            "Fixpoint zip_with_tl {A : Type} (l1 : list A) (l2 : typelist) : list (A*type) := match l1, l2 with | a::l1', Tcons b l2' => (a,b)::zip_with_tl l1' l2' | _, _ => nil end.",
            "VernacFixpoint",
            "cd5834c6b1aad3753311ac824bd4e3b2864b2232"
        ],
        [
            "Definition funspecs_norepeat (fs : funspecs) := list_norepet (map fst fs).",
            "VernacDefinition",
            "dffdee3d5b2f1a8d4d3891a5edaba01c6e677705"
        ],
        [
            "Require VST.veric.semax_ext.",
            "VernacRequire",
            "d6bef9ab39e3b06c260be1cb51ac473c6a451764"
        ],
        [
            "Definition add_funspecs (Espec : OracleKind) (ext_link: Strings.String.string -> ident) (fs : funspecs) : OracleKind := veric.semax_ext.add_funspecs Espec ext_link fs.",
            "VernacDefinition",
            "c98cd27ddb671c45469b13ee8d2f55477fbb777c"
        ],
        [
            "Definition funsig2signature (s : funsig) cc : signature := mksignature (map typ_of_type (map snd (fst s))) (opttyp_of_type (snd s)) cc.",
            "VernacDefinition",
            "59ec4dfd9ec3bb216a3406eacad2c5d5f0ecaa25"
        ],
        [
            "Transparent mpred Nveric Sveric Cveric Iveric Rveric Sveric SIveric SRveric Bveric.",
            "VernacSetOpacity",
            "08f935fa511245eea3fca214c127902054919402"
        ],
        [
            "Lemma typecheck_lvalue_sound {CS: compspecs} : forall Delta rho e, typecheck_environ Delta rho -> tc_lvalue Delta e rho |-- !! is_pointer_or_null (eval_lvalue e rho).",
            "VernacStartTheoremProof",
            "f38334713a446acd0d240618c375d354d5e2f2c1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "eapply expr_lemmas4.typecheck_lvalue_sound; eauto.",
            "VernacExtend",
            "50c187e3da6ff52f7f37f4cd35d7c89389abac28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma typecheck_expr_sound {CS: compspecs} : forall Delta rho e, typecheck_environ Delta rho -> tc_expr Delta e rho |-- !! tc_val (typeof e) (eval_expr e rho).",
            "VernacStartTheoremProof",
            "684d70aa75fa7421ec0b417b56f7c220470d1872"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "eapply expr_lemmas4.typecheck_expr_sound; eauto.",
            "VernacExtend",
            "389def406e7c101ad26a108a32040b1033a4638d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_const_int: forall {CS: compspecs} i ty P rho, P |-- rel_expr (Econst_int i ty) (Vint i) rho.",
            "VernacStartTheoremProof",
            "e12d12bc4a42b7a1f4b46cad9e4a4ce2adab3c23"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?; constructor.",
            "VernacExtend",
            "8d758b70057fbfc6136bd915100d1b6319e20902"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_const_float: forall {CS: compspecs} f ty P rho, P |-- rel_expr (Econst_float f ty) (Vfloat f) rho.",
            "VernacStartTheoremProof",
            "d1abfdc7fa7a6582ddcff3df53f0c4c241f7450b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?; constructor.",
            "VernacExtend",
            "8d758b70057fbfc6136bd915100d1b6319e20902"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_const_single: forall {CS: compspecs} f ty P rho, P |-- rel_expr (Econst_single f ty) (Vsingle f) rho.",
            "VernacStartTheoremProof",
            "3fa1aaab3dfaa217a42ea5f140b14b1bca61ba63"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?; constructor.",
            "VernacExtend",
            "8d758b70057fbfc6136bd915100d1b6319e20902"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_const_long: forall {CS: compspecs} i ty P rho, P |-- rel_expr (Econst_long i ty) (Vlong i) rho.",
            "VernacStartTheoremProof",
            "bc5f84d1c212967ee0007021316c92121d9a85ea"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?; constructor.",
            "VernacExtend",
            "8d758b70057fbfc6136bd915100d1b6319e20902"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_tempvar: forall {CS: compspecs} id ty v P rho, Map.get (te_of rho) id = Some v -> P |-- rel_expr (Etempvar id ty) v rho.",
            "VernacStartTheoremProof",
            "5e8400a48ae17c6be9ddbe7dd58320bba151e994"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_addrof: forall {CS: compspecs} a ty v P rho, P |-- rel_lvalue a v rho -> P |-- rel_expr (Eaddrof a ty) v rho.",
            "VernacStartTheoremProof",
            "921f5c1179cc6ee9684471ddde50814a88cd8cc1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_unop: forall {CS: compspecs} P a1 v1 v ty op rho, P |-- rel_expr a1 v1 rho -> (forall m, Cop.sem_unary_operation op v1 (typeof a1) m = Some v) -> P |-- rel_expr (Eunop op a1 ty) v rho.",
            "VernacStartTheoremProof",
            "a6a7b6ac50c87f64e32d736fefd7146bec9e1fa3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_binop: forall {CS: compspecs} a1 a2 v1 v2 v ty op P rho, P |-- rel_expr a1 v1 rho -> P |-- rel_expr a2 v2 rho -> binop_stable cenv_cs op a1 a2 = true -> (forall m, Cop.sem_binary_operation cenv_cs op v1 (typeof a1) v2 (typeof a2) m = Some v) -> P |-- rel_expr (Ebinop op a1 a2 ty) v rho.",
            "VernacStartTheoremProof",
            "5f25c54fcb728518cb9ca15bc98a61998ddb3fa3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_cast: forall {CS: compspecs} a1 v1 v ty P rho, P |-- rel_expr a1 v1 rho -> (forall m, Cop.sem_cast v1 (typeof a1) ty m = Some v) -> P |-- rel_expr (Ecast a1 ty) v rho.",
            "VernacStartTheoremProof",
            "53b488e126a3ffa65039de43e2b2e7a1300d3d63"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_lvalue_By_value: forall {CS: compspecs} ch a sh v1 v2 P rho, access_mode (typeof a) = By_value ch -> P |-- rel_lvalue a v1 rho -> P |-- mapsto sh (typeof a) v1 v2 * TT -> v2 <> Vundef -> readable_share sh -> P |-- rel_expr a v2 rho.",
            "VernacStartTheoremProof",
            "cffdac6df47038eb50ac7e0261908e4ede659fcd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_expr_lvalue_By_reference: forall {CS: compspecs} a v1 P rho, access_mode (typeof a) = By_reference -> P |-- rel_lvalue a v1 rho -> P |-- rel_expr a v1 rho.",
            "VernacStartTheoremProof",
            "57a338c1945cc6f7d73e5ee04a309555de78291a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "hnf.",
            "VernacExtend",
            "93c9be61208bb2956fb47b51f12123e34260e667"
        ],
        [
            "eapply rel_expr'_lvalue_By_reference; eauto.",
            "VernacExtend",
            "e7c1c31824d22635e6e35edfb096d8c1ed48a5f1"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_lvalue_local: forall {CS: compspecs} id ty b P rho, P |-- !! (Map.get (ve_of rho) id = Some (b,ty)) -> P |-- rel_lvalue (Evar id ty) (Vptr b Ptrofs.zero) rho.",
            "VernacStartTheoremProof",
            "6c3a25dc83e6d5736b9979d3d7e32266bfb7002c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "specialize (H _ H0).",
            "VernacExtend",
            "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_lvalue_global: forall {CS: compspecs} id ty b P rho, P |-- !! (Map.get (ve_of rho) id = None /\\ Map.get (ge_of rho) id = Some b) -> P |-- rel_lvalue (Evar id ty) (Vptr b Ptrofs.zero) rho.",
            "VernacStartTheoremProof",
            "a6b4accb5e263a533caa9bc1372e90220f45c2c2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "specialize (H _ H0).",
            "VernacExtend",
            "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "constructor 2; auto.",
            "VernacExtend",
            "7da0a8caf04c8554762a019f74337cf755edf2f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_lvalue_deref: forall {CS: compspecs} a b z ty P rho, P |-- rel_expr a (Vptr b z) rho-> P |-- rel_lvalue (Ederef a ty) (Vptr b z) rho.",
            "VernacStartTheoremProof",
            "8c2df44cd1fd4753dacb032ee8638f51f709d4aa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_lvalue_field_struct: forall {CS: compspecs} i ty a b z id att delta co P rho, typeof a = Tstruct id att -> cenv_cs ! id = Some co -> field_offset cenv_cs i (co_members co) = Errors.OK delta -> P |-- rel_lvalue a (Vptr b z) rho -> P |-- rel_lvalue (Efield a i ty) (Vptr b (Ptrofs.add z (Ptrofs.repr delta))) rho.",
            "VernacStartTheoremProof",
            "82a4ea278426f673fa271650684138504621a2a4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros ? ?.",
            "VernacExtend",
            "546ddfdd2482db9e439533251e7f222ee06f71aa"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H2; auto.",
            "VernacExtend",
            "30acbf5144f9dcdba4f738b81d251d83daba847e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Opaque mpred Nveric Sveric Cveric Iveric Rveric Sveric SIveric SRveric Bveric.",
            "VernacSetOpacity",
            "71f2f2b53e673a8053c1876336cdefb911fc0fb6"
        ],
        [
            "Global Opaque rel_expr.",
            "VernacSetOpacity",
            "8b2d3e6bc6cac937cfb5a0c214314ab5669c0d78"
        ],
        [
            "Global Opaque rel_lvalue.",
            "VernacSetOpacity",
            "c477310140e5fe68bfd10ce7e8c5e8379600db26"
        ],
        [
            "Hint Resolve (@subp_sepcon mpred Nveric Iveric Sveric SIveric Rveric SRveric): contractive.",
            "VernacHints",
            "aec8159f25d07b24062f9e61e139bf9e5a10952e"
        ],
        [
            "Fixpoint unfold_Ssequence c := match c with | Ssequence c1 c2 => unfold_Ssequence c1 ++ unfold_Ssequence c2 | _ => c :: nil end.",
            "VernacFixpoint",
            "6c7feeffbc34eee11d3fa54734fc76cc7d24d70f"
        ],
        [
            "Fixpoint nocontinue s := match s with | Ssequence s1 s2 => if nocontinue s1 then nocontinue s2 else false | Sifthenelse _ s1 s2 => if nocontinue s1 then nocontinue s2 else false | Sswitch _ sl => nocontinue_ls sl | Sgoto _ => false | Scontinue => false | Slabel _ s => nocontinue s | _ => true end with nocontinue_ls sl := match sl with LSnil => true | LScons _ s sl' => if nocontinue s then nocontinue_ls sl' else false end.",
            "VernacFixpoint",
            "8563c72347f1a9f77de16209d6c1d46d42a6f4e6"
        ],
        [
            "Module Type CLIGHT_SEPARATION_HOARE_LOGIC_DEF.",
            "VernacDeclareModuleType",
            "d4e97433d8b83adbaa05997769ba3f64abb9d7b5"
        ],
        [
            "Parameter semax: forall {CS: compspecs} {Espec: OracleKind}, tycontext -> (environ->mpred) -> statement -> ret_assert -> Prop.",
            "VernacAssumption",
            "00e1cc2868c242d2e25282f7871da6b032a61535"
        ],
        [
            "Parameter semax_func: forall {Espec: OracleKind}, forall (V: varspecs) (G: funspecs) {C: compspecs} (fdecs: list (ident * fundef)) (G1: funspecs), Prop.",
            "VernacAssumption",
            "6c1eca716e9c9082c92c22dbafc6b4135bc55030"
        ],
        [
            "Parameter semax_external: forall {Hspec: OracleKind} (ids: list ident) (ef: external_function) (A: rmaps.TypeTree) (P Q: forall ts, functors.MixVariantFunctor._functor (rmaps.dependent_type_functor_rec ts (AssertTT A)) mpred), Prop.",
            "VernacAssumption",
            "7764585a3cbaa88dbc418dfcb6a7b1f14a81a5df"
        ],
        [
            "End CLIGHT_SEPARATION_HOARE_LOGIC_DEF.",
            "VernacEndSegment",
            "5bf077c0cce1a6955475e549d4ad371fd673586f"
        ],
        [
            "Module DerivedDefs (Def: CLIGHT_SEPARATION_HOARE_LOGIC_DEF).",
            "VernacDefineModule",
            "e2a92543ef1f71a012a40f1549571ca561c9f76c"
        ],
        [
            "Local Open Scope pred.",
            "VernacOpenCloseScope",
            "61fa11c1c3de9a21b4672e107d4df33b39563e17"
        ],
        [
            "Definition semax_body (V: varspecs) (G: funspecs) {C: compspecs} (f: function) (spec: ident * funspec): Prop := match spec with (_, mk_funspec _ cc A P Q NEP NEQ) => forall Espec ts x, @Def.semax C Espec (func_tycontext f V G nil ) (P ts x * stackframe_of f) (Ssequence f.(fn_body) (Sreturn None)) (frame_ret_assert (function_body_ret_assert (fn_return f) (Q ts x)) (stackframe_of f)) end.",
            "VernacDefinition",
            "48bfe1f978c21fba4f0c0a867e53e33d0dbf47cd"
        ],
        [
            "Definition semax_prog {Espec: OracleKind} {C: compspecs} (prog: program) (V: varspecs) (G: funspecs) : Prop := compute_list_norepet (prog_defs_names prog) = true /\\ all_initializers_aligned prog /\\ cenv_cs = prog_comp_env prog /\\ @Def.semax_func Espec V G C (prog_funct prog) G /\\ match_globvars (prog_vars prog) V = true /\\ match initial_world.find_id prog.(prog_main) G with | Some s => exists post, s = main_spec' prog post | None => False end.",
            "VernacDefinition",
            "bb083908409e687271ca405abca7727bd226f2cd"
        ],
        [
            "Definition semax_prog_ext {Espec: OracleKind} {C: compspecs} (prog: program) (z : OK_ty) (V: varspecs) (G: funspecs) : Prop := compute_list_norepet (prog_defs_names prog) = true /\\ all_initializers_aligned prog /\\ cenv_cs = prog_comp_env prog /\\ @Def.semax_func Espec V G C (prog_funct prog) G /\\ match_globvars (prog_vars prog) V = true /\\ match initial_world.find_id prog.(prog_main) G with | Some s => exists post, s = main_spec_ext' prog z post | None => False end.",
            "VernacDefinition",
            "3a986c1090e5194a4c7f87e3e963cb17fc5bf86a"
        ],
        [
            "End DerivedDefs.",
            "VernacEndSegment",
            "a32df237ffe85f5d67f5156ce2b4002233b2833b"
        ],
        [
            "Module Type MINIMUM_CLIGHT_SEPARATION_HOARE_LOGIC.",
            "VernacDeclareModuleType",
            "11594a4c67f8b0da7165aadb26d45d707eaec093"
        ],
        [
            "Declare Module CSHL_Def: CLIGHT_SEPARATION_HOARE_LOGIC_DEF.",
            "VernacDeclareModule",
            "7f6f76d7afa90851535547627e466d32aa5e5c29"
        ],
        [
            "Module CSHL_Defs := DerivedDefs(CSHL_Def).",
            "VernacDefineModule",
            "d77264c8658891091e89a60b80e7f47a3b139bea"
        ],
        [
            "Import CSHL_Def.",
            "VernacImport",
            "ae0a8b149126b84059f868c0eab5f0ab3a481d51"
        ],
        [
            "Import CSHL_Defs.",
            "VernacImport",
            "ba807440372c28def7567fb2eb6b9eaf8fdf77c5"
        ],
        [
            "Axiom semax_extract_exists: forall {CS: compspecs} {Espec: OracleKind}, forall (A : Type) (P : A -> environ->mpred) c (Delta: tycontext) (R: ret_assert), (forall x, @semax CS Espec Delta (P x) c R) -> @semax CS Espec Delta (EX x:A, P x) c R.",
            "VernacAssumption",
            "68d1812b2773cf131c3b43ce4ac9f1a5c42ce351"
        ],
        [
            "Axiom semax_func_nil: forall {Espec: OracleKind}, forall V G C, @semax_func Espec V G C nil nil.",
            "VernacAssumption",
            "9e1d43f8d9936fa01c93fd312e340de780ba71b4"
        ],
        [
            "Axiom semax_func_cons: forall {Espec: OracleKind}, forall fs id f cc A P Q NEP NEQ (V: varspecs) (G G': funspecs) {C: compspecs}, andb (id_in_list id (map (@fst _ _) G)) (andb (negb (id_in_list id (map (@fst ident fundef) fs))) (semax_body_params_ok f)) = true -> Forall (fun it : ident * type => complete_type cenv_cs (snd it) = true) (fn_vars f) -> var_sizes_ok (f.(fn_vars)) -> f.(fn_callconv) = cc -> precondition_closed f P -> semax_body V G f (id, mk_funspec (fn_funsig f) cc A P Q NEP NEQ)-> semax_func V G fs G' -> semax_func V G ((id, Internal f)::fs) ((id, mk_funspec (fn_funsig f) cc A P Q NEP NEQ) :: G').",
            "VernacAssumption",
            "3dac8f418ebf55d79bf476a9d9821aec5103011a"
        ],
        [
            "Axiom semax_func_cons_ext: forall {Espec: OracleKind}, forall (V: varspecs) (G: funspecs) {C: compspecs} fs id ef argsig retsig A P Q NEP NEQ argsig' (G': funspecs) cc (ids: list ident), ids = map fst argsig' -> argsig' = zip_with_tl ids argsig -> ef_sig ef = mksignature (typlist_of_typelist (type_of_params argsig')) (opttyp_of_type retsig) cc -> id_in_list id (map (@fst _ _) fs) = false -> length ids = length (typelist2list argsig) -> (forall gx ts x (ret : option val), (Q ts x (make_ext_rval gx ret) && !!step_lemmas.has_opttyp ret (opttyp_of_type retsig) |-- !!tc_option_val retsig ret)) -> @semax_external Espec ids ef A P Q -> semax_func V G fs G' -> semax_func V G ((id, External ef argsig retsig cc)::fs) ((id, mk_funspec (argsig', retsig) cc A P Q NEP NEQ) :: G').",
            "VernacAssumption",
            "b02571d62e87ca1c467ede5c6df22483d89ea0d7"
        ],
        [
            "Axiom semax_ifthenelse : forall {CS: compspecs} {Espec: OracleKind}, forall Delta P (b: expr) c d R, bool_type (typeof b) = true -> @semax CS Espec Delta (P && local (`(typed_true (typeof b)) (eval_expr b))) c R -> @semax CS Espec Delta (P && local (`(typed_false (typeof b)) (eval_expr b))) d R -> @semax CS Espec Delta (tc_expr Delta (Eunop Cop.Onotbool b (Tint I32 Signed noattr)) && P) (Sifthenelse b c d) R.",
            "VernacAssumption",
            "8aa5afc5391959ffef65b6b46b4dc1e998c894bd"
        ],
        [
            "Axiom semax_seq: forall{CS: compspecs} {Espec: OracleKind}, forall Delta R P Q h t, @semax CS Espec Delta P h (overridePost Q R) -> @semax CS Espec Delta Q t R -> @semax CS Espec Delta P (Ssequence h t) R.",
            "VernacAssumption",
            "989d80e6794aa22b74cf3200b2a9f98fe004282d"
        ],
        [
            "Axiom semax_break: forall {CS: compspecs} {Espec: OracleKind}, forall Delta Q, @semax CS Espec Delta (RA_break Q) Sbreak Q.",
            "VernacAssumption",
            "c8fbe8c9ab7db93eff7b350cf4d18b10a3738e8a"
        ],
        [
            "Axiom semax_continue: forall {CS: compspecs} {Espec: OracleKind}, forall Delta Q, @semax CS Espec Delta (RA_continue Q) Scontinue Q.",
            "VernacAssumption",
            "f512f2a14a1e53a6f0cc716daa046d147707ccf2"
        ],
        [
            "Axiom semax_loop : forall{CS: compspecs} {Espec: OracleKind}, forall Delta Q Q' incr body R, @semax CS Espec Delta Q body (loop1_ret_assert Q' R) -> @semax CS Espec Delta Q' incr (loop2_ret_assert Q R) -> @semax CS Espec Delta Q (Sloop body incr) R.",
            "VernacAssumption",
            "e74b7f6b6b53b7b7b0aaa43bd12e3a5b163b7f26"
        ],
        [
            "Axiom semax_switch: forall{CS: compspecs} {Espec: OracleKind}, forall Delta (Q: environ->mpred) a sl R, is_int_type (typeof a) = true -> (forall rho, Q rho |-- tc_expr Delta a rho) -> (forall n, @semax CS Espec Delta (local (`eq (eval_expr a) `(Vint n)) && Q) (seq_of_labeled_statement (select_switch (Int.unsigned n) sl)) (switch_ret_assert R)) -> @semax CS Espec Delta Q (Sswitch a sl) R.",
            "VernacAssumption",
            "81f165c9f29e0762c76e4d1f93c7a601e95a64c6"
        ],
        [
            "Axiom semax_call : forall {CS: compspecs} {Espec: OracleKind}, forall Delta A P Q NEP NEQ ts x (F: environ -> mpred) ret argsig retsig cc a bl, Cop.classify_fun (typeof a) = Cop.fun_case_f (type_of_params argsig) retsig cc -> (retsig = Tvoid -> ret = None) -> tc_fn_return Delta ret retsig -> @semax CS Espec Delta ((|>((tc_expr Delta a) && (tc_exprlist Delta (snd (split argsig)) bl))) && (`(func_ptr (mk_funspec (argsig,retsig) cc A P Q NEP NEQ)) (eval_expr a) && |>(F * `(P ts x: environ -> mpred) (make_args' (argsig,retsig) (eval_exprlist (snd (split argsig)) bl))))) (Scall ret a bl) (normal_ret_assert (EX old:val, substopt ret (`old) F * maybe_retval (Q ts x) retsig ret)).",
            "VernacAssumption",
            "6a37b052f764af0a1231670fa5da569e19b994d5"
        ],
        [
            "Axiom semax_return : forall {CS: compspecs} {Espec: OracleKind}, forall Delta (R: ret_assert) ret , @semax CS Espec Delta ( (tc_expropt Delta ret (ret_type Delta)) && `(RA_return R : option val -> environ -> mpred) (cast_expropt ret (ret_type Delta)) (@id environ)) (Sreturn ret) R.",
            "VernacAssumption",
            "85ae77d154d6ce94200cb68a737f5a8ecf3f950b"
        ],
        [
            "Axiom semax_set_forward : forall {CS: compspecs} {Espec: OracleKind}, forall (Delta: tycontext) (P: environ->mpred) id e, @semax CS Espec Delta (|> ( (tc_expr Delta e) && (tc_temp_id id (typeof e) Delta e) && P)) (Sset id e) (normal_ret_assert (EX old:val, local (`eq (eval_id id) (subst id (`old) (eval_expr e))) && subst id (`old) P)).",
            "VernacAssumption",
            "2e5d39ab3c95fc0addcb1497d926c147d160376e"
        ],
        [
            "Axiom semax_ptr_compare : forall{CS: compspecs} {Espec: OracleKind}, forall (Delta: tycontext) P id cmp e1 e2 ty sh1 sh2, sepalg.nonidentity sh1 -> sepalg.nonidentity sh2 -> is_comparison cmp = true -> eqb_type (typeof e1) int_or_ptr_type = false -> eqb_type (typeof e2) int_or_ptr_type = false -> typecheck_tid_ptr_compare Delta id = true -> @semax CS Espec Delta ( |> ( (tc_expr Delta e1) && (tc_expr Delta e2) && local (`(blocks_match cmp) (eval_expr e1) (eval_expr e2)) && (`(mapsto_ sh1 (typeof e1)) (eval_expr e1) * TT) && (`(mapsto_ sh2 (typeof e2)) (eval_expr e2) * TT) && P)) (Sset id (Ebinop cmp e1 e2 ty)) (normal_ret_assert (EX old:val, local (`eq (eval_id id) (subst id `(old) (eval_expr (Ebinop cmp e1 e2 ty)))) && subst id `(old) P)).",
            "VernacAssumption",
            "8d2732b6e968fa22d6b06d40826103b7af97c2a7"
        ],
        [
            "Axiom semax_load : forall {CS: compspecs} {Espec: OracleKind}, forall (Delta: tycontext) sh id P e1 t2 (v2: val), typeof_temp Delta id = Some t2 -> is_neutral_cast (typeof e1) t2 = true -> readable_share sh -> local (tc_environ Delta) && P |-- `(mapsto sh (typeof e1)) (eval_lvalue e1) (`v2) * TT -> @semax CS Espec Delta (|> ( (tc_lvalue Delta e1) && local (`(tc_val (typeof e1) v2)) && P)) (Sset id e1) (normal_ret_assert (EX old:val, local (`eq (eval_id id) (`v2)) && (subst id (`old) P))).",
            "VernacAssumption",
            "9ca0efa76a0970ae9c2ae8583eef80e224cd53a8"
        ],
        [
            "Axiom semax_cast_load : forall {CS: compspecs} {Espec: OracleKind}, forall (Delta: tycontext) sh id P e1 t1 (v2: val), typeof_temp Delta id = Some t1 -> cast_pointer_to_bool (typeof e1) t1 = false -> readable_share sh -> local (tc_environ Delta) && P |-- `(mapsto sh (typeof e1)) (eval_lvalue e1) (`v2) * TT -> @semax CS Espec Delta (|> ( (tc_lvalue Delta e1) && local (`(tc_val t1) (`(eval_cast (typeof e1) t1 v2))) && P)) (Sset id (Ecast e1 t1)) (normal_ret_assert (EX old:val, local (`eq (eval_id id) (`(eval_cast (typeof e1) t1 v2))) && (subst id (`old) P))).",
            "VernacAssumption",
            "51a17f33ffe0f1233abda587aadddd8a816e215a"
        ],
        [
            "Axiom semax_store: forall {CS: compspecs} {Espec: OracleKind}, forall Delta e1 e2 sh P, writable_share sh -> @semax CS Espec Delta (|> ( (tc_lvalue Delta e1) && (tc_expr Delta (Ecast e2 (typeof e1))) && (`(mapsto_ sh (typeof e1)) (eval_lvalue e1) * P))) (Sassign e1 e2) (normal_ret_assert (`(mapsto sh (typeof e1)) (eval_lvalue e1) (`force_val (`(sem_cast (typeof e2) (typeof e1)) (eval_expr e2))) * P)).",
            "VernacAssumption",
            "3d2f217563a0d0f5b8674e6352d9151cc7c322b6"
        ],
        [
            "Axiom semax_skip: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P, @semax CS Espec Delta P Sskip (normal_ret_assert P).",
            "VernacAssumption",
            "365ceab58ae49c6670cf10d643f0648180389227"
        ],
        [
            "Axiom semax_conseq: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P' (R': ret_assert) P c (R: ret_assert) , local (tc_environ Delta) && ((allp_fun_id Delta) && P) |-- |==> |> FF || P' -> local (tc_environ Delta) && ((allp_fun_id Delta) && RA_normal R') |-- |==> |> FF || RA_normal R -> local (tc_environ Delta) && ((allp_fun_id Delta) && RA_break R') |-- |==> |> FF || RA_break R -> local (tc_environ Delta) && ((allp_fun_id Delta) && RA_continue R') |-- |==> |> FF || RA_continue R -> (forall vl, local (tc_environ Delta) && ((allp_fun_id Delta) && RA_return R' vl) |-- |==> |> FF || RA_return R vl) -> @semax CS Espec Delta P' c R' -> @semax CS Espec Delta P c R.",
            "VernacAssumption",
            "96f241929e52fc4bb4c4b9805488277be12c2f70"
        ],
        [
            "Axiom semax_Slabel: forall {cs:compspecs} {Espec: OracleKind}, forall Delta (P:environ -> mpred) (c:statement) (Q:ret_assert) l, @semax cs Espec Delta P c Q -> @semax cs Espec Delta P (Slabel l c) Q.",
            "VernacAssumption",
            "296d882c37fbabdbbbb7ffe390fe64e0d5fa9731"
        ],
        [
            "Axiom semax_ext: forall (Espec : OracleKind) (ext_link: Strings.String.string -> ident) (id : Strings.String.string) (ids : list ident) (sig : funsig) (sig' : signature) cc A P Q NEP NEQ (fs : funspecs), let f := mk_funspec sig cc A P Q NEP NEQ in In (ext_link id,f) fs -> funspecs_norepeat fs -> ids = fst (split (fst sig)) -> sig' = funsig2signature sig cc -> @semax_external (add_funspecs Espec ext_link fs) ids (EF_external id sig') _ P Q.",
            "VernacAssumption",
            "5f91988501c2adcded3d6e5adb5187b997868f80"
        ],
        [
            "Axiom semax_ext_void: forall (Espec : OracleKind) (ext_link: Strings.String.string -> ident) (id : Strings.String.string) (ids : list ident) sig (sig' : signature) cc A P Q NEP NEQ (fs : funspecs), let f := mk_funspec (sig, tvoid) cc A P Q NEP NEQ in In (ext_link id,f) fs -> funspecs_norepeat fs -> ids = fst (split sig) -> sig' = mksignature (map typ_of_type (map snd sig)) None cc -> @semax_external (add_funspecs Espec ext_link fs) ids (EF_external id sig') _ P Q.",
            "VernacAssumption",
            "4e3eb2d3d4042e3aed769b4a4b65e71f686b569a"
        ],
        [
            "Axiom semax_external_FF: forall Espec ids ef A, @semax_external Espec ids ef A (fun _ _ => FF) (fun _ _ => FF).",
            "VernacAssumption",
            "68f6e3a9f122142e8a02783736202c1187d36a23"
        ],
        [
            "End MINIMUM_CLIGHT_SEPARATION_HOARE_LOGIC.",
            "VernacEndSegment",
            "ffcf6b496f995828602e591e7361603c5d734723"
        ],
        [
            "Module Type PRACTICAL_CLIGHT_SEPARATION_HOARE_LOGIC.",
            "VernacDeclareModuleType",
            "870982396e3f2e0ba33eed403aec7870d3d9a5f0"
        ],
        [
            "Declare Module CSHL_MinimumLogic: MINIMUM_CLIGHT_SEPARATION_HOARE_LOGIC.",
            "VernacDeclareModule",
            "7e8190e9ec0fc001f91a827b347806c2bbfc0257"
        ],
        [
            "Import CSHL_MinimumLogic.CSHL_Def.",
            "VernacImport",
            "704bd9e7e3f0ae5e47622a11c5b8acebfacff326"
        ],
        [
            "Import CSHL_MinimumLogic.CSHL_Defs.",
            "VernacImport",
            "eb20a04ba6c3d03662b8ca16cb6bfbf1319bc837"
        ],
        [
            "Axiom semax_set : forall {CS: compspecs} {Espec: OracleKind}, forall (Delta: tycontext) (P: environ->mpred) id e, @semax CS Espec Delta (|> ( (tc_expr Delta e) && (tc_temp_id id (typeof e) Delta e) && subst id (eval_expr e) P)) (Sset id e) (normal_ret_assert P).",
            "VernacAssumption",
            "de34ea2ba8ae70f6b7808a4ef9ab37bef9430d93"
        ],
        [
            "Axiom semax_fun_id: forall {CS: compspecs} {Espec: OracleKind}, forall id f Delta P Q c, (var_types Delta) ! id = None -> (glob_specs Delta) ! id = Some f -> (glob_types Delta) ! id = Some (type_of_funspec f) -> @semax CS Espec Delta (P && `(func_ptr f) (eval_var id (type_of_funspec f))) c Q -> @semax CS Espec Delta P c Q.",
            "VernacAssumption",
            "58cdccffb27a4d0633eac67c62359bf58f0cbcff"
        ],
        [
            "Axiom semax_extensionality_Delta: forall {CS: compspecs} {Espec: OracleKind}, forall Delta Delta' P c R, tycontext_sub Delta Delta' -> @semax CS Espec Delta P c R -> @semax CS Espec Delta' P c R.",
            "VernacAssumption",
            "4be9093f345e3cd4bb239ba7017003f39b8aa3e5"
        ],
        [
            "Axiom semax_unfold_Ssequence: forall {CS: compspecs} {Espec: OracleKind} c1 c2, unfold_Ssequence c1 = unfold_Ssequence c2 -> (forall P Q Delta, @semax CS Espec Delta P c1 Q -> @semax CS Espec Delta P c2 Q).",
            "VernacAssumption",
            "45fc022353f6c1e1ed8828cfe4cca34764874a12"
        ],
        [
            "Axiom seq_assoc: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P s1 s2 s3 R, @semax CS Espec Delta P (Ssequence s1 (Ssequence s2 s3)) R <-> @semax CS Espec Delta P (Ssequence (Ssequence s1 s2) s3) R.",
            "VernacAssumption",
            "d162d11fbfe0a36cfe0a069872751fc0ffd7f94a"
        ],
        [
            "Axiom semax_seq_skip: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P s Q, @semax CS Espec Delta P s Q <-> @semax CS Espec Delta P (Ssequence s Sskip) Q.",
            "VernacAssumption",
            "cf1c6acf2821f0af5c506defee033b29397c1b58"
        ],
        [
            "Axiom semax_skip_seq: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P s Q, @semax CS Espec Delta P s Q <-> @semax CS Espec Delta P (Ssequence Sskip s) Q.",
            "VernacAssumption",
            "6cff7be5326c112c622a71b829d8108e0f67b5ff"
        ],
        [
            "Axiom semax_loop_nocontinue1: forall CS Espec Delta Pre s1 s2 s3 Post, nocontinue s1 = true -> nocontinue s2 = true -> nocontinue s3 = true -> @semax CS Espec Delta Pre (Sloop (Ssequence s1 (Ssequence s2 s3)) Sskip) Post -> @semax CS Espec Delta Pre (Sloop (Ssequence s1 s2) s3) Post.",
            "VernacAssumption",
            "0385d0d90c0d9ca577244cf5ef21751359e7add2"
        ],
        [
            "Axiom semax_loop_nocontinue: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P body incr R, @semax CS Espec Delta P (Ssequence body incr) (loop_nocontinue_ret_assert P R) -> @semax CS Espec Delta P (Sloop body incr) R.",
            "VernacAssumption",
            "f7154c33c0328479e57ea99eb1a551e393eea701"
        ],
        [
            "Axiom semax_convert_for_while': forall CS Espec Delta Pre s1 e2 s3 s4 s5 Post, nocontinue s4 = true -> nocontinue s3 = true -> @semax CS Espec Delta Pre (Ssequence s1 (Ssequence (Swhile e2 (Ssequence s4 s3)) s5)) Post -> @semax CS Espec Delta Pre (Ssequence (Sfor s1 e2 s4 s3) s5) Post.",
            "VernacAssumption",
            "1bc12331f8ccf691d7ef22748597b3e81f76ebd0"
        ],
        [
            "Axiom semax_loop_unroll1: forall {CS: compspecs} {Espec: OracleKind} Delta P P' Q body incr R, @semax CS Espec Delta P body (loop1_ret_assert P' R) -> @semax CS Espec Delta P' incr (loop2_ret_assert Q R) -> @semax CS Espec Delta Q (Sloop body incr) R -> @semax CS Espec Delta P (Sloop body incr) R.",
            "VernacAssumption",
            "a26993328b48de7859b23b0225365c702e86fb31"
        ],
        [
            "Axiom semax_if_seq: forall {CS: compspecs} {Espec: OracleKind} Delta P e c1 c2 c Q, semax Delta P (Sifthenelse e (Ssequence c1 c) (Ssequence c2 c)) Q -> semax Delta P (Ssequence (Sifthenelse e c1 c2) c) Q.",
            "VernacAssumption",
            "956ba0ca162d49e7783129ae8dd39ca214cd83eb"
        ],
        [
            "Axiom semax_seq_Slabel: forall {cs:compspecs} {Espec: OracleKind}, forall Delta (P:environ -> mpred) (c1 c2:statement) (Q:ret_assert) l, @semax cs Espec Delta P (Ssequence (Slabel l c1) c2) Q <-> @semax cs Espec Delta P (Slabel l (Ssequence c1 c2)) Q.",
            "VernacAssumption",
            "53cac689ae7bc610cb82eb28cef1f882bfe3c553"
        ],
        [
            "Axiom semax_frame: forall {CS: compspecs} {Espec: OracleKind}, forall Delta P s R F, closed_wrt_modvars s F -> @semax CS Espec Delta P s R -> @semax CS Espec Delta (P * F) s (frame_ret_assert R F).",
            "VernacAssumption",
            "6a455521bd2e656c34d5012d15b5541250321451"
        ],
        [
            "Axiom semax_extract_prop: forall {CS: compspecs} {Espec: OracleKind}, forall Delta (PP: Prop) P c Q, (PP -> @semax CS Espec Delta P c Q) -> @semax CS Espec Delta (!!PP && P) c Q.",
            "VernacAssumption",
            "16c3b9793e78377d66e55375656cba79960253fd"
        ],
        [
            "Axiom semax_extract_later_prop: forall {CS: compspecs} {Espec: OracleKind}, forall Delta (PP: Prop) P c Q, (PP -> @semax CS Espec Delta P c Q) -> @semax CS Espec Delta ((|> !!PP) && P) c Q.",
            "VernacAssumption",
            "0a42110d7506f5f36de1c5195988c1915aa8e4dd"
        ],
        [
            "End PRACTICAL_CLIGHT_SEPARATION_HOARE_LOGIC.",
            "VernacEndSegment",
            "4c58811916865cf1de4310adc97f99170e6d7d0b"
        ],
        [
            "Require Import Coq.Classes.Morphisms.",
            "VernacRequire",
            "d6f94fe62e68e8d5e6a6c6513b6c2e04f2b5d71a"
        ],
        [
            "Instance prop_Proper: Proper (iff ==> (@eq mpred)) (prop).",
            "VernacInstance",
            "bb0be230d827f81b2108819434c1fde4c356e703"
        ],
        [
            "intros ? ? ?.",
            "VernacExtend",
            "288cad254af8b9e4d528c95e5e756cb647bbaed6"
        ],
        [
            "apply ND_prop_ext.",
            "VernacExtend",
            "ea2a3d3252ce825ad575bb2ef6d150169a12f603"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "memory_block_zero_Vptr",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.memory_block_zero_Vptr.",
                        "VernacExtend",
                        "d305a7d2e51109d6c693d64d7c0cad6bb9a3b98a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_mapsto_",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_mapsto_.",
                        "VernacExtend",
                        "244449e5c1794010bedaa487c25afc48427ea2c3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_tc_val'",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_tc_val'.",
                        "VernacExtend",
                        "f962e16fd44ea1b88cbc4b63c58d1e3161127c7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memory_block_split",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.memory_block_split.",
                        "VernacExtend",
                        "9d4ea65293cfb570ab761542b2d6dada7397eb5a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_share_join",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply mapsto_memory_block.mapsto_share_join; auto.",
                        "VernacExtend",
                        "d003693b85bc0d066c1f762a1f4caf75e2637f36"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memory_block_share_join",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply mapsto_memory_block.memory_block_share_join; auto.",
                        "VernacExtend",
                        "ef107d11202927c8953f389c8575f466f7cdc5df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_conflict",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply mapsto_memory_block.mapsto_conflict; auto.",
                        "VernacExtend",
                        "811af90f38bb853317241f8009b744e5f211779d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memory_block_conflict",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply mapsto_memory_block.memory_block_conflict; auto.",
                        "VernacExtend",
                        "b84f7bfe465b4138d02d5770a4321e6a8b2d5aa6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_valid_pointer",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "exact @mapsto_valid_pointer.",
                        "VernacExtend",
                        "8c80e7e3e83cae7d68d13d55e79f96ae6f8efabf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memory_block_valid_pointer",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "exact @memory_block_valid_pointer.",
                        "VernacExtend",
                        "f362de8736c51332771ce3eeca2b420504c93173"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memory_block_weak_valid_pointer",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "exact @memory_block_weak_valid_pointer.",
                        "VernacExtend",
                        "51c87196fcfa15a9cf5d916d6d151abd8ac19d3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_zeros_memory_block",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_zeros_memory_block.",
                        "VernacExtend",
                        "d5f03f26a51317c3c1d2cd2bcca806ec088ed44b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_pointer_void",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_pointer_void.",
                        "VernacExtend",
                        "0dd96af3a0eda5313926e820234b31a84c9b8c21"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_unsigned_signed",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "exact Clight_mapsto_memory_block.mapsto_unsigned_signed.",
                        "VernacExtend",
                        "225c8d222cbcef66f25e8abc9d8bc818ce35b859"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_tuint_tint",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "exact Clight_mapsto_memory_block.mapsto_tuint_tint.",
                        "VernacExtend",
                        "90bdd3f560ca238a82226e51d0e9ff5ba838ed3b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_tuint_tptr_nullval",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_tuint_tptr_nullval.",
                        "VernacExtend",
                        "0c5735cb04666a3c34318a2d6fc1ba017a665afa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_size_t_tptr_nullval",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_tuint_tptr_nullval.",
                        "VernacExtend",
                        "0c5735cb04666a3c34318a2d6fc1ba017a665afa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_mapsto_int32",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_mapsto_int32.",
                        "VernacExtend",
                        "aeafe2b2144a5d553585fd84f92dcc48041a63e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_mapsto__int32",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_mapsto__int32.",
                        "VernacExtend",
                        "66bd3e37b67623f0daf2d713d146990bbfff4315"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_null_mapsto_pointer",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "exact Clight_mapsto_memory_block.mapsto_null_mapsto_pointer.",
                        "VernacExtend",
                        "4e6774ad22c4eb1e86ca2d3d0485c1120ebef7b7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_derives",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "unfold subst, derives.",
                        "VernacExtend",
                        "793c8a7890c18c33c443c6dacbcf779f12b2ad37"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "corable_func_ptr",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold func_ptr.",
                        "VernacExtend",
                        "309a832a328a5096f01b5f3ab94b4877466d4231"
                    ]
                },
                {
                    "command": [
                        "apply corable_exp; intro.",
                        "VernacExtend",
                        "5cc0f3969e261867ddc45a041eb5b62e3df752b6"
                    ]
                },
                {
                    "command": [
                        "apply corable_andp; auto.",
                        "VernacExtend",
                        "18562b5457101177d78c2100e4273849256e7900"
                    ]
                },
                {
                    "command": [
                        "apply assert_lemmas.corable_func_at.",
                        "VernacExtend",
                        "1b5053b3ef86472370167da88d4840319e06a89c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "func_ptr_isptr",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold func_ptr.",
                        "VernacExtend",
                        "309a832a328a5096f01b5f3ab94b4877466d4231"
                    ]
                },
                {
                    "command": [
                        "destruct spec.",
                        "VernacExtend",
                        "0d5aae295773466ae71035e078e699a446202064"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "approx_func_ptr",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "exact seplog.approx_func_ptr.",
                        "VernacExtend",
                        "8fae774e931e22ed24aeb5a24451bf945bc564e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "corable_allp_fun_id",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold allp_fun_id; simpl.",
                        "VernacExtend",
                        "f39ef46e61b647a6731cdc777a3b7c47051e3125"
                    ]
                },
                {
                    "command": [
                        "apply corable_allp; intros id.",
                        "VernacExtend",
                        "a32d65836b0a4795faf719168d579120d58caf23"
                    ]
                },
                {
                    "command": [
                        "apply corable_allp; intros fs.",
                        "VernacExtend",
                        "668e2dbcaeb8959fb66aff9264f2f7e8bf7f43fc"
                    ]
                },
                {
                    "command": [
                        "apply corable_imp; [apply corable_prop |].",
                        "VernacExtend",
                        "1c6e52609546a6342f2d53ce191d0ed7308f3dc8"
                    ]
                },
                {
                    "command": [
                        "apply corable_exp; intros b.",
                        "VernacExtend",
                        "1c78781023195f98c8b88646b57b5ff6b5d38aad"
                    ]
                },
                {
                    "command": [
                        "apply corable_andp; [apply corable_prop |].",
                        "VernacExtend",
                        "0512c3ee4b810a2bfd6337fda2da52a590642b78"
                    ]
                },
                {
                    "command": [
                        "apply assert_lemmas.corable_func_at.",
                        "VernacExtend",
                        "1b5053b3ef86472370167da88d4840319e06a89c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapsto_value_range",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "exact mapsto_memory_block.mapsto_value_range.",
                        "VernacExtend",
                        "dd208ce51970ecad166b288e29eaed7c797d1db3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "typecheck_lvalue_sound",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "eapply expr_lemmas4.typecheck_lvalue_sound; eauto.",
                        "VernacExtend",
                        "50c187e3da6ff52f7f37f4cd35d7c89389abac28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "typecheck_expr_sound",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "eapply expr_lemmas4.typecheck_expr_sound; eauto.",
                        "VernacExtend",
                        "389def406e7c101ad26a108a32040b1033a4638d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_const_int",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?; constructor.",
                        "VernacExtend",
                        "8d758b70057fbfc6136bd915100d1b6319e20902"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_const_float",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?; constructor.",
                        "VernacExtend",
                        "8d758b70057fbfc6136bd915100d1b6319e20902"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_const_single",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?; constructor.",
                        "VernacExtend",
                        "8d758b70057fbfc6136bd915100d1b6319e20902"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_const_long",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?; constructor.",
                        "VernacExtend",
                        "8d758b70057fbfc6136bd915100d1b6319e20902"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_tempvar",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_addrof",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_unop",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_binop",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "apply H0; auto.",
                        "VernacExtend",
                        "e167f871dfeec1cef76aaf201c54c081f29f730b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_cast",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_expr_lvalue_By_reference",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "hnf.",
                        "VernacExtend",
                        "93c9be61208bb2956fb47b51f12123e34260e667"
                    ]
                },
                {
                    "command": [
                        "eapply rel_expr'_lvalue_By_reference; eauto.",
                        "VernacExtend",
                        "e7c1c31824d22635e6e35edfb096d8c1ed48a5f1"
                    ]
                },
                {
                    "command": [
                        "apply H0; auto.",
                        "VernacExtend",
                        "e167f871dfeec1cef76aaf201c54c081f29f730b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_lvalue_local",
            "line_nb": 355,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "specialize (H _ H0).",
                        "VernacExtend",
                        "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_lvalue_global",
            "line_nb": 362,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "specialize (H _ H0).",
                        "VernacExtend",
                        "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "constructor 2; auto.",
                        "VernacExtend",
                        "7da0a8caf04c8554762a019f74337cf755edf2f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_lvalue_deref",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_lvalue_field_struct",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros ? ?.",
                        "VernacExtend",
                        "546ddfdd2482db9e439533251e7f222ee06f71aa"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "apply H2; auto.",
                        "VernacExtend",
                        "30acbf5144f9dcdba4f738b81d251d83daba847e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_Proper",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "intros ? ? ?.",
                        "VernacExtend",
                        "288cad254af8b9e4d528c95e5e756cb647bbaed6"
                    ]
                },
                {
                    "command": [
                        "apply ND_prop_ext.",
                        "VernacExtend",
                        "ea2a3d3252ce825ad575bb2ef6d150169a12f603"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}