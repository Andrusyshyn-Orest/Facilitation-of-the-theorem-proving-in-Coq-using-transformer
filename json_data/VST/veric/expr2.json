{
    "filename": "veric/expr2.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.msl.msl_standard.",
            "VernacRequire",
            "bbb3b33b9509ab47eb7418bd6127eafa914382b1"
        ],
        [
            "Require Import VST.veric.Clight_base.",
            "VernacRequire",
            "03391ebcbe352738cbe4d19626ab439bfac7c2e7"
        ],
        [
            "Require Import VST.veric.compcert_rmaps.",
            "VernacRequire",
            "c684a380737921a2e41654d70bb2fe8e448426cf"
        ],
        [
            "Require Import VST.veric.tycontext.",
            "VernacRequire",
            "f8951535af03e9380f7d0a99afae06d1059d4422"
        ],
        [
            "Require Import VST.veric.Clight_lemmas.",
            "VernacRequire",
            "02532b9c71acd440dec2f77aca2af2a0760847e8"
        ],
        [
            "Require Export VST.veric.expr.",
            "VernacRequire",
            "e40fc58de74323be3d8b8ec4d1d13f605a07d3ce"
        ],
        [
            "Require Import VST.veric.mpred.",
            "VernacRequire",
            "11652084584e46804583cf99fdbf0fa76aa9fd7a"
        ],
        [
            "Lemma neutral_cast_lemma: forall t1 t2 v, is_neutral_cast t1 t2 = true -> tc_val t1 v -> eval_cast t1 t2 v = v.",
            "VernacStartTheoremProof",
            "0d5fb2dcf15efd4811b316ad2102923fb89fc953"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
            "VernacExtend",
            "b60c7a0d8b4322370c61dc9270cdab0215c16980"
        ],
        [
            "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
            "VernacExtend",
            "acc449abc33f0dd73435ee9b1469245bc20e1625"
        ],
        [
            "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
            "VernacExtend",
            "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
        ],
        [
            "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
            "VernacExtend",
            "3091257ec849c22a44c3b6faaf9d3b42717e2555"
        ],
        [
            "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
            "VernacExtend",
            "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
        ],
        [
            "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
            "VernacExtend",
            "817bf5d10f68e7cf4483acb644416e2b3790d727"
        ],
        [
            "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; unfold eval_cast, sem_cast, classify_cast, sem_cast_pointer, sem_cast_i2bool, sem_cast_l2bool; try solve [ try match goal with |- context [Archi.ptr64] => destruct Archi.ptr64 end; inversion H; clear H; try reflexivity; destruct v; unfold tc_val, is_int in H0; try contradiction; simpl; f_equal; try (first [apply sign_ext_inrange| apply zero_ext_inrange]; try omega; match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; split; congruence end); try (destruct H0; subst i; try rewrite Int.eq_true; auto)].",
            "VernacExtend",
            "62259feed8a452707968b31b9472d5435e46d30f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neutral_cast_subsumption: forall t1 t2 v, is_neutral_cast t1 t2 = true -> tc_val t1 v -> tc_val t2 v.",
            "VernacStartTheoremProof",
            "b36d3c5ad1bf2dd968aa716eabc6ed517b7e9813"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
            "VernacExtend",
            "b60c7a0d8b4322370c61dc9270cdab0215c16980"
        ],
        [
            "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
            "VernacExtend",
            "acc449abc33f0dd73435ee9b1469245bc20e1625"
        ],
        [
            "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
            "VernacExtend",
            "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
        ],
        [
            "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
            "VernacExtend",
            "3091257ec849c22a44c3b6faaf9d3b42717e2555"
        ],
        [
            "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
            "VernacExtend",
            "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
        ],
        [
            "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
            "VernacExtend",
            "817bf5d10f68e7cf4483acb644416e2b3790d727"
        ],
        [
            "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; inv H; destruct v; try solve [contradiction H0]; try apply I; unfold tc_val, is_int in *; auto; try omega; try match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; try split; congruence end; try match type of H0 with context [if ?A then _ else _] => destruct A; contradiction H0 end.",
            "VernacExtend",
            "a70e2f37358a71fcb77082e7c38993b35d572c22"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply eqb_type_false in H.",
            "VernacExtend",
            "de7e4cecedb1062fa7fbec96a373013da9758b5e"
        ],
        [
            "destruct (eqb_type (Tpointer t1 a) int_or_ptr_type) eqn:?H; auto.",
            "VernacExtend",
            "0de8dd636b9635d56393b660f9c3c1ae8176f893"
        ],
        [
            "apply eqb_type_true in H7.",
            "VernacExtend",
            "b122c17fdc0cfebab398e5429ba670cc3b53ef6e"
        ],
        [
            "inv H7.",
            "VernacExtend",
            "070a22d81a2c6f44ec770ebe944ae4bd5b7aa339"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite orb_false_r in H8.",
            "VernacExtend",
            "3355ae774f482373556cc5dfb823bd6474a045f1"
        ],
        [
            "rewrite andb_true_iff in H8.",
            "VernacExtend",
            "e150f0a559c91715717d30db414dcec1065903fd"
        ],
        [
            "destruct H8.",
            "VernacExtend",
            "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
        ],
        [
            "destruct t2; inv H7.",
            "VernacExtend",
            "621f652d1018fcbf7d77ddf0326d5729803c5d07"
        ],
        [
            "destruct a0.",
            "VernacExtend",
            "a0487b579f70f8f2c661f4b75c8b4e6474630618"
        ],
        [
            "destruct attr_volatile; try solve [inv H8].",
            "VernacExtend",
            "32eac70cb959c360c1fc27521b908a25797e3b43"
        ],
        [
            "simpl in H8.",
            "VernacExtend",
            "3ffa163638f0cd702536b03d79bee02d960b0fdb"
        ],
        [
            "destruct attr_alignas; try solve [inv H8].",
            "VernacExtend",
            "1b3198197f2eb4e2ed3c6c19ebcbd75b69a9d1aa"
        ],
        [
            "destruct n as [ | ]; try solve [inv H8].",
            "VernacExtend",
            "a17c35f194eecb8e91caebaff2a49c4fb67b7992"
        ],
        [
            "apply Peqb_true_eq in H8.",
            "VernacExtend",
            "67f4736c648374702f310cf24c7556ef3e1d66e4"
        ],
        [
            "subst p.",
            "VernacExtend",
            "caedf09ae2f4d633332b36c55c808e07b2752cd1"
        ],
        [
            "contradiction H.",
            "VernacExtend",
            "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neutral_cast_subsumption': forall t1 t2 v, is_neutral_cast (implicit_deref t1) t2 = true -> tc_val t1 v -> tc_val t2 v.",
            "VernacStartTheoremProof",
            "a931d054b77a9cb3a3206386fa1322998fe0cfd0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
            "VernacExtend",
            "b60c7a0d8b4322370c61dc9270cdab0215c16980"
        ],
        [
            "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
            "VernacExtend",
            "acc449abc33f0dd73435ee9b1469245bc20e1625"
        ],
        [
            "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
            "VernacExtend",
            "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
        ],
        [
            "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
            "VernacExtend",
            "3091257ec849c22a44c3b6faaf9d3b42717e2555"
        ],
        [
            "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
            "VernacExtend",
            "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
        ],
        [
            "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
            "VernacExtend",
            "817bf5d10f68e7cf4483acb644416e2b3790d727"
        ],
        [
            "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; inv H; destruct v; try solve [contradiction H0]; try apply I; unfold tc_val, is_int in *; auto; try omega; try match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; try split; congruence end; try match type of H0 with context [if ?A then _ else _] => destruct A; contradiction H0 end.",
            "VernacExtend",
            "a70e2f37358a71fcb77082e7c38993b35d572c22"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply eqb_type_false in H.",
            "VernacExtend",
            "de7e4cecedb1062fa7fbec96a373013da9758b5e"
        ],
        [
            "destruct (eqb_type (Tpointer t1 a) int_or_ptr_type) eqn:?H; auto.",
            "VernacExtend",
            "0de8dd636b9635d56393b660f9c3c1ae8176f893"
        ],
        [
            "apply eqb_type_true in H7.",
            "VernacExtend",
            "b122c17fdc0cfebab398e5429ba670cc3b53ef6e"
        ],
        [
            "inv H7.",
            "VernacExtend",
            "070a22d81a2c6f44ec770ebe944ae4bd5b7aa339"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite orb_false_r in H8.",
            "VernacExtend",
            "3355ae774f482373556cc5dfb823bd6474a045f1"
        ],
        [
            "rewrite andb_true_iff in H8.",
            "VernacExtend",
            "e150f0a559c91715717d30db414dcec1065903fd"
        ],
        [
            "destruct H8.",
            "VernacExtend",
            "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
        ],
        [
            "destruct t2; inv H7.",
            "VernacExtend",
            "621f652d1018fcbf7d77ddf0326d5729803c5d07"
        ],
        [
            "destruct a0.",
            "VernacExtend",
            "a0487b579f70f8f2c661f4b75c8b4e6474630618"
        ],
        [
            "destruct attr_volatile; try solve [inv H8].",
            "VernacExtend",
            "32eac70cb959c360c1fc27521b908a25797e3b43"
        ],
        [
            "simpl in H8.",
            "VernacExtend",
            "3ffa163638f0cd702536b03d79bee02d960b0fdb"
        ],
        [
            "destruct attr_alignas; try solve [inv H8].",
            "VernacExtend",
            "1b3198197f2eb4e2ed3c6c19ebcbd75b69a9d1aa"
        ],
        [
            "destruct n as [ | ]; try solve [inv H8].",
            "VernacExtend",
            "a17c35f194eecb8e91caebaff2a49c4fb67b7992"
        ],
        [
            "apply Peqb_true_eq in H8.",
            "VernacExtend",
            "67f4736c648374702f310cf24c7556ef3e1d66e4"
        ],
        [
            "subst p.",
            "VernacExtend",
            "caedf09ae2f4d633332b36c55c808e07b2752cd1"
        ],
        [
            "contradiction H.",
            "VernacExtend",
            "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply eqb_type_false in H.",
            "VernacExtend",
            "de7e4cecedb1062fa7fbec96a373013da9758b5e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
            "VernacExtend",
            "d638891e93fae3f2c32a3da166bf2564677bb351"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition denote_tc_iszero v : mpred := match v with | Vint i => prop (is_true (Int.eq i Int.zero)) | Vlong i => prop (is_true (Int64.eq i Int64.zero)) | _ => FF end.",
            "VernacDefinition",
            "63a5e3db37ec5c4b8bff576dc6be95e720bfaa23"
        ],
        [
            "Definition denote_tc_nonzero v : mpred := match v with | Vint i => prop (i <> Int.zero) | Vlong i =>prop (i <> Int64.zero) | _ => FF end.",
            "VernacDefinition",
            "60731b0ae755a8ba1fd0bb69192c71302c260ad5"
        ],
        [
            "Definition denote_tc_igt i v : mpred := match v with | Vint i1 => prop (Int.unsigned i1 < Int.unsigned i) | _ => FF end.",
            "VernacDefinition",
            "b4ae655e6ebe3a9f35de084b23379f89a533d723"
        ],
        [
            "Definition denote_tc_lgt l v : mpred := match v with | Vlong l1 => prop (Int64.unsigned l1 < Int64.unsigned l) | _ => FF end.",
            "VernacDefinition",
            "2cc00f665b3b6e8677a5d728791b837049c87c7f"
        ],
        [
            "Definition Zoffloat (f:float): option Z := match f with | Fappli_IEEE.B754_finite s m (Zpos e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e) | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m)) | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e)) | Fappli_IEEE.B754_zero _ => Some 0 | _ => None end.",
            "VernacDefinition",
            "f9812d54d12de21e579a944762934643880421f9"
        ],
        [
            "Definition Zofsingle (f: float32): option Z := match f with | Fappli_IEEE.B754_finite s m (Zpos e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e) | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m)) | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e)) | Fappli_IEEE.B754_zero _ => Some 0 | _ => None end.",
            "VernacDefinition",
            "6672c02c509b217da61732dc68935534552eee99"
        ],
        [
            "Definition denote_tc_Zge z v : mpred := match v with | Vfloat f => match Zoffloat f with | Some n => prop (z >= n) | None => FF end | Vsingle f => match Zofsingle f with | Some n => prop (z >= n) | None => FF end | _ => FF end.",
            "VernacDefinition",
            "69eb7343832a44304e47a011b76c368f3588be03"
        ],
        [
            "Definition denote_tc_Zle z v : mpred := match v with | Vfloat f => match Zoffloat f with | Some n => prop (z <= n) | None => FF end | Vsingle f => match Zofsingle f with | Some n => prop (z <= n) | None => FF end | _ => FF end.",
            "VernacDefinition",
            "afa2fb334ab923bb5bd05fd6f1c3a25b7033b3c8"
        ],
        [
            "Definition sameblock v1 v2 : bool := match v1, v2 with | Vptr b1 _, Vptr b2 _ => peq b1 b2 | _, _ => false end.",
            "VernacDefinition",
            "8ee1e45d79b442feadcd73c198e4d50d47829a0b"
        ],
        [
            "Definition denote_tc_samebase v1 v2 : mpred := prop (is_true (sameblock v1 v2)).",
            "VernacDefinition",
            "b43244f4eb489b248fffdf8f847fea62e8467ac7"
        ],
        [
            "Definition denote_tc_nodivover v1 v2 : mpred := match v1, v2 with | Vint n1, Vint n2 => prop (~(n1 = Int.repr Int.min_signed /\\ n2 = Int.mone)) | Vlong n1, Vlong n2 => prop (~(n1 = Int64.repr Int64.min_signed /\\ n2 = Int64.mone)) | Vint n1, Vlong n2 => TT | Vlong n1, Vint n2 => prop (~ (n1 = Int64.repr Int64.min_signed /\\ n2 = Int.mone)) | _ , _ => FF end.",
            "VernacDefinition",
            "fc39ba883b0155797e03339a13511f2352120358"
        ],
        [
            "Definition denote_tc_nosignedover (op: Z->Z->Z) v1 v2 : mpred := match v1,v2 with | Vint n1, Vint n2 => prop (Int.min_signed <= op (Int.signed n1) (Int.signed n2) <= Int.max_signed) | Vlong n1, Vlong n2 => prop (Int64.min_signed <= op (Int64.signed n1) (Int64.signed n2) <= Int64.max_signed) | Vint n1, Vlong n2 => prop (Int64.min_signed <= op (Int.signed n1) (Int64.signed n2) <= Int64.max_signed) | Vlong n1, Vint n2 => prop (Int64.min_signed <= op (Int64.signed n1) (Int.signed n2) <= Int64.max_signed) | _, _ => FF end.",
            "VernacDefinition",
            "305f3d4a22f2474787b3972f725c98095f617d12"
        ],
        [
            "Definition denote_tc_initialized id ty rho : mpred := prop (exists v, Map.get (te_of rho) id = Some v /\\ tc_val ty v).",
            "VernacDefinition",
            "115d5406e3862b5d38a83d33db3f54fe9812ad5b"
        ],
        [
            "Definition denote_tc_isptr v : mpred := prop (isptr v).",
            "VernacDefinition",
            "2790b9120e09799cbc1c889f44de516baa7f4c4a"
        ],
        [
            "Definition denote_tc_isint v : mpred := prop (is_int I32 Signed v).",
            "VernacDefinition",
            "50df5ed7d10b0e1b806cd36847325deb844a432f"
        ],
        [
            "Definition denote_tc_islong v : mpred := prop (is_long v).",
            "VernacDefinition",
            "1b05a895a4f2ee4182729266538ac4514559b47c"
        ],
        [
            "Definition test_eq_ptrs v1 v2 : mpred := if sameblock v1 v2 then (andp (weak_valid_pointer v1) (weak_valid_pointer v2)) else (andp (valid_pointer v1) (valid_pointer v2)).",
            "VernacDefinition",
            "5ccca53566dded6a17110581b99e3452a3e99162"
        ],
        [
            "Definition test_order_ptrs v1 v2 : mpred := if sameblock v1 v2 then (andp (weak_valid_pointer v1) (weak_valid_pointer v2)) else FF.",
            "VernacDefinition",
            "6c8750aa01072fd0d82bc67dc2b653783f4f196c"
        ],
        [
            "Definition denote_tc_test_eq v1 v2 : mpred := match v1, v2 with | Vint i, Vint j => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero)) | Vlong i, Vlong j => if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF | Vint i, Vptr _ _ => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v2) | Vlong i, Vptr _ _ => if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v2) else FF | Vptr _ _, Vint i => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v1) | Vptr _ _, Vlong i => if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v1) else FF | Vptr _ _, Vptr _ _ => test_eq_ptrs v1 v2 | _, _ => FF end.",
            "VernacDefinition",
            "d3ee29369c41a6ef7b329073edb621421e18c412"
        ],
        [
            "Definition denote_tc_test_order v1 v2 : mpred := match v1, v2 with | Vint i, Vint j => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero)) | Vlong i, Vlong j => if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF | Vptr _ _, Vptr _ _ => test_order_ptrs v1 v2 | _, _ => FF end.",
            "VernacDefinition",
            "0835e2798654172bbecd2446fa5076ae5b97e183"
        ],
        [
            "Definition typecheck_error (e: tc_error) : Prop := False.",
            "VernacDefinition",
            "99336c24f064e4ed1d6fd0ea4612b034d953035a"
        ],
        [
            "Fixpoint denote_tc_assert {CS: compspecs}(a: tc_assert) : environ -> mpred := match a with | tc_FF msg => `(prop (typecheck_error msg)) | tc_TT => `TT | tc_andp' b c => `andp (denote_tc_assert b) (denote_tc_assert c) | tc_orp' b c => `orp (denote_tc_assert b) (denote_tc_assert c) | tc_nonzero' e => `denote_tc_nonzero (eval_expr e) | tc_isptr e => `denote_tc_isptr (eval_expr e) | tc_isint e => `denote_tc_isint (eval_expr e) | tc_islong e => `denote_tc_islong (eval_expr e) | tc_test_eq' e1 e2 => `denote_tc_test_eq (eval_expr e1) (eval_expr e2) | tc_test_order' e1 e2 => `denote_tc_test_order (eval_expr e1) (eval_expr e2) | tc_ilt' e i => `(denote_tc_igt i) (eval_expr e) | tc_llt' e l => `(denote_tc_lgt l) (eval_expr e) | tc_Zle e z => `(denote_tc_Zge z) (eval_expr e) | tc_Zge e z => `(denote_tc_Zle z) (eval_expr e) | tc_samebase e1 e2 => `denote_tc_samebase (eval_expr e1) (eval_expr e2) | tc_nodivover' v1 v2 => `denote_tc_nodivover (eval_expr v1) (eval_expr v2) | tc_initialized id ty => denote_tc_initialized id ty | tc_iszero' e => `denote_tc_iszero (eval_expr e) | tc_nosignedover op e1 e2 => `(denote_tc_nosignedover op) (eval_expr e1) (eval_expr e2) end.",
            "VernacFixpoint",
            "2f956f474b5054c983a767b311b06265a317a117"
        ],
        [
            "Lemma and_False: forall x, (x /\\ False) = False.",
            "VernacStartTheoremProof",
            "c59977a1a7e616a6aaa17bbdc218a826cfd2e87f"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma and_True: forall x, (x /\\ True) = x.",
            "VernacStartTheoremProof",
            "c49d139cb1e75b47d2140e17dbe498b3db2ba1a7"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma True_and: forall x, (True /\\ x) = x.",
            "VernacStartTheoremProof",
            "788d2f5952e338fa23677ae119d13ebd59084c7c"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma False_and: forall x, (False /\\ x) = False.",
            "VernacStartTheoremProof",
            "3d9bd6af88c208121957ccf6568e775e2f75563c"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tc_andp_sound : forall {CS: compspecs} a1 a2 rho m, denote_tc_assert (tc_andp a1 a2) rho m <-> denote_tc_assert (tc_andp' a1 a2) rho m.",
            "VernacStartTheoremProof",
            "28afddbf1b67bd9d1008692e886aa086ff023272"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tc_andp.",
            "VernacExtend",
            "dc78a58b401dc3765d73fb28fe84f405a72c03af"
        ],
        [
            "destruct a1; simpl; unfold_lift; repeat first [rewrite False_and | rewrite True_and | rewrite and_False | rewrite and_True ]; try apply iff_refl; destruct a2; simpl in *; unfold_lift; repeat first [rewrite False_and | rewrite True_and | rewrite and_False | rewrite and_True ]; try apply iff_refl.",
            "VernacExtend",
            "64ee6f008515eae4ac90d13a0b73d0792dfe56b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma denote_tc_assert_andp: forall {CS: compspecs} a b rho, denote_tc_assert (tc_andp a b) rho = andp (denote_tc_assert a rho) (denote_tc_assert b rho).",
            "VernacStartTheoremProof",
            "b17f88bae5d3fc3b034137d872c59de61f578db1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "intro m.",
            "VernacExtend",
            "4b82221b29d931d49eaab61535235762be4a3968"
        ],
        [
            "rewrite tc_andp_sound.",
            "VernacExtend",
            "aa7d42517cee1c5f6bd2d4c20ec295aadc097959"
        ],
        [
            "intros [? ?]; split; auto.",
            "VernacExtend",
            "a07274998f1886ed54b2ee268d100714807931d9"
        ],
        [
            "intros m [? ?].",
            "VernacExtend",
            "ee14f862959843d67f4ae115096bd11f2dd644a5"
        ],
        [
            "rewrite tc_andp_sound; split; auto.",
            "VernacExtend",
            "0b6e4f54ee2769b9eaaed180dbd86f40b902cb3b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neutral_isCastResultType: forall {CS: compspecs} t t' v rho, is_neutral_cast t' t = true -> forall m, denote_tc_assert (isCastResultType t' t v) rho m.",
            "VernacStartTheoremProof",
            "def87765ccd082762684c7ed9043e891107237af"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold isCastResultType.",
            "VernacExtend",
            "c3741fb092f118cbca53f26200472a8d705437f3"
        ],
        [
            "unfold is_neutral_cast in H; simpl classify_cast.",
            "VernacExtend",
            "e3e4b9716a0759bd0bfe503a7d2af2543a47df51"
        ],
        [
            "destruct t' as [ | [ | | | ] [ | ] | | [ | ] | | | | |], t as [ | [ | | | ] [ | ] | | [ | ] | | | | |]; try solve [inv H; try apply I; simpl; simple_if_tac; apply I]; try (rewrite denote_tc_assert_andp; split); try solve [unfold eval_cast, sem_cast, classify_cast, sem_cast_pointer, sem_cast_i2bool, sem_cast_l2bool; destruct Archi.ptr64; simpl; try simple_if_tac; try apply I].",
            "VernacExtend",
            "2a074ad7bdbf262905353741a39a6a1bfaa0fd93"
        ],
        [
            "apply orb_true_iff in H.",
            "VernacExtend",
            "586ba5b7ea906a15811130359ba52c1cf46e5ae1"
        ],
        [
            "unfold classify_cast.",
            "VernacExtend",
            "270acfb7f910abf759986e6fcaa53752b48b6a7a"
        ],
        [
            "destruct (Bool.eqb (eqb_type (Tpointer t a0) int_or_ptr_type) (eqb_type (Tpointer t' a) int_or_ptr_type)) eqn:J.",
            "VernacExtend",
            "71e030a46af8f49e778689de847f7dde850aca30"
        ],
        [
            "destruct (eqb_type (Tpointer t' a) (Tpointer t a0)) eqn:?H.",
            "VernacExtend",
            "18a43d77c7ed2074b80d2f73a3792b7e2ef35f80"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "apply andb_true_iff in H.",
            "VernacExtend",
            "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite eqb_true_iff in J.",
            "VernacExtend",
            "f8d3fe2ab4516dcb4b997d6a1e558aab56786938"
        ],
        [
            "unfold is_pointer_type.",
            "VernacExtend",
            "1ee662d3f652f37fbcdf2b4bfa3a1d0360730b9e"
        ],
        [
            "rewrite <- J in *.",
            "VernacExtend",
            "b615ef834606e43a7723a41b2a3e7a69d63ca509"
        ],
        [
            "apply eqb_type_false in H0.",
            "VernacExtend",
            "d7a2b522d019f34d41b03b912e13c5b040f3f0f1"
        ],
        [
            "destruct (eqb_type (Tpointer t a0) int_or_ptr_type); inv H.",
            "VernacExtend",
            "b01991a9d61b7277b53b3312545dd0a0c6904d10"
        ],
        [
            "apply I.",
            "VernacExtend",
            "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "apply eqb_type_true in H.",
            "VernacExtend",
            "49e74e294118dedb6bf04858bdd3c98faf13a525"
        ],
        [
            "rewrite <- H in *.",
            "VernacExtend",
            "4c5b4a360366fbd428bf7a2578dc978601685894"
        ],
        [
            "rewrite eqb_reflx in J.",
            "VernacExtend",
            "9fcb5c232fe999b11eebff2a33b55180be6bd2ff"
        ],
        [
            "inv J.",
            "VernacExtend",
            "af4159c400d56d81d2186aefc1a78bfbad5c1e40"
        ],
        [
            "destruct (eqb_type (Tpointer t' a) int_or_ptr_type), (eqb_type (Tpointer t a0) int_or_ptr_type); inv H; inv J.",
            "VernacExtend",
            "e04cc800a6685c32f4c387083af470ff84d0997d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_true_e: forall b, is_true b -> b=true.",
            "VernacStartTheoremProof",
            "9020275299a58397281a53a87734e759e6f34fa9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct b; try contradiction; auto.",
            "VernacExtend",
            "862fbf449978bc07c5468082cbf4661483fc36a3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tc_bool_e: forall {CS: compspecs} b a rho m, app_pred (denote_tc_assert (tc_bool b a) rho) m -> b = true.",
            "VernacStartTheoremProof",
            "0251965e8fea0b0bc462c95f2dda1ca1189d9f4b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct b; simpl in H; auto.",
            "VernacExtend",
            "e53e0ad969ed6b8b6a4cef144b6f36aaef3129e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "neutral_cast_lemma",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
                        "VernacExtend",
                        "b60c7a0d8b4322370c61dc9270cdab0215c16980"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
                        "VernacExtend",
                        "acc449abc33f0dd73435ee9b1469245bc20e1625"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
                        "VernacExtend",
                        "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
                        "VernacExtend",
                        "3091257ec849c22a44c3b6faaf9d3b42717e2555"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
                        "VernacExtend",
                        "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
                        "VernacExtend",
                        "817bf5d10f68e7cf4483acb644416e2b3790d727"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; unfold eval_cast, sem_cast, classify_cast, sem_cast_pointer, sem_cast_i2bool, sem_cast_l2bool; try solve [ try match goal with |- context [Archi.ptr64] => destruct Archi.ptr64 end; inversion H; clear H; try reflexivity; destruct v; unfold tc_val, is_int in H0; try contradiction; simpl; f_equal; try (first [apply sign_ext_inrange| apply zero_ext_inrange]; try omega; match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; split; congruence end); try (destruct H0; subst i; try rewrite Int.eq_true; auto)].",
                        "VernacExtend",
                        "62259feed8a452707968b31b9472d5435e46d30f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neutral_cast_subsumption",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
                        "VernacExtend",
                        "b60c7a0d8b4322370c61dc9270cdab0215c16980"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
                        "VernacExtend",
                        "acc449abc33f0dd73435ee9b1469245bc20e1625"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
                        "VernacExtend",
                        "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
                        "VernacExtend",
                        "3091257ec849c22a44c3b6faaf9d3b42717e2555"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
                        "VernacExtend",
                        "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
                        "VernacExtend",
                        "817bf5d10f68e7cf4483acb644416e2b3790d727"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; inv H; destruct v; try solve [contradiction H0]; try apply I; unfold tc_val, is_int in *; auto; try omega; try match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; try split; congruence end; try match type of H0 with context [if ?A then _ else _] => destruct A; contradiction H0 end.",
                        "VernacExtend",
                        "a70e2f37358a71fcb77082e7c38993b35d572c22"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_false in H.",
                        "VernacExtend",
                        "de7e4cecedb1062fa7fbec96a373013da9758b5e"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t1 a) int_or_ptr_type) eqn:?H; auto.",
                        "VernacExtend",
                        "0de8dd636b9635d56393b660f9c3c1ae8176f893"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_true in H7.",
                        "VernacExtend",
                        "b122c17fdc0cfebab398e5429ba670cc3b53ef6e"
                    ]
                },
                {
                    "command": [
                        "inv H7.",
                        "VernacExtend",
                        "070a22d81a2c6f44ec770ebe944ae4bd5b7aa339"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite orb_false_r in H8.",
                        "VernacExtend",
                        "3355ae774f482373556cc5dfb823bd6474a045f1"
                    ]
                },
                {
                    "command": [
                        "rewrite andb_true_iff in H8.",
                        "VernacExtend",
                        "e150f0a559c91715717d30db414dcec1065903fd"
                    ]
                },
                {
                    "command": [
                        "destruct H8.",
                        "VernacExtend",
                        "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
                    ]
                },
                {
                    "command": [
                        "destruct t2; inv H7.",
                        "VernacExtend",
                        "621f652d1018fcbf7d77ddf0326d5729803c5d07"
                    ]
                },
                {
                    "command": [
                        "destruct a0.",
                        "VernacExtend",
                        "a0487b579f70f8f2c661f4b75c8b4e6474630618"
                    ]
                },
                {
                    "command": [
                        "destruct attr_volatile; try solve [inv H8].",
                        "VernacExtend",
                        "32eac70cb959c360c1fc27521b908a25797e3b43"
                    ]
                },
                {
                    "command": [
                        "simpl in H8.",
                        "VernacExtend",
                        "3ffa163638f0cd702536b03d79bee02d960b0fdb"
                    ]
                },
                {
                    "command": [
                        "destruct attr_alignas; try solve [inv H8].",
                        "VernacExtend",
                        "1b3198197f2eb4e2ed3c6c19ebcbd75b69a9d1aa"
                    ]
                },
                {
                    "command": [
                        "destruct n as [ | ]; try solve [inv H8].",
                        "VernacExtend",
                        "a17c35f194eecb8e91caebaff2a49c4fb67b7992"
                    ]
                },
                {
                    "command": [
                        "apply Peqb_true_eq in H8.",
                        "VernacExtend",
                        "67f4736c648374702f310cf24c7556ef3e1d66e4"
                    ]
                },
                {
                    "command": [
                        "subst p.",
                        "VernacExtend",
                        "caedf09ae2f4d633332b36c55c808e07b2752cd1"
                    ]
                },
                {
                    "command": [
                        "contradiction H.",
                        "VernacExtend",
                        "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neutral_cast_subsumption'",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (16-1) < Byte.min_signed) by (compute; congruence).",
                        "VernacExtend",
                        "b60c7a0d8b4322370c61dc9270cdab0215c16980"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (16-1) > Byte.max_signed) by (compute; congruence).",
                        "VernacExtend",
                        "acc449abc33f0dd73435ee9b1469245bc20e1625"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 16 > Byte.max_unsigned) by (compute; congruence).",
                        "VernacExtend",
                        "58d4bbf1f895303c7af9cce01df3f5f0af38036b"
                    ]
                },
                {
                    "command": [
                        "assert (- two_p (8-1) = Byte.min_signed) by reflexivity.",
                        "VernacExtend",
                        "3091257ec849c22a44c3b6faaf9d3b42717e2555"
                    ]
                },
                {
                    "command": [
                        "assert (two_p (8-1) - 1 = Byte.max_signed) by reflexivity.",
                        "VernacExtend",
                        "ae101c0e4dd84fe3b5d8f5592ff4f4a28ca67cdf"
                    ]
                },
                {
                    "command": [
                        "assert (two_p 8 - 1 = Byte.max_unsigned) by reflexivity.",
                        "VernacExtend",
                        "817bf5d10f68e7cf4483acb644416e2b3790d727"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ], t2 as [ | [ | | | ] [ | ] | | [ | ] | | | | | ]; inv H; destruct v; try solve [contradiction H0]; try apply I; unfold tc_val, is_int in *; auto; try omega; try match type of H0 with _ \\/ _ => destruct H0; subst i; simpl; try rewrite Int.signed_zero; try rewrite Int.unsigned_zero; try change (Int.signed Int.one) with 1; try change (Int.unsigned Int.one) with 1; clear; compute; try split; congruence end; try match type of H0 with context [if ?A then _ else _] => destruct A; contradiction H0 end.",
                        "VernacExtend",
                        "a70e2f37358a71fcb77082e7c38993b35d572c22"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_false in H.",
                        "VernacExtend",
                        "de7e4cecedb1062fa7fbec96a373013da9758b5e"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t1 a) int_or_ptr_type) eqn:?H; auto.",
                        "VernacExtend",
                        "0de8dd636b9635d56393b660f9c3c1ae8176f893"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_true in H7.",
                        "VernacExtend",
                        "b122c17fdc0cfebab398e5429ba670cc3b53ef6e"
                    ]
                },
                {
                    "command": [
                        "inv H7.",
                        "VernacExtend",
                        "070a22d81a2c6f44ec770ebe944ae4bd5b7aa339"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite orb_false_r in H8.",
                        "VernacExtend",
                        "3355ae774f482373556cc5dfb823bd6474a045f1"
                    ]
                },
                {
                    "command": [
                        "rewrite andb_true_iff in H8.",
                        "VernacExtend",
                        "e150f0a559c91715717d30db414dcec1065903fd"
                    ]
                },
                {
                    "command": [
                        "destruct H8.",
                        "VernacExtend",
                        "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
                    ]
                },
                {
                    "command": [
                        "destruct t2; inv H7.",
                        "VernacExtend",
                        "621f652d1018fcbf7d77ddf0326d5729803c5d07"
                    ]
                },
                {
                    "command": [
                        "destruct a0.",
                        "VernacExtend",
                        "a0487b579f70f8f2c661f4b75c8b4e6474630618"
                    ]
                },
                {
                    "command": [
                        "destruct attr_volatile; try solve [inv H8].",
                        "VernacExtend",
                        "32eac70cb959c360c1fc27521b908a25797e3b43"
                    ]
                },
                {
                    "command": [
                        "simpl in H8.",
                        "VernacExtend",
                        "3ffa163638f0cd702536b03d79bee02d960b0fdb"
                    ]
                },
                {
                    "command": [
                        "destruct attr_alignas; try solve [inv H8].",
                        "VernacExtend",
                        "1b3198197f2eb4e2ed3c6c19ebcbd75b69a9d1aa"
                    ]
                },
                {
                    "command": [
                        "destruct n as [ | ]; try solve [inv H8].",
                        "VernacExtend",
                        "a17c35f194eecb8e91caebaff2a49c4fb67b7992"
                    ]
                },
                {
                    "command": [
                        "apply Peqb_true_eq in H8.",
                        "VernacExtend",
                        "67f4736c648374702f310cf24c7556ef3e1d66e4"
                    ]
                },
                {
                    "command": [
                        "subst p.",
                        "VernacExtend",
                        "caedf09ae2f4d633332b36c55c808e07b2752cd1"
                    ]
                },
                {
                    "command": [
                        "contradiction H.",
                        "VernacExtend",
                        "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_false in H.",
                        "VernacExtend",
                        "de7e4cecedb1062fa7fbec96a373013da9758b5e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t2 a0) int_or_ptr_type) eqn:?H.",
                        "VernacExtend",
                        "d638891e93fae3f2c32a3da166bf2564677bb351"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_False",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_True",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "True_and",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "False_and",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tc_andp_sound",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tc_andp.",
                        "VernacExtend",
                        "dc78a58b401dc3765d73fb28fe84f405a72c03af"
                    ]
                },
                {
                    "command": [
                        "destruct a1; simpl; unfold_lift; repeat first [rewrite False_and | rewrite True_and | rewrite and_False | rewrite and_True ]; try apply iff_refl; destruct a2; simpl in *; unfold_lift; repeat first [rewrite False_and | rewrite True_and | rewrite and_False | rewrite and_True ]; try apply iff_refl.",
                        "VernacExtend",
                        "64ee6f008515eae4ac90d13a0b73d0792dfe56b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "denote_tc_assert_andp",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "intro m.",
                        "VernacExtend",
                        "4b82221b29d931d49eaab61535235762be4a3968"
                    ]
                },
                {
                    "command": [
                        "rewrite tc_andp_sound.",
                        "VernacExtend",
                        "aa7d42517cee1c5f6bd2d4c20ec295aadc097959"
                    ]
                },
                {
                    "command": [
                        "intros [? ?]; split; auto.",
                        "VernacExtend",
                        "a07274998f1886ed54b2ee268d100714807931d9"
                    ]
                },
                {
                    "command": [
                        "intros m [? ?].",
                        "VernacExtend",
                        "ee14f862959843d67f4ae115096bd11f2dd644a5"
                    ]
                },
                {
                    "command": [
                        "rewrite tc_andp_sound; split; auto.",
                        "VernacExtend",
                        "0b6e4f54ee2769b9eaaed180dbd86f40b902cb3b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neutral_isCastResultType",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold isCastResultType.",
                        "VernacExtend",
                        "c3741fb092f118cbca53f26200472a8d705437f3"
                    ]
                },
                {
                    "command": [
                        "unfold is_neutral_cast in H; simpl classify_cast.",
                        "VernacExtend",
                        "e3e4b9716a0759bd0bfe503a7d2af2543a47df51"
                    ]
                },
                {
                    "command": [
                        "destruct t' as [ | [ | | | ] [ | ] | | [ | ] | | | | |], t as [ | [ | | | ] [ | ] | | [ | ] | | | | |]; try solve [inv H; try apply I; simpl; simple_if_tac; apply I]; try (rewrite denote_tc_assert_andp; split); try solve [unfold eval_cast, sem_cast, classify_cast, sem_cast_pointer, sem_cast_i2bool, sem_cast_l2bool; destruct Archi.ptr64; simpl; try simple_if_tac; try apply I].",
                        "VernacExtend",
                        "2a074ad7bdbf262905353741a39a6a1bfaa0fd93"
                    ]
                },
                {
                    "command": [
                        "apply orb_true_iff in H.",
                        "VernacExtend",
                        "586ba5b7ea906a15811130359ba52c1cf46e5ae1"
                    ]
                },
                {
                    "command": [
                        "unfold classify_cast.",
                        "VernacExtend",
                        "270acfb7f910abf759986e6fcaa53752b48b6a7a"
                    ]
                },
                {
                    "command": [
                        "destruct (Bool.eqb (eqb_type (Tpointer t a0) int_or_ptr_type) (eqb_type (Tpointer t' a) int_or_ptr_type)) eqn:J.",
                        "VernacExtend",
                        "71e030a46af8f49e778689de847f7dde850aca30"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t' a) (Tpointer t a0)) eqn:?H.",
                        "VernacExtend",
                        "18a43d77c7ed2074b80d2f73a3792b7e2ef35f80"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H.",
                        "VernacExtend",
                        "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite eqb_true_iff in J.",
                        "VernacExtend",
                        "f8d3fe2ab4516dcb4b997d6a1e558aab56786938"
                    ]
                },
                {
                    "command": [
                        "unfold is_pointer_type.",
                        "VernacExtend",
                        "1ee662d3f652f37fbcdf2b4bfa3a1d0360730b9e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- J in *.",
                        "VernacExtend",
                        "b615ef834606e43a7723a41b2a3e7a69d63ca509"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_false in H0.",
                        "VernacExtend",
                        "d7a2b522d019f34d41b03b912e13c5b040f3f0f1"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t a0) int_or_ptr_type); inv H.",
                        "VernacExtend",
                        "b01991a9d61b7277b53b3312545dd0a0c6904d10"
                    ]
                },
                {
                    "command": [
                        "apply I.",
                        "VernacExtend",
                        "d00bb56d6588fc5d3ac997e6baa643f8db1aa956"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "apply eqb_type_true in H.",
                        "VernacExtend",
                        "49e74e294118dedb6bf04858bdd3c98faf13a525"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H in *.",
                        "VernacExtend",
                        "4c5b4a360366fbd428bf7a2578dc978601685894"
                    ]
                },
                {
                    "command": [
                        "rewrite eqb_reflx in J.",
                        "VernacExtend",
                        "9fcb5c232fe999b11eebff2a33b55180be6bd2ff"
                    ]
                },
                {
                    "command": [
                        "inv J.",
                        "VernacExtend",
                        "af4159c400d56d81d2186aefc1a78bfbad5c1e40"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type (Tpointer t' a) int_or_ptr_type), (eqb_type (Tpointer t a0) int_or_ptr_type); inv H; inv J.",
                        "VernacExtend",
                        "e04cc800a6685c32f4c387083af470ff84d0997d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_true_e",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct b; try contradiction; auto.",
                        "VernacExtend",
                        "862fbf449978bc07c5468082cbf4661483fc36a3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tc_bool_e",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl in H; auto.",
                        "VernacExtend",
                        "e53e0ad969ed6b8b6a4cef144b6f36aaef3129e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}