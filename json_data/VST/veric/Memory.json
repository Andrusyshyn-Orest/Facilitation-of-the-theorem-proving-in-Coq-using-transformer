{
    "filename": "veric/Memory.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import Coq.Arith.EqNat.",
            "VernacRequire",
            "9b659d62b654c9405ee02b95ba0db6e2949efea1"
        ],
        [
            "Require Import Coq.Relations.Relations.",
            "VernacRequire",
            "711709d1a8dabb57391deb948e0db0b064ccece7"
        ],
        [
            "Require Import compcert.lib.Axioms.",
            "VernacRequire",
            "488a58f0a12f652ce9cc2e8985217dc84acf5ff0"
        ],
        [
            "Require Import compcert.lib.Coqlib.",
            "VernacRequire",
            "0e8012a6c0062230df0c959370d96e0e84eae6bb"
        ],
        [
            "Require Import compcert.lib.Integers.",
            "VernacRequire",
            "0da1bf41e581d14cf922c3b0e0da86b37eba58b1"
        ],
        [
            "Require Import compcert.lib.Floats.",
            "VernacRequire",
            "4afe0eb5af7ab3750fe0f6bfd7c1f8e47609f2f4"
        ],
        [
            "Require Import compcert.lib.Maps.",
            "VernacRequire",
            "26c63953d85f7ad9c2666fdc8a1e61132cc296ac"
        ],
        [
            "Require Import compcert.common.AST.",
            "VernacRequire",
            "736cc8fb6e99f68efba7c58bdf7b2370507d5002"
        ],
        [
            "Require Import compcert.common.Values.",
            "VernacRequire",
            "775d93857ac31b6b7ea7c564f3005cd032b058e4"
        ],
        [
            "Require Import compcert.common.Memdata.",
            "VernacRequire",
            "88ac96f924863d41527bda2d515ac05a5aa7982a"
        ],
        [
            "Require Import compcert.common.Memtype.",
            "VernacRequire",
            "f43700a66990ce85287f9856641b1f4a547175e0"
        ],
        [
            "Require Import compcert.common.Memory.",
            "VernacRequire",
            "1bcc8a48806b43e63931d2d9d9db00d32c04ecd3"
        ],
        [
            "Require Export VST.sepcomp.Address.",
            "VernacRequire",
            "aba5ccbf92e4cfe43efde5d06e17ffa8d84bcada"
        ],
        [
            "Lemma range_dec: forall a b c: Z, {a <= b < c}+{~(a <= b < c)}.",
            "VernacStartTheoremProof",
            "6df7f3f65cf228419022ff16ba4de2fd3dc3768b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (zle a b).",
            "VernacExtend",
            "8fe2c2db24726151cbd492132ebbaaf77484b8f2"
        ],
        [
            "destruct (zlt b c).",
            "VernacExtend",
            "452bab2a81b3e4b3bd71e09bf101ad7ec77e8e16"
        ],
        [
            "left; split; auto.",
            "VernacExtend",
            "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
        ],
        [
            "right; omega.",
            "VernacExtend",
            "12a62aeea1a26870d19a3f39cd3d9d63bfc5e22b"
        ],
        [
            "right; omega.",
            "VernacExtend",
            "12a62aeea1a26870d19a3f39cd3d9d63bfc5e22b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Require Export VST.msl.eq_dec.",
            "VernacRequire",
            "7211d0f3f73be3b56a2e383b31e34bb1e10e46b6"
        ],
        [
            "Instance EqDec_ident: EqDec ident := ident_eq.",
            "VernacInstance",
            "1dc9071d683cdf3fd9b4f393463d036ef359737f"
        ],
        [
            "Instance EqDec_byte: EqDec byte := Byte.eq_dec.",
            "VernacInstance",
            "ca7aa3d43e8c2e1376ee1cac7f537b5ba8310030"
        ],
        [
            "Instance EqDec_int: EqDec int := Int.eq_dec.",
            "VernacInstance",
            "1d35e3e306c87cf9301da74b3b217574dac1783d"
        ],
        [
            "Instance EqDec_int64: EqDec int64 := Int64.eq_dec.",
            "VernacInstance",
            "bb58a1d75b022e707dc524dbf21ca92607503e1a"
        ],
        [
            "Instance EqDec_float: EqDec float := Float.eq_dec.",
            "VernacInstance",
            "e9b040ae301215c02e1f44d037ee7e9a5fe27570"
        ],
        [
            "Instance EqDec_float32: EqDec float32 := Float32.eq_dec.",
            "VernacInstance",
            "3c1b6496ab0f572a3d9a83cb6d6f1b5f3ebcf469"
        ],
        [
            "Instance EqDex_ptr : EqDec ptrofs := Ptrofs.eq_dec.",
            "VernacInstance",
            "0aa05825c45164e6cf597712b1b28e9675a8910c"
        ],
        [
            "Instance EqDec_memval: EqDec memval.",
            "VernacInstance",
            "4c0429d77539f414d79a5369c9e39f8627bd7e31"
        ],
        [
            "hnf; repeat decide equality; apply eq_dec.",
            "VernacExtend",
            "000c65e4bd8af6cb6dabd9cfd57e5629819373ba"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance EqDec_val: EqDec val.",
            "VernacInstance",
            "834e534b6c300e76e96708d92d7a2b821d11da49"
        ],
        [
            "hnf.",
            "VernacExtend",
            "93c9be61208bb2956fb47b51f12123e34260e667"
        ],
        [
            "decide equality; apply eq_dec.",
            "VernacExtend",
            "5b22d7fc9d78c21f1e5c4312262409c94a7885c4"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance EqDec_quantity: EqDec quantity.",
            "VernacInstance",
            "00b88a0f64a72e7e107bae6abc141964212c2e94"
        ],
        [
            "hnf.",
            "VernacExtend",
            "93c9be61208bb2956fb47b51f12123e34260e667"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition access_at (m: mem) (loc: address) (k: perm_kind): option permission := PMap.get (fst loc) (Mem.mem_access m) (snd loc) k.",
            "VernacDefinition",
            "3075e09d2263f67304bd2151eccde69fba689bdd"
        ],
        [
            "Lemma perm_access: forall m b ofs k p, Mem.perm m b ofs k p <-> (Mem.perm_order'' (access_at m (b,ofs) k) (Some p)).",
            "VernacStartTheoremProof",
            "784d596f54005b434089536a863fe11714709ac4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_perm: forall m b ofs k p, access_at m (b, ofs) k = Some p -> Mem.perm m b ofs k p.",
            "VernacStartTheoremProof",
            "4eb5e6ac7faf7f2ca36818a3e888c0ddcd5c8225"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.perm, Mem.perm_order'.",
            "VernacExtend",
            "3a3278c639652d1b72e934be34e517045635fbc0"
        ],
        [
            "unfold access_at in H.",
            "VernacExtend",
            "52f9501f1a08c32af58028693bf52bdabe18e640"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_cur_max: forall m a, Mem.perm_order'' (access_at m a Max) (access_at m a Cur).",
            "VernacStartTheoremProof",
            "167e81adfc1d792feac83fc333f62dbb1f4dbd07"
        ],
        [
            "destruct a as [b z].",
            "VernacExtend",
            "eee021d0b36b97eb4e140efb25467c0a955e9c43"
        ],
        [
            "destruct (access_at m (b,z) Cur) eqn:Hc.",
            "VernacExtend",
            "ea8458517f2bb9d6199629aa170405af1f577cd0"
        ],
        [
            "rewrite <- perm_access.",
            "VernacExtend",
            "fd97094bbd3f700f251b4618c87e2c658ad73d21"
        ],
        [
            "apply (Mem.perm_cur_max m b z).",
            "VernacExtend",
            "49a9b24437cfe618284c4cd51e9bdf44c373d31d"
        ],
        [
            "rewrite perm_access.",
            "VernacExtend",
            "476f0ce42f16ab33b0815c7dd5df4809a8b229de"
        ],
        [
            "rewrite Hc.",
            "VernacExtend",
            "fc5aedf7a3e2d990ae51448e074500a246f368e9"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct (access_at m (b, z) Max); constructor.",
            "VernacExtend",
            "f04a0355f434cbb50575d38ceb745bfb8366b17f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invalid_noaccess: forall m b ofs k, ~Mem.valid_block m b -> access_at m (b, ofs) k = None.",
            "VernacStartTheoremProof",
            "00dd9cdd7febb4d4a37f9eff769a428f68df233e"
        ],
        [
            "intros; apply Mem.nextblock_noaccess.",
            "VernacExtend",
            "9bd6f72fe52ed3099f6fd6925b8f00a9a7d26552"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_empty: forall a k, access_at Mem.empty a k = None.",
            "VernacStartTheoremProof",
            "d5953a86dfb34a31782cec66fa456cca91c5f55d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold access_at, Mem.empty; simpl.",
            "VernacExtend",
            "87929475e0ad92c76ad393c3a23d536edcf26063"
        ],
        [
            "rewrite PMap.gi.",
            "VernacExtend",
            "958266bd87166c15ef1d5c9765f2ff83d5dd8cf4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Transparent Mem.alloc.",
            "VernacSetOpacity",
            "0ed824755e46f8e62feb879c700d38fa1f2c116c"
        ],
        [
            "Theorem alloc_access_other: forall m1 lo hi m2 b, Mem.alloc m1 lo hi = (m2, b) -> forall b' ofs k, b'<>b \\/ (ofs < lo \\/ ofs >= hi) -> access_at m1 (b', ofs) k = access_at m2 (b', ofs) k.",
            "VernacStartTheoremProof",
            "aea3854c12a6515b558890950bd9ec7b759d8c00"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof (Mem.nextblock_noaccess m1 b ofs k).",
            "VernacExtend",
            "e5236409a9e7baa5bf275c21f2deb49894832a56"
        ],
        [
            "pose proof (Mem.alloc_result _ _ _ _ _ H).",
            "VernacExtend",
            "c2379c9a6a7ab17fa504c7fcea5995f9ff973912"
        ],
        [
            "unfold access_at; inversion H; clear H; subst; simpl.",
            "VernacExtend",
            "35457c5c912ca692b6c861e806e73a057d27ab26"
        ],
        [
            "destruct (eq_block b' (Mem.nextblock m1)).",
            "VernacExtend",
            "cf32a4d776dd428dcd8acfd64d4c856265072485"
        ],
        [
            "destruct H0; try contradiction.",
            "VernacExtend",
            "ced5a61f27ab7d2ddde8683b150fe0e24118db92"
        ],
        [
            "subst b'.",
            "VernacExtend",
            "998445e3e44d7190637615c1934547ff4b392560"
        ],
        [
            "rewrite PMap.gss.",
            "VernacExtend",
            "b5a245c2e8793ec855a664f9951af0c15417e45b"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; apply H1; apply Plt_strict.",
            "VernacExtend",
            "6313a2908c7958d4497c0c35729c33662b8c30dc"
        ],
        [
            "rewrite PMap.gso by auto.",
            "VernacExtend",
            "7c813a7ad67552a3e6193c5f25800496b5bb3804"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem alloc_access_same: forall m1 lo hi m2 b, Mem.alloc m1 lo hi = (m2, b) -> forall ofs k, lo <= ofs < hi -> access_at m2 (b,ofs) k = Some Freeable.",
            "VernacStartTheoremProof",
            "5f79d8a8980653124ef40dd2b9b5bb761c0d9895"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion H; clear H; subst.",
            "VernacExtend",
            "a36bd190e11a8fd6825e4b7a1eb236029aaadb63"
        ],
        [
            "unfold access_at; simpl.",
            "VernacExtend",
            "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
        ],
        [
            "rewrite PMap.gss.",
            "VernacExtend",
            "b5a245c2e8793ec855a664f9951af0c15417e45b"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
            "VernacExtend",
            "952559b80e47541c793ada6226e081ac64695370"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Mem.alloc.",
            "VernacSetOpacity",
            "091d161a438f4c69c59a1a7b07e5c0b0cb1e8c5b"
        ],
        [
            "Transparent Mem.free.",
            "VernacSetOpacity",
            "0df0e26ff0ec20dfafe7c6bf79c058a7349b11f8"
        ],
        [
            "Lemma access_free: forall m1 b lo hi, (forall ofs, lo <= ofs < hi -> access_at m1 (b,ofs) Cur = Some Freeable) -> { m2: mem | Mem.free m1 b lo hi = Some m2 }.",
            "VernacStartTheoremProof",
            "04c731e07a4597229d8acbb9d4c2bc89c60c6e7b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.free.",
            "VernacExtend",
            "76be443575b92c782b0fdd0543a5d41104950c81"
        ],
        [
            "destruct (Mem.range_perm_dec m1 b lo hi Cur Freeable).",
            "VernacExtend",
            "5db19ef5fa4fbb48bdf5f8ed545f0c5026c09947"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "contradiction n; clear n.",
            "VernacExtend",
            "bd52981a80ee963746ae5a4d7f8a1867cebe6968"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "unfold Mem.perm.",
            "VernacExtend",
            "0e90023c67f783cc4d032c93210fb0c5f3fd3a94"
        ],
        [
            "unfold access_at in H.",
            "VernacExtend",
            "52f9501f1a08c32af58028693bf52bdabe18e640"
        ],
        [
            "simpl in H; rewrite H by auto.",
            "VernacExtend",
            "ed7b9c5102aca9c70c82f7bd4b1626940d2e6130"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma free_access: forall m1 b lo hi m2, Mem.free m1 b lo hi = Some m2 -> (forall ofs, lo <= ofs < hi -> access_at m1 (b,ofs) Cur = Some Freeable /\\ access_at m2 (b,ofs) Max = None).",
            "VernacStartTheoremProof",
            "bc929c8f0d260b336cb739537d69875ee2aca3cb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.free in H.",
            "VernacExtend",
            "8248eed6671f0f2366063a996e7c964808b72a6a"
        ],
        [
            "destruct (Mem.range_perm_dec m1 b lo hi Cur Freeable); inversion H; clear H; subst.",
            "VernacExtend",
            "445e2b8b6d2567ab494ed8e3cd32778aaeb3b6f9"
        ],
        [
            "specialize (r _ H0).",
            "VernacExtend",
            "e6ff11848d8c08b77492bd149cf0e685a7eab944"
        ],
        [
            "hnf in r.",
            "VernacExtend",
            "4828de26bc03a7e98aec1cdaeace32f2560c4df2"
        ],
        [
            "unfold access_at.",
            "VernacExtend",
            "62798782afe09c554efd8c2a969dcf4529e62bb3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct ((Mem.mem_access m1) !! b ofs Cur); try contradiction.",
            "VernacExtend",
            "6a637de614d7e67809b65fd9b733d7e18312a01c"
        ],
        [
            "assert (p=Freeable) by (destruct p; inversion r; auto).",
            "VernacExtend",
            "4a54e78dbddc615e3d73ed3b5d9625ce03a04162"
        ],
        [
            "subst p.",
            "VernacExtend",
            "caedf09ae2f4d633332b36c55c808e07b2752cd1"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite PMap.gss.",
            "VernacExtend",
            "b5a245c2e8793ec855a664f9951af0c15417e45b"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega.",
            "VernacExtend",
            "dec67d9b142ceffc0e9c9f4e9ab729ce6b92f700"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma free_access_other: forall m1 bf lo hi m2, Mem.free m1 bf lo hi = Some m2 -> forall b ofs k, b <> bf \\/ ofs < lo \\/ hi <= ofs -> access_at m1 (b,ofs) k = access_at m2 (b,ofs) k.",
            "VernacStartTheoremProof",
            "9569dfa7d344032c555fd033420571b0916f0bc4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.free in H.",
            "VernacExtend",
            "8248eed6671f0f2366063a996e7c964808b72a6a"
        ],
        [
            "destruct (Mem.range_perm_dec m1 bf lo hi Cur Freeable); inversion H; clear H; subst.",
            "VernacExtend",
            "b91ea34eac02eb7e500a477cec27020d1f7eff1c"
        ],
        [
            "unfold access_at; simpl.",
            "VernacExtend",
            "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
        ],
        [
            "destruct (eq_block b bf).",
            "VernacExtend",
            "ea6f18faa7dd84199018a857cca066e6237a2c34"
        ],
        [
            "subst bf; rewrite PMap.gss.",
            "VernacExtend",
            "560d925fd49d36570ff8935bba5db32d24acd469"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "contradiction H; auto.",
            "VernacExtend",
            "86122fc31d7ce21d331e0e5c69cdfcbbcce3602c"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
            "VernacExtend",
            "952559b80e47541c793ada6226e081ac64695370"
        ],
        [
            "rewrite PMap.gso by auto.",
            "VernacExtend",
            "7c813a7ad67552a3e6193c5f25800496b5bb3804"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Mem.free.",
            "VernacSetOpacity",
            "a666c7d36942e593c26a895f5289eb475c9ce10a"
        ],
        [
            "Lemma access_drop_1: forall m b lo hi p m', Mem.drop_perm m b lo hi p = Some m' -> (forall ofs, lo <= ofs < hi -> forall k, access_at m (b, ofs) k = Some Freeable /\\ access_at m' (b, ofs) k = Some p).",
            "VernacStartTheoremProof",
            "8da4470f37b47c240b443770431eb5b5d7230308"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.drop_perm in H.",
            "VernacExtend",
            "86a93a74795d319d6ed7f43ccd95ff4bd4806bf9"
        ],
        [
            "destruct (Mem.range_perm_dec m b lo hi Cur Freeable); inversion H; clear H; subst.",
            "VernacExtend",
            "7c4f5955556af11742fd6ea63e1de6ed0a2039ca"
        ],
        [
            "unfold access_at; simpl.",
            "VernacExtend",
            "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
        ],
        [
            "rewrite PMap.gss.",
            "VernacExtend",
            "b5a245c2e8793ec855a664f9951af0c15417e45b"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
            "VernacExtend",
            "952559b80e47541c793ada6226e081ac64695370"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "specialize (r _ H0).",
            "VernacExtend",
            "e6ff11848d8c08b77492bd149cf0e685a7eab944"
        ],
        [
            "hnf in r.",
            "VernacExtend",
            "4828de26bc03a7e98aec1cdaeace32f2560c4df2"
        ],
        [
            "destruct ( (Mem.mem_access m) !! b ofs Cur) eqn:?; try contradiction.",
            "VernacExtend",
            "ff1a7fc869bf3f98a046d6c64e8c20202d5e55e0"
        ],
        [
            "assert (p0=Freeable) by (destruct p0; inv r; auto).",
            "VernacExtend",
            "9aec408f48a0163aaffbd8915a2e519a41e5be9f"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "pose proof (Mem.access_max m b ofs).",
            "VernacExtend",
            "e7383fbb21ff18809d27fd23127cd874ef1da95a"
        ],
        [
            "rewrite Heqo in H.",
            "VernacExtend",
            "78cd6b59e250c1753367660a7df610b8a030f839"
        ],
        [
            "destruct k; auto.",
            "VernacExtend",
            "943c329a25d961e7ca9cede3777de77116d51f41"
        ],
        [
            "destruct ((Mem.mem_access m) !! b ofs Max); inv H; auto.",
            "VernacExtend",
            "20d4b5d1624e8e259335b6afa2b13403221fca24"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_drop_2: forall m b lo hi p, (forall ofs, lo <= ofs < hi -> access_at m (b,ofs) Cur = Some Freeable) -> { m' | Mem.drop_perm m b lo hi p = Some m' }.",
            "VernacStartTheoremProof",
            "651abff7cac80679aa0743ed7eb1550f16071a4d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.drop_perm.",
            "VernacExtend",
            "60024ba4c3aaaca0f06ad5d0a3554556b33cb7ad"
        ],
        [
            "destruct (Mem.range_perm_dec m b lo hi Cur Freeable).",
            "VernacExtend",
            "9bb2ff253b0a60f07e3ac869c6495c4ef4ce484e"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "contradiction n; hnf; intros.",
            "VernacExtend",
            "57d877ab4be4375b8f12f66a763e64f359199981"
        ],
        [
            "specialize (H _ H0).",
            "VernacExtend",
            "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
        ],
        [
            "unfold access_at in *.",
            "VernacExtend",
            "f8894db69be1295c740080edb7a3bba5fe01c428"
        ],
        [
            "hnf.",
            "VernacExtend",
            "93c9be61208bb2956fb47b51f12123e34260e667"
        ],
        [
            "simpl in *; rewrite H.",
            "VernacExtend",
            "690f455cd3ba26080e3d6cdb8bb2dd10e0c2d085"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_drop_3: forall m b lo hi p m', Mem.drop_perm m b lo hi p = Some m' -> forall b' ofs k, b' <> b \\/ ofs < lo \\/ hi <= ofs -> access_at m (b', ofs) k = access_at m' (b',ofs) k.",
            "VernacStartTheoremProof",
            "f951578a20872d35f434612d9208f46cf2608d7a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Mem.drop_perm in H.",
            "VernacExtend",
            "86a93a74795d319d6ed7f43ccd95ff4bd4806bf9"
        ],
        [
            "destruct (Mem.range_perm_dec m b lo hi Cur Freeable); inversion H; clear H; subst.",
            "VernacExtend",
            "7c4f5955556af11742fd6ea63e1de6ed0a2039ca"
        ],
        [
            "unfold access_at; simpl.",
            "VernacExtend",
            "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
        ],
        [
            "destruct (eq_block b' b).",
            "VernacExtend",
            "af737dac4115ce05d9d1baa3a661e8d0ab741a5a"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite PMap.gss.",
            "VernacExtend",
            "b5a245c2e8793ec855a664f9951af0c15417e45b"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "contradiction H; auto.",
            "VernacExtend",
            "86122fc31d7ce21d331e0e5c69cdfcbbcce3602c"
        ],
        [
            "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
            "VernacExtend",
            "952559b80e47541c793ada6226e081ac64695370"
        ],
        [
            "rewrite PMap.gso by auto.",
            "VernacExtend",
            "7c813a7ad67552a3e6193c5f25800496b5bb3804"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma storebytes_access: forall m1 b ofs bytes m2 (STORE: Mem.storebytes m1 b ofs bytes = Some m2), access_at m1 = access_at m2.",
            "VernacStartTheoremProof",
            "7303f3785f05dadd871c98e7a228fd860386931b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply extensionality ;intros [b' z].",
            "VernacExtend",
            "17a00fa95f78065ca82ba5d3e0b6800a8de6bc29"
        ],
        [
            "apply extensionality ;intro k.",
            "VernacExtend",
            "9d246f9efe23cdc95a0e68b365bba3af8658b6c2"
        ],
        [
            "apply Mem.storebytes_access in STORE.",
            "VernacExtend",
            "0f68dcad9328f0449116eed5e21458d018f2bcf5"
        ],
        [
            "unfold access_at; f_equal; auto.",
            "VernacExtend",
            "205a80e9e792cf1294a7a81899f6a3ba751b91b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma store_access: forall chunk m1 b ofs v m2 (STORE: Mem.store chunk m1 b ofs v = Some m2), access_at m1 = access_at m2.",
            "VernacStartTheoremProof",
            "f9f8f6ecd654a3e931c5dbd8ff928c35a6a9f944"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply extensionality; intros [b' z'].",
            "VernacExtend",
            "8e7113829679059a96d7a6cde25cdde3900da09d"
        ],
        [
            "apply extensionality ;intro k.",
            "VernacExtend",
            "9d246f9efe23cdc95a0e68b365bba3af8658b6c2"
        ],
        [
            "unfold access_at.",
            "VernacExtend",
            "62798782afe09c554efd8c2a969dcf4529e62bb3"
        ],
        [
            "apply Mem.store_access in STORE.",
            "VernacExtend",
            "728d94cf2111f15e41d5cdb3e7ba5ed8c4d0b2be"
        ],
        [
            "rewrite STORE; auto.",
            "VernacExtend",
            "ad8a8d42af07d17e779a51fed8e9fc4b48a4183b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_order'_dec_fiddle: forall y x, y = Some x -> proj_sumbool (Mem.perm_order'_dec y Nonempty) = true.",
            "VernacStartTheoremProof",
            "1d03c6b0499aa0d0e16f99f17325e8b0e01eae29"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Mem.perm_order_dec.",
            "VernacExtend",
            "f6e68ada8f5e4744a56d48b2c61393cfef9838c3"
        ],
        [
            "destruct x; reflexivity.",
            "VernacExtend",
            "c3ead0f113d03500ac3bc0d0edefa48762d578a6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma access_at_valid_pointer: forall m b ofs p, access_at m (b,ofs) Cur = Some p -> Mem.valid_pointer m b ofs = true.",
            "VernacStartTheoremProof",
            "f233398f3c95e58aaeb31e26df9f5b8e15f6aebc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold access_at, Mem.valid_pointer in *.",
            "VernacExtend",
            "1d6bce75a44cc3d44c4259bd10fb951658142182"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "apply perm_order'_dec_fiddle with p.",
            "VernacExtend",
            "bc02d3b2d96a7a5d1c4884e29116d92fd7c83c2e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "range_dec",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (zle a b).",
                        "VernacExtend",
                        "8fe2c2db24726151cbd492132ebbaaf77484b8f2"
                    ]
                },
                {
                    "command": [
                        "destruct (zlt b c).",
                        "VernacExtend",
                        "452bab2a81b3e4b3bd71e09bf101ad7ec77e8e16"
                    ]
                },
                {
                    "command": [
                        "left; split; auto.",
                        "VernacExtend",
                        "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
                    ]
                },
                {
                    "command": [
                        "right; omega.",
                        "VernacExtend",
                        "12a62aeea1a26870d19a3f39cd3d9d63bfc5e22b"
                    ]
                },
                {
                    "command": [
                        "right; omega.",
                        "VernacExtend",
                        "12a62aeea1a26870d19a3f39cd3d9d63bfc5e22b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EqDec_memval",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "hnf; repeat decide equality; apply eq_dec.",
                        "VernacExtend",
                        "000c65e4bd8af6cb6dabd9cfd57e5629819373ba"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "EqDec_val",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "hnf.",
                        "VernacExtend",
                        "93c9be61208bb2956fb47b51f12123e34260e667"
                    ]
                },
                {
                    "command": [
                        "decide equality; apply eq_dec.",
                        "VernacExtend",
                        "5b22d7fc9d78c21f1e5c4312262409c94a7885c4"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "EqDec_quantity",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "hnf.",
                        "VernacExtend",
                        "93c9be61208bb2956fb47b51f12123e34260e667"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "perm_access",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_perm",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.perm, Mem.perm_order'.",
                        "VernacExtend",
                        "3a3278c639652d1b72e934be34e517045635fbc0"
                    ]
                },
                {
                    "command": [
                        "unfold access_at in H.",
                        "VernacExtend",
                        "52f9501f1a08c32af58028693bf52bdabe18e640"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_cur_max",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "destruct a as [b z].",
                        "VernacExtend",
                        "eee021d0b36b97eb4e140efb25467c0a955e9c43"
                    ]
                },
                {
                    "command": [
                        "destruct (access_at m (b,z) Cur) eqn:Hc.",
                        "VernacExtend",
                        "ea8458517f2bb9d6199629aa170405af1f577cd0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- perm_access.",
                        "VernacExtend",
                        "fd97094bbd3f700f251b4618c87e2c658ad73d21"
                    ]
                },
                {
                    "command": [
                        "apply (Mem.perm_cur_max m b z).",
                        "VernacExtend",
                        "49a9b24437cfe618284c4cd51e9bdf44c373d31d"
                    ]
                },
                {
                    "command": [
                        "rewrite perm_access.",
                        "VernacExtend",
                        "476f0ce42f16ab33b0815c7dd5df4809a8b229de"
                    ]
                },
                {
                    "command": [
                        "rewrite Hc.",
                        "VernacExtend",
                        "fc5aedf7a3e2d990ae51448e074500a246f368e9"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "destruct (access_at m (b, z) Max); constructor.",
                        "VernacExtend",
                        "f04a0355f434cbb50575d38ceb745bfb8366b17f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invalid_noaccess",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros; apply Mem.nextblock_noaccess.",
                        "VernacExtend",
                        "9bd6f72fe52ed3099f6fd6925b8f00a9a7d26552"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_empty",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold access_at, Mem.empty; simpl.",
                        "VernacExtend",
                        "87929475e0ad92c76ad393c3a23d536edcf26063"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gi.",
                        "VernacExtend",
                        "958266bd87166c15ef1d5c9765f2ff83d5dd8cf4"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_access_other",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof (Mem.nextblock_noaccess m1 b ofs k).",
                        "VernacExtend",
                        "e5236409a9e7baa5bf275c21f2deb49894832a56"
                    ]
                },
                {
                    "command": [
                        "pose proof (Mem.alloc_result _ _ _ _ _ H).",
                        "VernacExtend",
                        "c2379c9a6a7ab17fa504c7fcea5995f9ff973912"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; inversion H; clear H; subst; simpl.",
                        "VernacExtend",
                        "35457c5c912ca692b6c861e806e73a057d27ab26"
                    ]
                },
                {
                    "command": [
                        "destruct (eq_block b' (Mem.nextblock m1)).",
                        "VernacExtend",
                        "cf32a4d776dd428dcd8acfd64d4c856265072485"
                    ]
                },
                {
                    "command": [
                        "destruct H0; try contradiction.",
                        "VernacExtend",
                        "ced5a61f27ab7d2ddde8683b150fe0e24118db92"
                    ]
                },
                {
                    "command": [
                        "subst b'.",
                        "VernacExtend",
                        "998445e3e44d7190637615c1934547ff4b392560"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gss.",
                        "VernacExtend",
                        "b5a245c2e8793ec855a664f9951af0c15417e45b"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; apply H1; apply Plt_strict.",
                        "VernacExtend",
                        "6313a2908c7958d4497c0c35729c33662b8c30dc"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gso by auto.",
                        "VernacExtend",
                        "7c813a7ad67552a3e6193c5f25800496b5bb3804"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_access_same",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inversion H; clear H; subst.",
                        "VernacExtend",
                        "a36bd190e11a8fd6825e4b7a1eb236029aaadb63"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; simpl.",
                        "VernacExtend",
                        "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gss.",
                        "VernacExtend",
                        "b5a245c2e8793ec855a664f9951af0c15417e45b"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
                        "VernacExtend",
                        "952559b80e47541c793ada6226e081ac64695370"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_free",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.free.",
                        "VernacExtend",
                        "76be443575b92c782b0fdd0543a5d41104950c81"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m1 b lo hi Cur Freeable).",
                        "VernacExtend",
                        "5db19ef5fa4fbb48bdf5f8ed545f0c5026c09947"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "contradiction n; clear n.",
                        "VernacExtend",
                        "bd52981a80ee963746ae5a4d7f8a1867cebe6968"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.perm.",
                        "VernacExtend",
                        "0e90023c67f783cc4d032c93210fb0c5f3fd3a94"
                    ]
                },
                {
                    "command": [
                        "unfold access_at in H.",
                        "VernacExtend",
                        "52f9501f1a08c32af58028693bf52bdabe18e640"
                    ]
                },
                {
                    "command": [
                        "simpl in H; rewrite H by auto.",
                        "VernacExtend",
                        "ed7b9c5102aca9c70c82f7bd4b1626940d2e6130"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "free_access",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.free in H.",
                        "VernacExtend",
                        "8248eed6671f0f2366063a996e7c964808b72a6a"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m1 b lo hi Cur Freeable); inversion H; clear H; subst.",
                        "VernacExtend",
                        "445e2b8b6d2567ab494ed8e3cd32778aaeb3b6f9"
                    ]
                },
                {
                    "command": [
                        "specialize (r _ H0).",
                        "VernacExtend",
                        "e6ff11848d8c08b77492bd149cf0e685a7eab944"
                    ]
                },
                {
                    "command": [
                        "hnf in r.",
                        "VernacExtend",
                        "4828de26bc03a7e98aec1cdaeace32f2560c4df2"
                    ]
                },
                {
                    "command": [
                        "unfold access_at.",
                        "VernacExtend",
                        "62798782afe09c554efd8c2a969dcf4529e62bb3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct ((Mem.mem_access m1) !! b ofs Cur); try contradiction.",
                        "VernacExtend",
                        "6a637de614d7e67809b65fd9b733d7e18312a01c"
                    ]
                },
                {
                    "command": [
                        "assert (p=Freeable) by (destruct p; inversion r; auto).",
                        "VernacExtend",
                        "4a54e78dbddc615e3d73ed3b5d9625ce03a04162"
                    ]
                },
                {
                    "command": [
                        "subst p.",
                        "VernacExtend",
                        "caedf09ae2f4d633332b36c55c808e07b2752cd1"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gss.",
                        "VernacExtend",
                        "b5a245c2e8793ec855a664f9951af0c15417e45b"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega.",
                        "VernacExtend",
                        "dec67d9b142ceffc0e9c9f4e9ab729ce6b92f700"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "free_access_other",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.free in H.",
                        "VernacExtend",
                        "8248eed6671f0f2366063a996e7c964808b72a6a"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m1 bf lo hi Cur Freeable); inversion H; clear H; subst.",
                        "VernacExtend",
                        "b91ea34eac02eb7e500a477cec27020d1f7eff1c"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; simpl.",
                        "VernacExtend",
                        "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
                    ]
                },
                {
                    "command": [
                        "destruct (eq_block b bf).",
                        "VernacExtend",
                        "ea6f18faa7dd84199018a857cca066e6237a2c34"
                    ]
                },
                {
                    "command": [
                        "subst bf; rewrite PMap.gss.",
                        "VernacExtend",
                        "560d925fd49d36570ff8935bba5db32d24acd469"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "contradiction H; auto.",
                        "VernacExtend",
                        "86122fc31d7ce21d331e0e5c69cdfcbbcce3602c"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
                        "VernacExtend",
                        "952559b80e47541c793ada6226e081ac64695370"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gso by auto.",
                        "VernacExtend",
                        "7c813a7ad67552a3e6193c5f25800496b5bb3804"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_drop_1",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.drop_perm in H.",
                        "VernacExtend",
                        "86a93a74795d319d6ed7f43ccd95ff4bd4806bf9"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m b lo hi Cur Freeable); inversion H; clear H; subst.",
                        "VernacExtend",
                        "7c4f5955556af11742fd6ea63e1de6ed0a2039ca"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; simpl.",
                        "VernacExtend",
                        "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gss.",
                        "VernacExtend",
                        "b5a245c2e8793ec855a664f9951af0c15417e45b"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
                        "VernacExtend",
                        "952559b80e47541c793ada6226e081ac64695370"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "specialize (r _ H0).",
                        "VernacExtend",
                        "e6ff11848d8c08b77492bd149cf0e685a7eab944"
                    ]
                },
                {
                    "command": [
                        "hnf in r.",
                        "VernacExtend",
                        "4828de26bc03a7e98aec1cdaeace32f2560c4df2"
                    ]
                },
                {
                    "command": [
                        "destruct ( (Mem.mem_access m) !! b ofs Cur) eqn:?; try contradiction.",
                        "VernacExtend",
                        "ff1a7fc869bf3f98a046d6c64e8c20202d5e55e0"
                    ]
                },
                {
                    "command": [
                        "assert (p0=Freeable) by (destruct p0; inv r; auto).",
                        "VernacExtend",
                        "9aec408f48a0163aaffbd8915a2e519a41e5be9f"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "pose proof (Mem.access_max m b ofs).",
                        "VernacExtend",
                        "e7383fbb21ff18809d27fd23127cd874ef1da95a"
                    ]
                },
                {
                    "command": [
                        "rewrite Heqo in H.",
                        "VernacExtend",
                        "78cd6b59e250c1753367660a7df610b8a030f839"
                    ]
                },
                {
                    "command": [
                        "destruct k; auto.",
                        "VernacExtend",
                        "943c329a25d961e7ca9cede3777de77116d51f41"
                    ]
                },
                {
                    "command": [
                        "destruct ((Mem.mem_access m) !! b ofs Max); inv H; auto.",
                        "VernacExtend",
                        "20d4b5d1624e8e259335b6afa2b13403221fca24"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_drop_2",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.drop_perm.",
                        "VernacExtend",
                        "60024ba4c3aaaca0f06ad5d0a3554556b33cb7ad"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m b lo hi Cur Freeable).",
                        "VernacExtend",
                        "9bb2ff253b0a60f07e3ac869c6495c4ef4ce484e"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "contradiction n; hnf; intros.",
                        "VernacExtend",
                        "57d877ab4be4375b8f12f66a763e64f359199981"
                    ]
                },
                {
                    "command": [
                        "specialize (H _ H0).",
                        "VernacExtend",
                        "58d9b9a73505872ca70c4d928bcfa1d1cc75c69b"
                    ]
                },
                {
                    "command": [
                        "unfold access_at in *.",
                        "VernacExtend",
                        "f8894db69be1295c740080edb7a3bba5fe01c428"
                    ]
                },
                {
                    "command": [
                        "hnf.",
                        "VernacExtend",
                        "93c9be61208bb2956fb47b51f12123e34260e667"
                    ]
                },
                {
                    "command": [
                        "simpl in *; rewrite H.",
                        "VernacExtend",
                        "690f455cd3ba26080e3d6cdb8bb2dd10e0c2d085"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_drop_3",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.drop_perm in H.",
                        "VernacExtend",
                        "86a93a74795d319d6ed7f43ccd95ff4bd4806bf9"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.range_perm_dec m b lo hi Cur Freeable); inversion H; clear H; subst.",
                        "VernacExtend",
                        "7c4f5955556af11742fd6ea63e1de6ed0a2039ca"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; simpl.",
                        "VernacExtend",
                        "e53fee8f670e70a2884a9538a4d8f0cd52ac6853"
                    ]
                },
                {
                    "command": [
                        "destruct (eq_block b' b).",
                        "VernacExtend",
                        "af737dac4115ce05d9d1baa3a661e8d0ab741a5a"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gss.",
                        "VernacExtend",
                        "b5a245c2e8793ec855a664f9951af0c15417e45b"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "contradiction H; auto.",
                        "VernacExtend",
                        "86122fc31d7ce21d331e0e5c69cdfcbbcce3602c"
                    ]
                },
                {
                    "command": [
                        "destruct (zle lo ofs), (zlt ofs hi); try omega; simpl; auto.",
                        "VernacExtend",
                        "952559b80e47541c793ada6226e081ac64695370"
                    ]
                },
                {
                    "command": [
                        "rewrite PMap.gso by auto.",
                        "VernacExtend",
                        "7c813a7ad67552a3e6193c5f25800496b5bb3804"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "storebytes_access",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply extensionality ;intros [b' z].",
                        "VernacExtend",
                        "17a00fa95f78065ca82ba5d3e0b6800a8de6bc29"
                    ]
                },
                {
                    "command": [
                        "apply extensionality ;intro k.",
                        "VernacExtend",
                        "9d246f9efe23cdc95a0e68b365bba3af8658b6c2"
                    ]
                },
                {
                    "command": [
                        "apply Mem.storebytes_access in STORE.",
                        "VernacExtend",
                        "0f68dcad9328f0449116eed5e21458d018f2bcf5"
                    ]
                },
                {
                    "command": [
                        "unfold access_at; f_equal; auto.",
                        "VernacExtend",
                        "205a80e9e792cf1294a7a81899f6a3ba751b91b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "store_access",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply extensionality; intros [b' z'].",
                        "VernacExtend",
                        "8e7113829679059a96d7a6cde25cdde3900da09d"
                    ]
                },
                {
                    "command": [
                        "apply extensionality ;intro k.",
                        "VernacExtend",
                        "9d246f9efe23cdc95a0e68b365bba3af8658b6c2"
                    ]
                },
                {
                    "command": [
                        "unfold access_at.",
                        "VernacExtend",
                        "62798782afe09c554efd8c2a969dcf4529e62bb3"
                    ]
                },
                {
                    "command": [
                        "apply Mem.store_access in STORE.",
                        "VernacExtend",
                        "728d94cf2111f15e41d5cdb3e7ba5ed8c4d0b2be"
                    ]
                },
                {
                    "command": [
                        "rewrite STORE; auto.",
                        "VernacExtend",
                        "ad8a8d42af07d17e779a51fed8e9fc4b48a4183b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_order'_dec_fiddle",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Mem.perm_order_dec.",
                        "VernacExtend",
                        "f6e68ada8f5e4744a56d48b2c61393cfef9838c3"
                    ]
                },
                {
                    "command": [
                        "destruct x; reflexivity.",
                        "VernacExtend",
                        "c3ead0f113d03500ac3bc0d0edefa48762d578a6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "access_at_valid_pointer",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold access_at, Mem.valid_pointer in *.",
                        "VernacExtend",
                        "1d6bce75a44cc3d44c4259bd10fb951658142182"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "apply perm_order'_dec_fiddle with p.",
                        "VernacExtend",
                        "bc02d3b2d96a7a5d1c4884e29116d92fd7c83c2e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}