{
    "filename": "floyd/reassoc_seq.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.semax_tactics.",
            "VernacRequire",
            "238e194431a028049e8aade4980681c4ef99322f"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Fixpoint unfold_seq c : list statement := match c with | Sloop (Ssequence (Sifthenelse e Sskip Sbreak) s) Sskip => [Swhile e s] | Ssequence s1 (Sloop (Ssequence (Sifthenelse e2 Sskip Sbreak) s3) s4) => [Sfor s1 e2 s3 s4] | Ssequence c1 c2 => unfold_seq c1 ++ unfold_seq c2 | _ => [c] end.",
            "VernacFixpoint",
            "46c9e0caf3edcf662d375cd7712d33a9395dbc0e"
        ],
        [
            "Fixpoint fold_seq lc : statement := match lc with | nil => Sskip | [c1] => c1 | c :: lc0 => Ssequence c (fold_seq lc0) end.",
            "VernacFixpoint",
            "38d7470ff321680713cefc6e96de28f02dcdde98"
        ],
        [
            "Lemma flat_map_app: forall {A B: Type} (f: A -> list B) l1 l2, flat_map f l1 ++ flat_map f l2 = flat_map f (l1 ++ l2).",
            "VernacStartTheoremProof",
            "e4d82dee069f259545b07c9e719f1646d9b133dc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction l1.",
            "VernacExtend",
            "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- app_assoc.",
            "VernacExtend",
            "58419932d54cdd1541230f0515f44a2e52bfe908"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unfold_Ssequence_idempotent: forall c, flat_map unfold_Ssequence (unfold_Ssequence c) = unfold_Ssequence c.",
            "VernacStartTheoremProof",
            "872c1106b8b0363438833ee3373d506f72cd0b0e"
        ],
        [
            "intro c.",
            "VernacExtend",
            "66a90ce658795eb3936aa8248dba6be2a8383d6f"
        ],
        [
            "induction c; try reflexivity.",
            "VernacExtend",
            "4128e22747c71b7c3302a14fd07ac6d588a5f167"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- flat_map_app.",
            "VernacExtend",
            "cc36a6798fa97ad29a1da2d1697301093514ba1e"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flat_map_unfold_Ssequence_idempotent: forall ls, flat_map unfold_Ssequence (flat_map unfold_Ssequence ls) = flat_map unfold_Ssequence ls.",
            "VernacStartTheoremProof",
            "e102bc984e7ca099acbf98a451eadc7679714240"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction ls.",
            "VernacExtend",
            "4e7eb24907f05c6a866f99d59aa9e6b33e2b2ba0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- flat_map_app.",
            "VernacExtend",
            "cc36a6798fa97ad29a1da2d1697301093514ba1e"
        ],
        [
            "f_equal; [ | assumption ].",
            "VernacExtend",
            "595d1c4c6056fd97eafc3907b1ea3a6eefee3025"
        ],
        [
            "apply unfold_Ssequence_idempotent.",
            "VernacExtend",
            "74213e4f675dba16464d2572d17d531dac98ee21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unfold_seq_to_unfold_Ssequence: forall cs, unfold_Ssequence cs = flat_map unfold_Ssequence (unfold_seq cs).",
            "VernacStartTheoremProof",
            "d62f84adf9004cd9730a23534d30cd2a58a84bb1"
        ],
        [
            "intro cs.",
            "VernacExtend",
            "2060163a83a975cd5cb6c9b92ba14804470e17f5"
        ],
        [
            "induction cs; try reflexivity.",
            "VernacExtend",
            "c5f4716a36308598a1ab8e9814df1c6ac975d909"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHcs1, IHcs2.",
            "VernacExtend",
            "0c5a210297607f541fbc5d7428da5b96e716636d"
        ],
        [
            "rewrite flat_map_app.",
            "VernacExtend",
            "e4b0e4dd0c78a35c17d0ab6d7ee4e2a2fcbcf529"
        ],
        [
            "destruct cs2; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
            "VernacExtend",
            "1c4ac806a1e55ff8cd28670f6684b778a95fef81"
        ],
        [
            "destruct cs2_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
            "VernacExtend",
            "b2ca6643e1892d3df154030b3c287ee9bee85e77"
        ],
        [
            "destruct cs2_1_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
            "VernacExtend",
            "8bcab7b4c25b1d4603e88c2ade7b89d4fa0d7c18"
        ],
        [
            "destruct cs2_1_1_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
            "VernacExtend",
            "cc99c122f49be6ca0fd40e8da39bd04bfe1b286f"
        ],
        [
            "destruct cs2_1_1_2; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
            "VernacExtend",
            "32dde9ac04dee38cb44b8d7cca5d9b7678dff563"
        ],
        [
            "rewrite <- flat_map_app.",
            "VernacExtend",
            "cc36a6798fa97ad29a1da2d1697301093514ba1e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite app_nil_r.",
            "VernacExtend",
            "c4835e186d44991c06ea8a79f450a4e967f8f713"
        ],
        [
            "f_equal; [ symmetry; assumption | ].",
            "VernacExtend",
            "ab4775e82e1769a9ce5f60a4dc2e65511c9be479"
        ],
        [
            "destruct cs2_2; reflexivity.",
            "VernacExtend",
            "c173d7a552959fc40dcedc8b77d67ad82d1bc072"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct cs1; try reflexivity.",
            "VernacExtend",
            "642ceb751c38106d019f2b9256f61a99af032d9b"
        ],
        [
            "destruct cs1_1; try reflexivity.",
            "VernacExtend",
            "b957d8b8d72ed2be7fcf3572ce6ab1754dd658d5"
        ],
        [
            "destruct cs1_1_1; try reflexivity.",
            "VernacExtend",
            "ea44c661251aa1fcc630baca1d5391efd5e232ba"
        ],
        [
            "destruct cs1_1_2; try reflexivity.",
            "VernacExtend",
            "6a3056ea51c57e44d1edfa33c6a0e9bedb611448"
        ],
        [
            "destruct cs2; reflexivity.",
            "VernacExtend",
            "3ffa1fd8acecc2a67c4288379ada1b3e930478c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_unfold_seq {Espec: OracleKind} {CS: compspecs} : forall c1 c2, unfold_seq c1 = unfold_seq c2 -> forall P Q Delta, semax Delta P c1 Q -> semax Delta P c2 Q.",
            "VernacStartTheoremProof",
            "f753896738d4682a33331129b34e5b7b5d8bf124"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply semax_unfold_Ssequence; [ | eassumption ].",
            "VernacExtend",
            "2616d32a818473bdd10f8203cfbed5a89613ee90"
        ],
        [
            "do 2 rewrite unfold_seq_to_unfold_Ssequence.",
            "VernacExtend",
            "f5c99d6bebc4e28a5cfd73c18cc390d72a19b310"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac reassoc_seq_raw := cbv [Sfor Swhile Sdowhile]; match goal with | |- semax _ _ ?cs _ => let cs' := eval cbv [unfold_seq fold_seq app] in (fold_seq (unfold_seq cs)) in apply (semax_unfold_seq cs' cs eq_refl) end.",
            "VernacExtend",
            "d25020d05f94d793701708568d5244e218439533"
        ],
        [
            "Ltac reassoc_seq := unfold_abbrev'; reassoc_seq_raw; abbreviate_semax.",
            "VernacExtend",
            "5db0463ee920669c479ab5c979e3d5f8ff0f7521"
        ],
        [
            "Fixpoint partition {T: Type} (firstSize size: Z) (l: list T) : list (list T) := match l with | h :: t => if firstSize =? 0 then match partition (size-1) size t with | wip :: res => nil :: (h :: wip) :: res | nil => nil :: [h] :: nil end else match partition (firstSize-1) size t with | wip :: res => (h :: wip) :: res | nil => [h] :: nil end | nil => nil end.",
            "VernacFixpoint",
            "7ff6614bf36ca6e714ae62b10ff6cf0e95a2bc0b"
        ],
        [
            "Definition reassoc_into_chunks (cs: statement) (chunksize: Z) : statement := fold_seq (map fold_seq (partition chunksize chunksize (unfold_seq cs))).",
            "VernacDefinition",
            "9364a3463182d6c9eea1eb91aac1daaba1aae1a9"
        ],
        [
            "Ltac reassoc_seq_chunks chunksize := cbv [Sfor Swhile Sdowhile]; match goal with | |- semax _ _ ?cs _ => let cs' := eval cbv [reassoc_into_chunks fold_seq map partition unfold_seq Zlength Zlength_aux Z.succ Z.add Pos.add Pos.succ Pos.add_carry app Z.eqb Pos.eqb Z.sub Z.opp Z.pos_sub Z.succ_double Z.pred_double Z.double Pos.pred_double] in (reassoc_into_chunks cs chunksize) in apply (semax_unfold_seq cs' cs eq_refl) end.",
            "VernacExtend",
            "110ac986353e454ba419ddee48c8eadf4c72e663"
        ],
        [
            "Ltac reassociate_stmt S := lazymatch S with | Ssequence (Ssequence ?S1 ?S2) ?S3 => reassociate_stmt (Ssequence S1 (Ssequence S2 S3)) | Ssequence ?S1 ?S2 => let S1' := reassociate_stmt S1 in let S2' := reassociate_stmt S2 in let S' := constr:(Ssequence S1' S2') in match S1' with (Ssequence _ _) => reassociate_stmt S' | _ => S' end | Sloop ?S1 ?S2 => let S1' := reassociate_stmt S1 in let S2' := reassociate_stmt S2 in let S' := constr:(Sloop S1' S2') in S' | Sifthenelse ?E ?S1 ?S2 => let S1' := reassociate_stmt S1 in let S2' := reassociate_stmt S2 in let S' := constr:(Sifthenelse E S1' S2') in S' | Sswitch ?E ?LS => let LS' := reassociate_stmt_ls LS in let S' := constr:(Sswitch E LS') in S' | _ => S end with reassociate_stmt_ls LS := match S with | LSnil => let S' := constr:(LSnil) in S' | LScons ?L ?S1 ?LS1 => let S1' := reassociate_stmt S1 in let LS1' := reassociate_stmt LS1 in let LS' := constr:(LScons L S1' LS1') in LS' end.",
            "VernacExtend",
            "7c21fb6f5377e29618b0379a44e2eaae5def37e6"
        ]
    ],
    "proofs": [
        {
            "name": "flat_map_app",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction l1.",
                        "VernacExtend",
                        "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- app_assoc.",
                        "VernacExtend",
                        "58419932d54cdd1541230f0515f44a2e52bfe908"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flat_map_unfold_Ssequence_idempotent",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "induction ls.",
                        "VernacExtend",
                        "4e7eb24907f05c6a866f99d59aa9e6b33e2b2ba0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- flat_map_app.",
                        "VernacExtend",
                        "cc36a6798fa97ad29a1da2d1697301093514ba1e"
                    ]
                },
                {
                    "command": [
                        "f_equal; [ | assumption ].",
                        "VernacExtend",
                        "595d1c4c6056fd97eafc3907b1ea3a6eefee3025"
                    ]
                },
                {
                    "command": [
                        "apply unfold_Ssequence_idempotent.",
                        "VernacExtend",
                        "74213e4f675dba16464d2572d17d531dac98ee21"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unfold_seq_to_unfold_Ssequence",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intro cs.",
                        "VernacExtend",
                        "2060163a83a975cd5cb6c9b92ba14804470e17f5"
                    ]
                },
                {
                    "command": [
                        "induction cs; try reflexivity.",
                        "VernacExtend",
                        "c5f4716a36308598a1ab8e9814df1c6ac975d909"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHcs1, IHcs2.",
                        "VernacExtend",
                        "0c5a210297607f541fbc5d7428da5b96e716636d"
                    ]
                },
                {
                    "command": [
                        "rewrite flat_map_app.",
                        "VernacExtend",
                        "e4b0e4dd0c78a35c17d0ab6d7ee4e2a2fcbcf529"
                    ]
                },
                {
                    "command": [
                        "destruct cs2; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
                        "VernacExtend",
                        "1c4ac806a1e55ff8cd28670f6684b778a95fef81"
                    ]
                },
                {
                    "command": [
                        "destruct cs2_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
                        "VernacExtend",
                        "b2ca6643e1892d3df154030b3c287ee9bee85e77"
                    ]
                },
                {
                    "command": [
                        "destruct cs2_1_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
                        "VernacExtend",
                        "8bcab7b4c25b1d4603e88c2ade7b89d4fa0d7c18"
                    ]
                },
                {
                    "command": [
                        "destruct cs2_1_1_1; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
                        "VernacExtend",
                        "cc99c122f49be6ca0fd40e8da39bd04bfe1b286f"
                    ]
                },
                {
                    "command": [
                        "destruct cs2_1_1_2; try reflexivity; try rewrite flat_map_unfold_Ssequence_idempotent; try reflexivity.",
                        "VernacExtend",
                        "32dde9ac04dee38cb44b8d7cca5d9b7678dff563"
                    ]
                },
                {
                    "command": [
                        "rewrite <- flat_map_app.",
                        "VernacExtend",
                        "cc36a6798fa97ad29a1da2d1697301093514ba1e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite app_nil_r.",
                        "VernacExtend",
                        "c4835e186d44991c06ea8a79f450a4e967f8f713"
                    ]
                },
                {
                    "command": [
                        "f_equal; [ symmetry; assumption | ].",
                        "VernacExtend",
                        "ab4775e82e1769a9ce5f60a4dc2e65511c9be479"
                    ]
                },
                {
                    "command": [
                        "destruct cs2_2; reflexivity.",
                        "VernacExtend",
                        "c173d7a552959fc40dcedc8b77d67ad82d1bc072"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct cs1; try reflexivity.",
                        "VernacExtend",
                        "642ceb751c38106d019f2b9256f61a99af032d9b"
                    ]
                },
                {
                    "command": [
                        "destruct cs1_1; try reflexivity.",
                        "VernacExtend",
                        "b957d8b8d72ed2be7fcf3572ce6ab1754dd658d5"
                    ]
                },
                {
                    "command": [
                        "destruct cs1_1_1; try reflexivity.",
                        "VernacExtend",
                        "ea44c661251aa1fcc630baca1d5391efd5e232ba"
                    ]
                },
                {
                    "command": [
                        "destruct cs1_1_2; try reflexivity.",
                        "VernacExtend",
                        "6a3056ea51c57e44d1edfa33c6a0e9bedb611448"
                    ]
                },
                {
                    "command": [
                        "destruct cs2; reflexivity.",
                        "VernacExtend",
                        "3ffa1fd8acecc2a67c4288379ada1b3e930478c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "semax_unfold_seq",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply semax_unfold_Ssequence; [ | eassumption ].",
                        "VernacExtend",
                        "2616d32a818473bdd10f8203cfbed5a89613ee90"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite unfold_seq_to_unfold_Ssequence.",
                        "VernacExtend",
                        "f5c99d6bebc4e28a5cfd73c18cc390d72a19b310"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}