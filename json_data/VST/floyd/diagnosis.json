{
    "filename": "floyd/diagnosis.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.reptype_lemmas.",
            "VernacRequire",
            "67895477ec539ad1bf901b33e9b181c1c2cf58be"
        ],
        [
            "Local Open Scope logic.",
            "VernacOpenCloseScope",
            "5937723d189e5aa98ad78e1018bed51ea2c1b0cd"
        ],
        [
            "Lemma no_post_exists_unit: forall P Q R, PROPx P (LOCALx Q (SEPx R)) = EX _:unit, PROPx P (LOCALx Q (SEPx R)).",
            "VernacStartTheoremProof",
            "220c05758fc7528f2be936654aa0c9f181fe8cf0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "apply exp_right with tt; auto.",
            "VernacExtend",
            "4f2550b8c4ce85c2bb8df6e800d9782b61a48060"
        ],
        [
            "apply exp_left; auto.",
            "VernacExtend",
            "051006a84529610a35e0fdfe7e6313330b46ba4b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive Stuck : Prop := .",
            "VernacInductive",
            "01eb1a3d35bd7c90c5a0849c099fc26eef999c7a"
        ],
        [
            "Ltac stuckwith p := elimtype Stuck; fold p.",
            "VernacExtend",
            "4247f0d5f9f5238b5b53965a724728199afe8abd"
        ],
        [
            "Ltac test_stuck := match goal with | |- ?G => unify G Stuck end.",
            "VernacExtend",
            "4bd7c4d3e3dbcab44285557c8496f056d871033a"
        ],
        [
            "Definition not_in_canonical_form := tt.",
            "VernacDefinition",
            "0bc4d2d9ca28ab3e0113eab6b92c7776236d47c0"
        ],
        [
            "Definition Error__Funspec (id: ident) (what: unit) (reason: unit) := Stuck.",
            "VernacDefinition",
            "4e62bb8ba9f72e5172ced9987f60583566aa73bc"
        ],
        [
            "Definition Cannot_unfold_funspec (fs: ident*funspec) := Stuck.",
            "VernacDefinition",
            "0c1325005dbc94f520947aedb82f51335c07a25b"
        ],
        [
            "Definition for_some_undiagnosed_reason (fs: ident*funspec) := tt.",
            "VernacDefinition",
            "ead471be633d30b727fad8752707eaf8c8f0fc76"
        ],
        [
            "Definition because_of_LOCAL (Q: environ->Prop) := tt.",
            "VernacDefinition",
            "1f27f7ee3dbea3f59c4a138fdb60739a5077d6e4"
        ],
        [
            "Definition because_of_SEP (R: environ->mpred) := tt.",
            "VernacDefinition",
            "531c424d006d151a6e48cd6aa93837f85abb9d45"
        ],
        [
            "Definition because_temp_out_of_scope (i: ident) := tt.",
            "VernacDefinition",
            "23ec891703bf1c0f109d0c083a05a651aa5e82c8"
        ],
        [
            "Definition because_Precondition_not_canonical (R: environ->mpred) := tt.",
            "VernacDefinition",
            "5cbcebdfbd256d5da3121fee41d061c8132b6f6d"
        ],
        [
            "Definition because_Postcondition_not_canonical (R: environ->mpred) := tt.",
            "VernacDefinition",
            "178ca3a0e1bb931e0692f5b0c8cd6092dd2ab6bc"
        ],
        [
            "Definition WITH_clause_should_avoid_using_reptype_otherwise_Coq_is_way_too_slow := tt.",
            "VernacDefinition",
            "2aadca3bcb9dc9bcad4c53a8929d2aeb2457c579"
        ],
        [
            "Ltac ccf_PROP id0 P := idtac.",
            "VernacExtend",
            "5c8c7745d087acd228bd068b9764ba109a5b6bc9"
        ],
        [
            "Ltac ccf_LOCAL1 id0 jl i := match jl with | (?j,_) :: ?jl' => first [unify i j | ccf_LOCAL1 id0 jl' i] | nil => stuckwith (Error__Funspec id0 not_in_canonical_form (because_temp_out_of_scope i)) end.",
            "VernacExtend",
            "01ffb68ee71e0a887108d961056a08e570a2e737"
        ],
        [
            "Ltac ccf_LOCAL id0 fsig Q := match Q with | nil => idtac | temp ?i _ :: ?Q' => ccf_LOCAL1 id0 fsig i; first [test_stuck | ccf_LOCAL id0 fsig Q'] | lvar _ _ _ :: ?Q' => ccf_LOCAL id0 fsig Q' | ?Q1 :: _ => stuckwith (Error__Funspec id0 not_in_canonical_form (because_of_LOCAL Q1)) end.",
            "VernacExtend",
            "6e4795edd5b5f100701651c13cdf45577f965f29"
        ],
        [
            "Ltac ccf_SEP id0 R := match R with | nil => idtac | _ :: ?R' => ccf_SEP id0 R' | ?R1 :: _ => stuckwith (Error__Funspec id0 not_in_canonical_form (because_of_SEP R1)) end.",
            "VernacExtend",
            "3248b9da980c5cf3233a5b81e33926176b64b437"
        ],
        [
            "Ltac ccf2 id0 argsig retsig A Pre Post := try (test_stuck; elimtype False); let F := fresh \"F\" in intro F; let x := fresh \"x\" in assert (x:A) by (elimtype False; apply F); pose (xPre := Pre x); cbv beta in xPre; pose (xPost := Post x); cbv beta in xPost; repeat (match type of x with (_*_)%type => let y := fresh \"x\" in destruct x as [x y] end); revert xPre; match goal with |- let _ := PROPx ?P (LOCALx ?Q (SEPx ?R)) in _ => ccf_PROP id0 P; first [test_stuck | ccf_LOCAL id0 argsig Q; first [test_stuck | ccf_SEP id0 R]] | |- let _ := ?PP in _ => stuckwith (Error__Funspec id0 not_in_canonical_form (because_Precondition_not_canonical PP)) end; first [test_stuck | elimtype False; revert xPost; try rewrite no_post_exists_unit; repeat match goal with |- let _ := (EX _:_, EX _:_, _) in _ => rewrite exp_uncurry end; match goal with | |- let _ := @exp _ _ ?B ?p in _ => let w := fresh \"w\" in assert (w:B) by (elimtype False; apply F); intro xPost; clear xPost; pose (xPost := p w); cbv beta in xPost; revert xPost; repeat (match type of w with (_*_)%type => let y := fresh \"w\" in destruct w as [w y] end) | |- let _ := ?PP in _ => stuckwith (Error__Funspec id0 not_in_canonical_form (because_Postcondition_not_canonical PP)) end; first [test_stuck | match goal with |- let _ := PROPx ?P (LOCALx ?Q (SEPx ?R)) in _ => ccf_PROP id0 P; first [test_stuck | ccf_LOCAL id0 ((ret_temp, retsig)::nil) Q; first [test_stuck | ccf_SEP id0 R]] end; first [test_stuck | elimtype False; apply F]]].",
            "VernacExtend",
            "0ce73a27f46874e46af49fe0f97fbc6db2fbd839"
        ],
        [
            "Ltac check_WITH_reptype id A := match A with context [reptype _] => stuckwith (Error__Funspec id WITH_clause_should_avoid_using_reptype_otherwise_Coq_is_way_too_slow tt) end.",
            "VernacExtend",
            "247426224de8270c92c8fc10c02a570ddb7e4fda"
        ],
        [
            "Ltac ccf1 fs := match fs with | (?id, mk_funspec (?argsig,?retsig) ?A ?Pre ?Post ) => first [ cut False; [ try check_WITH_reptype id A; first [test_stuck | ccf2 id argsig retsig A Pre Post] | idtac ] | stuckwith (Error__Funspec id not_in_canonical_form (for_some_undiagnosed_reason fs)) ] | _ => let fs' := constr:(fs) in let fs'' := (eval unfold fs in fs') in ccf1 fs'' | _ => stuckwith (Cannot_unfold_funspec fs) end.",
            "VernacExtend",
            "700577c30250116edba06a0c42abe093f541375f"
        ],
        [
            "Ltac check_canonical_funspec fs := try (test_stuck; elimtype False); first [ccf1 fs; [test_stuck | ] | idtac].",
            "VernacExtend",
            "2efd6e8dbdd676349a689d6273a986c0f8095960"
        ],
        [
            "Tactic Notation \"errormsg\" simple_intropattern(message) constr(arg) := let x := fresh in pose proof arg as x; revert x; match goal with |- ?type -> _ => intros _; pose (message := fun _ : type => False); exfalso; change (message arg); clearbody message end.",
            "VernacExtend",
            "2b6e75fd29680944bf849e42610c2e485f8fc95b"
        ],
        [
            "Ltac check_canonical_call' Delta c := match c with | Scall _ (Evar ?id _) _ => let x := constr:((glob_specs Delta) ! id) in let y := (eval simpl in x) in match y with | Some ?fs => check_canonical_funspec fs | None => errormsg No_function_specificiation_corresponds_to_id id end | Ssequence ?c1 _ => check_canonical_call' Delta c1 | _ => let d := eval hnf in c in check_canonical_call' Delta d end.",
            "VernacExtend",
            "49338c4ceb887dbd2d6eab6ca87319070756855d"
        ],
        [
            "Ltac check_canonical_call := match goal with |- semax ?Delta _ ?c _ => check_canonical_call' Delta c end.",
            "VernacExtend",
            "b8e67f12418b7925bcb13d092dcc2e3c2409dc03"
        ]
    ],
    "proofs": [
        {
            "name": "no_post_exists_unit",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "apply exp_right with tt; auto.",
                        "VernacExtend",
                        "4f2550b8c4ce85c2bb8df6e800d9782b61a48060"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; auto.",
                        "VernacExtend",
                        "051006a84529610a35e0fdfe7e6313330b46ba4b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}