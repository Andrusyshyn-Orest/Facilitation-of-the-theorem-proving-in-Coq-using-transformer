{
    "filename": "floyd/functional_base.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Export Coq.Lists.List.",
            "VernacRequire",
            "7c1471b13b8fe1735c40c05b21efc17c0f48ab89"
        ],
        [
            "Require Export Coq.ZArith.ZArith.",
            "VernacRequire",
            "c7935cdbced541f3b4003becca70afd031631208"
        ],
        [
            "Require Export compcert.lib.Coqlib.",
            "VernacRequire",
            "7e58f2e2909b7113c736a851925f935c6f947415"
        ],
        [
            "Require Export compcert.lib.Integers.",
            "VernacRequire",
            "7b3592fe9f9806d245f83298c6bbd65740d88efd"
        ],
        [
            "Require Export compcert.lib.Floats.",
            "VernacRequire",
            "ee323451e21fb9288981f1e27f07228ece0bebfe"
        ],
        [
            "Require Export compcert.common.Values.",
            "VernacRequire",
            "c58ae82bb89fa3dc33487e4c1b9a46295525bd00"
        ],
        [
            "Require Export VST.msl.eq_dec.",
            "VernacRequire",
            "7211d0f3f73be3b56a2e383b31e34bb1e10e46b6"
        ],
        [
            "Require Export VST.msl.Coqlib2.",
            "VernacRequire",
            "71bddf309152566d217689927cd2ea90019619c5"
        ],
        [
            "Require Export VST.floyd.coqlib3.",
            "VernacRequire",
            "423913515e65a11e7897d4f6f88f137e179cc811"
        ],
        [
            "Require Export VST.floyd.sublist.",
            "VernacRequire",
            "ab3df40f53c720f8a095be941d23933f19e63148"
        ],
        [
            "Require Import VST.veric.val_lemmas.",
            "VernacRequire",
            "a811ca80ddaf3b24024d4f284248d6d7abdb774b"
        ],
        [
            "Lemma Vint_injective i j (H: Vint i = Vint j): i=j.",
            "VernacStartTheoremProof",
            "744f107b7b54747528c004aed0f7543f51dc4874"
        ],
        [
            "inv H; trivial.",
            "VernacExtend",
            "baf4712cf6b503c0879946033cfaad1018cca3ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_Vint_injective: forall l m, map Vint l = map Vint m -> l=m.",
            "VernacStartTheoremProof",
            "dd0b9b84d8737a81ace049f061b96f2692940fa8"
        ],
        [
            "induction l; intros.",
            "VernacExtend",
            "f3f6b28c6822ad560a06f008ea0a5aa487d0e8e3"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct m; inv H; trivial.",
            "VernacExtend",
            "bd6f837d89fe9649c233877e1202ecd49daa48d8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct m; inv H.",
            "VernacExtend",
            "28092fa0403a9a47f033fe0e2e3044fa5ab81848"
        ],
        [
            "f_equal; eauto.",
            "VernacExtend",
            "0aaae116840c77af05ab473518cd728dcb792af6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cons_inv {A} (a a':A) l l': a::l = a'::l' -> a=a' /\\ l=l'.",
            "VernacStartTheoremProof",
            "d17bae7a7935c9b968ef242683f366a047143901"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H; eauto.",
            "VernacExtend",
            "5561dbde521b746b597746e7cf4e36b0e4327686"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Inhabitant_val : Inhabitant val := Vundef.",
            "VernacInstance",
            "3737be340c3f0ca035935446e669f08c00cf9012"
        ],
        [
            "Instance Inhabitant_int: Inhabitant int := Int.zero.",
            "VernacInstance",
            "5e6fde0bd853801a8d85d05290a2d67c8a691b21"
        ],
        [
            "Instance Inhabitant_byte: Inhabitant byte := Byte.zero.",
            "VernacInstance",
            "a4772a0171941a484e0f3156d2e7010c6318b354"
        ],
        [
            "Instance Inhabitant_int64: Inhabitant Int64.int := Int64.zero.",
            "VernacInstance",
            "de6a6d97771e0cb7ed8cc4c523e39aca94928696"
        ],
        [
            "Instance Inhabitant_ptrofs: Inhabitant Ptrofs.int := Ptrofs.zero.",
            "VernacInstance",
            "2ca204a7a6bde6efc17f847a0888c5bab3c8872c"
        ],
        [
            "Instance Inhabitant_float : Inhabitant float := Float.zero.",
            "VernacInstance",
            "c024bd6b5986d9ee712c72e7646042eb1d8b1f00"
        ],
        [
            "Instance Inhabitant_float32 : Inhabitant float32 := Float32.zero.",
            "VernacInstance",
            "754fb5895e173160a09f7752b0f4a887c6184370"
        ],
        [
            "Definition Vubyte (c: Byte.int) : val := Vint (Int.repr (Byte.unsigned c)).",
            "VernacDefinition",
            "614c290282b8a71758aabbb8dee281b8d0ded546"
        ],
        [
            "Definition Vbyte (c: Byte.int) : val := Vint (Int.repr (Byte.signed c)).",
            "VernacDefinition",
            "b6c8e211390777ccc713a1eba94b7d8d56015e52"
        ],
        [
            "Hint Rewrite (@Znth_map val _) (@Znth_map int _) (@Znth_map byte _) (@Znth_map int64 _) (@Znth_map ptrofs _) (@Znth_map float _) (@Znth_map float32 _) using (auto; rewrite ?Zlength_map in *; omega) : sublist entailer_rewrite.",
            "VernacExtend",
            "be9814c628e0eae5dc35215fe6d6dcc79d5a79f3"
        ],
        [
            "Lemma is_long_dec v: {is_long v} + {~ is_long v}.",
            "VernacStartTheoremProof",
            "900501dbe852f5e5b0f1dd0ee0e0a4c6221b9b7b"
        ],
        [
            "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
            "VernacExtend",
            "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma is_single_dec v: {is_single v} + {~ is_single v}.",
            "VernacStartTheoremProof",
            "6779b8983b70d04bcab484c8d94bfb9061c40d72"
        ],
        [
            "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
            "VernacExtend",
            "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma is_float_dec v: {is_float v} + {~ is_float v}.",
            "VernacStartTheoremProof",
            "4b2095472b1fde666ffd3660c82b8c15b3617571"
        ],
        [
            "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
            "VernacExtend",
            "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma is_pointer_or_integer_dec v: {is_pointer_or_integer v} + {~ is_pointer_or_integer v}.",
            "VernacStartTheoremProof",
            "350049901d2203552b279f7bed27f6dc11af67cc"
        ],
        [
            "unfold is_pointer_or_integer.",
            "VernacExtend",
            "533ce8d60eb46057d4c6faa8f9e416d32b015374"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
            "VernacExtend",
            "63bdbb10fe603f2d3ea5194466a597d0df105be1"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma is_pointer_or_null_dec v: {is_pointer_or_null v} + {~ is_pointer_or_null v}.",
            "VernacStartTheoremProof",
            "f4cd1b501385c1946e4c33e3bbbeea27599b39e3"
        ],
        [
            "destruct v; simpl; try solve [right; intros N; trivial]; try solve [left; trivial].",
            "VernacExtend",
            "bb9dbfb5e81e801531c095443c1f9736527d2da8"
        ],
        [
            "try apply Int.eq_dec; destruct Archi.ptr64; auto; apply Int64.eq_dec.",
            "VernacExtend",
            "14c645471fbc7a97167277fbbe467a07f6ba70b4"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma isptr_dec v: {isptr v} + {~ isptr v}.",
            "VernacStartTheoremProof",
            "81387787605f33ed21d346be10e4674df994c6e3"
        ],
        [
            "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
            "VernacExtend",
            "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma isptr_offset_val': forall i p, isptr p -> isptr (offset_val i p).",
            "VernacStartTheoremProof",
            "79d18f8fef46a99424d7b3e53c6711a0d2eeb205"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct p; try contradiction; apply Coq.Init.Logic.I.",
            "VernacExtend",
            "9cbe817a2e9fd0b4813a475fa470cc4f2a4cdde1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Extern 1 (isptr (offset_val _ _)) => apply isptr_offset_val'.",
            "VernacHints",
            "dbd32f5ee0b926498173658d0368ce145ddbb78e"
        ],
        [
            "Hint Resolve isptr_offset_val': norm.",
            "VernacHints",
            "0f19146dbf490375b471447443ee9dea706ffa9d"
        ],
        [
            "Lemma offset_val_force_ptr: offset_val 0 = force_ptr.",
            "VernacStartTheoremProof",
            "7326319b849ff5b23057b66b81d249edb1e4583c"
        ],
        [
            "extensionality v.",
            "VernacExtend",
            "692b695bd0dc2cb16da8b030a0ea4f83cb3c2cef"
        ],
        [
            "destruct v; try reflexivity.",
            "VernacExtend",
            "3eb3c959139a23d6cb7669a298f49504f33b689c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Ptrofs.add_zero; auto.",
            "VernacExtend",
            "e148f0f02dab63f981c94b0fc072782fadb7dbbd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite <- offset_val_force_ptr : norm.",
            "VernacExtend",
            "0bf0436214bf4978bba5885cbe332abcc5c48105"
        ],
        [
            "Lemma offset_offset_val: forall v i j, offset_val j (offset_val i v) = offset_val (i + j) v.",
            "VernacStartTheoremProof",
            "26e799d829d1e7db40a07d236545700679f9ad42"
        ],
        [
            "intros; unfold offset_val.",
            "VernacExtend",
            "4dd3a4fac6fcbb9cb7dca766453c15f954fd1c08"
        ],
        [
            "destruct v; auto.",
            "VernacExtend",
            "82aad02dac89be3e5ec784655b657f349965d9b4"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "rewrite Ptrofs.add_assoc.",
            "VernacExtend",
            "25919353e006e429b0b36d19921508d4b200e1fe"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply ptrofs_add_repr.",
            "VernacExtend",
            "643fb0e49470ad5091d1e1c60aa10dd8a8a1e6dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite offset_offset_val: norm.",
            "VernacExtend",
            "8f66c63fabfbd29fdc70d0a93585c17e8b4fb659"
        ],
        [
            "Hint Rewrite add_repr add64_repr ptrofs_add_repr : norm.",
            "VernacExtend",
            "068752eae79cf16e9fa955002a3244b928dd0309"
        ],
        [
            "Hint Rewrite mul_repr mul64_repr ptrofs_mul_repr : norm.",
            "VernacExtend",
            "cfb3218b2eb17c6cc54fac2be7b822a7390a4826"
        ],
        [
            "Hint Rewrite sub_repr sub64_repr ptrofs_sub_repr : norm.",
            "VernacExtend",
            "14f2b83259a18aa6dc99f3617e8c6cc64cd0fbcc"
        ],
        [
            "Hint Rewrite and_repr and64_repr : norm.",
            "VernacExtend",
            "b5973a86b4a409b156037fad209eba9eb497ced9"
        ],
        [
            "Hint Rewrite or_repr or64_repr : norm.",
            "VernacExtend",
            "7ad3cc1586a9ba1f51d812ef6596423acfe6f3f4"
        ],
        [
            "Hint Rewrite neg_repr neg64_repr : norm.",
            "VernacExtend",
            "23a7d5c71963a9b51cb289b809e8933dc41a9e8f"
        ],
        [
            "Lemma ltu_repr: forall i j, (0 <= i <= Int.max_unsigned -> 0 <= j <= Int.max_unsigned -> Int.ltu (Int.repr i) (Int.repr j) = true -> i<j)%Z.",
            "VernacStartTheoremProof",
            "4fdb0718cd128c88f34fc89fe38e1a8d108e9dc1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Int.ltu in H1.",
            "VernacExtend",
            "a45c01ebb29cbedc014442b05374ddfcc7ae13e5"
        ],
        [
            "if_tac in H1; inv H1.",
            "VernacExtend",
            "d3460feaf93639e753853f42593b5265b87a9169"
        ],
        [
            "repeat rewrite Int.unsigned_repr in H2 by assumption.",
            "VernacExtend",
            "fde6d3c96ef025835476be940de1f72e7accd75e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltu_repr_false: forall i j, (0 <= i <= Int.max_unsigned -> 0 <= j <= Int.max_unsigned -> Int.ltu (Int.repr i) (Int.repr j) = false -> i>=j)%Z.",
            "VernacStartTheoremProof",
            "5e71b06fa4915cb64f564194c04bc170de8b2e4a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Int.ltu in H1.",
            "VernacExtend",
            "a45c01ebb29cbedc014442b05374ddfcc7ae13e5"
        ],
        [
            "if_tac in H1; inv H1.",
            "VernacExtend",
            "d3460feaf93639e753853f42593b5265b87a9169"
        ],
        [
            "repeat rewrite Int.unsigned_repr in H2 by assumption.",
            "VernacExtend",
            "fde6d3c96ef025835476be940de1f72e7accd75e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma int_add_assoc1: forall z i j, Int.add (Int.add z (Int.repr i)) (Int.repr j) = Int.add z (Int.repr (i+j)).",
            "VernacStartTheoremProof",
            "e4fb3b76f9a432b351a7553f02969c62b8d98ff3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Int.add_assoc.",
            "VernacExtend",
            "9d2c804a29063deaa3aa15ceab3e092804ec1b9f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply add_repr.",
            "VernacExtend",
            "22d02aa33483c68a7a00c0dd6add3af0a1f8fdd3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite int_add_assoc1 : norm.",
            "VernacExtend",
            "ee47af3cf2ea99f9e5562c9d942bce73fa0eda74"
        ],
        [
            "Lemma ptrofs_add_assoc1: forall z i j, Ptrofs.add (Ptrofs.add z (Ptrofs.repr i)) (Ptrofs.repr j) = Ptrofs.add z (Ptrofs.repr (i+j)).",
            "VernacStartTheoremProof",
            "f4e779f816d82ed35b281f6995f80b4c2df4364d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Ptrofs.add_assoc.",
            "VernacExtend",
            "25919353e006e429b0b36d19921508d4b200e1fe"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply ptrofs_add_repr.",
            "VernacExtend",
            "643fb0e49470ad5091d1e1c60aa10dd8a8a1e6dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite ptrofs_add_assoc1 : norm.",
            "VernacExtend",
            "ca46c269d66368cbcfb76b300e054c203cff4dcc"
        ],
        [
            "Lemma divide_add_align: forall a b c, Z.divide b a -> a + (align c b) = align (a + c) b.",
            "VernacStartTheoremProof",
            "6e56b9fb0c0702883449e394e773acd8d1a17191"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof zeq b 0.",
            "VernacExtend",
            "7b43a0d83a09f4a2cd4cc80727afec7dc301c199"
        ],
        [
            "destruct H0; unfold Z.divide in H; unfold align.",
            "VernacExtend",
            "790a255078dfb1907e44ea650346352dab7a07d7"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "repeat rewrite Zdiv_0_r.",
            "VernacExtend",
            "d5b8090d5120678a05b0432384de52e8686e4967"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "replace (x * b + c + b - 1) with (x * b + (c + b - 1)) by omega.",
            "VernacExtend",
            "1ca0ecc3eac0bc771fff5c387fc56247b00b46a2"
        ],
        [
            "rewrite Z_div_plus_full_l.",
            "VernacExtend",
            "390ab7107e38eeed3109339fc44b0f36597cf25e"
        ],
        [
            "rewrite Z.mul_add_distr_r.",
            "VernacExtend",
            "bda064aacfb9c1f0e05c6459e794f408ffc88056"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma force_val_e: forall v, force_val (Some v) = v.",
            "VernacStartTheoremProof",
            "7fb6a7350d2411d0f3e46b6eee6cc75a90fe8c62"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite force_val_e: norm.",
            "VernacExtend",
            "c81b5ed4091594341f8f71108287360d377ab4a4"
        ],
        [
            "Definition ptr_eq (v1 v2: val) : Prop := match v1,v2 with | Vint n1, Vint n2 => Archi.ptr64 = false /\\ Int.cmpu Ceq n1 n2 = true /\\ Int.cmpu Ceq n1 (Int.repr 0) = true | Vlong n1, Vlong n2 => Archi.ptr64 = true /\\ Int64.cmpu Ceq n1 n2 = true /\\ Int64.cmpu Ceq n1 (Int64.repr 0) = true | Vptr b1 ofs1, Vptr b2 ofs2 => b1=b2 /\\ Ptrofs.cmpu Ceq ofs1 ofs2 = true | _,_ => False end.",
            "VernacDefinition",
            "2192ac2a3f50f434bae8d5e07c9e86f8e2b3cde6"
        ],
        [
            "Definition ptr_neq (v1 v2: val) := ~ ptr_eq v1 v2.",
            "VernacDefinition",
            "b19b6a2267770ea23f9b99a209f05bf3e8b15f29"
        ],
        [
            "Lemma ptr_eq_e: forall v1 v2, ptr_eq v1 v2 -> v1=v2.",
            "VernacStartTheoremProof",
            "5b4c86e203bdd31937a7eba05b2407a009dd322c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v1; destruct v2; simpl in H; try contradiction.",
            "VernacExtend",
            "aa7face0b7e0671b8f30ed412db3a94e4758e18f"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "pose proof (Int.eq_spec i i0).",
            "VernacExtend",
            "6f05dbd32f03daa51e52e6b493a7edb4e16ae602"
        ],
        [
            "destruct H as [Hp [? ?]].",
            "VernacExtend",
            "ca709312ff6e8fa0fcb2ae0061a05ef0d850eb55"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "subst; auto.",
            "VernacExtend",
            "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "pose proof (Int64.eq_spec i i0).",
            "VernacExtend",
            "eaecda49e51fff3dcd922d3545a45cd37775262a"
        ],
        [
            "destruct H as [Hp [? ?]].",
            "VernacExtend",
            "ca709312ff6e8fa0fcb2ae0061a05ef0d850eb55"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "subst; auto.",
            "VernacExtend",
            "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "destruct H; subst.",
            "VernacExtend",
            "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "pose proof (Ptrofs.eq_spec i i0).",
            "VernacExtend",
            "1400393b095db78bf2ed5a4c2d47ad69858dc8ae"
        ],
        [
            "rewrite H0 in H; auto.",
            "VernacExtend",
            "2e7080eddbf54ca99496a7b388786588da57ef81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptr_eq_True': forall p, isptr p -> ptr_eq p p = True.",
            "VernacStartTheoremProof",
            "e21f8a322de50fed47a1b3eecb512409f37f6d83"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "destruct p; inv H; simpl; auto.",
            "VernacExtend",
            "e053fa6b5c0664f295d9fc7cf559bc1bfad2fcc9"
        ],
        [
            "rewrite Ptrofs.eq_true.",
            "VernacExtend",
            "1b9e0486385904f8bc3a1cad6dc9ccc573761db5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptr_eq_True: forall p, is_pointer_or_null p -> ptr_eq p p = True.",
            "VernacStartTheoremProof",
            "79642cf0dfad6c70934cc19afea79f000d1c62cf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "destruct p; inv H; simpl; auto.",
            "VernacExtend",
            "e053fa6b5c0664f295d9fc7cf559bc1bfad2fcc9"
        ],
        [
            "rewrite Ptrofs.eq_true.",
            "VernacExtend",
            "1b9e0486385904f8bc3a1cad6dc9ccc573761db5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite ptr_eq_True using solve[auto] : norm.",
            "VernacExtend",
            "30ee7559da935b52a2bb7c35b822434fd39a103a"
        ],
        [
            "Lemma ptr_eq_is_pointer_or_null: forall x y, ptr_eq x y -> is_pointer_or_null x.",
            "VernacStartTheoremProof",
            "8aa3db5c084a8191410eae4c40b9a8e8d2742a4f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold ptr_eq, is_pointer_or_null in *.",
            "VernacExtend",
            "1fbb3ecef971a458f931c23eeb57997341c12c83"
        ],
        [
            "destruct x; destruct y; try tauto; destruct H as [Hp [_ ?]]; rewrite Hp.",
            "VernacExtend",
            "759a8966f942d125d956a93835ab30176ea4aa5a"
        ],
        [
            "unfold Int.cmpu in H.",
            "VernacExtend",
            "90769574939955417fd1f8f830cab8947bb20b05"
        ],
        [
            "pose proof (Int.eq_spec i (Int.repr 0)).",
            "VernacExtend",
            "88e3007467b8eae87da44a9afbed33e9d13c7930"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold Int64.cmpu in H.",
            "VernacExtend",
            "81b61a1120f04494efa64c318cf0c829aee19e31"
        ],
        [
            "pose proof (Int64.eq_spec i (Int64.repr 0)).",
            "VernacExtend",
            "e687300f0ad61ae57de6f6d89b76e09b7db3b9a8"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptr_eq_sym: forall x y, ptr_eq x y -> ptr_eq y x.",
            "VernacStartTheoremProof",
            "2379c6a175b9733c951a753229f358075043657c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof ptr_eq_is_pointer_or_null _ _ H.",
            "VernacExtend",
            "9b053559144692a8dda8519a9d708a018a191e68"
        ],
        [
            "apply ptr_eq_e in H.",
            "VernacExtend",
            "4391553f63466b73e43472f8cc2e5dd00c2c4406"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "rewrite ptr_eq_True; tauto.",
            "VernacExtend",
            "879e78d674238d1fb5119b61524b7357e465d539"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptr_eq_trans: forall x y z, ptr_eq x y -> ptr_eq y z -> ptr_eq x z.",
            "VernacStartTheoremProof",
            "6652017decfc325009e5ade7ae15cf68ac3efc2b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof ptr_eq_is_pointer_or_null _ _ H.",
            "VernacExtend",
            "9b053559144692a8dda8519a9d708a018a191e68"
        ],
        [
            "apply ptr_eq_e in H.",
            "VernacExtend",
            "4391553f63466b73e43472f8cc2e5dd00c2c4406"
        ],
        [
            "apply ptr_eq_e in H0.",
            "VernacExtend",
            "a7dfe449c5396a7b959168866e43e6a7d1d949a1"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite ptr_eq_True; tauto.",
            "VernacExtend",
            "879e78d674238d1fb5119b61524b7357e465d539"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isptr_offset_val_zero: forall v, isptr v -> offset_val 0 v = v.",
            "VernacStartTheoremProof",
            "5357bbf9a9573734ebfb94ad7cb0b7bab8b89bd1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; subst; simpl.",
            "VernacExtend",
            "616694b5e5ee7039e58729c05bf7de226ac138eb"
        ],
        [
            "rewrite Ptrofs.add_zero; reflexivity.",
            "VernacExtend",
            "31348865fc120cd727fc16f100ab8831bc0c1c7d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite isptr_offset_val_zero using solve [auto] : norm.",
            "VernacExtend",
            "f36950fd24eaa3b2573c2e2ed4d388cb446b986a"
        ],
        [
            "Lemma isptr_offset_val: forall i p, isptr (offset_val i p) = isptr p.",
            "VernacStartTheoremProof",
            "efae8aef7c8de4167b397e88ca782ed89ea2c2ab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold isptr.",
            "VernacExtend",
            "5108139fd6e9edd20672cab08ad85896f24b2d6f"
        ],
        [
            "destruct p; simpl; auto.",
            "VernacExtend",
            "62b7f0d95969e1da92986f886a38340b3ce984b7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite isptr_offset_val : norm.",
            "VernacExtend",
            "f85b18de5e6de85d519c17447a619694e6cf2440"
        ],
        [
            "Lemma isptr_force_ptr: forall v, isptr v -> force_ptr v = v.",
            "VernacStartTheoremProof",
            "fc0cf33f8d6ada27133f7426680c7be2dae888b0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; auto.",
            "VernacExtend",
            "e24cd0e4187404f1e85b8b2b887c67436769bfb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite isptr_force_ptr using solve [auto] : norm.",
            "VernacExtend",
            "3c0ded82efa8bec0a6b5fd02a8a8163eaf46119c"
        ],
        [
            "Lemma isptr_force_ptr' : forall p, isptr (force_ptr p) = isptr p.",
            "VernacStartTheoremProof",
            "e0bfc1c187602f3112267dd9eb798a15a57c312f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct p; reflexivity.",
            "VernacExtend",
            "df120dd8b9b654682ce0d9f597aa32f128d53706"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite isptr_force_ptr' : norm.",
            "VernacExtend",
            "1ae01733047322e944750888b5e039f8317e38ec"
        ],
        [
            "Ltac no_evars P := (has_evar P; fail 1) || idtac.",
            "VernacExtend",
            "e646161f239209c9e22caff1b01569c1d633794d"
        ],
        [
            "Ltac putable x := match x with | O => idtac | S ?x => putable x | Z.lt ?x ?y => putable x; putable y | Z.le ?x ?y => putable x; putable y | Z.gt ?x ?y => putable x; putable y | Z.ge ?x ?y => putable x; putable y | eq?x ?y => putable x; putable y | ?x <> ?y => putable x; putable y | Zpos ?x => putable x | Zneg ?x => putable x | Z0 => idtac | xH => idtac | xI ?x => putable x | xO ?x => putable x | Z.add ?x ?y => putable x; putable y | Z.sub ?x ?y => putable x; putable y | Z.mul ?x ?y => putable x; putable y | Z.div ?x ?y => putable x; putable y | Zmod ?x ?y => putable x; putable y | Z.max ?x ?y => putable x; putable y | Z.opp ?x => putable x | Ceq => idtac | Cne => idtac | Clt => idtac | Cle => idtac | Cgt => idtac | Cge => idtac | ?x /\\ ?y => putable x; putable y | two_power_nat ?x => putable x | Int.eq ?x ?y => putable x; putable y | Int64.eq ?x ?y => putable x; putable y | Ptrofs.eq ?x ?y => putable x; putable y | Int.lt ?x ?y => putable x; putable y | Int64.lt ?x ?y => putable x; putable y | Ptrofs.lt ?x ?y => putable x; putable y | Int.ltu ?x ?y => putable x; putable y | Int64.ltu ?x ?y => putable x; putable y | Ptrofs.ltu ?x ?y => putable x; putable y | Int.add ?x ?y => putable x; putable y | Int64.add ?x ?y => putable x; putable y | Ptrofs.add ?x ?y => putable x; putable y | Int.sub ?x ?y => putable x; putable y | Int64.sub ?x ?y => putable x; putable y | Ptrofs.sub ?x ?y => putable x; putable y | Int.mul ?x ?y => putable x; putable y | Int64.mul ?x ?y => putable x; putable y | Ptrofs.mul ?x ?y => putable x; putable y | Int.neg ?x => putable x | Int64.neg ?x => putable x | Ptrofs.neg ?x => putable x | Ceq => idtac | Cne => idtac | Clt => idtac | Cle => idtac | Cgt => idtac | Cge => idtac | Int.cmp ?op ?x ?y => putable op; putable x; putable y | Int64.cmp ?op ?x ?y => putable op; putable x; putable y | Ptrofs.cmp ?op ?x ?y => putable op; putable x; putable y | Int.cmpu ?op ?x ?y => putable op; putable x; putable y | Int64.cmpu ?op ?x ?y => putable op; putable x; putable y | Ptrofs.cmpu ?op ?x ?y => putable op; putable x; putable y | Int.repr ?x => putable x | Int64.repr ?x => putable x | Ptrofs.repr ?x => putable x | Int.signed ?x => putable x | Int64.signed ?x => putable x | Ptrofs.signed ?x => putable x | Int.unsigned ?x => putable x | Int64.unsigned ?x => putable x | Ptrofs.unsigned ?x => putable x | two_power_nat ?x => putable x | Int.max_unsigned => idtac | Int64.max_unsigned => idtac | Ptrofs.max_unsigned => idtac | Int.min_signed => idtac | Int64.min_signed => idtac | Ptrofs.min_signed => idtac | Int.max_signed => idtac | Int64.max_signed => idtac | Ptrofs.max_signed => idtac | Int.modulus => idtac | Int64.modulus => idtac | Ptrofs.modulus => idtac | Int.zwordsize => idtac | Int64.zwordsize => idtac | Ptrofs.zwordsize => idtac end.",
            "VernacExtend",
            "879ab48fdaa0e86d355dc76c2417455e8e6f5791"
        ],
        [
            "Ltac computable := match goal with |- ?x => no_evars x; putable x; compute; clear; repeat split; auto; congruence; (match goal with |- context [Archi.ptr64] => idtac end; first [change Archi.ptr64 with false | change Archi.ptr64 with true]; compute; repeat split; auto; congruence) end.",
            "VernacExtend",
            "74a29ea177010622a133a876a8addc5624e1e1aa"
        ],
        [
            "Lemma sign_ext_range2: forall lo n i hi, 0 < n < Int.zwordsize -> lo = - two_p (n-1) -> hi = two_p (n-1) - 1 -> lo <= Int.signed (Int.sign_ext n i) <= hi.",
            "VernacStartTheoremProof",
            "ac673fa5b738c5e3f4d960cd440d0a7bc62f19a7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "pose proof (Int.sign_ext_range n i H).",
            "VernacExtend",
            "5cda9110fd5bf1df767b98ceb21a818a63b4af0a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma zero_ext_range2: forall n i lo hi, 0 <= n < Int.zwordsize -> lo = 0 -> hi = two_p n - 1 -> lo <= Int.unsigned (Int.zero_ext n i) <= hi.",
            "VernacStartTheoremProof",
            "35d77581c4414c809759a5b5eceec090639b5e8b"
        ],
        [
            "intros; subst.",
            "VernacExtend",
            "49b62e7b0b09b594bdd02547566afd646d616645"
        ],
        [
            "pose proof (Int.zero_ext_range n i H).",
            "VernacExtend",
            "137a4bc53beb5c27176cf4561e7ab70196954e4c"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Extern 3 (_ <= Int.signed (Int.sign_ext _ _) <= _) => (apply sign_ext_range2; [computable | reflexivity | reflexivity]).",
            "VernacHints",
            "460553bc0c3071c915db863b6256e1c689e020fe"
        ],
        [
            "Hint Extern 3 (_ <= Int.unsigned (Int.zero_ext _ _) <= _) => (apply zero_ext_range2; [computable | reflexivity | reflexivity]).",
            "VernacHints",
            "945ea2c985ce11cfbbeb4b885f96f90f200498f1"
        ],
        [
            "Hint Rewrite sign_ext_inrange using assumption : norm.",
            "VernacExtend",
            "e79f9a5be0e79fb9f97897c38ca98688c3eec1bd"
        ],
        [
            "Hint Rewrite zero_ext_inrange using assumption : norm.",
            "VernacExtend",
            "4803db816d8e7330f16a3ed81a215e15aab3f331"
        ],
        [
            "Definition repable_signed (z: Z) := Int.min_signed <= z <= Int.max_signed.",
            "VernacDefinition",
            "97e7ca8a9c21a77ac42b17e3c783fd922d357c82"
        ],
        [
            "Definition repable_signed_dec (z: Z) : {repable_signed z}+{~repable_signed z}.",
            "VernacDefinition",
            "31cd25e7413fd62bae57c0724a6a37cec3e87021"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold repable_signed.",
            "VernacExtend",
            "4ef72a79b9f09dbf67690a316c9481ce4d0a54da"
        ],
        [
            "destruct (zlt z Int.min_signed).",
            "VernacExtend",
            "9d2f84fd6b2237b718f0acf7ac7dbb5cf76a8f65"
        ],
        [
            "right; intros [? _]; unfold Int.min_signed; omega.",
            "VernacExtend",
            "7d63e4e5803e00d5ad54c8a7add5f860b74bd19b"
        ],
        [
            "destruct (zlt Int.max_signed z).",
            "VernacExtend",
            "9690fd372e2653d1e585487efb8888792f4c624d"
        ],
        [
            "right; intros [_ ?]; unfold Int.max_signed; omega.",
            "VernacExtend",
            "a03d42930a62ebe669f81026eb9f2e411842951a"
        ],
        [
            "left; split; omega.",
            "VernacExtend",
            "eef99d06ca071d7363b0efd6d45f6190dfe2892c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma repable_signed_mult2: forall i j, i<>0 -> (j <= Int.max_signed \\/ i <> -1) -> repable_signed (i*j) -> repable_signed j.",
            "VernacStartTheoremProof",
            "c7191d7dc591e7b9b91f354f3586a7532ac52be5"
        ],
        [
            "intros until 1.",
            "VernacExtend",
            "02a88d708d00fec9315af96f54c66efbe80acead"
        ],
        [
            "intro HACK.",
            "VernacExtend",
            "2b87ac3b4ccb004ab6dcb33fe5ed10b24610fcd9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (MAX: 0 < Int.max_signed) by (compute; auto).",
            "VernacExtend",
            "74da576b7d637c4159ad12484bffa40d91af16c9"
        ],
        [
            "assert (MIN: Int.min_signed < 0) by (compute; auto).",
            "VernacExtend",
            "3ed14733ec6a45865dba13fc172d136f0706e81f"
        ],
        [
            "hnf in H0|-*.",
            "VernacExtend",
            "e63b866eba9bfaa3450c481ebbe1aab0de02a973"
        ],
        [
            "assert (0 < i \\/ i < 0) by omega; clear H.",
            "VernacExtend",
            "45097c279db0eb5a6436c605320fe4a76e8cb788"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "replace i with ((i-1)+1) in H0 by omega.",
            "VernacExtend",
            "c3cda0829803fa060b7ebd4dbc98f58c78a6d6d1"
        ],
        [
            "rewrite Z.mul_add_distr_r in H0.",
            "VernacExtend",
            "9deb0cc1efa56d2eb902f239a6281e8d0822475e"
        ],
        [
            "rewrite Z.mul_1_l in H0.",
            "VernacExtend",
            "a990815d99595fe3e661471275f5db7fc7e15b59"
        ],
        [
            "assert (j < 0 \\/ 0 <= j) by omega.",
            "VernacExtend",
            "78fa87f279dabd12b7ab0c8264cda227daeed72a"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "assert ((i-1)*j <= 0) by (apply Z.mul_nonneg_nonpos; omega).",
            "VernacExtend",
            "7f7472337a6500b0932e1f9adc5388f759eb8aad"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (0 <= (i-1)*j) by (apply Z.mul_nonneg_nonneg; omega).",
            "VernacExtend",
            "78f471fb38f4ae57f225c72bdd753effe1ca98b8"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "replace i with ((i+1)-1) in H0 by omega.",
            "VernacExtend",
            "12c698ffc20120aa63e2b79055deafae6391c72f"
        ],
        [
            "rewrite Z.mul_sub_distr_r in H0.",
            "VernacExtend",
            "e719ff7e02768575ff2e07869024017cd1e02899"
        ],
        [
            "rewrite Z.mul_1_l in H0.",
            "VernacExtend",
            "a990815d99595fe3e661471275f5db7fc7e15b59"
        ],
        [
            "assert (MINMAX: Int.min_signed = -Int.max_signed - 1) by reflexivity.",
            "VernacExtend",
            "ed69aa7227eba4b35cffbd4b60ea599d5455cbfb"
        ],
        [
            "assert (j < 0 \\/ 0 <= j) by omega.",
            "VernacExtend",
            "78fa87f279dabd12b7ab0c8264cda227daeed72a"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "assert (0 <= (i+1)*j) by (apply Z.mul_nonpos_nonpos; omega).",
            "VernacExtend",
            "ad2ee828e67007bfbe24e85d4e4a7f3704a87320"
        ],
        [
            "rewrite MINMAX in H0|-*.",
            "VernacExtend",
            "6fb3fe79f9245c3cbc6b38cc8b189c69b76485de"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert ((i+1)*j <= 0) by (apply Z.mul_nonpos_nonneg; omega).",
            "VernacExtend",
            "f5587f3bd3d582b44a24f1b1b0d5075bf96d60c1"
        ],
        [
            "rewrite MINMAX in H0|-*.",
            "VernacExtend",
            "6fb3fe79f9245c3cbc6b38cc8b189c69b76485de"
        ],
        [
            "split; try omega.",
            "VernacExtend",
            "66cc1464539fc71f7b2247524d7ac01ac9c55514"
        ],
        [
            "clear MIN MINMAX.",
            "VernacExtend",
            "ac305bf6809db6f43955599fbe87ab6664169889"
        ],
        [
            "destruct H0 as [? _].",
            "VernacExtend",
            "1e578e84e7a531f32f36c087bbd511d26e131ff7"
        ],
        [
            "assert (- Int.max_signed <= 1 + (i+1)*j - j) by omega; clear H0.",
            "VernacExtend",
            "b0afb882f4d6c7705f9583017842e1e1f9ad91c9"
        ],
        [
            "assert (-1 - (i + 1) * j + j <= Int.max_signed) by omega; clear H3.",
            "VernacExtend",
            "365f94d757a8fde6e6062fd305735be0f11b82a7"
        ],
        [
            "destruct HACK; auto.",
            "VernacExtend",
            "dcb02c383efee6cfcb7d2ba1c6568fdcea9fbf17"
        ],
        [
            "assert (i < -1) by omega.",
            "VernacExtend",
            "66944655f99feb0d4ac9ffd0578bfe4cd8fb2bd2"
        ],
        [
            "destruct (zlt 0 j); try omega.",
            "VernacExtend",
            "5e050ccd57bc843f12a8ae98e7e82b3ce98201b1"
        ],
        [
            "assert ((i+1)*j < 0).",
            "VernacExtend",
            "2d1c00bfc397388e9ab4e0b217f79fbd9680b8c2"
        ],
        [
            "rewrite Z.mul_add_distr_r.",
            "VernacExtend",
            "bda064aacfb9c1f0e05c6459e794f408ffc88056"
        ],
        [
            "replace i with ((i+1)-1) by omega.",
            "VernacExtend",
            "eb62f59c66b652b3a091b5014408b8badbed009d"
        ],
        [
            "rewrite Z.mul_sub_distr_r.",
            "VernacExtend",
            "cfa6abd60dba50a6851f98e0907826954ac67a8d"
        ],
        [
            "assert ((i+1)*j<0); [ | omega].",
            "VernacExtend",
            "81a5ccdbc42b20167af1e85032eac999cdcdc903"
        ],
        [
            "apply Z.mul_neg_pos; auto.",
            "VernacExtend",
            "d16fb8e36852aac7238e720e45d5daa28456bf99"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma repable_signed_mult1: forall i j, j<>0 -> (i <= Int.max_signed \\/ j <> -1) -> repable_signed (i*j) -> repable_signed i.",
            "VernacStartTheoremProof",
            "5964ae82f4776d440e0941c35b1273f73d0c0ea1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Zmult_comm in H1.",
            "VernacExtend",
            "7c78f804a18242d31a0f535657f250d3dd088f85"
        ],
        [
            "apply repable_signed_mult2 in H0; auto.",
            "VernacExtend",
            "4c0a5f54371034ffba6caba7e4e941f93b97380e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma force_signed_int_e: forall i, force_signed_int (Vint i) = Int.signed i.",
            "VernacStartTheoremProof",
            "a70823756469c4944bbbe3628f0ea03a50f21d47"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite force_signed_int_e : norm.",
            "VernacExtend",
            "af89c744bea8afee294c09cb9037b196e537b77a"
        ],
        [
            "Ltac const_equation x := let y := eval compute in x in exact (x = y).",
            "VernacExtend",
            "e8c1c3e69c09a0048470a91a98c11742fde1685c"
        ],
        [
            "Ltac Zground X := match X with | Z0 => idtac | Zpos ?y => Zground y | Zneg ?y => Zground y | xH => idtac | xO ?y => Zground y | xI ?y => Zground y end.",
            "VernacExtend",
            "57f7f6a7b6b57955b812cb90ece055528ec11652"
        ],
        [
            "Ltac natground X := match X with O => idtac | S ?Y => natground Y end.",
            "VernacExtend",
            "08f48d5cd16ada276d94762d9dd4e17ba199e52e"
        ],
        [
            "Ltac compute_Z_of_nat := repeat match goal with | H: context [Z.of_nat ?n] |- _ => natground n; let z := constr:(Z.of_nat n) in let y := eval hnf in z in change z with y in * | |- context [Z.of_nat ?n] => natground n; let z := constr:(Z.of_nat n) in let y := eval hnf in z in change z with y in * end.",
            "VernacExtend",
            "42c4d18e2606e3a921f987bbe49f815c57751a87"
        ],
        [
            "Ltac pose_const_equation X := match goal with | H: X = ?Y |- _ => Zground Y | _ => let z := eval compute in X in match z with context C [Archi.ptr64] => first [ unify Archi.ptr64 false; let u := context C [false] in let u := eval compute in u in change X with u in * |unify Archi.ptr64 true; let u := context C [true] in let u := eval compute in u in change X with u in * ] | _ => change X with z in * end end.",
            "VernacExtend",
            "525ffb5ed8ca52f51e552b4fe5d26be2fff80fc8"
        ],
        [
            "Ltac perhaps_post_const_equation X := lazymatch goal with | H: context [X] |- _ => pose_const_equation X | |- context [X] => pose_const_equation X | |- _ => idtac end.",
            "VernacExtend",
            "edcc1b24f6a7861b239139c048597874fca2441e"
        ],
        [
            "Ltac pose_const_equations L := match L with | ?X :: ?Y => perhaps_post_const_equation X; pose_const_equations Y | nil => idtac end.",
            "VernacExtend",
            "3c0114ecb36d789d35f650ef4fce9817a71a675c"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Ltac pose_standard_const_equations := pose_const_equations [ Int.zwordsize; Int.modulus; Int.half_modulus; Int.max_unsigned; Int.max_signed; Int.min_signed; Int64.zwordsize; Int64.modulus; Int64.half_modulus; Int64.max_unsigned; Int64.max_signed; Int64.min_signed; Ptrofs.zwordsize; Ptrofs.modulus; Ptrofs.half_modulus; Ptrofs.max_unsigned; Ptrofs.max_signed; Ptrofs.min_signed; Byte.min_signed; Byte.max_signed; Byte.max_unsigned; Byte.modulus ]; pose_const_equations [Int.wordsize; Int64.wordsize; Ptrofs.wordsize].",
            "VernacExtend",
            "8978a134c668c9277c15fe242b26126a2b0aa97f"
        ],
        [
            "Ltac pose_lemma F A L := match type of (L A) with ?T => lazymatch goal with | H: T |- _ => fail | H: T /\\ _ |- _ => fail | |- _ => pose proof (L A) end end.",
            "VernacExtend",
            "be7d160fb9813a4dfcc7abd06862eff4a9ce9532"
        ],
        [
            "Ltac pose_lemmas F L := repeat match goal with | |- context [F ?A] => pose_lemma F A L | H: context [F ?A] |- _ => pose_lemma F A L end.",
            "VernacExtend",
            "2dc0208bd78a53592fff1f324138547c101f4be6"
        ],
        [
            "Ltac rep_omega_setup := repeat match goal with | x:= _ : Z |- _ => subst x | x:= _ : nat |- _ => subst x | x:= _ |- _ => clearbody x end; try autorewrite with rep_omega in *; unfold repable_signed in *; compute_Z_of_nat; pose_Zlength_nonneg; pose_lemmas Byte.unsigned Byte.unsigned_range; pose_lemmas Byte.signed Byte.signed_range; pose_lemmas Int.unsigned Int.unsigned_range; pose_lemmas Int.signed Int.signed_range; pose_lemmas Int64.unsigned Int64.unsigned_range; pose_lemmas Int64.signed Int64.signed_range; pose_lemmas Ptrofs.unsigned Ptrofs.unsigned_range; pose_standard_const_equations.",
            "VernacExtend",
            "fe66d60d2e1d630433d351e70c0a305ed776b406"
        ],
        [
            "Ltac rep_omega_setup2 := idtac.",
            "VernacExtend",
            "fd0eeb7aef22d6c5cfa10adef98ee1aeba9e3508"
        ],
        [
            "Ltac rep_omega2 := repeat match goal with | |- _ /\\ _ => match goal with | |- context [Z.of_nat] => split | |- context [Z.to_nat] => split end end; match goal with | |- (_ >= _)%nat => apply <- Nat2Z.inj_ge | |- (_ > _)%nat => apply <- Nat2Z.inj_gt | |- (_ <= _)%nat => apply <- Nat2Z.inj_le | |- (_ < _)%nat => apply <- Nat2Z.inj_lt | |- @eq nat _ _ => apply Nat2Z.inj | |- _ => idtac end; repeat rewrite ?Nat2Z.id, ?Nat2Z.inj_add, ?Nat2Z.inj_mul, ?Z2Nat.id, ?Nat2Z.inj_sub, ?Z2Nat.inj_sub, ?Z2Nat.inj_add by rep_omega2; omega.",
            "VernacExtend",
            "7eb910152568c4d7518dd892613de0e7ff4f6b9c"
        ],
        [
            "Ltac rep_omega := rep_omega_setup; rep_omega_setup2; rep_omega2.",
            "VernacExtend",
            "1175a97ccc3645f8d53a12fbffb78325fe8a2b5a"
        ],
        [
            "Ltac repable_signed := idtac \"Warning: repable_signed is deprecated; use rep_omega\"; rep_omega.",
            "VernacExtend",
            "614130f4f3a1c218bf477b3b4309e0fb402b3053"
        ],
        [
            "Lemma Vubyte_injective i j (H: Vubyte i = Vubyte j): i=j.",
            "VernacStartTheoremProof",
            "793ebb9fadc3fc8d84924296a5278a0354855b05"
        ],
        [
            "assert (B: Byte.zwordsize = 8) by reflexivity.",
            "VernacExtend",
            "ba7c4fd02925d6cf33455ce6d5aac919f41abb3b"
        ],
        [
            "assert (I: Int.zwordsize = 32) by reflexivity.",
            "VernacExtend",
            "b03de86a53cb697dea79fdfb6d12418a955f1c25"
        ],
        [
            "apply Byte.same_bits_eq; intros a A.",
            "VernacExtend",
            "b0ed3aef5d5d708cacdaf9a7a7811bec50ace9ef"
        ],
        [
            "unfold Vubyte in H.",
            "VernacExtend",
            "533e09843871f7432543933b179599614ed3c18d"
        ],
        [
            "remember (Int.repr (Byte.unsigned i)) as z.",
            "VernacExtend",
            "235dfb2e120bed33b711609001c4953aeacd82f6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "destruct i; destruct j.",
            "VernacExtend",
            "5cc01b86bcd743d81ec090033175800b0c0c420b"
        ],
        [
            "unfold Byte.testbit.",
            "VernacExtend",
            "af91cff229b0003c85047054064957229fee87e7"
        ],
        [
            "unfold Byte.unsigned in H1.",
            "VernacExtend",
            "3448a344ebcfb67de3451f83ad1a994e333cdb7b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- 2 Int.testbit_repr, H1; trivial; omega.",
            "VernacExtend",
            "a5eb3d075bdb7bf7b4e2cb53cd3233004579528d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_Vubyte_injective: forall l m, map Vubyte l = map Vubyte m -> l=m.",
            "VernacStartTheoremProof",
            "b53d27829aa9e54d83152c22578dd92c93e47e78"
        ],
        [
            "induction l; intros.",
            "VernacExtend",
            "f3f6b28c6822ad560a06f008ea0a5aa487d0e8e3"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct m; simpl in *; inv H; trivial.",
            "VernacExtend",
            "a474fab751cb70c9a0d1c41b9821546e0c50ca9d"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct m; [ inv H |].",
            "VernacExtend",
            "86b98e425a440605618431b8cedcf27c9f5ec147"
        ],
        [
            "rewrite 2 map_cons in H.",
            "VernacExtend",
            "75c2b8bf24bda43a9e97d5a240dce834d4758a5a"
        ],
        [
            "apply cons_inv in H.",
            "VernacExtend",
            "4a8477bfd2673890f005a15ae83b79dbcbd34f22"
        ],
        [
            "destruct H; subst.",
            "VernacExtend",
            "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
        ],
        [
            "apply Vubyte_injective in H.",
            "VernacExtend",
            "1e1abd90f7e250d9d272e1803b6c96447fb4f9ac"
        ],
        [
            "f_equal; eauto.",
            "VernacExtend",
            "0aaae116840c77af05ab473518cd728dcb792af6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Vbyte_injective a b (H: Vbyte a = Vbyte b): a=b.",
            "VernacStartTheoremProof",
            "36f5e115f999a5f20481bd0c8dbace096e1635aa"
        ],
        [
            "unfold Vbyte in H.",
            "VernacExtend",
            "73e0f4cdbed4bf5821c80fe86bc287fed78e95fb"
        ],
        [
            "apply Vint_injective in H.",
            "VernacExtend",
            "a228464af8df716314452d8082b81cf15812bed0"
        ],
        [
            "apply Byte.same_bits_eq; intros i I.",
            "VernacExtend",
            "b9d29a66bd1597c0156f97e7bad2daed1ffd1206"
        ],
        [
            "assert (Imin: Int.min_signed = -2147483648) by reflexivity.",
            "VernacExtend",
            "828d03195b7d040051fd8b01ff57fdba4512c2f0"
        ],
        [
            "assert (Imax: Int.max_signed = 2147483647) by reflexivity.",
            "VernacExtend",
            "4df42d8787bfcad9bbd290b7b893830ccda48f52"
        ],
        [
            "assert (Bmin: Byte.min_signed = -128) by reflexivity.",
            "VernacExtend",
            "e42a38a5d9bf0d3b9ee0b5c3c37ee4e542a9f997"
        ],
        [
            "assert (Bmax: Byte.max_signed = 127) by reflexivity.",
            "VernacExtend",
            "68f8970e02197d11d628ca0a69f551ec462835a5"
        ],
        [
            "assert (Byte.signed a = Byte.signed b).",
            "VernacExtend",
            "061b08a12c6f21adf84fedbbefd320b385989168"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite <- (Int.signed_repr (Byte.signed a)).",
            "VernacExtend",
            "5b718b4c573fa4ac5379f455498dfbbfda81746b"
        ],
        [
            "rewrite <- (Int.signed_repr (Byte.signed b)).",
            "VernacExtend",
            "3b836dea7cac09c3ecd24a61fab7d11da85535fa"
        ],
        [
            "rewrite H; trivial.",
            "VernacExtend",
            "be0ba1f6432776bd85200205d59a572473bb951c"
        ],
        [
            "specialize (Byte.signed_range b); omega.",
            "VernacExtend",
            "9293fc9ba2a44e873226ad73c6d563a5b901290b"
        ],
        [
            "specialize (Byte.signed_range a); omega.",
            "VernacExtend",
            "d2f97e692e64f463e6b2f1152dace80ef0339dda"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "unfold Byte.testbit.",
            "VernacExtend",
            "af91cff229b0003c85047054064957229fee87e7"
        ],
        [
            "rewrite 2 Byte.unsigned_signed.",
            "VernacExtend",
            "438700811cacad2ff71443b41e69dda10dbcc51e"
        ],
        [
            "unfold Byte.lt.",
            "VernacExtend",
            "94c8fe0a8fc67bb097a5408ed1f198ef2e4198f8"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Znth_map_Vbyte: forall (i : Z) (l : list byte), 0 <= i < Zlength l -> Znth i (map Vbyte l) = Vbyte (Znth i l).",
            "VernacStartTheoremProof",
            "7f33390a9fd92751380debc7e8315e59115c3ddf"
        ],
        [
            "intros i l.",
            "VernacExtend",
            "4086f03309a4d4e3de03b93031c5dded4f62598f"
        ],
        [
            "apply Znth_map.",
            "VernacExtend",
            "2397f5526a9101d4cdb76a1d3e1d950f51783798"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite Znth_map_Vbyte using list_solve : norm entailer_rewrite.",
            "VernacExtend",
            "f7bc40f6a90ac1c49b4d341665b7b707807bc5f5"
        ],
        [
            "Ltac fold_Vbyte := repeat match goal with |- context [Vint (Int.repr (Byte.signed ?c))] => fold (Vbyte c) end.",
            "VernacExtend",
            "1fb99dc50ff7b6d67b91eb2f877f03b4f51a8807"
        ],
        [
            "Lemma Znth_map_Vubyte: forall (i : Z) (l : list byte), 0 <= i < Zlength l -> Znth i (map Vubyte l) = Vubyte (Znth i l).",
            "VernacStartTheoremProof",
            "1d5b0b3a65b04787db355798673c7d3eeaa0671b"
        ],
        [
            "intros i l.",
            "VernacExtend",
            "4086f03309a4d4e3de03b93031c5dded4f62598f"
        ],
        [
            "apply Znth_map.",
            "VernacExtend",
            "2397f5526a9101d4cdb76a1d3e1d950f51783798"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite Znth_map_Vubyte using list_solve : norm entailer_rewrite.",
            "VernacExtend",
            "3a12217b3cd4561f463af9d54df41b178b482664"
        ],
        [
            "Ltac hint := idtac \"Hints are only available when verifying C programs, that is, when VST.floyd.proofauto has been imported. But you have imported only VST.floyd.functional_base, without separation logic. In VST.floyd.functional_base the following VST tactics are available: rep_omega, list_solve, if_tac, autorewrite with sublist, computable, ...\".",
            "VernacExtend",
            "f34bdb1df5e798a9440907d902063eec18b53270"
        ]
    ],
    "proofs": [
        {
            "name": "Vint_injective",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "inv H; trivial.",
                        "VernacExtend",
                        "baf4712cf6b503c0879946033cfaad1018cca3ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_Vint_injective",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "induction l; intros.",
                        "VernacExtend",
                        "f3f6b28c6822ad560a06f008ea0a5aa487d0e8e3"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct m; inv H; trivial.",
                        "VernacExtend",
                        "bd6f837d89fe9649c233877e1202ecd49daa48d8"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct m; inv H.",
                        "VernacExtend",
                        "28092fa0403a9a47f033fe0e2e3044fa5ab81848"
                    ]
                },
                {
                    "command": [
                        "f_equal; eauto.",
                        "VernacExtend",
                        "0aaae116840c77af05ab473518cd728dcb792af6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cons_inv",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H; eauto.",
                        "VernacExtend",
                        "5561dbde521b746b597746e7cf4e36b0e4327686"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_long_dec",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
                        "VernacExtend",
                        "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "is_single_dec",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
                        "VernacExtend",
                        "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "is_float_dec",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
                        "VernacExtend",
                        "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_integer_dec",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "unfold is_pointer_or_integer.",
                        "VernacExtend",
                        "533ce8d60eb46057d4c6faa8f9e416d32b015374"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
                        "VernacExtend",
                        "63bdbb10fe603f2d3ea5194466a597d0df105be1"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_null_dec",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "destruct v; simpl; try solve [right; intros N; trivial]; try solve [left; trivial].",
                        "VernacExtend",
                        "bb9dbfb5e81e801531c095443c1f9736527d2da8"
                    ]
                },
                {
                    "command": [
                        "try apply Int.eq_dec; destruct Archi.ptr64; auto; apply Int64.eq_dec.",
                        "VernacExtend",
                        "14c645471fbc7a97167277fbbe467a07f6ba70b4"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "isptr_dec",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "destruct v; simpl; try solve [right; intros N; trivial]; left; trivial.",
                        "VernacExtend",
                        "5fa60cbf796de331d9e72d1a9698f645086bdf5e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "isptr_offset_val'",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct p; try contradiction; apply Coq.Init.Logic.I.",
                        "VernacExtend",
                        "9cbe817a2e9fd0b4813a475fa470cc4f2a4cdde1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "offset_val_force_ptr",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "extensionality v.",
                        "VernacExtend",
                        "692b695bd0dc2cb16da8b030a0ea4f83cb3c2cef"
                    ]
                },
                {
                    "command": [
                        "destruct v; try reflexivity.",
                        "VernacExtend",
                        "3eb3c959139a23d6cb7669a298f49504f33b689c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.add_zero; auto.",
                        "VernacExtend",
                        "e148f0f02dab63f981c94b0fc072782fadb7dbbd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "offset_offset_val",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros; unfold offset_val.",
                        "VernacExtend",
                        "4dd3a4fac6fcbb9cb7dca766453c15f954fd1c08"
                    ]
                },
                {
                    "command": [
                        "destruct v; auto.",
                        "VernacExtend",
                        "82aad02dac89be3e5ec784655b657f349965d9b4"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.add_assoc.",
                        "VernacExtend",
                        "25919353e006e429b0b36d19921508d4b200e1fe"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply ptrofs_add_repr.",
                        "VernacExtend",
                        "643fb0e49470ad5091d1e1c60aa10dd8a8a1e6dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltu_repr",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Int.ltu in H1.",
                        "VernacExtend",
                        "a45c01ebb29cbedc014442b05374ddfcc7ae13e5"
                    ]
                },
                {
                    "command": [
                        "if_tac in H1; inv H1.",
                        "VernacExtend",
                        "d3460feaf93639e753853f42593b5265b87a9169"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Int.unsigned_repr in H2 by assumption.",
                        "VernacExtend",
                        "fde6d3c96ef025835476be940de1f72e7accd75e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltu_repr_false",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Int.ltu in H1.",
                        "VernacExtend",
                        "a45c01ebb29cbedc014442b05374ddfcc7ae13e5"
                    ]
                },
                {
                    "command": [
                        "if_tac in H1; inv H1.",
                        "VernacExtend",
                        "d3460feaf93639e753853f42593b5265b87a9169"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Int.unsigned_repr in H2 by assumption.",
                        "VernacExtend",
                        "fde6d3c96ef025835476be940de1f72e7accd75e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "int_add_assoc1",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Int.add_assoc.",
                        "VernacExtend",
                        "9d2c804a29063deaa3aa15ceab3e092804ec1b9f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply add_repr.",
                        "VernacExtend",
                        "22d02aa33483c68a7a00c0dd6add3af0a1f8fdd3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptrofs_add_assoc1",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.add_assoc.",
                        "VernacExtend",
                        "25919353e006e429b0b36d19921508d4b200e1fe"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply ptrofs_add_repr.",
                        "VernacExtend",
                        "643fb0e49470ad5091d1e1c60aa10dd8a8a1e6dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_add_align",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof zeq b 0.",
                        "VernacExtend",
                        "7b43a0d83a09f4a2cd4cc80727afec7dc301c199"
                    ]
                },
                {
                    "command": [
                        "destruct H0; unfold Z.divide in H; unfold align.",
                        "VernacExtend",
                        "790a255078dfb1907e44ea650346352dab7a07d7"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Zdiv_0_r.",
                        "VernacExtend",
                        "d5b8090d5120678a05b0432384de52e8686e4967"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "replace (x * b + c + b - 1) with (x * b + (c + b - 1)) by omega.",
                        "VernacExtend",
                        "1ca0ecc3eac0bc771fff5c387fc56247b00b46a2"
                    ]
                },
                {
                    "command": [
                        "rewrite Z_div_plus_full_l.",
                        "VernacExtend",
                        "390ab7107e38eeed3109339fc44b0f36597cf25e"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_add_distr_r.",
                        "VernacExtend",
                        "bda064aacfb9c1f0e05c6459e794f408ffc88056"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_e",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v1; destruct v2; simpl in H; try contradiction.",
                        "VernacExtend",
                        "aa7face0b7e0671b8f30ed412db3a94e4758e18f"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.eq_spec i i0).",
                        "VernacExtend",
                        "6f05dbd32f03daa51e52e6b493a7edb4e16ae602"
                    ]
                },
                {
                    "command": [
                        "destruct H as [Hp [? ?]].",
                        "VernacExtend",
                        "ca709312ff6e8fa0fcb2ae0061a05ef0d850eb55"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "subst; auto.",
                        "VernacExtend",
                        "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int64.eq_spec i i0).",
                        "VernacExtend",
                        "eaecda49e51fff3dcd922d3545a45cd37775262a"
                    ]
                },
                {
                    "command": [
                        "destruct H as [Hp [? ?]].",
                        "VernacExtend",
                        "ca709312ff6e8fa0fcb2ae0061a05ef0d850eb55"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "subst; auto.",
                        "VernacExtend",
                        "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "destruct H; subst.",
                        "VernacExtend",
                        "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "pose proof (Ptrofs.eq_spec i i0).",
                        "VernacExtend",
                        "1400393b095db78bf2ed5a4c2d47ad69858dc8ae"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H; auto.",
                        "VernacExtend",
                        "2e7080eddbf54ca99496a7b388786588da57ef81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_True'",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "destruct p; inv H; simpl; auto.",
                        "VernacExtend",
                        "e053fa6b5c0664f295d9fc7cf559bc1bfad2fcc9"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.eq_true.",
                        "VernacExtend",
                        "1b9e0486385904f8bc3a1cad6dc9ccc573761db5"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_True",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "destruct p; inv H; simpl; auto.",
                        "VernacExtend",
                        "e053fa6b5c0664f295d9fc7cf559bc1bfad2fcc9"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.eq_true.",
                        "VernacExtend",
                        "1b9e0486385904f8bc3a1cad6dc9ccc573761db5"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_is_pointer_or_null",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold ptr_eq, is_pointer_or_null in *.",
                        "VernacExtend",
                        "1fbb3ecef971a458f931c23eeb57997341c12c83"
                    ]
                },
                {
                    "command": [
                        "destruct x; destruct y; try tauto; destruct H as [Hp [_ ?]]; rewrite Hp.",
                        "VernacExtend",
                        "759a8966f942d125d956a93835ab30176ea4aa5a"
                    ]
                },
                {
                    "command": [
                        "unfold Int.cmpu in H.",
                        "VernacExtend",
                        "90769574939955417fd1f8f830cab8947bb20b05"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.eq_spec i (Int.repr 0)).",
                        "VernacExtend",
                        "88e3007467b8eae87da44a9afbed33e9d13c7930"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "unfold Int64.cmpu in H.",
                        "VernacExtend",
                        "81b61a1120f04494efa64c318cf0c829aee19e31"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int64.eq_spec i (Int64.repr 0)).",
                        "VernacExtend",
                        "e687300f0ad61ae57de6f6d89b76e09b7db3b9a8"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_sym",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof ptr_eq_is_pointer_or_null _ _ H.",
                        "VernacExtend",
                        "9b053559144692a8dda8519a9d708a018a191e68"
                    ]
                },
                {
                    "command": [
                        "apply ptr_eq_e in H.",
                        "VernacExtend",
                        "4391553f63466b73e43472f8cc2e5dd00c2c4406"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "rewrite ptr_eq_True; tauto.",
                        "VernacExtend",
                        "879e78d674238d1fb5119b61524b7357e465d539"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_trans",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof ptr_eq_is_pointer_or_null _ _ H.",
                        "VernacExtend",
                        "9b053559144692a8dda8519a9d708a018a191e68"
                    ]
                },
                {
                    "command": [
                        "apply ptr_eq_e in H.",
                        "VernacExtend",
                        "4391553f63466b73e43472f8cc2e5dd00c2c4406"
                    ]
                },
                {
                    "command": [
                        "apply ptr_eq_e in H0.",
                        "VernacExtend",
                        "a7dfe449c5396a7b959168866e43e6a7d1d949a1"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite ptr_eq_True; tauto.",
                        "VernacExtend",
                        "879e78d674238d1fb5119b61524b7357e465d539"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_offset_val_zero",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; subst; simpl.",
                        "VernacExtend",
                        "616694b5e5ee7039e58729c05bf7de226ac138eb"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.add_zero; reflexivity.",
                        "VernacExtend",
                        "31348865fc120cd727fc16f100ab8831bc0c1c7d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_offset_val",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold isptr.",
                        "VernacExtend",
                        "5108139fd6e9edd20672cab08ad85896f24b2d6f"
                    ]
                },
                {
                    "command": [
                        "destruct p; simpl; auto.",
                        "VernacExtend",
                        "62b7f0d95969e1da92986f886a38340b3ce984b7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_force_ptr",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; auto.",
                        "VernacExtend",
                        "e24cd0e4187404f1e85b8b2b887c67436769bfb2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_force_ptr'",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct p; reflexivity.",
                        "VernacExtend",
                        "df120dd8b9b654682ce0d9f597aa32f128d53706"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sign_ext_range2",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.sign_ext_range n i H).",
                        "VernacExtend",
                        "5cda9110fd5bf1df767b98ceb21a818a63b4af0a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zero_ext_range2",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "intros; subst.",
                        "VernacExtend",
                        "49b62e7b0b09b594bdd02547566afd646d616645"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.zero_ext_range n i H).",
                        "VernacExtend",
                        "137a4bc53beb5c27176cf4561e7ab70196954e4c"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "repable_signed_dec",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold repable_signed.",
                        "VernacExtend",
                        "4ef72a79b9f09dbf67690a316c9481ce4d0a54da"
                    ]
                },
                {
                    "command": [
                        "destruct (zlt z Int.min_signed).",
                        "VernacExtend",
                        "9d2f84fd6b2237b718f0acf7ac7dbb5cf76a8f65"
                    ]
                },
                {
                    "command": [
                        "right; intros [? _]; unfold Int.min_signed; omega.",
                        "VernacExtend",
                        "7d63e4e5803e00d5ad54c8a7add5f860b74bd19b"
                    ]
                },
                {
                    "command": [
                        "destruct (zlt Int.max_signed z).",
                        "VernacExtend",
                        "9690fd372e2653d1e585487efb8888792f4c624d"
                    ]
                },
                {
                    "command": [
                        "right; intros [_ ?]; unfold Int.max_signed; omega.",
                        "VernacExtend",
                        "a03d42930a62ebe669f81026eb9f2e411842951a"
                    ]
                },
                {
                    "command": [
                        "left; split; omega.",
                        "VernacExtend",
                        "eef99d06ca071d7363b0efd6d45f6190dfe2892c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "repable_signed_mult2",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "intros until 1.",
                        "VernacExtend",
                        "02a88d708d00fec9315af96f54c66efbe80acead"
                    ]
                },
                {
                    "command": [
                        "intro HACK.",
                        "VernacExtend",
                        "2b87ac3b4ccb004ab6dcb33fe5ed10b24610fcd9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (MAX: 0 < Int.max_signed) by (compute; auto).",
                        "VernacExtend",
                        "74da576b7d637c4159ad12484bffa40d91af16c9"
                    ]
                },
                {
                    "command": [
                        "assert (MIN: Int.min_signed < 0) by (compute; auto).",
                        "VernacExtend",
                        "3ed14733ec6a45865dba13fc172d136f0706e81f"
                    ]
                },
                {
                    "command": [
                        "hnf in H0|-*.",
                        "VernacExtend",
                        "e63b866eba9bfaa3450c481ebbe1aab0de02a973"
                    ]
                },
                {
                    "command": [
                        "assert (0 < i \\/ i < 0) by omega; clear H.",
                        "VernacExtend",
                        "45097c279db0eb5a6436c605320fe4a76e8cb788"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "replace i with ((i-1)+1) in H0 by omega.",
                        "VernacExtend",
                        "c3cda0829803fa060b7ebd4dbc98f58c78a6d6d1"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_add_distr_r in H0.",
                        "VernacExtend",
                        "9deb0cc1efa56d2eb902f239a6281e8d0822475e"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_l in H0.",
                        "VernacExtend",
                        "a990815d99595fe3e661471275f5db7fc7e15b59"
                    ]
                },
                {
                    "command": [
                        "assert (j < 0 \\/ 0 <= j) by omega.",
                        "VernacExtend",
                        "78fa87f279dabd12b7ab0c8264cda227daeed72a"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "assert ((i-1)*j <= 0) by (apply Z.mul_nonneg_nonpos; omega).",
                        "VernacExtend",
                        "7f7472337a6500b0932e1f9adc5388f759eb8aad"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (0 <= (i-1)*j) by (apply Z.mul_nonneg_nonneg; omega).",
                        "VernacExtend",
                        "78f471fb38f4ae57f225c72bdd753effe1ca98b8"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "replace i with ((i+1)-1) in H0 by omega.",
                        "VernacExtend",
                        "12c698ffc20120aa63e2b79055deafae6391c72f"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_sub_distr_r in H0.",
                        "VernacExtend",
                        "e719ff7e02768575ff2e07869024017cd1e02899"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_l in H0.",
                        "VernacExtend",
                        "a990815d99595fe3e661471275f5db7fc7e15b59"
                    ]
                },
                {
                    "command": [
                        "assert (MINMAX: Int.min_signed = -Int.max_signed - 1) by reflexivity.",
                        "VernacExtend",
                        "ed69aa7227eba4b35cffbd4b60ea599d5455cbfb"
                    ]
                },
                {
                    "command": [
                        "assert (j < 0 \\/ 0 <= j) by omega.",
                        "VernacExtend",
                        "78fa87f279dabd12b7ab0c8264cda227daeed72a"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "assert (0 <= (i+1)*j) by (apply Z.mul_nonpos_nonpos; omega).",
                        "VernacExtend",
                        "ad2ee828e67007bfbe24e85d4e4a7f3704a87320"
                    ]
                },
                {
                    "command": [
                        "rewrite MINMAX in H0|-*.",
                        "VernacExtend",
                        "6fb3fe79f9245c3cbc6b38cc8b189c69b76485de"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert ((i+1)*j <= 0) by (apply Z.mul_nonpos_nonneg; omega).",
                        "VernacExtend",
                        "f5587f3bd3d582b44a24f1b1b0d5075bf96d60c1"
                    ]
                },
                {
                    "command": [
                        "rewrite MINMAX in H0|-*.",
                        "VernacExtend",
                        "6fb3fe79f9245c3cbc6b38cc8b189c69b76485de"
                    ]
                },
                {
                    "command": [
                        "split; try omega.",
                        "VernacExtend",
                        "66cc1464539fc71f7b2247524d7ac01ac9c55514"
                    ]
                },
                {
                    "command": [
                        "clear MIN MINMAX.",
                        "VernacExtend",
                        "ac305bf6809db6f43955599fbe87ab6664169889"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? _].",
                        "VernacExtend",
                        "1e578e84e7a531f32f36c087bbd511d26e131ff7"
                    ]
                },
                {
                    "command": [
                        "assert (- Int.max_signed <= 1 + (i+1)*j - j) by omega; clear H0.",
                        "VernacExtend",
                        "b0afb882f4d6c7705f9583017842e1e1f9ad91c9"
                    ]
                },
                {
                    "command": [
                        "assert (-1 - (i + 1) * j + j <= Int.max_signed) by omega; clear H3.",
                        "VernacExtend",
                        "365f94d757a8fde6e6062fd305735be0f11b82a7"
                    ]
                },
                {
                    "command": [
                        "destruct HACK; auto.",
                        "VernacExtend",
                        "dcb02c383efee6cfcb7d2ba1c6568fdcea9fbf17"
                    ]
                },
                {
                    "command": [
                        "assert (i < -1) by omega.",
                        "VernacExtend",
                        "66944655f99feb0d4ac9ffd0578bfe4cd8fb2bd2"
                    ]
                },
                {
                    "command": [
                        "destruct (zlt 0 j); try omega.",
                        "VernacExtend",
                        "5e050ccd57bc843f12a8ae98e7e82b3ce98201b1"
                    ]
                },
                {
                    "command": [
                        "assert ((i+1)*j < 0).",
                        "VernacExtend",
                        "2d1c00bfc397388e9ab4e0b217f79fbd9680b8c2"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_add_distr_r.",
                        "VernacExtend",
                        "bda064aacfb9c1f0e05c6459e794f408ffc88056"
                    ]
                },
                {
                    "command": [
                        "replace i with ((i+1)-1) by omega.",
                        "VernacExtend",
                        "eb62f59c66b652b3a091b5014408b8badbed009d"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_sub_distr_r.",
                        "VernacExtend",
                        "cfa6abd60dba50a6851f98e0907826954ac67a8d"
                    ]
                },
                {
                    "command": [
                        "assert ((i+1)*j<0); [ | omega].",
                        "VernacExtend",
                        "81a5ccdbc42b20167af1e85032eac999cdcdc903"
                    ]
                },
                {
                    "command": [
                        "apply Z.mul_neg_pos; auto.",
                        "VernacExtend",
                        "d16fb8e36852aac7238e720e45d5daa28456bf99"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "repable_signed_mult1",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmult_comm in H1.",
                        "VernacExtend",
                        "7c78f804a18242d31a0f535657f250d3dd088f85"
                    ]
                },
                {
                    "command": [
                        "apply repable_signed_mult2 in H0; auto.",
                        "VernacExtend",
                        "4c0a5f54371034ffba6caba7e4e941f93b97380e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "force_signed_int_e",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vubyte_injective",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "assert (B: Byte.zwordsize = 8) by reflexivity.",
                        "VernacExtend",
                        "ba7c4fd02925d6cf33455ce6d5aac919f41abb3b"
                    ]
                },
                {
                    "command": [
                        "assert (I: Int.zwordsize = 32) by reflexivity.",
                        "VernacExtend",
                        "b03de86a53cb697dea79fdfb6d12418a955f1c25"
                    ]
                },
                {
                    "command": [
                        "apply Byte.same_bits_eq; intros a A.",
                        "VernacExtend",
                        "b0ed3aef5d5d708cacdaf9a7a7811bec50ace9ef"
                    ]
                },
                {
                    "command": [
                        "unfold Vubyte in H.",
                        "VernacExtend",
                        "533e09843871f7432543933b179599614ed3c18d"
                    ]
                },
                {
                    "command": [
                        "remember (Int.repr (Byte.unsigned i)) as z.",
                        "VernacExtend",
                        "235dfb2e120bed33b711609001c4953aeacd82f6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "destruct i; destruct j.",
                        "VernacExtend",
                        "5cc01b86bcd743d81ec090033175800b0c0c420b"
                    ]
                },
                {
                    "command": [
                        "unfold Byte.testbit.",
                        "VernacExtend",
                        "af91cff229b0003c85047054064957229fee87e7"
                    ]
                },
                {
                    "command": [
                        "unfold Byte.unsigned in H1.",
                        "VernacExtend",
                        "3448a344ebcfb67de3451f83ad1a994e333cdb7b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- 2 Int.testbit_repr, H1; trivial; omega.",
                        "VernacExtend",
                        "a5eb3d075bdb7bf7b4e2cb53cd3233004579528d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_Vubyte_injective",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "induction l; intros.",
                        "VernacExtend",
                        "f3f6b28c6822ad560a06f008ea0a5aa487d0e8e3"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct m; simpl in *; inv H; trivial.",
                        "VernacExtend",
                        "a474fab751cb70c9a0d1c41b9821546e0c50ca9d"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct m; [ inv H |].",
                        "VernacExtend",
                        "86b98e425a440605618431b8cedcf27c9f5ec147"
                    ]
                },
                {
                    "command": [
                        "rewrite 2 map_cons in H.",
                        "VernacExtend",
                        "75c2b8bf24bda43a9e97d5a240dce834d4758a5a"
                    ]
                },
                {
                    "command": [
                        "apply cons_inv in H.",
                        "VernacExtend",
                        "4a8477bfd2673890f005a15ae83b79dbcbd34f22"
                    ]
                },
                {
                    "command": [
                        "destruct H; subst.",
                        "VernacExtend",
                        "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
                    ]
                },
                {
                    "command": [
                        "apply Vubyte_injective in H.",
                        "VernacExtend",
                        "1e1abd90f7e250d9d272e1803b6c96447fb4f9ac"
                    ]
                },
                {
                    "command": [
                        "f_equal; eauto.",
                        "VernacExtend",
                        "0aaae116840c77af05ab473518cd728dcb792af6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vbyte_injective",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "unfold Vbyte in H.",
                        "VernacExtend",
                        "73e0f4cdbed4bf5821c80fe86bc287fed78e95fb"
                    ]
                },
                {
                    "command": [
                        "apply Vint_injective in H.",
                        "VernacExtend",
                        "a228464af8df716314452d8082b81cf15812bed0"
                    ]
                },
                {
                    "command": [
                        "apply Byte.same_bits_eq; intros i I.",
                        "VernacExtend",
                        "b9d29a66bd1597c0156f97e7bad2daed1ffd1206"
                    ]
                },
                {
                    "command": [
                        "assert (Imin: Int.min_signed = -2147483648) by reflexivity.",
                        "VernacExtend",
                        "828d03195b7d040051fd8b01ff57fdba4512c2f0"
                    ]
                },
                {
                    "command": [
                        "assert (Imax: Int.max_signed = 2147483647) by reflexivity.",
                        "VernacExtend",
                        "4df42d8787bfcad9bbd290b7b893830ccda48f52"
                    ]
                },
                {
                    "command": [
                        "assert (Bmin: Byte.min_signed = -128) by reflexivity.",
                        "VernacExtend",
                        "e42a38a5d9bf0d3b9ee0b5c3c37ee4e542a9f997"
                    ]
                },
                {
                    "command": [
                        "assert (Bmax: Byte.max_signed = 127) by reflexivity.",
                        "VernacExtend",
                        "68f8970e02197d11d628ca0a69f551ec462835a5"
                    ]
                },
                {
                    "command": [
                        "assert (Byte.signed a = Byte.signed b).",
                        "VernacExtend",
                        "061b08a12c6f21adf84fedbbefd320b385989168"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Int.signed_repr (Byte.signed a)).",
                        "VernacExtend",
                        "5b718b4c573fa4ac5379f455498dfbbfda81746b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Int.signed_repr (Byte.signed b)).",
                        "VernacExtend",
                        "3b836dea7cac09c3ecd24a61fab7d11da85535fa"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial.",
                        "VernacExtend",
                        "be0ba1f6432776bd85200205d59a572473bb951c"
                    ]
                },
                {
                    "command": [
                        "specialize (Byte.signed_range b); omega.",
                        "VernacExtend",
                        "9293fc9ba2a44e873226ad73c6d563a5b901290b"
                    ]
                },
                {
                    "command": [
                        "specialize (Byte.signed_range a); omega.",
                        "VernacExtend",
                        "d2f97e692e64f463e6b2f1152dace80ef0339dda"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "unfold Byte.testbit.",
                        "VernacExtend",
                        "af91cff229b0003c85047054064957229fee87e7"
                    ]
                },
                {
                    "command": [
                        "rewrite 2 Byte.unsigned_signed.",
                        "VernacExtend",
                        "438700811cacad2ff71443b41e69dda10dbcc51e"
                    ]
                },
                {
                    "command": [
                        "unfold Byte.lt.",
                        "VernacExtend",
                        "94c8fe0a8fc67bb097a5408ed1f198ef2e4198f8"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Znth_map_Vbyte",
            "line_nb": 368,
            "steps": [
                {
                    "command": [
                        "intros i l.",
                        "VernacExtend",
                        "4086f03309a4d4e3de03b93031c5dded4f62598f"
                    ]
                },
                {
                    "command": [
                        "apply Znth_map.",
                        "VernacExtend",
                        "2397f5526a9101d4cdb76a1d3e1d950f51783798"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Znth_map_Vubyte",
            "line_nb": 374,
            "steps": [
                {
                    "command": [
                        "intros i l.",
                        "VernacExtend",
                        "4086f03309a4d4e3de03b93031c5dded4f62598f"
                    ]
                },
                {
                    "command": [
                        "apply Znth_map.",
                        "VernacExtend",
                        "2397f5526a9101d4cdb76a1d3e1d950f51783798"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}