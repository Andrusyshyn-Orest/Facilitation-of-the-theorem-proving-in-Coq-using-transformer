{
    "filename": "floyd/replace_refill_reptype_lemmas.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.nested_field_lemmas.",
            "VernacRequire",
            "2ae988fac26931aaa409a9389758d750e8ca6601"
        ],
        [
            "Require Import VST.floyd.type_induction.",
            "VernacRequire",
            "b89058f74a555f32a00b01d6d87f589d950b2448"
        ],
        [
            "Require Import VST.floyd.aggregate_type.",
            "VernacRequire",
            "88ecaee5bdf4f6532bb0b71af81f443d2369bf60"
        ],
        [
            "Require Import VST.floyd.reptype_lemmas.",
            "VernacRequire",
            "67895477ec539ad1bf901b33e9b181c1c2cf58be"
        ],
        [
            "Require Import VST.floyd.proj_reptype_lemmas.",
            "VernacRequire",
            "f23e23e56fbc43071b2da91d2fb5090e3239f8a3"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import VST.floyd.sublist.",
            "VernacRequire",
            "d1f1b071609d5eb1d8166fe53222e46514697626"
        ],
        [
            "Require Import VST.floyd.stronger.",
            "VernacRequire",
            "da2c50420d06dadfb072688069a0ba431a96788f"
        ],
        [
            "Require Import VST.floyd.stronger.",
            "VernacRequire",
            "da2c50420d06dadfb072688069a0ba431a96788f"
        ],
        [
            "Section SINGLE_HOLE.",
            "VernacBeginSection",
            "9e554588d21b90d57617bdda3586614627e20b58"
        ],
        [
            "Context {cs: compspecs}.",
            "VernacContext",
            "54247ea3591f081b4582667d94ae6f9e673bf9e3"
        ],
        [
            "Lemma gfield_dec: forall (gf0 gf1: gfield), {gf0 = gf1} + {gf0 <> gf1}.",
            "VernacStartTheoremProof",
            "48215b5955c7822f4810a5879a253144f3ea25fe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct gf0, gf1; try solve [right; congruence].",
            "VernacExtend",
            "9883c1215a1248dd98deccbe2bbe4f5d81a6db36"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct (zeq i i0); [left | right]; congruence.",
            "VernacExtend",
            "631c93f94abfedb2cd2c506782a6d966a8baab13"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct (Pos.eq_dec i i0); [left | right]; congruence.",
            "VernacExtend",
            "ce7e5d1cd7ba2c56526b8d96c43acd6787c1da65"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct (Pos.eq_dec i i0); [left | right]; congruence.",
            "VernacExtend",
            "ce7e5d1cd7ba2c56526b8d96c43acd6787c1da65"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma rgfs_dec: forall rgfs0 rgfs1: list gfield, {rgfs0 = rgfs1} + {rgfs0 <> rgfs1}.",
            "VernacStartTheoremProof",
            "2dbf4dc9e944cc6fc9874a4aeb087f860ad2af46"
        ],
        [
            "apply list_eq_dec.",
            "VernacExtend",
            "0910ad082c3bb5554479f3d1955a37027a54dcee"
        ],
        [
            "apply gfield_dec.",
            "VernacExtend",
            "7e98c9ad281ad374786211b669f695f6256a4542"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition upd_gfield_reptype t gf (v: reptype t) (v0: reptype (gfield_type t gf)) : reptype t := fold_reptype (match t, gf return (REPTYPE t -> reptype (gfield_type t gf) -> REPTYPE t) with | Tarray t0 n a, ArraySubsc i => upd_Znth i | Tstruct id _, StructField i => fun v v0 => upd_compact_prod _ v (i, field_type i (co_members (get_co id))) v0 member_dec | Tunion id _, UnionField i => fun v v0 => upd_compact_sum _ v (i, field_type i (co_members (get_co id))) v0 member_dec | _, _ => fun v _ => v end (unfold_reptype v) v0).",
            "VernacDefinition",
            "d98f1afbfd78840c0af05e268823da8b50e8df56"
        ],
        [
            "Fixpoint upd_reptype (t: type) (gfs: list gfield) (v: reptype t) (v0: reptype (nested_field_type t gfs)): reptype t := match gfs as gfs' return reptype (match gfs' with | nil => t | gf :: gfs0 => gfield_type (nested_field_type t gfs0) gf end) -> reptype t with | nil => fun v0 => v0 | gf :: gfs0 => fun v0 => upd_reptype t gfs0 v (upd_gfield_reptype _ gf (proj_reptype t gfs0 v) v0) end (eq_rect_r reptype v0 (eq_sym (nested_field_type_ind t gfs))).",
            "VernacFixpoint",
            "0b8b41c6beb15ac565edab0b774ad231824f070b"
        ],
        [
            "Lemma upd_Znth_ints i xints v: upd_Znth i (map Vint xints) (Vint v) = map Vint ((sublist 0 i xints) ++ v :: (sublist (i + 1) (Zlength (map Vint xints)) xints)).",
            "VernacStartTheoremProof",
            "47d0dae43ded55854b5d7d7497a3e67cd3c566b7"
        ],
        [
            "unfold upd_Znth; intros.",
            "VernacExtend",
            "d426523d5f937785301dfd6dd365f6cc4fdf5cfd"
        ],
        [
            "rewrite map_app.",
            "VernacExtend",
            "89eca143edf6436bb079a40b9fedf852073d1711"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "do 2 rewrite sublist_map; trivial.",
            "VernacExtend",
            "4de35cdfb4763eea5208d90b7352b2708155063e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma upd_reptype_data_equal: forall t gfs v v0 v1, data_equal v0 v1 -> data_equal (upd_reptype t gfs v v0) (upd_reptype t gfs v v1).",
            "VernacStartTheoremProof",
            "4dae5caf381199f22cd235492e58d2d8c41a9f2f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction gfs as [| gf gfs].",
            "VernacExtend",
            "a014547e244160fc77695f5abc8ea6241a796ff9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exact H.",
            "VernacExtend",
            "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "change (upd_reptype t (gf :: gfs) v v0) with (upd_reptype t gfs v (upd_gfield_reptype _ gf (proj_reptype t gfs v) (eq_rect_r reptype v0 (eq_sym (nested_field_type_ind t (gf :: gfs)))))).",
            "VernacExtend",
            "834c6bb5026829b7ceb456f65788da21012fecb4"
        ],
        [
            "change (upd_reptype t (gf :: gfs) v v1) with (upd_reptype t gfs v (upd_gfield_reptype _ gf (proj_reptype t gfs v) (eq_rect_r reptype v1 (eq_sym (nested_field_type_ind t (gf :: gfs)))))).",
            "VernacExtend",
            "543458e5ead43255dfa331ccc4d0aefdacd85ebf"
        ],
        [
            "apply IHgfs.",
            "VernacExtend",
            "922ee4305187ca355fa37325ef36ef1158bb33b5"
        ],
        [
            "assert (data_equal (eq_rect_r reptype v0 (eq_sym (nested_field_type_ind t (gf :: gfs)))) (eq_rect_r reptype v1 (eq_sym (nested_field_type_ind t (gf :: gfs))))) by (apply eq_rect_r_data_equal; auto).",
            "VernacExtend",
            "abd9b4aaf8e0cef1b342d26e92d149f6471314dd"
        ],
        [
            "forget (eq_rect_r reptype v0 (eq_sym (nested_field_type_ind t (gf :: gfs)))) as V0.",
            "VernacExtend",
            "72eac170f63934b76f7356a3075db7879e3cefb2"
        ],
        [
            "forget (eq_rect_r reptype v1 (eq_sym (nested_field_type_ind t (gf :: gfs)))) as V1.",
            "VernacExtend",
            "6c5613237f65e473955293d6bfdd6dff7c7b284c"
        ],
        [
            "forget (proj_reptype t gfs v) as V.",
            "VernacExtend",
            "ef58d4c5f2e838521d9171d18fffc3e3399869f4"
        ],
        [
            "clear - H0.",
            "VernacExtend",
            "26b60cd70d9cbb77dd5e024fa10fa554555a88cc"
        ],
        [
            "revert V0 V1 H0 V.",
            "VernacExtend",
            "f0c92f421cfe289ad8dd93df1da56c35d3090bba"
        ],
        [
            "destruct (nested_field_type t gfs), gf; unfold upd_gfield_reptype; intros; try reflexivity.",
            "VernacExtend",
            "315bbd8ea7a638f01ff52b9a0d01a016d9822179"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "End SINGLE_HOLE.",
            "VernacEndSegment",
            "b358687cc9e4499a6884311577e01ce2669ec78c"
        ],
        [
            "Module zlist_hint_db.",
            "VernacDefineModule",
            "2caf29c309760608f48e60b0ed59bb4a4ef7d14e"
        ],
        [
            "Lemma Znth_sub_0_r: forall A {d: Inhabitant A} i l, Znth (i - 0) l = Znth i l.",
            "VernacStartTheoremProof",
            "9de4dfd96abf8a743415bf0af9fdb609a6749fc3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Z.sub_0_r by omega.",
            "VernacExtend",
            "8b152ce3c13bcbc3d656954b9908501597e30f9d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Znth_map_Vint: forall (i : Z) (l : list int), 0 <= i < Zlength l -> Znth i (map Vint l) = Vint (Znth i l).",
            "VernacStartTheoremProof",
            "de7d01c4e43276e84d90dbca93e2e20b5e26287c"
        ],
        [
            "intros i l.",
            "VernacExtend",
            "4086f03309a4d4e3de03b93031c5dded4f62598f"
        ],
        [
            "apply Znth_map.",
            "VernacExtend",
            "2397f5526a9101d4cdb76a1d3e1d950f51783798"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End zlist_hint_db.",
            "VernacEndSegment",
            "b52a1d253eed6fc1305e074c940e55f7332b061b"
        ],
        [
            "Section POSE_TAC.",
            "VernacBeginSection",
            "3d979c60c7d789adf497b21c01f79b00d39e53c9"
        ],
        [
            "Context {cs: compspecs}.",
            "VernacContext",
            "54247ea3591f081b4582667d94ae6f9e673bf9e3"
        ],
        [
            "Definition eq_pose {A} x y := @eq A x y.",
            "VernacDefinition",
            "9f1ceb95155e47c798e8dbd6f96e91eddc4cbf2a"
        ],
        [
            "Definition abs_pose t (v: reptype t) : Prop := True.",
            "VernacDefinition",
            "3cbc7bff9c278e8a87bbfc9b87a5ece6d190ca1f"
        ],
        [
            "Definition concr_pose t (v: reptype t) : Prop := True.",
            "VernacDefinition",
            "5aef8c590ec4c70cf6d1ebe84af869ce7de86432"
        ],
        [
            "End POSE_TAC.",
            "VernacEndSegment",
            "af7b075627a1af922eff2ba5b0e50f3c6a8c3f30"
        ],
        [
            "Ltac abs_or_concr t v := let t' := eval compute in t in match t' with | Tarray _ _ _ => match v with | @nil _ => assert (concr_pose t v) by exact I | _ :: _ => assert (concr_pose t v) by exact I | _ => assert (abs_pose t v) by exact I end | Tstruct ?id _ => let m := eval compute in (co_members (get_co id)) in match m with | @nil _ => assert (concr_pose t v) by exact I | _ :: @nil _ => assert (concr_pose t v) by exact I | _ => match v with | (_, _) => assert (concr_pose t v) by exact I | _ => assert (abs_pose t v) by exact I end end | Tunion ?id _ => let m := eval compute in (co_members (get_co id)) in match m with | @nil _ => assert (concr_pose t v) by exact I | _ :: @nil _ => assert (concr_pose t v) by exact I | _ => match v with | (_, _) => assert (concr_pose t v) by exact I | _ => assert (abs_pose t v) by exact I end end end.",
            "VernacExtend",
            "721b74b6b4d6e1354edd14244cb02521cf7616c4"
        ],
        [
            "Transparent peq.",
            "VernacSetOpacity",
            "ef9d399e5027a67fd1f9df7a6f77b1f291ffa5c6"
        ],
        [
            "Ltac cbv_proj_struct H := cbv beta zeta iota delta [proj_struct proj_compact_prod list_rect member_dec field_type Ctypes.field_type ident_eq peq Pos.eq_dec BinNums.positive_rec positive_rect sumbool_rec sumbool_rect bool_dec bool_rec bool_rect option_rec option_rect eq_rect_r eq_rect eq_rec_r eq_rec eq_sym eq_trans f_equal type_eq type_rec type_rect typelist_eq typelist_rec typelist_rect intsize_rec intsize_rect signedness_rec signedness_rect floatsize_rec floatsize_rect tvoid tschar tuchar tshort tushort tint tuint tbool tlong tulong tfloat tdouble tptr tarray noattr ] in H; simpl in H.",
            "VernacExtend",
            "70ca8813f860e7f6b393329fbf852db11826af20"
        ],
        [
            "Ltac pose_proj_reptype_1 CS t gf v H := assert (@proj_gfield_reptype CS t gf v = @proj_gfield_reptype CS t gf v) as H by reflexivity; let H0 := fresh \"H\" in let H1 := fresh \"H\" in let V := fresh \"v\" in let t' := eval compute in t in remember v as V eqn:H0 in H at 2; match type of V with | ?t_temp => change t_temp with (@reptype CS t) in V end; change (@proj_gfield_reptype CS t gf V) with (@proj_gfield_reptype CS t' gf V) in H; unfold proj_gfield_reptype in H at 2; pose proof unfold_reptype_JMeq t' V as H1; apply JMeq_eq in H1; rewrite H1 in H; clear H1; match type of H with | _ = proj_struct ?i ?m V ?d => let v_res := fresh \"v\" in let H_eq := fresh \"H\" in remember (proj_struct i m V d) as v_res eqn:H_eq; let d' := eval vm_compute in d in change d with d' in H_eq; let m' := eval vm_compute in m in change m with m' in H_eq; cbv_proj_struct H_eq; subst v_res; subst V | _ => subst V end .",
            "VernacExtend",
            "775d3c9f0e8eae9c809e971434527346bd622f51"
        ],
        [
            "Ltac pose_proj_reptype CS t gfs v H := match gfs with | nil => assert (eq_pose (@proj_reptype CS t gfs v) v) as H by reflexivity | ?gf :: ?gfs0 => pose proof I as H; let H0 := fresh \"H\" in pose_proj_reptype CS t gfs0 v H0; match type of H0 with | eq_pose (proj_reptype t gfs0 v) ?v0 => let H1 := fresh \"H\" in match gfs0 with | nil => pose_proj_reptype_1 CS t gf v0 H1 | _ => pose_proj_reptype_1 CS (nested_field_type t gfs0) gf v0 H1 end; clear H; match gfs0 with | nil => assert (eq_pose (@proj_reptype CS t gfs v) (@proj_gfield_reptype CS t gf v0)) as H | _ => assert (eq_pose (@proj_reptype CS t gfs v) (@proj_gfield_reptype CS (nested_field_type t gfs0) gf v0)) as H end; [unfold eq_pose in *; rewrite <- H0; unfold proj_reptype, eq_rect_r; apply eq_sym, eq_rect_eq |]; rewrite H1 in H; clear H1 end end.",
            "VernacExtend",
            "0d50627f63b78599f39a65bb875c1c1481f9bb50"
        ],
        [
            "Ltac pose_upd_reptype_1 CS t gf v v0 H := let t' := eval compute in t in assert (data_equal (@upd_gfield_reptype CS t gf v v0) (@upd_gfield_reptype CS t' gf v v0)) as H by reflexivity; unfold upd_gfield_reptype at 2 in H; let H0 := fresh \"H\" in pose proof unfold_reptype_JMeq t' v as H0; apply JMeq_eq in H0; rewrite H0 in H; clear H0; match t' with | Tarray _ _ _ => autorewrite with zl_sub_db in H | _ => idtac end; unfold upd_compact_prod, eq_rect_r in H; simpl in H; match type of H with | data_equal _ (fold_reptype ?v_res) => pose proof (JMeq_eq (fold_reptype_JMeq t' v_res)) as H0; rewrite H0 in H; clear H0 end.",
            "VernacExtend",
            "1c9b59bbb56c9e3231ec4933fb8315cdc460cdef"
        ],
        [
            "Module Type TestType.",
            "VernacDeclareModuleType",
            "bc8e4539560be3288e5194cd11b6ff6f5cc43f96"
        ],
        [
            "End TestType.",
            "VernacEndSegment",
            "e4ac0bfbca70f11d08d053063865f56dd6a671b5"
        ]
    ],
    "proofs": [
        {
            "name": "gfield_dec",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct gf0, gf1; try solve [right; congruence].",
                        "VernacExtend",
                        "9883c1215a1248dd98deccbe2bbe4f5d81a6db36"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct (zeq i i0); [left | right]; congruence.",
                        "VernacExtend",
                        "631c93f94abfedb2cd2c506782a6d966a8baab13"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct (Pos.eq_dec i i0); [left | right]; congruence.",
                        "VernacExtend",
                        "ce7e5d1cd7ba2c56526b8d96c43acd6787c1da65"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct (Pos.eq_dec i i0); [left | right]; congruence.",
                        "VernacExtend",
                        "ce7e5d1cd7ba2c56526b8d96c43acd6787c1da65"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "rgfs_dec",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "apply list_eq_dec.",
                        "VernacExtend",
                        "0910ad082c3bb5554479f3d1955a37027a54dcee"
                    ]
                },
                {
                    "command": [
                        "apply gfield_dec.",
                        "VernacExtend",
                        "7e98c9ad281ad374786211b669f695f6256a4542"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "upd_Znth_ints",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold upd_Znth; intros.",
                        "VernacExtend",
                        "d426523d5f937785301dfd6dd365f6cc4fdf5cfd"
                    ]
                },
                {
                    "command": [
                        "rewrite map_app.",
                        "VernacExtend",
                        "89eca143edf6436bb079a40b9fedf852073d1711"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite sublist_map; trivial.",
                        "VernacExtend",
                        "4de35cdfb4763eea5208d90b7352b2708155063e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Znth_sub_0_r",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.sub_0_r by omega.",
                        "VernacExtend",
                        "8b152ce3c13bcbc3d656954b9908501597e30f9d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Znth_map_Vint",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intros i l.",
                        "VernacExtend",
                        "4086f03309a4d4e3de03b93031c5dded4f62598f"
                    ]
                },
                {
                    "command": [
                        "apply Znth_map.",
                        "VernacExtend",
                        "2397f5526a9101d4cdb76a1d3e1d950f51783798"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}