{
    "filename": "floyd/nested_pred_lemmas.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.type_induction.",
            "VernacRequire",
            "b89058f74a555f32a00b01d6d87f589d950b2448"
        ],
        [
            "Require Import VST.floyd.fieldlist.",
            "VernacRequire",
            "6ce6e53e006bbd76e20cd3d311dcc8686a22c502"
        ],
        [
            "Open Scope Z.",
            "VernacOpenCloseScope",
            "00bb9ffac6db2587918f2b251bb6649305aecb6f"
        ],
        [
            "Lemma fold_right_map: forall {A B C} (f: B -> A -> A) (g: C -> B) (e: A) (l: list C), fold_right f e (map g l) = fold_right (fun c a => f (g c) a) e l.",
            "VernacStartTheoremProof",
            "98070d0450d0e21519b8d4cfc7666e583eb4e6f9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section NESTED_PRED.",
            "VernacBeginSection",
            "f9cefbaa86bd6e15fcedd67dad2fc460d7e9f895"
        ],
        [
            "Context {cs: compspecs}.",
            "VernacContext",
            "54247ea3591f081b4582667d94ae6f9e673bf9e3"
        ],
        [
            "Definition nested_pred (atom_pred: type -> bool): type -> bool := type_func (fun _ => bool) (fun t => atom_pred t) (fun t n a b => (atom_pred (Tarray t n a) && b)%bool) (fun id a bl => (atom_pred (Tstruct id a) && fold_right andb true (decay bl))%bool) (fun id a bl => (atom_pred (Tunion id a) && fold_right andb true (decay bl))%bool).",
            "VernacDefinition",
            "bda2c0398629f80a547e2d2013cd98440ba75c53"
        ],
        [
            "Definition nested_fields_pred (atom_pred: type -> bool) (m: members) : bool := fold_right (fun it b => (nested_pred atom_pred (field_type (fst it) m) && b)%bool) true m.",
            "VernacDefinition",
            "7c6a11f2eae698de8878cf3a6ff48be9cb23f44b"
        ],
        [
            "Lemma nested_pred_eq: forall atom_pred t, nested_pred atom_pred t = match t with | Tarray t0 _ _ => (atom_pred t && nested_pred atom_pred t0)%bool | Tstruct id _ | Tunion id _ => (atom_pred t && nested_fields_pred atom_pred (co_members (get_co id)))%bool | _ => atom_pred t end.",
            "VernacStartTheoremProof",
            "bdbbdd50ac11a1c1a428f18a57d47b143de63924"
        ],
        [
            "unfold nested_fields_pred.",
            "VernacExtend",
            "505ec13353a06888546d940c62328ee285e5fca9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold nested_pred.",
            "VernacExtend",
            "51813239fe504aad8f4ad8e62b19751c84e07824"
        ],
        [
            "rewrite type_func_eq with (t0 := t) (A := (fun _ => bool)) at 1 by auto.",
            "VernacExtend",
            "9b0714b076c3519857b17c4429497bd6e0aa799c"
        ],
        [
            "destruct t; auto.",
            "VernacExtend",
            "005ed9da4fb43c9c32bf8a56e846700db3d6610d"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold FTI_aux.",
            "VernacExtend",
            "2d4f810c1be7ff6e153ebd2e6649dde6a9a2510d"
        ],
        [
            "rewrite decay_spec.",
            "VernacExtend",
            "58cac60f10eb3e5cbb6a1403a9e8bdb3182b5d6b"
        ],
        [
            "rewrite fold_right_map.",
            "VernacExtend",
            "7531d1e0758498f742894f732d21a2808cfb5989"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold FTI_aux.",
            "VernacExtend",
            "2d4f810c1be7ff6e153ebd2e6649dde6a9a2510d"
        ],
        [
            "rewrite decay_spec.",
            "VernacExtend",
            "58cac60f10eb3e5cbb6a1403a9e8bdb3182b5d6b"
        ],
        [
            "rewrite fold_right_map.",
            "VernacExtend",
            "7531d1e0758498f742894f732d21a2808cfb5989"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_pred_atom_pred: forall (atom_pred: type -> bool) (t: type), nested_pred atom_pred t = true -> atom_pred t = true.",
            "VernacStartTheoremProof",
            "73cb1b9c8b0c9048311bc225eae8c044e668ac7f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite nested_pred_eq in H by auto.",
            "VernacExtend",
            "3e87f7fce7937cf896cf031757790174e65915ee"
        ],
        [
            "destruct t; simpl in *; try apply andb_true_iff in H; try tauto.",
            "VernacExtend",
            "d7a284515007ec30fb40693ff477ee2b3f940c82"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_fields_pred_nested_pred: forall (atom_pred: type -> bool) i m, in_members i m -> nested_fields_pred atom_pred m = true -> nested_pred atom_pred (field_type i m) = true.",
            "VernacStartTheoremProof",
            "4f82a8f85530a87d088a7c850d99ea9592c4acb9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold nested_fields_pred in H0.",
            "VernacExtend",
            "270b69f4052353710b4ac66c933bf3963e73f971"
        ],
        [
            "rewrite <- fold_right_map in H0.",
            "VernacExtend",
            "2858dc7ab043e1ca93de2d5caa6fb482544f53ec"
        ],
        [
            "eapply fold_right_andb; [exact H0 |].",
            "VernacExtend",
            "beb4302ba7829b7ce5b6c0cf2fb5c57ddabf0b38"
        ],
        [
            "clear - H.",
            "VernacExtend",
            "0feb8621f12176e9894f4f3ff86ecf0003739aed"
        ],
        [
            "rewrite <- map_map.",
            "VernacExtend",
            "7d0748d0da0977436d7d855d92d9c2890414c6d7"
        ],
        [
            "apply in_map.",
            "VernacExtend",
            "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
        ],
        [
            "change (field_type i m) with ((fun it => field_type (fst it) m) (i, field_type i m)).",
            "VernacExtend",
            "043a32afcd4819eaaf43f237d29696252237369f"
        ],
        [
            "apply in_map.",
            "VernacExtend",
            "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
        ],
        [
            "apply in_members_field_type.",
            "VernacExtend",
            "bce7db47c28876faf55bd58a7cb7c137b093e955"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_pred_Tarray: forall (atom_pred: type -> bool) t n a, nested_pred atom_pred (Tarray t n a) = true -> nested_pred atom_pred t = true.",
            "VernacStartTheoremProof",
            "e9fc919f51ce50b1b9f36867c9fee93fb6fe4760"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite nested_pred_eq in H by auto.",
            "VernacExtend",
            "3e87f7fce7937cf896cf031757790174e65915ee"
        ],
        [
            "apply andb_true_iff in H.",
            "VernacExtend",
            "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_pred_Tstruct: forall (atom_pred: type -> bool) id a, nested_pred atom_pred (Tstruct id a) = true -> nested_fields_pred atom_pred (co_members (get_co id)) = true.",
            "VernacStartTheoremProof",
            "2a2330e6f036fd9745367aa05ca252700fdf383c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite nested_pred_eq in H by auto.",
            "VernacExtend",
            "3e87f7fce7937cf896cf031757790174e65915ee"
        ],
        [
            "apply andb_true_iff in H; tauto.",
            "VernacExtend",
            "433e8379a958e64f84b9cf92c8b8b4d8dc25688c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_pred_Tstruct2: forall (atom_pred: type -> bool) id a i, nested_pred atom_pred (Tstruct id a) = true -> in_members i (co_members (get_co id)) -> nested_pred atom_pred (field_type i (co_members (get_co id))) = true.",
            "VernacStartTheoremProof",
            "a3117caf218956bb6c4c4348eab1715e60709776"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply nested_pred_Tstruct in H.",
            "VernacExtend",
            "bab630fe5a63337b077d32366f2f9ca2bbf298b1"
        ],
        [
            "apply nested_fields_pred_nested_pred; auto.",
            "VernacExtend",
            "61e40d4169a40e6533967872d755cdde65223605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nested_pred_Tunion: forall (atom_pred: type -> bool) id a, nested_pred atom_pred (Tunion id a) = true -> nested_fields_pred atom_pred (co_members (get_co id)) = true.",
            "VernacStartTheoremProof",
            "bd5dd94b177b6c19b11187c768242ad022fa6555"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite nested_pred_eq in H by auto.",
            "VernacExtend",
            "3e87f7fce7937cf896cf031757790174e65915ee"
        ],
        [
            "apply andb_true_iff in H; tauto.",
            "VernacExtend",
            "433e8379a958e64f84b9cf92c8b8b4d8dc25688c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nested_pred_Tunion2: forall (atom_pred: type -> bool) id a i, nested_pred atom_pred (Tunion id a) = true -> in_members i (co_members (get_co id)) -> nested_pred atom_pred (field_type i (co_members (get_co id))) = true.",
            "VernacStartTheoremProof",
            "9ca7ec5c06827c91613e114775cccd230599d89a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply nested_pred_Tunion in H.",
            "VernacExtend",
            "ebb18b9a59f2f3471a0776b5501e20c8bdff5e25"
        ],
        [
            "apply nested_fields_pred_nested_pred; auto.",
            "VernacExtend",
            "61e40d4169a40e6533967872d755cdde65223605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma complete_legal_cosu_type_Tstruct: forall id a, complete_legal_cosu_type (Tstruct id a) = true -> co_su (get_co id) = Struct.",
            "VernacStartTheoremProof",
            "dc3b186ccedda775c3d0ad6560697b1bae93019c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "unfold get_co.",
            "VernacExtend",
            "e794002bedd49678ac28a454394e4cf652674d47"
        ],
        [
            "destruct (cenv_cs ! id); auto.",
            "VernacExtend",
            "6e8fcd805eff93682dfc55bc59a56e551e30a94e"
        ],
        [
            "destruct (co_su c); congruence.",
            "VernacExtend",
            "5827b7bfe4b69610cd1ec5fa6d8ad259d8a8bf28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma complete_legal_cosu_type_Tunion: forall id a, complete_legal_cosu_type (Tunion id a) = true -> co_su (get_co id) = Union.",
            "VernacStartTheoremProof",
            "bf7e78c926881c190cab8c367a731eddda336941"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "unfold get_co.",
            "VernacExtend",
            "e794002bedd49678ac28a454394e4cf652674d47"
        ],
        [
            "destruct (cenv_cs ! id); auto; try congruence.",
            "VernacExtend",
            "c6cc55e5c4d652b2ee633611ea1470fc97f72af0"
        ],
        [
            "destruct (co_su c); congruence.",
            "VernacExtend",
            "5827b7bfe4b69610cd1ec5fa6d8ad259d8a8bf28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Tarray_sizeof_0: forall t n a, sizeof (Tarray t n a) = 0 -> sizeof t = 0 \\/ n <= 0.",
            "VernacStartTheoremProof",
            "df520eba24c72bd5a1bed9392d4aa2622da9b344"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "apply Z.eq_mul_0 in H.",
            "VernacExtend",
            "9281a6407f2a97efc715b1982faccffdb173eb6f"
        ],
        [
            "destruct H; auto.",
            "VernacExtend",
            "95ae427bd4e09a5f31c59184b718811a23ecb36f"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "destruct (zlt 0 n); [| omega].",
            "VernacExtend",
            "b743539d3d9d1d308e32c1dd07cfb541c621e803"
        ],
        [
            "rewrite Z.max_r in H by omega.",
            "VernacExtend",
            "9a49dd493cbc4f4dfc9052819b3806e5ef945086"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Tstruct_sizeof_0: forall id a, complete_legal_cosu_type (Tstruct id a) = true -> sizeof (Tstruct id a) = 0 -> forall i, in_members i (co_members (get_co id)) -> sizeof (field_type i (co_members (get_co id))) = 0 /\\ field_offset_next cenv_cs i (co_members (get_co id)) (co_sizeof (get_co id)) - (field_offset cenv_cs i (co_members (get_co id)) + sizeof (field_type i (co_members (get_co id)))) = 0.",
            "VernacStartTheoremProof",
            "972e45bed4b841388015d033bb6af9ff49fd4bd5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite sizeof_Tstruct in H0.",
            "VernacExtend",
            "c68022d7d9fdd47cdcd7493c9834526152cb1d1b"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply sizeof_struct_0; auto.",
            "VernacExtend",
            "5030f7fca85828e12cbaa66f8fcb125c153c4875"
        ],
        [
            "pose proof co_consistent_sizeof cenv_cs (get_co id) (get_co_consistent id).",
            "VernacExtend",
            "bd3549dfe2124532d84eec97194b5b414c934bdd"
        ],
        [
            "erewrite complete_legal_cosu_type_Tstruct in H2 by eauto.",
            "VernacExtend",
            "084e927502870ad5b3444feaa62c87baa825276e"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "pose proof align_le (sizeof_struct cenv_cs 0 (co_members (get_co id))) (co_alignof (get_co id)) (co_alignof_pos _).",
            "VernacExtend",
            "31e78d81427af610d311e92e3c9ae998cbe62d62"
        ],
        [
            "pose proof sizeof_struct_incr cenv_cs (co_members (get_co id)) 0.",
            "VernacExtend",
            "04681284036e6a0f70d744cb5f2ae07fba6296c4"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Tunion_sizeof_0: forall id a, complete_legal_cosu_type (Tunion id a) = true -> sizeof (Tunion id a) = 0 -> forall i, in_members i (co_members (get_co id)) -> sizeof (field_type i (co_members (get_co id))) = 0.",
            "VernacStartTheoremProof",
            "5a86154021c1d4fbe38fc89d35d827674e0cf678"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite sizeof_Tunion in H0.",
            "VernacExtend",
            "2fae751dc3fa5aacbd25835199fce1ac79566ff5"
        ],
        [
            "apply sizeof_union_0; auto.",
            "VernacExtend",
            "bb13dbfc1c313d656d236a60f8becd96b025b416"
        ],
        [
            "pose proof co_consistent_sizeof cenv_cs (get_co id) (get_co_consistent id).",
            "VernacExtend",
            "bd3549dfe2124532d84eec97194b5b414c934bdd"
        ],
        [
            "erewrite complete_legal_cosu_type_Tunion in H2 by eauto.",
            "VernacExtend",
            "ef087f8e6c61def574bd2538b30a1942474c58c5"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "pose proof align_le (sizeof_union cenv_cs (co_members (get_co id))) (co_alignof (get_co id)) (co_alignof_pos _).",
            "VernacExtend",
            "71e5f4aeafc252e626273e3454723fa39c0f0860"
        ],
        [
            "pose proof sizeof_union_pos cenv_cs (co_members (get_co id)).",
            "VernacExtend",
            "392585073a75776df517373f9683b60fa246777c"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NESTED_PRED.",
            "VernacEndSegment",
            "8c3c7f8bd5462d60ba4675cd1aae6a2ee9fc8691"
        ],
        [
            "Ltac pose_mod_le A := let H := fresh \"H\" in pose proof Z.mod_le A Ptrofs.modulus; spec H; [try omega | spec H; [pose Ptrofs.modulus_pos; omega |]].",
            "VernacExtend",
            "28d1be8a52dcd789e2202ec0ac0387aa7684a9b1"
        ],
        [
            "Ltac pose_mul_distr_l l r := match r with | (?A + ?B)%Z => pose proof Z.mul_add_distr_l l A B; pose_mul_distr_l l A; pose_mul_distr_l l B | Z.succ ?A => let H := fresh \"H\" in pose proof Z.mul_add_distr_l l A 1 as H; replace (A + 1) with (Z.succ A) in H by omega; pose_mul_distr_l l A | (?A - ?B)%Z => pose proof Z.mul_sub_distr_l l A B; pose_mul_distr_l l A; pose_mul_distr_l l B | _ => idtac end.",
            "VernacExtend",
            "30ee098067bc0c62223378f7d562bd79a8c5dfb6"
        ],
        [
            "Ltac pose_size_mult' env t l := match l with | nil => idtac | ?z :: ?l0 => match l0 with | nil => pose_mul_distr_l (@sizeof env t) z | ?z0 :: _ => pose_mul_distr_l (@sizeof env t) z; assert (@sizeof env t * z <= @sizeof env t * z0) by (pose proof @sizeof_pos env t; apply Zmult_le_compat_l; omega); pose_size_mult' env t l0 end end.",
            "VernacExtend",
            "13a75bb5a2191a9737b461d92dbe10b421c9235c"
        ],
        [
            "Ltac pose_size_mult env t l := pose_size_mult' env t l; try rewrite !Z.mul_0_r in *; try rewrite !Z.mul_1_r in *.",
            "VernacExtend",
            "060d419da11f56708a9d97bc64f2e6b736869f14"
        ],
        [
            "Definition align_alignof a b := align a b.",
            "VernacDefinition",
            "2433e0593ab15c2647258a83916d2a00460f3187"
        ],
        [
            "Definition sizeof_struct_le := sizeof_struct.",
            "VernacDefinition",
            "160680287ef97a3af3fc8a13ee355900e3fc5ff1"
        ],
        [
            "Ltac pose_align_le := repeat match goal with | |- context [align ?A (@alignof ?env ?t)] => assert (A <= align A (@alignof env t)) by (apply align_le, @alignof_pos); change (align A (@alignof env t)) with (align_alignof A (@alignof env t)) | |- context [align ?A (co_alignof ?co)] => let x := fresh \"x\" in assert (A <= align A (co_alignof co)) by (apply align_le; destruct (co_alignof_two_p co) as [x ?]; pose proof two_power_nat_pos x; omega); change (align A (co_alignof co)) with (align_alignof A (co_alignof co)) | |- context [sizeof_struct ?env ?A ?m] => pose proof sizeof_struct_incr env m A; change (sizeof_struct env A m) with (sizeof_struct_le env A m) end; try unfold align_alignof in *; try unfold sizeof_struct_le in *.",
            "VernacExtend",
            "546deb2b18b2cbaf4e14ddec79cbfea64ee40da4"
        ],
        [
            "Definition sizeofp := @sizeof.",
            "VernacDefinition",
            "e4a13977f9f7fd499c317465a31899d8d1f5241f"
        ],
        [
            "Ltac pose_sizeof_pos := repeat match goal with | |- context [@sizeof ?env ?t] => pose proof @sizeof_pos env t; change (@sizeof env t) with (sizeofp env t) end; unfold sizeofp in *.",
            "VernacExtend",
            "a8c810eaeae5be89c53e53db6ba51b386f3418ef"
        ],
        [
            "Ltac pose_sizeof_co t := match t with | Tstruct ?id ?a => pose proof sizeof_Tstruct id a; assert (sizeof_struct cenv_cs 0 (co_members (get_co id)) <= co_sizeof (get_co id)); [ rewrite co_consistent_sizeof with (env := cenv_cs) by (apply get_co_consistent); rewrite complete_legal_cosu_type_Tstruct with (a0 := a) by auto; apply align_le, co_alignof_pos |] | Tunion ?id ?a => pose proof sizeof_Tunion id a; assert (sizeof_union cenv_cs (co_members (get_co id)) <= co_sizeof (get_co id)); [ rewrite co_consistent_sizeof with (env := cenv_cs) by (apply get_co_consistent); rewrite complete_legal_cosu_type_Tunion with (a0 := a) by auto; apply align_le, co_alignof_pos |] end.",
            "VernacExtend",
            "c991c9674f96870ef88c4913eb2aec9c09393546"
        ],
        [
            "Ltac pose_field := match goal with | _ : complete_legal_cosu_type (Tstruct ?id ?a) = true |- context [@sizeof cenv_cs (field_type ?i (co_members (get_co ?id)))] => pose_sizeof_co (Tstruct id a); let H := fresh \"H\" in pose proof field_offset_in_range i (co_members (get_co id)) as H; spec H; [solve [auto] |]; pose proof @sizeof_pos cenv_cs (field_type i (co_members (get_co id))) | _ : complete_legal_cosu_type (Tunion ?id ?a) = true |- context [@sizeof cenv_cs (field_type ?i (co_members (get_co ?id)))] => pose_sizeof_co (Tunion id a); let H := fresh \"H\" in pose proof sizeof_union_in_members i (co_members (get_co id)) as H; spec H; [solve [auto] |]; pose proof @sizeof_pos cenv_cs (field_type i (co_members (get_co id))) | _ => idtac end; match goal with | _ : complete_legal_cosu_type (Tstruct ?id ?a) = true |- context [field_offset_next cenv_cs ?i (co_members (get_co ?id)) (co_sizeof (get_co ?id))] => let H := fresh \"H\" in pose proof field_offset_next_in_range i (co_members (get_co id)) (co_sizeof (get_co id)); spec H; [solve [auto] |]; spec H; [solve [auto | pose_sizeof_co (Tstruct id a); auto] |] | _ => idtac end .",
            "VernacExtend",
            "94fe7b6d278b296a3bad906a1ce90f7df9f5e3f2"
        ]
    ],
    "proofs": [
        {
            "name": "fold_right_map",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHl.",
                        "VernacExtend",
                        "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_eq",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "unfold nested_fields_pred.",
                        "VernacExtend",
                        "505ec13353a06888546d940c62328ee285e5fca9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold nested_pred.",
                        "VernacExtend",
                        "51813239fe504aad8f4ad8e62b19751c84e07824"
                    ]
                },
                {
                    "command": [
                        "rewrite type_func_eq with (t0 := t) (A := (fun _ => bool)) at 1 by auto.",
                        "VernacExtend",
                        "9b0714b076c3519857b17c4429497bd6e0aa799c"
                    ]
                },
                {
                    "command": [
                        "destruct t; auto.",
                        "VernacExtend",
                        "005ed9da4fb43c9c32bf8a56e846700db3d6610d"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold FTI_aux.",
                        "VernacExtend",
                        "2d4f810c1be7ff6e153ebd2e6649dde6a9a2510d"
                    ]
                },
                {
                    "command": [
                        "rewrite decay_spec.",
                        "VernacExtend",
                        "58cac60f10eb3e5cbb6a1403a9e8bdb3182b5d6b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_right_map.",
                        "VernacExtend",
                        "7531d1e0758498f742894f732d21a2808cfb5989"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold FTI_aux.",
                        "VernacExtend",
                        "2d4f810c1be7ff6e153ebd2e6649dde6a9a2510d"
                    ]
                },
                {
                    "command": [
                        "rewrite decay_spec.",
                        "VernacExtend",
                        "58cac60f10eb3e5cbb6a1403a9e8bdb3182b5d6b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_right_map.",
                        "VernacExtend",
                        "7531d1e0758498f742894f732d21a2808cfb5989"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_atom_pred",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_pred_eq in H by auto.",
                        "VernacExtend",
                        "3e87f7fce7937cf896cf031757790174e65915ee"
                    ]
                },
                {
                    "command": [
                        "destruct t; simpl in *; try apply andb_true_iff in H; try tauto.",
                        "VernacExtend",
                        "d7a284515007ec30fb40693ff477ee2b3f940c82"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_fields_pred_nested_pred",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold nested_fields_pred in H0.",
                        "VernacExtend",
                        "270b69f4052353710b4ac66c933bf3963e73f971"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fold_right_map in H0.",
                        "VernacExtend",
                        "2858dc7ab043e1ca93de2d5caa6fb482544f53ec"
                    ]
                },
                {
                    "command": [
                        "eapply fold_right_andb; [exact H0 |].",
                        "VernacExtend",
                        "beb4302ba7829b7ce5b6c0cf2fb5c57ddabf0b38"
                    ]
                },
                {
                    "command": [
                        "clear - H.",
                        "VernacExtend",
                        "0feb8621f12176e9894f4f3ff86ecf0003739aed"
                    ]
                },
                {
                    "command": [
                        "rewrite <- map_map.",
                        "VernacExtend",
                        "7d0748d0da0977436d7d855d92d9c2890414c6d7"
                    ]
                },
                {
                    "command": [
                        "apply in_map.",
                        "VernacExtend",
                        "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
                    ]
                },
                {
                    "command": [
                        "change (field_type i m) with ((fun it => field_type (fst it) m) (i, field_type i m)).",
                        "VernacExtend",
                        "043a32afcd4819eaaf43f237d29696252237369f"
                    ]
                },
                {
                    "command": [
                        "apply in_map.",
                        "VernacExtend",
                        "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
                    ]
                },
                {
                    "command": [
                        "apply in_members_field_type.",
                        "VernacExtend",
                        "bce7db47c28876faf55bd58a7cb7c137b093e955"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_Tarray",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_pred_eq in H by auto.",
                        "VernacExtend",
                        "3e87f7fce7937cf896cf031757790174e65915ee"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H.",
                        "VernacExtend",
                        "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_Tstruct",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_pred_eq in H by auto.",
                        "VernacExtend",
                        "3e87f7fce7937cf896cf031757790174e65915ee"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H; tauto.",
                        "VernacExtend",
                        "433e8379a958e64f84b9cf92c8b8b4d8dc25688c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_Tstruct2",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply nested_pred_Tstruct in H.",
                        "VernacExtend",
                        "bab630fe5a63337b077d32366f2f9ca2bbf298b1"
                    ]
                },
                {
                    "command": [
                        "apply nested_fields_pred_nested_pred; auto.",
                        "VernacExtend",
                        "61e40d4169a40e6533967872d755cdde65223605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_Tunion",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_pred_eq in H by auto.",
                        "VernacExtend",
                        "3e87f7fce7937cf896cf031757790174e65915ee"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H; tauto.",
                        "VernacExtend",
                        "433e8379a958e64f84b9cf92c8b8b4d8dc25688c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nested_pred_Tunion2",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply nested_pred_Tunion in H.",
                        "VernacExtend",
                        "ebb18b9a59f2f3471a0776b5501e20c8bdff5e25"
                    ]
                },
                {
                    "command": [
                        "apply nested_fields_pred_nested_pred; auto.",
                        "VernacExtend",
                        "61e40d4169a40e6533967872d755cdde65223605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "complete_legal_cosu_type_Tstruct",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "unfold get_co.",
                        "VernacExtend",
                        "e794002bedd49678ac28a454394e4cf652674d47"
                    ]
                },
                {
                    "command": [
                        "destruct (cenv_cs ! id); auto.",
                        "VernacExtend",
                        "6e8fcd805eff93682dfc55bc59a56e551e30a94e"
                    ]
                },
                {
                    "command": [
                        "destruct (co_su c); congruence.",
                        "VernacExtend",
                        "5827b7bfe4b69610cd1ec5fa6d8ad259d8a8bf28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "complete_legal_cosu_type_Tunion",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "unfold get_co.",
                        "VernacExtend",
                        "e794002bedd49678ac28a454394e4cf652674d47"
                    ]
                },
                {
                    "command": [
                        "destruct (cenv_cs ! id); auto; try congruence.",
                        "VernacExtend",
                        "c6cc55e5c4d652b2ee633611ea1470fc97f72af0"
                    ]
                },
                {
                    "command": [
                        "destruct (co_su c); congruence.",
                        "VernacExtend",
                        "5827b7bfe4b69610cd1ec5fa6d8ad259d8a8bf28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tarray_sizeof_0",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "apply Z.eq_mul_0 in H.",
                        "VernacExtend",
                        "9281a6407f2a97efc715b1982faccffdb173eb6f"
                    ]
                },
                {
                    "command": [
                        "destruct H; auto.",
                        "VernacExtend",
                        "95ae427bd4e09a5f31c59184b718811a23ecb36f"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "destruct (zlt 0 n); [| omega].",
                        "VernacExtend",
                        "b743539d3d9d1d308e32c1dd07cfb541c621e803"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.max_r in H by omega.",
                        "VernacExtend",
                        "9a49dd493cbc4f4dfc9052819b3806e5ef945086"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tstruct_sizeof_0",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite sizeof_Tstruct in H0.",
                        "VernacExtend",
                        "c68022d7d9fdd47cdcd7493c9834526152cb1d1b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply sizeof_struct_0; auto.",
                        "VernacExtend",
                        "5030f7fca85828e12cbaa66f8fcb125c153c4875"
                    ]
                },
                {
                    "command": [
                        "pose proof co_consistent_sizeof cenv_cs (get_co id) (get_co_consistent id).",
                        "VernacExtend",
                        "bd3549dfe2124532d84eec97194b5b414c934bdd"
                    ]
                },
                {
                    "command": [
                        "erewrite complete_legal_cosu_type_Tstruct in H2 by eauto.",
                        "VernacExtend",
                        "084e927502870ad5b3444feaa62c87baa825276e"
                    ]
                },
                {
                    "command": [
                        "simpl in H2.",
                        "VernacExtend",
                        "b1e247c43b6623097ab13813b4de664287dd4249"
                    ]
                },
                {
                    "command": [
                        "pose proof align_le (sizeof_struct cenv_cs 0 (co_members (get_co id))) (co_alignof (get_co id)) (co_alignof_pos _).",
                        "VernacExtend",
                        "31e78d81427af610d311e92e3c9ae998cbe62d62"
                    ]
                },
                {
                    "command": [
                        "pose proof sizeof_struct_incr cenv_cs (co_members (get_co id)) 0.",
                        "VernacExtend",
                        "04681284036e6a0f70d744cb5f2ae07fba6296c4"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tunion_sizeof_0",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite sizeof_Tunion in H0.",
                        "VernacExtend",
                        "2fae751dc3fa5aacbd25835199fce1ac79566ff5"
                    ]
                },
                {
                    "command": [
                        "apply sizeof_union_0; auto.",
                        "VernacExtend",
                        "bb13dbfc1c313d656d236a60f8becd96b025b416"
                    ]
                },
                {
                    "command": [
                        "pose proof co_consistent_sizeof cenv_cs (get_co id) (get_co_consistent id).",
                        "VernacExtend",
                        "bd3549dfe2124532d84eec97194b5b414c934bdd"
                    ]
                },
                {
                    "command": [
                        "erewrite complete_legal_cosu_type_Tunion in H2 by eauto.",
                        "VernacExtend",
                        "ef087f8e6c61def574bd2538b30a1942474c58c5"
                    ]
                },
                {
                    "command": [
                        "simpl in H2.",
                        "VernacExtend",
                        "b1e247c43b6623097ab13813b4de664287dd4249"
                    ]
                },
                {
                    "command": [
                        "pose proof align_le (sizeof_union cenv_cs (co_members (get_co id))) (co_alignof (get_co id)) (co_alignof_pos _).",
                        "VernacExtend",
                        "71e5f4aeafc252e626273e3454723fa39c0f0860"
                    ]
                },
                {
                    "command": [
                        "pose proof sizeof_union_pos cenv_cs (co_members (get_co id)).",
                        "VernacExtend",
                        "392585073a75776df517373f9683b60fa246777c"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}