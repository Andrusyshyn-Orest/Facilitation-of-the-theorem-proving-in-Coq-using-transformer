{
    "filename": "floyd/sc_set_load_store.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.nested_field_lemmas.",
            "VernacRequire",
            "2ae988fac26931aaa409a9389758d750e8ca6601"
        ],
        [
            "Require Import VST.floyd.efield_lemmas.",
            "VernacRequire",
            "0c47229b01bda83c0fb8dfc4c7351bb1c3ce9b48"
        ],
        [
            "Require Import VST.floyd.reptype_lemmas.",
            "VernacRequire",
            "67895477ec539ad1bf901b33e9b181c1c2cf58be"
        ],
        [
            "Require Import VST.floyd.proj_reptype_lemmas.",
            "VernacRequire",
            "f23e23e56fbc43071b2da91d2fb5090e3239f8a3"
        ],
        [
            "Require Import VST.floyd.replace_refill_reptype_lemmas.",
            "VernacRequire",
            "6f4a17f3b2a7a55d1dc134842116182719e05b1c"
        ],
        [
            "Require Import VST.floyd.mapsto_memory_block.",
            "VernacRequire",
            "1eb48c3b1d3226b38616009522812b5e36900b31"
        ],
        [
            "Require Import VST.floyd.data_at_rec_lemmas.",
            "VernacRequire",
            "782eebd63d8680a4569a04c81542bd75cc6f79bd"
        ],
        [
            "Require Import VST.floyd.field_at.",
            "VernacRequire",
            "c7cf6c35d27d83ac7be63633e374fa639476b7cc"
        ],
        [
            "Require Import VST.floyd.stronger.",
            "VernacRequire",
            "da2c50420d06dadfb072688069a0ba431a96788f"
        ],
        [
            "Require Import VST.floyd.entailer.",
            "VernacRequire",
            "af3575d05e2d8569d7bfb3e1f5690267a491e5e9"
        ],
        [
            "Require Import VST.floyd.closed_lemmas.",
            "VernacRequire",
            "bdf37b0c22e35685c35e40eead36bd536eafda98"
        ],
        [
            "Require Import VST.floyd.loadstore_mapsto.",
            "VernacRequire",
            "86a37b050ded6be68f67e4b01aa7679dd4aba732"
        ],
        [
            "Require Import VST.floyd.loadstore_field_at.",
            "VernacRequire",
            "d9151576aaecb5847efb556f9907542a8e51caf7"
        ],
        [
            "Require Import VST.floyd.nested_loadstore.",
            "VernacRequire",
            "f664f24972fe966ae327fbedd2371ac40a389747"
        ],
        [
            "Require Import VST.floyd.local2ptree_denote.",
            "VernacRequire",
            "7b2a6fd2646a0af15a2f968f47cdf7e71d5416cd"
        ],
        [
            "Require Import VST.floyd.local2ptree_eval.",
            "VernacRequire",
            "63565982e2b485f6be616dc3d84a7e5844536459"
        ],
        [
            "Require Import VST.floyd.simpl_reptype.",
            "VernacRequire",
            "20c6d9da9481639a494564351bac3e7ce08c481d"
        ],
        [
            "Local Open Scope logic.",
            "VernacOpenCloseScope",
            "5937723d189e5aa98ad78e1018bed51ea2c1b0cd"
        ],
        [
            "Section SEMAX_SC.",
            "VernacBeginSection",
            "f1b0f634cdc85c67dcdb9264c8c682c3d2ecac0e"
        ],
        [
            "Context {cs: compspecs}.",
            "VernacContext",
            "54247ea3591f081b4582667d94ae6f9e673bf9e3"
        ],
        [
            "Lemma semax_SC_set: forall {Espec: OracleKind}, forall Delta id P Q R (e2: expr) t v, typeof_temp Delta id = Some t -> is_neutral_cast (implicit_deref (typeof e2)) t = true -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(eq v) (eval_expr e2)) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_expr Delta e2) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sset id e2) (normal_ret_assert (PROPx P (LOCALx (temp id v :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "3cf6b9808d73494b0be0d4a9d0727137b4d26d5d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert_PROP (tc_val (typeof e2) v).",
            "VernacExtend",
            "5f14ecb67f94e509c9fab9f564261dc9b31fd071"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite (add_andp _ _ H1), (add_andp _ _ H2).",
            "VernacExtend",
            "3372e774ddea0e8d3c28a73b1db2d032bbb7fe74"
        ],
        [
            "unfold_lift.",
            "VernacExtend",
            "49cc678292f20068718dd6f7d6f838fc96506b4c"
        ],
        [
            "intro rho; unfold local, lift1; simpl.",
            "VernacExtend",
            "ff3de8ce35b2c4a2c66590d21e4938f9fd491aa9"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply typecheck_expr_sound; auto.",
            "VernacExtend",
            "95f0d90497c1338bd29cbaed112f2367c7508e67"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (v <> Vundef) as UNDEF by (intro; subst; apply tc_val_Vundef in H3; auto).",
            "VernacExtend",
            "4c4fea3e181c5008e11327ca11e3a4e93c53a8f1"
        ],
        [
            "clear H3.",
            "VernacExtend",
            "fc50f4d83926cbda2c6b6c4c8fff0c14162e2a3f"
        ],
        [
            "assert (ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_expr Delta e2) && (tc_temp_id id (typeof e2) Delta e2)).",
            "VernacExtend",
            "3c4270fd54edd6f323138f97291d0b7d98c07d58"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "unfold tc_temp_id.",
            "VernacExtend",
            "09bf5cb3216184be88e72f3a847f22db772a60ea"
        ],
        [
            "unfold typecheck_temp_id.",
            "VernacExtend",
            "3e490e44e58cec2ca8e33654389f3f6b4e9b68a5"
        ],
        [
            "unfold typeof_temp in H.",
            "VernacExtend",
            "521f13380ff008a5e8e26b9fa1a9556ca550163a"
        ],
        [
            "destruct ((temp_types Delta) ! id) as [?|]; [| inversion H].",
            "VernacExtend",
            "e846f7f3d0c15c2676832474fd6bc61ef816ecd9"
        ],
        [
            "inversion H; clear H; subst.",
            "VernacExtend",
            "a36bd190e11a8fd6825e4b7a1eb236029aaadb63"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl denote_tc_assert; simpl; intros.",
            "VernacExtend",
            "2ca5f872b2d63c1ae5ef8e883f7522995bd9df2f"
        ],
        [
            "unfold local, lift1.",
            "VernacExtend",
            "9293e8229d66da65c139a7c415e04062e8f4c83d"
        ],
        [
            "apply neutral_isCastResultType, H0.",
            "VernacExtend",
            "2b74db41ae61b1bcb811ad921834cb1d03ed1586"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "eapply semax_pre_simple.",
            "VernacExtend",
            "1bf9a52897fb3b88abac033f633fb076f775ca6a"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "hoist_later_left.",
            "VernacExtend",
            "421b262d90718883317838e9792d45755b60f419"
        ],
        [
            "rewrite (add_andp _ _ H3).",
            "VernacExtend",
            "1b938cd20fd814db8f6b37e9457a3b71ce894d5c"
        ],
        [
            "rewrite andp_comm.",
            "VernacExtend",
            "f42ee316a55b2a9216373e6b515ce4b77ae502d5"
        ],
        [
            "rewrite (add_andp _ _ H1).",
            "VernacExtend",
            "0177107f9f62aff0383a58af8c7631543dfee2c4"
        ],
        [
            "apply later_derives.",
            "VernacExtend",
            "6d853a38a245ffdce956dbff7c40cd6f927fd9f9"
        ],
        [
            "apply andp_derives; [apply derives_refl |].",
            "VernacExtend",
            "71f3759ebda4f9a8383de42ff6ec6fd18867ae69"
        ],
        [
            "apply andp_derives; [| apply derives_refl].",
            "VernacExtend",
            "7c80a4f35a94ae7cf7ec8b49c00d0e7aa37159d4"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "eapply semax_post'; [| apply semax_set_forward].",
            "VernacExtend",
            "c30147c27c6a22594acc10a9df93e111cbb2ceaf"
        ],
        [
            "apply andp_left2; rewrite <- insert_local.",
            "VernacExtend",
            "443f1844f8d63bb8cb84605506ce2faedff14e34"
        ],
        [
            "eapply derives_trans; [| apply andp_derives; [apply derives_refl | apply remove_localdef_temp_PROP]].",
            "VernacExtend",
            "a1a674c2121b5a356ab6ce10d245b3c559cdff0f"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "apply (exp_right old).",
            "VernacExtend",
            "f8613e49af33f25754378c03873b8277c991875d"
        ],
        [
            "autorewrite with subst.",
            "VernacExtend",
            "a0a7cc51d36fa0a311954515c238f15599d651bc"
        ],
        [
            "rewrite andp_comm, andp_assoc, andp_comm.",
            "VernacExtend",
            "9a365fe7d673368f809975812516635b98388021"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "simpl; unfold local, lift1; unfold_lift; intro rho; simpl.",
            "VernacExtend",
            "3c95ff7001fa04b9d5c7254204840a958bb919cc"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_SC_field_load: forall {Espec: OracleKind} n (Delta: tycontext) sh id P Q R e1 t_id t_root gfs0 gfs1 gfs (p v_val: val) (v_reptype: reptype (nested_field_type t_root gfs0)), typeof e1 = nested_field_type t_root gfs -> typeof_temp Delta id = Some t_id -> is_neutral_cast (nested_field_type t_root gfs) t_id = true -> type_is_volatile (nested_field_type t_root gfs) = false -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(eq (field_address t_root gfs p)) (eval_lvalue e1)) -> nth_error R n = Some (field_at sh t_root gfs0 v_reptype p) -> gfs = gfs1 ++ gfs0 -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v_reptype) v_val -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_lvalue Delta e1) && local (`(tc_val (nested_field_type t_root gfs) v_val)) -> @semax cs Espec Delta (|> PROPx P (LOCALx Q (SEPx R))) (Sset id e1) (normal_ret_assert (PROPx P (LOCALx (temp id v_val :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "b113b49cbda245f0cf70a81414f13519fc8deda3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert_PROP (field_compatible t_root gfs p).",
            "VernacExtend",
            "b481f6a18d11097c785fef12cf9b163e33415b69"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite (add_andp _ _ H8), (add_andp _ _ H3).",
            "VernacExtend",
            "4e0851db38559ca95dc4b375689ef7b073665dd1"
        ],
        [
            "apply derives_trans with (local (tc_environ Delta) && local (` (eq (field_address t_root gfs p)) (eval_lvalue e1)) && (tc_lvalue Delta e1)); [solve_andp |].",
            "VernacExtend",
            "f846a50eb353401a401f84334921cbd7c9777055"
        ],
        [
            "unfold local, lift1; intros rho; simpl; unfold_lift.",
            "VernacExtend",
            "09f1a4acc46eff6485b082d9d80e2856223869f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "eapply derives_trans; [apply typecheck_lvalue_sound; auto |].",
            "VernacExtend",
            "321f8a2aae9c706b224311a548b9e89d09bfcf9e"
        ],
        [
            "rewrite <- H10; normalize.",
            "VernacExtend",
            "79837b98f51309dc1069cace5393cee8430b5175"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "subst gfs.",
            "VernacExtend",
            "f7c13c261b486cd19f82caadde5ad86fe39704fe"
        ],
        [
            "pose proof nested_field_ramif_load sh _ _ _ _ _ _ H9 H7 as [v_reptype' [? ?]].",
            "VernacExtend",
            "a63897c04a355f7128589818ffb1d6b4185cdc81"
        ],
        [
            "eapply semax_load_nth_ram_field_at.",
            "VernacExtend",
            "4d65641f8c82a64b92c924ce632c93487f656c00"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_error_SEP_sepcon_TT': forall D P Q R n Rn S, ENTAIL D, PROPx P (LOCALx Q (SEPx (Rn :: nil))) |-- S -> nth_error R n = Some Rn -> ENTAIL D, (PROPx P (LOCALx Q (SEPx R))) |-- S * TT.",
            "VernacStartTheoremProof",
            "ea027f2070b120eee036d709e8fdd5060629681a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "erewrite SEP_nth_isolate by eauto.",
            "VernacExtend",
            "13fc6eb5c4b83683a275fca8aa72999926adab71"
        ],
        [
            "unfold PROPx, LOCALx, SEPx in *.",
            "VernacExtend",
            "1e0c24c75051bd828b6b408706b58277b182f42a"
        ],
        [
            "unfold local, lift1 in H |- *.",
            "VernacExtend",
            "d48f96314c5957dfce6355f86d41a0687472db9f"
        ],
        [
            "unfold_lift in H.",
            "VernacExtend",
            "0a1066f59459f9c869906996c139bea7b2fb2401"
        ],
        [
            "unfold_lift.",
            "VernacExtend",
            "49cc678292f20068718dd6f7d6f838fc96506b4c"
        ],
        [
            "simpl in H |- *.",
            "VernacExtend",
            "83f76a13eeb5aba1a599462a48e3e57b0a31d2bc"
        ],
        [
            "intros rho.",
            "VernacExtend",
            "a2c73e9d721b33bd236ef5f63ee08f19792dc61e"
        ],
        [
            "specialize (H rho).",
            "VernacExtend",
            "511c4d67847c5606d45b6a4cdbbd71f5d3fb1308"
        ],
        [
            "rewrite <- !andp_assoc in H |- *.",
            "VernacExtend",
            "fae24b9ee5304e7a1d7f36aff8cc7cb21eb4d801"
        ],
        [
            "rewrite <- !prop_and in H |- *.",
            "VernacExtend",
            "068e56bfdaaeb77d7232e3eb8fd932ed0224a10e"
        ],
        [
            "rewrite sepcon_emp in H.",
            "VernacExtend",
            "ce7e562357f59e76f2322e1456f5b20f37eaa24a"
        ],
        [
            "rewrite <- sepcon_andp_prop'.",
            "VernacExtend",
            "4d6c788bc274e52ac69a47b089bf429d0927aefe"
        ],
        [
            "apply sepcon_derives.",
            "VernacExtend",
            "5279c4b0e23192edb2904c60cb96eb25409229af"
        ],
        [
            "exact H.",
            "VernacExtend",
            "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
        ],
        [
            "apply prop_right.",
            "VernacExtend",
            "951daa52f148695942d4aefc563d5e92d8ec02ff"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_SC_field_cast_load: forall {Espec: OracleKind} n (Delta: tycontext) sh id P Q R e1 t t_root gfs0 gfs1 gfs (p v_val: val) (v_reptype: reptype (nested_field_type t_root gfs0)), typeof e1 = nested_field_type t_root gfs -> typeof_temp Delta id = Some t -> type_is_by_value (nested_field_type t_root gfs) = true -> cast_pointer_to_bool (nested_field_type t_root gfs) t = false -> type_is_volatile (nested_field_type t_root gfs) = false -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(eq (field_address t_root gfs p)) (eval_lvalue e1)) -> nth_error R n = Some (field_at sh t_root gfs0 v_reptype p) -> gfs = gfs1 ++ gfs0 -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v_reptype) v_val -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_lvalue Delta e1) && local (`(tc_val t (eval_cast (nested_field_type t_root gfs) t v_val))) -> @semax cs Espec Delta (|> PROPx P (LOCALx Q (SEPx R))) (Sset id (Ecast e1 t)) (normal_ret_assert (PROPx P (LOCALx (temp id (eval_cast (nested_field_type t_root gfs) t v_val) :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "077df2837ed56138e35f1fcde5dfe5c657e9fd9c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert_PROP (field_compatible t_root gfs p).",
            "VernacExtend",
            "b481f6a18d11097c785fef12cf9b163e33415b69"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite (add_andp _ _ H9), (add_andp _ _ H4).",
            "VernacExtend",
            "fc54ed0cd9f891f0ce13dd3662cf61f4f3f421b4"
        ],
        [
            "apply derives_trans with (local (tc_environ Delta) && local (` (eq (field_address t_root gfs p)) (eval_lvalue e1)) && (tc_lvalue Delta e1)); [solve_andp |].",
            "VernacExtend",
            "f846a50eb353401a401f84334921cbd7c9777055"
        ],
        [
            "unfold local, lift1; intros rho; simpl; unfold_lift.",
            "VernacExtend",
            "09f1a4acc46eff6485b082d9d80e2856223869f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "eapply derives_trans; [apply typecheck_lvalue_sound; auto |].",
            "VernacExtend",
            "321f8a2aae9c706b224311a548b9e89d09bfcf9e"
        ],
        [
            "rewrite <- H11; normalize.",
            "VernacExtend",
            "6982768946ee03383db261e6af77ca7a32bcdfac"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "subst gfs.",
            "VernacExtend",
            "f7c13c261b486cd19f82caadde5ad86fe39704fe"
        ],
        [
            "pose proof nested_field_ramif_load sh _ _ _ _ _ _ H10 H8 as [v_reptype' [? ?]].",
            "VernacExtend",
            "7a770f6ed1bd48bc1d0b3aa45ae01cd1dcd079fa"
        ],
        [
            "eapply semax_cast_load_nth_ram_field_at.",
            "VernacExtend",
            "7720e8633758027d27e27f5251463344ab38c0bd"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_SC_field_store: forall {Espec: OracleKind}, forall Delta sh n (p: val) P Q R (e1 e2 : expr) (t_root: type) (gfs0 gfs1 gfs: list gfield) (v0: reptype (nested_field_type (nested_field_type t_root gfs0) gfs1)) (v0_val: val) (v v_new: reptype (nested_field_type t_root gfs0)), typeof e1 = nested_field_type t_root gfs -> type_is_by_value (nested_field_type t_root gfs) = true -> type_is_volatile (nested_field_type t_root gfs) = false -> gfs = gfs1 ++ gfs0 -> nth_error R n = Some (field_at sh t_root gfs0 v p) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(eq (field_address t_root gfs p)) (eval_lvalue e1)) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(eq v0_val) (eval_expr (Ecast e2 (nested_field_type t_root gfs)))) -> writable_share sh -> JMeq v0 v0_val -> data_equal (upd_reptype (nested_field_type t_root gfs0) gfs1 v v0) v_new -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_lvalue Delta e1) && (tc_expr Delta (Ecast e2 (nested_field_type t_root gfs))) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sassign e1 e2) (normal_ret_assert (PROPx P (LOCALx Q (SEPx (replace_nth n R (field_at sh t_root gfs0 v_new p)))))).",
            "VernacStartTheoremProof",
            "4877b71c6d9f52f622e0248a7c5b73550d72027e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "erewrite field_at_data_equal by (symmetry; apply H8).",
            "VernacExtend",
            "1f89167843d45415cfeb5d714080807130a6b549"
        ],
        [
            "clear H8 v_new.",
            "VernacExtend",
            "0bab7488b4d9663dadac92f70490e522c0afc4ca"
        ],
        [
            "assert_PROP (field_compatible t_root gfs p).",
            "VernacExtend",
            "b481f6a18d11097c785fef12cf9b163e33415b69"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite (add_andp _ _ H9), (add_andp _ _ H4).",
            "VernacExtend",
            "fc54ed0cd9f891f0ce13dd3662cf61f4f3f421b4"
        ],
        [
            "apply derives_trans with (local (tc_environ Delta) && local (` (eq (field_address t_root gfs p)) (eval_lvalue e1)) && (tc_lvalue Delta e1)); [solve_andp |].",
            "VernacExtend",
            "f846a50eb353401a401f84334921cbd7c9777055"
        ],
        [
            "unfold local, lift1; intros rho; simpl; unfold_lift.",
            "VernacExtend",
            "09f1a4acc46eff6485b082d9d80e2856223869f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "eapply derives_trans; [apply typecheck_lvalue_sound; auto |].",
            "VernacExtend",
            "321f8a2aae9c706b224311a548b9e89d09bfcf9e"
        ],
        [
            "rewrite <- H10; normalize.",
            "VernacExtend",
            "79837b98f51309dc1069cace5393cee8430b5175"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "subst gfs.",
            "VernacExtend",
            "f7c13c261b486cd19f82caadde5ad86fe39704fe"
        ],
        [
            "pose proof nested_field_ramif_store sh _ _ _ v _ _ _ H8 H7 as [v_reptype' [? ?]].",
            "VernacExtend",
            "58e66c3497543c22e59cae78f407770479d95528"
        ],
        [
            "eapply semax_store_nth_ram_field_at.",
            "VernacExtend",
            "a700231f16cfbbc20d108c23b4e9754972be9f97"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: apply @JMeq_sym.",
            "VernacExtend",
            "7a5a1bd1c9fa2bb594b6900cc79cf8657943ae9d"
        ],
        [
            "eassumption.",
            "VernacExtend",
            "909bfe8655bf95c07560744f733991163ce6cf7e"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "rewrite (add_andp _ _ H9), (add_andp _ _ H5); solve_andp.",
            "VernacExtend",
            "bc193bcc7cf191b4df9d510cbc1748fc3e67e44c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SEMAX_SC.",
            "VernacEndSegment",
            "d2e8eda785ff345ff13489493b8b3fbf2d8fe2dd"
        ],
        [
            "Inductive Ptrofs_eqm_unsigned: ptrofs -> Z -> Prop := | Ptrofs_eqm_unsigned_repr: forall z, Ptrofs_eqm_unsigned (Ptrofs.repr z) z.",
            "VernacInductive",
            "f1cb78de33b22d2672d2a361f0ce804834d75397"
        ],
        [
            "Lemma Ptrofs_eqm_unsigned_spec: forall i z, Ptrofs_eqm_unsigned i z -> Ptrofs.eqm (Ptrofs.unsigned i) z.",
            "VernacStartTheoremProof",
            "f6db9efa3078fa42aaf28e078bf4aea2048a37e2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "apply Ptrofs.eqm_sym, Ptrofs.eqm_unsigned_repr.",
            "VernacExtend",
            "9f8f43f2a7e6f627e06ec6543904a99e355ccea8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac solve_Ptrofs_eqm_unsigned := solve [ autorewrite with norm; rewrite ?Ptrofs_repr_Int_unsigned_special by reflexivity; rewrite ?Ptrofs_repr_Int64_unsigned_special by reflexivity; match goal with | |- Ptrofs_eqm_unsigned ?V _ => match V with | Ptrofs.repr _ => idtac | Ptrofs.sub _ _ => unfold Ptrofs.sub at 1 | Ptrofs.add _ _ => unfold Ptrofs.add at 1 | Ptrofs.mul _ _ => unfold Ptrofs.mul at 1 | Ptrofs.and _ _ => unfold Ptrofs.and at 1 | Ptrofs.or _ _ => unfold Ptrofs.or at 1 | _ => rewrite <- (Ptrofs.repr_unsigned V) at 1 end end; apply Ptrofs_eqm_unsigned_repr ].",
            "VernacExtend",
            "8efec15ea5bffb09dd5026840fbc89937c710dd3"
        ],
        [
            "Inductive msubst_efield_denote {cs: compspecs} (Delta: tycontext) (T1: PTree.t val) (T2: PTree.t (type * val)) (GV: option globals): list efield -> list gfield -> Prop := | msubst_efield_denote_nil: msubst_efield_denote Delta T1 T2 GV nil nil | msubst_efield_denote_cons_array: forall ei i i' efs gfs, is_int_type (typeof ei) = true -> msubst_eval_expr Delta T1 T2 GV ei = Some (Vint i) -> int_signed_or_unsigned (typeof ei) i = i' -> msubst_efield_denote Delta T1 T2 GV efs gfs -> msubst_efield_denote Delta T1 T2 GV (eArraySubsc ei :: efs) (ArraySubsc i' :: gfs) | msubst_efield_denote_cons_array_ptrofs: forall ei i i' efs gfs, is_ptrofs_type (typeof ei) = true -> msubst_eval_expr Delta T1 T2 GV ei = Some (Vptrofs i) -> Ptrofs_eqm_unsigned i i' -> msubst_efield_denote Delta T1 T2 GV efs gfs -> msubst_efield_denote Delta T1 T2 GV (eArraySubsc ei :: efs) (ArraySubsc i' :: gfs) | msubst_efield_denote_cons_struct: forall i efs gfs, msubst_efield_denote Delta T1 T2 GV efs gfs -> msubst_efield_denote Delta T1 T2 GV (eStructField i :: efs) (StructField i :: gfs) | msubst_efield_denote_cons_union: forall i efs gfs, msubst_efield_denote Delta T1 T2 GV efs gfs -> msubst_efield_denote Delta T1 T2 GV (eUnionField i :: efs) (UnionField i :: gfs).",
            "VernacInductive",
            "ca632a6fc523a1910328670c10fc388d1a86b686"
        ],
        [
            "Lemma msubst_efield_denote_eq: forall {cs: compspecs} Delta P T1 T2 GV R efs gfs, msubst_efield_denote Delta T1 T2 GV efs gfs -> ENTAIL Delta, PROPx P (LOCALx (LocalD T1 T2 GV) (SEPx R)) |-- local (efield_denote efs gfs).",
            "VernacStartTheoremProof",
            "4bfee10a144d9b4809dd8ddba684c6280376057a"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? MSUBST_EFIELD_DENOTE.",
            "VernacExtend",
            "852a5a2f188dbde68f10a14492daa25589e415bc"
        ],
        [
            "induction MSUBST_EFIELD_DENOTE.",
            "VernacExtend",
            "74335e5dc91853e215e33e5368984e0f4b7bac1e"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intro rho; apply prop_right; constructor.",
            "VernacExtend",
            "ab0774b113dc5d881ae6a3819006b58161b4275a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst i'.",
            "VernacExtend",
            "c3c716b25a66ff2114fe61cbd21b8c5ce35402be"
        ],
        [
            "eapply (msubst_eval_expr_eq _ P _ _ GV R) in H0.",
            "VernacExtend",
            "36a0420acd7eb096957e7ff03f47b0e7295ce96a"
        ],
        [
            "rewrite (add_andp _ _ H0), (add_andp _ _ IHMSUBST_EFIELD_DENOTE).",
            "VernacExtend",
            "eda9f2e40f76dcb556b615b1fc1d4d81a3d3128b"
        ],
        [
            "clear H0 IHMSUBST_EFIELD_DENOTE.",
            "VernacExtend",
            "188f89ec45e03819e90305a4fff1df8c68732c73"
        ],
        [
            "rewrite !andp_assoc; apply andp_left2, andp_left2.",
            "VernacExtend",
            "b1da59a37a464a0fb8e1cc97562c1e522146d570"
        ],
        [
            "unfold local, lift1; unfold_lift; intro rho; simpl.",
            "VernacExtend",
            "42fe42f2cda417b02e3e4186d386c09fc7f37802"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "clear - H; destruct (typeof ei); inv H; destruct i0,s; simpl; unfold int_signed_or_unsigned; simpl; try apply Int.signed_range; rep_omega.",
            "VernacExtend",
            "fe74217634e87c52b009d2da25bdb5157aa3e029"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold int_signed_or_unsigned.",
            "VernacExtend",
            "3746183483d12f316883001fdcc12bf7c95e04a3"
        ],
        [
            "destruct (typeof ei); inv H.",
            "VernacExtend",
            "d4138abd0dae877ee5e572303c64f2d6a3ec1e83"
        ],
        [
            "destruct i0, s; simpl; try apply Int.repr_signed; apply Int.repr_unsigned.",
            "VernacExtend",
            "2a7a63fadd35a614117153815797635f5350edcc"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply (msubst_eval_expr_eq _ P _ _ GV R) in H0.",
            "VernacExtend",
            "36a0420acd7eb096957e7ff03f47b0e7295ce96a"
        ],
        [
            "rewrite (add_andp _ _ H0), (add_andp _ _ IHMSUBST_EFIELD_DENOTE).",
            "VernacExtend",
            "eda9f2e40f76dcb556b615b1fc1d4d81a3d3128b"
        ],
        [
            "clear H0 IHMSUBST_EFIELD_DENOTE.",
            "VernacExtend",
            "188f89ec45e03819e90305a4fff1df8c68732c73"
        ],
        [
            "rewrite !andp_assoc; apply andp_left2, andp_left2.",
            "VernacExtend",
            "b1da59a37a464a0fb8e1cc97562c1e522146d570"
        ],
        [
            "unfold local, lift1; unfold_lift; intro rho; simpl.",
            "VernacExtend",
            "42fe42f2cda417b02e3e4186d386c09fc7f37802"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "apply efield_denote_ArraySubsc; auto.",
            "VernacExtend",
            "6ca7dbbddc1a42353f9d047c1041e9cf947eef5d"
        ],
        [
            "unfold Vptrofs in H2.",
            "VernacExtend",
            "bdb94108070a1d1b990cb167135cf38a512b0b83"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp.",
            "VernacExtend",
            "ddbeb08cfda8118e447ce468b630e255ec886676"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "apply array_subsc_denote_intro_long.",
            "VernacExtend",
            "1178c85d2fa45db9d7f60483083e3651c8c49488"
        ],
        [
            "apply Ptrofs_eqm_unsigned_spec in H1.",
            "VernacExtend",
            "5561f64990920359560c844fb7daa7bf6f11c4fc"
        ],
        [
            "rewrite <- H2; symmetry.",
            "VernacExtend",
            "83918537d081018c0bd3f3f97d1bebc346193945"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "clear - H1 Hp.",
            "VernacExtend",
            "03a0712234d0b99cbeb7922035c9f547d3955dac"
        ],
        [
            "rewrite <- Ptrofs.eqm64 in H1 by auto.",
            "VernacExtend",
            "0a43926cc2b74b2a4a00ca66014af87516693ff6"
        ],
        [
            "apply Int64.eqm_samerepr; auto.",
            "VernacExtend",
            "018625e24fdb5bb69b533edc52583d50035a1686"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "apply array_subsc_denote_intro_int.",
            "VernacExtend",
            "261e17a98fdf22f048fb767ccfd0f753776b5a8c"
        ],
        [
            "apply Ptrofs_eqm_unsigned_spec in H1.",
            "VernacExtend",
            "5561f64990920359560c844fb7daa7bf6f11c4fc"
        ],
        [
            "rewrite <- H2; symmetry.",
            "VernacExtend",
            "83918537d081018c0bd3f3f97d1bebc346193945"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "clear - H1 Hp.",
            "VernacExtend",
            "03a0712234d0b99cbeb7922035c9f547d3955dac"
        ],
        [
            "rewrite <- Ptrofs.eqm32 in H1 by auto.",
            "VernacExtend",
            "b2b962b44e5967012170e7d9f84670085466ec0f"
        ],
        [
            "unfold Ptrofs.to_int.",
            "VernacExtend",
            "a53cc3d989c3e6441381a17ef84900a58c6022f9"
        ],
        [
            "apply Int.eqm_samerepr; auto.",
            "VernacExtend",
            "458bdc1b368cc22910d4d62fbb81670bdc001ba1"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply derives_trans; [eassumption |].",
            "VernacExtend",
            "ff79dab16b33082cbece3d77b47dfd9111c18857"
        ],
        [
            "unfold local, lift1; unfold_lift; intro rho; simpl.",
            "VernacExtend",
            "42fe42f2cda417b02e3e4186d386c09fc7f37802"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply derives_trans; [eassumption |].",
            "VernacExtend",
            "ff79dab16b33082cbece3d77b47dfd9111c18857"
        ],
        [
            "unfold local, lift1; unfold_lift; intro rho; simpl.",
            "VernacExtend",
            "42fe42f2cda417b02e3e4186d386c09fc7f37802"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac insist_rep_omega := (auto; rep_omega) || match goal with |- ?A => fail 1000 \"load or store subscript failure: rep_omega cannot prove \"A end.",
            "VernacExtend",
            "d4b3153be9c1dda2e9e98fc11479927a57307c6d"
        ],
        [
            "Ltac solve_msubst_efield_denote := solve [ repeat first [ eapply msubst_efield_denote_cons_array_ptrofs; [ reflexivity | etransitivity; [solve_msubst_eval_expr | apply f_equal_Some; match goal with | |- Vint ?a = Vptrofs ?b => is_evar b; unify b (Ptrofs.of_int a); unfold Vptrofs; change Archi.ptr64 with false; cbv iota; rewrite (Ptrofs.to_int_of_int (eq_refl _)); reflexivity | |- Vlong ?a = Vptrofs ?b => is_evar b; unify b (Ptrofs.of_int64 a); unfold Vptrofs; change Archi.ptr64 with true; cbv iota; rewrite (Ptrofs.to_int64_of_int64 (eq_refl _)); reflexivity | |- Vptrofs _ = Vptrofs _ => reflexivity end ] | solve_Ptrofs_eqm_unsigned | ] | eapply msubst_efield_denote_cons_array; [ reflexivity | solve_msubst_eval_expr | rewrite ?ptrofs_to_int_repr; autorewrite with norm; lazymatch goal with | |- int_signed_or_unsigned _ (Int.repr ?i) = ?j => let x := fresh \"x\" in set (x:=i); let y := fresh \"y\" in set (y:=j); unfold int_signed_or_unsigned; simpl; subst x; rewrite ?(Int.signed_repr i) by insist_rep_omega; rewrite ?(Int.unsigned_repr i) by insist_rep_omega; subst y | |- int_signed_or_unsigned ?t _ = _ => try change (int_signed_or_unsigned t) with Int.signed; try change (int_signed_or_unsigned t) with Int.unsigned | |- _ => idtac end; reflexivity | ] | apply msubst_efield_denote_cons_struct | apply msubst_efield_denote_cons_union | apply msubst_efield_denote_nil ] ].",
            "VernacExtend",
            "3e543d629fdeec262cec18e90846cdf7fb155946"
        ],
        [
            "Inductive field_address_gen {cs: compspecs}: type * list gfield * val -> type * list gfield * val -> Prop := | field_address_gen_nil: forall t1 t2 gfs p tgp, nested_field_type t2 gfs = t1 -> field_address_gen (t2, gfs, p) tgp -> field_address_gen (t1, nil, (field_address t2 gfs p)) tgp | field_address_gen_app: forall t1 t2 gfs1 gfs2 p tgp, nested_field_type t2 gfs2 = t1 -> field_address_gen (t2, gfs1 ++ gfs2, p) tgp -> field_address_gen (t1, gfs1, (field_address t2 gfs2 p)) tgp | field_address_gen_assu: forall t gfs p1 p2 tgp, p1 = p2 -> field_address_gen (t, gfs, p2) tgp -> field_address_gen (t, gfs, p1) tgp | field_address_gen_refl: forall tgp, field_address_gen tgp tgp.",
            "VernacInductive",
            "a901ee7d60588826564c112aad1cda3782b23721"
        ],
        [
            "Lemma field_address_gen_fact: forall {cs: compspecs} t1 gfs1 p1 t2 gfs2 p2, field_address_gen (t1, gfs1, p1) (t2, gfs2, p2) -> field_address t1 gfs1 p1 = field_address t2 gfs2 p2 /\\ nested_field_type t1 gfs1 = nested_field_type t2 gfs2 /\\ (field_compatible t2 gfs2 p2 -> field_compatible t1 gfs1 p1).",
            "VernacStartTheoremProof",
            "99c80a18fcb51a54c800e26ef52d6119460339cb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "remember (t1, gfs1, p1) eqn:?H ; remember (t2, gfs2, p2) eqn:?H.",
            "VernacExtend",
            "fc0356b1780b31ba3aacea07d479b9bc03e20e93"
        ],
        [
            "revert t1 gfs1 p1 t2 gfs2 p2 H0 H1; induction H; intros.",
            "VernacExtend",
            "2d6eda5f785d0ddc8579059d24118f6d2f1fc458"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "specialize (IHfield_address_gen _ _ _ _ _ _ eq_refl eq_refl).",
            "VernacExtend",
            "a026f3bb9af1bd07682ef5de50605fa28cdda9b4"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
        ],
        [
            "destruct IHfield_address_gen as [? [? ?]].",
            "VernacExtend",
            "45f72edd96d9183ead7981d5127d33bfffdef8b1"
        ],
        [
            "rewrite <- field_address_app.",
            "VernacExtend",
            "3564a127deecf6dc32609fcf1fd6a07c45d89a71"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite nested_field_type_ind.",
            "VernacExtend",
            "be338b58c655cea37c684ce09d961b06f45f76ea"
        ],
        [
            "split; [| split]; auto; intros.",
            "VernacExtend",
            "76a2f88c50130f0d7a42821deb6e1f92c28358cd"
        ],
        [
            "apply field_compatible_app; auto.",
            "VernacExtend",
            "59631555268647fcd5b760ea5f776bd4c39cca62"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "specialize (IHfield_address_gen _ _ _ _ _ _ eq_refl eq_refl).",
            "VernacExtend",
            "a026f3bb9af1bd07682ef5de50605fa28cdda9b4"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
        ],
        [
            "destruct IHfield_address_gen as [? [? ?]].",
            "VernacExtend",
            "45f72edd96d9183ead7981d5127d33bfffdef8b1"
        ],
        [
            "rewrite <- field_address_app.",
            "VernacExtend",
            "3564a127deecf6dc32609fcf1fd6a07c45d89a71"
        ],
        [
            "rewrite nested_field_type_nested_field_type.",
            "VernacExtend",
            "a28e356bbc52abb775ab574add737072f1c5d4b9"
        ],
        [
            "split; [| split]; auto; intros.",
            "VernacExtend",
            "76a2f88c50130f0d7a42821deb6e1f92c28358cd"
        ],
        [
            "apply field_compatible_app; auto.",
            "VernacExtend",
            "59631555268647fcd5b760ea5f776bd4c39cca62"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac field_address_assumption := match goal with | H: ?a = field_address _ _ _ |- ?b = _ => constr_eq a b; simple eapply H end.",
            "VernacExtend",
            "140bbe0996567ce52c82b2a32bc9988c28f41903"
        ],
        [
            "Ltac solve_field_address_gen := solve [ repeat first [ simple apply field_address_gen_nil; [reflexivity |] | simple apply field_address_gen_app; [reflexivity |] | simple eapply field_address_gen_assu; [field_address_assumption |] | simple apply field_address_gen_refl ] ].",
            "VernacExtend",
            "0e601d401e2a81500d9acce03d6a2782aaef26ce"
        ],
        [
            "Inductive find_type_contradict_pred {cs: compspecs} (t: type) (p: val): mpred -> Prop := | find_type_contradict_pred_data_at: forall sh t0 v0, eqb_type t0 t = false -> find_type_contradict_pred t p (data_at sh t0 v0 p) | find_type_contradict_pred_data_at_: forall sh t0, eqb_type t0 t = false -> find_type_contradict_pred t p (data_at_ sh t0 p) | find_type_contradict_pred_field_at: forall sh t0 v0, eqb_type t0 t = false -> find_type_contradict_pred t p (field_at sh t0 nil v0 p) | find_type_contradict_pred_field_at_: forall sh t0, eqb_type t0 t = false -> find_type_contradict_pred t p (field_at_ sh t0 nil p).",
            "VernacInductive",
            "af850f12e3344d84955876f74edc9efe75650c93"
        ],
        [
            "Definition find_type_contradict_preds {cs: compspecs} (t: type) (p: val) := find_nth_preds (find_type_contradict_pred t p).",
            "VernacDefinition",
            "253fa841b4265da4e3691311cfeb25f89f4a8be4"
        ],
        [
            "Lemma SEP_type_contradict_lemma: forall {cs: compspecs} Delta e R goal Q T1 T2 GV e_root efs lr p_full_from_e p_root_from_e gfs_from_e t_root_from_e p_root_from_hint gfs_from_hint t_root_from_hint mm1 mm2, local2ptree Q = (T1, T2, nil, GV) -> compute_nested_efield e = (e_root, efs, lr) -> msubst_eval_lvalue Delta T1 T2 GV e = Some p_full_from_e -> msubst_eval_LR Delta T1 T2 GV e_root lr = Some p_root_from_e -> msubst_efield_denote Delta T1 T2 GV efs gfs_from_e -> compute_root_type (typeof e_root) lr t_root_from_e -> field_address_gen (t_root_from_e, gfs_from_e, p_root_from_e) (t_root_from_hint, gfs_from_hint, p_root_from_hint) -> find_type_contradict_preds (typeof e) p_full_from_e R mm1 -> (gfs_from_hint = nil /\\ find_type_contradict_preds t_root_from_hint p_root_from_hint R mm2 \\/ mm2 = None) -> mm1 = mm2 /\\ False -> goal.",
            "VernacStartTheoremProof",
            "c5246d8780413a79889a968c02376295ebf969a4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H8 as [? ?].",
            "VernacExtend",
            "63c9a44e6a4add258d128cf991ad041ac66d3466"
        ],
        [
            "exfalso; apply H9; auto.",
            "VernacExtend",
            "7e6d833009ed7a9db7e3e8dec91fbbb070ad5859"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac find_type_contradict_rec := first [ simple eapply find_type_contradict_pred_data_at; reflexivity | simple eapply find_type_contradict_pred_data_at_; reflexivity | simple eapply find_type_contradict_pred_field_at; reflexivity | simple eapply find_type_contradict_pred_field_at_; reflexivity].",
            "VernacExtend",
            "4e2a845a4d160fa1c1e5be28240394ae489a06dc"
        ],
        [
            "Definition unknown_type := Tvoid.",
            "VernacDefinition",
            "70564acb83d5df2b64b04d4c46ad16f0c014ebbe"
        ],
        [
            "Ltac SEP_type_contradict_msg r e := let t := constr:(typeof e) in let t := eval simpl in t in let t' := match r with data_at _ ?u _ _ => constr:(u) | data_at_ _ ?u _ => constr:(u) | field_at _ ?u _ _ _ => constr:(u) | field_at_ _ ?u _ _ => constr:(u) | _ => constr:(unknown_type) end in fail 1000 \"Cannot load/store with SEP clause\" r \"because of type mismatch Type of expression: \" t \" Type in SEP conjunct: \" t'.",
            "VernacExtend",
            "02849238e4e859077589439932b3ec7fe2ddd6b5"
        ],
        [
            "Ltac SEP_type_contradict LOCAL2PTREE Delta e R := eapply (SEP_type_contradict_lemma Delta e R); [ exact LOCAL2PTREE | reflexivity | solve_msubst_eval_lvalue | solve_msubst_eval_LR | solve_msubst_efield_denote | econstructor | solve_field_address_gen | find_nth find_type_contradict_rec | first [left; split; [reflexivity | find_nth find_type_contradict_rec] | right; reflexivity] | ]; match goal with | |- Some (_, ?r) = _ /\\ False => SEP_type_contradict_msg r e | |- _ = Some (_, ?r) /\\ False => SEP_type_contradict_msg r e | |- _ => idtac end; fail 0.",
            "VernacExtend",
            "f9fe2bde14a5abdc4a312b144b281d344c0a3f39"
        ],
        [
            "Lemma hint_msg_lemma: forall {cs: compspecs} Delta e goal Q T1 T2 GV e_root efs lr p_full_from_e p_root_from_e gfs_from_e t_root_from_e p_root_from_hint gfs_from_hint t_root_from_hint t gfs p, local2ptree Q = (T1, T2, nil, GV) -> compute_nested_efield e = (e_root, efs, lr) -> msubst_eval_lvalue Delta T1 T2 GV e = Some p_full_from_e -> msubst_eval_LR Delta T1 T2 GV e_root lr = Some p_root_from_e -> msubst_efield_denote Delta T1 T2 GV efs gfs_from_e -> compute_root_type (typeof e_root) lr t_root_from_e -> field_address_gen (t_root_from_e, gfs_from_e, p_root_from_e) (t_root_from_hint, gfs_from_hint, p_root_from_hint) -> p_full_from_e = field_address t gfs p /\\ p_root_from_hint = field_address t gfs p /\\ False -> goal.",
            "VernacStartTheoremProof",
            "143996eb21f4acb5fd96995bb304c3e7598055f3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H6 as [? [? ?]].",
            "VernacExtend",
            "de401af45baec78f7448d2270bcc1135f0d83f4e"
        ],
        [
            "exfalso; apply H8; auto.",
            "VernacExtend",
            "b06e5697cffe4ca2ea1439f1d6414f3e3f40f95f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac hint_msg_aux R1 A := lazymatch A with | data_at => idtac | field_at => idtac | data_at_ => idtac | field_at_ => idtac | memory_block => idtac | @exp _ _ _ _ => idtac \" Or, perhaps you need to do [Intros x] to introduce the EXistential\" R1 \"in your SEP clause.\" | _ _ => idtac | _ => idtac \" Or, perhaps the definition [\" A \"] needs to be unfolded so that your SEP conjuct\" R1 \"can be used effectively.\" end.",
            "VernacExtend",
            "06f98795c2e069e06614c9805747f65709e98d64"
        ],
        [
            "Ltac hint_msg_aux2 R p2 := match R with | nil => idtac | ?R1 :: ?R' => lazymatch R1 with | ?A _ _ _ _ _ _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ _ p2 => hint_msg_aux R1 A | ?A _ _ p2 => hint_msg_aux R1 A | ?A _ p2 => hint_msg_aux R1 A | ?A p2 => hint_msg_aux R1 A | context [p2] => hint_msg_aux R1 R1 | _ => idtac end; hint_msg_aux2 R' p2 end.",
            "VernacExtend",
            "ee0740c47ff643d4c7db56a4e89d453c937db21d"
        ],
        [
            "Ltac hint_msg LOCAL2PTREE Delta e := match goal with |- semax _ (|> PROPx _ (LOCALx _ (SEPx ?R))) _ _ => eapply (hint_msg_lemma Delta e); [ exact LOCAL2PTREE | reflexivity | solve_msubst_eval_lvalue | solve_msubst_eval_LR | solve_msubst_efield_denote | econstructor | solve_field_address_gen | ]; match goal with | |- ?eq1 /\\ ?eq2 /\\ False => match eq1 with ?p1 = field_address _ _ ?p => try match p1 with offset_val _ ?p2 => hint_msg_aux2 R p2 end; first [ constr_eq eq1 eq2; fail 1000 \" It is not obvious how to move forward here. One way: Find a SEP clause of the form [data_at _ _ _ \" p\"] (or field_at, data_at_, field_at_), then use assert_PROP to prove an equality of the form\" eq1 \", then try [forward] again.\" | fail 1000 \" It is not obvious how to move forward here. One way: Find a SEP clause of the form [data_at _ _ _ \" p\"] (or field_at, data_at_, field_at_), then use assert_PROP to prove an equality of the form\" eq1 \"or if this does not hold, prove an equality of the form\" eq2 \", then try [forward] again.\" ] end end end.",
            "VernacExtend",
            "714c70cc7ebb3b7cd9951a80fdc6b23da9fa6e1f"
        ],
        [
            "Section SEMAX_PTREE.",
            "VernacBeginSection",
            "9fc639619544f721e6cdead9a0af41084d34651a"
        ],
        [
            "Context {cs: compspecs}.",
            "VernacContext",
            "54247ea3591f081b4582667d94ae6f9e673bf9e3"
        ],
        [
            "Lemma semax_PTree_set: forall {Espec: OracleKind}, forall Delta id P Q R T1 T2 GV (e2: expr) t v, local2ptree Q = (T1, T2, nil, GV) -> typeof_temp Delta id = Some t -> is_neutral_cast (implicit_deref (typeof e2)) t = true -> msubst_eval_expr Delta T1 T2 GV e2 = Some v -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- (tc_expr Delta e2) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sset id e2) (normal_ret_assert (PROPx P (LOCALx (temp id v :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "cde16e9905bf7c769e9e461745674a62bf792a2e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply semax_SC_set.",
            "VernacExtend",
            "a123886a1cc2037a449b8ef0e00facdb76c32369"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "erewrite local2ptree_soundness by eassumption.",
            "VernacExtend",
            "26dd7f9466f2f0ad5f703043a5e8916dc33613ed"
        ],
        [
            "apply msubst_eval_expr_eq; auto.",
            "VernacExtend",
            "1d01cb11214ec491cad8252d4b989d878d5a734f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_load_no_hint: forall {Espec: OracleKind}, forall n Rn Delta sh id P Q R (e: expr) t T1 T2 GV e_root (efs: list efield) lr t_root_from_e gfs_from_e p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v : val) (v' : reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> compute_nested_efield e = (e_root, efs, lr) -> typeof_temp Delta id = Some t -> is_neutral_cast (typeof e) t = true -> type_is_volatile (typeof e) = false -> msubst_eval_LR Delta T1 T2 GV e_root lr = Some p_from_e -> msubst_efield_denote Delta T1 T2 GV efs gfs_from_e -> compute_root_type (typeof e_root) lr t_root_from_e -> field_address_gen (t_root_from_e, gfs_from_e, p_from_e) (t_root, gfs, p) -> find_nth_preds (fun Rn => Rn = field_at sh t_root gfs0 v' p /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v') v -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- !! (legal_nested_field (nested_field_type t_root gfs0) gfs1) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local `(tc_val (typeof e) v) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- denote_tc_assert (tc_andp (typecheck_LR Delta e_root lr) (typecheck_efield Delta efs)) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sset id e) (normal_ret_assert (PROPx P (LOCALx (temp id v :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "89ae3954ba77bace0027f117fd0ccf17fdc15908"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE COMPUTE_NESTED_EFIELD ? ? ? EVAL_ROOT EVAL_EFIELD ROOT_TYPE FIELD_ADD_GEN NTH SH JMEQ LEGAL_NESTED_FIELD TC_VAL TC.",
            "VernacExtend",
            "974d356689103ebec5680bc44bd6ed5f415d3fc1"
        ],
        [
            "pose proof is_neutral_cast_by_value _ _ H0 as BY_VALUE.",
            "VernacExtend",
            "40eabe6e9384ef0a39d64a7e1eb3da31169026f5"
        ],
        [
            "assert_PROP (exists tts, nested_efield e_root efs tts = e /\\ LR_of_type t_root_from_e = lr /\\ legal_nested_efield t_root_from_e e_root gfs_from_e tts lr = true /\\ nested_field_type t_root_from_e gfs_from_e = typeof e).",
            "VernacExtend",
            "39e21389f50c75882933af92ec44071bda4c78be"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD.",
            "VernacExtend",
            "4a5a5725e644647cbc69bfde550a465a2f6fc94e"
        ],
        [
            "eapply derives_trans; [apply EVAL_EFIELD |].",
            "VernacExtend",
            "bdd95b19249f20e879562fd1a8f63c6541ad078a"
        ],
        [
            "intro rho; simpl; unfold local, lift1; unfold_lift.",
            "VernacExtend",
            "12496311743198287d7d4209bd1d0f7dc62ed947"
        ],
        [
            "apply prop_derives; intros.",
            "VernacExtend",
            "9935f88f5870219d5d959dd1a7d2edeeae1f51f1"
        ],
        [
            "pose proof compute_nested_efield_lemma _ rho BY_VALUE.",
            "VernacExtend",
            "76043424a0ac6d3ab02c44708c4ca12651a2b92d"
        ],
        [
            "rewrite COMPUTE_NESTED_EFIELD in H3.",
            "VernacExtend",
            "e6456898d54def4da25aa904d9896904165d81e4"
        ],
        [
            "destruct (H3 t_root_from_e gfs_from_e) as [tts ?].",
            "VernacExtend",
            "ece239451584df28a6908a56a2eeb16ca592639e"
        ],
        [
            "exists tts.",
            "VernacExtend",
            "1957a7b7eab2f19ed9cae1a42962c2bdc27b802a"
        ],
        [
            "apply H4; auto.",
            "VernacExtend",
            "07cffeff5484e6b62a3843cb783b50b5dcc09af8"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [? GFS]]; subst Rn.",
            "VernacExtend",
            "6ae65b92d874718a4a4d4411151dacb5e2ab1e62"
        ],
        [
            "destruct H2 as [tts [NESTED_EFIELD [LR [LEGAL_NESTED_EFIELD TYPEOF]]]].",
            "VernacExtend",
            "0fb29bf75011d85ac45dd475849c8d3508ba5a2c"
        ],
        [
            "rewrite <- TYPEOF in BY_VALUE.",
            "VernacExtend",
            "96972bdeb88334687963bcd949c6a2e2169d5d2f"
        ],
        [
            "assert_PROP (field_compatible t_root gfs0 p).",
            "VernacExtend",
            "3b646a83126833fd2d17c39a39fbf620e1262010"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite <- (corable_sepcon_TT (prop _)) by auto.",
            "VernacExtend",
            "e752af7c9a5bdc15637316704af87cf7bd323e97"
        ],
        [
            "eapply nth_error_SEP_sepcon_TT'; [| eassumption].",
            "VernacExtend",
            "bf9ed29ce7e3dcb2bbc4fb1fd07d674bc05cd7ce"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "rewrite field_at_compatible'.",
            "VernacExtend",
            "f5e2e83c81cf02214237ad1deed85022a5bc98b1"
        ],
        [
            "go_lowerx.",
            "VernacExtend",
            "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rename H2 into FIELD_COMPATIBLE.",
            "VernacExtend",
            "0013d3bf18bc51c49dcaf3560f51e5bc22be51c6"
        ],
        [
            "assert_PROP (legal_nested_field (nested_field_type t_root gfs0) gfs1); auto.",
            "VernacExtend",
            "ed8deea7a0e113ca9e50f0da4259dd6246bffed7"
        ],
        [
            "clear LEGAL_NESTED_FIELD; rename H2 into LEGAL_NESTED_FIELD.",
            "VernacExtend",
            "6f1a302f6cf7c793c8370c97ba1fad74f5ded48c"
        ],
        [
            "eapply field_compatible_app_inv' in FIELD_COMPATIBLE; [| exact LEGAL_NESTED_FIELD].",
            "VernacExtend",
            "b4123d560517debb485e39cc73044ed12395a2ee"
        ],
        [
            "rewrite <- GFS in FIELD_COMPATIBLE.",
            "VernacExtend",
            "7506fb8b8751d1adbdb88c841b18bdf730b30225"
        ],
        [
            "rewrite <- NESTED_EFIELD.",
            "VernacExtend",
            "bc09ba087a88a79673316a28b7223aafbab041cd"
        ],
        [
            "apply field_address_gen_fact in FIELD_ADD_GEN.",
            "VernacExtend",
            "b549375fd1a1e72bdbc5cb9c97a4cd9a06ad525c"
        ],
        [
            "destruct FIELD_ADD_GEN as [FIELD_ADD_EQ [TYPE_EQ FIELD_COMPATIBLE_E]].",
            "VernacExtend",
            "bb3be3c6089b7e218e19c15b9f026a37e594ebf4"
        ],
        [
            "specialize (FIELD_COMPATIBLE_E FIELD_COMPATIBLE).",
            "VernacExtend",
            "4b9eff3bb91d732c57bed636ba135d138b41fe0e"
        ],
        [
            "pose proof nested_efield_facts Delta _ _ efs _ _ _ _ FIELD_COMPATIBLE_E LR LEGAL_NESTED_EFIELD BY_VALUE as DERIVES.",
            "VernacExtend",
            "5d16877f4aed2a7365b47d7e61964447755ed947"
        ],
        [
            "rewrite denote_tc_assert_andp in TC.",
            "VernacExtend",
            "629b0423e2a93b287b0a1d2b4344939f4c6e62df"
        ],
        [
            "apply (derives_trans (local (tc_environ Delta) && PROPx P (LOCALx Q (SEPx R)))) in DERIVES.",
            "VernacExtend",
            "7835d12b99b3d7ff427502bc8dd3d4cf5880229f"
        ],
        [
            "2:{",
            "VernacSubproof",
            "df86388f8203fd8f763270be53203e33d38bca86"
        ],
        [
            "rewrite (andp_comm _ (local (efield_denote _ _))), <- !andp_assoc.",
            "VernacExtend",
            "5f69793e39b2117fc444abad63258645301b5d02"
        ],
        [
            "rewrite (add_andp _ _ TC).",
            "VernacExtend",
            "67b1ad8ac767aad3f6a0f5bdbae758d82d38cc82"
        ],
        [
            "rewrite (add_andp _ _ TC_VAL).",
            "VernacExtend",
            "01d39664c8ca5e81397480803aa9c2a360a319e8"
        ],
        [
            "rewrite LR.",
            "VernacExtend",
            "0810d04c592cbba260eb933deda5fee17b51fb52"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD; auto.",
            "VernacExtend",
            "f29f2cf54096f166590b341e602b78f200124b69"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_eval_LR_eq _ P _ _ GV R) in EVAL_ROOT; auto.",
            "VernacExtend",
            "35cd7cc48e3f40d53a0fbd921511453491d5574b"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "eapply semax_SC_field_load.",
            "VernacExtend",
            "7f24fb0b73f1d148245db66e1f5786230247a10c"
        ],
        [
            "1: rewrite NESTED_EFIELD, <- TYPEOF, TYPE_EQ; reflexivity.",
            "VernacExtend",
            "adab10b8f6a061a9465d83c9d710ca639f7aa751"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: rewrite <- TYPE_EQ, TYPEOF; eassumption.",
            "VernacExtend",
            "afb08a2d107be3aaf660a3f2e08b8bc805d98b3b"
        ],
        [
            "1: rewrite <- TYPE_EQ, TYPEOF; eassumption.",
            "VernacExtend",
            "afb08a2d107be3aaf660a3f2e08b8bc805d98b3b"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- FIELD_ADD_EQ.",
            "VernacExtend",
            "9b067c44c4e47e36078c956cf226df2afcac2fe9"
        ],
        [
            "eapply derives_trans; [exact DERIVES | solve_andp].",
            "VernacExtend",
            "1bd30b2e699ab4e38306565b7c71f365859db984"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply derives_trans; [exact DERIVES | solve_andp].",
            "VernacExtend",
            "1bd30b2e699ab4e38306565b7c71f365859db984"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite <- TYPE_EQ, TYPEOF.",
            "VernacExtend",
            "bb65750d7ec0ae6f3608eff78850660b08b50468"
        ],
        [
            "rewrite (add_andp _ _ TC_VAL); solve_andp.",
            "VernacExtend",
            "8bc5dfbf649d08f97facc01240e3f0108e37451c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_load_with_hint: forall {Espec: OracleKind}, forall n Rn Delta sh id P Q R (e: expr) t T1 T2 GV p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v_val : val) (v_reptype : reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> typeof_temp Delta id = Some t -> is_neutral_cast (typeof e) t = true -> type_is_volatile (typeof e) = false -> msubst_eval_lvalue Delta T1 T2 GV e = Some p_from_e -> p_from_e = field_address t_root gfs p -> typeof e = nested_field_type t_root gfs -> find_nth_preds (fun Rn => Rn = field_at sh t_root gfs0 v_reptype p /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v_reptype) v_val -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(tc_val (typeof e) v_val)) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- tc_lvalue Delta e -> @semax cs Espec Delta (|> PROPx P (LOCALx Q (SEPx R))) (Sset id e) (normal_ret_assert (PROPx P (LOCALx (temp id v_val :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "f3bbad80f1abf8e8c702b7caf42710a476bdaea9"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE ? ? ? EVAL_L FIELD_ADD TYPE_EQ NTH SH JMEQ TC_VAL TC.",
            "VernacExtend",
            "79f9d9126f4d512ac65947bd83dd543b4889169d"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [? GFS]]; subst Rn.",
            "VernacExtend",
            "6ae65b92d874718a4a4d4411151dacb5e2ab1e62"
        ],
        [
            "pose proof andp_right _ _ _ TC TC_VAL.",
            "VernacExtend",
            "adef75318eb10e6c83e9e3cf87c2d25cb74f561e"
        ],
        [
            "eapply semax_SC_field_load.",
            "VernacExtend",
            "7f24fb0b73f1d148245db66e1f5786230247a10c"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "75699a0eb80e561e257571579567fb974e1df51b"
        ],
        [
            "rewrite <- FIELD_ADD.",
            "VernacExtend",
            "c5c10b31a989cb790e7ff0a22ec7e9569d77d54e"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eassumption.",
            "VernacExtend",
            "5df93e10691f4ee9c8ff04b7213af5cd1c374a02"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply msubst_eval_lvalue_eq; auto.",
            "VernacExtend",
            "5b3fe0aa8c3d6a5f2dc2d8cc9a2fdbed35b970ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_cast_load_no_hint: forall {Espec: OracleKind}, forall n Rn Delta sh id P Q R (e: expr) t T1 T2 GV e_root (efs: list efield) lr t_root_from_e gfs_from_e p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v : val) (v' : reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> compute_nested_efield e = (e_root, efs, lr) -> typeof_temp Delta id = Some t -> type_is_by_value (typeof e) = true -> type_is_volatile (typeof e) = false -> cast_pointer_to_bool (typeof e) t = false -> msubst_eval_LR Delta T1 T2 GV e_root lr = Some p_from_e -> msubst_efield_denote Delta T1 T2 GV efs gfs_from_e -> compute_root_type (typeof e_root) lr t_root_from_e -> field_address_gen (t_root_from_e, gfs_from_e, p_from_e) (t_root, gfs, p) -> find_nth_preds (fun Rn => Rn = field_at sh t_root gfs0 v' p /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v') v -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- !! (legal_nested_field (nested_field_type t_root gfs0) gfs1) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local `(tc_val t (eval_cast (typeof e) t v)) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- denote_tc_assert (tc_andp (typecheck_LR Delta e_root lr) (typecheck_efield Delta efs)) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sset id (Ecast e t)) (normal_ret_assert (PROPx P (LOCALx (temp id (eval_cast (typeof e) t v) :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "76be5e3eb0cdb26315abc65e24831dda4896c5a6"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE COMPUTE_NESTED_EFIELD ? BY_VALUE ? ? EVAL_ROOT EVAL_EFIELD ROOT_TYPE FIELD_ADD_GEN NTH SH JMEQ LEGAL_NESTED_FIELD TC_VAL TC.",
            "VernacExtend",
            "4783ae77bfb8dd3b811b10d67992d3c5e769fa5e"
        ],
        [
            "assert_PROP (exists tts, nested_efield e_root efs tts = e /\\ LR_of_type t_root_from_e = lr /\\ legal_nested_efield t_root_from_e e_root gfs_from_e tts lr = true /\\ nested_field_type t_root_from_e gfs_from_e = typeof e).",
            "VernacExtend",
            "39e21389f50c75882933af92ec44071bda4c78be"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD.",
            "VernacExtend",
            "4a5a5725e644647cbc69bfde550a465a2f6fc94e"
        ],
        [
            "eapply derives_trans; [apply EVAL_EFIELD |].",
            "VernacExtend",
            "bdd95b19249f20e879562fd1a8f63c6541ad078a"
        ],
        [
            "intro rho; simpl; unfold local, lift1; unfold_lift.",
            "VernacExtend",
            "12496311743198287d7d4209bd1d0f7dc62ed947"
        ],
        [
            "apply prop_derives; intros.",
            "VernacExtend",
            "9935f88f5870219d5d959dd1a7d2edeeae1f51f1"
        ],
        [
            "pose proof compute_nested_efield_lemma _ rho BY_VALUE.",
            "VernacExtend",
            "76043424a0ac6d3ab02c44708c4ca12651a2b92d"
        ],
        [
            "rewrite COMPUTE_NESTED_EFIELD in H3.",
            "VernacExtend",
            "e6456898d54def4da25aa904d9896904165d81e4"
        ],
        [
            "destruct (H3 t_root_from_e gfs_from_e) as [tts ?].",
            "VernacExtend",
            "ece239451584df28a6908a56a2eeb16ca592639e"
        ],
        [
            "exists tts.",
            "VernacExtend",
            "1957a7b7eab2f19ed9cae1a42962c2bdc27b802a"
        ],
        [
            "apply H4; auto.",
            "VernacExtend",
            "07cffeff5484e6b62a3843cb783b50b5dcc09af8"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [? GFS]]; subst Rn.",
            "VernacExtend",
            "6ae65b92d874718a4a4d4411151dacb5e2ab1e62"
        ],
        [
            "destruct H2 as [tts [NESTED_EFIELD [LR [LEGAL_NESTED_EFIELD TYPEOF]]]].",
            "VernacExtend",
            "0fb29bf75011d85ac45dd475849c8d3508ba5a2c"
        ],
        [
            "rewrite <- TYPEOF in BY_VALUE.",
            "VernacExtend",
            "96972bdeb88334687963bcd949c6a2e2169d5d2f"
        ],
        [
            "assert_PROP (field_compatible t_root gfs0 p).",
            "VernacExtend",
            "3b646a83126833fd2d17c39a39fbf620e1262010"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite <- (corable_sepcon_TT (prop _)) by auto.",
            "VernacExtend",
            "e752af7c9a5bdc15637316704af87cf7bd323e97"
        ],
        [
            "eapply nth_error_SEP_sepcon_TT'; [| eassumption].",
            "VernacExtend",
            "bf9ed29ce7e3dcb2bbc4fb1fd07d674bc05cd7ce"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "rewrite field_at_compatible'.",
            "VernacExtend",
            "f5e2e83c81cf02214237ad1deed85022a5bc98b1"
        ],
        [
            "go_lowerx.",
            "VernacExtend",
            "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rename H2 into FIELD_COMPATIBLE.",
            "VernacExtend",
            "0013d3bf18bc51c49dcaf3560f51e5bc22be51c6"
        ],
        [
            "assert_PROP (legal_nested_field (nested_field_type t_root gfs0) gfs1); auto.",
            "VernacExtend",
            "ed8deea7a0e113ca9e50f0da4259dd6246bffed7"
        ],
        [
            "clear LEGAL_NESTED_FIELD; rename H2 into LEGAL_NESTED_FIELD.",
            "VernacExtend",
            "6f1a302f6cf7c793c8370c97ba1fad74f5ded48c"
        ],
        [
            "eapply field_compatible_app_inv' in FIELD_COMPATIBLE; [| exact LEGAL_NESTED_FIELD].",
            "VernacExtend",
            "b4123d560517debb485e39cc73044ed12395a2ee"
        ],
        [
            "rewrite <- GFS in FIELD_COMPATIBLE.",
            "VernacExtend",
            "7506fb8b8751d1adbdb88c841b18bdf730b30225"
        ],
        [
            "rewrite <- NESTED_EFIELD.",
            "VernacExtend",
            "bc09ba087a88a79673316a28b7223aafbab041cd"
        ],
        [
            "apply field_address_gen_fact in FIELD_ADD_GEN.",
            "VernacExtend",
            "b549375fd1a1e72bdbc5cb9c97a4cd9a06ad525c"
        ],
        [
            "destruct FIELD_ADD_GEN as [FIELD_ADD_EQ [TYPE_EQ FIELD_COMPATIBLE_E]].",
            "VernacExtend",
            "bb3be3c6089b7e218e19c15b9f026a37e594ebf4"
        ],
        [
            "specialize (FIELD_COMPATIBLE_E FIELD_COMPATIBLE).",
            "VernacExtend",
            "4b9eff3bb91d732c57bed636ba135d138b41fe0e"
        ],
        [
            "pose proof nested_efield_facts Delta _ _ efs _ _ _ _ FIELD_COMPATIBLE_E LR LEGAL_NESTED_EFIELD BY_VALUE as DERIVES.",
            "VernacExtend",
            "5d16877f4aed2a7365b47d7e61964447755ed947"
        ],
        [
            "rewrite denote_tc_assert_andp in TC.",
            "VernacExtend",
            "629b0423e2a93b287b0a1d2b4344939f4c6e62df"
        ],
        [
            "apply (derives_trans (local (tc_environ Delta) && PROPx P (LOCALx Q (SEPx R)))) in DERIVES.",
            "VernacExtend",
            "7835d12b99b3d7ff427502bc8dd3d4cf5880229f"
        ],
        [
            "2:{",
            "VernacSubproof",
            "df86388f8203fd8f763270be53203e33d38bca86"
        ],
        [
            "rewrite (andp_comm _ (local (efield_denote _ _))), <- !andp_assoc.",
            "VernacExtend",
            "5f69793e39b2117fc444abad63258645301b5d02"
        ],
        [
            "rewrite (add_andp _ _ TC).",
            "VernacExtend",
            "67b1ad8ac767aad3f6a0f5bdbae758d82d38cc82"
        ],
        [
            "rewrite LR.",
            "VernacExtend",
            "0810d04c592cbba260eb933deda5fee17b51fb52"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD; auto.",
            "VernacExtend",
            "f29f2cf54096f166590b341e602b78f200124b69"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_eval_LR_eq _ P _ _ GV R) in EVAL_ROOT; auto.",
            "VernacExtend",
            "35cd7cc48e3f40d53a0fbd921511453491d5574b"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rewrite NESTED_EFIELD.",
            "VernacExtend",
            "c296b24e053330642455bf73fe2e324c32a5d4f4"
        ],
        [
            "rewrite <- TYPEOF, TYPE_EQ.",
            "VernacExtend",
            "74e24a7437b0ce3f4323d70e5eadc07ae1115224"
        ],
        [
            "eapply semax_SC_field_cast_load.",
            "VernacExtend",
            "8afd96c0334919a94ae416174f7527c7873c5c90"
        ],
        [
            "1: rewrite <- TYPEOF, TYPE_EQ; reflexivity.",
            "VernacExtend",
            "035eb9d57a0e23dfebfa27b8cf9b2fd5ab66d4fe"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ, TYPEOF; eassumption.",
            "VernacExtend",
            "afb08a2d107be3aaf660a3f2e08b8bc805d98b3b"
        ],
        [
            "1: rewrite <- TYPE_EQ, TYPEOF; eassumption.",
            "VernacExtend",
            "afb08a2d107be3aaf660a3f2e08b8bc805d98b3b"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- FIELD_ADD_EQ.",
            "VernacExtend",
            "9b067c44c4e47e36078c956cf226df2afcac2fe9"
        ],
        [
            "eapply derives_trans; [exact DERIVES | rewrite NESTED_EFIELD; solve_andp].",
            "VernacExtend",
            "f5dd4c8f9430a0d65529b07e41c4d52d7fb23b8f"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply derives_trans; [exact DERIVES | rewrite NESTED_EFIELD; solve_andp].",
            "VernacExtend",
            "f5dd4c8f9430a0d65529b07e41c4d52d7fb23b8f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite <- TYPE_EQ, TYPEOF.",
            "VernacExtend",
            "bb65750d7ec0ae6f3608eff78850660b08b50468"
        ],
        [
            "rewrite (add_andp _ _ TC_VAL); solve_andp.",
            "VernacExtend",
            "8bc5dfbf649d08f97facc01240e3f0108e37451c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_cast_load_with_hint: forall {Espec: OracleKind}, forall n Rn Delta sh id P Q R (e: expr) t T1 T2 GV p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v_val : val) (v_reptype : reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> typeof_temp Delta id = Some t -> type_is_by_value (typeof e) = true -> type_is_volatile (typeof e) = false -> cast_pointer_to_bool (typeof e) t = false -> msubst_eval_lvalue Delta T1 T2 GV e = Some p_from_e -> p_from_e = field_address t_root gfs p -> typeof e = nested_field_type t_root gfs -> find_nth_preds (fun Rn => Rn = field_at sh t_root gfs0 v_reptype p /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> readable_share sh -> JMeq (proj_reptype (nested_field_type t_root gfs0) gfs1 v_reptype) v_val -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- local (`(tc_val t (eval_cast (typeof e) t v_val))) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- tc_lvalue Delta e -> @semax cs Espec Delta (|> PROPx P (LOCALx Q (SEPx R))) (Sset id (Ecast e t)) (normal_ret_assert (PROPx P (LOCALx (temp id (eval_cast (typeof e) t v_val) :: remove_localdef_temp id Q) (SEPx R)))).",
            "VernacStartTheoremProof",
            "13532f03b3eae0a36749733967e8c9203820fa5c"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE ? ? ? ? EVAL_L FIELD_ADD TYPE_EQ NTH SH JMEQ TC_VAL TC.",
            "VernacExtend",
            "3e5b9a3647a3b3a236343192b42c0d029aaf0f55"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [? GFS]]; subst Rn.",
            "VernacExtend",
            "6ae65b92d874718a4a4d4411151dacb5e2ab1e62"
        ],
        [
            "pose proof andp_right _ _ _ TC TC_VAL.",
            "VernacExtend",
            "adef75318eb10e6c83e9e3cf87c2d25cb74f561e"
        ],
        [
            "rewrite TYPE_EQ.",
            "VernacExtend",
            "0d2595759ce66bc22e6eafe84ca0e496f3167104"
        ],
        [
            "eapply semax_SC_field_cast_load.",
            "VernacExtend",
            "8afd96c0334919a94ae416174f7527c7873c5c90"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "2: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "75699a0eb80e561e257571579567fb974e1df51b"
        ],
        [
            "rewrite <- FIELD_ADD.",
            "VernacExtend",
            "c5c10b31a989cb790e7ff0a22ec7e9569d77d54e"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eassumption.",
            "VernacExtend",
            "5df93e10691f4ee9c8ff04b7213af5cd1c374a02"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply msubst_eval_lvalue_eq; auto.",
            "VernacExtend",
            "5b3fe0aa8c3d6a5f2dc2d8cc9a2fdbed35b970ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_store_no_hint: forall {Espec: OracleKind}, forall n Rn Delta sh P Q R (e1 e2 : expr) T1 T2 GV e_root (efs: list efield) lr t_root_from_e gfs_from_e p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v0: reptype (nested_field_type (nested_field_type t_root gfs0) gfs1)) (v0_val: val) Rv (v v_new: reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> compute_nested_efield e1 = (e_root, efs, lr) -> type_is_by_value (typeof e1) = true -> type_is_volatile (typeof e1) = false -> msubst_eval_expr Delta T1 T2 GV (Ecast e2 (typeof e1)) = Some v0_val -> msubst_eval_LR Delta T1 T2 GV e_root lr = Some p_from_e -> msubst_efield_denote Delta T1 T2 GV efs gfs_from_e -> compute_root_type (typeof e_root) lr t_root_from_e -> field_address_gen (t_root_from_e, gfs_from_e, p_from_e) (t_root, gfs, p) -> find_nth_preds (fun Rn => (Rn = Rv v /\\ (Rv = fun v => field_at sh t_root gfs0 v p)) /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> writable_share sh -> JMeq v0_val v0 -> data_equal (upd_reptype (nested_field_type t_root gfs0) gfs1 v v0) v_new -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- denote_tc_assert (tc_andp (typecheck_LR Delta e_root lr) (tc_andp (typecheck_expr Delta (Ecast e2 (typeof e1))) (typecheck_efield Delta efs))) -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- !! (legal_nested_field (nested_field_type t_root gfs0) gfs1) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sassign e1 e2) (normal_ret_assert (PROPx P (LOCALx Q (SEPx (replace_nth n R (Rv v_new)))))).",
            "VernacStartTheoremProof",
            "fa54cb04f669bd0686136b78cff44b82f42d6f04"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE COMPUTE_NESTED_EFIELD BY_VALUE ? EVAL_R EVAL_ROOT EVAL_EFIELD ROOT_TYPE FIELD_ADD_GEN NTH SH JMEQ DATA_EQ TC LEGAL_NESTED_FIELD.",
            "VernacExtend",
            "8fe2fe61122ca121a5e0955001ee4359db7fce55"
        ],
        [
            "assert_PROP (exists tts, nested_efield e_root efs tts = e1 /\\ LR_of_type t_root_from_e = lr /\\ legal_nested_efield t_root_from_e e_root gfs_from_e tts lr = true /\\ nested_field_type t_root_from_e gfs_from_e = typeof e1).",
            "VernacExtend",
            "6fb7d97a8d08539bf416619ff5e1cc078a9bc681"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD.",
            "VernacExtend",
            "4a5a5725e644647cbc69bfde550a465a2f6fc94e"
        ],
        [
            "eapply derives_trans; [apply EVAL_EFIELD |].",
            "VernacExtend",
            "bdd95b19249f20e879562fd1a8f63c6541ad078a"
        ],
        [
            "intro rho; simpl; unfold local, lift1; unfold_lift.",
            "VernacExtend",
            "12496311743198287d7d4209bd1d0f7dc62ed947"
        ],
        [
            "apply prop_derives; intros.",
            "VernacExtend",
            "9935f88f5870219d5d959dd1a7d2edeeae1f51f1"
        ],
        [
            "pose proof compute_nested_efield_lemma _ rho BY_VALUE.",
            "VernacExtend",
            "76043424a0ac6d3ab02c44708c4ca12651a2b92d"
        ],
        [
            "rewrite COMPUTE_NESTED_EFIELD in H1.",
            "VernacExtend",
            "7b076077898af4c53b2be24de51c6e4aa0087a55"
        ],
        [
            "destruct (H1 t_root_from_e gfs_from_e) as [tts ?].",
            "VernacExtend",
            "21b71561221622675ece8e7d0c1cb2297e5b16f4"
        ],
        [
            "exists tts.",
            "VernacExtend",
            "1957a7b7eab2f19ed9cae1a42962c2bdc27b802a"
        ],
        [
            "apply H2; auto.",
            "VernacExtend",
            "30acbf5144f9dcdba4f738b81d251d83daba847e"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [[? ?] GFS]]; subst Rn Rv.",
            "VernacExtend",
            "e4f3fdf6c4ada9b5610997e5686105d4c0e3f78c"
        ],
        [
            "destruct H0 as [tts [NESTED_EFIELD [LR [LEGAL_NESTED_EFIELD TYPEOF]]]].",
            "VernacExtend",
            "34eb4227b68cce3a12d326226b47424b68148069"
        ],
        [
            "rewrite <- TYPEOF in BY_VALUE.",
            "VernacExtend",
            "96972bdeb88334687963bcd949c6a2e2169d5d2f"
        ],
        [
            "assert_PROP (field_compatible t_root gfs0 p).",
            "VernacExtend",
            "3b646a83126833fd2d17c39a39fbf620e1262010"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite <- (corable_sepcon_TT (prop _)) by auto.",
            "VernacExtend",
            "e752af7c9a5bdc15637316704af87cf7bd323e97"
        ],
        [
            "eapply nth_error_SEP_sepcon_TT'; [| eassumption].",
            "VernacExtend",
            "bf9ed29ce7e3dcb2bbc4fb1fd07d674bc05cd7ce"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "rewrite field_at_compatible'.",
            "VernacExtend",
            "f5e2e83c81cf02214237ad1deed85022a5bc98b1"
        ],
        [
            "go_lowerx.",
            "VernacExtend",
            "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rename H0 into FIELD_COMPATIBLE.",
            "VernacExtend",
            "23a159fae028fe74dc2b503fa1f23fe468d97e8f"
        ],
        [
            "assert_PROP (legal_nested_field (nested_field_type t_root gfs0) gfs1); auto.",
            "VernacExtend",
            "ed8deea7a0e113ca9e50f0da4259dd6246bffed7"
        ],
        [
            "clear LEGAL_NESTED_FIELD; rename H0 into LEGAL_NESTED_FIELD.",
            "VernacExtend",
            "353a32c4f866bb0679261cb6309ae031d75e5a83"
        ],
        [
            "eapply field_compatible_app_inv' in FIELD_COMPATIBLE; [| exact LEGAL_NESTED_FIELD].",
            "VernacExtend",
            "b4123d560517debb485e39cc73044ed12395a2ee"
        ],
        [
            "rewrite <- GFS in FIELD_COMPATIBLE.",
            "VernacExtend",
            "7506fb8b8751d1adbdb88c841b18bdf730b30225"
        ],
        [
            "rewrite <- NESTED_EFIELD.",
            "VernacExtend",
            "bc09ba087a88a79673316a28b7223aafbab041cd"
        ],
        [
            "apply field_address_gen_fact in FIELD_ADD_GEN.",
            "VernacExtend",
            "b549375fd1a1e72bdbc5cb9c97a4cd9a06ad525c"
        ],
        [
            "destruct FIELD_ADD_GEN as [FIELD_ADD_EQ [TYPE_EQ FIELD_COMPATIBLE_E]].",
            "VernacExtend",
            "bb3be3c6089b7e218e19c15b9f026a37e594ebf4"
        ],
        [
            "specialize (FIELD_COMPATIBLE_E FIELD_COMPATIBLE).",
            "VernacExtend",
            "4b9eff3bb91d732c57bed636ba135d138b41fe0e"
        ],
        [
            "pose proof nested_efield_facts Delta _ _ efs _ _ _ _ FIELD_COMPATIBLE_E LR LEGAL_NESTED_EFIELD BY_VALUE as DERIVES.",
            "VernacExtend",
            "5d16877f4aed2a7365b47d7e61964447755ed947"
        ],
        [
            "rewrite !denote_tc_assert_andp in TC.",
            "VernacExtend",
            "8bf2b2352c65f80195ece7880c91cc9e1955a05c"
        ],
        [
            "apply (derives_trans (local (tc_environ Delta) && PROPx P (LOCALx Q (SEPx R)))) in DERIVES.",
            "VernacExtend",
            "7835d12b99b3d7ff427502bc8dd3d4cf5880229f"
        ],
        [
            "2:{",
            "VernacSubproof",
            "df86388f8203fd8f763270be53203e33d38bca86"
        ],
        [
            "rewrite (andp_comm _ (local (efield_denote _ _))), <- !andp_assoc.",
            "VernacExtend",
            "5f69793e39b2117fc444abad63258645301b5d02"
        ],
        [
            "rewrite (add_andp _ _ TC).",
            "VernacExtend",
            "67b1ad8ac767aad3f6a0f5bdbae758d82d38cc82"
        ],
        [
            "rewrite LR.",
            "VernacExtend",
            "0810d04c592cbba260eb933deda5fee17b51fb52"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_right; [| solve_andp].",
            "VernacExtend",
            "e55d7e104a1bf46059a16e87e9f27b77675b7c9c"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eauto.",
            "VernacExtend",
            "a07e09b4b74aca23eee70de6d8f0364dbaea228f"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_efield_denote_eq _ P _ _ GV R) in EVAL_EFIELD; auto.",
            "VernacExtend",
            "f29f2cf54096f166590b341e602b78f200124b69"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (msubst_eval_LR_eq _ P _ _ GV R) in EVAL_ROOT; auto.",
            "VernacExtend",
            "35cd7cc48e3f40d53a0fbd921511453491d5574b"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rewrite NESTED_EFIELD.",
            "VernacExtend",
            "c296b24e053330642455bf73fe2e324c32a5d4f4"
        ],
        [
            "eapply semax_SC_field_store.",
            "VernacExtend",
            "0907df067dc1d668ccf3beb96351e4834be8f64a"
        ],
        [
            "1: rewrite <- TYPEOF, TYPE_EQ; reflexivity.",
            "VernacExtend",
            "035eb9d57a0e23dfebfa27b8cf9b2fd5ab66d4fe"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ, TYPEOF; eassumption.",
            "VernacExtend",
            "afb08a2d107be3aaf660a3f2e08b8bc805d98b3b"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "3: eassumption.",
            "VernacExtend",
            "bcf6a3fd23c2113bbdd60085727322d283785a2b"
        ],
        [
            "3: eapply JMeq_sym; eassumption.",
            "VernacExtend",
            "1e94034b1224eb82965541b18848653e79cd2424"
        ],
        [
            "3: eassumption.",
            "VernacExtend",
            "bcf6a3fd23c2113bbdd60085727322d283785a2b"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- FIELD_ADD_EQ.",
            "VernacExtend",
            "9b067c44c4e47e36078c956cf226df2afcac2fe9"
        ],
        [
            "eapply derives_trans; [exact DERIVES | rewrite NESTED_EFIELD; solve_andp].",
            "VernacExtend",
            "f5dd4c8f9430a0d65529b07e41c4d52d7fb23b8f"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- TYPE_EQ, TYPEOF.",
            "VernacExtend",
            "bb65750d7ec0ae6f3608eff78850660b08b50468"
        ],
        [
            "erewrite local2ptree_soundness by eauto.",
            "VernacExtend",
            "36bafda738330516360103c10e27f829278b93a1"
        ],
        [
            "apply msubst_eval_expr_eq; eauto.",
            "VernacExtend",
            "eda090e252ecf9f564987847b5c3353d2801c991"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite (add_andp _ _ DERIVES), (add_andp _ _ TC).",
            "VernacExtend",
            "aac96a7f8eade5182324ca896d661ad5849a7577"
        ],
        [
            "rewrite <- TYPE_EQ, TYPEOF, NESTED_EFIELD.",
            "VernacExtend",
            "df1832a40a2e5edb03228e6115bbcb7cb6a2d627"
        ],
        [
            "solve_andp.",
            "VernacExtend",
            "bccf1b813da042eca96caab31f2668d6a0d95e19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma semax_PTree_field_store_with_hint: forall {Espec: OracleKind}, forall n Rn Delta sh P Q R (e1 e2 : expr) T1 T2 GV p_from_e (t_root: type) (gfs0 gfs1 gfs: list gfield) (p: val) (v0: reptype (nested_field_type (nested_field_type t_root gfs0) gfs1)) (v0_val: val) Rv (v v_new: reptype (nested_field_type t_root gfs0)), local2ptree Q = (T1, T2, nil, GV) -> type_is_by_value (typeof e1) = true -> type_is_volatile (typeof e1) = false -> msubst_eval_expr Delta T1 T2 GV (Ecast e2 (typeof e1)) = Some v0_val -> msubst_eval_lvalue Delta T1 T2 GV e1 = Some p_from_e -> p_from_e = field_address t_root gfs p -> typeof e1 = nested_field_type t_root gfs -> find_nth_preds (fun Rn => (Rn = Rv v /\\ (Rv = fun v => field_at sh t_root gfs0 v p)) /\\ gfs = gfs1 ++ gfs0) R (Some (n, Rn)) -> writable_share sh -> JMeq v0_val v0 -> data_equal (upd_reptype (nested_field_type t_root gfs0) gfs1 v v0) v_new -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- denote_tc_assert (tc_andp (typecheck_lvalue Delta e1) (typecheck_expr Delta (Ecast e2 (typeof e1)))) -> semax Delta (|>PROPx P (LOCALx Q (SEPx R))) (Sassign e1 e2) (normal_ret_assert (PROPx P (LOCALx Q (SEPx (replace_nth n R (field_at sh t_root gfs0 v_new p)))))).",
            "VernacStartTheoremProof",
            "3f2fdd48ad327d366a610635b41fcbefc6f6189b"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? LOCAL2PTREE ? ? EVAL_R EVAL_L FIELD_ADD TYPE_EQ NTH SH JMEQ DATA_EQ TC.",
            "VernacExtend",
            "a0f7e5353b02f8afb7c7eb16604c951420fbe96e"
        ],
        [
            "apply find_nth_preds_Some in NTH.",
            "VernacExtend",
            "103bcf35aa1ec5fd72bac5f1fc16e4595518ab62"
        ],
        [
            "destruct NTH as [NTH [[? ?] GFS]]; subst Rn Rv.",
            "VernacExtend",
            "e4f3fdf6c4ada9b5610997e5686105d4c0e3f78c"
        ],
        [
            "rewrite denote_tc_assert_andp in TC.",
            "VernacExtend",
            "629b0423e2a93b287b0a1d2b4344939f4c6e62df"
        ],
        [
            "eapply semax_SC_field_store.",
            "VernacExtend",
            "0907df067dc1d668ccf3beb96351e4834be8f64a"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: rewrite <- TYPE_EQ; eassumption.",
            "VernacExtend",
            "231119a24b2da4b4cea206b21e322efdc760d29c"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "1: eassumption.",
            "VernacExtend",
            "ec8e512409caf9e7c59ec9afa2738b7242487518"
        ],
        [
            "3: eassumption.",
            "VernacExtend",
            "bcf6a3fd23c2113bbdd60085727322d283785a2b"
        ],
        [
            "3: eapply JMeq_sym; eassumption.",
            "VernacExtend",
            "1e94034b1224eb82965541b18848653e79cd2424"
        ],
        [
            "3: eassumption.",
            "VernacExtend",
            "bcf6a3fd23c2113bbdd60085727322d283785a2b"
        ],
        [
            "3: rewrite <- TYPE_EQ; auto.",
            "VernacExtend",
            "986fc1e4b0997ced55aef13df4e14f9e2e36ab91"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- FIELD_ADD.",
            "VernacExtend",
            "c5c10b31a989cb790e7ff0a22ec7e9569d77d54e"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eassumption.",
            "VernacExtend",
            "5df93e10691f4ee9c8ff04b7213af5cd1c374a02"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply msubst_eval_lvalue_eq; auto.",
            "VernacExtend",
            "5b3fe0aa8c3d6a5f2dc2d8cc9a2fdbed35b970ac"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite <- TYPE_EQ.",
            "VernacExtend",
            "069f56bbaf403d4cf047ad1b28250f8b1d6ccee3"
        ],
        [
            "erewrite (local2ptree_soundness P Q R) by eassumption.",
            "VernacExtend",
            "5df93e10691f4ee9c8ff04b7213af5cd1c374a02"
        ],
        [
            "simpl app.",
            "VernacExtend",
            "5a39ba3195c1bcf4acdefe189883db7ad912f680"
        ],
        [
            "apply msubst_eval_expr_eq; auto.",
            "VernacExtend",
            "1d01cb11214ec491cad8252d4b989d878d5a734f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition proj_val t_root gfs v := repinject (nested_field_type t_root gfs) (proj_reptype t_root gfs v).",
            "VernacDefinition",
            "b667da0bc20cf11e4994679d1a7d2a44eb99d561"
        ],
        [
            "Definition upd_val t_root gfs v v0 := upd_reptype t_root gfs v (valinject (nested_field_type t_root gfs) v0).",
            "VernacDefinition",
            "309e7852879f3006de14f1eb67720c47b5e422f3"
        ],
        [
            "End SEMAX_PTREE.",
            "VernacEndSegment",
            "f135019082d36b8700cada802e77b013205b906c"
        ],
        [
            "Ltac SEP_field_at_unify' gfs := match goal with | |- field_at ?shl ?tl ?gfsl ?vl ?pl = field_at ?shr ?tr ?gfsr ?vr ?pr => unify tl tr; unify (skipn (length gfs - length gfsl) gfs) gfsl; unify gfsl gfsr; unify shl shr; unify vl vr; generalize vl; intro; rewrite <- ?field_at_offset_zero; reflexivity end.",
            "VernacExtend",
            "6637fb72566a52748c45719dee6ee88d61abb565"
        ],
        [
            "Ltac SEP_field_at_unify gfs := match goal with | |- data_at _ _ _ _ = _ => unfold data_at; SEP_field_at_unify' gfs | |- data_at_ _ _ _ = _ => unfold data_at_, field_at_; SEP_field_at_unify' gfs | |- field_at _ _ _ _ _ = _ => SEP_field_at_unify' gfs | |- field_at_ _ _ _ _ = _ => unfold field_at_; SEP_field_at_unify' gfs end.",
            "VernacExtend",
            "b4b99a138f02f0bb1ba19fc3dff9d610dfda5e65"
        ],
        [
            "Ltac SEP_field_at_strong_unify' gfs := match goal with | |- @field_at ?cs ?shl ?tl ?gfsl ?vl ?pl = ?Rv ?vr /\\ (_ = fun v => field_at ?shr ?tr ?gfsr v ?pr) => unify tl tr; unify (skipn (length gfs - length gfsl) gfs) gfsl; unify gfsl gfsr; unify shl shr; unify vl vr; split; [ match type of vl with | ?tv1 => unify Rv (fun v: tv1 => @field_at cs shl tl gfsl v pl) end; reflexivity | extensionality; rewrite <- ?field_at_offset_zero; reflexivity] | |- @data_at ?cs ?shl ?tl ?vl ?pl = ?Rv ?vr /\\ (_ = fun v => field_at ?shr ?tr ?gfsr v ?pr) => unify tl tr; unify gfsr (@nil gfield); unify shl shr; unify vl vr; split; [ match type of vl with | ?tv1 => unify Rv (fun v: tv1 => @data_at cs shl tl v pl) end; reflexivity | extensionality; unfold data_at; rewrite <- ?field_at_offset_zero; reflexivity] end.",
            "VernacExtend",
            "f428b32435b9f9d5ba5d8197491f061c16f670bd"
        ],
        [
            "Ltac SEP_field_at_strong_unify gfs := match goal with | |- data_at_ ?sh ?t ?p = _ /\\ _ => change (data_at_ sh t p) with (data_at sh t (default_val t) p); SEP_field_at_strong_unify' gfs | |- field_at_ _ _ _ _ = _ /\\ _ => unfold field_at_; SEP_field_at_strong_unify' gfs | _ => SEP_field_at_strong_unify' gfs end.",
            "VernacExtend",
            "8fb4570ac528870741881b7bd3701eb079805e69"
        ],
        [
            "Ltac eval_list l := let l' := eval hnf in l in lazymatch l' with | ?h :: ?tl => let tl' := eval_list tl in constr:(h :: tl') | (@nil ?T) => constr:(@nil T) end.",
            "VernacExtend",
            "a090dffac61b677a97cffd3746388ca938fc6848"
        ],
        [
            "Ltac prove_gfs_suffix gfs := match goal with | |- _ = ?gfs1 ++ ?gfs0 => let len := fresh \"len\" in let gfs1' := eval_list (firstn ((length gfs - length gfs0)%nat) gfs) in unify gfs1 gfs1'; reflexivity end.",
            "VernacExtend",
            "25ffe6efa493f7cb3bc5da3ae42236b4ebe2f042"
        ],
        [
            "Ltac test_field_at_in_SEP := cbv beta; match goal with | |- ?A /\\ ?gfs = _ ++ _ => split; [ match A with | _ /\\ _ => SEP_field_at_strong_unify gfs | _ => SEP_field_at_unify gfs end | prove_gfs_suffix gfs] end.",
            "VernacExtend",
            "01b8a00791409bf6a3d0d54473f09538ca6058b2"
        ],
        [
            "Ltac search_field_at_in_SEP := find_nth test_field_at_in_SEP.",
            "VernacExtend",
            "03ec428bd1afd6fbceafe347b7b39f19edd6dd8e"
        ],
        [
            "Lemma quick_derives_right: forall P Q : environ -> mpred, TT |-- Q -> P |-- Q.",
            "VernacStartTheoremProof",
            "4795a47ceb6e2d76d0d1607312a2271f177e00c6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; try eassumption; auto.",
            "VernacExtend",
            "03b61a162d84ddce01acca7ab9196676b1c10d90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac quick_typecheck3 := clear; repeat match goal with | H := _ |- _ => clear H | H : _ |- _ => clear H end; apply quick_derives_right; clear; go_lowerx; intros; clear; repeat apply andp_right; auto; fail.",
            "VernacExtend",
            "facf098a82adcecc059fd0216f32adb821420928"
        ],
        [
            "Ltac default_entailer_for_load_store := repeat match goal with H := _ |- _ => clear H end; try quick_typecheck3; unfold tc_efield, tc_LR, tc_LR_strong; simpl typeof; try solve [entailer!].",
            "VernacExtend",
            "7e6f612d6046d6cd09b9a315f82d0d25e62f8f27"
        ],
        [
            "Ltac entailer_for_load_tac := default_entailer_for_load_store.",
            "VernacExtend",
            "37682c61e82b905e42edc1e548c0b976f15f4b0b"
        ],
        [
            "Ltac entailer_for_store_tac := default_entailer_for_load_store.",
            "VernacExtend",
            "13234341664880e2e2448268297f1c7d4632c100"
        ],
        [
            "Ltac check_hint_type := reflexivity || match goal with | |- typeof ?A = ?B => let t0 := constr:(typeof A) in let t1 := eval hnf in t0 in let t := eval simpl in t1 in let t' := eval hnf in B in let t'' := eval simpl in t' in fail 1000 \"unexpected failure in load/store_tac_with_hint.\" \"The expression\" A \"has type\" t \"but is expected to have type\" t'' end.",
            "VernacExtend",
            "b8caaf225dfafc2ab46349c03f0ee83c790ee1ad"
        ],
        [
            "Ltac load_tac_with_hint LOCAL2PTREE := eapply semax_PTree_field_load_with_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | reflexivity | (solve_msubst_eval_lvalue || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | eassumption | check_hint_type | (search_field_at_in_SEP || fail 1000 \"unexpected failure in load_tac_with_hint.\" \"Required field_at does not exists in SEP\") | (auto || fail 1000 \"unexpected failure in load_tac_with_hint.\" \"Cannot prove readable_share\") | first [solve_load_rule_evaluation | fail 1000 \"unexpected failure in load_tac_with_hint.\" \"unexpected failure in generating loaded value\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in load_tac_with_hint.\" \"unexpected failure in entailer_for_load_tac\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in load_tac_with_hint.\" \"unexpected failure in entailer_for_load_tac\"] ].",
            "VernacExtend",
            "5fd68599d10bd34ef98042949e2aec45b8fc7463"
        ],
        [
            "Ltac load_tac_no_hint LOCAL2PTREE := eapply semax_PTree_field_load_no_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | reflexivity | reflexivity | (solve_msubst_eval_LR || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | (solve_msubst_efield_denote || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | econstructor | solve_field_address_gen | search_field_at_in_SEP | (auto || fail 1000 \"unexpected failure in load_tac_no_hint.\" \"Cannot prove readable_share\") | first [solve_load_rule_evaluation | fail 1000 \"unexpected failure in load_tac_no_hint.\" \"unexpected failure in generating loaded value\"] | first [solve_legal_nested_field_in_entailment | fail 1000 \"unexpected failure in load_tac_no_hint.\" \"unexpected failure in solve_legal_nested_field_in_entailment\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in load_tac_no_hint.\" \"unexpected failure in entailer_for_load_tac\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in load_tac_no_hint.\" \"unexpected failure in entailer_for_load_tac\"] ].",
            "VernacExtend",
            "f5216fce768550cca2df783bb6c6d583bbc196ec"
        ],
        [
            "Ltac load_tac := match goal with | |- semax ?Delta (|> (PROPx ?P (LOCALx ?Q (SEPx ?R)))) (Sset _ ?e) _ => let T1 := fresh \"T1\" in evar (T1: PTree.t val); let T2 := fresh \"T2\" in evar (T2: PTree.t (type * val)); let G := fresh \"GV\" in evar (G: option globals); let LOCAL2PTREE := fresh \"LOCAL2PTREE\" in assert (local2ptree Q = (T1, T2, nil, G)) as LOCAL2PTREE; [subst T1 T2 G; prove_local2ptree |]; first [ load_tac_with_hint LOCAL2PTREE | load_tac_no_hint LOCAL2PTREE | SEP_type_contradict LOCAL2PTREE Delta e R | hint_msg LOCAL2PTREE Delta e]; clear T1 T2 G LOCAL2PTREE end.",
            "VernacExtend",
            "d9acbeb771c2132ccbb611596bfa8f5225c1ede2"
        ],
        [
            "Ltac cast_load_tac_with_hint LOCAL2PTREE := eapply semax_PTree_field_cast_load_with_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | reflexivity | reflexivity | (solve_msubst_eval_lvalue || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | eassumption | check_hint_type | (search_field_at_in_SEP || fail 1000 \"unexpected failure in cast_load_tac_with_hint.\" \"Required field_at does not exists in SEP\") | (auto || fail 1000 \"unexpected failure in cast_load_tac_with_hint.\" \"Cannot prove readable_share\") | first [solve_load_rule_evaluation | fail 1000 \"unexpected failure in cast_load_tac_with_hint.\" \"unexpected failure in generating loaded value\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in cast_load_tac_with_hint.\" \"unexpected failure in entailer_for_load_tac\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in cast_load_tac_with_hint.\" \"unexpected failure in entailer_for_load_tac\"] ].",
            "VernacExtend",
            "515c7eeedd87a6664276fcfe1e40b54c0d057588"
        ],
        [
            "Ltac cast_load_tac_no_hint LOCAL2PTREE := eapply semax_PTree_field_cast_load_no_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | reflexivity | reflexivity | reflexivity | (solve_msubst_eval_LR || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | (solve_msubst_efield_denote || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | econstructor | solve_field_address_gen | search_field_at_in_SEP | (auto || fail 1000 \"unexpected failure in cast_load_tac_no_hint.\" \"Cannot prove readable_share\") | first [solve_load_rule_evaluation | fail 1000 \"unexpected failure in cast_load_tac_no_hint.\" \"unexpected failure in generating loaded value\"] | first [solve_legal_nested_field_in_entailment | fail 1000 \"unexpected failure in cast_load_tac_no_hint.\" \"unexpected failure in solve_legal_nested_field_in_entailment\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in cast_load_tac_no_hint.\" \"unexpected failure in entailer_for_load_tac\"] | first [entailer_for_load_tac | fail 1000 \"unexpected failure in cast_load_tac_no_hint.\" \"unexpected failure in entailer_for_load_tac\"] ].",
            "VernacExtend",
            "3cc101c2efec9ae944be6a74a2edca185af07104"
        ],
        [
            "Ltac cast_load_tac := match goal with | |- semax ?Delta (|> (PROPx ?P (LOCALx ?Q (SEPx ?R)))) (Sset _ (Ecast ?e _)) _ => let T1 := fresh \"T1\" in evar (T1: PTree.t val); let T2 := fresh \"T2\" in evar (T2: PTree.t (type * val)); let G := fresh \"GV\" in evar (G: option globals); let LOCAL2PTREE := fresh \"LOCAL2PTREE\" in assert (local2ptree Q = (T1, T2, nil, G)) as LOCAL2PTREE; [subst T1 T2 G; prove_local2ptree |]; first [ cast_load_tac_with_hint LOCAL2PTREE | cast_load_tac_no_hint LOCAL2PTREE | SEP_type_contradict LOCAL2PTREE Delta e R | hint_msg LOCAL2PTREE Delta e]; clear T1 T2 G LOCAL2PTREE end.",
            "VernacExtend",
            "685b5ff2e33462ba4573b0ea3d260900456b95fb"
        ],
        [
            "Lemma data_equal_congr {cs: compspecs}: forall T (v1 v2: reptype T), v1 = v2 -> data_equal v1 v2.",
            "VernacStartTheoremProof",
            "c9586074297568bb3461a5709c896e6cb849fff1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac store_tac_with_hint LOCAL2PTREE := eapply semax_PTree_field_store_with_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | (solve_msubst_eval_expr || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | (solve_msubst_eval_lvalue || fail 1 \"Cannot evaluate left-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | eassumption | check_hint_type | (search_field_at_in_SEP || fail 1000 \"unexpected failure in store_tac_with_hint.\" \"Required field_at does not exists in SEP\") | (auto || fail 1000 \"unexpected failure in store_tac_with_hint.\" \"Cannot prove writable_share\") | (apply JMeq_refl || fail 1000 \"unexpected failure in store_tac_with_hint.\" \"unexpected failure in converting stored value\") | first [apply data_equal_congr; solve_store_rule_evaluation | fail 1000 \"unexpected failure in store_tac_with_hint.\" \"unexpected failure in computing stored result\"] | first [entailer_for_store_tac | fail 1000 \"unexpected failure in store_tac_with_hint.\" \"unexpected failure in entailer_for_store_tac\"] ].",
            "VernacExtend",
            "7895f0f4aeed72493f55403b25ce08091e696e62"
        ],
        [
            "Ltac store_tac_no_hint LOCAL2PTREE := eapply semax_PTree_field_store_no_hint; [ exact LOCAL2PTREE | reflexivity | reflexivity | reflexivity | (solve_msubst_eval_expr || fail 1 \"Cannot evaluate right-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | (solve_msubst_eval_LR || fail 1 \"Cannot evaluate left-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | (solve_msubst_efield_denote || fail 1 \"Cannot evaluate left-hand-side expression (sometimes this is caused by missing LOCALs in your precondition)\") | econstructor | solve_field_address_gen | search_field_at_in_SEP | (auto || fail 1000 \"unexpected failure in store_tac_no_hint.\" \"Cannot prove writable_share\") | (apply JMeq_refl || fail 1000 \"unexpected failure in store_tac_no_hint.\" \"unexpected failure in converting stored value\") | first [apply data_equal_congr; solve_store_rule_evaluation | fail 1000 \"unexpected failure in store_tac_no_hint.\" \"unexpected failure in computing stored result\"] | first [entailer_for_store_tac | fail 1000 \"unexpected failure in store_tac_no_hint.\" \"unexpected failure in entailer_for_store_tac\"] | first [solve_legal_nested_field_in_entailment | fail 1000 \"unexpected failure in store_tac_no_hint.\" \"unexpected failure in solve_legal_nested_field_in_entailment\"] ].",
            "VernacExtend",
            "1601030632ac66c16fac6ddd84e3bbfd523b3ffe"
        ],
        [
            "Ltac check_expression_by_value e := let t := constr:(access_mode (typeof e)) in let t := eval hnf in t in match t with | By_value _ => idtac | By_reference => fail 100 \"Assignment to a variable whose type is By_reference\" | By_copy => fail 100 \"At present, Verifiable C does not support assignment to variables of struct or union type. Rewrite your program to copy field-by-field\" | By_nothing => fail 100 \"Assignment to variable of void type\" end.",
            "VernacExtend",
            "12b889b9b22ac041f4f0a1710bee0e4e1b3aaa91"
        ],
        [
            "Ltac store_tac := match goal with | |- semax ?Delta (|> (PROPx ?P (LOCALx ?Q (SEPx ?R)))) (Sassign ?e1 ?e2) _ => check_expression_by_value e1; let T1 := fresh \"T1\" in evar (T1: PTree.t val); let T2 := fresh \"T2\" in evar (T2: PTree.t (type * val)); let G := fresh \"GV\" in evar (G: option globals); let LOCAL2PTREE := fresh \"LOCAL2PTREE\" in assert (local2ptree Q = (T1, T2, nil, G)) as LOCAL2PTREE; [subst T1 T2 G; prove_local2ptree |]; first [ store_tac_with_hint LOCAL2PTREE | store_tac_no_hint LOCAL2PTREE | SEP_type_contradict LOCAL2PTREE Delta e1 R | hint_msg LOCAL2PTREE Delta e1]; clear T1 T2 LOCAL2PTREE end.",
            "VernacExtend",
            "b5ebb5cf6ceb6433cf5d66c3de20207cb1cac699"
        ]
    ],
    "proofs": [
        {
            "name": "nth_error_SEP_sepcon_TT'",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "erewrite SEP_nth_isolate by eauto.",
                        "VernacExtend",
                        "13fc6eb5c4b83683a275fca8aa72999926adab71"
                    ]
                },
                {
                    "command": [
                        "unfold PROPx, LOCALx, SEPx in *.",
                        "VernacExtend",
                        "1e0c24c75051bd828b6b408706b58277b182f42a"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1 in H |- *.",
                        "VernacExtend",
                        "d48f96314c5957dfce6355f86d41a0687472db9f"
                    ]
                },
                {
                    "command": [
                        "unfold_lift in H.",
                        "VernacExtend",
                        "0a1066f59459f9c869906996c139bea7b2fb2401"
                    ]
                },
                {
                    "command": [
                        "unfold_lift.",
                        "VernacExtend",
                        "49cc678292f20068718dd6f7d6f838fc96506b4c"
                    ]
                },
                {
                    "command": [
                        "simpl in H |- *.",
                        "VernacExtend",
                        "83f76a13eeb5aba1a599462a48e3e57b0a31d2bc"
                    ]
                },
                {
                    "command": [
                        "intros rho.",
                        "VernacExtend",
                        "a2c73e9d721b33bd236ef5f63ee08f19792dc61e"
                    ]
                },
                {
                    "command": [
                        "specialize (H rho).",
                        "VernacExtend",
                        "511c4d67847c5606d45b6a4cdbbd71f5d3fb1308"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !andp_assoc in H |- *.",
                        "VernacExtend",
                        "fae24b9ee5304e7a1d7f36aff8cc7cb21eb4d801"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !prop_and in H |- *.",
                        "VernacExtend",
                        "068e56bfdaaeb77d7232e3eb8fd932ed0224a10e"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_emp in H.",
                        "VernacExtend",
                        "ce7e562357f59e76f2322e1456f5b20f37eaa24a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- sepcon_andp_prop'.",
                        "VernacExtend",
                        "4d6c788bc274e52ac69a47b089bf429d0927aefe"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_derives.",
                        "VernacExtend",
                        "5279c4b0e23192edb2904c60cb96eb25409229af"
                    ]
                },
                {
                    "command": [
                        "exact H.",
                        "VernacExtend",
                        "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
                    ]
                },
                {
                    "command": [
                        "apply prop_right.",
                        "VernacExtend",
                        "951daa52f148695942d4aefc563d5e92d8ec02ff"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ptrofs_eqm_unsigned_spec",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "apply Ptrofs.eqm_sym, Ptrofs.eqm_unsigned_repr.",
                        "VernacExtend",
                        "9f8f43f2a7e6f627e06ec6543904a99e355ccea8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "msubst_efield_denote_eq",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "intros ? ? ? ? ? ? ? ? ? MSUBST_EFIELD_DENOTE.",
                        "VernacExtend",
                        "852a5a2f188dbde68f10a14492daa25589e415bc"
                    ]
                },
                {
                    "command": [
                        "induction MSUBST_EFIELD_DENOTE.",
                        "VernacExtend",
                        "74335e5dc91853e215e33e5368984e0f4b7bac1e"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intro rho; apply prop_right; constructor.",
                        "VernacExtend",
                        "ab0774b113dc5d881ae6a3819006b58161b4275a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst i'.",
                        "VernacExtend",
                        "c3c716b25a66ff2114fe61cbd21b8c5ce35402be"
                    ]
                },
                {
                    "command": [
                        "eapply (msubst_eval_expr_eq _ P _ _ GV R) in H0.",
                        "VernacExtend",
                        "36a0420acd7eb096957e7ff03f47b0e7295ce96a"
                    ]
                },
                {
                    "command": [
                        "rewrite (add_andp _ _ H0), (add_andp _ _ IHMSUBST_EFIELD_DENOTE).",
                        "VernacExtend",
                        "eda9f2e40f76dcb556b615b1fc1d4d81a3d3128b"
                    ]
                },
                {
                    "command": [
                        "clear H0 IHMSUBST_EFIELD_DENOTE.",
                        "VernacExtend",
                        "188f89ec45e03819e90305a4fff1df8c68732c73"
                    ]
                },
                {
                    "command": [
                        "rewrite !andp_assoc; apply andp_left2, andp_left2.",
                        "VernacExtend",
                        "b1da59a37a464a0fb8e1cc97562c1e522146d570"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intro rho; simpl.",
                        "VernacExtend",
                        "42fe42f2cda417b02e3e4186d386c09fc7f37802"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "clear - H; destruct (typeof ei); inv H; destruct i0,s; simpl; unfold int_signed_or_unsigned; simpl; try apply Int.signed_range; rep_omega.",
                        "VernacExtend",
                        "fe74217634e87c52b009d2da25bdb5157aa3e029"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold int_signed_or_unsigned.",
                        "VernacExtend",
                        "3746183483d12f316883001fdcc12bf7c95e04a3"
                    ]
                },
                {
                    "command": [
                        "destruct (typeof ei); inv H.",
                        "VernacExtend",
                        "d4138abd0dae877ee5e572303c64f2d6a3ec1e83"
                    ]
                },
                {
                    "command": [
                        "destruct i0, s; simpl; try apply Int.repr_signed; apply Int.repr_unsigned.",
                        "VernacExtend",
                        "2a7a63fadd35a614117153815797635f5350edcc"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "eapply (msubst_eval_expr_eq _ P _ _ GV R) in H0.",
                        "VernacExtend",
                        "36a0420acd7eb096957e7ff03f47b0e7295ce96a"
                    ]
                },
                {
                    "command": [
                        "rewrite (add_andp _ _ H0), (add_andp _ _ IHMSUBST_EFIELD_DENOTE).",
                        "VernacExtend",
                        "eda9f2e40f76dcb556b615b1fc1d4d81a3d3128b"
                    ]
                },
                {
                    "command": [
                        "clear H0 IHMSUBST_EFIELD_DENOTE.",
                        "VernacExtend",
                        "188f89ec45e03819e90305a4fff1df8c68732c73"
                    ]
                },
                {
                    "command": [
                        "rewrite !andp_assoc; apply andp_left2, andp_left2.",
                        "VernacExtend",
                        "b1da59a37a464a0fb8e1cc97562c1e522146d570"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intro rho; simpl.",
                        "VernacExtend",
                        "42fe42f2cda417b02e3e4186d386c09fc7f37802"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "apply efield_denote_ArraySubsc; auto.",
                        "VernacExtend",
                        "6ca7dbbddc1a42353f9d047c1041e9cf947eef5d"
                    ]
                },
                {
                    "command": [
                        "unfold Vptrofs in H2.",
                        "VernacExtend",
                        "bdb94108070a1d1b990cb167135cf38a512b0b83"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp.",
                        "VernacExtend",
                        "ddbeb08cfda8118e447ce468b630e255ec886676"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "apply array_subsc_denote_intro_long.",
                        "VernacExtend",
                        "1178c85d2fa45db9d7f60483083e3651c8c49488"
                    ]
                },
                {
                    "command": [
                        "apply Ptrofs_eqm_unsigned_spec in H1.",
                        "VernacExtend",
                        "5561f64990920359560c844fb7daa7bf6f11c4fc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; symmetry.",
                        "VernacExtend",
                        "83918537d081018c0bd3f3f97d1bebc346193945"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "clear - H1 Hp.",
                        "VernacExtend",
                        "03a0712234d0b99cbeb7922035c9f547d3955dac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ptrofs.eqm64 in H1 by auto.",
                        "VernacExtend",
                        "0a43926cc2b74b2a4a00ca66014af87516693ff6"
                    ]
                },
                {
                    "command": [
                        "apply Int64.eqm_samerepr; auto.",
                        "VernacExtend",
                        "018625e24fdb5bb69b533edc52583d50035a1686"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "apply array_subsc_denote_intro_int.",
                        "VernacExtend",
                        "261e17a98fdf22f048fb767ccfd0f753776b5a8c"
                    ]
                },
                {
                    "command": [
                        "apply Ptrofs_eqm_unsigned_spec in H1.",
                        "VernacExtend",
                        "5561f64990920359560c844fb7daa7bf6f11c4fc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; symmetry.",
                        "VernacExtend",
                        "83918537d081018c0bd3f3f97d1bebc346193945"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "clear - H1 Hp.",
                        "VernacExtend",
                        "03a0712234d0b99cbeb7922035c9f547d3955dac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ptrofs.eqm32 in H1 by auto.",
                        "VernacExtend",
                        "b2b962b44e5967012170e7d9f84670085466ec0f"
                    ]
                },
                {
                    "command": [
                        "unfold Ptrofs.to_int.",
                        "VernacExtend",
                        "a53cc3d989c3e6441381a17ef84900a58c6022f9"
                    ]
                },
                {
                    "command": [
                        "apply Int.eqm_samerepr; auto.",
                        "VernacExtend",
                        "458bdc1b368cc22910d4d62fbb81670bdc001ba1"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [eassumption |].",
                        "VernacExtend",
                        "ff79dab16b33082cbece3d77b47dfd9111c18857"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intro rho; simpl.",
                        "VernacExtend",
                        "42fe42f2cda417b02e3e4186d386c09fc7f37802"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [eassumption |].",
                        "VernacExtend",
                        "ff79dab16b33082cbece3d77b47dfd9111c18857"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intro rho; simpl.",
                        "VernacExtend",
                        "42fe42f2cda417b02e3e4186d386c09fc7f37802"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "field_address_gen_fact",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "remember (t1, gfs1, p1) eqn:?H ; remember (t2, gfs2, p2) eqn:?H.",
                        "VernacExtend",
                        "fc0356b1780b31ba3aacea07d479b9bc03e20e93"
                    ]
                },
                {
                    "command": [
                        "revert t1 gfs1 p1 t2 gfs2 p2 H0 H1; induction H; intros.",
                        "VernacExtend",
                        "2d6eda5f785d0ddc8579059d24118f6d2f1fc458"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "specialize (IHfield_address_gen _ _ _ _ _ _ eq_refl eq_refl).",
                        "VernacExtend",
                        "a026f3bb9af1bd07682ef5de50605fa28cdda9b4"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
                    ]
                },
                {
                    "command": [
                        "destruct IHfield_address_gen as [? [? ?]].",
                        "VernacExtend",
                        "45f72edd96d9183ead7981d5127d33bfffdef8b1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- field_address_app.",
                        "VernacExtend",
                        "3564a127deecf6dc32609fcf1fd6a07c45d89a71"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_field_type_ind.",
                        "VernacExtend",
                        "be338b58c655cea37c684ce09d961b06f45f76ea"
                    ]
                },
                {
                    "command": [
                        "split; [| split]; auto; intros.",
                        "VernacExtend",
                        "76a2f88c50130f0d7a42821deb6e1f92c28358cd"
                    ]
                },
                {
                    "command": [
                        "apply field_compatible_app; auto.",
                        "VernacExtend",
                        "59631555268647fcd5b760ea5f776bd4c39cca62"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "specialize (IHfield_address_gen _ _ _ _ _ _ eq_refl eq_refl).",
                        "VernacExtend",
                        "a026f3bb9af1bd07682ef5de50605fa28cdda9b4"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
                    ]
                },
                {
                    "command": [
                        "destruct IHfield_address_gen as [? [? ?]].",
                        "VernacExtend",
                        "45f72edd96d9183ead7981d5127d33bfffdef8b1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- field_address_app.",
                        "VernacExtend",
                        "3564a127deecf6dc32609fcf1fd6a07c45d89a71"
                    ]
                },
                {
                    "command": [
                        "rewrite nested_field_type_nested_field_type.",
                        "VernacExtend",
                        "a28e356bbc52abb775ab574add737072f1c5d4b9"
                    ]
                },
                {
                    "command": [
                        "split; [| split]; auto; intros.",
                        "VernacExtend",
                        "76a2f88c50130f0d7a42821deb6e1f92c28358cd"
                    ]
                },
                {
                    "command": [
                        "apply field_compatible_app; auto.",
                        "VernacExtend",
                        "59631555268647fcd5b760ea5f776bd4c39cca62"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SEP_type_contradict_lemma",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H8 as [? ?].",
                        "VernacExtend",
                        "63c9a44e6a4add258d128cf991ad041ac66d3466"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply H9; auto.",
                        "VernacExtend",
                        "7e6d833009ed7a9db7e3e8dec91fbbb070ad5859"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hint_msg_lemma",
            "line_nb": 288,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H6 as [? [? ?]].",
                        "VernacExtend",
                        "de401af45baec78f7448d2270bcc1135f0d83f4e"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply H8; auto.",
                        "VernacExtend",
                        "b06e5697cffe4ca2ea1439f1d6414f3e3f40f95f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quick_derives_right",
            "line_nb": 631,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; try eassumption; auto.",
                        "VernacExtend",
                        "03b61a162d84ddce01acca7ab9196676b1c10d90"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "data_equal_congr",
            "line_nb": 646,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}