{
    "filename": "floyd/client_lemmas.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Export VST.floyd.canon.",
            "VernacRequire",
            "27d7273a20e8f8dd7068bcaeb0f619bbd9d077ce"
        ],
        [
            "Local Open Scope logic.",
            "VernacOpenCloseScope",
            "5937723d189e5aa98ad78e1018bed51ea2c1b0cd"
        ],
        [
            "Lemma SEP_entail: forall R' Delta P Q R, fold_right_sepcon R |-- fold_right_sepcon R' -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- PROPx P (LOCALx Q (SEPx R')).",
            "VernacStartTheoremProof",
            "c6db4e04aef775611583a85ab3210e08fc11225d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_left2.",
            "VernacExtend",
            "3da478e31ab10133b2816f729b2ec71358922e85"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "intro rho.",
            "VernacExtend",
            "340a6646b01296f706bfd718a4f2fa78cb01cc3b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac refold_right_sepcon R := match R with | @sepcon mpred _ _ ?R1 ?R' => let S := refold_right_sepcon R' in constr: (R1 :: S ) | _ => constr:(R :: nil) end.",
            "VernacExtend",
            "c03ae3b7e1e7a44704bf962fef83632e59b3f3f7"
        ],
        [
            "Lemma SEP_entail': forall R' Delta P Q R, ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- ` (fold_right_sepcon R') -> ENTAIL Delta, PROPx P (LOCALx Q (SEPx R)) |-- PROPx P (LOCALx Q (SEPx R')).",
            "VernacStartTheoremProof",
            "9dd6f14af417a105d6f154fb34504488a7165756"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "apply andp_left2; apply andp_left1; auto.",
            "VernacExtend",
            "72350d488d3ae4acb1e691fc4dfad896db03ed15"
        ],
        [
            "apply andp_right.",
            "VernacExtend",
            "614688b80ee6a44f752e79383d4234d6d5dfcee8"
        ],
        [
            "do 2 apply andp_left2; apply andp_left1; auto.",
            "VernacExtend",
            "976c1a4542f7b8557f78cefd72ae0d84be878a1f"
        ],
        [
            "eapply derives_trans; [ apply H|].",
            "VernacExtend",
            "3347c43ca1169b3753f425fe9168d7ada84b8462"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments sem_cmp c !t1 !t2 / v1 v2.",
            "VernacArguments",
            "b22f7d78e74ae3347926ec562a94f6f115fdd4a8"
        ],
        [
            "Hint Resolve (@LiftClassicalSep environ) : typeclass_instances.",
            "VernacHints",
            "b41b3f75f790df274bcce3fd8049bc38c9be2562"
        ],
        [
            "Definition func_ptr' f v := func_ptr f v && emp.",
            "VernacDefinition",
            "b5822713c64e13adc21ca5072328b60bb90e19a2"
        ],
        [
            "Hint Resolve func_ptr_isptr: saturate_local.",
            "VernacHints",
            "d5417318b454efb6fba95237dfdb4cc985f9308c"
        ],
        [
            "Lemma func_ptr'_isptr: forall f v, func_ptr' f v |-- !! isptr v.",
            "VernacStartTheoremProof",
            "5835edd9c48c40134c1901c1f7dd8803470b0093"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold func_ptr'.",
            "VernacExtend",
            "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "apply func_ptr_isptr.",
            "VernacExtend",
            "dcd024b36b90e44831836ec061fa1531b685a11d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve func_ptr'_isptr: saturate_local.",
            "VernacHints",
            "8a632d0863f984f2b8be8702b88b169977c51807"
        ],
        [
            "Lemma split_func_ptr': forall fs p, func_ptr' fs p = func_ptr' fs p * func_ptr' fs p.",
            "VernacStartTheoremProof",
            "380dee4a74447d960d68b1a124199fc93f5e33ce"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold func_ptr'.",
            "VernacExtend",
            "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
        ],
        [
            "pose proof (corable_func_ptr fs p).",
            "VernacExtend",
            "ba41baf17f110667b97a2d647f81cf5142b903be"
        ],
        [
            "rewrite corable_andp_sepcon1 by auto.",
            "VernacExtend",
            "d384eff4333b5ab486871706d9c11844def48c52"
        ],
        [
            "rewrite emp_sepcon.",
            "VernacExtend",
            "df65e2010e4babcc45591f5b17e65df5cd76a9f9"
        ],
        [
            "rewrite <- andp_assoc.",
            "VernacExtend",
            "af620aa2f90527d6460b0d98a5bf2930b4fc0390"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "apply andp_left2; auto.",
            "VernacExtend",
            "624d28bb04e617622cc0cb522526420dfef62500"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma approx_func_ptr': forall (A: Type) fsig0 cc (P Q: A -> environ -> mpred) (v: val) (n: nat), compcert_rmaps.RML.R.approx n (func_ptr' (NDmk_funspec fsig0 cc A P Q) v) = compcert_rmaps.RML.R.approx n (func_ptr' (NDmk_funspec fsig0 cc A (fun a rho => compcert_rmaps.RML.R.approx n (P a rho)) (fun a rho => compcert_rmaps.RML.R.approx n (Q a rho))) v).",
            "VernacStartTheoremProof",
            "4ed56aa48036c40fcd880b71c99081d0c1301e2f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold func_ptr'.",
            "VernacExtend",
            "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
        ],
        [
            "rewrite !approx_andp; f_equal.",
            "VernacExtend",
            "9e3ac09d2cf2258cd359de278d63aff8366f7219"
        ],
        [
            "apply (approx_func_ptr A fsig0 cc P Q).",
            "VernacExtend",
            "66edb6b021127a00e25a35b5c56954fd20ede7f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0_unfold: forall {A} (f: A) rho, lift0 f rho = f.",
            "VernacStartTheoremProof",
            "e2499a492fe8073080ad64aaeae1efe86107ccd5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0_unfoldC: forall {A} (f: A) (rho: environ), `f rho = f.",
            "VernacStartTheoremProof",
            "4681751ea8dafa17f961e2e1bbd69e0d45b89366"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift1_unfold: forall {A1 B} (f: A1 -> B) a1 rho, lift1 f a1 rho = f (a1 rho).",
            "VernacStartTheoremProof",
            "a4acf6712f0ce9302cad5ccdcb196cab9907293b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift1_unfoldC: forall {A1 B} (f: A1 -> B) a1 (rho: environ), `f a1 rho = f (a1 rho).",
            "VernacStartTheoremProof",
            "6ab21f344bb52345325ba23908ffd98835eb0dda"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift2_unfold: forall {A1 A2 B} (f: A1 -> A2 -> B) a1 a2 (rho: environ), lift2 f a1 a2 rho = f (a1 rho) (a2 rho).",
            "VernacStartTheoremProof",
            "65693e3e398f517282f27627a23d8c64b3fddd95"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift2_unfoldC: forall {A1 A2 B} (f: A1 -> A2 -> B) a1 a2 (rho: environ), `f a1 a2 rho = f (a1 rho) (a2 rho).",
            "VernacStartTheoremProof",
            "f8b05386caf7b9e6684975b0f0b6d720af276cfd"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift3_unfold: forall {A1 A2 A3 B} (f: A1 -> A2 -> A3 -> B) a1 a2 a3 (rho: environ), lift3 f a1 a2 a3 rho = f (a1 rho) (a2 rho) (a3 rho).",
            "VernacStartTheoremProof",
            "f116da5d2059dac591c18e3a275c5bc67f681c3a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift3_unfoldC: forall {A1 A2 A3 B} (f: A1 -> A2 -> A3 -> B) a1 a2 a3 (rho: environ), `f a1 a2 a3 rho = f (a1 rho) (a2 rho) (a3 rho).",
            "VernacStartTheoremProof",
            "700008919354df8824307c3eec056a10756729f2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift4_unfold: forall {A1 A2 A3 A4 B} (f: A1 -> A2 -> A3 -> A4 -> B) a1 a2 a3 a4 (rho: environ), lift4 f a1 a2 a3 a4 rho = f (a1 rho) (a2 rho) (a3 rho) (a4 rho).",
            "VernacStartTheoremProof",
            "7aa48ea47a7f05c94276171207085d51083a9c9a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift4_unfoldC: forall {A1 A2 A3 A4 B} (f: A1 -> A2 -> A3 -> A4 -> B) a1 a2 a3 a4 (rho: environ), `f a1 a2 a3 a4 rho = f (a1 rho) (a2 rho) (a3 rho) (a4 rho).",
            "VernacStartTheoremProof",
            "39983a807e5efa7a79caa323425da33a5e3a6d29"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @lift0_unfold @lift1_unfold @lift2_unfold @lift3_unfold @lift4_unfold : norm2.",
            "VernacExtend",
            "a7e178b0dd82065bfb80dae153a6a4f94800a574"
        ],
        [
            "Hint Rewrite @lift0_unfoldC @lift1_unfoldC @lift2_unfoldC @lift3_unfoldC @lift4_unfoldC : norm2.",
            "VernacExtend",
            "c1697a9fa9985772b45f9ddb1a9133d8dc19049a"
        ],
        [
            "Lemma subst_lift0: forall {A} id v (f: A), subst id v (lift0 f) = lift0 f.",
            "VernacStartTheoremProof",
            "307da3d745970a4887eae43a77be3919ac388e7c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift0': forall {A} id v (f: A), subst id v (fun _ => f) = (fun _ => f).",
            "VernacStartTheoremProof",
            "f1c6e4fbf7232f6049b1f631710b32d8e9837a3c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift0' : subst.",
            "VernacExtend",
            "bbe1a032bb9bd43b0da01fc77b3e05de6e8d84f3"
        ],
        [
            "Lemma subst_lift0C: forall {B} id (v: environ -> val) (f: B) , subst id v (`f) = `f.",
            "VernacStartTheoremProof",
            "10d272103ca273f68ff390a8c5cd8a340b67c841"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift0 @subst_lift0C : subst.",
            "VernacExtend",
            "65e5d833c740dad42192ba86e83cd4a0bff415e2"
        ],
        [
            "Lemma subst_lift1: forall {A1 B} id v (f: A1 -> B) a, subst id v (lift1 f a) = lift1 f (subst id v a).",
            "VernacStartTheoremProof",
            "8699e77afd479c65f0743487da14a27cb740431e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift1': forall {A1 B} id v (f: A1 -> B) a, subst id v (fun rho => f (a rho)) = fun rho => f (subst id v a rho).",
            "VernacStartTheoremProof",
            "62ea97faa58d57c17bfc739787e92d457dc5cbd8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift1C: forall {A1 B} id (v: environ -> val) (f: A1 -> B) (a: environ -> A1), subst id v (`f a) = `f (subst id v a).",
            "VernacStartTheoremProof",
            "b395aef9ac3f411bed6799665f0506338cdf15f0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift1 @subst_lift1C : subst.",
            "VernacExtend",
            "8fc0307c2d44412c2c204dc66a512275ce69dc84"
        ],
        [
            "Lemma subst_lift2: forall {A1 A2 B} id v (f: A1 -> A2 -> B) a b, subst id v (lift2 f a b) = lift2 f (subst id v a) (subst id v b).",
            "VernacStartTheoremProof",
            "2f00661dde42ea0a316e1132a639f175262430ce"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift2': forall {A1 A2 B} id v (f: A1 -> A2 -> B) a b, subst id v (fun rho => f (a rho) (b rho)) = fun rho => f (subst id v a rho) (subst id v b rho).",
            "VernacStartTheoremProof",
            "40b7f0452cd38555a84db6713b8adf8e3164ec69"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift2C: forall {A1 A2 B} id (v: environ -> val) (f: A1 -> A2 -> B) (a: environ -> A1) (b: environ -> A2), subst id v (`f a b) = `f (subst id v a) (subst id v b).",
            "VernacStartTheoremProof",
            "f1f541f9b345686cc9925db762e7322cf5d1f4a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift2 @subst_lift2C : subst.",
            "VernacExtend",
            "3d352dec3604a21b5b7b4eed246788d811a44d1e"
        ],
        [
            "Lemma subst_lift3: forall {A1 A2 A3 B} id v (f: A1 -> A2 -> A3 -> B) a1 a2 a3, subst id v (lift3 f a1 a2 a3) = lift3 f (subst id v a1) (subst id v a2) (subst id v a3).",
            "VernacStartTheoremProof",
            "d27246eeaa794802b56d2d2733f6d2e8ccb90494"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift3': forall {A1 A2 A3 B} id v (f: A1 -> A2 -> A3 -> B) a1 a2 a3, subst id v (fun rho => f (a1 rho) (a2 rho) (a3 rho)) = fun rho => f (subst id v a1 rho) (subst id v a2 rho) (subst id v a3 rho).",
            "VernacStartTheoremProof",
            "11005aee45d6664f0046e85c05a1efcdc9cf8ae1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift3C: forall {A1 A2 A3 B} id (v: environ -> val) (f: A1 -> A2 -> A3 -> B) (a1: environ -> A1) (a2: environ -> A2) (a3: environ -> A3), subst id v (`f a1 a2 a3) = `f (subst id v a1) (subst id v a2) (subst id v a3).",
            "VernacStartTheoremProof",
            "685a8f6be4c783e5ac6cdecc852d7a44c1ba59fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift3 @subst_lift3C : subst.",
            "VernacExtend",
            "82dd3cafad9e72cebcb0511f1dba070c163104b0"
        ],
        [
            "Lemma subst_lift4: forall {A1 A2 A3 A4 B} id v (f: A1 -> A2 -> A3 -> A4 -> B) a1 a2 a3 a4, subst id v (lift4 f a1 a2 a3 a4) = lift4 f (subst id v a1) (subst id v a2) (subst id v a3) (subst id v a4).",
            "VernacStartTheoremProof",
            "e9134c8ae4b22c9e0f43a6a5546a1ef19eaa0fd4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift4': forall {A1 A2 A3 A4 B} id v (f: A1 -> A2 -> A3 -> A4 -> B) a1 a2 a3 a4, subst id v (fun rho => f (a1 rho) (a2 rho) (a3 rho) (a4 rho)) = fun rho => f (subst id v a1 rho) (subst id v a2 rho) (subst id v a3 rho) (subst id v a4 rho).",
            "VernacStartTheoremProof",
            "e50d3d65b5204aee3ad8dfc7cca01cd201a87b2b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lift4C: forall {A1 A2 A3 A4 B} id (v: environ -> val) (f: A1 -> A2 -> A3 -> A4 -> B) (a1: environ -> A1) (a2: environ -> A2) (a3: environ -> A3) (a4: environ -> A4), subst id v (`f a1 a2 a3 a4) = `f (subst id v a1) (subst id v a2) (subst id v a3) (subst id v a4).",
            "VernacStartTheoremProof",
            "fae6067a992b57bff0c918af88e31dd6d95e8f72"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_lift4 @subst_lift4C : subst.",
            "VernacExtend",
            "75ccc1daa2a92f5cd13bfcd1f8718190eba6a164"
        ],
        [
            "Lemma bool_val_int_eq_e: forall i j m, Cop.bool_val (Val.of_bool (Int.eq i j)) type_bool m = Some true -> i=j.",
            "VernacStartTheoremProof",
            "28ca2a6fd06bd3c53edad8132aaac2e287fd55d4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Cop.bool_val in H.",
            "VernacExtend",
            "fd4d81b21bc510af5c3472cefbf2a69b296a45d7"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; revert H; case_eq (Val.of_bool (Int.eq i j)); simpl; intros; inv H0.",
            "VernacExtend",
            "aee6679bec319ca47e919e3b83ef1412b0f57f31"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "pose proof (Int.eq_spec i j).",
            "VernacExtend",
            "f7bbb03de7c4316b05019a9051af52b5cf9fea35"
        ],
        [
            "revert H H0; case_eq (Int.eq i j); intros; auto.",
            "VernacExtend",
            "326350a0578f9e89732bf7eef46431c0ea238403"
        ],
        [
            "simpl in H0; unfold Vfalse in H0.",
            "VernacExtend",
            "229f5ecfc913a859b894b11b12be8568abcf8b75"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "rewrite Int.eq_true in H2.",
            "VernacExtend",
            "65c759401ff2c44b648c7fc96a245e1d7d6cc9e4"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "6144021562e950304ba8e947fdc2423691182458"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "pose proof (Int.eq_spec i j).",
            "VernacExtend",
            "f7bbb03de7c4316b05019a9051af52b5cf9fea35"
        ],
        [
            "revert H H0; case_eq (Int.eq i j); intros; auto.",
            "VernacExtend",
            "326350a0578f9e89732bf7eef46431c0ea238403"
        ],
        [
            "simpl in H0; unfold Vfalse in H0.",
            "VernacExtend",
            "229f5ecfc913a859b894b11b12be8568abcf8b75"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "6144021562e950304ba8e947fdc2423691182458"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "unfold Val.of_bool in H.",
            "VernacExtend",
            "02fb80e80a45cefffb473c3114d2d7456656f59e"
        ],
        [
            "destruct (Int.eq i j); inv H.",
            "VernacExtend",
            "a3978e011242e15e209d11fc8d465e81f8364658"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_val_notbool_ptr: forall v t m, match t with Tpointer _ _ => True | _ => False end -> (Cop.bool_val (force_val (Cop.sem_notbool v t m)) type_bool m = Some true) = (v = nullval).",
            "VernacStartTheoremProof",
            "fe21d00bc54f03518b23cfb916d4f64214d41885"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t; try contradiction.",
            "VernacExtend",
            "37a4c4441b6bd8b57ed0e2c36325477022fca69e"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "unfold Cop.sem_notbool, Cop.bool_val, Val.of_bool, Cop.classify_bool, nullval.",
            "VernacExtend",
            "1e7e36898801b304587dc96f5b2cbbbf119c7257"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; simpl; apply prop_ext; split; intros.",
            "VernacExtend",
            "503db00434817eb1026a3bbc33c475e62f6380e9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct v; simpl in H; try solve [inv H].",
            "VernacExtend",
            "2bc7272df7292ee123c4fbec6a9349801952d349"
        ],
        [
            "destruct (Int64.eq i Int64.zero) eqn:?; inv H.",
            "VernacExtend",
            "9926c5d0737646d11b40cce4940809583b077139"
        ],
        [
            "apply expr_lemmas.int64_eq_e in Heqb.",
            "VernacExtend",
            "f6259dce2ad2ab5f5dba12856011e666ed88be1a"
        ],
        [
            "subst; reflexivity.",
            "VernacExtend",
            "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
        ],
        [
            "destruct (Memory.Mem.weak_valid_pointer m b (Ptrofs.unsigned i)) eqn:?; simpl in H; inv H.",
            "VernacExtend",
            "29da77b5fafcb33383066048354c0f0b8adebf1b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "subst v; simpl.",
            "VernacExtend",
            "3c65c95e4452afff6ce94fbe487fd75ff67ab043"
        ],
        [
            "rewrite Int64.eq_true.",
            "VernacExtend",
            "8cead271a0856a262b888c89c5d66dc76f21587b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct v; simpl in H; try solve [inv H].",
            "VernacExtend",
            "2bc7272df7292ee123c4fbec6a9349801952d349"
        ],
        [
            "destruct (Int.eq i Int.zero) eqn:?; inv H.",
            "VernacExtend",
            "2bff880c571abe4f1b1810c49bf591daf63d6905"
        ],
        [
            "apply int_eq_e in Heqb.",
            "VernacExtend",
            "9c36344c5974bf7d74aebfc0daf3595126269075"
        ],
        [
            "subst; reflexivity.",
            "VernacExtend",
            "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
        ],
        [
            "destruct (Memory.Mem.weak_valid_pointer m b (Ptrofs.unsigned i)) eqn:?; simpl in H; inv H.",
            "VernacExtend",
            "29da77b5fafcb33383066048354c0f0b8adebf1b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "subst v; simpl.",
            "VernacExtend",
            "3c65c95e4452afff6ce94fbe487fd75ff67ab043"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition retval : environ -> val := eval_id ret_temp.",
            "VernacDefinition",
            "fd914c7dec73c56fd1bd0ee6ede5ba361576c594"
        ],
        [
            "Hint Rewrite eval_id_same : norm.",
            "VernacExtend",
            "7dba9bf5ec30f8bb1a8000bdc0f2020ae7b93fb4"
        ],
        [
            "Hint Rewrite eval_id_other using solve [clear; intro Hx; inversion Hx] : norm.",
            "VernacExtend",
            "d0a4a8f3a9bc32554fe80e49f33ab5ca7b9a768e"
        ],
        [
            "Lemma simpl_get_result1: forall (f: val -> Prop) i, @liftx (Tarrow environ (LiftEnviron Prop)) (@liftx (Tarrow val (LiftEnviron Prop))f retval) (get_result1 i) = `f (eval_id i).",
            "VernacStartTheoremProof",
            "726ec9304a2d32dfad06544dc170ef67d1f70eab"
        ],
        [
            "intros; extensionality rho.",
            "VernacExtend",
            "876c9ddd2c67098fb113bf57fc855e1053ecc44d"
        ],
        [
            "unfold_lift; unfold retval, get_result1.",
            "VernacExtend",
            "26cd59f0315913c7aef89e46eca82791d6f71302"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite simpl_get_result1: norm.",
            "VernacExtend",
            "d13f352632738503efaeb0a1cda8a0c418fa233d"
        ],
        [
            "Lemma retval_get_result1: forall i rho, retval (get_result1 i rho) = (eval_id i rho).",
            "VernacStartTheoremProof",
            "b3fa205a83b8612cd4c68e26fc02cfc33058cba4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold retval, get_result1.",
            "VernacExtend",
            "6b9969a2386b5e3b8fb5399241fac2ea95619f6a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite retval_get_result1 : norm.",
            "VernacExtend",
            "4a890e7f1073e9c54665e695dd1bc51fbe3d2231"
        ],
        [
            "Lemma retval_ext_rval: forall ge v, retval (make_ext_rval ge v) = force_val v.",
            "VernacStartTheoremProof",
            "792fde0bf141735f60decbc147e7b3bcfaa81864"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold retval, eval_id; simpl.",
            "VernacExtend",
            "872a57bcb35473411c326374a231cc25178e2309"
        ],
        [
            "unfold make_ext_rval; simpl.",
            "VernacExtend",
            "90714d372292fe11e7a824903f15ccd317e91217"
        ],
        [
            "destruct v; simpl; auto.",
            "VernacExtend",
            "e0983a21ce967d56e72934fc217986c85bcd413e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite retval_ext_rval : norm.",
            "VernacExtend",
            "e2126a8804296b4f78d27a72968bc36c73bafb02"
        ],
        [
            "Lemma retval_lemma1: forall rho v, retval (env_set rho ret_temp v) = v.",
            "VernacStartTheoremProof",
            "3eebdfdf9744f4dbdc7995d6d40cc6e557325d0e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold retval.",
            "VernacExtend",
            "e51e70e0075c1a8cdbd06cfbce7a392f0501f001"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite retval_lemma1 : norm.",
            "VernacExtend",
            "c37ce493c315bdbe15f07b38d2ceebc3d8492aad"
        ],
        [
            "Lemma retval_make_args: forall v rho, retval (make_args (ret_temp::nil) (v::nil) rho) = v.",
            "VernacStartTheoremProof",
            "b9523955a34853f6b02a6294c27b4e40e91d074f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold retval, eval_id; simpl.",
            "VernacExtend",
            "872a57bcb35473411c326374a231cc25178e2309"
        ],
        [
            "try rewrite Map.gss.",
            "VernacExtend",
            "5bab39c9285f260d1fadc2be7e02ed2b7bdfe281"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite retval_make_args: norm2.",
            "VernacExtend",
            "9f8160d93753eaf98c1019bf1b19505f4cd7bfa3"
        ],
        [
            "Lemma andp_makeargs: forall (a b: environ -> mpred) d e, `(a && b) (make_args d e) = `a (make_args d e) && `b (make_args d e).",
            "VernacStartTheoremProof",
            "2df08813393b92b9525c18d10bff942312817561"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite andp_makeargs: norm2.",
            "VernacExtend",
            "3c6119130407583509bac8c163715f889e1fb64d"
        ],
        [
            "Lemma local_makeargs: forall (f: val -> Prop) v, `(local (`(f) retval)) (make_args (cons ret_temp nil) (cons v nil)) = (local (`(f) `(v))).",
            "VernacStartTheoremProof",
            "b8b4e8803fa6d584a32083f13ef8b4737c876783"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite local_makeargs: norm2.",
            "VernacExtend",
            "e6783cda352d0202662bd3fd87ede9c52342bcde"
        ],
        [
            "Lemma simpl_and_get_result1: forall (Q R: environ->mpred) i, `(Q && R) (get_result1 i) = `Q (get_result1 i) && `R (get_result1 i).",
            "VernacStartTheoremProof",
            "ec2d37a07e1f72ad800bfc4ef29d430e3b8316db"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite simpl_and_get_result1 : norm2.",
            "VernacExtend",
            "fd85bc832e025a8de120aa6a8f67b9746bb7d625"
        ],
        [
            "Lemma liftx_local_retval: forall (P: val -> Prop) i, `(local (`P retval)) (get_result1 i) = local (`P (eval_id i)).",
            "VernacStartTheoremProof",
            "8d468e166954b9a723799e379780a0c8d62b8474"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite liftx_local_retval : norm2.",
            "VernacExtend",
            "9f3ea64d6ecce91cb7df109615592b9be1a6dec4"
        ],
        [
            "Hint Rewrite bool_val_notbool_ptr using apply Coq.Init.Logic.I : norm.",
            "VernacExtend",
            "ea3be84a635661ea7b46de01f93c7994c60de7e3"
        ],
        [
            "Lemma Vint_inj': forall i j, (Vint i = Vint j) = (i=j).",
            "VernacStartTheoremProof",
            "c08452518a98ca84a4aed2103a0a7d1c1d16b7fd"
        ],
        [
            "intros; apply prop_ext; split; intro; congruence.",
            "VernacExtend",
            "b7a8a01b54c71b9e6ec8a4648fb3bb89a8073b43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma overridePost_normal_right: forall P Q R, P |-- Q -> P |-- RA_normal (overridePost Q R).",
            "VernacStartTheoremProof",
            "be4d19a7fac1eaef92d26a37acdb74379eb07f0b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct R; simpl; auto.",
            "VernacExtend",
            "028f93a98cf8b18f8535efa98f89cc97004d5837"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint fold_right_and P0 (l: list Prop) : Prop := match l with | nil => P0 | b::r => b /\\ fold_right_and P0 r end.",
            "VernacFixpoint",
            "b25d7eee6adf4eb5e1a1b56c257379b7debbb206"
        ],
        [
            "Fixpoint fold_right_and_True (l: list Prop) : Prop := match l with | nil => True | b :: nil => b | b::r => b /\\ fold_right_and_True r end.",
            "VernacFixpoint",
            "5ef11f549ec0f2b83489f2008a4ceae431a38233"
        ],
        [
            "Definition fold_right_PROP_SEP (l1: list Prop) (l2: list mpred) : mpred := match l1 with | nil => fold_right_sepcon l2 | l => !! (fold_right_and_True l) && fold_right_sepcon l2 end.",
            "VernacDefinition",
            "651df556bdba2d5480ce9c585f996d822ece61a1"
        ],
        [
            "Lemma fold_right_PROP_SEP_spec: forall l1 l2, fold_right_PROP_SEP l1 l2 = !! (fold_right and True l1) && fold_right_sepcon l2.",
            "VernacStartTheoremProof",
            "30c2b5798991bc04bc42a515f8656a1395b176ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (fold_right_and_True l1 <-> fold_right and True l1).",
            "VernacExtend",
            "2f19e68da5453f3ec34e95e816acf2c6da1e34b7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct l1; [tauto |].",
            "VernacExtend",
            "46163c501783aaf8b5ed6cf240fdcf5615873360"
        ],
        [
            "revert P; induction l1; intros.",
            "VernacExtend",
            "c16fc78316f2af84c8c7108ad633562f305a6bfb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl; tauto.",
            "VernacExtend",
            "2c27d7b56602355c3ed4605e551cd6a88509ac37"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "change (P /\\ fold_right_and_True (a :: l1) <-> P /\\ fold_right and True (a :: l1)).",
            "VernacExtend",
            "7705bfa28d6fc34fc6f4a146f254adfb4cc88189"
        ],
        [
            "specialize (IHl1 a).",
            "VernacExtend",
            "70925cf81dc8707f5285d9377eb41789f5d78491"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "destruct l1.",
            "VernacExtend",
            "9d980bd7c4dba1bbd3fdfae643479b8d8129e3a6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "unfold fold_right_PROP_SEP.",
            "VernacExtend",
            "01106fc230c98f6fb21b6567ab7b3eaf59c37485"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma typed_true_isptr: forall t, match t with Tpointer _ _ => True | Tarray _ _ _ => True | Tfunction _ _ _ => True | _ => False end -> typed_true t = isptr.",
            "VernacStartTheoremProof",
            "fb0ad84eefec40198e9ae20688e8fe37d91f682c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality x; apply prop_ext.",
            "VernacExtend",
            "f373a829f7cc3540969d06dc7a13a35679457131"
        ],
        [
            "unfold typed_true, bool_val, strict_bool_val, isptr.",
            "VernacExtend",
            "7530d1cc6b9da7651c54dfe1fe5c116373be0ffb"
        ],
        [
            "destruct t; try contradiction; destruct Archi.ptr64 eqn:Hp; destruct x; intuition; try congruence; revert H0; simple_if_tac; intro H0; inv H0.",
            "VernacExtend",
            "ef6ebc766e120cb07f933cdf5722558f86f87faf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite typed_true_isptr using apply Coq.Init.Logic.I : norm.",
            "VernacExtend",
            "fe0bb9e71bae32811d04d446a41fdc007c6d32de"
        ],
        [
            "Ltac super_unfold_lift_in H := cbv delta [liftx LiftEnviron Tarrow Tend lift_S lift_T lift_prod lift_last lifted lift_uncurry_open lift_curry lift lift0 lift1 lift2 lift3] beta iota in H.",
            "VernacExtend",
            "ea8f2abf374b833403e155878fd855280d207872"
        ],
        [
            "Ltac super_unfold_lift' := cbv delta [liftx LiftEnviron Tarrow Tend lift_S lift_T lift_prod lift_last lifted lift_uncurry_open lift_curry lift lift0 lift1 lift2 lift3] beta iota.",
            "VernacExtend",
            "e996517ed9f64afc9b2e5aeb85a69ebccdd33062"
        ],
        [
            "Lemma tc_eval'_id_i: forall Delta t i rho, tc_environ Delta rho -> (temp_types Delta)!i = Some t -> tc_val' t (eval_id i rho).",
            "VernacStartTheoremProof",
            "ccc80ddfa423ed7a0385db08d10ec4816fe5369d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tc_environ in H.",
            "VernacExtend",
            "6b751d57f1f5218a4208987f38f04de4032020ec"
        ],
        [
            "destruct rho.",
            "VernacExtend",
            "6cc871126b85794491ba19e6998567dc6038cbe6"
        ],
        [
            "destruct H as [? _].",
            "VernacExtend",
            "8866aea99b3fa2b02b2674afa91c0a8f539221fc"
        ],
        [
            "destruct (H i t H0) as [v [? ?]].",
            "VernacExtend",
            "e3491dd46a49fb96f9caf269c719dda48ee18405"
        ],
        [
            "unfold eval_id.",
            "VernacExtend",
            "ea2fa7a188f5192bb4f11fe06fd53e4576051073"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_int_e: forall v i s , is_int i s v -> exists n, v = Vint n /\\ is_int i s v.",
            "VernacStartTheoremProof",
            "102cbc68f672ff142806d9a2d0d3ef566b80d571"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct i,s,v; try inv H; simpl; eauto.",
            "VernacExtend",
            "e5e0434eb174044a06e727e90c4551ee19659a82"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition name (id: ident) := True.",
            "VernacDefinition",
            "1e4dbf54bc3d77e67240813fc5f847867f6d2416"
        ],
        [
            "Tactic Notation \"name\" ident(s) constr(id) := assert (s: name id) by apply Coq.Init.Logic.I.",
            "VernacExtend",
            "052b622e919d21f154b6b068ad8fd3b88b5e8b56"
        ],
        [
            "Definition reflect_temps_f (rho: environ) (b: Prop) (i: ident) (t: type) : Prop := tc_val' t (eval_id i rho) /\\ b.",
            "VernacDefinition",
            "7798711dca6dea749606e8681cb4ee33f781a62d"
        ],
        [
            "Definition reflect_temps (Delta: tycontext) (rho: environ) : Prop := PTree.fold (reflect_temps_f rho) (temp_types Delta) True.",
            "VernacDefinition",
            "f3502e14d5c65698445be99e83af91f12997d113"
        ],
        [
            "Lemma reflect_temps_valid: forall Delta rho, tc_environ Delta rho -> reflect_temps Delta rho.",
            "VernacStartTheoremProof",
            "fab54c19e1a1879be6c4262367d83783d9ab9e76"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold reflect_temps.",
            "VernacExtend",
            "53b688af637a4d1c2b2f24a713d87ddbf4b4c9fd"
        ],
        [
            "rewrite PTree.fold_spec.",
            "VernacExtend",
            "cebe5ac0220f7ac61b6ae1db6e420872a773f3c7"
        ],
        [
            "remember (PTree.elements (temp_types Delta)) as el.",
            "VernacExtend",
            "31aa828229e92ae88ad0af021a676ebc4a895a00"
        ],
        [
            "assert (forall i v, In (i,v) el -> (temp_types Delta) ! i = Some v).",
            "VernacExtend",
            "36944ae734864776997aeaacf38a2b9cd8829c14"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst el.",
            "VernacExtend",
            "869c53d08a3185e453eb01e38cb8e14f5ba20c7f"
        ],
        [
            "apply PTree.elements_complete; auto.",
            "VernacExtend",
            "1ec7c3090833786e6f48e550449438a6de19b125"
        ],
        [
            "clear Heqel.",
            "VernacExtend",
            "9723c68ef864e9ce0c65afe26c4675b82c0254ca"
        ],
        [
            "assert (forall b: Prop, b -> fold_left (fun (a : Prop) (p : positive * type) => reflect_temps_f rho a (fst p) (snd p)) el b); [ | auto].",
            "VernacExtend",
            "f78a11fab860f6d9aece4f70c9d05ec0ac452312"
        ],
        [
            "revert H0; induction el; simpl; intros; auto.",
            "VernacExtend",
            "43aa4261c6c41d02bf7c7ff0edb36ae7664f37b7"
        ],
        [
            "unfold reflect_temps_f at 2.",
            "VernacExtend",
            "713db915a1f053af13ac6fa09ecd1ba27056ab56"
        ],
        [
            "destruct a as [i t]; simpl; auto.",
            "VernacExtend",
            "708e832b709bdc5881cf1d79ea6e479202d4cd2f"
        ],
        [
            "apply IHel; auto.",
            "VernacExtend",
            "f250c3e479a24b9363bd774add89b5f553c86677"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "eapply tc_eval'_id_i.",
            "VernacExtend",
            "2b55c0428ed5ba03f7ad155560d8924756a08ef7"
        ],
        [
            "eassumption.",
            "VernacExtend",
            "909bfe8655bf95c07560744f733991163ce6cf7e"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition abbreviate {A:Type} (x:A) := x.",
            "VernacDefinition",
            "4ba6427e073ec07bc4c36148be1656d6351df57c"
        ],
        [
            "Arguments abbreviate [A] [x].",
            "VernacArguments",
            "71374a477ef8cec5c2579010e30b453d219831b2"
        ],
        [
            "Ltac clear_Delta := match goal with | Delta := @abbreviate tycontext _ |- _ => first [clear Delta | clearbody Delta] | _ => idtac end; match goal with | DS := @abbreviate (PTree.t funspec) _ |- _ => first [clear DS | clearbody DS] | |- _ => idtac end.",
            "VernacExtend",
            "1620735c544375b4280f9b0d1116636f293ef4b2"
        ],
        [
            "Ltac clear_Delta_specs := lazymatch goal with | DS := @abbreviate (PTree.t funspec) _ |- _ => clearbody DS | |- _ => idtac end.",
            "VernacExtend",
            "ef0fe5a3e3e072f72cb769e8bf4af3dc760fe2f6"
        ],
        [
            "Ltac findvars := match goal with DD: tc_environ ?Delta ?rho |- _ => let H := fresh in assert (H := reflect_temps_valid _ _ DD); try (unfold Delta in H); cbv beta iota zeta delta [abbreviate PTree.fold PTree.prev PTree.prev_append PTree.xfold temp_types fst snd reflect_temps reflect_temps_f] in H; simpl in H; repeat match goal with | Name: name ?J |- context [eval_id ?J rho] => fold J in H; clear Name; forget (eval_id J rho) as Name | |- context [eval_id ?J rho] => try fold J in H; let Name := fresh \"_id\" in forget (eval_id J rho) as Name | Name: name _ |- _ => clear Name end; repeat match type of H with | _ (eval_id _ _) /\\ _ => destruct H as [_ H] | is_int _ _ ?i /\\ _ => let TC := fresh \"TC\" in destruct H as [TC H]; let i' := fresh \"id\" in rename i into i'; apply is_int_e in TC; destruct TC as [i [? TC]]; subst i'; simpl in TC; match type of TC with True => clear TC | _ => idtac end | _ /\\ _ => destruct H as [?TC H] end; clear H end.",
            "VernacExtend",
            "f7b31790365d411153b2c66f490bbd3cdc467c38"
        ],
        [
            "Lemma is_true_negb: forall a, is_true (negb a) -> a=false.",
            "VernacStartTheoremProof",
            "038d8ecf0a605ab58b88deffaebc8f31b17cfc49"
        ],
        [
            "destruct a; auto; try contradiction.",
            "VernacExtend",
            "a7bad6675bdb437bd38dd8fe98369fc019440c28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sem_cast_pointer2': forall (v : val) (t1 t2: type), match t1 with | Tpointer _ _ => is_true (negb (eqb_type t1 int_or_ptr_type)) | Tint I32 _ _ => if Archi.ptr64 then False else True | Tlong _ _ => if Archi.ptr64 then True else False | _ => False end -> match t2 with | Tpointer _ _ => is_true (negb (eqb_type t2 int_or_ptr_type)) | Tint I32 _ _ => if Archi.ptr64 then False else True | Tlong _ _ => if Archi.ptr64 then True else False | _ => False end -> is_pointer_or_null v -> force_val (sem_cast t1 t2 v) = v.",
            "VernacStartTheoremProof",
            "d5e620838ffd8a4eb899d12a5d9a6c6efd5a31fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_cast, classify_cast, force_val; simpl.",
            "VernacExtend",
            "d962e03a0ed2738a8189d99dc050ca36c4c0d07b"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; destruct t1; try contradiction; try destruct i; try contradiction; auto; destruct t2; try contradiction; try destruct i; try contradiction; auto; try rewrite (is_true_negb _ H); try rewrite (is_true_negb _ H0); destruct v; inv H1; auto.",
            "VernacExtend",
            "05b1e9b0f1b9cfc24b1f3477c2ba485de6f54b6e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite sem_cast_pointer2' using (try apply Coq.Init.Logic.I; try assumption; reflexivity) : norm.",
            "VernacExtend",
            "8b9a4a4d5a16e59a8b1f662e88451340d47e8bb0"
        ],
        [
            "Lemma sem_cast_pointer2: forall v t1 t2 t3 t1' t2', t1' = Tpointer t1 noattr -> t2' = Tpointer t2 noattr -> tc_val (Tpointer t3 noattr) v -> force_val (sem_cast t1' t2' v) = v.",
            "VernacStartTheoremProof",
            "bea805493139bc74fd9671f79ab02bc01339051c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "hnf in H1.",
            "VernacExtend",
            "94324ef603315a47e5f4c48a0cd13f6c1b983007"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "rewrite andb_false_r in H1.",
            "VernacExtend",
            "e10ec7be4a48233fbbbdc84027082dc61fc685c7"
        ],
        [
            "unfold sem_cast, classify_cast; simpl.",
            "VernacExtend",
            "a66bc5edd0224db7ecfda4f1df50fe1e42a20b61"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma force_eval_var_int_ptr : forall {cs: compspecs} Delta rho i t, tc_environ Delta rho -> tc_lvalue Delta (Evar i t) rho |-- !! (force_val match eval_var i t rho with | Vptr _ _ => Some (eval_var i t rho) | _ => None end = eval_var i t rho).",
            "VernacStartTheoremProof",
            "33a525c3e77249f635d2c15b7ffd54ee3ec74613"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans.",
            "VernacExtend",
            "74bf196b92978065d64297654462f01dbd4ed9a4"
        ],
        [
            "apply typecheck_lvalue_sound; auto.",
            "VernacExtend",
            "9c61d6995afb75fc1dc7dbd8145d8d27dcea1f28"
        ],
        [
            "simpl; normalize.",
            "VernacExtend",
            "531b9a72e9b5137d7c2764fce8d019d8c80d3273"
        ],
        [
            "unfold eval_var in *.",
            "VernacExtend",
            "97f4d391da79ea6db90e08282c8fee6dc6c6dab5"
        ],
        [
            "destruct (Map.get (ve_of rho) i) as [[? ?] |].",
            "VernacExtend",
            "c345753f6d6861c9e0f8edccf201a26ecb81975c"
        ],
        [
            "destruct (eqb_type t t0); try discriminate; reflexivity.",
            "VernacExtend",
            "531d30ede34ca7d24e4c1efc7f726fbef4366e58"
        ],
        [
            "destruct (Map.get (ge_of rho) i).",
            "VernacExtend",
            "4f2dd3778809d42e08595d763c016835a63219a5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_pointer_or_null_force_int_ptr: forall v, is_pointer_or_null v -> (force_val match v with | Vint _ => if Archi.ptr64 then None else Some v | Vlong _ => if Archi.ptr64 then Some v else None | Vptr _ _ => Some v | _ => None end) = v.",
            "VernacStartTheoremProof",
            "d2ce87a31921a3274e24a329dad684b6c7ca2cde"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_or_null_force_int_ptr using assumption : norm1.",
            "VernacExtend",
            "d14b4ca6be8bc3b8b9ad7bf945cbc12a177cf1c6"
        ],
        [
            "Lemma is_pointer_force_int_ptr: forall v, isptr v -> (force_val match v with | Vint _ => if Archi.ptr64 then None else Some v | Vlong _ => if Archi.ptr64 then Some v else None | Vptr _ _ => Some v | _ => None end) = v.",
            "VernacStartTheoremProof",
            "853044a886c2da9cc6ee6cd738faf78f123d465c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_force_int_ptr using assumption : norm1.",
            "VernacExtend",
            "45f20538e2b720800748b0527ffa66cf4becb03e"
        ],
        [
            "Lemma is_pointer_or_null_match : forall v, is_pointer_or_null v -> (match v with | Vint _ => if Archi.ptr64 then None else Some v | Vlong _ => if Archi.ptr64 then Some v else None | Vptr _ _ => Some v | _ => None end) = Some v.",
            "VernacStartTheoremProof",
            "a199a53654ceab05338fac07edcbedbfbc1398eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_or_null_match using assumption : norm1.",
            "VernacExtend",
            "53ee6b4aedbed908b6639b6a8783816a526ecbe2"
        ],
        [
            "Lemma is_pointer_force_int_ptr2: forall v, isptr v -> match v with | Vint _ => if Archi.ptr64 then None else Some v | Vlong _ => if Archi.ptr64 then Some v else None | Vptr _ _ => Some v | _ => None end = Some v.",
            "VernacStartTheoremProof",
            "bd4417a1e8b73bd0272ac0fb61c3c74af805eebe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_force_int_ptr2 using assumption : norm1.",
            "VernacExtend",
            "f25264ccbba3e541650764c6e891abf1571e308f"
        ],
        [
            "Lemma is_pointer_or_null_force_int_ptr2: forall v, is_pointer_or_null (force_val match v with | Vint _ => Some v | Vptr _ _ => Some v | _ => None end) -> (force_val match v with | Vint _ => Some v | Vptr _ _ => Some v | _ => None end) = v.",
            "VernacStartTheoremProof",
            "011d84d09ee9f0b2381215f04a0419769118ae8e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_or_null_force_int_ptr2 using assumption : norm1.",
            "VernacExtend",
            "5e4d0e2f02a4c916caa8a2f563aa555fec99811a"
        ],
        [
            "Lemma isptr_match : forall w0, is_pointer_or_null match match w0 with | Vint _ => if Archi.ptr64 then None else Some w0 | Vlong _ => if Archi.ptr64 then Some w0 else None | Vptr _ _ => Some w0 | _ => None end with | Some v' => v' | None => Vundef end = is_pointer_or_null w0.",
            "VernacStartTheoremProof",
            "ef6abc4b6bb914a8973835c1b1133b4abfb5b24c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_pointer_or_null.",
            "VernacExtend",
            "2a27c4cad8b275f71db5053f51aa84341f9fe697"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; destruct w0; auto.",
            "VernacExtend",
            "567e37e157d552a652bc197a1e36b208fcdcf887"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite isptr_match : norm1.",
            "VernacExtend",
            "5b79de0ff6374de5e69d0d0524ed11b2ff853644"
        ],
        [
            "Lemma eval_cast_neutral_tc_val: forall v, (exists t, tc_val t v /\\ is_pointer_type t = true) -> sem_cast_pointer v = Some v.",
            "VernacStartTheoremProof",
            "9c58795eedf023b15624120ca18ae667b86db4d0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H as [t [? ?]].",
            "VernacExtend",
            "443009c21a790c32b1e7d495a0142f0ce246aa39"
        ],
        [
            "hnf in H.",
            "VernacExtend",
            "b998e5ae98dd847416f4f194f30407c3597ea052"
        ],
        [
            "unfold is_pointer_type in H0.",
            "VernacExtend",
            "1167f9445c04a48f7493ab2b9c58b23b9c8a4d48"
        ],
        [
            "unfold sem_cast_pointer.",
            "VernacExtend",
            "ae700d3638ba3deec7e36b746dd48abc0ff65f3c"
        ],
        [
            "destruct (eqb_type t int_or_ptr_type); destruct t,v; inv H0; inv H; reflexivity.",
            "VernacExtend",
            "563c5d39417aac78c2eaa5798eb1b7121933b427"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite eval_cast_neutral_tc_val using solve [eauto] : norm.",
            "VernacExtend",
            "af7e08f5ac61dce234bde2e25cdd9c19a3e9672d"
        ],
        [
            "Lemma eval_cast_neutral_is_pointer_or_null: forall v, is_pointer_or_null v -> sem_cast_pointer v = Some v.",
            "VernacStartTheoremProof",
            "12d0fc2e7cbb978432d94b519f74a49fe0b2707a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite eval_cast_neutral_is_pointer_or_null using assumption : norm.",
            "VernacExtend",
            "9a12ea0a39eb1a529be0639f204347c197b2d3f9"
        ],
        [
            "Lemma is_pointer_or_null_eval_cast_neutral: forall v, is_pointer_or_null (force_val (sem_cast_pointer v)) = is_pointer_or_null v.",
            "VernacStartTheoremProof",
            "6932ab53c9e873a6a74af5d24f29bf63e1bf6b5a"
        ],
        [
            "destruct v; reflexivity.",
            "VernacExtend",
            "beabf874ed29da22e359852b1295f94335ce2ef1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite is_pointer_or_null_eval_cast_neutral : norm.",
            "VernacExtend",
            "6f91a2a8499e984811b785343601cdda546e9133"
        ],
        [
            "Lemma eval_cast_neutral_isptr: forall v, isptr v -> sem_cast_pointer v = Some v.",
            "VernacStartTheoremProof",
            "94c4155a6a3eb504e0a45c5447ff759b8bfb452d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct v; inv H; reflexivity.",
            "VernacExtend",
            "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite eval_cast_neutral_isptr using assumption : norm.",
            "VernacExtend",
            "b22aa2134b94ebef9d183d22b752f23e505bd8a2"
        ],
        [
            "Arguments ret_type !Delta /.",
            "VernacArguments",
            "e3146184619ac91517fd50e250a50bdf2c55fc0b"
        ],
        [
            "Arguments Datatypes.id {A} x / .",
            "VernacArguments",
            "45743455df64b4c11582f78ec9c714322cd5284b"
        ],
        [
            "Lemma raise_sepcon: forall A B : environ -> mpred , (fun rho: environ => A rho * B rho) = (A * B).",
            "VernacStartTheoremProof",
            "fec2281f0d72c70eecb1ff413a7f869eaaa10e47"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite raise_sepcon : norm1.",
            "VernacExtend",
            "8b8529a0ff1154cc17a8504c47fc5fc4677e7e24"
        ],
        [
            "Lemma lift1_lift1_retval {A}: forall i (P: val -> A), lift1 (lift1 P retval) (get_result1 i) = lift1 P (eval_id i).",
            "VernacStartTheoremProof",
            "e68113ba21b7318c712a41e890a49d1866177acd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "unfold lift1.",
            "VernacExtend",
            "243bfae82e0d234df94bea1d8678791da60b98b0"
        ],
        [
            "f_equal; normalize.",
            "VernacExtend",
            "7d3e8ad500104bf31626868549b23fda4ce618fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_lift_retval: forall (i: ident) P, @liftx (Tarrow environ (LiftEnviron mpred)) (@liftx (Tarrow val (LiftEnviron mpred)) P retval) (get_result1 i) = `P (eval_id i).",
            "VernacStartTheoremProof",
            "202cd48e6b29b230539e1f81c714601ca6613160"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite lift_lift_retval: norm2.",
            "VernacExtend",
            "a2dbd401aac351e1368364656436dbc9dfc93c57"
        ],
        [
            "Lemma lift_lift_x: forall t t' P (v: t), (@liftx (Tarrow t (LiftEnviron t')) P (@liftx (LiftEnviron t) v)) = (@liftx (LiftEnviron t') (P v)).",
            "VernacStartTheoremProof",
            "cd3f0730f1a21f44f2ec226660a0d22f1931fe49"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite lift_lift_x : norm2.",
            "VernacExtend",
            "cd4926aac49a418712be481deb0d170453f37902"
        ],
        [
            "Lemma lift0_exp {A}{NA: NatDed A}: forall (B: Type) (f: B -> A), lift0 (exp f) = EX x:B, lift0 (f x).",
            "VernacStartTheoremProof",
            "55cae6152d4fcd32a09c6c20b3a06389a0ea6c35"
        ],
        [
            "intros; extensionality rho; unfold lift0.",
            "VernacExtend",
            "de39cb9c16e6b7b06a369e7c3b386491b30ab7be"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal; extensionality b; auto.",
            "VernacExtend",
            "7d4c4431020b15545e791c15663b072aee64dae6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0C_exp {A}{NA: NatDed A}: forall (B: Type) (f: B -> A), `(exp f) = EX x:B, `(f x).",
            "VernacStartTheoremProof",
            "74c0bec81635f07aac875a688cf6d8a097a8b2fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold_lift.",
            "VernacExtend",
            "49cc678292f20068718dd6f7d6f838fc96506b4c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "f_equal; extensionality x; auto.",
            "VernacExtend",
            "4478ab1cc5b1217a631af0e9ace51ba45b3d70fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @lift0_exp : norm2.",
            "VernacExtend",
            "ef4d11aa4686c09a6132da9f5b1e16685ab9e87a"
        ],
        [
            "Hint Rewrite @lift0C_exp : norm2.",
            "VernacExtend",
            "1fb1c9d5c4d62cfb550bcbe9187c76616ef6a032"
        ],
        [
            "Lemma lift0_andp {A}{NA: NatDed A}: forall P Q, lift0 (@andp A NA P Q) = andp (lift0 P) (lift0 Q).",
            "VernacStartTheoremProof",
            "d1c4231d587ecddb066fa2f5a1e2ad0f04f109fc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0C_andp {A}{NA: NatDed A}: forall P Q: A, `(@andp A NA P Q) = andp (`P) (`Q).",
            "VernacStartTheoremProof",
            "f20b61b3b949801d12fac4fc9c1b2c56c6fa8b0a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0_prop {A}{NA: NatDed A}: forall P, lift0 (!! P) = !!P.",
            "VernacStartTheoremProof",
            "8e25998de107fe5c4eacd8f394d96b1bcf13d540"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; reflexivity.",
            "VernacExtend",
            "589a2c0d243558c6b3f8c078f52476efd4af4efe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0C_prop {A}{NA: NatDed A}: forall P, @liftx (LiftEnviron A) (@prop A NA P) = @prop (environ -> A) _ P.",
            "VernacStartTheoremProof",
            "23bb21970aa199a049e2666ce3dcd1107521120d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0_sepcon {A}{NA: NatDed A}{SA: SepLog A}: forall P Q, lift0 (@sepcon A NA SA P Q) = sepcon (lift0 P) (lift0 Q).",
            "VernacStartTheoremProof",
            "d0a1f389236bc1170bd8cc182e2288d181121ab4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0C_sepcon {A}{NA: NatDed A}{SA: SepLog A}: forall P Q N2 S2, (@liftx (LiftEnviron A) (@sepcon A N2 S2 P Q)) = (@sepcon (environ->A) _ _ (@liftx (LiftEnviron A) P) (@liftx (LiftEnviron A) Q)).",
            "VernacStartTheoremProof",
            "e7dc4ba27657b49f7268679282656979276c82af"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0_later {A}{NA: NatDed A}{IA: Indir A}: forall P:A, lift0 (@later A NA IA P) = later (lift0 P).",
            "VernacStartTheoremProof",
            "62e443b5441acc26e7d6ecb41b424d6208f9bf71"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0C_later {A}{NA: NatDed A}{IA: Indir A}: forall P:A, `(@later A NA IA P) = @later (environ->A) _ _ (`P).",
            "VernacStartTheoremProof",
            "a74848e2b438f17c83f5c69a1ec93cb24de66287"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite (@lift0C_sepcon mpred _ _) : norm.",
            "VernacExtend",
            "2f1a2254c19661e31a66ee73ee6e01e209515899"
        ],
        [
            "Hint Rewrite (@lift0C_andp mpred _) : norm.",
            "VernacExtend",
            "caac84d89cf0435ff775e8d745b3600aba27c155"
        ],
        [
            "Hint Rewrite (@lift0C_exp mpred _) : norm.",
            "VernacExtend",
            "77914872b895c80ffcf29e3b84ddae3aad79d4ef"
        ],
        [
            "Hint Rewrite (@lift0C_later mpred _ _) : norm.",
            "VernacExtend",
            "f395af4f57053c5f464734152359815a7efa1995"
        ],
        [
            "Hint Rewrite (@lift0C_prop mpred _) : norm.",
            "VernacExtend",
            "43806639880000b2c7be76a09162e45a03ecefdc"
        ],
        [
            "Hint Rewrite @lift1_lift1_retval @lift0_exp @lift0_sepcon @lift0_prop @lift0_later : norm2.",
            "VernacExtend",
            "aad365ef830ab9bb7c318ee7183fd78700b6fb5b"
        ],
        [
            "Lemma fst_unfold: forall {A B} (x: A) (y: B), fst (x,y) = x.",
            "VernacStartTheoremProof",
            "c30f3309887541768e65a2779c1b4b44e53b5f8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma snd_unfold: forall {A B} (x: A) (y: B), snd (x,y) = y.",
            "VernacStartTheoremProof",
            "90150a78bea430b3c16bc0d452572a92e3805ad6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @fst_unfold @snd_unfold : norm.",
            "VernacExtend",
            "82ea3cf1058fad61cdf06ae9c9d83c639c00e55c"
        ],
        [
            "Lemma eq_True: forall (A: Prop), A -> (A=True).",
            "VernacStartTheoremProof",
            "3e5fdec3b0e9851a629c30060207b553eaf6e5da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derives_extract_PROP : forall (P1: Prop) A P QR S, (P1 -> A && PROPx P QR |-- S) -> A && PROPx (P1::P) QR |-- S.",
            "VernacStartTheoremProof",
            "bfa80f14160f209228de2d80f525478a13b9e9e8"
        ],
        [
            "unfold PROPx in *.",
            "VernacExtend",
            "5bd7af5350141173917f3ce8296a0cbbef879aeb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite fold_right_cons.",
            "VernacExtend",
            "ef23bd75c5310d0de48ae1e8f4c619275606ee48"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "eapply derives_trans; [ | apply H; auto].",
            "VernacExtend",
            "4f08f85616d6692f71c337d9a389825908bc5dc7"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma local_andp_prop: forall P Q, local P && prop Q = prop Q && local P.",
            "VernacStartTheoremProof",
            "bd208dcee7b9539ff2fa27f3726f62623c0e12ec"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_comm.",
            "VernacExtend",
            "c3dd1c812b539bbcf23c38f415fc0d445780852e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma local_andp_prop1: forall P Q R, local P && (prop Q && R) = prop Q && (local P && R).",
            "VernacStartTheoremProof",
            "5574018f5d3bfdc742eac46143582eee3bdd0b2e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite andp_comm.",
            "VernacExtend",
            "f42ee316a55b2a9216373e6b515ce4b77ae502d5"
        ],
        [
            "rewrite andp_assoc.",
            "VernacExtend",
            "200650b65aadcd7d8884ebc4a7dde1f9da41d9ca"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply andp_comm.",
            "VernacExtend",
            "c3dd1c812b539bbcf23c38f415fc0d445780852e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite local_andp_prop local_andp_prop1 : norm2.",
            "VernacExtend",
            "59dc329da9515a7bffd9d701932921aa31d75a15"
        ],
        [
            "Lemma local_sepcon_assoc1: forall P Q R, (local P && Q) * R = local P && (Q * R).",
            "VernacStartTheoremProof",
            "6bcb7a8f29f1b88a9e17749668f6472a87ccb6fa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; unfold local, lift1; simpl.",
            "VernacExtend",
            "83572d3849f4ae3649c48d65d59a476a5a2ccbfc"
        ],
        [
            "apply pred_ext; normalize.",
            "VernacExtend",
            "899b6222eaf5eb0cd6828844b517b3349b8593ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma local_sepcon_assoc2: forall P Q R, R * (local P && Q) = local P && (R * Q).",
            "VernacStartTheoremProof",
            "c920353f0aca22b789884e160679b0da1f398722"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "extensionality rho; unfold local, lift1; simpl.",
            "VernacExtend",
            "83572d3849f4ae3649c48d65d59a476a5a2ccbfc"
        ],
        [
            "apply pred_ext; normalize.",
            "VernacExtend",
            "899b6222eaf5eb0cd6828844b517b3349b8593ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite local_sepcon_assoc1 local_sepcon_assoc2 : norm2.",
            "VernacExtend",
            "f5b37f9deeb838966121eeb3b5133603f941a67d"
        ],
        [
            "Definition do_canon (x y : environ->mpred) := (sepcon x y).",
            "VernacDefinition",
            "7682284cfbc1ceb11b92c01eefd574501ca4a66e"
        ],
        [
            "Ltac strip1_later P := match P with | do_canon ?L ?R => let L' := strip1_later L in let R' := strip1_later R in constr:(do_canon L' R') | PROPx ?P ?QR => let QR' := strip1_later QR in constr:(PROPx P QR') | LOCALx ?Q ?R => let R' := strip1_later R in constr:(LOCALx Q R') | SEPx ?R => let R' := strip1_later R in constr:(SEPx R') | ?L::?R => let L' := strip1_later L in let R' := strip1_later R in constr:(L'::R') | nil => constr:(nil) | ?L && ?R => let L' := strip1_later L in let R' := strip1_later R in constr:(L' && R') | ?L * ?R => let L' := strip1_later L in let R' := strip1_later R in constr:(L'*R') | |> ?L => constr:(L) | ?L => constr:(L) end.",
            "VernacExtend",
            "12e8b3cdde9f8709c21c2b905b4615931030733f"
        ],
        [
            "Lemma andp_later_derives {A} {NA: NatDed A}{IA: Indir A}: forall P Q P' Q': A, P |-- |> P' -> Q |-- |> Q' -> P && Q |-- |> (P' && Q').",
            "VernacStartTheoremProof",
            "cb8714b203f704f68020e73c818cbaa8d7f3541a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite later_andp.",
            "VernacExtend",
            "4f91f5654d2f8262e470e7fc21baefb6cfe9b423"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sepcon_later_derives {A} {NA: NatDed A}{SL: SepLog A}{IA: Indir A}{SI: SepIndir A}: forall P Q P' Q': A, P |-- |> P' -> Q |-- |> Q' -> P * Q |-- |> (P' * Q').",
            "VernacStartTheoremProof",
            "797363c8b7113254b0f3aa1c20528a66b17c21e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite later_sepcon.",
            "VernacExtend",
            "225a686e751b49c4cee23f6afcc12f6fb2adb091"
        ],
        [
            "apply sepcon_derives; auto.",
            "VernacExtend",
            "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve @andp_later_derives @sepcon_later_derives @sepcon_derives @andp_derives @imp_derives @now_later @derives_refl: derives.",
            "VernacHints",
            "427efd17163cab2e11bdc0f0aa2c8609e86e710d"
        ],
        [
            "Notation \"'DECLARE' x s\" := (x: ident, s: funspec) (at level 160, x at level 0, s at level 150, only parsing).",
            "VernacNotation",
            "5461a9d1bcc1efc28cfdbc68f649f1bff5227e54"
        ],
        [
            "Notation \" a 'OF' ta \" := (a%positive,ta%type) (at level 100, only parsing): formals.",
            "VernacNotation",
            "f8badd534c278a414987f13e6e914c3715c02788"
        ],
        [
            "Delimit Scope formals with formals.",
            "VernacDelimiters",
            "8a88cdd2af4ae46d590a8372403960d2ded0ebfb"
        ],
        [
            "Definition NDsemax_external {Hspec: OracleKind} (ids: list ident) (ef: external_function) (A: Type) (P Q: A -> environ -> mpred): Prop := @semax_external Hspec ids ef (rmaps.ConstType A) (fun _ => P) (fun _ => Q).",
            "VernacDefinition",
            "9c14ef501391d671aa6df174f21f52eb1d78de5f"
        ],
        [
            "Notation \"'WITH' x : tx 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default tx (fun x => P%assert) (fun x => Q%assert)) (at level 200, x at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "d8d0d2a44174c1fac0deac0834843aa91e240ce7"
        ],
        [
            "Notation \"'WITH' x : tx 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default tx (fun x => P%assert) (fun x => Q%assert)) (at level 200, x at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "f9b86295121b04168e0503e5b6d7a0bb5675d9c0"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2) (fun x => match x with (x1,x2) => P%assert end) (fun x => match x with (x1,x2) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "e223fbeb812db105f7311a0c4a99f4bde65cd616"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2) (fun x => match x with (x1,x2) => P%assert end) (fun x => match x with (x1,x2) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b473cae2def09e21da3b2caaf0ca4aa1be02f8af"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3) (fun x => match x with (x1,x2,x3) => P%assert end) (fun x => match x with (x1,x2,x3) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "65ba30a8953c109d7902784e0a59d34a0612d69b"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3) (fun x => match x with (x1,x2,x3) => P%assert end) (fun x => match x with (x1,x2,x3) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "a3884539c894115cf2945096c230b3ab6e8a5095"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4) (fun x => match x with (x1,x2,x3,x4) => P%assert end) (fun x => match x with (x1,x2,x3,x4) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "f384b6a8aa17ce243b987378f92c525e885ef5d7"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4) (fun x => match x with (x1,x2,x3,x4) => P%assert end) (fun x => match x with (x1,x2,x3,x4) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "8c341243e336e71290800375b49d1b2128aa85b8"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5) (fun x => match x with (x1,x2,x3,x4,x5) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "156fb906e6465585f891f6bf8ce668f1ccb4e8bb"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5) (fun x => match x with (x1,x2,x3,x4,x5) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "e152df9c32a64c83c6ada2613604c677ec82df2a"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6) (fun x => match x with (x1,x2,x3,x4,x5,x6) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "dd8017624d00fa617bd8a107dafd3a4425612aaa"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6) (fun x => match x with (x1,x2,x3,x4,x5,x6) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "a78176468e15abe3937e82f2c3b55fa66f766a72"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b2d522f353e14e83ccdc887e0f30cd622e2f2d92"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "3c56c117326aa62d12b935fc004cab83c04d175d"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "ba09f4655b83c95cab8626d6ec870b419fd3048f"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "a3eb2a4cb5d24b2f6c26ee0157a99da50d00222e"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "37c65855eef5eab7b3bcf9e9d15365375bf5a248"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "769bd20b5840c3db1b55b48532e90fa2cebeb4a0"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "487cfa2ad65c9f24ab17df8fb6bbd47c2f369349"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b6b6f5dc40ed8fde59a60e50ba7346e9efcb541f"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b6df7fabe0c7e18c4632f64e69d19624140b9db5"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "e4f9a02835d199e9c67fa20a193af3fd55ca173b"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b9dacd9188c6de212f3bde71e2acbcdc120b0092"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "fe1ef14b50930d2ada31f2feae605e8caeb03773"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "4d32ac7ebee1a4a036d04a1d56d6316a225c22d7"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "d04d9e37d718f29960986141a3e68c018b36d0ce"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "ccfbd513f077ea0aeb27a7839f973e8df9cb4a5e"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b6041c3bf174fe881e6566fc05b6f86616db23a8"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "9f5b74b1dad81e250a5e3730ebfc857afe7ec68c"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "3a1e8203acec3604eafe9468790ba31312d7494d"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "5996c73c4299e31764e74b4034b5abf8f1f6672e"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "3f408c60f3835f930a044c5599aa1de3d513d57f"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "c9c3b6f1ce7af9e88380721c09f65d0f3f28455e"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "856ca3cf510ff9553d494bc50c5212514b4ce119"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "b4b7a9bb06d223299e91b4d46780dfb84a4d85c2"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "5007a9cd7156adf503a18394d625065da59d1486"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "abc71ea5943bffb3d4e336776c0fb2326657fdcb"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "adce0150c0d144404c5b8336f0dd3b5773b17cc0"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "69223883ce2da04287b8a23d9341fee47ec22bf0"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "cad5a50e958c5643cb94ccff9782b6d1cb3aa4f4"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 , x21 : t21 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20*t21) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, x21 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "70a6cae4bf16316bd465c61ba0d0120d6aea17d8"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 , x21 : t21 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20*t21) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, x21 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "6284336217953d2170e49169d9eb540214a45716"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 , x21 : t21 , x22 : t22 'PRE' [ ] P 'POST' [ tz ] Q\" := (NDmk_funspec (nil, tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20*t21*t22) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, x21 at level 0, x22 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "99f58bc4350132009bf97cdd5334bdadd73dcf1e"
        ],
        [
            "Notation \"'WITH' x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 , x6 : t6 , x7 : t7 , x8 : t8 , x9 : t9 , x10 : t10 , x11 : t11 , x12 : t12 , x13 : t13 , x14 : t14 , x15 : t15 , x16 : t16 , x17 : t17 , x18 : t18 , x19 : t19 , x20 : t20 , x21 : t21 , x22 : t22 'PRE' [ u , .. , v ] P 'POST' [ tz ] Q\" := (NDmk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default (t1*t2*t3*t4*t5*t6*t7*t8*t9*t10*t11*t12*t13*t14*t15*t16*t17*t18*t19*t20*t21*t22) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22) => P%assert end) (fun x => match x with (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22) => Q%assert end)) (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0, x6 at level 0, x7 at level 0, x8 at level 0, x9 at level 0, x10 at level 0, x11 at level 0, x12 at level 0, x13 at level 0, x14 at level 0, x15 at level 0, x16 at level 0, x17 at level 0, x18 at level 0, x19 at level 0, x20 at level 0, x21 at level 0, x22 at level 0, P at level 100, Q at level 100).",
            "VernacNotation",
            "767ccfb4aff0114cac0dc9ea8be53a2b7a12a649"
        ],
        [
            "Lemma prop_true_andp1 {A}{NA: NatDed A} : forall (P1 P2: Prop) Q , P1 -> (!! (P1 /\\ P2) && Q = !!P2 && Q).",
            "VernacStartTheoremProof",
            "2bd75b1fc4229d74a3ad92ce3fc4b43200f865be"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "f_equal; auto.",
            "VernacExtend",
            "8016959cfe83d1ba3fdad91954454045f7af1d22"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite prop_true_andp1 using solve [auto 3 with typeclass_instances]: norm1.",
            "VernacExtend",
            "963c912908a6552c234552974b6ffa59ce90ff2f"
        ],
        [
            "Hint Rewrite prop_true_andp1 using assumption : norm.",
            "VernacExtend",
            "14e939678b37092b5e092a8dd0947c4eb1f30e4d"
        ],
        [
            "Lemma and_assoc': forall A B C: Prop, ((A /\\ B) /\\ C) = (A /\\ (B /\\ C)).",
            "VernacStartTheoremProof",
            "b22168e1005f8c95cd0f0d5f553a28986d0fe668"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply prop_ext; apply and_assoc.",
            "VernacExtend",
            "9db1462d96ced605d09aa016b40430168898cce4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac splittablex_tac A := match A with | _ <= _ < _ => fail 1 | _ < _ <= _ => fail 1 | _ <= _ <= _ => fail 1 | _ < _ < _ => fail 1 | _ <-> _ => fail 1 | _ /\\ _ => apply Logic.I end.",
            "VernacExtend",
            "4ea8e938d518020eca57972fc3df66f56e521754"
        ],
        [
            "Definition splittablex (A: Prop) := True.",
            "VernacDefinition",
            "34153c58bd22660d99e9a6a5c9693af7cfe4819d"
        ],
        [
            "Lemma and_assoc_splittablex {T}{NT: NatDed T}: forall A B C: Prop, splittablex (A /\\ B) -> !! ((A /\\ B) /\\ C) = !! (A /\\ (B /\\ C)).",
            "VernacStartTheoremProof",
            "ee21dbb3385479038cb851f1cbfee8ad1bc13bd8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite and_assoc'; auto.",
            "VernacExtend",
            "7aae6f98f815179dda55cae0a0a19db4e65011ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma and_assoc'' {T}{NT: NatDed T}: forall A B C: Prop, !! ((A /\\ B) /\\ C) = !! (A /\\ (B /\\ C)).",
            "VernacStartTheoremProof",
            "ae948e88b3b34821c00bdf503776d439a494c225"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite and_assoc'; auto.",
            "VernacExtend",
            "7aae6f98f815179dda55cae0a0a19db4e65011ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite and_assoc_splittablex using match goal with |- splittablex ?A => splittablex_tac A end : normalize.",
            "VernacExtend",
            "4d591e090427118159faa1dcf3c3c35453595601"
        ],
        [
            "Hint Rewrite and_assoc_splittablex using match goal with |- splittablex ?A => splittablex_tac A end : gather_prop.",
            "VernacExtend",
            "7ff4bab51357b9959dd85511ce26505f926c0bdc"
        ],
        [
            "Ltac hoist_later_left := match goal with | |- (?P |-- _) => let P' := strip1_later P in apply derives_trans with (|>P'); [ solve [ auto 50 with derives ] | ] end.",
            "VernacExtend",
            "20065a593d81c7a26dac78b3532a98c0394c274c"
        ],
        [
            "Lemma semax_later_trivial: forall Espec {cs: compspecs} Delta P c Q, @semax cs Espec Delta (|> P) c Q -> @semax cs Espec Delta P c Q.",
            "VernacStartTheoremProof",
            "bbf5124724b8e1e1a71b03010e3a6bda4ddc1975"
        ],
        [
            "intros until Q.",
            "VernacExtend",
            "47276f218fb911d3882586a3efb882ac4abb8bf0"
        ],
        [
            "apply semax_pre0.",
            "VernacExtend",
            "a6b1cecdadd78261ec60278760b40aec8153c5f8"
        ],
        [
            "apply now_later.",
            "VernacExtend",
            "8b8d74d1fb07b10823969bd9c13aeaec0da69b56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac hoist_later_in_pre := match goal with |- semax _ ?P _ _ => match P with | context[@later] => let P' := strip1_later P in apply semax_pre0 with (|> P'); [solve [auto 50 with derives] | ] | _ => apply semax_later_trivial end end.",
            "VernacExtend",
            "f6abc4fe8c1481380b14027b455445643d16feb6"
        ],
        [
            "Ltac type_of_field_tac := simpl; repeat first [rewrite if_true by auto | rewrite if_false by (let H:=fresh in intro H; inversion H) | simpl; reflexivity].",
            "VernacExtend",
            "3fd313cffd5804ab0b1b6eb033e2eb2ec7131e2d"
        ],
        [
            "Ltac simpl_tc_expr := match goal with |- context [tc_expr ?A ?B] => change (tc_expr A B) with (denote_tc_assert (typecheck_expr A B)); simpl typecheck_expr; simpl denote_tc_assert end.",
            "VernacExtend",
            "807f425f6d5720f10754e48ee74dd82d3e508d45"
        ],
        [
            "Lemma prop_and1 {A}{NA: NatDed A}: forall P Q : Prop, P -> !!(P /\\ Q) = !!Q.",
            "VernacStartTheoremProof",
            "cba06d8265186685c07a3d6be6dde151cc0667b7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "f_equal; apply prop_ext; intuition.",
            "VernacExtend",
            "349e5a119c4364173cef29155dcabbc16e701a81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite prop_and1 using solve [auto 3 with typeclass_instances] : norm2.",
            "VernacExtend",
            "f41b52bce9374050ce06c681053d56d6d0f62fd1"
        ],
        [
            "Lemma subst_make_args': forall {cs: compspecs} id v (P: environ->mpred) fsig tl el, length tl = length el -> length (fst fsig) = length el -> subst id v (`P (make_args' fsig (eval_exprlist tl el))) = (`P (make_args' fsig (subst id v (eval_exprlist tl el)))).",
            "VernacStartTheoremProof",
            "be55815ad3991590177eac5fcfb190370c3c9f7c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold_lift.",
            "VernacExtend",
            "49cc678292f20068718dd6f7d6f838fc96506b4c"
        ],
        [
            "extensionality rho; unfold subst.",
            "VernacExtend",
            "c507cdd342fee2d7b94bf74805b6a9f921917d15"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold make_args'.",
            "VernacExtend",
            "671fc5b2fbcecc49267953eda683854f8e57ffe8"
        ],
        [
            "revert tl el H H0; induction (fst fsig); destruct tl,el; simpl; intros; inv H; inv H0.",
            "VernacExtend",
            "645814d352b4d057afaf8af0e429b2bd60bbc881"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "specialize (IHl _ _ H2 H1).",
            "VernacExtend",
            "0d38198c33951b8dcb6a60c2f13eff4d4b7da721"
        ],
        [
            "unfold_lift; rewrite IHl.",
            "VernacExtend",
            "076016a25428d46854c80294ad72b734321b8b54"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_make_args' using (solve[reflexivity]) : subst.",
            "VernacExtend",
            "55ba76b11faebd3c93e3424529bb0d252d746497"
        ],
        [
            "Lemma map_cons: forall {A B} (f: A -> B) x y, map f (x::y) = f x :: map f y.",
            "VernacStartTheoremProof",
            "8c1497be20fe81589ae578551d65ebba55332510"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @map_cons : norm.",
            "VernacExtend",
            "69fcb8dff3dcc395ecd19967a4b60e19f76c1e91"
        ],
        [
            "Hint Rewrite @map_cons : subst.",
            "VernacExtend",
            "960a3785e2371604421c6fcf580643017b1f1177"
        ],
        [
            "Lemma map_nil: forall {A B} (f: A -> B), map f nil = nil.",
            "VernacStartTheoremProof",
            "08467bd3f42b98ddbb0f0782c9d3ccdc711a4da3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @map_nil : norm.",
            "VernacExtend",
            "b0f59fd4aa29004a101e54126bfc141db8a3c801"
        ],
        [
            "Hint Rewrite @map_nil : subst.",
            "VernacExtend",
            "23e55d7d8ff8f8da942fe7ce774c287de8cfc141"
        ],
        [
            "Fixpoint remove_localdef_temp (i: ident) (l: list localdef) : list localdef := match l with | nil => nil | d :: l0 => match d with | temp j v => if ident_eq i j then remove_localdef_temp i l0 else d :: remove_localdef_temp i l0 | _ => d :: remove_localdef_temp i l0 end end.",
            "VernacFixpoint",
            "1520905b0149dcc670f39f485f8b2e66b26b718c"
        ],
        [
            "Lemma subst_stackframe_of: forall {cs: compspecs} i v f, subst i v (stackframe_of f) = stackframe_of f.",
            "VernacStartTheoremProof",
            "5f2fa6d0a052df37da74cf0a636b49a6963e2a3b"
        ],
        [
            "unfold stackframe_of; simpl; intros.",
            "VernacExtend",
            "01152fccdfa4764295726cfc71c6e4fa6542eaac"
        ],
        [
            "unfold subst.",
            "VernacExtend",
            "f1c20e94172b6ea3ded32c0ce8684e12e458c841"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "induction (fn_vars f).",
            "VernacExtend",
            "30d8693e7c1f304e20cc5b564c9f4ade27550b37"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl map.",
            "VernacExtend",
            "09bcd1b174cca4985ee08b62f9f955b2e346c941"
        ],
        [
            "repeat rewrite fold_right_cons.",
            "VernacExtend",
            "96708de690f8302544dc5df1f2c9fc5d5c162fd4"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite @subst_stackframe_of : subst.",
            "VernacExtend",
            "393354247800a6b6dfdfdbeed52a4eac0bd4c69c"
        ],
        [
            "Lemma remove_localdef_temp_PROP: forall (i: ident) P Q R, EX old: val, subst i `(old) (PROPx P (LOCALx Q (SEPx R))) |-- PROPx P (LOCALx (remove_localdef_temp i Q) (SEPx R)).",
            "VernacStartTheoremProof",
            "666bffb0147f52917af780d1a8ef1c701db17148"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply exp_left; intro old.",
            "VernacExtend",
            "c5f6de70ad7767ceec54d1e9486feb634a301bf1"
        ],
        [
            "unfold PROPx.",
            "VernacExtend",
            "593deff54c68c9f1e69c515e783782e0f285a65f"
        ],
        [
            "autorewrite with subst norm.",
            "VernacExtend",
            "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "unfold LOCALx.",
            "VernacExtend",
            "ea2b6e61532874513c5a254a27d6c9d225642880"
        ],
        [
            "autorewrite with subst norm.",
            "VernacExtend",
            "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
        ],
        [
            "apply andp_derives; auto; try apply derives_refl.",
            "VernacExtend",
            "86513f1cfce645363bdad292ed07c538173cb28e"
        ],
        [
            "induction Q; simpl fold_right.",
            "VernacExtend",
            "a71d181de6ff943b6384d9735facbd1b309308b5"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "autorewrite with subst norm; auto.",
            "VernacExtend",
            "7fd82144eaa08c04d9e9bb670590593c70cbc9cb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct a; [if_tac | ..]; autorewrite with subst norm.",
            "VernacExtend",
            "4969eaaf99625abc6d906b92f77e70f2bf60e860"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply derives_trans; [| exact IHQ].",
            "VernacExtend",
            "e2b601aba46ff898ebd79e9cd909179099998338"
        ],
        [
            "rewrite local_lift2_and.",
            "VernacExtend",
            "986b9fa2daf3650b1ce30928d38c6bfea6661450"
        ],
        [
            "apply andp_left2; apply derives_refl.",
            "VernacExtend",
            "7a76256980f607cdeebcf98c78b313c9997d49d1"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite !local_lift2_and.",
            "VernacExtend",
            "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
        ],
        [
            "apply andp_derives; [| exact IHQ].",
            "VernacExtend",
            "0b186a67596e527c27b51851f9aa6fd84a2aa438"
        ],
        [
            "unfold locald_denote.",
            "VernacExtend",
            "9cd050d8a7ce1d2ab993dff0dfd53569b39bd572"
        ],
        [
            "autorewrite with subst norm.",
            "VernacExtend",
            "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
        ],
        [
            "unfold local, lift1; unfold_lift; intros ?.",
            "VernacExtend",
            "200c215978605109d2096ffc5fb38cb924dbe09c"
        ],
        [
            "apply prop_derives; simpl.",
            "VernacExtend",
            "b57534ed3f028abed291873bdf992b9865356741"
        ],
        [
            "unfold subst; simpl; intros.",
            "VernacExtend",
            "d3fd5205f934a35e0db4d4df4bf3089b9b38b1b6"
        ],
        [
            "rewrite eval_id_other in H0 by auto; auto.",
            "VernacExtend",
            "60f18cec310b5ce47bb5fabc560e30819f7b6088"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite !local_lift2_and.",
            "VernacExtend",
            "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
        ],
        [
            "apply andp_derives; [| exact IHQ].",
            "VernacExtend",
            "0b186a67596e527c27b51851f9aa6fd84a2aa438"
        ],
        [
            "unfold local, lift1; unfold_lift; intros rho.",
            "VernacExtend",
            "2ff5f2edcafe0a092c52c53b19def8e34a6d89ba"
        ],
        [
            "unfold subst; simpl.",
            "VernacExtend",
            "a3e5350451cf787f4feb735d28b119bfe8e5958a"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite !local_lift2_and.",
            "VernacExtend",
            "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
        ],
        [
            "apply andp_derives; [| exact IHQ].",
            "VernacExtend",
            "0b186a67596e527c27b51851f9aa6fd84a2aa438"
        ],
        [
            "unfold local, lift1; unfold_lift; intros rho.",
            "VernacExtend",
            "2ff5f2edcafe0a092c52c53b19def8e34a6d89ba"
        ],
        [
            "unfold subst; simpl.",
            "VernacExtend",
            "a3e5350451cf787f4feb735d28b119bfe8e5958a"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_id_denote_tc_initialized: forall Delta i t v, (temp_types Delta) ! i = Some t -> local (tc_environ Delta) && local (`and (`(eq v) (eval_id i)) `(v <> Vundef)) |-- denote_tc_initialized i t.",
            "VernacStartTheoremProof",
            "a567b295cf6bd72df007fa63e7eb1d6547e269c0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intros rho.",
            "VernacExtend",
            "a2c73e9d721b33bd236ef5f63ee08f19792dc61e"
        ],
        [
            "unfold local, lift1; unfold_lift; simpl.",
            "VernacExtend",
            "4fd0b5977d5d95d8735eb85937245f7419d05295"
        ],
        [
            "rewrite <- prop_and; apply prop_derives.",
            "VernacExtend",
            "fcc16f8a5a1f773302601ad984ef48fbd06c1399"
        ],
        [
            "intros [? [? ?]].",
            "VernacExtend",
            "db705afca806406a16da0469510bc59aa5887a38"
        ],
        [
            "destruct H0 as [? _].",
            "VernacExtend",
            "1e578e84e7a531f32f36c087bbd511d26e131ff7"
        ],
        [
            "specialize (H0 _ _ H).",
            "VernacExtend",
            "2147e107b26814d791c0307b50f6d85f1bac2910"
        ],
        [
            "destruct H0 as [v0 [? ?]].",
            "VernacExtend",
            "1bcf7f30aff8df169b5eb98d7e457cff8783fa43"
        ],
        [
            "unfold eval_id in H1.",
            "VernacExtend",
            "1246606c19fcf82fcc6501e6f69695fb4198650f"
        ],
        [
            "rewrite H0 in *; clear H0; subst v; rename v0 into v.",
            "VernacExtend",
            "65646a375f199e68410744ad6b4a5e0205552df2"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "specialize (H3 H2).",
            "VernacExtend",
            "70270aa21722742049bdcc112f76ecc58b396334"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PQR_denote_tc_initialized: forall Delta i t v P Q R, (temp_types Delta) ! i = Some t -> local (tc_environ Delta) && PROPx P (LOCALx (temp i v :: Q) R) |-- denote_tc_initialized i t.",
            "VernacStartTheoremProof",
            "900823fd80cb5339889208947957cc115cf488ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [| apply eval_id_denote_tc_initialized; eauto].",
            "VernacExtend",
            "4101c0fd3e9cbd105958059cb9b04d77b79cad2b"
        ],
        [
            "apply andp_derives; [apply derives_refl |].",
            "VernacExtend",
            "71f3759ebda4f9a8383de42ff6ec6fd18867ae69"
        ],
        [
            "rewrite <- insert_local'.",
            "VernacExtend",
            "da52c1dc213f312d2866f1b93bcfeacea8ac325b"
        ],
        [
            "apply andp_left1.",
            "VernacExtend",
            "527caf3623c2439da127093a10760d6fffcc2032"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derives_remove_localdef_PQR: forall P Q R i, PROPx P (LOCALx Q (SEPx R)) |-- PROPx P (LOCALx (remove_localdef_temp i Q) (SEPx R)).",
            "VernacStartTheoremProof",
            "1bcf8c3c111a2e96f2cdb2844e3a7a017f5f3311"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "go_lowerx.",
            "VernacExtend",
            "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "apply prop_right.",
            "VernacExtend",
            "951daa52f148695942d4aefc563d5e92d8ec02ff"
        ],
        [
            "clear H; rename H0 into H.",
            "VernacExtend",
            "79e96b6fba73ea37e348617d0b1ce685fd4733ec"
        ],
        [
            "induction Q; simpl in *; auto.",
            "VernacExtend",
            "075747fe4db272f97a696a5d7d73906311f738be"
        ],
        [
            "destruct a; try now (destruct H; simpl in *; split; auto).",
            "VernacExtend",
            "8bfd82f9df6f66340c2b91c0539af749e5c624ea"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "if_tac; simpl in *; auto.",
            "VernacExtend",
            "faf14ff9d58b9a92c0203196c65bc7e9ae634d54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_remove_localdef_PQR: forall P Q R i v, subst i v (PROPx P (LOCALx (remove_localdef_temp i Q) (SEPx R))) |-- PROPx P (LOCALx (remove_localdef_temp i Q) (SEPx R)).",
            "VernacStartTheoremProof",
            "1eb5807d74893f2911c03fec4bc3ee137bd1f34d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "go_lowerx.",
            "VernacExtend",
            "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "apply prop_right.",
            "VernacExtend",
            "951daa52f148695942d4aefc563d5e92d8ec02ff"
        ],
        [
            "clear H; rename H0 into H.",
            "VernacExtend",
            "79e96b6fba73ea37e348617d0b1ce685fd4733ec"
        ],
        [
            "induction Q; simpl in *; auto.",
            "VernacExtend",
            "075747fe4db272f97a696a5d7d73906311f738be"
        ],
        [
            "destruct a; try now (destruct H; simpl in *; split; auto).",
            "VernacExtend",
            "8bfd82f9df6f66340c2b91c0539af749e5c624ea"
        ],
        [
            "if_tac; simpl in *; auto.",
            "VernacExtend",
            "faf14ff9d58b9a92c0203196c65bc7e9ae634d54"
        ],
        [
            "destruct H; split; auto.",
            "VernacExtend",
            "6b0b617ec55939190e129ebd913eb5389aac7738"
        ],
        [
            "unfold_lift in H.",
            "VernacExtend",
            "0a1066f59459f9c869906996c139bea7b2fb2401"
        ],
        [
            "destruct H; subst.",
            "VernacExtend",
            "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
        ],
        [
            "unfold_lift.",
            "VernacExtend",
            "49cc678292f20068718dd6f7d6f838fc96506b4c"
        ],
        [
            "rewrite eval_id_other in * by auto.",
            "VernacExtend",
            "7a541593cb9596c9766c12ca13b4c69233c0c2c7"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint iota_formals (i: ident) (tl: typelist) := match tl with | Tcons t tl' => (i,t) :: iota_formals (i+1)%positive tl' | Tnil => nil end.",
            "VernacFixpoint",
            "03dc6a5442c7bf5e14ca7c519f15ff1e2ec259af"
        ],
        [
            "Ltac make_sequential := match goal with | |- @semax _ _ _ _ _ (normal_ret_assert _) => idtac | |- _ => apply sequential end.",
            "VernacExtend",
            "26124c851f523cbbae06a174edde8848c66682bd"
        ],
        [
            "Lemma isptr_force_ptr'' : forall p Q, (isptr p -> Q) -> (isptr (force_ptr p) -> Q).",
            "VernacStartTheoremProof",
            "57759ad5f80adeec6f906ffbf0c1bb9f1e12212e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "destruct p; inv H; apply Coq.Init.Logic.I.",
            "VernacExtend",
            "c246f718d16a807c374c045a27bad2d4f8afd715"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isptr_offset_val'': forall i p Q, (isptr p -> Q) -> (isptr (offset_val i p) -> Q).",
            "VernacStartTheoremProof",
            "687e5f02fa0aa0cdf2d2bf400dc7bb88c12b2a59"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "destruct p; inv H; apply Coq.Init.Logic.I.",
            "VernacExtend",
            "c246f718d16a807c374c045a27bad2d4f8afd715"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ptr_eq_e': forall v1 v2 B, (v1=v2 -> B) -> (ptr_eq v1 v2 -> B).",
            "VernacStartTheoremProof",
            "0f572610e1ba081648043c62c8e6ca8ff108a703"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "apply ptr_eq_e; auto.",
            "VernacExtend",
            "2637ce015907c91ef5b148f17a557c5a5fae4819"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma typed_false_of_bool': forall x (P: Prop), ((x=false) -> P) -> (typed_false tint (Val.of_bool x) -> P).",
            "VernacStartTheoremProof",
            "b785873024649f7919f3bf56e3d8de17601c7f7e"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply H, typed_false_of_bool; auto.",
            "VernacExtend",
            "e2bf1e962adc9e6583a1aeed2a8a581ebf2a1cfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma typed_true_of_bool': forall x (P: Prop), ((x=true) -> P) -> (typed_true tint (Val.of_bool x) -> P).",
            "VernacStartTheoremProof",
            "c8f1dcba1bd683b475fac6bbe8826ad87de00206"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply H, typed_true_of_bool; auto.",
            "VernacExtend",
            "e0fd653d8a38ca6ec67093923bfaa8e6fe215dd2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac intro_if_new := repeat match goal with | |- ?A -> _ => ((assert A by auto; fail 1) || fail 1) || intros _ | |- (_ <-> _) -> _ => intro | |- (?A /\\ ?B) -> ?C => apply (@and_ind A B C) | |- isptr (force_ptr ?P) -> ?Q => apply (isptr_force_ptr'' P Q) | |- isptr (offset_val ?i ?P) -> ?Q => apply (isptr_offset_val'' i P Q) | H: is_pointer_or_null ?P |- isptr ?P -> _ => clear H | |- ?x = ?y -> _ => let H := fresh in intro H; first [subst x | subst y | is_var x; rewrite H | is_var y; rewrite <- H | solve [discriminate H] | idtac] | |- isptr ?x -> _ => let H := fresh \"P\" x in intro H | |- is_pointer_or_null ?x => let H := fresh \"PN\" x in intro H | |- typed_false _ (Val.of_bool _) -> _ => simple apply typed_false_of_bool' | |- typed_true _ (Val.of_bool _) -> _ => simple apply typed_true_of_bool' | |- ptr_eq _ _ -> _ => apply ptr_eq_e' | |- _ -> _ => intro end.",
            "VernacExtend",
            "d801ec0a7ebd9b403d35ad4aba8dc2201451a7c3"
        ],
        [
            "Lemma saturate_aux20: forall (P Q: mpred) P' Q' , P |-- !! P' -> Q |-- !! Q' -> P * Q |-- !! (P' /\\ Q').",
            "VernacStartTheoremProof",
            "38f891c2782a5f4f3506f36f282bafd3d82b7ea1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [apply sepcon_derives; eassumption | ].",
            "VernacExtend",
            "7123b482d8c21a24492d43f41f175f8eda57ecd8"
        ],
        [
            "rewrite sepcon_prop_prop.",
            "VernacExtend",
            "af85456c45e395105b47e0e3ee9f8712249d2ba6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma saturate_aux21: forall (P Q: mpred) S (S': Prop), P |-- S -> S = !!S' -> !! S' && P |-- Q -> P |-- Q.",
            "VernacStartTheoremProof",
            "f116100e0d983e63e1ca098865fe472131657d7b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "eapply derives_trans; [ | eassumption].",
            "VernacExtend",
            "6b926dfcfa6ddb879f1ba2b6b09f8cfaaad047c0"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma saturate_aux21x: forall (P Q S: mpred), P |-- S -> S && P |-- Q -> P |-- Q.",
            "VernacStartTheoremProof",
            "506bd3d904d78766984cbde072e08e22b18bc9ea"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "eapply derives_trans; [ | eassumption].",
            "VernacExtend",
            "6b926dfcfa6ddb879f1ba2b6b09f8cfaaad047c0"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac already_saturated := (match goal with |- ?P |-- ?Q => let H := fresh in assert (H: P |-- Q) by auto with nocore saturate_local; cbv beta in H; match type of H with _ |-- !! ?Q' => assert (Q') by (repeat simple apply conj; auto); fail 3 end end || auto with nocore saturate_local) || simple apply prop_True_right.",
            "VernacExtend",
            "a25afb030bcec59c91d4ef70a6e687edf2e1e2bf"
        ],
        [
            "Ltac saturate_local := simple eapply saturate_aux21x; [repeat simple apply saturate_aux20; auto with nocore saturate_local; simple apply prop_True_right | simple apply derives_extract_prop; match goal with |- _ -> ?A => let P := fresh \"P\" in set (P := A); fancy_intros true; subst P end ].",
            "VernacExtend",
            "4f24698e454fc05d9f958d1d0dd6034ac9370366"
        ],
        [
            "Lemma prop_right_emp {A} {NA: NatDed A}: forall P: Prop, P -> emp |-- !! P.",
            "VernacStartTheoremProof",
            "8b45afc337f8052156197e772c1151d7ee0b1834"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac prop_right_cautious := try solve [simple apply prop_right; auto].",
            "VernacExtend",
            "848713098262dfd404dc8fdeed85be9da3b52345"
        ],
        [
            "Ltac subst_any := repeat match goal with | H: ?x = ?y |- _ => first [ subst x | subst y ] end.",
            "VernacExtend",
            "02659d3065da5400fca051d398645fbf8cfbb59f"
        ],
        [
            "Lemma prop_and_right {A}{NA: NatDed A}: forall (U: A) (X Y: Prop), X -> U |-- !! Y -> U |-- !! (X /\\ Y).",
            "VernacStartTheoremProof",
            "44f4235cdae688de2301ca39afb71cbdd981c824"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply derives_trans with (!!Y); auto.",
            "VernacExtend",
            "a3d1a8c1dccf5864c524dc236aea3f9dc4f1359b"
        ],
        [
            "apply prop_derives; auto.",
            "VernacExtend",
            "9c851d818521d992d36a192373a20cedaaf628d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fold_right_sepcon_subst: forall i e R, fold_right sepcon emp (map (subst i e) R) = subst i e (fold_right sepcon emp R).",
            "VernacStartTheoremProof",
            "a58845599f443f77306419252ec85931c110f59f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction R; auto.",
            "VernacExtend",
            "6f3dcd6572877ec3ed01a5ad17ae15200d25ea39"
        ],
        [
            "autorewrite with subst.",
            "VernacExtend",
            "a0a7cc51d36fa0a311954515c238f15599d651bc"
        ],
        [
            "f_equal; auto.",
            "VernacExtend",
            "8016959cfe83d1ba3fdad91954454045f7af1d22"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unsigned_eq_eq: forall i j, Int.unsigned i = Int.unsigned j -> i = j.",
            "VernacStartTheoremProof",
            "5d87bea555a008151c922a1d48882ca208bceeb4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- (Int.repr_unsigned i), <- (Int.repr_unsigned j).",
            "VernacExtend",
            "cda913186c0460112e2719d382dfc71cfbb6f419"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac solve_mod_eq := unfold Int.add, Int.mul; repeat rewrite Int.unsigned_repr_eq; repeat (repeat rewrite Zmod_mod; repeat rewrite Zmult_mod_idemp_l; repeat rewrite Zmult_mod_idemp_r; repeat rewrite Zplus_mod_idemp_l; repeat rewrite Zplus_mod_idemp_r).",
            "VernacExtend",
            "5c804e24bfd68efa0d06adb19d312dd353a35e3e"
        ],
        [
            "Lemma prop_false_andp {A}{NA :NatDed A}: forall P Q, ~P -> !! P && Q = FF.",
            "VernacStartTheoremProof",
            "f8c66ad7e61d65925cf28ecd3ed6377286fbeaff"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply pred_ext; normalize.",
            "VernacExtend",
            "899b6222eaf5eb0cd6828844b517b3349b8593ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wand_join {A}{NA: NatDed A}{SA: SepLog A}: forall x1 x2 y1 y2: A, (x1 -* y1) * (x2 -* y2) |-- ((x1 * x2) -* (y1 * y2)).",
            "VernacStartTheoremProof",
            "0d9cf124d7d8977a256e2f25fff683a043415842"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- wand_sepcon_adjoint.",
            "VernacExtend",
            "4dfb536b033f51b4ab3daf3908d9495321a9d882"
        ],
        [
            "rewrite sepcon_assoc.",
            "VernacExtend",
            "9c6b8eaecdc27f592c009dd435c2cbd8c074fb8e"
        ],
        [
            "rewrite <- (sepcon_assoc _ x1).",
            "VernacExtend",
            "fa2ce0ac43030cd688f3b8d77fc467245d374471"
        ],
        [
            "rewrite <- (sepcon_comm x1).",
            "VernacExtend",
            "f1db0da470d15dd8b878161f493d05fd94a96785"
        ],
        [
            "rewrite (sepcon_assoc x1).",
            "VernacExtend",
            "2484c9bd5cf2f437b7be0286a3ede3dfaadfaaa9"
        ],
        [
            "rewrite <- (sepcon_assoc _ x1).",
            "VernacExtend",
            "fa2ce0ac43030cd688f3b8d77fc467245d374471"
        ],
        [
            "rewrite <- (sepcon_comm x1).",
            "VernacExtend",
            "f1db0da470d15dd8b878161f493d05fd94a96785"
        ],
        [
            "rewrite <- (sepcon_comm x2).",
            "VernacExtend",
            "e9d39eb99ba507c2c05e75be0e61395d30912513"
        ],
        [
            "apply sepcon_derives.",
            "VernacExtend",
            "5279c4b0e23192edb2904c60cb96eb25409229af"
        ],
        [
            "apply modus_ponens_wand.",
            "VernacExtend",
            "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
        ],
        [
            "apply modus_ponens_wand.",
            "VernacExtend",
            "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wand_sepcon: forall {A} {NA: NatDed A}{SA: SepLog A} P Q, (P -* Q * P) * P = Q * P.",
            "VernacStartTheoremProof",
            "16704634e2420c96aeb8fda8d74eb57909d744ac"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "rewrite sepcon_comm.",
            "VernacExtend",
            "fd2af6f842f71517e95b56c21ef3f6449c4ad38d"
        ],
        [
            "apply modus_ponens_wand.",
            "VernacExtend",
            "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "apply sepcon_derives; auto.",
            "VernacExtend",
            "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
        ],
        [
            "apply -> wand_sepcon_adjoint; auto.",
            "VernacExtend",
            "7998b9628303f616ce6208ae09167ef93e914dc0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wand_sepcon': forall {A} {NA: NatDed A}{SA: SepLog A} P Q, P * (P -* Q * P) = P * Q.",
            "VernacStartTheoremProof",
            "02b50e0e629b0cd664a1f390c3a050ff17426e99"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (sepcon_comm P Q).",
            "VernacExtend",
            "f96c2e4d883b73a9ab747193ba06c236994f2ad9"
        ],
        [
            "rewrite sepcon_comm; apply wand_sepcon.",
            "VernacExtend",
            "df7f4f8e9c0e017fc8a73e4507574ddcc61a377b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite wand_sepcon wand_sepcon' : norm.",
            "VernacExtend",
            "6274865385bec69baee7037d4cedf0961640d4d3"
        ],
        [
            "Lemma extract_nth_exists_in_SEP: forall n P Q (R: list mpred) {A} (S: A -> mpred), nth n R emp = (exp S) -> PROPx P (LOCALx Q (SEPx R)) = exp (fun x => PROPx P (LOCALx Q (SEPx (replace_nth n R (S x))))).",
            "VernacStartTheoremProof",
            "bd4490ad93371d4a1345cec5175c6c71d8327db3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "transitivity (PROPx P (LOCALx Q (EX x:A, SEPx (replace_nth n R (S x))))).",
            "VernacExtend",
            "b6267a4de8636a9ff4cf37e70c7a8ebb1868bcc1"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold SEPx.",
            "VernacExtend",
            "f854f9cf3a2437909acdcb52d99742a8cbb4fa69"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "extensionality rho.",
            "VernacExtend",
            "a6182bb98d71ae2b51b3675429229ccd77d7161f"
        ],
        [
            "revert R H; induction n; destruct R; intros.",
            "VernacExtend",
            "b8a25d4f12fb7688a1d2f2eb1bfb9508a00e63a8"
        ],
        [
            "unfold replace_nth, fold_right.",
            "VernacExtend",
            "defb2727e23d89d82969705d3e4ce9c7f27b69d4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold nth in H.",
            "VernacExtend",
            "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
        ],
        [
            "rewrite H; clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "apply exp_left; intro x.",
            "VernacExtend",
            "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
        ],
        [
            "apply exp_right with x.",
            "VernacExtend",
            "4cdb0700a335441429b2901b4a236f41d452acab"
        ],
        [
            "apply exp_right with x.",
            "VernacExtend",
            "4cdb0700a335441429b2901b4a236f41d452acab"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply exp_left; intro x.",
            "VernacExtend",
            "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold replace_nth, nth in *.",
            "VernacExtend",
            "4a8435274cec102f937031688ff447fbb048706d"
        ],
        [
            "subst m.",
            "VernacExtend",
            "9ba78b8037512180a4349842defa7f5fabdd6010"
        ],
        [
            "unfold fold_right_sepcon.",
            "VernacExtend",
            "4b2db233ebb4776bd02ecdc9717c59b92f9a5355"
        ],
        [
            "fold (fold_right_sepcon R).",
            "VernacExtend",
            "b3926798e7f3ffd481ca5bca835f7207ff2bdb45"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "unfold nth in H.",
            "VernacExtend",
            "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
        ],
        [
            "unfold replace_nth.",
            "VernacExtend",
            "d4869ee4e12f8f5a99822931fcc595373f2308d7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply pred_ext.",
            "VernacExtend",
            "9b03db08834ebab822f3dce151d20d6efb17f5ba"
        ],
        [
            "apply exp_left; intro x.",
            "VernacExtend",
            "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
        ],
        [
            "apply exp_right with x.",
            "VernacExtend",
            "4cdb0700a335441429b2901b4a236f41d452acab"
        ],
        [
            "apply exp_right with x.",
            "VernacExtend",
            "4cdb0700a335441429b2901b4a236f41d452acab"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply exp_left; intro x.",
            "VernacExtend",
            "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold nth in H.",
            "VernacExtend",
            "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
        ],
        [
            "fold (nth n R) in H.",
            "VernacExtend",
            "b2c097511e3b5834070decc1e398092deb9ef13b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (IHn _ H).",
            "VernacExtend",
            "499b2acebef1917a0f45219babdec19374686bea"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "unfold PROPx, LOCALx.",
            "VernacExtend",
            "11d29d6bd68c7a87d70cf0942bbb9bbf72f5ce23"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac extract_exists_in_SEP' PQR := match PQR with | PROPx ?P (LOCALx ?Q (SEPx (?R))) => match R with context [(@exp _ _ ?A ?S) :: ?R'] => let n := constr:((length R - Datatypes.S (length R'))%nat) in let n' := eval lazy beta zeta iota delta in n in rewrite (@extract_nth_exists_in_SEP n' P Q R A S (eq_refl _)); unfold replace_nth at 1; rewrite ?exp_andp2 end end.",
            "VernacExtend",
            "80930564b90a3a7eadd54bb202758245128002a9"
        ],
        [
            "Ltac extract_exists_from_SEP := match goal with | |- semax _ ?Pre _ _ => extract_exists_in_SEP' Pre; apply extract_exists_pre | |- _ && ?Pre |-- ?Post => let P := fresh \"POST\" in set (P := Post); extract_exists_in_SEP' Pre; subst P; apply exp_left | |- ?Pre |-- ?Post => let P := fresh \"POST\" in set (P := Post); extract_exists_in_SEP' Pre; subst P; apply exp_left end.",
            "VernacExtend",
            "66ecf64734e680440c1fcbe9a256fae90dbd90c2"
        ],
        [
            "Ltac move_from_SEP' PQR := match PQR with | PROPx ?P (LOCALx ?Q (SEPx (?R))) => match R with context [(prop ?P1 && ?S) :: ?R'] => let n := constr:((length R - Datatypes.S (length R'))%nat) in let n' := eval lazy beta zeta iota delta in n in rewrite(@extract_prop_in_SEP n' P1 S P Q R (eq_refl _)); unfold replace_nth at 1 end end.",
            "VernacExtend",
            "11f00c8f9a97bce6fa08637d5014fd0da4f2b3da"
        ],
        [
            "Lemma derives_extract_PROP' : forall (P1: Prop) P QR S, (P1 -> PROPx P QR |-- S) -> PROPx (P1::P) QR |-- S.",
            "VernacStartTheoremProof",
            "4d165195fdec28e834cd29a8394b81d713254b13"
        ],
        [
            "unfold PROPx in *.",
            "VernacExtend",
            "5bd7af5350141173917f3ce8296a0cbbef879aeb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite fold_right_cons.",
            "VernacExtend",
            "ef23bd75c5310d0de48ae1e8f4c619275606ee48"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "eapply derives_trans; [ | apply H; auto].",
            "VernacExtend",
            "4f08f85616d6692f71c337d9a389825908bc5dc7"
        ],
        [
            "normalize.",
            "VernacExtend",
            "b44f672ef6622bc7f333c87e081e8283dfd06387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac Intro_prop := autorewrite with gather_prop; match goal with | |- semax _ ?PQR _ _ => first [ is_evar PQR; fail 1 | simple apply semax_extract_PROP; fancy_intros false | move_from_SEP' PQR; simple apply semax_extract_PROP; fancy_intros false | flatten_in_SEP PQR ] | |- _ && ?PQR |-- _ => first [ is_evar PQR; fail 1 | simple apply derives_extract_prop; fancy_intros false | simple apply derives_extract_PROP; fancy_intros false | move_from_SEP' PQR; simple apply derives_extract_PROP; fancy_intros false | flatten_in_SEP PQR ] | |- ?PQR |-- _ => first [ is_evar PQR; fail 1 | simple apply derives_extract_prop; fancy_intros false | simple apply derives_extract_PROP; fancy_intros false | move_from_SEP' PQR; simple apply derives_extract_PROP; fancy_intros false | flatten_in_SEP PQR ] end.",
            "VernacExtend",
            "f4846d43041eab802bbd9afb88bc2c7eddca2779"
        ],
        [
            "Ltac Intro'' a := first [ simple apply extract_exists_pre; intro a | simple apply exp_left; intro a | rewrite exp_andp1; Intro'' a | rewrite exp_andp2; Intro'' a | rewrite exp_sepcon1; Intro'' a | rewrite exp_sepcon2; Intro'' a | extract_exists_from_SEP; intro a ].",
            "VernacExtend",
            "8dc322360d41290d40bf10850e2aee01641155d7"
        ],
        [
            "Ltac Intro a := repeat Intro_prop; match goal with | |- ?A |-- ?B => let z := fresh \"z\" in pose (z:=B); change (A|--z); Intro'' a; subst z | |- semax _ _ _ _ => Intro'' a end.",
            "VernacExtend",
            "36b91a3b5950a0fa38556d4f7f30b1b33b95cbd5"
        ],
        [
            "Tactic Notation \"Intros\" := repeat Intro_prop.",
            "VernacExtend",
            "19ec9afd7085bdbdf8913862617fdb95259d0790"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) := Intro x0; repeat Intro_prop.",
            "VernacExtend",
            "da5c3028e9d5ba1dc0d54b09363e13fc152edc14"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) := Intro x0; Intro x1; repeat Intro_prop.",
            "VernacExtend",
            "f55e67377e66cad32f4704d40adff31933127a9a"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) := Intro x0; Intro x1; Intro x2; repeat Intro_prop.",
            "VernacExtend",
            "2e4289e9d41097293b955fb922597f80e9bd7936"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) := Intro x0; Intro x1; Intro x2; Intro x3; repeat Intro_prop.",
            "VernacExtend",
            "655ef4783ebd382b6ab925cb48acab163104aeb3"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; repeat Intro_prop.",
            "VernacExtend",
            "228454d5de8220bc570b5376c45dfd81d5b56373"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; repeat Intro_prop.",
            "VernacExtend",
            "f9ed151a184559f270005c92200dd1d265f3c14e"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; repeat Intro_prop.",
            "VernacExtend",
            "b7262469b8f4c54275afe1b4e594575712f51836"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) simple_intropattern(x7) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; Intro x7; repeat Intro_prop.",
            "VernacExtend",
            "9a25c6a8093812a3e4a4c9a431b6ddceafede166"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) simple_intropattern(x7) simple_intropattern(x8) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; Intro x7; Intro x8; repeat Intro_prop.",
            "VernacExtend",
            "ffd79a276124a3bee7e39f652d38c2c49c35e4d8"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) simple_intropattern(x7) simple_intropattern(x8) simple_intropattern(x9) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; Intro x7; Intro x8; Intro x9; repeat Intro_prop.",
            "VernacExtend",
            "d018fc9d40572e10e2d5c87dccda04dfcfcc6170"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) simple_intropattern(x7) simple_intropattern(x8) simple_intropattern(x9) simple_intropattern(x10) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; Intro x7; Intro x8; Intro x9; Intro x10; repeat Intro_prop.",
            "VernacExtend",
            "6a8f8ce2b0f4be02f24d20864d15a184af904db7"
        ],
        [
            "Tactic Notation \"Intros\" simple_intropattern(x0) simple_intropattern(x1) simple_intropattern(x2) simple_intropattern(x3) simple_intropattern(x4) simple_intropattern(x5) simple_intropattern(x6) simple_intropattern(x7) simple_intropattern(x8) simple_intropattern(x9) simple_intropattern(x10) simple_intropattern(x11) := Intro x0; Intro x1; Intro x2; Intro x3; Intro x4; Intro x5; Intro x6; Intro x7; Intro x8; Intro x9; Intro x10; Intro x11; repeat Intro_prop.",
            "VernacExtend",
            "2281942b1edc109065b30e2cf68ee66ec9138d85"
        ],
        [
            "Ltac extract_exists_from_SEP_right := match goal with | |- ?Pre |-- ?Post => let P := fresh \"PRE\" in set (P := Pre); extract_exists_in_SEP' Post; subst P end.",
            "VernacExtend",
            "c8e2463e5e81186921e3d8e1d73ee72b165ed970"
        ],
        [
            "Ltac Exists'' a := first [apply exp_right with a | rewrite exp_andp1; Exists'' a | rewrite exp_andp2; Exists'' a | rewrite exp_sepcon1; Exists'' a | rewrite exp_sepcon2; Exists'' a | extract_exists_from_SEP_right; apply exp_right with a ].",
            "VernacExtend",
            "79eb225af61c96b039aade72b46713a70de3ae24"
        ],
        [
            "Ltac Exists' a := match goal with |- ?A |-- ?B => let z := fresh \"z\" in pose (z:=A); change (z|--B); Exists'' a; subst z end.",
            "VernacExtend",
            "2af31dba89eac305ced2e76d2ea4f4a638a0c9c1"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) := Exists' x0.",
            "VernacExtend",
            "6c12d4874758d9f038ef34bc31465fe6de65b4f3"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) := Exists' x0; Exists x1.",
            "VernacExtend",
            "5f08035b165bc0206f3d6fd327bf1bc3d14120b4"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) := Exists' x0; Exists' x1; Exists' x2.",
            "VernacExtend",
            "c9148889fa5d44d6abda59928154b64a9803e4c2"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) := Exists' x0; Exists' x1; Exists' x2; Exists' x3.",
            "VernacExtend",
            "ff5c72d588398c91983712813746b0b87dad1d9d"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4.",
            "VernacExtend",
            "a7b845f9326a0d251199cbb01e1703e30339d39b"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5.",
            "VernacExtend",
            "164dbb8d56e5c4426113709f27b2362766b6fe4f"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6.",
            "VernacExtend",
            "6ca9590afc1421cb57485360e2b085bdff1df818"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7.",
            "VernacExtend",
            "c9a6ebde36e013fd4dbee70580f9c2c3b153dd35"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) constr(x8) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7; Exists' x8.",
            "VernacExtend",
            "7fb50d092795d1a0067cc0d43626bfbfdfca6761"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) constr(x8) constr(x9) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7; Exists' x8; Exists' x9.",
            "VernacExtend",
            "b441ae0b8221942aaca8711a9ae65a7fd8475669"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) constr(x8) constr(x9) constr(x10) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7; Exists' x8; Exists' x9; Exists' x10.",
            "VernacExtend",
            "248653fb9159e49141a2bdceade27070d604089c"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) constr(x8) constr(x9) constr(x10) constr(x11) := Exists' x0; Exists' x1; Exists' x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7; Exists' x8; Exists' x9; Exists' x10; Exists' x11.",
            "VernacExtend",
            "6303152f5a4c3b829b1fe21eeed6efca53204068"
        ],
        [
            "Tactic Notation \"Exists\" constr(x0) constr(x1) constr(x2) constr(x3) constr(x4) constr(x5) constr(x6) constr(x7) constr(x8) constr(x9) constr(x10) constr(x11) constr(x12) := Exists' x0; Exists' x1; Exists x2; Exists' x3; Exists' x4; Exists' x5; Exists' x6; Exists' x7; Exists' x8; Exists' x9; Exists' x10; Exists' x11; Exists' x12.",
            "VernacExtend",
            "19dadc62e2765032c0a8b11348048a72f6d167b3"
        ],
        [
            "Ltac my_evar name T cb := let x := fresh name in evar (x : T); let x' := eval unfold x in x in clear x; cb x'.",
            "VernacExtend",
            "4f94b50243025c994283ea72472d46e43e688315"
        ],
        [
            "Ltac tuple_evar name T cb := lazymatch T with | prod ?A ?B => tuple_evar name A ltac: (fun xA => tuple_evar name B ltac: (fun xB => cb (xA, xB))) | _ => my_evar name T cb end; idtac.",
            "VernacExtend",
            "798a92e72c42351117eb0d068e5c3c0578975859"
        ],
        [
            "Ltac EExists'' := let EExists_core := match goal with [ |- _ |-- EX x:?T, _ ] => tuple_evar x T ltac: (fun x => apply exp_right with x) end; idtac in first [ EExists_core | rewrite exp_andp1; EExists'' | rewrite exp_andp2; EExists'' | rewrite exp_sepcon1; EExists'' | rewrite exp_sepcon2; EExists'' | extract_exists_from_SEP_right; EExists_core ].",
            "VernacExtend",
            "446b22e9dbd277f36d7ad645e0a8343323d501f8"
        ],
        [
            "Ltac EExists' := match goal with |- ?A |-- ?B => let z := fresh \"z\" in pose (z:=A); change (z|--B); EExists''; unfold z at 1; clear z end.",
            "VernacExtend",
            "5fce739ab35fcc5c94ba929631fddbfc679979db"
        ],
        [
            "Ltac EExists := EExists'.",
            "VernacExtend",
            "738e327a7000ccfe7b1f583da831b27541a93021"
        ],
        [
            "Ltac EExists_alt := let T := fresh \"T\" in let x := fresh \"x\" in evar (T:Type); evar (x:T); subst T; Exists x; subst x.",
            "VernacExtend",
            "23d91ee1585ae5be1dc20b6076f78eb4926b140f"
        ],
        [
            "Tactic Notation \"freeze1\" uconstr(a) := let x := fresh \"x\" in set (x:=a); let fr := fresh \"freeze\" in pose (fr := @abbreviate mpred x); change x with fr; subst x.",
            "VernacExtend",
            "b31805039d4dfd075f4bbd3bb613a3922d0816d8"
        ]
    ],
    "proofs": [
        {
            "name": "SEP_entail",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_left2.",
                        "VernacExtend",
                        "3da478e31ab10133b2816f729b2ec71358922e85"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto.",
                        "VernacExtend",
                        "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto.",
                        "VernacExtend",
                        "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
                    ]
                },
                {
                    "command": [
                        "intro rho.",
                        "VernacExtend",
                        "340a6646b01296f706bfd718a4f2fa78cb01cc3b"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SEP_entail'",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_right.",
                        "VernacExtend",
                        "614688b80ee6a44f752e79383d4234d6d5dfcee8"
                    ]
                },
                {
                    "command": [
                        "apply andp_left2; apply andp_left1; auto.",
                        "VernacExtend",
                        "72350d488d3ae4acb1e691fc4dfad896db03ed15"
                    ]
                },
                {
                    "command": [
                        "apply andp_right.",
                        "VernacExtend",
                        "614688b80ee6a44f752e79383d4234d6d5dfcee8"
                    ]
                },
                {
                    "command": [
                        "do 2 apply andp_left2; apply andp_left1; auto.",
                        "VernacExtend",
                        "976c1a4542f7b8557f78cefd72ae0d84be878a1f"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ apply H|].",
                        "VernacExtend",
                        "3347c43ca1169b3753f425fe9168d7ada84b8462"
                    ]
                },
                {
                    "command": [
                        "apply derives_refl.",
                        "VernacExtend",
                        "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "func_ptr'_isptr",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold func_ptr'.",
                        "VernacExtend",
                        "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
                    ]
                },
                {
                    "command": [
                        "apply andp_left1.",
                        "VernacExtend",
                        "527caf3623c2439da127093a10760d6fffcc2032"
                    ]
                },
                {
                    "command": [
                        "apply func_ptr_isptr.",
                        "VernacExtend",
                        "dcd024b36b90e44831836ec061fa1531b685a11d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_func_ptr'",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold func_ptr'.",
                        "VernacExtend",
                        "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
                    ]
                },
                {
                    "command": [
                        "pose proof (corable_func_ptr fs p).",
                        "VernacExtend",
                        "ba41baf17f110667b97a2d647f81cf5142b903be"
                    ]
                },
                {
                    "command": [
                        "rewrite corable_andp_sepcon1 by auto.",
                        "VernacExtend",
                        "d384eff4333b5ab486871706d9c11844def48c52"
                    ]
                },
                {
                    "command": [
                        "rewrite emp_sepcon.",
                        "VernacExtend",
                        "df65e2010e4babcc45591f5b17e65df5cd76a9f9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- andp_assoc.",
                        "VernacExtend",
                        "af620aa2f90527d6460b0d98a5bf2930b4fc0390"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "apply andp_left2; auto.",
                        "VernacExtend",
                        "624d28bb04e617622cc0cb522526420dfef62500"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "approx_func_ptr'",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold func_ptr'.",
                        "VernacExtend",
                        "bc1a54bbaa7b27155f3ac9160a06293f287e664c"
                    ]
                },
                {
                    "command": [
                        "rewrite !approx_andp; f_equal.",
                        "VernacExtend",
                        "9e3ac09d2cf2258cd359de278d63aff8366f7219"
                    ]
                },
                {
                    "command": [
                        "apply (approx_func_ptr A fsig0 cc P Q).",
                        "VernacExtend",
                        "66edb6b021127a00e25a35b5c56954fd20ede7f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_unfold",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_unfoldC",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift1_unfold",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift1_unfoldC",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift2_unfold",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift2_unfoldC",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift3_unfold",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift3_unfoldC",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift4_unfold",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift4_unfoldC",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift0",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift0'",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift0C",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift1",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift1'",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift1C",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift2",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift2'",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift2C",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift3",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift3'",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift3C",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift4",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift4'",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lift4C",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_val_int_eq_e",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Cop.bool_val in H.",
                        "VernacExtend",
                        "fd4d81b21bc510af5c3472cefbf2a69b296a45d7"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; revert H; case_eq (Val.of_bool (Int.eq i j)); simpl; intros; inv H0.",
                        "VernacExtend",
                        "aee6679bec319ca47e919e3b83ef1412b0f57f31"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.eq_spec i j).",
                        "VernacExtend",
                        "f7bbb03de7c4316b05019a9051af52b5cf9fea35"
                    ]
                },
                {
                    "command": [
                        "revert H H0; case_eq (Int.eq i j); intros; auto.",
                        "VernacExtend",
                        "326350a0578f9e89732bf7eef46431c0ea238403"
                    ]
                },
                {
                    "command": [
                        "simpl in H0; unfold Vfalse in H0.",
                        "VernacExtend",
                        "229f5ecfc913a859b894b11b12be8568abcf8b75"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "52c34ef20c88d5292e2350aff94f149a3968b772"
                    ]
                },
                {
                    "command": [
                        "rewrite Int.eq_true in H2.",
                        "VernacExtend",
                        "65c759401ff2c44b648c7fc96a245e1d7d6cc9e4"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "6144021562e950304ba8e947fdc2423691182458"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "pose proof (Int.eq_spec i j).",
                        "VernacExtend",
                        "f7bbb03de7c4316b05019a9051af52b5cf9fea35"
                    ]
                },
                {
                    "command": [
                        "revert H H0; case_eq (Int.eq i j); intros; auto.",
                        "VernacExtend",
                        "326350a0578f9e89732bf7eef46431c0ea238403"
                    ]
                },
                {
                    "command": [
                        "simpl in H0; unfold Vfalse in H0.",
                        "VernacExtend",
                        "229f5ecfc913a859b894b11b12be8568abcf8b75"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "52c34ef20c88d5292e2350aff94f149a3968b772"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "6144021562e950304ba8e947fdc2423691182458"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "unfold Val.of_bool in H.",
                        "VernacExtend",
                        "02fb80e80a45cefffb473c3114d2d7456656f59e"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i j); inv H.",
                        "VernacExtend",
                        "a3978e011242e15e209d11fc8d465e81f8364658"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_val_notbool_ptr",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t; try contradiction.",
                        "VernacExtend",
                        "37a4c4441b6bd8b57ed0e2c36325477022fca69e"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "unfold Cop.sem_notbool, Cop.bool_val, Val.of_bool, Cop.classify_bool, nullval.",
                        "VernacExtend",
                        "1e7e36898801b304587dc96f5b2cbbbf119c7257"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; simpl; apply prop_ext; split; intros.",
                        "VernacExtend",
                        "503db00434817eb1026a3bbc33c475e62f6380e9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct v; simpl in H; try solve [inv H].",
                        "VernacExtend",
                        "2bc7272df7292ee123c4fbec6a9349801952d349"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.eq i Int64.zero) eqn:?; inv H.",
                        "VernacExtend",
                        "9926c5d0737646d11b40cce4940809583b077139"
                    ]
                },
                {
                    "command": [
                        "apply expr_lemmas.int64_eq_e in Heqb.",
                        "VernacExtend",
                        "f6259dce2ad2ab5f5dba12856011e666ed88be1a"
                    ]
                },
                {
                    "command": [
                        "subst; reflexivity.",
                        "VernacExtend",
                        "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
                    ]
                },
                {
                    "command": [
                        "destruct (Memory.Mem.weak_valid_pointer m b (Ptrofs.unsigned i)) eqn:?; simpl in H; inv H.",
                        "VernacExtend",
                        "29da77b5fafcb33383066048354c0f0b8adebf1b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "subst v; simpl.",
                        "VernacExtend",
                        "3c65c95e4452afff6ce94fbe487fd75ff67ab043"
                    ]
                },
                {
                    "command": [
                        "rewrite Int64.eq_true.",
                        "VernacExtend",
                        "8cead271a0856a262b888c89c5d66dc76f21587b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct v; simpl in H; try solve [inv H].",
                        "VernacExtend",
                        "2bc7272df7292ee123c4fbec6a9349801952d349"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i Int.zero) eqn:?; inv H.",
                        "VernacExtend",
                        "2bff880c571abe4f1b1810c49bf591daf63d6905"
                    ]
                },
                {
                    "command": [
                        "apply int_eq_e in Heqb.",
                        "VernacExtend",
                        "9c36344c5974bf7d74aebfc0daf3595126269075"
                    ]
                },
                {
                    "command": [
                        "subst; reflexivity.",
                        "VernacExtend",
                        "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
                    ]
                },
                {
                    "command": [
                        "destruct (Memory.Mem.weak_valid_pointer m b (Ptrofs.unsigned i)) eqn:?; simpl in H; inv H.",
                        "VernacExtend",
                        "29da77b5fafcb33383066048354c0f0b8adebf1b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "subst v; simpl.",
                        "VernacExtend",
                        "3c65c95e4452afff6ce94fbe487fd75ff67ab043"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "simpl_get_result1",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros; extensionality rho.",
                        "VernacExtend",
                        "876c9ddd2c67098fb113bf57fc855e1053ecc44d"
                    ]
                },
                {
                    "command": [
                        "unfold_lift; unfold retval, get_result1.",
                        "VernacExtend",
                        "26cd59f0315913c7aef89e46eca82791d6f71302"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "retval_get_result1",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold retval, get_result1.",
                        "VernacExtend",
                        "6b9969a2386b5e3b8fb5399241fac2ea95619f6a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "retval_ext_rval",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold retval, eval_id; simpl.",
                        "VernacExtend",
                        "872a57bcb35473411c326374a231cc25178e2309"
                    ]
                },
                {
                    "command": [
                        "unfold make_ext_rval; simpl.",
                        "VernacExtend",
                        "90714d372292fe11e7a824903f15ccd317e91217"
                    ]
                },
                {
                    "command": [
                        "destruct v; simpl; auto.",
                        "VernacExtend",
                        "e0983a21ce967d56e72934fc217986c85bcd413e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "retval_lemma1",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold retval.",
                        "VernacExtend",
                        "e51e70e0075c1a8cdbd06cfbce7a392f0501f001"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "retval_make_args",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold retval, eval_id; simpl.",
                        "VernacExtend",
                        "872a57bcb35473411c326374a231cc25178e2309"
                    ]
                },
                {
                    "command": [
                        "try rewrite Map.gss.",
                        "VernacExtend",
                        "5bab39c9285f260d1fadc2be7e02ed2b7bdfe281"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andp_makeargs",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "local_makeargs",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "simpl_and_get_result1",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "liftx_local_retval",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vint_inj'",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; split; intro; congruence.",
                        "VernacExtend",
                        "b7a8a01b54c71b9e6ec8a4648fb3bb89a8073b43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "overridePost_normal_right",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct R; simpl; auto.",
                        "VernacExtend",
                        "028f93a98cf8b18f8535efa98f89cc97004d5837"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_right_PROP_SEP_spec",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (fold_right_and_True l1 <-> fold_right and True l1).",
                        "VernacExtend",
                        "2f19e68da5453f3ec34e95e816acf2c6da1e34b7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "destruct l1; [tauto |].",
                        "VernacExtend",
                        "46163c501783aaf8b5ed6cf240fdcf5615873360"
                    ]
                },
                {
                    "command": [
                        "revert P; induction l1; intros.",
                        "VernacExtend",
                        "c16fc78316f2af84c8c7108ad633562f305a6bfb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl; tauto.",
                        "VernacExtend",
                        "2c27d7b56602355c3ed4605e551cd6a88509ac37"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "change (P /\\ fold_right_and_True (a :: l1) <-> P /\\ fold_right and True (a :: l1)).",
                        "VernacExtend",
                        "7705bfa28d6fc34fc6f4a146f254adfb4cc88189"
                    ]
                },
                {
                    "command": [
                        "specialize (IHl1 a).",
                        "VernacExtend",
                        "70925cf81dc8707f5285d9377eb41789f5d78491"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "destruct l1.",
                        "VernacExtend",
                        "9d980bd7c4dba1bbd3fdfae643479b8d8129e3a6"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "unfold fold_right_PROP_SEP.",
                        "VernacExtend",
                        "01106fc230c98f6fb21b6567ab7b3eaf59c37485"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "typed_true_isptr",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality x; apply prop_ext.",
                        "VernacExtend",
                        "f373a829f7cc3540969d06dc7a13a35679457131"
                    ]
                },
                {
                    "command": [
                        "unfold typed_true, bool_val, strict_bool_val, isptr.",
                        "VernacExtend",
                        "7530d1cc6b9da7651c54dfe1fe5c116373be0ffb"
                    ]
                },
                {
                    "command": [
                        "destruct t; try contradiction; destruct Archi.ptr64 eqn:Hp; destruct x; intuition; try congruence; revert H0; simple_if_tac; intro H0; inv H0.",
                        "VernacExtend",
                        "ef6ebc766e120cb07f933cdf5722558f86f87faf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tc_eval'_id_i",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tc_environ in H.",
                        "VernacExtend",
                        "6b751d57f1f5218a4208987f38f04de4032020ec"
                    ]
                },
                {
                    "command": [
                        "destruct rho.",
                        "VernacExtend",
                        "6cc871126b85794491ba19e6998567dc6038cbe6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? _].",
                        "VernacExtend",
                        "8866aea99b3fa2b02b2674afa91c0a8f539221fc"
                    ]
                },
                {
                    "command": [
                        "destruct (H i t H0) as [v [? ?]].",
                        "VernacExtend",
                        "e3491dd46a49fb96f9caf269c719dda48ee18405"
                    ]
                },
                {
                    "command": [
                        "unfold eval_id.",
                        "VernacExtend",
                        "ea2fa7a188f5192bb4f11fe06fd53e4576051073"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_int_e",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct i,s,v; try inv H; simpl; eauto.",
                        "VernacExtend",
                        "e5e0434eb174044a06e727e90c4551ee19659a82"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_true_negb",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "destruct a; auto; try contradiction.",
                        "VernacExtend",
                        "a7bad6675bdb437bd38dd8fe98369fc019440c28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cast_pointer2'",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cast, classify_cast, force_val; simpl.",
                        "VernacExtend",
                        "d962e03a0ed2738a8189d99dc050ca36c4c0d07b"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; destruct t1; try contradiction; try destruct i; try contradiction; auto; destruct t2; try contradiction; try destruct i; try contradiction; auto; try rewrite (is_true_negb _ H); try rewrite (is_true_negb _ H0); destruct v; inv H1; auto.",
                        "VernacExtend",
                        "05b1e9b0f1b9cfc24b1f3477c2ba485de6f54b6e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cast_pointer2",
            "line_nb": 346,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "hnf in H1.",
                        "VernacExtend",
                        "94324ef603315a47e5f4c48a0cd13f6c1b983007"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "rewrite andb_false_r in H1.",
                        "VernacExtend",
                        "e10ec7be4a48233fbbbdc84027082dc61fc685c7"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cast, classify_cast; simpl.",
                        "VernacExtend",
                        "a66bc5edd0224db7ecfda4f1df50fe1e42a20b61"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_null_force_int_ptr",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_force_int_ptr",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_null_match",
            "line_nb": 377,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_force_int_ptr2",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_null_force_int_ptr2",
            "line_nb": 387,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_match",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_pointer_or_null.",
                        "VernacExtend",
                        "2a27c4cad8b275f71db5053f51aa84341f9fe697"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; destruct w0; auto.",
                        "VernacExtend",
                        "567e37e157d552a652bc197a1e36b208fcdcf887"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_cast_neutral_tc_val",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H as [t [? ?]].",
                        "VernacExtend",
                        "443009c21a790c32b1e7d495a0142f0ce246aa39"
                    ]
                },
                {
                    "command": [
                        "hnf in H.",
                        "VernacExtend",
                        "b998e5ae98dd847416f4f194f30407c3597ea052"
                    ]
                },
                {
                    "command": [
                        "unfold is_pointer_type in H0.",
                        "VernacExtend",
                        "1167f9445c04a48f7493ab2b9c58b23b9c8a4d48"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cast_pointer.",
                        "VernacExtend",
                        "ae700d3638ba3deec7e36b746dd48abc0ff65f3c"
                    ]
                },
                {
                    "command": [
                        "destruct (eqb_type t int_or_ptr_type); destruct t,v; inv H0; inv H; reflexivity.",
                        "VernacExtend",
                        "563c5d39417aac78c2eaa5798eb1b7121933b427"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_cast_neutral_is_pointer_or_null",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_pointer_or_null_eval_cast_neutral",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "destruct v; reflexivity.",
                        "VernacExtend",
                        "beabf874ed29da22e359852b1295f94335ce2ef1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_cast_neutral_isptr",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct v; inv H; reflexivity.",
                        "VernacExtend",
                        "1a9d83b5c13cc9c2f06859649b5adcfea0922b71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "raise_sepcon",
            "line_nb": 423,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift1_lift1_retval",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "unfold lift1.",
                        "VernacExtend",
                        "243bfae82e0d234df94bea1d8678791da60b98b0"
                    ]
                },
                {
                    "command": [
                        "f_equal; normalize.",
                        "VernacExtend",
                        "7d3e8ad500104bf31626868549b23fda4ce618fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_lift_retval",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_lift_x",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_exp",
            "line_nb": 441,
            "steps": [
                {
                    "command": [
                        "intros; extensionality rho; unfold lift0.",
                        "VernacExtend",
                        "de39cb9c16e6b7b06a369e7c3b386491b30ab7be"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal; extensionality b; auto.",
                        "VernacExtend",
                        "7d4c4431020b15545e791c15663b072aee64dae6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0C_exp",
            "line_nb": 446,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold_lift.",
                        "VernacExtend",
                        "49cc678292f20068718dd6f7d6f838fc96506b4c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "f_equal; extensionality x; auto.",
                        "VernacExtend",
                        "4478ab1cc5b1217a631af0e9ace51ba45b3d70fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_andp",
            "line_nb": 455,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0C_andp",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_prop",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; reflexivity.",
                        "VernacExtend",
                        "589a2c0d243558c6b3f8c078f52476efd4af4efe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0C_prop",
            "line_nb": 469,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_sepcon",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0C_sepcon",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0_later",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0C_later",
            "line_nb": 484,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fst_unfold",
            "line_nb": 494,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "snd_unfold",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_True",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derives_extract_PROP",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "unfold PROPx in *.",
                        "VernacExtend",
                        "5bd7af5350141173917f3ce8296a0cbbef879aeb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_right_cons.",
                        "VernacExtend",
                        "ef23bd75c5310d0de48ae1e8f4c619275606ee48"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ | apply H; auto].",
                        "VernacExtend",
                        "4f08f85616d6692f71c337d9a389825908bc5dc7"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "local_andp_prop",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_comm.",
                        "VernacExtend",
                        "c3dd1c812b539bbcf23c38f415fc0d445780852e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "local_andp_prop1",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite andp_comm.",
                        "VernacExtend",
                        "f42ee316a55b2a9216373e6b515ce4b77ae502d5"
                    ]
                },
                {
                    "command": [
                        "rewrite andp_assoc.",
                        "VernacExtend",
                        "200650b65aadcd7d8884ebc4a7dde1f9da41d9ca"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply andp_comm.",
                        "VernacExtend",
                        "c3dd1c812b539bbcf23c38f415fc0d445780852e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "local_sepcon_assoc1",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; unfold local, lift1; simpl.",
                        "VernacExtend",
                        "83572d3849f4ae3649c48d65d59a476a5a2ccbfc"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext; normalize.",
                        "VernacExtend",
                        "899b6222eaf5eb0cd6828844b517b3349b8593ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "local_sepcon_assoc2",
            "line_nb": 530,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; unfold local, lift1; simpl.",
                        "VernacExtend",
                        "83572d3849f4ae3649c48d65d59a476a5a2ccbfc"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext; normalize.",
                        "VernacExtend",
                        "899b6222eaf5eb0cd6828844b517b3349b8593ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andp_later_derives",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite later_andp.",
                        "VernacExtend",
                        "4f91f5654d2f8262e470e7fc21baefb6cfe9b423"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto.",
                        "VernacExtend",
                        "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sepcon_later_derives",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite later_sepcon.",
                        "VernacExtend",
                        "225a686e751b49c4cee23f6afcc12f6fb2adb091"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_derives; auto.",
                        "VernacExtend",
                        "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_true_andp1",
            "line_nb": 597,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "f_equal; auto.",
                        "VernacExtend",
                        "8016959cfe83d1ba3fdad91954454045f7af1d22"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_assoc'",
            "line_nb": 605,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; apply and_assoc.",
                        "VernacExtend",
                        "9db1462d96ced605d09aa016b40430168898cce4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_assoc_splittablex",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite and_assoc'; auto.",
                        "VernacExtend",
                        "7aae6f98f815179dda55cae0a0a19db4e65011ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_assoc''",
            "line_nb": 615,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite and_assoc'; auto.",
                        "VernacExtend",
                        "7aae6f98f815179dda55cae0a0a19db4e65011ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "semax_later_trivial",
            "line_nb": 622,
            "steps": [
                {
                    "command": [
                        "intros until Q.",
                        "VernacExtend",
                        "47276f218fb911d3882586a3efb882ac4abb8bf0"
                    ]
                },
                {
                    "command": [
                        "apply semax_pre0.",
                        "VernacExtend",
                        "a6b1cecdadd78261ec60278760b40aec8153c5f8"
                    ]
                },
                {
                    "command": [
                        "apply now_later.",
                        "VernacExtend",
                        "8b8d74d1fb07b10823969bd9c13aeaec0da69b56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_and1",
            "line_nb": 630,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply prop_ext; intuition.",
                        "VernacExtend",
                        "349e5a119c4364173cef29155dcabbc16e701a81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_make_args'",
            "line_nb": 635,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold_lift.",
                        "VernacExtend",
                        "49cc678292f20068718dd6f7d6f838fc96506b4c"
                    ]
                },
                {
                    "command": [
                        "extensionality rho; unfold subst.",
                        "VernacExtend",
                        "c507cdd342fee2d7b94bf74805b6a9f921917d15"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold make_args'.",
                        "VernacExtend",
                        "671fc5b2fbcecc49267953eda683854f8e57ffe8"
                    ]
                },
                {
                    "command": [
                        "revert tl el H H0; induction (fst fsig); destruct tl,el; simpl; intros; inv H; inv H0.",
                        "VernacExtend",
                        "645814d352b4d057afaf8af0e429b2bd60bbc881"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "specialize (IHl _ _ H2 H1).",
                        "VernacExtend",
                        "0d38198c33951b8dcb6a60c2f13eff4d4b7da721"
                    ]
                },
                {
                    "command": [
                        "unfold_lift; rewrite IHl.",
                        "VernacExtend",
                        "076016a25428d46854c80294ad72b734321b8b54"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cons",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_nil",
            "line_nb": 653,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_stackframe_of",
            "line_nb": 659,
            "steps": [
                {
                    "command": [
                        "unfold stackframe_of; simpl; intros.",
                        "VernacExtend",
                        "01152fccdfa4764295726cfc71c6e4fa6542eaac"
                    ]
                },
                {
                    "command": [
                        "unfold subst.",
                        "VernacExtend",
                        "f1c20e94172b6ea3ded32c0ce8684e12e458c841"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "induction (fn_vars f).",
                        "VernacExtend",
                        "30d8693e7c1f304e20cc5b564c9f4ade27550b37"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl map.",
                        "VernacExtend",
                        "09bcd1b174cca4985ee08b62f9f955b2e346c941"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite fold_right_cons.",
                        "VernacExtend",
                        "96708de690f8302544dc5df1f2c9fc5d5c162fd4"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply IHl.",
                        "VernacExtend",
                        "af412c6009bba78f939aa53ab07dcd1baaf5888b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_localdef_temp_PROP",
            "line_nb": 671,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; intro old.",
                        "VernacExtend",
                        "c5f6de70ad7767ceec54d1e9486feb634a301bf1"
                    ]
                },
                {
                    "command": [
                        "unfold PROPx.",
                        "VernacExtend",
                        "593deff54c68c9f1e69c515e783782e0f285a65f"
                    ]
                },
                {
                    "command": [
                        "autorewrite with subst norm.",
                        "VernacExtend",
                        "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto.",
                        "VernacExtend",
                        "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
                    ]
                },
                {
                    "command": [
                        "unfold LOCALx.",
                        "VernacExtend",
                        "ea2b6e61532874513c5a254a27d6c9d225642880"
                    ]
                },
                {
                    "command": [
                        "autorewrite with subst norm.",
                        "VernacExtend",
                        "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto; try apply derives_refl.",
                        "VernacExtend",
                        "86513f1cfce645363bdad292ed07c538173cb28e"
                    ]
                },
                {
                    "command": [
                        "induction Q; simpl fold_right.",
                        "VernacExtend",
                        "a71d181de6ff943b6384d9735facbd1b309308b5"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "autorewrite with subst norm; auto.",
                        "VernacExtend",
                        "7fd82144eaa08c04d9e9bb670590593c70cbc9cb"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct a; [if_tac | ..]; autorewrite with subst norm.",
                        "VernacExtend",
                        "4969eaaf99625abc6d906b92f77e70f2bf60e860"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [| exact IHQ].",
                        "VernacExtend",
                        "e2b601aba46ff898ebd79e9cd909179099998338"
                    ]
                },
                {
                    "command": [
                        "rewrite local_lift2_and.",
                        "VernacExtend",
                        "986b9fa2daf3650b1ce30928d38c6bfea6661450"
                    ]
                },
                {
                    "command": [
                        "apply andp_left2; apply derives_refl.",
                        "VernacExtend",
                        "7a76256980f607cdeebcf98c78b313c9997d49d1"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite !local_lift2_and.",
                        "VernacExtend",
                        "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; [| exact IHQ].",
                        "VernacExtend",
                        "0b186a67596e527c27b51851f9aa6fd84a2aa438"
                    ]
                },
                {
                    "command": [
                        "unfold locald_denote.",
                        "VernacExtend",
                        "9cd050d8a7ce1d2ab993dff0dfd53569b39bd572"
                    ]
                },
                {
                    "command": [
                        "autorewrite with subst norm.",
                        "VernacExtend",
                        "9644a9fd947fa88439e2dfcd94c1f7109eb3ddde"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intros ?.",
                        "VernacExtend",
                        "200c215978605109d2096ffc5fb38cb924dbe09c"
                    ]
                },
                {
                    "command": [
                        "apply prop_derives; simpl.",
                        "VernacExtend",
                        "b57534ed3f028abed291873bdf992b9865356741"
                    ]
                },
                {
                    "command": [
                        "unfold subst; simpl; intros.",
                        "VernacExtend",
                        "d3fd5205f934a35e0db4d4df4bf3089b9b38b1b6"
                    ]
                },
                {
                    "command": [
                        "rewrite eval_id_other in H0 by auto; auto.",
                        "VernacExtend",
                        "60f18cec310b5ce47bb5fabc560e30819f7b6088"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite !local_lift2_and.",
                        "VernacExtend",
                        "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; [| exact IHQ].",
                        "VernacExtend",
                        "0b186a67596e527c27b51851f9aa6fd84a2aa438"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intros rho.",
                        "VernacExtend",
                        "2ff5f2edcafe0a092c52c53b19def8e34a6d89ba"
                    ]
                },
                {
                    "command": [
                        "unfold subst; simpl.",
                        "VernacExtend",
                        "a3e5350451cf787f4feb735d28b119bfe8e5958a"
                    ]
                },
                {
                    "command": [
                        "apply derives_refl.",
                        "VernacExtend",
                        "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite !local_lift2_and.",
                        "VernacExtend",
                        "a8239a7c1f4076aa7e402b0fcca555e79fc93422"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; [| exact IHQ].",
                        "VernacExtend",
                        "0b186a67596e527c27b51851f9aa6fd84a2aa438"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; intros rho.",
                        "VernacExtend",
                        "2ff5f2edcafe0a092c52c53b19def8e34a6d89ba"
                    ]
                },
                {
                    "command": [
                        "unfold subst; simpl.",
                        "VernacExtend",
                        "a3e5350451cf787f4feb735d28b119bfe8e5958a"
                    ]
                },
                {
                    "command": [
                        "apply derives_refl.",
                        "VernacExtend",
                        "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eval_id_denote_tc_initialized",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intros rho.",
                        "VernacExtend",
                        "a2c73e9d721b33bd236ef5f63ee08f19792dc61e"
                    ]
                },
                {
                    "command": [
                        "unfold local, lift1; unfold_lift; simpl.",
                        "VernacExtend",
                        "4fd0b5977d5d95d8735eb85937245f7419d05295"
                    ]
                },
                {
                    "command": [
                        "rewrite <- prop_and; apply prop_derives.",
                        "VernacExtend",
                        "fcc16f8a5a1f773302601ad984ef48fbd06c1399"
                    ]
                },
                {
                    "command": [
                        "intros [? [? ?]].",
                        "VernacExtend",
                        "db705afca806406a16da0469510bc59aa5887a38"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? _].",
                        "VernacExtend",
                        "1e578e84e7a531f32f36c087bbd511d26e131ff7"
                    ]
                },
                {
                    "command": [
                        "specialize (H0 _ _ H).",
                        "VernacExtend",
                        "2147e107b26814d791c0307b50f6d85f1bac2910"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [v0 [? ?]].",
                        "VernacExtend",
                        "1bcf7f30aff8df169b5eb98d7e457cff8783fa43"
                    ]
                },
                {
                    "command": [
                        "unfold eval_id in H1.",
                        "VernacExtend",
                        "1246606c19fcf82fcc6501e6f69695fb4198650f"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in *; clear H0; subst v; rename v0 into v.",
                        "VernacExtend",
                        "65646a375f199e68410744ad6b4a5e0205552df2"
                    ]
                },
                {
                    "command": [
                        "simpl in H2.",
                        "VernacExtend",
                        "b1e247c43b6623097ab13813b4de664287dd4249"
                    ]
                },
                {
                    "command": [
                        "specialize (H3 H2).",
                        "VernacExtend",
                        "70270aa21722742049bdcc112f76ecc58b396334"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derives_remove_localdef_PQR",
            "line_nb": 734,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "go_lowerx.",
                        "VernacExtend",
                        "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "apply prop_right.",
                        "VernacExtend",
                        "951daa52f148695942d4aefc563d5e92d8ec02ff"
                    ]
                },
                {
                    "command": [
                        "clear H; rename H0 into H.",
                        "VernacExtend",
                        "79e96b6fba73ea37e348617d0b1ce685fd4733ec"
                    ]
                },
                {
                    "command": [
                        "induction Q; simpl in *; auto.",
                        "VernacExtend",
                        "075747fe4db272f97a696a5d7d73906311f738be"
                    ]
                },
                {
                    "command": [
                        "destruct a; try now (destruct H; simpl in *; split; auto).",
                        "VernacExtend",
                        "8bfd82f9df6f66340c2b91c0539af749e5c624ea"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "if_tac; simpl in *; auto.",
                        "VernacExtend",
                        "faf14ff9d58b9a92c0203196c65bc7e9ae634d54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_remove_localdef_PQR",
            "line_nb": 745,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "go_lowerx.",
                        "VernacExtend",
                        "b779c117d7d09a3200f3f548bb905f7d0a7246f6"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "apply prop_right.",
                        "VernacExtend",
                        "951daa52f148695942d4aefc563d5e92d8ec02ff"
                    ]
                },
                {
                    "command": [
                        "clear H; rename H0 into H.",
                        "VernacExtend",
                        "79e96b6fba73ea37e348617d0b1ce685fd4733ec"
                    ]
                },
                {
                    "command": [
                        "induction Q; simpl in *; auto.",
                        "VernacExtend",
                        "075747fe4db272f97a696a5d7d73906311f738be"
                    ]
                },
                {
                    "command": [
                        "destruct a; try now (destruct H; simpl in *; split; auto).",
                        "VernacExtend",
                        "8bfd82f9df6f66340c2b91c0539af749e5c624ea"
                    ]
                },
                {
                    "command": [
                        "if_tac; simpl in *; auto.",
                        "VernacExtend",
                        "faf14ff9d58b9a92c0203196c65bc7e9ae634d54"
                    ]
                },
                {
                    "command": [
                        "destruct H; split; auto.",
                        "VernacExtend",
                        "6b0b617ec55939190e129ebd913eb5389aac7738"
                    ]
                },
                {
                    "command": [
                        "unfold_lift in H.",
                        "VernacExtend",
                        "0a1066f59459f9c869906996c139bea7b2fb2401"
                    ]
                },
                {
                    "command": [
                        "destruct H; subst.",
                        "VernacExtend",
                        "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
                    ]
                },
                {
                    "command": [
                        "unfold_lift.",
                        "VernacExtend",
                        "49cc678292f20068718dd6f7d6f838fc96506b4c"
                    ]
                },
                {
                    "command": [
                        "rewrite eval_id_other in * by auto.",
                        "VernacExtend",
                        "7a541593cb9596c9766c12ca13b4c69233c0c2c7"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_force_ptr''",
            "line_nb": 763,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply X.",
                        "VernacExtend",
                        "1a06263bf241d2c272a11be0f0a1522334cc2c93"
                    ]
                },
                {
                    "command": [
                        "destruct p; inv H; apply Coq.Init.Logic.I.",
                        "VernacExtend",
                        "c246f718d16a807c374c045a27bad2d4f8afd715"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_offset_val''",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply X.",
                        "VernacExtend",
                        "1a06263bf241d2c272a11be0f0a1522334cc2c93"
                    ]
                },
                {
                    "command": [
                        "destruct p; inv H; apply Coq.Init.Logic.I.",
                        "VernacExtend",
                        "c246f718d16a807c374c045a27bad2d4f8afd715"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_e'",
            "line_nb": 773,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply X.",
                        "VernacExtend",
                        "1a06263bf241d2c272a11be0f0a1522334cc2c93"
                    ]
                },
                {
                    "command": [
                        "apply ptr_eq_e; auto.",
                        "VernacExtend",
                        "2637ce015907c91ef5b148f17a557c5a5fae4819"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "typed_false_of_bool'",
            "line_nb": 778,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply H, typed_false_of_bool; auto.",
                        "VernacExtend",
                        "e2bf1e962adc9e6583a1aeed2a8a581ebf2a1cfc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "typed_true_of_bool'",
            "line_nb": 782,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply H, typed_true_of_bool; auto.",
                        "VernacExtend",
                        "e0fd653d8a38ca6ec67093923bfaa8e6fe215dd2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "saturate_aux20",
            "line_nb": 787,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [apply sepcon_derives; eassumption | ].",
                        "VernacExtend",
                        "7123b482d8c21a24492d43f41f175f8eda57ecd8"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_prop_prop.",
                        "VernacExtend",
                        "af85456c45e395105b47e0e3ee9f8712249d2ba6"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "saturate_aux21",
            "line_nb": 793,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ | eassumption].",
                        "VernacExtend",
                        "6b926dfcfa6ddb879f1ba2b6b09f8cfaaad047c0"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "saturate_aux21x",
            "line_nb": 799,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ | eassumption].",
                        "VernacExtend",
                        "6b926dfcfa6ddb879f1ba2b6b09f8cfaaad047c0"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_right_emp",
            "line_nb": 807,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_and_right",
            "line_nb": 813,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply derives_trans with (!!Y); auto.",
                        "VernacExtend",
                        "a3d1a8c1dccf5864c524dc236aea3f9dc4f1359b"
                    ]
                },
                {
                    "command": [
                        "apply prop_derives; auto.",
                        "VernacExtend",
                        "9c851d818521d992d36a192373a20cedaaf628d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_right_sepcon_subst",
            "line_nb": 818,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction R; auto.",
                        "VernacExtend",
                        "6f3dcd6572877ec3ed01a5ad17ae15200d25ea39"
                    ]
                },
                {
                    "command": [
                        "autorewrite with subst.",
                        "VernacExtend",
                        "a0a7cc51d36fa0a311954515c238f15599d651bc"
                    ]
                },
                {
                    "command": [
                        "f_equal; auto.",
                        "VernacExtend",
                        "8016959cfe83d1ba3fdad91954454045f7af1d22"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_false_andp",
            "line_nb": 831,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext; normalize.",
                        "VernacExtend",
                        "899b6222eaf5eb0cd6828844b517b3349b8593ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wand_join",
            "line_nb": 835,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- wand_sepcon_adjoint.",
                        "VernacExtend",
                        "4dfb536b033f51b4ab3daf3908d9495321a9d882"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_assoc.",
                        "VernacExtend",
                        "9c6b8eaecdc27f592c009dd435c2cbd8c074fb8e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sepcon_assoc _ x1).",
                        "VernacExtend",
                        "fa2ce0ac43030cd688f3b8d77fc467245d374471"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sepcon_comm x1).",
                        "VernacExtend",
                        "f1db0da470d15dd8b878161f493d05fd94a96785"
                    ]
                },
                {
                    "command": [
                        "rewrite (sepcon_assoc x1).",
                        "VernacExtend",
                        "2484c9bd5cf2f437b7be0286a3ede3dfaadfaaa9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sepcon_assoc _ x1).",
                        "VernacExtend",
                        "fa2ce0ac43030cd688f3b8d77fc467245d374471"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sepcon_comm x1).",
                        "VernacExtend",
                        "f1db0da470d15dd8b878161f493d05fd94a96785"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sepcon_comm x2).",
                        "VernacExtend",
                        "e9d39eb99ba507c2c05e75be0e61395d30912513"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_derives.",
                        "VernacExtend",
                        "5279c4b0e23192edb2904c60cb96eb25409229af"
                    ]
                },
                {
                    "command": [
                        "apply modus_ponens_wand.",
                        "VernacExtend",
                        "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
                    ]
                },
                {
                    "command": [
                        "apply modus_ponens_wand.",
                        "VernacExtend",
                        "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wand_sepcon",
            "line_nb": 849,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_comm.",
                        "VernacExtend",
                        "fd2af6f842f71517e95b56c21ef3f6449c4ad38d"
                    ]
                },
                {
                    "command": [
                        "apply modus_ponens_wand.",
                        "VernacExtend",
                        "94d68c0d9209eb77823f0950fb04e572f9f06ec2"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_derives; auto.",
                        "VernacExtend",
                        "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
                    ]
                },
                {
                    "command": [
                        "apply -> wand_sepcon_adjoint; auto.",
                        "VernacExtend",
                        "7998b9628303f616ce6208ae09167ef93e914dc0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wand_sepcon'",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (sepcon_comm P Q).",
                        "VernacExtend",
                        "f96c2e4d883b73a9ab747193ba06c236994f2ad9"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_comm; apply wand_sepcon.",
                        "VernacExtend",
                        "df7f4f8e9c0e017fc8a73e4507574ddcc61a377b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extract_nth_exists_in_SEP",
            "line_nb": 865,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "transitivity (PROPx P (LOCALx Q (EX x:A, SEPx (replace_nth n R (S x))))).",
                        "VernacExtend",
                        "b6267a4de8636a9ff4cf37e70c7a8ebb1868bcc1"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold SEPx.",
                        "VernacExtend",
                        "f854f9cf3a2437909acdcb52d99742a8cbb4fa69"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "extensionality rho.",
                        "VernacExtend",
                        "a6182bb98d71ae2b51b3675429229ccd77d7161f"
                    ]
                },
                {
                    "command": [
                        "revert R H; induction n; destruct R; intros.",
                        "VernacExtend",
                        "b8a25d4f12fb7688a1d2f2eb1bfb9508a00e63a8"
                    ]
                },
                {
                    "command": [
                        "unfold replace_nth, fold_right.",
                        "VernacExtend",
                        "defb2727e23d89d82969705d3e4ce9c7f27b69d4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold nth in H.",
                        "VernacExtend",
                        "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
                    ]
                },
                {
                    "command": [
                        "rewrite H; clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; intro x.",
                        "VernacExtend",
                        "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
                    ]
                },
                {
                    "command": [
                        "apply exp_right with x.",
                        "VernacExtend",
                        "4cdb0700a335441429b2901b4a236f41d452acab"
                    ]
                },
                {
                    "command": [
                        "apply exp_right with x.",
                        "VernacExtend",
                        "4cdb0700a335441429b2901b4a236f41d452acab"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; intro x.",
                        "VernacExtend",
                        "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "unfold replace_nth, nth in *.",
                        "VernacExtend",
                        "4a8435274cec102f937031688ff447fbb048706d"
                    ]
                },
                {
                    "command": [
                        "subst m.",
                        "VernacExtend",
                        "9ba78b8037512180a4349842defa7f5fabdd6010"
                    ]
                },
                {
                    "command": [
                        "unfold fold_right_sepcon.",
                        "VernacExtend",
                        "4b2db233ebb4776bd02ecdc9717c59b92f9a5355"
                    ]
                },
                {
                    "command": [
                        "fold (fold_right_sepcon R).",
                        "VernacExtend",
                        "b3926798e7f3ffd481ca5bca835f7207ff2bdb45"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "unfold nth in H.",
                        "VernacExtend",
                        "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
                    ]
                },
                {
                    "command": [
                        "unfold replace_nth.",
                        "VernacExtend",
                        "d4869ee4e12f8f5a99822931fcc595373f2308d7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply pred_ext.",
                        "VernacExtend",
                        "9b03db08834ebab822f3dce151d20d6efb17f5ba"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; intro x.",
                        "VernacExtend",
                        "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
                    ]
                },
                {
                    "command": [
                        "apply exp_right with x.",
                        "VernacExtend",
                        "4cdb0700a335441429b2901b4a236f41d452acab"
                    ]
                },
                {
                    "command": [
                        "apply exp_right with x.",
                        "VernacExtend",
                        "4cdb0700a335441429b2901b4a236f41d452acab"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply exp_left; intro x.",
                        "VernacExtend",
                        "37e919a1331193f3cde6a86fb3bcdfacdaf7b8de"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "unfold nth in H.",
                        "VernacExtend",
                        "edb1ab2b03ee00fdc3b7e04617aa69d1b0b751c4"
                    ]
                },
                {
                    "command": [
                        "fold (nth n R) in H.",
                        "VernacExtend",
                        "b2c097511e3b5834070decc1e398092deb9ef13b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (IHn _ H).",
                        "VernacExtend",
                        "499b2acebef1917a0f45219babdec19374686bea"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "unfold PROPx, LOCALx.",
                        "VernacExtend",
                        "11d29d6bd68c7a87d70cf0942bbb9bbf72f5ce23"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derives_extract_PROP'",
            "line_nb": 916,
            "steps": [
                {
                    "command": [
                        "unfold PROPx in *.",
                        "VernacExtend",
                        "5bd7af5350141173917f3ce8296a0cbbef879aeb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_right_cons.",
                        "VernacExtend",
                        "ef23bd75c5310d0de48ae1e8f4c619275606ee48"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ | apply H; auto].",
                        "VernacExtend",
                        "4f08f85616d6692f71c337d9a389825908bc5dc7"
                    ]
                },
                {
                    "command": [
                        "normalize.",
                        "VernacExtend",
                        "b44f672ef6622bc7f333c87e081e8283dfd06387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}