{
    "filename": "floyd/library.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.sublist.",
            "VernacRequire",
            "d1f1b071609d5eb1d8166fe53222e46514697626"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.closed_lemmas.",
            "VernacRequire",
            "bdf37b0c22e35685c35e40eead36bd536eafda98"
        ],
        [
            "Require Import VST.floyd.compare_lemmas.",
            "VernacRequire",
            "bd1f2e0341278ba590c11cf9581d8fd0fbc599fb"
        ],
        [
            "Require Import VST.floyd.semax_tactics.",
            "VernacRequire",
            "238e194431a028049e8aade4980681c4ef99322f"
        ],
        [
            "Require Import VST.floyd.forward.",
            "VernacRequire",
            "82ae15b7e00db014d8c11149c5f01c71ca26097c"
        ],
        [
            "Require Import VST.floyd.call_lemmas.",
            "VernacRequire",
            "bae075c2bd5c4130032db66cb343d27fe1fbd2eb"
        ],
        [
            "Require Import VST.floyd.forward_lemmas.",
            "VernacRequire",
            "9478d14b6fd3ef8a118d37af230e255950664499"
        ],
        [
            "Require Import VST.floyd.for_lemmas.",
            "VernacRequire",
            "ab6d0ce2632379b74266e28afd061d06214e0c14"
        ],
        [
            "Require Import VST.floyd.nested_pred_lemmas.",
            "VernacRequire",
            "cf7d8ad82c9b94bc89a30d812bf2c228710d32ea"
        ],
        [
            "Require Import VST.floyd.nested_field_lemmas.",
            "VernacRequire",
            "2ae988fac26931aaa409a9389758d750e8ca6601"
        ],
        [
            "Require Import VST.floyd.efield_lemmas.",
            "VernacRequire",
            "0c47229b01bda83c0fb8dfc4c7351bb1c3ce9b48"
        ],
        [
            "Require Import VST.floyd.mapsto_memory_block.",
            "VernacRequire",
            "1eb48c3b1d3226b38616009522812b5e36900b31"
        ],
        [
            "Require Import VST.floyd.aggregate_type.",
            "VernacRequire",
            "88ecaee5bdf4f6532bb0b71af81f443d2369bf60"
        ],
        [
            "Require VST.floyd.aggregate_pred.",
            "VernacRequire",
            "f2dab6f34797b0b1a7c996880bedc9c42a72b087"
        ],
        [
            "Import VST.floyd.aggregate_pred.aggregate_pred.",
            "VernacImport",
            "dc019fd10b89462a242c767b0a98e89aceed81ca"
        ],
        [
            "Require Import VST.floyd.reptype_lemmas.",
            "VernacRequire",
            "67895477ec539ad1bf901b33e9b181c1c2cf58be"
        ],
        [
            "Require Import VST.floyd.data_at_rec_lemmas.",
            "VernacRequire",
            "782eebd63d8680a4569a04c81542bd75cc6f79bd"
        ],
        [
            "Require Import VST.floyd.field_at.",
            "VernacRequire",
            "c7cf6c35d27d83ac7be63633e374fa639476b7cc"
        ],
        [
            "Require Import VST.floyd.field_compat.",
            "VernacRequire",
            "26cdf2292ee0125f47474b76c8528fb684fe2ee0"
        ],
        [
            "Require Import VST.floyd.stronger.",
            "VernacRequire",
            "da2c50420d06dadfb072688069a0ba431a96788f"
        ],
        [
            "Require Import VST.floyd.loadstore_mapsto.",
            "VernacRequire",
            "86a37b050ded6be68f67e4b01aa7679dd4aba732"
        ],
        [
            "Require Import VST.floyd.loadstore_field_at.",
            "VernacRequire",
            "d9151576aaecb5847efb556f9907542a8e51caf7"
        ],
        [
            "Require Import VST.floyd.nested_loadstore.",
            "VernacRequire",
            "f664f24972fe966ae327fbedd2371ac40a389747"
        ],
        [
            "Require Import VST.floyd.local2ptree_denote.",
            "VernacRequire",
            "7b2a6fd2646a0af15a2f968f47cdf7e71d5416cd"
        ],
        [
            "Require Import VST.floyd.local2ptree_eval.",
            "VernacRequire",
            "63565982e2b485f6be616dc3d84a7e5844536459"
        ],
        [
            "Require Import VST.floyd.proj_reptype_lemmas.",
            "VernacRequire",
            "f23e23e56fbc43071b2da91d2fb5090e3239f8a3"
        ],
        [
            "Require Import VST.floyd.replace_refill_reptype_lemmas.",
            "VernacRequire",
            "6f4a17f3b2a7a55d1dc134842116182719e05b1c"
        ],
        [
            "Require Import VST.floyd.sc_set_load_store.",
            "VernacRequire",
            "874389444b70cca80e1673df5c81f65fe4dc117c"
        ],
        [
            "Require Import VST.floyd.entailer.",
            "VernacRequire",
            "af3575d05e2d8569d7bfb3e1f5690267a491e5e9"
        ],
        [
            "Require Import VST.floyd.globals_lemmas.",
            "VernacRequire",
            "9c55f95c92c6ded2c5034f8b98db493d67f4fcba"
        ],
        [
            "Require Import VST.floyd.diagnosis.",
            "VernacRequire",
            "e809fdf29826b5f7dd0343c44c75ee258e55984d"
        ],
        [
            "Require Import VST.floyd.freezer.",
            "VernacRequire",
            "1af3b61719498fa19b323a87b9f6179cb0677654"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Import String.",
            "VernacImport",
            "ab06a84ba92a619ceea6d71b5e5638414d80c1ee"
        ],
        [
            "Definition body_lemma_of_funspec {Espec: OracleKind} (ef: external_function) (f: funspec) := match f with mk_funspec sig _ A P Q _ _ => semax_external (map fst (fst sig)) ef A P Q end.",
            "VernacDefinition",
            "11a93a312c55c75933f1a9e5841b72072bbdd3c6"
        ],
        [
            "Definition try_spec (name: string) (spec: funspec) : list (ident * globdef Clight.fundef type) -> list (ident*funspec) := fun defs => match ext_link_prog' defs name with | Some id => [(id,spec)] | None => nil end.",
            "VernacDefinition",
            "e97dbf77923d308a63d34d3c14c14eac3e26fc3b"
        ],
        [
            "Arguments try_spec name spec defs / .",
            "VernacArguments",
            "8d67820aeb04d31928cf96617342f7ce037c81cd"
        ],
        [
            "Definition exit_spec' := WITH u: unit PRE [1%positive OF tint] PROP () LOCAL() SEP() POST [ tvoid ] PROP(False) LOCAL() SEP().",
            "VernacDefinition",
            "f6393eb501a1369a9293e803c8c72a4c67fd071d"
        ],
        [
            "Definition exit_spec := try_spec \"exit\" exit_spec'.",
            "VernacDefinition",
            "537f2a37b9040f69b61b156f6fd96590e782b706"
        ],
        [
            "Parameter body_exit: forall {Espec: OracleKind}, body_lemma_of_funspec (EF_external \"exit\" {| sig_args := AST.Tint :: nil; sig_res := None; sig_cc := cc_default |}) exit_spec'.",
            "VernacAssumption",
            "b6f8ff70b48a9bf0a435f3bf82779038bbb59713"
        ],
        [
            "Parameter mem_mgr: globals -> mpred.",
            "VernacAssumption",
            "19438548b965fc67552b061f51b82cacb95938dd"
        ],
        [
            "Axiom create_mem_mgr: forall gv, emp |-- mem_mgr gv.",
            "VernacAssumption",
            "8a14de1920ce46c3db996c4570073c2efd842975"
        ],
        [
            "Parameter malloc_token : forall {cs: compspecs}, share -> type -> val -> mpred.",
            "VernacAssumption",
            "37c558e05f43b0781d3639c6c395a3b05db08412"
        ],
        [
            "Parameter malloc_token_valid_pointer: forall {cs: compspecs} sh t p, malloc_token sh t p |-- valid_pointer p.",
            "VernacAssumption",
            "75dec6f6c8b5833e64807a17d79c7b16a49a0a90"
        ],
        [
            "Hint Resolve malloc_token_valid_pointer : valid_pointer.",
            "VernacHints",
            "80567607800647cb6bca3e46c4c5cfa99a3888cc"
        ],
        [
            "Parameter malloc_token_local_facts: forall {cs: compspecs} sh t p, malloc_token sh t p |-- !! malloc_compatible (sizeof t) p.",
            "VernacAssumption",
            "e4e6f20a6e472fcd1446c9319b64bc2abd859597"
        ],
        [
            "Hint Resolve malloc_token_local_facts : saturate_local.",
            "VernacHints",
            "338fb3851022091acbf5820737e57402d0931233"
        ],
        [
            "Parameter malloc_token_change_composite: forall {cs_from cs_to} {CCE : change_composite_env cs_from cs_to} sh t, cs_preserve_type cs_from cs_to (coeq cs_from cs_to) t = true -> @malloc_token cs_from sh t = @malloc_token cs_to sh t.",
            "VernacAssumption",
            "3cc931dc8469f91dcc08980a216d5a553e6435f6"
        ],
        [
            "Ltac change_compspecs' cs cs' ::= match goal with | |- context [@data_at cs' ?sh ?t ?v1] => erewrite (@data_at_change_composite cs' cs _ sh t); [| apply JMeq_refl | reflexivity] | |- context [@field_at cs' ?sh ?t ?gfs ?v1] => erewrite (@field_at_change_composite cs' cs _ sh t gfs); [| apply JMeq_refl | reflexivity] | |- context [@data_at_ cs' ?sh ?t] => erewrite (@data_at__change_composite cs' cs _ sh t); [| reflexivity] | |- context [@field_at_ cs' ?sh ?t ?gfs] => erewrite (@field_at__change_composite cs' cs _ sh t gfs); [| reflexivity] | |- context [@malloc_token cs' ?sh ?t] => erewrite (@malloc_token_change_composite cs' cs _ sh t); [| reflexivity] | |- context [?A cs'] => change (A cs') with (A cs) | |- context [?A cs' ?B] => change (A cs' B) with (A cs B) | |- context [?A cs' ?B ?C] => change (A cs' B C) with (A cs B C) | |- context [?A cs' ?B ?C ?D] => change (A cs' B C D) with (A cs B C D) | |- context [?A cs' ?B ?C ?D ?E] => change (A cs' B C D E) with (A cs B C D E) | |- context [?A cs' ?B ?C ?D ?E ?F] => change (A cs' B C D E F) with (A cs B C D E F) end.",
            "VernacExtend",
            "98c1acc3c132732daa1c19db6e8e2cda91db18c4"
        ],
        [
            "Definition malloc_spec' {cs: compspecs} := WITH t:type, gv: globals PRE [ 1%positive OF size_t ] PROP (0 <= sizeof t <= Ptrofs.max_unsigned; complete_legal_cosu_type t = true; natural_aligned natural_alignment t = true) LOCAL (temp 1%positive (Vptrofs (Ptrofs.repr (sizeof t))); gvars gv) SEP (mem_mgr gv) POST [ tptr tvoid ] EX p:_, PROP () LOCAL (temp ret_temp p) SEP (mem_mgr gv; if eq_dec p nullval then emp else (malloc_token Ews t p * data_at_ Ews t p)).",
            "VernacDefinition",
            "90033b79a47ff16f9be5b37cc3701d26d7df34bb"
        ],
        [
            "Parameter body_malloc: forall {Espec: OracleKind} {cs: compspecs} , body_lemma_of_funspec EF_malloc malloc_spec'.",
            "VernacAssumption",
            "b6d92e4576293edadcbf06f9e3dde6d06bbbc8b2"
        ],
        [
            "Definition free_spec' {cs: compspecs} := WITH t: type, p:val, gv: globals PRE [ 1%positive OF tptr tvoid ] PROP () LOCAL (temp 1%positive p; gvars gv) SEP (mem_mgr gv; if eq_dec p nullval then emp else (malloc_token Ews t p * data_at_ Ews t p)) POST [ Tvoid ] PROP () LOCAL () SEP (mem_mgr gv).",
            "VernacDefinition",
            "a6293afefca2f9d0b7be234a0953423ecee3030d"
        ],
        [
            "Parameter body_free: forall {Espec: OracleKind} {cs: compspecs} , body_lemma_of_funspec EF_free free_spec'.",
            "VernacAssumption",
            "49593a1250371382afc0756ba142c3b1f53cde5a"
        ],
        [
            "Definition library_G {cs: compspecs} prog := let defs := prog_defs prog in try_spec \"exit\" exit_spec' defs ++ try_spec \"_malloc\" malloc_spec' defs ++ try_spec \"_free\" free_spec' defs.",
            "VernacDefinition",
            "593beb5982b7d2417e541a82af8ea7e036023cfc"
        ],
        [
            "Ltac with_library prog G := let pr := eval unfold prog in prog in let x := constr:(library_G pr ++ G) in let x := eval cbv beta delta [app library_G] in x in let x := simpl_prog_defs x in let x := eval cbv beta iota zeta delta [try_spec] in x in let x := eval simpl in x in with_library' pr x.",
            "VernacExtend",
            "aaec66dcfd1f2678ce6e4f900eb64eddde7a4204"
        ],
        [
            "Lemma semax_func_cons_malloc_aux: forall {cs: compspecs} (gv: globals) (gx : genviron) (t :type) (ret : option val), (EX p : val, PROP ( ) LOCAL (temp ret_temp p) SEP (mem_mgr gv; if eq_dec p nullval then emp else malloc_token Ews t p * data_at_ Ews t p))%assert (make_ext_rval gx ret) |-- !! is_pointer_or_null (force_val ret).",
            "VernacStartTheoremProof",
            "898f8da161076ac80dbc6faa97eb7a54a30ee8a9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite exp_unfold.",
            "VernacExtend",
            "85961affce1a09c454eb7cd41284e51e4a0f683b"
        ],
        [
            "Intros p.",
            "VernacExtend",
            "c327d475e8eccae0fcf084432fa3aa8277df1af0"
        ],
        [
            "rewrite <- insert_local.",
            "VernacExtend",
            "790e189d828b6525419b6a6226ac6b944ec6240e"
        ],
        [
            "rewrite lower_andp.",
            "VernacExtend",
            "538921d1d555dd397c08fd2ea164948d9724c181"
        ],
        [
            "apply derives_extract_prop; intro.",
            "VernacExtend",
            "0148500cd04ca858045dfd7add74b2ac11ee7e67"
        ],
        [
            "destruct H; unfold_lift in H.",
            "VernacExtend",
            "0c1651a9843848e0ca63ac3f4b7821bbdcf6ca23"
        ],
        [
            "rewrite retval_ext_rval in H.",
            "VernacExtend",
            "b0c952e264f065ec4d7419a53325040de340f37e"
        ],
        [
            "subst p.",
            "VernacExtend",
            "caedf09ae2f4d633332b36c55c808e07b2752cd1"
        ],
        [
            "if_tac.",
            "VernacExtend",
            "a006ab589e4ef6015fb470fbedb2c4c4dac27076"
        ],
        [
            "rewrite H; entailer!.",
            "VernacExtend",
            "4b62ec93aa9e023b32408f92303c048305b540a4"
        ],
        [
            "renormalize.",
            "VernacExtend",
            "a07d147bddae28522773921c020c435876ebf497"
        ],
        [
            "entailer!.",
            "VernacExtend",
            "e9311eb469ece63c985af7872ea148a97277818d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "semax_func_cons_malloc_aux",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_unfold.",
                        "VernacExtend",
                        "85961affce1a09c454eb7cd41284e51e4a0f683b"
                    ]
                },
                {
                    "command": [
                        "Intros p.",
                        "VernacExtend",
                        "c327d475e8eccae0fcf084432fa3aa8277df1af0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- insert_local.",
                        "VernacExtend",
                        "790e189d828b6525419b6a6226ac6b944ec6240e"
                    ]
                },
                {
                    "command": [
                        "rewrite lower_andp.",
                        "VernacExtend",
                        "538921d1d555dd397c08fd2ea164948d9724c181"
                    ]
                },
                {
                    "command": [
                        "apply derives_extract_prop; intro.",
                        "VernacExtend",
                        "0148500cd04ca858045dfd7add74b2ac11ee7e67"
                    ]
                },
                {
                    "command": [
                        "destruct H; unfold_lift in H.",
                        "VernacExtend",
                        "0c1651a9843848e0ca63ac3f4b7821bbdcf6ca23"
                    ]
                },
                {
                    "command": [
                        "rewrite retval_ext_rval in H.",
                        "VernacExtend",
                        "b0c952e264f065ec4d7419a53325040de340f37e"
                    ]
                },
                {
                    "command": [
                        "subst p.",
                        "VernacExtend",
                        "caedf09ae2f4d633332b36c55c808e07b2752cd1"
                    ]
                },
                {
                    "command": [
                        "if_tac.",
                        "VernacExtend",
                        "a006ab589e4ef6015fb470fbedb2c4c4dac27076"
                    ]
                },
                {
                    "command": [
                        "rewrite H; entailer!.",
                        "VernacExtend",
                        "4b62ec93aa9e023b32408f92303c048305b540a4"
                    ]
                },
                {
                    "command": [
                        "renormalize.",
                        "VernacExtend",
                        "a07d147bddae28522773921c020c435876ebf497"
                    ]
                },
                {
                    "command": [
                        "entailer!.",
                        "VernacExtend",
                        "e9311eb469ece63c985af7872ea148a97277818d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}