{
    "filename": "floyd/entailer.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.floyd.base2.",
            "VernacRequire",
            "c9732b06b9c2316526989f551596fbf382fa6641"
        ],
        [
            "Require Import VST.floyd.functional_base.",
            "VernacRequire",
            "386f5a876c06dba949227f498f26a58bb6ebd9d8"
        ],
        [
            "Require Import VST.floyd.client_lemmas.",
            "VernacRequire",
            "449c8140a2f7afa12f07d13833b2a4f672db98f1"
        ],
        [
            "Require Import VST.floyd.go_lower.",
            "VernacRequire",
            "e25c5a8386135d20cc93cb3528e21bed7c4beec3"
        ],
        [
            "Require Import VST.floyd.reptype_lemmas.",
            "VernacRequire",
            "67895477ec539ad1bf901b33e9b181c1c2cf58be"
        ],
        [
            "Require Import VST.floyd.data_at_rec_lemmas.",
            "VernacRequire",
            "782eebd63d8680a4569a04c81542bd75cc6f79bd"
        ],
        [
            "Require Import VST.floyd.field_at VST.floyd.nested_field_lemmas.",
            "VernacRequire",
            "9808e0373b9f5e70968790fbfff07acbd204aae2"
        ],
        [
            "Local Open Scope logic.",
            "VernacOpenCloseScope",
            "5937723d189e5aa98ad78e1018bed51ea2c1b0cd"
        ],
        [
            "Lemma ptrofs_of_ints_unfold: forall x, Ptrofs.of_ints x = Ptrofs.repr (Int.signed x).",
            "VernacStartTheoremProof",
            "d1428846b6f25fb121ff788a6927ba981f4194fb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite ptrofs_of_ints_unfold : norm.",
            "VernacExtend",
            "cd5dd309bb575893ee999d3d48bf896b9ab8ebbb"
        ],
        [
            "Lemma ptrofs_of_intu_unfold: forall x, Ptrofs.of_intu x = Ptrofs.repr (Int.unsigned x).",
            "VernacStartTheoremProof",
            "ba90469a52cab57f7380e01167ac1d6e21b014ac"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite ptrofs_of_intu_unfold : norm.",
            "VernacExtend",
            "e7747ab6179b673d72610751692871370a2548aa"
        ],
        [
            "Lemma isptr_force_val_sem_cast_neutral : forall p, isptr p -> isptr (force_val (sem_cast_pointer p)).",
            "VernacStartTheoremProof",
            "ce8e942054572642900c8ea6908e8614c5f9d26b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct p; try contradiction; apply I.",
            "VernacExtend",
            "ea8b4008b1bfe71ade5e0a03c0d6188f89c5118c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve isptr_force_val_sem_cast_neutral : norm.",
            "VernacHints",
            "89feb7adfd7935f44b9a4847b9eefdd34edc86c8"
        ],
        [
            "Lemma FF_local_facts: forall {A}{NA: NatDed A}, (FF:A) |-- !!False.",
            "VernacStartTheoremProof",
            "15ed09a40854afc751919c6f3e2838c1077e723f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply FF_left.",
            "VernacExtend",
            "5e2b816586ba7150957d4a3cc0517225443a64c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve @FF_local_facts: saturate_local.",
            "VernacHints",
            "1342eb396915d4b6884d13fc3ed91cd43b4c68f4"
        ],
        [
            "Ltac simpl_compare := match goal with | H: Vint _ = _ |- _ => revert H; simpl_compare; intro H; try (simpl in H; apply Vint_inj in H; match type of H with ?a = ?b => first [safe_subst a | safe_subst b | idtac] end) | H: typed_true _ _ |- _ => simpl in H; revert H; simpl_compare; intro H; first [apply typed_true_ptr in H | apply typed_true_of_bool in H; first [apply (int_cmp_repr Clt) in H; [ | rep_omega ..]; simpl in H | apply (int_cmp_repr Ceq) in H; [ | rep_omega ..]; simpl in H | idtac ] | discriminate H | idtac ] | H: typed_false _ _ |- _ => simpl in H; revert H; simpl_compare; intro H; first [ apply typed_false_ptr in H | apply typed_false_of_bool in H; first [apply (int_cmp_repr' Clt) in H; [ | rep_omega ..]; simpl in H | apply (int_cmp_repr' Ceq) in H; [ | rep_omega ..]; simpl in H | idtac] | discriminate H | idtac ] | H : Int.lt _ _ = false |- _ => revert H; simpl_compare; intro H; try (apply (int_cmp_repr' Clt) in H ; [ | rep_omega ..]; simpl in H) | H : Int.lt _ _ = true |- _ => revert H; simpl_compare; intro H; try (apply (int_cmp_repr Clt) in H ; [ | rep_omega ..]; simpl in H) | H : Int.eq _ _ = false |- _ => revert H; simpl_compare; intro H; try (apply (int_cmp_repr' Ceq) in H ; [ | rep_omega ..]; simpl in H) | H : Int.eq _ _ = true |- _ => revert H; simpl_compare; intro H; try (apply (int_cmp_repr Ceq) in H ; [ | rep_omega ..]; simpl in H) | |- _ => idtac end.",
            "VernacExtend",
            "2e269007143dca33e59b6f64b4f1868903127249"
        ],
        [
            "Lemma prop_and_same_derives {A}{NA: NatDed A}: forall P Q, Q |-- !! P -> Q |-- !!P && Q.",
            "VernacStartTheoremProof",
            "f39fb1d69bfa82b4ead85daae69244f2515ecaad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments denote_tc_isptr v / .",
            "VernacArguments",
            "b809af5fe2fb019c2be44eeb29c457cebff150e2"
        ],
        [
            "Arguments denote_tc_iszero !v .",
            "VernacArguments",
            "64139e0e0b8390319f00e2203baa715ea1cbf044"
        ],
        [
            "Arguments denote_tc_nonzero !v .",
            "VernacArguments",
            "29e7a48812e414f29554cd35db640deaaba08730"
        ],
        [
            "Arguments denote_tc_igt i !v .",
            "VernacArguments",
            "2c3604ca14ca4d5af2236f63dfd36c912132d3ee"
        ],
        [
            "Arguments denote_tc_Zge z !v .",
            "VernacArguments",
            "79b3f0f1e0bd4f2f4da041a7e3b4e54adad76de3"
        ],
        [
            "Arguments denote_tc_Zle z !v .",
            "VernacArguments",
            "1c7ef1d89bfbfcdcfb6623f13612fb29ab7c9798"
        ],
        [
            "Arguments denote_tc_samebase !v1 !v2 .",
            "VernacArguments",
            "e9b7aa85f958fad63b1237b1e18e48f3baf05f64"
        ],
        [
            "Arguments denote_tc_nodivover !v1 !v2 .",
            "VernacArguments",
            "4cc588c5750b058ba23684663501d7f49a9477ed"
        ],
        [
            "Arguments denote_tc_initialized id ty rho / .",
            "VernacArguments",
            "b1700f60e78e72218823823ec92d6e9ec4aa6d5a"
        ],
        [
            "Arguments denote_tc_nosignedover op v1 v2 / .",
            "VernacArguments",
            "4d0448fbf62ae30d146037d614ebb192160deaa3"
        ],
        [
            "Ltac simpl_denote_tc := simpl denote_tc_isptr; simpl denote_tc_iszero; simpl denote_tc_nonzero; simpl denote_tc_igt; simpl denote_tc_Zge; simpl denote_tc_Zle; simpl denote_tc_samebase; simpl denote_tc_nodivover; simpl denote_tc_initialized; simpl denote_tc_nosignedover.",
            "VernacExtend",
            "98d81e35695c41aa500e2d09351da5b13bfbb152"
        ],
        [
            "Lemma denote_tc_test_eq_split: forall P x y, P |-- valid_pointer x -> P |-- valid_pointer y -> P |-- denote_tc_test_eq x y.",
            "VernacStartTheoremProof",
            "7704fb08340780acf86b4e26696aba8327e2b8b5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans with (valid_pointer x && valid_pointer y).",
            "VernacExtend",
            "88c2f53a5aca2bd49bffac4a29ae1ccbbc3496fa"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "unfold denote_tc_test_eq, weak_valid_pointer.",
            "VernacExtend",
            "6c16a14015d769ff18242959ad49d55969150361"
        ],
        [
            "change predicates_hered.orp with orp.",
            "VernacExtend",
            "2127feb1d6226474cb286174b1db8d722ce18f77"
        ],
        [
            "destruct x; try (apply andp_left1; apply @FF_left); try apply @TT_right; destruct y; try (apply andp_left2; apply @FF_left); try apply @TT_right.",
            "VernacExtend",
            "14a99b098b1bd535f218f34c7b24aec631f059e9"
        ],
        [
            "apply andp_derives; try apply derives_refl.",
            "VernacExtend",
            "7362774ca87b876d66968af5d455c1795f8401f6"
        ],
        [
            "apply andp_derives; try apply derives_refl.",
            "VernacExtend",
            "7362774ca87b876d66968af5d455c1795f8401f6"
        ],
        [
            "apply orp_right1.",
            "VernacExtend",
            "fd9602f2e34364527553f92446fb4f750d4ab398"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "rewrite andp_comm.",
            "VernacExtend",
            "f42ee316a55b2a9216373e6b515ce4b77ae502d5"
        ],
        [
            "apply andp_derives; try apply derives_refl.",
            "VernacExtend",
            "7362774ca87b876d66968af5d455c1795f8401f6"
        ],
        [
            "apply orp_right1.",
            "VernacExtend",
            "fd9602f2e34364527553f92446fb4f750d4ab398"
        ],
        [
            "apply derives_refl.",
            "VernacExtend",
            "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
        ],
        [
            "unfold test_eq_ptrs.",
            "VernacExtend",
            "bed0bef8c939c515e743b3e53306b9eb9eb84963"
        ],
        [
            "destruct (sameblock _ _); auto.",
            "VernacExtend",
            "5add85d04dc54eb96597fb8186bc39e2a08961c7"
        ],
        [
            "apply andp_derives; apply valid_pointer_weak.",
            "VernacExtend",
            "5a97b90d66ac65ab9e5956fac27e98bf69d673f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valid_pointer_null: forall P, P |-- valid_pointer nullval.",
            "VernacStartTheoremProof",
            "a35cd943e1c7ae2d91af28d475df9a27590e4c04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold nullval, valid_pointer, valid_pointer'.",
            "VernacExtend",
            "c61f06cb7faf3c7020113ef69f7c0299a013e05e"
        ],
        [
            "destruct Archi.ptr64 eqn:Hp; simpl; change predicates_hered.prop with prop; normalize.",
            "VernacExtend",
            "170653ea99a29229889cb2663f263f1c853ef173"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extend_valid_pointer: forall p Q, valid_pointer p * Q |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "42bfab51822d1fceeee3aa67fd115e22a7b98e31"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold valid_pointer.",
            "VernacExtend",
            "c7f47f3592a120203b1e3502ec66551acf3562ca"
        ],
        [
            "pose proof (extend_tc.extend_valid_pointer' p 0).",
            "VernacExtend",
            "480916c36b1d05ad484483e7af159a217c893a80"
        ],
        [
            "pose proof (predicates_hered.boxy_e _ _ H).",
            "VernacExtend",
            "d6a165d67196f329003a05c960d1b2552e51c536"
        ],
        [
            "change (_ |-- _) with (predicates_hered.derives (valid_pointer' p 0 * Q) (valid_pointer' p 0)).",
            "VernacExtend",
            "905e0966aa0a818103682df2aec898ab4b12468e"
        ],
        [
            "intros ? (w1 & w2 & Hj & Hp & ?).",
            "VernacExtend",
            "b92c23a8fbac1cb1886bc51fcca96a98959e50d0"
        ],
        [
            "apply (H0 w1); auto.",
            "VernacExtend",
            "425d468ec94d721a47d0e579a71ccf182ab574b4"
        ],
        [
            "hnf; eauto.",
            "VernacExtend",
            "aad61d1690f1d235151e164e7b7feb63ec19452a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extend_weak_valid_pointer: forall p Q, weak_valid_pointer p * Q |-- weak_valid_pointer p.",
            "VernacStartTheoremProof",
            "4c68271742cdff0eb515b3f1064937815d5f9a5c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold weak_valid_pointer.",
            "VernacExtend",
            "a897123e84201879bbf012a22f11d2c8b42858ef"
        ],
        [
            "pose proof (extend_tc.extend_valid_pointer' p 0).",
            "VernacExtend",
            "480916c36b1d05ad484483e7af159a217c893a80"
        ],
        [
            "pose proof (predicates_hered.boxy_e _ _ H).",
            "VernacExtend",
            "d6a165d67196f329003a05c960d1b2552e51c536"
        ],
        [
            "pose proof (extend_tc.extend_valid_pointer' p (-1)).",
            "VernacExtend",
            "0a81e7cc558962d53f157b65528bcb7148008bec"
        ],
        [
            "pose proof (predicates_hered.boxy_e _ _ H1).",
            "VernacExtend",
            "4ad18acf0955e65807f2fcd586ac0f29d7443d47"
        ],
        [
            "change (_ |-- _) with (predicates_hered.derives (predicates_hered.orp (valid_pointer' p 0) (valid_pointer' p (-1)) * Q) (predicates_hered.orp (valid_pointer' p 0) (valid_pointer' p (-1)))).",
            "VernacExtend",
            "8ba8ce77acf97aaf7debe5084b49d0d456707632"
        ],
        [
            "intros ? (w1 & w2 & Hj & Hp & ?).",
            "VernacExtend",
            "b92c23a8fbac1cb1886bc51fcca96a98959e50d0"
        ],
        [
            "simpl in Hp |- * .",
            "VernacExtend",
            "d78f52ab56f5ff823384c257e6e798b40a671ba6"
        ],
        [
            "destruct Hp; [left; apply (H0 w1) | right; apply (H2 w1)]; auto; hnf; eauto.",
            "VernacExtend",
            "2a48893d1c14b1e6f1a1bdba5acc7f4d2c0ac466"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sepcon_valid_pointer1: forall (P Q: mpred) p, P |-- valid_pointer p -> P * Q |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "733ccd867d7adc249ec6a2877f22fc54cc039c77"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [apply sepcon_derives; [eassumption | apply TT_right] |].",
            "VernacExtend",
            "f57a6a62eafcbc9e055bd20dbc22d2aedb5fd5e0"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "apply extend_valid_pointer.",
            "VernacExtend",
            "97ff3d3562f0780aa7665436691c038ddf38fe33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sepcon_valid_pointer2: forall (P Q: mpred) p, P |-- valid_pointer p -> Q * P |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "f8fddd5a0c67807331e457e501c910092682f2b1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite sepcon_comm; apply sepcon_valid_pointer1.",
            "VernacExtend",
            "dc5459b6a6c1f85ad83186c70884a98dce9f3570"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sepcon_weak_valid_pointer1: forall (P Q : mpred) (p : val), P |-- weak_valid_pointer p -> P * Q |-- weak_valid_pointer p.",
            "VernacStartTheoremProof",
            "1b9d23d07cf265e3d2cc5f92bab1ac054a0dad03"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [ | apply (extend_weak_valid_pointer p Q)].",
            "VernacExtend",
            "57c8dc4edd88e1d8d974ab878e626a118c145fd6"
        ],
        [
            "apply sepcon_derives; auto.",
            "VernacExtend",
            "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sepcon_weak_valid_pointer2: forall (P Q : mpred) (p : val), P |-- weak_valid_pointer p -> Q * P |-- weak_valid_pointer p.",
            "VernacStartTheoremProof",
            "112c919c1fa7151fc937ad1ab7afe810b701a155"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite sepcon_comm.",
            "VernacExtend",
            "fd2af6f842f71517e95b56c21ef3f6449c4ad38d"
        ],
        [
            "apply sepcon_weak_valid_pointer1; auto.",
            "VernacExtend",
            "8d00ded159d077c8ccd37c31ba2ca8378801442f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma andp_valid_pointer1: forall (P Q: mpred) p, P |-- valid_pointer p -> P && Q |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "23f0bc9239c7628f27f12ed6f09f7183cabc2490"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_left1; auto.",
            "VernacExtend",
            "fbc9186131c9851d08ff7aadf76f5fc5ca898763"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma andp_valid_pointer2: forall (P Q: mpred) p, P |-- valid_pointer p -> Q && P |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "5489fde90e6f7b0293d239c585085119efb5d7ff"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_left2; auto.",
            "VernacExtend",
            "624d28bb04e617622cc0cb522526420dfef62500"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valid_pointer_zero32: forall P, Archi.ptr64=false -> P |-- valid_pointer (Vint (Int.repr 0)).",
            "VernacStartTheoremProof",
            "62b09d8d01c6add0f7a8a45a734281498b628e04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold valid_pointer, valid_pointer'.",
            "VernacExtend",
            "e5ac70a59d6a490113fe1f0632934562dc140f27"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "change predicates_hered.prop with prop; normalize.",
            "VernacExtend",
            "a3cae991061d8bc9798304baaf17ecf5f339c1f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valid_pointer_zero64: forall P, Archi.ptr64=true -> P |-- valid_pointer (Vlong (Int64.repr 0)).",
            "VernacStartTheoremProof",
            "7855bf2091d7a01d1e908b2d20be5c9dabd4031e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold valid_pointer, valid_pointer'.",
            "VernacExtend",
            "e5ac70a59d6a490113fe1f0632934562dc140f27"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "change predicates_hered.prop with prop; normalize.",
            "VernacExtend",
            "a3cae991061d8bc9798304baaf17ecf5f339c1f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve sepcon_valid_pointer1 sepcon_valid_pointer2 : valid_pointer.",
            "VernacHints",
            "8ae9a28da72b8330fe0ca30706b82649fd25dc6d"
        ],
        [
            "Hint Resolve andp_valid_pointer1 andp_valid_pointer2 : valid_pointer.",
            "VernacHints",
            "c65bfd2a0be424ed2362bb7325385e8442838881"
        ],
        [
            "Hint Resolve valid_pointer_null : valid_pointer.",
            "VernacHints",
            "7d9e013889d097bcccc46b175984a6ccfd6934f0"
        ],
        [
            "Hint Resolve valid_pointer_zero32 : valid_pointer.",
            "VernacHints",
            "7adbc7f71561ed837b461fcb0ef172fa1c77491c"
        ],
        [
            "Hint Resolve valid_pointer_zero64 : valid_pointer.",
            "VernacHints",
            "e06605949593e89ade8e56a7e11abaed46ac0876"
        ],
        [
            "Hint Resolve sepcon_weak_valid_pointer1: valid_pointer.",
            "VernacHints",
            "5ebd5f4f5faa957511e3788e59c9c38b6fcc8308"
        ],
        [
            "Hint Resolve sepcon_weak_valid_pointer2: valid_pointer.",
            "VernacHints",
            "7939ed9e7dde198985ef51cfcab10b1852e22ab3"
        ],
        [
            "Ltac solve_valid_pointer := match goal with | |- _ |-- denote_tc_test_eq _ _ && _ => apply andp_right; [apply denote_tc_test_eq_split; solve [auto 50 with valid_pointer] | ] | |- _ |-- valid_pointer _ && _ => apply andp_right; [ solve [auto 50 with valid_pointer] | ] | |- _ |-- weak_valid_pointer _ && _ => apply andp_right; [ solve [auto 50 with valid_pointer] | ] | |- _ |-- denote_tc_test_eq _ _ => auto 50 with valid_pointer | |- _ |-- valid_pointer _ => auto 50 with valid_pointer | |- _ |-- weak_valid_pointer _ => auto 50 with valid_pointer end.",
            "VernacExtend",
            "95b0d940b0afd0c74f60b0d287ee5646472d344f"
        ],
        [
            "Hint Rewrite (@TT_andp mpred _) : gather_prop.",
            "VernacExtend",
            "56272e2d21963d5fa64d7ea458c541fcc884c90b"
        ],
        [
            "Hint Rewrite (@andp_TT mpred _) : gather_prop.",
            "VernacExtend",
            "c529c1ef3fab13c2c8dbb2980d015e7ca5b6f666"
        ],
        [
            "Ltac pull_out_props := repeat (( simple apply derives_extract_prop || simple apply derives_extract_prop'); fancy_intros true); autorewrite with gather_prop; repeat (( simple apply derives_extract_prop || simple apply derives_extract_prop'); fancy_intros true).",
            "VernacExtend",
            "dd8c1b6d59cf15422d3a4d4255eb239c4bbfaf67"
        ],
        [
            "Ltac simplify_float2int := match goal with | |- context [Zofsingle (Float32.of_bits (Int.repr ?A))] => putable A; let x := fresh \"x\" in (evar (x: Z)); replace (Zofsingle (Float32.of_bits (Int.repr A))) with (Some x) by (subst x; reflexivity); compute in x; subst x | |- context [Zoffloat (Float.of_bits (Int.repr ?A))] => putable A; let x := fresh \"x\" in (evar (x: Z)); replace (Zoffloat (Float.of_bits (Int.repr A))) with (Some x) by (subst x; reflexivity); compute in x; subst x end.",
            "VernacExtend",
            "8af1cc9981d03cb2814cc7a98677dd726a8db1a6"
        ],
        [
            "Ltac ent_iter := repeat simplify_float2int; autorewrite with gather_prop; repeat (( simple apply derives_extract_prop || simple apply derives_extract_prop'); fancy_intros true); repeat erewrite unfold_reptype_elim in * by (apply JMeq_refl; reflexivity); simpl_compare; simpl_denote_tc; safe_subst_any; try autorewrite with entailer_rewrite in *; try solve_valid_pointer; repeat data_at_conflict_neq.",
            "VernacExtend",
            "f35de91ed803138565eca70cb35a43533b531aa9"
        ],
        [
            "Lemma and_False: forall x, (x /\\ False) = False.",
            "VernacStartTheoremProof",
            "c59977a1a7e616a6aaa17bbdc218a826cfd2e87f"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma and_True: forall x, (x /\\ True) = x.",
            "VernacStartTheoremProof",
            "c49d139cb1e75b47d2140e17dbe498b3db2ba1a7"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma True_and: forall x, (True /\\ x) = x.",
            "VernacStartTheoremProof",
            "788d2f5952e338fa23677ae119d13ebd59084c7c"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma False_and: forall x, (False /\\ x) = False.",
            "VernacStartTheoremProof",
            "3d9bd6af88c208121957ccf6568e775e2f75563c"
        ],
        [
            "intros; apply prop_ext; intuition.",
            "VernacExtend",
            "29f6b2585664c8346c506e0a0e40390db5d63839"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac splittable := match goal with | |- _ <= _ < _ => fail 1 | |- _ < _ <= _ => fail 1 | |- _ <= _ <= _ => fail 1 | |- _ < _ < _ => fail 1 | |- _ <-> _ => fail 1 | |- _ /\\ _ => idtac end.",
            "VernacExtend",
            "6f1655970d750255ad330cce10a8f65e77284ef5"
        ],
        [
            "Ltac prove_signed_range := match goal with | |- Int.min_signed <= _ <= Int.max_signed => normalize; rep_omega | |- Int64.min_signed <= _ <= Int64.max_signed => normalize; rep_omega end.",
            "VernacExtend",
            "ef1f216dce72a1b601d6fdc0ea9148dc19996af4"
        ],
        [
            "Lemma ptr_eq_refl: forall x, isptr x -> ptr_eq x x.",
            "VernacStartTheoremProof",
            "cd70c2aed961132122714e79d0bc965f815e47b7"
        ],
        [
            "destruct x; simpl; intros; try contradiction.",
            "VernacExtend",
            "b445dbe535a853e80d86f6a4eae474a41ba93601"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "apply Ptrofs.eq_true.",
            "VernacExtend",
            "0580ad87719bc3658192ebde0f8c7425e3658a98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve ptr_eq_refl : prove_it_now.",
            "VernacHints",
            "b510bc13bae6f9b5b455c6e75cbcae921df99c56"
        ],
        [
            "Lemma ptr_eq_nullval: ptr_eq nullval nullval.",
            "VernacStartTheoremProof",
            "da438663e612fee6fcd3bc8d0021572d60de0cb5"
        ],
        [
            "Transparent Archi.ptr64.",
            "VernacSetOpacity",
            "7d18d4ebeabcfd5439a11bef3fc57846fc1db6ec"
        ],
        [
            "unfold ptr_eq, nullval; simpl.",
            "VernacExtend",
            "c791706b740f2a961e4b32e90ee0068bbe21b7d1"
        ],
        [
            "split3; auto.",
            "VernacExtend",
            "5198a06904f9188b673c83129393f27ab50f92b2"
        ],
        [
            "Opaque Archi.ptr64.",
            "VernacSetOpacity",
            "6d35188f1da9e0344ca2982535df2ce0af9d8600"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve ptr_eq_nullval : prove_it_now.",
            "VernacHints",
            "3099ed895f49a4b2c533a3c11bd729a6122d0bec"
        ],
        [
            "Hint Extern 4 (value_fits _ _ _) => (rewrite ?proj_sumbool_is_true by auto; rewrite ?proj_sumbool_is_false by auto; repeat simplify_value_fits; auto) : prove_it_now.",
            "VernacHints",
            "0173ff3c83a71b19338008479aee096064ddf427"
        ],
        [
            "Lemma intsigned_intrepr_bytesigned: forall i, Int.signed (Int.repr (Byte.signed i)) = Byte.signed i.",
            "VernacStartTheoremProof",
            "c6c87d9a9fc08717b37586fa56f51657344a7586"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Int.signed_repr; auto.",
            "VernacExtend",
            "d2a3627d99a158baec9a5dfb0e0dbe190f5a271f"
        ],
        [
            "destruct (Byte.signed_range i).",
            "VernacExtend",
            "f396329dabf07d739b46a1d7437841bcb7b07aeb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "eapply Z.le_trans; [ | eassumption].",
            "VernacExtend",
            "a4b985d8976f2956736246f932506d4f62c6457b"
        ],
        [
            "compute; intros Hx; inv Hx.",
            "VernacExtend",
            "b13f904c45a0e360813e2d7dc11d9a5a02af79ca"
        ],
        [
            "eapply Z.le_trans; [eassumption | ].",
            "VernacExtend",
            "0dba21230be013edfaa07abac905a6e3f38fef80"
        ],
        [
            "compute; intros Hx; inv Hx.",
            "VernacExtend",
            "b13f904c45a0e360813e2d7dc11d9a5a02af79ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite intsigned_intrepr_bytesigned : rep_omega.",
            "VernacExtend",
            "75f18454c8ce0601c0a2b57ea0b5fddcdc699408"
        ],
        [
            "Ltac prove_it_now := first [ splittable; fail 1 | computable | apply Coq.Init.Logic.I | reflexivity | rewrite ?intsigned_intrepr_bytesigned; rep_omega | prove_signed_range | repeat match goal with H: ?A |- _ => has_evar A; clear H end; auto with prove_it_now field_compatible; autorewrite with norm entailer_rewrite; normalize; first [eapply field_compatible_nullval; eassumption | eapply field_compatible_nullval1; eassumption | eapply field_compatible_nullval2; eassumption ] ].",
            "VernacExtend",
            "ea7114fe8090a846050d8fc009403a6c2c2cde9c"
        ],
        [
            "Ltac try_prove_it_now := first [match goal with H := _ |- _ => instantiate (1:=True) in H; prove_it_now end | eassumption].",
            "VernacExtend",
            "8b8bb7fdc82e9f7dd16ab3e7f4e68c459560a5ed"
        ],
        [
            "Lemma try_conjuncts_lem2: forall A B : Prop, B -> A -> (A /\\ B).",
            "VernacStartTheoremProof",
            "8b13c1dd828db805b0b79f13b79e2552b8989a19"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_conjuncts_lem: forall A B A' B' : Prop, (A -> A') -> (B -> B') -> (A /\\ B -> A' /\\ B').",
            "VernacStartTheoremProof",
            "47583943881b4c359749940639e4dbae039575ba"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_conjuncts_start: forall A B: Prop, (A -> B) -> (A -> B).",
            "VernacStartTheoremProof",
            "b41890ae73379c0c21dd672ed85518c52274be9e"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac try_conjuncts_solver := lazymatch goal with H:_ |- ?A => no_evars A; clear H; try immediate; auto; prove_it_now; fail end.",
            "VernacExtend",
            "fa96a6f9073f9c8880b8bebe15a0d029e6d444de"
        ],
        [
            "Ltac try_conjuncts := first [ simple eapply conj; [try_conjuncts_solver | try_conjuncts ] | simple eapply try_conjuncts_lem2; [try_conjuncts_solver | match goal with H:_ |- _ => apply H end ] | simple eapply try_conjuncts_lem; [intro; try_conjuncts | intro; try_conjuncts |match goal with H:_ |- _ => apply H end ] | match goal with H:_ |- _ => instantiate (1:=True) in H; try_conjuncts_solver end | match goal with H:_ |- _ => apply H end ].",
            "VernacExtend",
            "20b075cd495d57f9bf0781b6d095285f006bdbd5"
        ],
        [
            "Lemma try_conjuncts_prop_and: forall {A}{NA: NatDed A} (S: A) (P P': Prop) Q, (P' -> P) -> S |-- !! P' && Q -> S |-- !! P && Q.",
            "VernacStartTheoremProof",
            "e164aa4382859e929c5d673abe09a4838b12a68e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [apply H0 |].",
            "VernacExtend",
            "cc740a62b2ffa08bce06d269b12bae05c144df83"
        ],
        [
            "apply andp_derives; auto.",
            "VernacExtend",
            "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
        ],
        [
            "apply prop_derives; auto.",
            "VernacExtend",
            "9c851d818521d992d36a192373a20cedaaf628d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_conjuncts_prop: forall {A}{NA: NatDed A} (S: A) (P P': Prop), (P' -> P) -> S |-- !! P' -> S |-- !! P .",
            "VernacStartTheoremProof",
            "bf0456f58c64b0d21f695095a95d5ac377fb543a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply derives_trans; [apply H0 |].",
            "VernacExtend",
            "cc740a62b2ffa08bce06d269b12bae05c144df83"
        ],
        [
            "apply prop_derives; auto.",
            "VernacExtend",
            "9c851d818521d992d36a192373a20cedaaf628d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac prop_right_cautious := try solve [simple apply prop_right; auto; prove_it_now].",
            "VernacExtend",
            "464db55f0793aeae238088a8109ac34008416bb3"
        ],
        [
            "Ltac prune_conjuncts := repeat rewrite and_assoc'; first [simple eapply try_conjuncts_prop; [intro; try_conjuncts | cbv beta; repeat rewrite and_True; prop_right_cautious ] | simple eapply try_conjuncts_prop_and; [intro; try_conjuncts | cbv beta; repeat rewrite and_True; try simple apply go_lower_lem1] | idtac].",
            "VernacExtend",
            "2cb909947551f016c5c727ec8a7f8ab04e0eead7"
        ],
        [
            "Ltac entailer' := repeat (progress (ent_iter; normalize)); try simple apply prop_and_same_derives; prune_conjuncts; try rewrite (prop_true_andp True) by apply Coq.Init.Logic.I; try solve_valid_pointer; try first [apply derives_refl | simple apply FF_left | simple apply TT_right].",
            "VernacExtend",
            "66d5a5386459e1f6472959321bfe33b6408054e0"
        ],
        [
            "Lemma empTrue: @derives mpred Nveric (@emp mpred Nveric Sveric) (@prop mpred Nveric True).",
            "VernacStartTheoremProof",
            "1d93b8306e9f096a17eb012483e2ae783babab0d"
        ],
        [
            "apply prop_right; auto.",
            "VernacExtend",
            "95e18efadb5767545f0255f518eaa92b08876b58"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac entailer := try match goal with POSTCONDITION := @abbreviate ret_assert _ |- _ => clear POSTCONDITION end; try match goal with MORE_COMMANDS := @abbreviate statement _ |- _ => clear MORE_COMMANDS end; match goal with | |- ?P |-- _ => match type of P with | ?T => unify T (environ->mpred); go_lower | _ => clear_Delta; pull_out_props end | |- _ => fail \"The entailer tactic works only on entailments _ |-- _ \" end; saturate_local; entailer'; rewrite <- ?sepcon_assoc.",
            "VernacExtend",
            "d43b47900c0a4de2d39600f3ea8cab8df88cbe24"
        ],
        [
            "Lemma my_auto_lem: forall (P Q: Prop), (P -> Q) -> (P -> Q).",
            "VernacStartTheoremProof",
            "989f30b259dc3dc0142a21a0d117a4d994c50d89"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac my_auto_iter H := first [instantiate (1:=True) in H; prove_it_now | splittable; eapply try_conjuncts_lem; [let H1 := fresh in intro H1; my_auto_iter H1 |let H1 := fresh in intro H1; my_auto_iter H1 | apply H ] | apply H ].",
            "VernacExtend",
            "564924f92c27070fa90ada02db124ece75b634d0"
        ],
        [
            "Ltac all_True := solve [repeat simple apply conj; simple apply Coq.Init.Logic.I].",
            "VernacExtend",
            "811097be84826e884f0415bd2a374634001d4e4b"
        ],
        [
            "Ltac my_auto_reiter := first [simple apply conj; [all_True | ]; my_auto_reiter |simple apply conj; [ | all_True]; my_auto_reiter |splittable; eapply try_conjuncts_lem; [intro; my_auto_reiter |intro; my_auto_reiter |eassumption] |eassumption].",
            "VernacExtend",
            "2b3aec734fa15c6fb3d8e531aebf824aa92bf67d"
        ],
        [
            "Ltac my_auto := rewrite ?isptr_force_ptr by auto; let H := fresh in eapply my_auto_lem; [intro H; my_auto_iter H | ]; try all_True; (eapply my_auto_lem; [intro; my_auto_reiter | ]); normalize.",
            "VernacExtend",
            "5c5fdfef5b29416ac650b05972a8fab12975ca2a"
        ],
        [
            "Lemma prop_and_same_derives' {A}{NA: NatDed A}: forall (P: Prop) Q, P -> Q |-- !!P && Q.",
            "VernacStartTheoremProof",
            "aa632b32d2f7eab12c57422a582c7cef8f97073d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_right; auto.",
            "VernacExtend",
            "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
        ],
        [
            "apply prop_right; auto.",
            "VernacExtend",
            "95e18efadb5767545f0255f518eaa92b08876b58"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac entbang := intros; try match goal with POSTCONDITION := @abbreviate ret_assert _ |- _ => clear POSTCONDITION end; try match goal with MORE_COMMANDS := @abbreviate statement _ |- _ => clear MORE_COMMANDS end; match goal with | |- local _ && ?P |-- _ => go_lower; try apply empTrue | |- ?P |-- _ => match type of P with | ?T => unify T mpred; pull_out_props end | |- _ => fail \"The entailer tactic works only on entailments _ |-- _ \" end; repeat match goal with | |- context [force_val (sem_binary_operation' ?op ?t1 ?t2 ?v1 ?v2)] => progress simpl (force_val (sem_binary_operation' op t1 t2 v1 v2)) end; simpl sem_cast; saturate_local; ent_iter; repeat change (mapsto_memory_block.spacer _ _ _ _) with emp; first [ contradiction | simple apply prop_right; my_auto | match goal with |- ?Q |-- !! _ && ?Q' => constr_eq Q Q'; simple apply prop_and_same_derives'; my_auto end | simple apply andp_right; [apply prop_right; my_auto | cancel; rewrite <- ?sepcon_assoc; autorewrite with norm ] | normalize; cancel; rewrite <- ?sepcon_assoc ].",
            "VernacExtend",
            "8ce8ea257d9f8047f936d802d027c276a706cc78"
        ],
        [
            "Tactic Notation \"entailer\" \"!\" := entbang.",
            "VernacExtend",
            "66d34bb5189ebe0ac4bf47879f567bd4532ab18b"
        ],
        [
            "Ltac elim_hyps := repeat match goal with | H: isptr ?x |- _ => let x1 := fresh x \"_b\" in let x2 := fresh x \"_ofs\" in destruct x as [ | | | | | x1 x2]; inv H | H: ptr_eq _ _ |- _ => apply ptr_eq_e in H; safe_subst_any end.",
            "VernacExtend",
            "a63eccf2a2fed9dba94f0ac7b852e397d9b9b8a1"
        ],
        [
            "Ltac aggressive := repeat split; auto; elim_hyps; simpl; (computable || auto).",
            "VernacExtend",
            "9db09b758f8301cc666a3d5213247957f8bd73ec"
        ],
        [
            "Hint Rewrite Int.signed_repr using rep_omega : norm.",
            "VernacExtend",
            "1636440f8a2bc5a7fc454dd0f477cb6106b4bc42"
        ],
        [
            "Hint Rewrite Int.unsigned_repr using rep_omega : norm.",
            "VernacExtend",
            "f333e1dcd0b341d5330f6ba0585370372bceacdb"
        ],
        [
            "Hint Rewrite Int64.signed_repr using rep_omega : norm.",
            "VernacExtend",
            "a9d3e9966ce375e4861f111ba75b5369ab196ebb"
        ],
        [
            "Hint Rewrite Int64.unsigned_repr using rep_omega : norm.",
            "VernacExtend",
            "ce2435c8db624f50c6a656c945f0acfc848c53e3"
        ],
        [
            "Definition EVAR (x: Prop) := x.",
            "VernacDefinition",
            "9ad5f46f52f23b24ea0da1dcdac7bb5a38416bb1"
        ],
        [
            "Lemma EVAR_e: forall x, EVAR x -> x.",
            "VernacStartTheoremProof",
            "286480a556ce31e91c2cc87334fb3a49bd7091c0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac gather_entail := repeat match goal with | A := _ |- _ => clear A || (revert A; match goal with |- ?B => no_evars B end) | H : ?P |- _ => match type of P with | Prop => match P with name _ => fail 2 | _ => revert H; match goal with |- ?B => no_evars B end end | _ => clear H || (revert H; match goal with |- ?B => no_evars B end) end end; repeat match goal with | x := ?X |- _ => is_evar X; clearbody x; revert x; apply EVAR_e end; repeat match goal with | H : name _ |- _ => revert H end.",
            "VernacExtend",
            "517f30b79c61d310dd6b3d0086a0671700ccd9da"
        ],
        [
            "Lemma EVAR_i: forall P: Prop, P -> EVAR P.",
            "VernacStartTheoremProof",
            "94a8019bc30e8bc97ec6d1857a7706ca1e7baabb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac ungather_entail := match goal with | |- EVAR (forall x : ?t, _) => let x' := fresh x in evar (x' : t); let x'' := fresh x in apply EVAR_i; intro x''; replace x'' with x'; [ungather_entail; clear x'' | admit ] | |- _ => intros end.",
            "VernacExtend",
            "0c4fd127c0b7ae355273fc2b4aaf7f90228ff4a5"
        ],
        [
            "Lemma offset_val_sizeof_hack: forall cenv t i p, isptr p -> i=0 -> (offset_val (@sizeof cenv t * i) p = p) = True.",
            "VernacStartTheoremProof",
            "eeb130229a47cae2df3e637752a88e3e24338d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "destruct p; try contradiction.",
            "VernacExtend",
            "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z.mul_0_r.",
            "VernacExtend",
            "664f831e42137f58110ae866184777114a9839a4"
        ],
        [
            "rewrite Ptrofs.add_zero.",
            "VernacExtend",
            "4b7ae4f0c59e9883551151502eefb59ae19b7e75"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite offset_val_sizeof_hack : norm.",
            "VernacExtend",
            "b4f01eedb37adf93f6bb1281d563d8bb4a236a99"
        ],
        [
            "Lemma offset_val_sizeof_hack2: forall cenv t i j p, isptr p -> i=j -> (offset_val (@sizeof cenv t * i) p = offset_val (@sizeof cenv t * j) p) = True.",
            "VernacStartTheoremProof",
            "42b340cbcede22e2fc77e7be70109f1a744d7519"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite offset_val_sizeof_hack2 : norm.",
            "VernacExtend",
            "8a637ffbba522b8b0fdb6a8e96df263047f57112"
        ],
        [
            "Lemma offset_val_sizeof_hack3: forall cenv t i p, isptr p -> i=1 -> (offset_val (@sizeof cenv t * i) p = offset_val (@sizeof cenv t) p) = True.",
            "VernacStartTheoremProof",
            "60ac0d7a652f0072a88892c1a0ae907e9b079001"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite Z.mul_1_r.",
            "VernacExtend",
            "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
        ],
        [
            "apply prop_ext; intuition.",
            "VernacExtend",
            "8a4224a6b11df295ba822165ed660bf644fc5d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite offset_val_sizeof_hack3 : norm.",
            "VernacExtend",
            "76d7c7d2c86b90ad5034acf5f792d29a12ccab96"
        ],
        [
            "Ltac make_Vptr c := let H := fresh in assert (isptr c) by auto; destruct c; try (contradiction H); clear H.",
            "VernacExtend",
            "c1232235457d43f3b9f7c7c9a09bf58451a76958"
        ],
        [
            "Lemma Zmax0r: forall n, 0 <= n -> Z.max 0 n = n.",
            "VernacStartTheoremProof",
            "d4620bca6dcaf3de2dc9689e4ec345fb51e70775"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Z.max_r; auto.",
            "VernacExtend",
            "0d7e28a068d187bdc64663f935e332cfd7c064de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite Zmax0r using (try computable; rep_omega ) : norm.",
            "VernacExtend",
            "9ebad56ce99a080852b8c5fcbed8626e5c3aa21c"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Definition cstring {CS : compspecs} sh (s: list byte) p := !!(~In Byte.zero s) && data_at sh (tarray tschar (Zlength s + 1)) (map Vbyte (s ++ [Byte.zero])) p.",
            "VernacDefinition",
            "0d4060324081741e2300cabfaf3612cee068a8ce"
        ],
        [
            "Lemma cstring_local_facts: forall {CS : compspecs} sh s p, cstring sh s p |-- !! (isptr p /\\ Zlength s + 1 < Ptrofs.modulus).",
            "VernacStartTheoremProof",
            "6d27593721ca4b16e143cc707d4e0f320d67e4a2"
        ],
        [
            "intros; unfold cstring; entailer!.",
            "VernacExtend",
            "8a8a0f1200c3863b8e85aad3f1058b649fe9f9e1"
        ],
        [
            "destruct H0 as [? [_ [? _]]].",
            "VernacExtend",
            "02a7dd4b7191b42273a0c72584d79a5da56dff4f"
        ],
        [
            "destruct p; try contradiction.",
            "VernacExtend",
            "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
        ],
        [
            "red in H3.",
            "VernacExtend",
            "ac8ec570fe33bb4333a0085d30b33eda8278324a"
        ],
        [
            "unfold sizeof in H3; clear H1.",
            "VernacExtend",
            "d26a76c20a7fa72d90889a7f7b9f0861c8aa3988"
        ],
        [
            "rewrite Z.max_r in H3 by list_solve.",
            "VernacExtend",
            "9eba7dd2357753761ac36cbd9cd9098d06c9a99c"
        ],
        [
            "fold sizeof in H3.",
            "VernacExtend",
            "1d15419ca4709e8ad749d91b47b8c347f66e6f24"
        ],
        [
            "change (sizeof tschar) with 1 in H3.",
            "VernacExtend",
            "d7c08c187af119ecb53600c9a89c4529389c9f8a"
        ],
        [
            "pose proof (Ptrofs.unsigned_range i).",
            "VernacExtend",
            "655ec051b9ce57dcaebd5e4e4cc7a40bacce90f1"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cstring_local_facts : saturate_local.",
            "VernacHints",
            "e9d4c15004c1d7c2cbafb03b3f5b9d471791f0f9"
        ],
        [
            "Lemma cstring_valid_pointer: forall {CS : compspecs} sh s p, nonempty_share sh -> cstring sh s p |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "315be5b3e0d72c96976e665c1546cdbe895e4d3b"
        ],
        [
            "intros; unfold cstring; Intros.",
            "VernacExtend",
            "883f7560f247f743054d3199b427db6310ae58ac"
        ],
        [
            "apply data_at_valid_ptr; auto.",
            "VernacExtend",
            "07263a0ec016bd2969bcd3dcdd5f933ac8c98e34"
        ],
        [
            "unfold tarray, tschar, sizeof.",
            "VernacExtend",
            "a297d634790947fea613079ecdbda2531b964331"
        ],
        [
            "pose proof (Zlength_nonneg s).",
            "VernacExtend",
            "58e12e9242cbd08344522024b51f52eb8177df7a"
        ],
        [
            "rewrite Z.max_r; omega.",
            "VernacExtend",
            "3f72e314daa819baaec90481188770dafd4f0f54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cstring_valid_pointer : valid_pointer.",
            "VernacHints",
            "f59469370122056f521b92fcfba71a1cbc8942a5"
        ],
        [
            "Definition cstringn {CS : compspecs} sh (s: list byte) n p := !!(~In Byte.zero s) && data_at sh (tarray tschar n) (map Vbyte (s ++ [Byte.zero]) ++ list_repeat (Z.to_nat (n - (Zlength s + 1))) Vundef) p.",
            "VernacDefinition",
            "22f595e60c8727b8a8e85ab9e27dc2e570d1b37b"
        ],
        [
            "Lemma cstringn_equiv : forall {CS : compspecs} sh s p, cstring sh s p = cstringn sh s (Zlength s + 1) p.",
            "VernacStartTheoremProof",
            "bc1d944f05c467c4e7b6e91fa51b6dc50ac3ba25"
        ],
        [
            "intros; unfold cstring, cstringn.",
            "VernacExtend",
            "49bf1e33952a2ade5d15bd70278fe9bc640c9e4b"
        ],
        [
            "rewrite Zminus_diag, app_nil_r; auto.",
            "VernacExtend",
            "aa9dbde8d767149314464b1cfe9dcb87bdb5f871"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cstringn_local_facts: forall {CS : compspecs} sh s n p, cstringn sh s n p |-- !! (isptr p /\\ Zlength s + 1 <= n <= Ptrofs.max_unsigned).",
            "VernacStartTheoremProof",
            "d2a1527e9fc8efea29d0a3136f1d6cbc8f901f9f"
        ],
        [
            "intros; unfold cstringn; entailer!.",
            "VernacExtend",
            "ebe5275ef0d143dd932a40c03a8cbc9e6c40b6aa"
        ],
        [
            "autorewrite with sublist in H1.",
            "VernacExtend",
            "e81a85458412b6d6afed1bc5111ec4bce6d2e818"
        ],
        [
            "pose proof (Zlength_nonneg s).",
            "VernacExtend",
            "58e12e9242cbd08344522024b51f52eb8177df7a"
        ],
        [
            "pose proof (Zlength_nonneg (list_repeat (Z.to_nat (n - (Zlength s + 1))) Vundef)).",
            "VernacExtend",
            "b3c68e9e645e313120906e6f8e6cf1c7a4f91f95"
        ],
        [
            "destruct H0 as [? [_ [? _]]].",
            "VernacExtend",
            "02a7dd4b7191b42273a0c72584d79a5da56dff4f"
        ],
        [
            "destruct p; try contradiction.",
            "VernacExtend",
            "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
        ],
        [
            "red in H5.",
            "VernacExtend",
            "ff9040b13ca0d7c045db5da168a0d9f34002b648"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "destruct (Z.max_spec 0 n) as [[? Hn] | [? Hn]]; rewrite Hn in *; split; try omega.",
            "VernacExtend",
            "019e826feaae310052ac9f1439c3e2a0a40503f9"
        ],
        [
            "unfold sizeof in H5.",
            "VernacExtend",
            "221379253886c4c04f1269e093bcee6634e5a892"
        ],
        [
            "rewrite Hn in H5.",
            "VernacExtend",
            "1e8886a6a8ebe6d445bbbcdd6efec47ddc709419"
        ],
        [
            "fold sizeof in H5.",
            "VernacExtend",
            "107e1dda02c3f928afa16bf29a8a2e50f9f6ee21"
        ],
        [
            "change (sizeof tschar) with 1 in H5.",
            "VernacExtend",
            "0ff2b64f37ced044f30f08d4980b72ff3c1dcb40"
        ],
        [
            "pose proof (Ptrofs.unsigned_range i).",
            "VernacExtend",
            "655ec051b9ce57dcaebd5e4e4cc7a40bacce90f1"
        ],
        [
            "rep_omega.",
            "VernacExtend",
            "41dfe20803b7e2448c0c8c8e355b919fa38aa228"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cstringn_local_facts : saturate_local.",
            "VernacHints",
            "23a049c07b3a6a7cd9c192b227a6c2a1593c1ec6"
        ],
        [
            "Lemma cstringn_valid_pointer: forall {CS : compspecs} sh s n p, nonempty_share sh -> cstringn sh s n p |-- valid_pointer p.",
            "VernacStartTheoremProof",
            "6c9d1d45d1dafd27e1e06b4a8f07b6c8c8dc4fd0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "entailer!.",
            "VernacExtend",
            "af6686b03fdaa36eda59b33b9a60eeb4186a74f5"
        ],
        [
            "unfold cstringn; Intros.",
            "VernacExtend",
            "549cf2a8733967f0d5499e8758c1092b93d1ac84"
        ],
        [
            "apply data_at_valid_ptr; auto.",
            "VernacExtend",
            "07263a0ec016bd2969bcd3dcdd5f933ac8c98e34"
        ],
        [
            "unfold tarray, tschar, sizeof; cbv beta iota zeta.",
            "VernacExtend",
            "1f3fbc3e076ae57b39aded269f74a1a3976eeb67"
        ],
        [
            "pose proof (Zlength_nonneg s).",
            "VernacExtend",
            "58e12e9242cbd08344522024b51f52eb8177df7a"
        ],
        [
            "rewrite Z.max_r; omega.",
            "VernacExtend",
            "3f72e314daa819baaec90481188770dafd4f0f54"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cstringn_valid_pointer : valid_pointer.",
            "VernacHints",
            "85106e46cc99b536f7ed7260a710b401bb7b8f59"
        ],
        [
            "Lemma Znth_zero_zero: forall i, Znth i [Byte.zero] = Byte.zero.",
            "VernacStartTheoremProof",
            "fcdde98152f7d0fe85cdc48d7b79a25fd46cb12e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Znth.",
            "VernacExtend",
            "7211d3ddadb408c13a3757be0ceaaabeebf7b887"
        ],
        [
            "if_tac; auto.",
            "VernacExtend",
            "405a5d1c67f2928c68a29c10540d8abdea32b1bd"
        ],
        [
            "destruct (Z.to_nat i).",
            "VernacExtend",
            "36d7b2385fb963baaabbe694d40138db4f90c368"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "destruct n; reflexivity.",
            "VernacExtend",
            "a209e41a5051b9c3a7517e74f2df52e0f78433d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac cstring := lazymatch goal with | H: ~In Byte.zero _ |- _ => idtac | |- _ => fail \"The cstring tactic expects to see a hypothesis above the line of the form, ~ In Byte.zero _\" end; lazymatch goal with | H1: Znth _ (_++[Byte.zero]) = Byte.zero |- _ => idtac | H1: Znth _ (_++[Byte.zero]) <> Byte.zero |- _ => idtac | |- _ => fail \"The cstring tactic expects to see one of the following hypotheses above the line: Znth _ (_++[Byte.zero]) = Byte.zero Znth _ (_++[Byte.zero]) <> Byte.zero\" end; (pose_Zlength_nonneg; apply Classical_Prop.NNPP; intro; match goal with | H: ~In Byte.zero ?ls, H1: Znth ?i (?ls' ++ [Byte.zero]) = Byte.zero |- _ => constr_eq ls ls'; apply H; rewrite <- H1; rewrite app_Znth1 by omega; apply Znth_In; omega | H: ~In Byte.zero ?ls, H1: Znth ?i (?ls' ++ [Byte.zero]) <> Byte.zero |- _ => constr_eq ls ls'; apply H1; rewrite app_Znth2 by omega; apply Znth_zero_zero end) || match goal with |- @eq ?t (?f1 _) (?f2 _) => (unify t Z || unify t nat) || (constr_eq f1 f2; fail \"The cstring tactic solves omega-style goals. Your goal is an equality at type\" t \", not type Z. Try the [f_equal] tactic first.\") end.",
            "VernacExtend",
            "2efcd29fac87a19108ba78f604d7e7e5f09515dd"
        ],
        [
            "Ltac progress_entailer := lazymatch goal with | |- @derives mpred _ ?A ?B => entailer!; try match goal with |- @derives mpred _ A B => fail 2 end | |- _ => progress entailer! end.",
            "VernacExtend",
            "5549dc70e026589fd8f7be83e8f7c09ea7496fec"
        ],
        [
            "Ltac cstring' := lazymatch goal with | |- @eq Z _ _ => cstring | |- ?A _ = ?B _ => constr_eq A B; f_equal; cstring' | |- _ => cstring end.",
            "VernacExtend",
            "1d086e70af4e79e84de2a1bb4b0fa0a20fb95ee3"
        ],
        [
            "Ltac cstring1 := match goal with | H: 0 <= ?x < Zlength ?s + 1, H1: Znth ?x (?s ++ [Byte.zero]) = Byte.zero |- _ => is_var x; assert (x = Zlength s) by cstring; subst x end.",
            "VernacExtend",
            "42afbf4996961ecc9c50d647a0732a1c74b0aa8c"
        ]
    ],
    "proofs": [
        {
            "name": "ptrofs_of_ints_unfold",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptrofs_of_intu_unfold",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isptr_force_val_sem_cast_neutral",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct p; try contradiction; apply I.",
                        "VernacExtend",
                        "ea8b4008b1bfe71ade5e0a03c0d6188f89c5118c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FF_local_facts",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply FF_left.",
                        "VernacExtend",
                        "5e2b816586ba7150957d4a3cc0517225443a64c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_and_same_derives",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "denote_tc_test_eq_split",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans with (valid_pointer x && valid_pointer y).",
                        "VernacExtend",
                        "88c2f53a5aca2bd49bffac4a29ae1ccbbc3496fa"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "unfold denote_tc_test_eq, weak_valid_pointer.",
                        "VernacExtend",
                        "6c16a14015d769ff18242959ad49d55969150361"
                    ]
                },
                {
                    "command": [
                        "change predicates_hered.orp with orp.",
                        "VernacExtend",
                        "2127feb1d6226474cb286174b1db8d722ce18f77"
                    ]
                },
                {
                    "command": [
                        "destruct x; try (apply andp_left1; apply @FF_left); try apply @TT_right; destruct y; try (apply andp_left2; apply @FF_left); try apply @TT_right.",
                        "VernacExtend",
                        "14a99b098b1bd535f218f34c7b24aec631f059e9"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; try apply derives_refl.",
                        "VernacExtend",
                        "7362774ca87b876d66968af5d455c1795f8401f6"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; try apply derives_refl.",
                        "VernacExtend",
                        "7362774ca87b876d66968af5d455c1795f8401f6"
                    ]
                },
                {
                    "command": [
                        "apply orp_right1.",
                        "VernacExtend",
                        "fd9602f2e34364527553f92446fb4f750d4ab398"
                    ]
                },
                {
                    "command": [
                        "apply derives_refl.",
                        "VernacExtend",
                        "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
                    ]
                },
                {
                    "command": [
                        "rewrite andp_comm.",
                        "VernacExtend",
                        "f42ee316a55b2a9216373e6b515ce4b77ae502d5"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; try apply derives_refl.",
                        "VernacExtend",
                        "7362774ca87b876d66968af5d455c1795f8401f6"
                    ]
                },
                {
                    "command": [
                        "apply orp_right1.",
                        "VernacExtend",
                        "fd9602f2e34364527553f92446fb4f750d4ab398"
                    ]
                },
                {
                    "command": [
                        "apply derives_refl.",
                        "VernacExtend",
                        "e6aad07de74a98e9e95ce8bc0aeafdd1290e4b6f"
                    ]
                },
                {
                    "command": [
                        "unfold test_eq_ptrs.",
                        "VernacExtend",
                        "bed0bef8c939c515e743b3e53306b9eb9eb84963"
                    ]
                },
                {
                    "command": [
                        "destruct (sameblock _ _); auto.",
                        "VernacExtend",
                        "5add85d04dc54eb96597fb8186bc39e2a08961c7"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; apply valid_pointer_weak.",
                        "VernacExtend",
                        "5a97b90d66ac65ab9e5956fac27e98bf69d673f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_pointer_null",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold nullval, valid_pointer, valid_pointer'.",
                        "VernacExtend",
                        "c61f06cb7faf3c7020113ef69f7c0299a013e05e"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64 eqn:Hp; simpl; change predicates_hered.prop with prop; normalize.",
                        "VernacExtend",
                        "170653ea99a29229889cb2663f263f1c853ef173"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extend_valid_pointer",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold valid_pointer.",
                        "VernacExtend",
                        "c7f47f3592a120203b1e3502ec66551acf3562ca"
                    ]
                },
                {
                    "command": [
                        "pose proof (extend_tc.extend_valid_pointer' p 0).",
                        "VernacExtend",
                        "480916c36b1d05ad484483e7af159a217c893a80"
                    ]
                },
                {
                    "command": [
                        "pose proof (predicates_hered.boxy_e _ _ H).",
                        "VernacExtend",
                        "d6a165d67196f329003a05c960d1b2552e51c536"
                    ]
                },
                {
                    "command": [
                        "change (_ |-- _) with (predicates_hered.derives (valid_pointer' p 0 * Q) (valid_pointer' p 0)).",
                        "VernacExtend",
                        "905e0966aa0a818103682df2aec898ab4b12468e"
                    ]
                },
                {
                    "command": [
                        "intros ? (w1 & w2 & Hj & Hp & ?).",
                        "VernacExtend",
                        "b92c23a8fbac1cb1886bc51fcca96a98959e50d0"
                    ]
                },
                {
                    "command": [
                        "apply (H0 w1); auto.",
                        "VernacExtend",
                        "425d468ec94d721a47d0e579a71ccf182ab574b4"
                    ]
                },
                {
                    "command": [
                        "hnf; eauto.",
                        "VernacExtend",
                        "aad61d1690f1d235151e164e7b7feb63ec19452a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extend_weak_valid_pointer",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold weak_valid_pointer.",
                        "VernacExtend",
                        "a897123e84201879bbf012a22f11d2c8b42858ef"
                    ]
                },
                {
                    "command": [
                        "pose proof (extend_tc.extend_valid_pointer' p 0).",
                        "VernacExtend",
                        "480916c36b1d05ad484483e7af159a217c893a80"
                    ]
                },
                {
                    "command": [
                        "pose proof (predicates_hered.boxy_e _ _ H).",
                        "VernacExtend",
                        "d6a165d67196f329003a05c960d1b2552e51c536"
                    ]
                },
                {
                    "command": [
                        "pose proof (extend_tc.extend_valid_pointer' p (-1)).",
                        "VernacExtend",
                        "0a81e7cc558962d53f157b65528bcb7148008bec"
                    ]
                },
                {
                    "command": [
                        "pose proof (predicates_hered.boxy_e _ _ H1).",
                        "VernacExtend",
                        "4ad18acf0955e65807f2fcd586ac0f29d7443d47"
                    ]
                },
                {
                    "command": [
                        "change (_ |-- _) with (predicates_hered.derives (predicates_hered.orp (valid_pointer' p 0) (valid_pointer' p (-1)) * Q) (predicates_hered.orp (valid_pointer' p 0) (valid_pointer' p (-1)))).",
                        "VernacExtend",
                        "8ba8ce77acf97aaf7debe5084b49d0d456707632"
                    ]
                },
                {
                    "command": [
                        "intros ? (w1 & w2 & Hj & Hp & ?).",
                        "VernacExtend",
                        "b92c23a8fbac1cb1886bc51fcca96a98959e50d0"
                    ]
                },
                {
                    "command": [
                        "simpl in Hp |- * .",
                        "VernacExtend",
                        "d78f52ab56f5ff823384c257e6e798b40a671ba6"
                    ]
                },
                {
                    "command": [
                        "destruct Hp; [left; apply (H0 w1) | right; apply (H2 w1)]; auto; hnf; eauto.",
                        "VernacExtend",
                        "2a48893d1c14b1e6f1a1bdba5acc7f4d2c0ac466"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sepcon_valid_pointer1",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [apply sepcon_derives; [eassumption | apply TT_right] |].",
                        "VernacExtend",
                        "f57a6a62eafcbc9e055bd20dbc22d2aedb5fd5e0"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "apply extend_valid_pointer.",
                        "VernacExtend",
                        "97ff3d3562f0780aa7665436691c038ddf38fe33"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sepcon_valid_pointer2",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_comm; apply sepcon_valid_pointer1.",
                        "VernacExtend",
                        "dc5459b6a6c1f85ad83186c70884a98dce9f3570"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sepcon_weak_valid_pointer1",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [ | apply (extend_weak_valid_pointer p Q)].",
                        "VernacExtend",
                        "57c8dc4edd88e1d8d974ab878e626a118c145fd6"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_derives; auto.",
                        "VernacExtend",
                        "be1a2e9b634dacb2d97e30c206c2fca242392ef2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sepcon_weak_valid_pointer2",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_comm.",
                        "VernacExtend",
                        "fd2af6f842f71517e95b56c21ef3f6449c4ad38d"
                    ]
                },
                {
                    "command": [
                        "apply sepcon_weak_valid_pointer1; auto.",
                        "VernacExtend",
                        "8d00ded159d077c8ccd37c31ba2ca8378801442f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andp_valid_pointer1",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_left1; auto.",
                        "VernacExtend",
                        "fbc9186131c9851d08ff7aadf76f5fc5ca898763"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andp_valid_pointer2",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_left2; auto.",
                        "VernacExtend",
                        "624d28bb04e617622cc0cb522526420dfef62500"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_pointer_zero32",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold valid_pointer, valid_pointer'.",
                        "VernacExtend",
                        "e5ac70a59d6a490113fe1f0632934562dc140f27"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "change predicates_hered.prop with prop; normalize.",
                        "VernacExtend",
                        "a3cae991061d8bc9798304baaf17ecf5f339c1f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_pointer_zero64",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold valid_pointer, valid_pointer'.",
                        "VernacExtend",
                        "e5ac70a59d6a490113fe1f0632934562dc140f27"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "change predicates_hered.prop with prop; normalize.",
                        "VernacExtend",
                        "a3cae991061d8bc9798304baaf17ecf5f339c1f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_False",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_True",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "True_and",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "False_and",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "intros; apply prop_ext; intuition.",
                        "VernacExtend",
                        "29f6b2585664c8346c506e0a0e40390db5d63839"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ptr_eq_refl",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "destruct x; simpl; intros; try contradiction.",
                        "VernacExtend",
                        "b445dbe535a853e80d86f6a4eae474a41ba93601"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "apply Ptrofs.eq_true.",
                        "VernacExtend",
                        "0580ad87719bc3658192ebde0f8c7425e3658a98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intsigned_intrepr_bytesigned",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Int.signed_repr; auto.",
                        "VernacExtend",
                        "d2a3627d99a158baec9a5dfb0e0dbe190f5a271f"
                    ]
                },
                {
                    "command": [
                        "destruct (Byte.signed_range i).",
                        "VernacExtend",
                        "f396329dabf07d739b46a1d7437841bcb7b07aeb"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "eapply Z.le_trans; [ | eassumption].",
                        "VernacExtend",
                        "a4b985d8976f2956736246f932506d4f62c6457b"
                    ]
                },
                {
                    "command": [
                        "compute; intros Hx; inv Hx.",
                        "VernacExtend",
                        "b13f904c45a0e360813e2d7dc11d9a5a02af79ca"
                    ]
                },
                {
                    "command": [
                        "eapply Z.le_trans; [eassumption | ].",
                        "VernacExtend",
                        "0dba21230be013edfaa07abac905a6e3f38fef80"
                    ]
                },
                {
                    "command": [
                        "compute; intros Hx; inv Hx.",
                        "VernacExtend",
                        "b13f904c45a0e360813e2d7dc11d9a5a02af79ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_conjuncts_lem2",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_conjuncts_lem",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_conjuncts_start",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_conjuncts_prop_and",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [apply H0 |].",
                        "VernacExtend",
                        "cc740a62b2ffa08bce06d269b12bae05c144df83"
                    ]
                },
                {
                    "command": [
                        "apply andp_derives; auto.",
                        "VernacExtend",
                        "06fb2d3c3b4119d09c1ccf6848327e268da1e098"
                    ]
                },
                {
                    "command": [
                        "apply prop_derives; auto.",
                        "VernacExtend",
                        "9c851d818521d992d36a192373a20cedaaf628d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_conjuncts_prop",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply derives_trans; [apply H0 |].",
                        "VernacExtend",
                        "cc740a62b2ffa08bce06d269b12bae05c144df83"
                    ]
                },
                {
                    "command": [
                        "apply prop_derives; auto.",
                        "VernacExtend",
                        "9c851d818521d992d36a192373a20cedaaf628d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empTrue",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "apply prop_right; auto.",
                        "VernacExtend",
                        "95e18efadb5767545f0255f518eaa92b08876b58"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "my_auto_lem",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_and_same_derives'",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_right; auto.",
                        "VernacExtend",
                        "01f8426ca1b47d5761359bf895b36d1c0819cd3d"
                    ]
                },
                {
                    "command": [
                        "apply prop_right; auto.",
                        "VernacExtend",
                        "95e18efadb5767545f0255f518eaa92b08876b58"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EVAR_e",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "EVAR_i",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "offset_val_sizeof_hack",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "destruct p; try contradiction.",
                        "VernacExtend",
                        "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_0_r.",
                        "VernacExtend",
                        "664f831e42137f58110ae866184777114a9839a4"
                    ]
                },
                {
                    "command": [
                        "rewrite Ptrofs.add_zero.",
                        "VernacExtend",
                        "4b7ae4f0c59e9883551151502eefb59ae19b7e75"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "offset_val_sizeof_hack2",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "offset_val_sizeof_hack3",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.mul_1_r.",
                        "VernacExtend",
                        "80f92f5dcc09db388a2087f0ef3ff1d16ecdfdff"
                    ]
                },
                {
                    "command": [
                        "apply prop_ext; intuition.",
                        "VernacExtend",
                        "8a4224a6b11df295ba822165ed660bf644fc5d44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zmax0r",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Z.max_r; auto.",
                        "VernacExtend",
                        "0d7e28a068d187bdc64663f935e332cfd7c064de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cstring_local_facts",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "intros; unfold cstring; entailer!.",
                        "VernacExtend",
                        "8a8a0f1200c3863b8e85aad3f1058b649fe9f9e1"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? [_ [? _]]].",
                        "VernacExtend",
                        "02a7dd4b7191b42273a0c72584d79a5da56dff4f"
                    ]
                },
                {
                    "command": [
                        "destruct p; try contradiction.",
                        "VernacExtend",
                        "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
                    ]
                },
                {
                    "command": [
                        "red in H3.",
                        "VernacExtend",
                        "ac8ec570fe33bb4333a0085d30b33eda8278324a"
                    ]
                },
                {
                    "command": [
                        "unfold sizeof in H3; clear H1.",
                        "VernacExtend",
                        "d26a76c20a7fa72d90889a7f7b9f0861c8aa3988"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.max_r in H3 by list_solve.",
                        "VernacExtend",
                        "9eba7dd2357753761ac36cbd9cd9098d06c9a99c"
                    ]
                },
                {
                    "command": [
                        "fold sizeof in H3.",
                        "VernacExtend",
                        "1d15419ca4709e8ad749d91b47b8c347f66e6f24"
                    ]
                },
                {
                    "command": [
                        "change (sizeof tschar) with 1 in H3.",
                        "VernacExtend",
                        "d7c08c187af119ecb53600c9a89c4529389c9f8a"
                    ]
                },
                {
                    "command": [
                        "pose proof (Ptrofs.unsigned_range i).",
                        "VernacExtend",
                        "655ec051b9ce57dcaebd5e4e4cc7a40bacce90f1"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cstring_valid_pointer",
            "line_nb": 288,
            "steps": [
                {
                    "command": [
                        "intros; unfold cstring; Intros.",
                        "VernacExtend",
                        "883f7560f247f743054d3199b427db6310ae58ac"
                    ]
                },
                {
                    "command": [
                        "apply data_at_valid_ptr; auto.",
                        "VernacExtend",
                        "07263a0ec016bd2969bcd3dcdd5f933ac8c98e34"
                    ]
                },
                {
                    "command": [
                        "unfold tarray, tschar, sizeof.",
                        "VernacExtend",
                        "a297d634790947fea613079ecdbda2531b964331"
                    ]
                },
                {
                    "command": [
                        "pose proof (Zlength_nonneg s).",
                        "VernacExtend",
                        "58e12e9242cbd08344522024b51f52eb8177df7a"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.max_r; omega.",
                        "VernacExtend",
                        "3f72e314daa819baaec90481188770dafd4f0f54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cstringn_equiv",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "intros; unfold cstring, cstringn.",
                        "VernacExtend",
                        "49bf1e33952a2ade5d15bd70278fe9bc640c9e4b"
                    ]
                },
                {
                    "command": [
                        "rewrite Zminus_diag, app_nil_r; auto.",
                        "VernacExtend",
                        "aa9dbde8d767149314464b1cfe9dcb87bdb5f871"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cstringn_local_facts",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros; unfold cstringn; entailer!.",
                        "VernacExtend",
                        "ebe5275ef0d143dd932a40c03a8cbc9e6c40b6aa"
                    ]
                },
                {
                    "command": [
                        "autorewrite with sublist in H1.",
                        "VernacExtend",
                        "e81a85458412b6d6afed1bc5111ec4bce6d2e818"
                    ]
                },
                {
                    "command": [
                        "pose proof (Zlength_nonneg s).",
                        "VernacExtend",
                        "58e12e9242cbd08344522024b51f52eb8177df7a"
                    ]
                },
                {
                    "command": [
                        "pose proof (Zlength_nonneg (list_repeat (Z.to_nat (n - (Zlength s + 1))) Vundef)).",
                        "VernacExtend",
                        "b3c68e9e645e313120906e6f8e6cf1c7a4f91f95"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? [_ [? _]]].",
                        "VernacExtend",
                        "02a7dd4b7191b42273a0c72584d79a5da56dff4f"
                    ]
                },
                {
                    "command": [
                        "destruct p; try contradiction.",
                        "VernacExtend",
                        "37341727d80c03a0b4c7e5d341aa44c21eb8d9ff"
                    ]
                },
                {
                    "command": [
                        "red in H5.",
                        "VernacExtend",
                        "ff9040b13ca0d7c045db5da168a0d9f34002b648"
                    ]
                },
                {
                    "command": [
                        "clear H2.",
                        "VernacExtend",
                        "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
                    ]
                },
                {
                    "command": [
                        "destruct (Z.max_spec 0 n) as [[? Hn] | [? Hn]]; rewrite Hn in *; split; try omega.",
                        "VernacExtend",
                        "019e826feaae310052ac9f1439c3e2a0a40503f9"
                    ]
                },
                {
                    "command": [
                        "unfold sizeof in H5.",
                        "VernacExtend",
                        "221379253886c4c04f1269e093bcee6634e5a892"
                    ]
                },
                {
                    "command": [
                        "rewrite Hn in H5.",
                        "VernacExtend",
                        "1e8886a6a8ebe6d445bbbcdd6efec47ddc709419"
                    ]
                },
                {
                    "command": [
                        "fold sizeof in H5.",
                        "VernacExtend",
                        "107e1dda02c3f928afa16bf29a8a2e50f9f6ee21"
                    ]
                },
                {
                    "command": [
                        "change (sizeof tschar) with 1 in H5.",
                        "VernacExtend",
                        "0ff2b64f37ced044f30f08d4980b72ff3c1dcb40"
                    ]
                },
                {
                    "command": [
                        "pose proof (Ptrofs.unsigned_range i).",
                        "VernacExtend",
                        "655ec051b9ce57dcaebd5e4e4cc7a40bacce90f1"
                    ]
                },
                {
                    "command": [
                        "rep_omega.",
                        "VernacExtend",
                        "41dfe20803b7e2448c0c8c8e355b919fa38aa228"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cstringn_valid_pointer",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "entailer!.",
                        "VernacExtend",
                        "af6686b03fdaa36eda59b33b9a60eeb4186a74f5"
                    ]
                },
                {
                    "command": [
                        "unfold cstringn; Intros.",
                        "VernacExtend",
                        "549cf2a8733967f0d5499e8758c1092b93d1ac84"
                    ]
                },
                {
                    "command": [
                        "apply data_at_valid_ptr; auto.",
                        "VernacExtend",
                        "07263a0ec016bd2969bcd3dcdd5f933ac8c98e34"
                    ]
                },
                {
                    "command": [
                        "unfold tarray, tschar, sizeof; cbv beta iota zeta.",
                        "VernacExtend",
                        "1f3fbc3e076ae57b39aded269f74a1a3976eeb67"
                    ]
                },
                {
                    "command": [
                        "pose proof (Zlength_nonneg s).",
                        "VernacExtend",
                        "58e12e9242cbd08344522024b51f52eb8177df7a"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.max_r; omega.",
                        "VernacExtend",
                        "3f72e314daa819baaec90481188770dafd4f0f54"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Znth_zero_zero",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Znth.",
                        "VernacExtend",
                        "7211d3ddadb408c13a3757be0ceaaabeebf7b887"
                    ]
                },
                {
                    "command": [
                        "if_tac; auto.",
                        "VernacExtend",
                        "405a5d1c67f2928c68a29c10540d8abdea32b1bd"
                    ]
                },
                {
                    "command": [
                        "destruct (Z.to_nat i).",
                        "VernacExtend",
                        "36d7b2385fb963baaabbe694d40138db4f90c368"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "destruct n; reflexivity.",
                        "VernacExtend",
                        "a209e41a5051b9c3a7517e74f2df52e0f78433d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}