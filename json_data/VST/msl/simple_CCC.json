{
    "filename": "msl/simple_CCC.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Module CartesianClosedCat.",
            "VernacDefineModule",
            "4ef53add47c3bf4c9b757463b795afadb4488fb4"
        ],
        [
            "Section CartesianClosedCat.",
            "VernacBeginSection",
            "339ffdf768fa0d822a90edb43e3b1d41ae8f1626"
        ],
        [
            "Variable A: Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable arrow: A -> A -> Prop.",
            "VernacAssumption",
            "44af6a204fcaf816951175bf7ac583ce52626f16"
        ],
        [
            "Variable iso: A -> A -> Prop.",
            "VernacAssumption",
            "853615073d7dd1d74e104e7d2b838842cd29bbdd"
        ],
        [
            "Class CCC (prod expo: A -> A -> A): Prop := mkCCC { comm: forall x y, iso (prod x y) (prod y x); assoc: forall x y z, iso (prod (prod x y) z) (prod x (prod y z)); adjoint: forall x y z, arrow (prod x y) z <-> arrow x (expo y z); prod_UMP: forall x x' y y', arrow x x' -> arrow y y' -> arrow (prod x y) (prod x' y') }.",
            "VernacInductive",
            "f9a70122b8439661deae0d2bed1444d1bdba2fa5"
        ],
        [
            "Hypothesis transitivity: forall x y z, arrow x y -> arrow y z -> arrow x z.",
            "VernacAssumption",
            "7715ba51098e387b8aa82c343684687b575e1f5f"
        ],
        [
            "Hypothesis identity: forall x, arrow x x.",
            "VernacAssumption",
            "c658c9177cbf94975c721702fa4df9347076a410"
        ],
        [
            "Lemma expo_UMP: forall prod expo `{CCC prod expo}, forall x x' y y', arrow x' x -> arrow y y' -> arrow (expo x y) (expo x' y').",
            "VernacStartTheoremProof",
            "301a24f6c4d71c295fbe330b86cdc1cdef440215"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply adjoint.",
            "VernacExtend",
            "32e661d828b1693c260924bce3be22e21f95e496"
        ],
        [
            "eapply transitivity; [| exact H1].",
            "VernacExtend",
            "1f0b4fc3144a8b5cf0bb83382a4fdee758187ad8"
        ],
        [
            "eapply transitivity; [apply prod_UMP; [apply identity | eassumption] |].",
            "VernacExtend",
            "c8f1011f8f5c7fc3b9e152d278c6a9234166e026"
        ],
        [
            "apply adjoint.",
            "VernacExtend",
            "32e661d828b1693c260924bce3be22e21f95e496"
        ],
        [
            "apply identity.",
            "VernacExtend",
            "1c50e67fbfb9e2bca5da2328ab99b1be62efb783"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CartesianClosedCat.",
            "VernacEndSegment",
            "74b3dcd398fdbaffe5ad27773bd64cddee6fb68e"
        ],
        [
            "End CartesianClosedCat.",
            "VernacEndSegment",
            "74b3dcd398fdbaffe5ad27773bd64cddee6fb68e"
        ]
    ],
    "proofs": [
        {
            "name": "expo_UMP",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply adjoint.",
                        "VernacExtend",
                        "32e661d828b1693c260924bce3be22e21f95e496"
                    ]
                },
                {
                    "command": [
                        "eapply transitivity; [| exact H1].",
                        "VernacExtend",
                        "1f0b4fc3144a8b5cf0bb83382a4fdee758187ad8"
                    ]
                },
                {
                    "command": [
                        "eapply transitivity; [apply prod_UMP; [apply identity | eassumption] |].",
                        "VernacExtend",
                        "c8f1011f8f5c7fc3b9e152d278c6a9234166e026"
                    ]
                },
                {
                    "command": [
                        "apply adjoint.",
                        "VernacExtend",
                        "32e661d828b1693c260924bce3be22e21f95e496"
                    ]
                },
                {
                    "command": [
                        "apply identity.",
                        "VernacExtend",
                        "1c50e67fbfb9e2bca5da2328ab99b1be62efb783"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}