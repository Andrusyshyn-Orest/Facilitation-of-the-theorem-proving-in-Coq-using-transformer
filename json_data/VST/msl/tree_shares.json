{
    "filename": "msl/tree_shares.v",
    "coq_project": "VST",
    "vernac_cmds": [
        [
            "Require Import VST.msl.base.",
            "VernacRequire",
            "072f05eeaee48c6fa1aa483ac927301379bb7e30"
        ],
        [
            "Require Import VST.msl.eq_dec.",
            "VernacRequire",
            "954e87ce1521f6a3c361de55e2bde6182289034c"
        ],
        [
            "Require Import VST.msl.sepalg.",
            "VernacRequire",
            "b78005af0b326275ac24eaf70d32d2c944f2f772"
        ],
        [
            "Require Import VST.msl.boolean_alg.",
            "VernacRequire",
            "6dae0713ca98c4052eaec8b65ce51e215aa19969"
        ],
        [
            "Require Import Recdef.",
            "VernacRequire",
            "8ffa9cbe33b0c9742b324b18d68b10eb03ac2ead"
        ],
        [
            "Require Import NPeano.",
            "VernacRequire",
            "8e460e93687b19a1d53487b276a760f5ed0eb95b"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Require Import Coq.Arith.Max.",
            "VernacRequire",
            "912df90d3b09d155dcb66d52df14492104222e75"
        ],
        [
            "Module Share <: SHARE_MODEL.",
            "VernacDefineModule",
            "5fe3d5c607d4f6563b0e5f8982bc6d5890bcb4b9"
        ],
        [
            "Inductive ShareTree : Set := | Leaf : bool -> ShareTree | Node : ShareTree -> ShareTree -> ShareTree .",
            "VernacInductive",
            "fa6d8e830d01d3c6615aa9a4e66a05d54d94e5c3"
        ],
        [
            "Fixpoint nonFullTree (x:ShareTree) : Prop := match x with | Leaf b => b = false | Node l r => nonFullTree l \\/ nonFullTree r end.",
            "VernacFixpoint",
            "67a69328b2a3e14a2e6e87b6b7c19af634cf6161"
        ],
        [
            "Fixpoint nonEmptyTree (x:ShareTree) : Prop := match x with | Leaf b => b = true | Node l r => nonEmptyTree l \\/ nonEmptyTree r end.",
            "VernacFixpoint",
            "d08a1a9f71c3b302f45eba7ab7add3d251ba2d5f"
        ],
        [
            "Fixpoint canonicalTree (x:ShareTree) : Prop := match x with | Leaf _ => True | Node l r => nonFullTree x /\\ nonEmptyTree x /\\ canonicalTree l /\\ canonicalTree r end.",
            "VernacFixpoint",
            "d1a4e1474e52a6ca2e3cf0f83bb7aee398534830"
        ],
        [
            "Fixpoint union_tree (x y:ShareTree) { struct x } : ShareTree := match x with | Leaf true => Leaf true | Leaf false => y | Node l1 r1 => match y with | Leaf true => Leaf true | Leaf false => x | Node l2 r2 => Node (union_tree l1 l2) (union_tree r1 r2) end end.",
            "VernacFixpoint",
            "8e5fc7c065fd9d731bfb3d6d1500c12c8e6f14a8"
        ],
        [
            "Fixpoint intersect_tree (x y:ShareTree) { struct x } : ShareTree := match x with | Leaf false => Leaf false | Leaf true => y | Node l1 r1 => match y with | Leaf false => Leaf false | Leaf true => x | Node l2 r2 => Node (intersect_tree l1 l2) (intersect_tree r1 r2) end end.",
            "VernacFixpoint",
            "04e1a6190649a6a2abd1d5fa57294e2de7984b4c"
        ],
        [
            "Fixpoint comp_tree (x:ShareTree) : ShareTree := match x with | Leaf b => Leaf (negb b) | Node l r => Node (comp_tree l) (comp_tree r) end.",
            "VernacFixpoint",
            "0da0503e034321255f744a8eab9bcdc57968807a"
        ],
        [
            "Fixpoint mkCanon (x:ShareTree) : ShareTree := match x with | Leaf b => Leaf b | Node l r => let l' := mkCanon l in let r' := mkCanon r in match l', r' with | Leaf b1, Leaf b2 => if bool_dec b1 b2 then Leaf b1 else Node l' r' | _, _ => Node l' r' end end.",
            "VernacFixpoint",
            "b951e33f3c5e8af735f6f4c5c2afd23620ebf390"
        ],
        [
            "Fixpoint relativ_tree (z a:ShareTree) {struct z} : ShareTree := match z with | Leaf true => a | Leaf false => Leaf false | Node l r => Node (relativ_tree l a) (relativ_tree r a) end.",
            "VernacFixpoint",
            "d77827ca539c2db2f45275f6fdae61fbc7216230"
        ],
        [
            "Inductive shareTreeOrd : ShareTree -> ShareTree -> Prop := | Leaf_Ord : forall b1 b2, implb b1 b2 = true -> shareTreeOrd (Leaf b1) (Leaf b2) | LeafNode_Ord : forall b l r, shareTreeOrd (Node (Leaf b) (Leaf b)) (Node l r) -> shareTreeOrd (Leaf b) (Node l r) | NodeLeaf_Ord : forall b l r, shareTreeOrd (Node l r) (Node (Leaf b) (Leaf b)) -> shareTreeOrd (Node l r) (Leaf b) | Node_Ord : forall l1 l2 r1 r2, shareTreeOrd l1 l2 -> shareTreeOrd r1 r2 -> shareTreeOrd (Node l1 r1) (Node l2 r2) .",
            "VernacInductive",
            "1c4aa8b4987379b4c09a03784fc46227ac67bef0"
        ],
        [
            "Hint Constructors shareTreeOrd.",
            "VernacHints",
            "8d37950cdd85f853e07259a737d2cc97fd5e6cf4"
        ],
        [
            "Definition shareTreeEq (x y:ShareTree) := shareTreeOrd x y /\\ shareTreeOrd y x.",
            "VernacDefinition",
            "3479425efde1abac92fc09389a99f58f9da574c2"
        ],
        [
            "Hint Unfold shareTreeEq.",
            "VernacHints",
            "bed4bfe1b0d28a1eba24aa4a725f100410c47b9d"
        ],
        [
            "Ltac destruct_bool := repeat (match goal with [ b:bool |- _ ] => destruct b end).",
            "VernacExtend",
            "661243f8b443b6482b94e03b8dadd2125b3d7439"
        ],
        [
            "Ltac invert_ord := repeat ( match goal with | [ H:shareTreeEq _ _ |- _ ] => destruct H | [ H:shareTreeOrd (Leaf _) (Leaf _) |- _ ] => inversion H; clear H | [ H:shareTreeOrd (Leaf _) (Node _ _) |- _ ] => inversion H; clear H | [ H:shareTreeOrd (Node _ _) (Leaf _) |- _ ] => inversion H; clear H | [ H:shareTreeOrd (Node _ _) (Node _ _) |- _ ] => inversion H; clear H end; subst).",
            "VernacExtend",
            "ce9b26cecbadb6bf127b1cff15cc0ef2149359ea"
        ],
        [
            "Lemma nonEmpty_dec : forall x, {nonEmptyTree x}+{~nonEmptyTree x}.",
            "VernacStartTheoremProof",
            "dd67fc538526205a41af18dd6866bd3d5ef9a4a8"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma nonFull_dec : forall x, {nonFullTree x}+{~nonFullTree x}.",
            "VernacStartTheoremProof",
            "436132cf35f6c136e94915526b77423b768faf70"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma geTrueFull : forall x, shareTreeOrd (Leaf true) x -> ~nonFullTree x.",
            "VernacStartTheoremProof",
            "79ea39b0551e0871af6ceb0c50004d64dbce0a61"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leFalseEmpty : forall x, shareTreeOrd x (Leaf false) -> ~nonEmptyTree x.",
            "VernacStartTheoremProof",
            "62f12f715998f4081ce8e6b3d0972490a132283a"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma emptyLeFalse : forall x, ~nonEmptyTree x -> shareTreeOrd x (Leaf false).",
            "VernacStartTheoremProof",
            "3c5c18434131dbc7177698726d3f6052d17d038d"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullGeTrue : forall x, ~nonFullTree x -> shareTreeOrd (Leaf true) x.",
            "VernacStartTheoremProof",
            "d335a1266a9af144b4cfadb19a4fb4e2d1cfa1a9"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma falseLeaf_bottom : forall x, shareTreeOrd (Leaf false) x.",
            "VernacStartTheoremProof",
            "3d1fc0f4abb198ed61d578a253e8232cbb5eabbb"
        ],
        [
            "induction x; auto.",
            "VernacExtend",
            "381968ec60b3c326b28cb5341d67ccedca24b7a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trueLeaf_top : forall x, shareTreeOrd x (Leaf true).",
            "VernacStartTheoremProof",
            "93458fffbab48c6e10988bd1993a84081963225f"
        ],
        [
            "induction x; destruct_bool; auto.",
            "VernacExtend",
            "66156a69892e34c340dd6055416a7c8cd77bbff2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve geTrueFull leFalseEmpty emptyLeFalse fullGeTrue falseLeaf_bottom trueLeaf_top.",
            "VernacHints",
            "9e72adf9ef7337ad0bc205cdceb4f9b12cfe292b"
        ],
        [
            "Lemma eqFalseLeaf_empty : forall x, shareTreeEq (Leaf false) x -> ~nonEmptyTree x.",
            "VernacStartTheoremProof",
            "fb892215e2dcbe977fb3deafbd69d682204a1f19"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqTrueLeaf_full : forall x, shareTreeEq (Leaf true) x -> ~nonFullTree x.",
            "VernacStartTheoremProof",
            "c38d3def9a1eb1dd7a7ee4e6d0e33df90c0a5dc2"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma emptyTree_canonical_falseLeaf : forall x, ~nonEmptyTree x -> canonicalTree x -> x = Leaf false.",
            "VernacStartTheoremProof",
            "53f9d1ba1c8400079b13e443b92d9520a8d8d2f8"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTree_canonical_trueLeaf : forall x, ~nonFullTree x -> canonicalTree x -> x = Leaf true.",
            "VernacStartTheoremProof",
            "9d8c51eee25a6885f5d4f4a961c487acf1e99fe4"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eqFalseLeaf_empty eqTrueLeaf_full emptyTree_canonical_falseLeaf fullTree_canonical_trueLeaf.",
            "VernacHints",
            "500aa400602aa57758d249d31ff8c79058b9c147"
        ],
        [
            "Lemma shareTreeOrd_refl : forall x, shareTreeOrd x x.",
            "VernacStartTheoremProof",
            "46ce1411d597f20cfdc09e348b3facb0947d9a68"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "5e802da379a896285ed380e9bd6ac7e832fc13d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeOrd_trans_leaf : forall x1 b x3, shareTreeOrd x1 (Leaf b) -> shareTreeOrd (Leaf b) x3 -> shareTreeOrd x1 x3.",
            "VernacStartTheoremProof",
            "3520ef42d1282b7605ff0e53a3d3adc7b5646aab"
        ],
        [
            "intro x1; induction x1; simpl; intros; invert_ord; destruct_bool; intuition.",
            "VernacExtend",
            "80a6c1be1afb8676f84a6d25dba059f717898a45"
        ],
        [
            "inv H0; invert_ord; destruct_bool; intuition eauto.",
            "VernacExtend",
            "96bc984eb541e851ec6ed05a865544448731fe05"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "inv H0; invert_ord; destruct_bool; intuition eauto.",
            "VernacExtend",
            "96bc984eb541e851ec6ed05a865544448731fe05"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeOrd_trans : forall x1 x2 x3, shareTreeOrd x1 x2 -> shareTreeOrd x2 x3 -> shareTreeOrd x1 x3.",
            "VernacStartTheoremProof",
            "9ec93da4db0164026ce9537fdacfb37c0cd1d04a"
        ],
        [
            "intros x1 x2; revert x1; induction x2; simpl; intros.",
            "VernacExtend",
            "ad7c6d53ea31a40efdf6a12d79d13dc1febdd537"
        ],
        [
            "apply shareTreeOrd_trans_leaf with b; auto.",
            "VernacExtend",
            "1f0f29ec58ccf7646cf83628d5b43082782ffab9"
        ],
        [
            "inv H; inv H0; invert_ord; eauto.",
            "VernacExtend",
            "e16a5c4e77fe65670f3bfd08b903c5ff6b9daabc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeEq_refl : forall x, shareTreeEq x x.",
            "VernacStartTheoremProof",
            "d1610db93dea60f8500a7e19bb2ba3a3e54c74e1"
        ],
        [
            "unfold shareTreeEq; intuition; apply shareTreeOrd_refl.",
            "VernacExtend",
            "df90cea83499d3a8245942cbe402d285ad89e7dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeEq_sym : forall x y, shareTreeEq x y -> shareTreeEq y x.",
            "VernacStartTheoremProof",
            "8fab4d46eca1cb0bde54d65f9c06f02aa9f70069"
        ],
        [
            "unfold shareTreeEq; intuition.",
            "VernacExtend",
            "45ea87166cde0b3f46330d4987d4fa3ad52236ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeEq_trans : forall x y z, shareTreeEq x y -> shareTreeEq y z -> shareTreeEq x z.",
            "VernacStartTheoremProof",
            "be94d536cf4a84d00e0bbb7ca38bc2e499604ae8"
        ],
        [
            "unfold shareTreeEq; intuition; apply shareTreeOrd_trans with y; auto.",
            "VernacExtend",
            "d7192fa988922ef895acff4e59aa2909fd2555c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_correct : forall x, canonicalTree (mkCanon x).",
            "VernacStartTheoremProof",
            "f36d789b8cb90065bec18fe8d64705c85a18ea04"
        ],
        [
            "induction x; simpl; intros; auto.",
            "VernacExtend",
            "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
        ],
        [
            "case_eq (mkCanon x1); intros.",
            "VernacExtend",
            "3cc7391c2ff0c656aa1f0f8de3b315b903cea73b"
        ],
        [
            "case_eq (mkCanon x2); intros.",
            "VernacExtend",
            "0f2d7c7dcc8e67b7054ef5e870a0077668741fd9"
        ],
        [
            "case_eq (bool_dec b b0); intros; simpl; auto.",
            "VernacExtend",
            "d98ce090d257dd3af08ff7106495b91fdf40bf24"
        ],
        [
            "destruct_bool; intuition.",
            "VernacExtend",
            "ad3af98d0f1c688d39977fec1d10adbf7954afc8"
        ],
        [
            "elim n; auto.",
            "VernacExtend",
            "3a8caa8ad55d0caef05cad9a8edac9567ac3fef6"
        ],
        [
            "rewrite H0 in IHx2.",
            "VernacExtend",
            "b66f70506360386a034788d81f687a435dffe9e2"
        ],
        [
            "simpl in *; intuition.",
            "VernacExtend",
            "3c93b20e236893738d98aa108b6ab920773a5b5b"
        ],
        [
            "rewrite H in IHx1.",
            "VernacExtend",
            "be420b26dbed6be7b76b79abd2d1a2f28db30d25"
        ],
        [
            "simpl in *; intuition.",
            "VernacExtend",
            "3c93b20e236893738d98aa108b6ab920773a5b5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_eq : forall x, shareTreeEq x (mkCanon x).",
            "VernacStartTheoremProof",
            "6c8bd8ade3f27b8e13c52a4f18a7d0331d790ae5"
        ],
        [
            "induction x; simpl; intros; auto.",
            "VernacExtend",
            "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
        ],
        [
            "split; apply shareTreeOrd_refl.",
            "VernacExtend",
            "5f039fb28c3e04f1b9bd342d56c07ac4d927885c"
        ],
        [
            "case_eq (mkCanon x1); intros; rewrite H in IHx1; destruct IHx1; case_eq (mkCanon x2); intros; rewrite H2 in IHx2; destruct IHx2; red.",
            "VernacExtend",
            "03577ad557558b4805bf8941f08149c5795ed195"
        ],
        [
            "destruct (bool_dec b b0); subst; intuition; repeat econstructor; eauto.",
            "VernacExtend",
            "91178f3332bedc96629311c10f08f46e0018d040"
        ],
        [
            "split; repeat econstructor; auto.",
            "VernacExtend",
            "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
        ],
        [
            "split; repeat econstructor; auto.",
            "VernacExtend",
            "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
        ],
        [
            "split; repeat econstructor; auto.",
            "VernacExtend",
            "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_test : forall x y, mkCanon x = mkCanon y -> shareTreeEq x y.",
            "VernacStartTheoremProof",
            "28c720b9c3198537146cb893162378fc20e22452"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply shareTreeEq_trans with (mkCanon x).",
            "VernacExtend",
            "e41a037e5302d32e0d033d90e5d6fc8ec3dc6c8d"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_nonEmpty : forall x, nonEmptyTree x -> nonEmptyTree (mkCanon x).",
            "VernacStartTheoremProof",
            "c5973504ad6983cd41b20dc84faf18306bf3a8de"
        ],
        [
            "induction x; simpl; intros; auto.",
            "VernacExtend",
            "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
        ],
        [
            "destruct H; [ apply IHx1 in H | apply IHx2 in H ]; clear IHx1 IHx2.",
            "VernacExtend",
            "6fd8a4204bb453172f508c295ed659a244a11d64"
        ],
        [
            "destruct (mkCanon x1); destruct (mkCanon x2); simpl in *; auto.",
            "VernacExtend",
            "973baf27ebbbf7c9b843c455a481a9e3b003bc8a"
        ],
        [
            "destruct (bool_dec b b0); subst; intuition; repeat econstructor; eauto.",
            "VernacExtend",
            "91178f3332bedc96629311c10f08f46e0018d040"
        ],
        [
            "destruct (mkCanon x1); destruct (mkCanon x2); simpl in *; auto.",
            "VernacExtend",
            "973baf27ebbbf7c9b843c455a481a9e3b003bc8a"
        ],
        [
            "destruct (bool_dec b b0); subst; intuition; simpl; auto.",
            "VernacExtend",
            "bd69917934a46d1c76f6b9c8d7da19893ddef0fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve mkCanon_nonEmpty mkCanon_correct mkCanon_eq.",
            "VernacHints",
            "008411ea3635358bca95e9331c616f980a6f610c"
        ],
        [
            "Lemma union_commute : forall x y, union_tree x y = union_tree y x.",
            "VernacStartTheoremProof",
            "fa482d2e2f1262b3b794845f52b513e6f3dd141f"
        ],
        [
            "intro x; induction x; destruct y; simpl; intros; auto.",
            "VernacExtend",
            "1ea350e11ea133da03380410b676d649346e4886"
        ],
        [
            "destruct b; destruct b0; simpl; auto.",
            "VernacExtend",
            "4b70d3932539be5f09a9d95387cafdc181e42d05"
        ],
        [
            "rewrite IHx1.",
            "VernacExtend",
            "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
        ],
        [
            "rewrite IHx2.",
            "VernacExtend",
            "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_commute : forall x y, intersect_tree x y = intersect_tree y x.",
            "VernacStartTheoremProof",
            "f799dc45df6d60f9f3b24b8bc2c4a9568a8899b4"
        ],
        [
            "intro x; induction x; destruct y; simpl; intros; auto.",
            "VernacExtend",
            "1ea350e11ea133da03380410b676d649346e4886"
        ],
        [
            "destruct b; destruct b0; simpl; auto.",
            "VernacExtend",
            "4b70d3932539be5f09a9d95387cafdc181e42d05"
        ],
        [
            "rewrite IHx1.",
            "VernacExtend",
            "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
        ],
        [
            "rewrite IHx2.",
            "VernacExtend",
            "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_upper_bound : forall x y, shareTreeOrd x (union_tree x y).",
            "VernacStartTheoremProof",
            "86ee82bc30c953646460de9a501f4e19a49e02d3"
        ],
        [
            "intro x; induction x; simpl; intros.",
            "VernacExtend",
            "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "apply trueLeaf_top.",
            "VernacExtend",
            "98208c2bf056ed56a2352abca42104735244d9b8"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "destruct y; simpl.",
            "VernacExtend",
            "3ee7639a8cf990e8e14c61e05c7505a6bd7dbdcb"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "apply trueLeaf_top.",
            "VernacExtend",
            "98208c2bf056ed56a2352abca42104735244d9b8"
        ],
        [
            "apply shareTreeOrd_refl.",
            "VernacExtend",
            "59311386889bd5783efd51817785a54d1e894e50"
        ],
        [
            "apply Node_Ord; auto.",
            "VernacExtend",
            "9b71bb64d6750cc0b5ffbacf94448479ad71e373"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersection_lower_bound: forall x y, shareTreeOrd (intersect_tree x y) x.",
            "VernacStartTheoremProof",
            "f37db67151551cde03c9495de3b378ff4ab056e1"
        ],
        [
            "intro x; induction x; simpl; intros.",
            "VernacExtend",
            "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "apply trueLeaf_top.",
            "VernacExtend",
            "98208c2bf056ed56a2352abca42104735244d9b8"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "destruct y; simpl.",
            "VernacExtend",
            "3ee7639a8cf990e8e14c61e05c7505a6bd7dbdcb"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "apply shareTreeOrd_refl.",
            "VernacExtend",
            "59311386889bd5783efd51817785a54d1e894e50"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply Node_Ord; auto.",
            "VernacExtend",
            "9b71bb64d6750cc0b5ffbacf94448479ad71e373"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_least_bound : forall x y z, shareTreeOrd x z -> shareTreeOrd y z -> shareTreeOrd (union_tree x y) z.",
            "VernacStartTheoremProof",
            "955dcba5f634f4dafc8a8ee68b64b24f349fdacd"
        ],
        [
            "induction x; simpl; intros; invert_ord; try destruct_bool; auto.",
            "VernacExtend",
            "817ad4f8cfbf0386cbb469a6021c4307882e2338"
        ],
        [
            "destruct y; invert_ord; try destruct_bool; auto.",
            "VernacExtend",
            "c72d0d13611c0c053d85dd38b2f3a5df5f7a5a41"
        ],
        [
            "destruct z; invert_ord; try destruct_bool; repeat econstructor; auto.",
            "VernacExtend",
            "b5c5536d4c66160d3ccf6acda25958112760440a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersection_greatest_bound : forall x y z, shareTreeOrd z x -> shareTreeOrd z y -> shareTreeOrd z (intersect_tree x y).",
            "VernacStartTheoremProof",
            "ef199f18863a1cf9e17372db1c6c13225aca21c2"
        ],
        [
            "induction x; simpl; intros; invert_ord; destruct_bool; auto.",
            "VernacExtend",
            "cc5bf207e2f7950c125dda910157788a0fc7aa2d"
        ],
        [
            "destruct y; invert_ord; try destruct_bool; auto.",
            "VernacExtend",
            "c72d0d13611c0c053d85dd38b2f3a5df5f7a5a41"
        ],
        [
            "destruct z; invert_ord; try destruct_bool; repeat econstructor; auto.",
            "VernacExtend",
            "b5c5536d4c66160d3ccf6acda25958112760440a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_idem : forall x, x = union_tree x x.",
            "VernacStartTheoremProof",
            "7be914c07a4e9c825b8216c674c9cdfb138ba7b7"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_idem : forall x, x = intersect_tree x x.",
            "VernacStartTheoremProof",
            "9d4efdf2af2338daef636b4638294c562148934c"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_absorb : forall x y, x = union_tree x (intersect_tree x y).",
            "VernacStartTheoremProof",
            "07e93296ba1d93d8323a32af1853e67b0099289e"
        ],
        [
            "intro x; induction x; simpl; intros.",
            "VernacExtend",
            "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "destruct y; auto.",
            "VernacExtend",
            "8cabfab7335b853bd741abe0b23c4f6622438184"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "repeat rewrite <- union_idem; auto.",
            "VernacExtend",
            "b0b3ef3c0c41992ef6a512d90675cf0b31a9e6cc"
        ],
        [
            "rewrite <- IHx1.",
            "VernacExtend",
            "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
        ],
        [
            "rewrite <- IHx2.",
            "VernacExtend",
            "0e75bff6904172238676ef3877d4e8e239b68643"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_absorb : forall x y, x = intersect_tree x (union_tree x y).",
            "VernacStartTheoremProof",
            "7636c0a6c51a259dc54e77030e3da951d21beb34"
        ],
        [
            "intro x; induction x; simpl; intros.",
            "VernacExtend",
            "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "destruct y; auto.",
            "VernacExtend",
            "8cabfab7335b853bd741abe0b23c4f6622438184"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "repeat rewrite <- intersect_idem; auto.",
            "VernacExtend",
            "b25209c608e2667850a7c879eb6265d2bb6061b9"
        ],
        [
            "rewrite <- IHx1.",
            "VernacExtend",
            "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
        ],
        [
            "rewrite <- IHx2.",
            "VernacExtend",
            "0e75bff6904172238676ef3877d4e8e239b68643"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_distrib : forall x y z, intersect_tree x (union_tree y z) = union_tree (intersect_tree x y) (intersect_tree x z).",
            "VernacStartTheoremProof",
            "0c0d071c0b6f0a7e6623d6f748bb7cb11071ac3f"
        ],
        [
            "induction x; simpl; intros; try destruct_bool; simpl; auto.",
            "VernacExtend",
            "dca173d81acd752d1f6dc1f3d643d3b91518950b"
        ],
        [
            "case_eq (union_tree y z); intros.",
            "VernacExtend",
            "2dd1692af691b98a5aaf4c9161e676d54920c266"
        ],
        [
            "destruct y; destruct z; destruct_bool; simpl in *; try discriminate; auto.",
            "VernacExtend",
            "2eb3724f462df725ee434fc5af1d513fb4c17855"
        ],
        [
            "repeat rewrite <- union_idem; auto.",
            "VernacExtend",
            "b0b3ef3c0c41992ef6a512d90675cf0b31a9e6cc"
        ],
        [
            "repeat rewrite <- union_absorb; auto.",
            "VernacExtend",
            "de91ab9db41b2912169e34de8a24176a7697fffb"
        ],
        [
            "repeat (rewrite union_commute; rewrite <- union_absorb); auto.",
            "VernacExtend",
            "d2af89ef6ff565182feca924dd4bea8094fa16d5"
        ],
        [
            "destruct y; destruct z; destruct_bool; try discriminate; simpl in *.",
            "VernacExtend",
            "884d7ddbe3fbb6f0d08249e1e8d04658aaaf9b19"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite <- IHx1.",
            "VernacExtend",
            "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
        ],
        [
            "rewrite <- IHx2.",
            "VernacExtend",
            "0e75bff6904172238676ef3877d4e8e239b68643"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_distrib : forall x y z, union_tree x (intersect_tree y z) = intersect_tree (union_tree x y) (union_tree x z).",
            "VernacStartTheoremProof",
            "b63467c56cedea4aa53f0a240b4eb27dba24f20a"
        ],
        [
            "induction x; simpl; intros; try destruct_bool; simpl; auto.",
            "VernacExtend",
            "dca173d81acd752d1f6dc1f3d643d3b91518950b"
        ],
        [
            "case_eq (intersect_tree y z); intros.",
            "VernacExtend",
            "871cb29eccacb9fa0edd83ec065b705d7824f34a"
        ],
        [
            "destruct y; destruct z; destruct_bool; simpl in *; try discriminate; auto.",
            "VernacExtend",
            "2eb3724f462df725ee434fc5af1d513fb4c17855"
        ],
        [
            "repeat rewrite <- intersect_idem; auto.",
            "VernacExtend",
            "b25209c608e2667850a7c879eb6265d2bb6061b9"
        ],
        [
            "repeat rewrite <- intersect_absorb; auto.",
            "VernacExtend",
            "6253b93dfb7ecabe9ab51807431c83a2be605822"
        ],
        [
            "repeat (rewrite intersect_commute; rewrite <- intersect_absorb); auto.",
            "VernacExtend",
            "d2eceaa822e869c57cec77b30ded3e41d4b865c1"
        ],
        [
            "destruct y; destruct z; destruct_bool; try discriminate; simpl in *.",
            "VernacExtend",
            "884d7ddbe3fbb6f0d08249e1e8d04658aaaf9b19"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite <- IHx1.",
            "VernacExtend",
            "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
        ],
        [
            "rewrite <- IHx2.",
            "VernacExtend",
            "0e75bff6904172238676ef3877d4e8e239b68643"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Node_Eq : forall x x' y y', shareTreeEq x x' -> shareTreeEq y y' -> shareTreeEq (Node x y) (Node x' y').",
            "VernacStartTheoremProof",
            "c8a39a8a78c309c523be39b0b84dcb254c475d5d"
        ],
        [
            "unfold shareTreeEq; intuition; econstructor; auto.",
            "VernacExtend",
            "61f3f380ef7391f8ebf52c5b4ae7f28bd437853c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_cong0 : forall y x x', shareTreeOrd x x' -> shareTreeOrd (intersect_tree x y) (intersect_tree x' y).",
            "VernacStartTheoremProof",
            "f7522c6814b7781d9e1603143ec0d00d164df449"
        ],
        [
            "induction y; simpl; intros.",
            "VernacExtend",
            "7a2c95c7e79e2d1aa59c3e7f488e3033a97d85ae"
        ],
        [
            "rewrite (intersect_commute x (Leaf b)).",
            "VernacExtend",
            "1f944bc075a266196a4e3028a9d3505026450acb"
        ],
        [
            "rewrite (intersect_commute x' (Leaf b)).",
            "VernacExtend",
            "03daa74a5fb2f3aee20b346e246df9a33bdc74bd"
        ],
        [
            "revert b x' H; induction x; simpl; intros; destruct_bool; solve [ auto | apply falseLeaf_bottom ].",
            "VernacExtend",
            "cb88e55df5c7c1df9d2230aa1d454b18faae113e"
        ],
        [
            "induction H; simpl in *; intros; destruct_bool; simpl in *; try discriminate; solve [ apply shareTreeOrd_refl | apply falseLeaf_bottom | invert_ord; repeat econstructor; auto ].",
            "VernacExtend",
            "d8a6e0ed22c6330de2aff6f2a66020a2798c6ad0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_cong0 : forall y x x', shareTreeOrd x x' -> shareTreeOrd (union_tree x y) (union_tree x' y).",
            "VernacStartTheoremProof",
            "1afe91d9767df6cb0607f08d2a55b59c4894f455"
        ],
        [
            "induction y; simpl; intros.",
            "VernacExtend",
            "7a2c95c7e79e2d1aa59c3e7f488e3033a97d85ae"
        ],
        [
            "rewrite (union_commute x (Leaf b)).",
            "VernacExtend",
            "dc4072a91d643c17366d0c55a3f4007dd2ded1ec"
        ],
        [
            "rewrite (union_commute x' (Leaf b)).",
            "VernacExtend",
            "f2c66506000b5a2c3362d83fe931d0a86a475cfb"
        ],
        [
            "revert b x' H; induction x; simpl; intros; destruct_bool; solve [ auto | apply trueLeaf_top ].",
            "VernacExtend",
            "9568627e3b92386ed137acbea7690d578f22793a"
        ],
        [
            "induction H; simpl in *; intros; destruct_bool; simpl in *; try discriminate; solve [ apply shareTreeOrd_refl | apply trueLeaf_top | invert_ord; repeat econstructor; auto ].",
            "VernacExtend",
            "2421527454194c741115a3d20b819ceca1b1633b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_cong1 : forall x x' y, shareTreeEq x x' -> shareTreeEq (intersect_tree x y) (intersect_tree x' y).",
            "VernacStartTheoremProof",
            "ee883527ead2655513afc68d3ebe9cdd4ff0797f"
        ],
        [
            "unfold shareTreeEq; intuition; apply intersect_cong0; auto.",
            "VernacExtend",
            "c829f693d9282ed6957a482db31970d634a64b6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_cong1 : forall x x' y, shareTreeEq x x' -> shareTreeEq (union_tree x y) (union_tree x' y).",
            "VernacStartTheoremProof",
            "2ac7574486a417ce6c76b933669da5baa127b228"
        ],
        [
            "unfold shareTreeEq; intuition; apply union_cong0; auto.",
            "VernacExtend",
            "8d0686a9505ac556c000be2c64586bd5bdf3f4a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intersect_cong : forall x x' y y', shareTreeEq x x' -> shareTreeEq y y' -> shareTreeEq (intersect_tree x y) (intersect_tree x' y').",
            "VernacStartTheoremProof",
            "df0b0ab5ea8d72bb11866220a93b2ff4f8508b96"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply shareTreeEq_trans with (intersect_tree x' y).",
            "VernacExtend",
            "8ee9d044cd86f392d6a59a2b261270f4a09a0d52"
        ],
        [
            "apply intersect_cong1; auto.",
            "VernacExtend",
            "a9aaf557451a5831dd3e6376b46ab365bf756508"
        ],
        [
            "rewrite (intersect_commute x' y).",
            "VernacExtend",
            "0e2fed9047fb3b79d32c9c8569459196bcf13a3c"
        ],
        [
            "rewrite (intersect_commute x' y').",
            "VernacExtend",
            "c2af0cd7d921468b39f3a23ce5424a2555edac6b"
        ],
        [
            "apply intersect_cong1; auto.",
            "VernacExtend",
            "a9aaf557451a5831dd3e6376b46ab365bf756508"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_cong : forall x x' y y', shareTreeEq x x' -> shareTreeEq y y' -> shareTreeEq (union_tree x y) (union_tree x' y').",
            "VernacStartTheoremProof",
            "c94e4ec3a8bea2d98f615c02029e819818d77c51"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply shareTreeEq_trans with (union_tree x' y).",
            "VernacExtend",
            "61f1e560a063f633d5de2cc83d4a0d274bb05231"
        ],
        [
            "apply union_cong1; auto.",
            "VernacExtend",
            "87731b90b4e937972ba35d70ed02f48e9523269e"
        ],
        [
            "rewrite (union_commute x' y).",
            "VernacExtend",
            "2cb4ba6874aa46c8ec6a6a1472ba30e1d0617041"
        ],
        [
            "rewrite (union_commute x' y').",
            "VernacExtend",
            "5b0887bc8ede7e9f86ddb3e1057e7eaac4e8208e"
        ],
        [
            "apply union_cong1; auto.",
            "VernacExtend",
            "87731b90b4e937972ba35d70ed02f48e9523269e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_cong0 : forall x x', shareTreeOrd x x' -> shareTreeOrd (comp_tree x') (comp_tree x).",
            "VernacStartTheoremProof",
            "ad472f7f80be70d0addb77e07dc549a0380a6375"
        ],
        [
            "induction x; simpl.",
            "VernacExtend",
            "032ca6881eec9f6ca6ad619919b16fb530146db9"
        ],
        [
            "induction x'; simpl; intros; invert_ord; destruct_bool; repeat econstructor; solve [ auto ].",
            "VernacExtend",
            "4c835fd5f5829fa023b64f46f20905c93ce28567"
        ],
        [
            "simpl; intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "inversion H; clear H; subst; invert_ord; destruct_bool; simpl.",
            "VernacExtend",
            "1a2affceb0c78d5edbd98ec2d9b67317cc7a0874"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "repeat econstructor.",
            "VernacExtend",
            "8cc3573e6ffc5b9ad80e283e74c0ed99cf929f6c"
        ],
        [
            "apply (IHx1 (Leaf false)); auto.",
            "VernacExtend",
            "4324b869de02076879ef0bded23d99e7133fde7a"
        ],
        [
            "apply (IHx2 (Leaf false)); auto.",
            "VernacExtend",
            "7106acd51b6e6c7926a03557c15082d66df7bf2d"
        ],
        [
            "repeat econstructor.",
            "VernacExtend",
            "8cc3573e6ffc5b9ad80e283e74c0ed99cf929f6c"
        ],
        [
            "apply IHx1; auto.",
            "VernacExtend",
            "d7b5ff5f7665cd27e8524d1934c3de9c5abe9f3d"
        ],
        [
            "apply IHx2; auto.",
            "VernacExtend",
            "eb3d7eed0272625bfcb8f7060d72e699d61290ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_cong : forall x x', shareTreeEq x x' -> shareTreeEq (comp_tree x') (comp_tree x).",
            "VernacStartTheoremProof",
            "f9f312f196c34b4cc08e252f870bf5766076085b"
        ],
        [
            "unfold shareTreeEq; intuition; apply comp_cong0; auto.",
            "VernacExtend",
            "c9f99102ff7340ff3d1d40eac04b149b4df67ae3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_comp1 : forall x, shareTreeOrd (Leaf true) (union_tree x (comp_tree x)).",
            "VernacStartTheoremProof",
            "b746fa604d6be2b340714ea12f2b107abb2b4dcb"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct b; apply shareTreeOrd_refl.",
            "VernacExtend",
            "be3e6fcf0e4a807afcf8e63413f44ca90819d537"
        ],
        [
            "apply LeafNode_Ord; apply Node_Ord; auto.",
            "VernacExtend",
            "cacdc77d4a0e7f37531cb0f990028d4d3744be91"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_comp2 : forall x, shareTreeOrd (intersect_tree x (comp_tree x)) (Leaf false).",
            "VernacStartTheoremProof",
            "036e20ac732cd67c077868acb33d5f25b421736b"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct b; apply shareTreeOrd_refl.",
            "VernacExtend",
            "be3e6fcf0e4a807afcf8e63413f44ca90819d537"
        ],
        [
            "apply NodeLeaf_Ord; apply Node_Ord; auto.",
            "VernacExtend",
            "9f7ce55317aab8a2eddc3fe45a89eade2e2488ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonicalUnique : forall c1 c2, shareTreeEq c1 c2 -> canonicalTree c1 -> canonicalTree c2 -> c1 = c2.",
            "VernacStartTheoremProof",
            "666e2fab8bd3d31bc8db7e60b8c14dc53925dcb8"
        ],
        [
            "intro c1; induction c1; simpl; intros; destruct H.",
            "VernacExtend",
            "225a37ddcad3d1f0b5b0a2058aff01b54079fd7d"
        ],
        [
            "destruct c2; invert_ord; destruct_bool; simpl in *; auto.",
            "VernacExtend",
            "1d104e43a1af64db90f8e2c38c5d5d813e953834"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "elim (geTrueFull c2_1); auto.",
            "VernacExtend",
            "541d14a59fcd1476fa27511fcbbdc4e321a846ed"
        ],
        [
            "elim (geTrueFull c2_1); auto.",
            "VernacExtend",
            "541d14a59fcd1476fa27511fcbbdc4e321a846ed"
        ],
        [
            "elim (geTrueFull c2_2); auto.",
            "VernacExtend",
            "22c27a407e422314cef04126ff94bcaabbe05c96"
        ],
        [
            "elim (geTrueFull c2_2); auto.",
            "VernacExtend",
            "22c27a407e422314cef04126ff94bcaabbe05c96"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "elim (leFalseEmpty c2_1); auto.",
            "VernacExtend",
            "c343bf657359266b939abcb00fdfc919abc2d78f"
        ],
        [
            "elim (leFalseEmpty c2_2); auto.",
            "VernacExtend",
            "62edcf312990dd644c0860f5223700a3e3f313f0"
        ],
        [
            "elim (leFalseEmpty c2_1); auto.",
            "VernacExtend",
            "c343bf657359266b939abcb00fdfc919abc2d78f"
        ],
        [
            "elim (leFalseEmpty c2_2); auto.",
            "VernacExtend",
            "62edcf312990dd644c0860f5223700a3e3f313f0"
        ],
        [
            "destruct c2; invert_ord; destruct_bool; simpl in *; auto.",
            "VernacExtend",
            "1d104e43a1af64db90f8e2c38c5d5d813e953834"
        ],
        [
            "replace c2_1 with c1_1.",
            "VernacExtend",
            "f4bfc80ad4f2f36a4b4c8c1e758f614ca3dcdd04"
        ],
        [
            "replace c2_2 with c1_2; auto.",
            "VernacExtend",
            "265931e0b59d9b4e2591323a7afbdf0caca51c4d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_test2 : forall x y, shareTreeEq x y -> mkCanon x = mkCanon y.",
            "VernacStartTheoremProof",
            "bf9c838c57a4d0356b9024bd03b1231553be86a8"
        ],
        [
            "intros; apply canonicalUnique; auto.",
            "VernacExtend",
            "065c018f25407cfa9df0f08d443b80d1e8fd0ae4"
        ],
        [
            "apply shareTreeEq_trans with x; auto.",
            "VernacExtend",
            "98331a1581a9b1dede6726cb5989e6492d0146fc"
        ],
        [
            "apply shareTreeEq_sym; auto.",
            "VernacExtend",
            "6e948f494b6c4559f8b39f256b7653ba86d61870"
        ],
        [
            "apply shareTreeEq_trans with y; auto.",
            "VernacExtend",
            "6ffd2c4b88bcc644012b60b38c3f12b108f4567b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_inv : forall a x y, nonEmptyTree a -> shareTreeOrd (relativ_tree a x) (relativ_tree a y) -> shareTreeOrd x y.",
            "VernacStartTheoremProof",
            "4ea31424fb27d73b05f2f03a0ca448ac558a8bf5"
        ],
        [
            "induction a; simpl; intros.",
            "VernacExtend",
            "651d671a1d9148684b6a564fbcd0e8bdc7318584"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "invert_ord; auto; try discriminate.",
            "VernacExtend",
            "c86d47db530ebc160c9ada770deb80fa17f3f1bb"
        ],
        [
            "invert_ord; destruct H; auto.",
            "VernacExtend",
            "dc298365114aee0f6bcbb139528bfcf3ae420f81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_empty : forall a x, nonEmptyTree a -> nonEmptyTree x -> nonEmptyTree (relativ_tree a x).",
            "VernacStartTheoremProof",
            "280d80654cc5f2a041a76158db50fda7c18aa6d3"
        ],
        [
            "induction a; simpl; intros; destruct_bool; try discriminate; intuition.",
            "VernacExtend",
            "5663e3e39ebc5c8983e948da4177ad655a15aea3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_empty1 : forall a x, nonEmptyTree (relativ_tree a x) -> nonEmptyTree a.",
            "VernacStartTheoremProof",
            "df8c9f7375522d6fc681206cce79a2f26693d442"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; try discriminate; auto.",
            "VernacExtend",
            "62753743b1a0bc56c80908f0614a022ef3280cf2"
        ],
        [
            "intuition; eauto.",
            "VernacExtend",
            "fc07a008877a7fefaf8071071d531ca5f5163c56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_empty2 : forall a x, nonEmptyTree (relativ_tree a x) -> nonEmptyTree x.",
            "VernacStartTheoremProof",
            "5273688a5e72d56d1f533cc1c5c8a1d18cf4856c"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; simpl in *; auto.",
            "VernacExtend",
            "769f1856eb2e5aacd04742a52af64bbb77441c45"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "intuition; eauto.",
            "VernacExtend",
            "fc07a008877a7fefaf8071071d531ca5f5163c56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_full1 : forall a x, nonFullTree a -> nonFullTree (relativ_tree a x).",
            "VernacStartTheoremProof",
            "1930af6c967e1ae5c4781fca183eed3cce79a756"
        ],
        [
            "induction a; simpl; intros; destruct_bool; try discriminate; intuition.",
            "VernacExtend",
            "5663e3e39ebc5c8983e948da4177ad655a15aea3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_full2 : forall a x, nonFullTree x -> nonFullTree (relativ_tree a x).",
            "VernacStartTheoremProof",
            "11714560e8d435ab36a31dbf079096469d6a3bd0"
        ],
        [
            "induction a; simpl; intros; destruct_bool; try discriminate; simpl; intuition.",
            "VernacExtend",
            "2395647a28ebbc511e214c4919b304d29af3182b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_full : forall a, relativ_tree a (Leaf true) = a.",
            "VernacStartTheoremProof",
            "8d5e9a5cec57543804fae0aaa3f315d6d0ee00e8"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "rewrite IHa1; rewrite IHa2; auto.",
            "VernacExtend",
            "673660442d6ce3ed5ef6eb313ee4636279160672"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve relativ_empty relativ_empty1 relativ_empty2 relativ_full relativ_full1 relativ_full2 relativ_inv.",
            "VernacHints",
            "6336531295d4e88c521afde3fc06291b3ba4b15b"
        ],
        [
            "Lemma relativ_almost_canon : forall a x, canonicalTree a -> canonicalTree x -> nonEmptyTree x -> canonicalTree (relativ_tree a x).",
            "VernacStartTheoremProof",
            "ee31a442b359039e50f0772508b3b049e651212b"
        ],
        [
            "induction a; simpl; intros; destruct_bool; auto.",
            "VernacExtend",
            "fb6e5875d0ce38bc8baf864113d5d3bacde0fbf2"
        ],
        [
            "intuition auto.",
            "VernacExtend",
            "51e4da273bc2a464ad12897a5a8769bb8257393a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_cong : forall a x y, shareTreeOrd x y -> shareTreeOrd (relativ_tree a x) (relativ_tree a y).",
            "VernacStartTheoremProof",
            "8d9d85d14f3b4c5e362b080e950d084dae42b82f"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; repeat econstructor; auto.",
            "VernacExtend",
            "3d120ff115bf2cf8aba7ebe8149af35fea9a4d64"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_canon_commute : forall a x, canonicalTree a -> nonEmptyTree x -> mkCanon (relativ_tree a x) = relativ_tree a (mkCanon x).",
            "VernacStartTheoremProof",
            "ce637d276dc450caa2a3ca7b2e49534ea7c614ef"
        ],
        [
            "intros; apply canonicalUnique.",
            "VernacExtend",
            "03aab878206bd38ea1a8a03862499078f4656d99"
        ],
        [
            "2: apply mkCanon_correct.",
            "VernacExtend",
            "88b6c4dce849ecb061d42cd6b08c0593fe90e8a5"
        ],
        [
            "2: apply relativ_almost_canon; auto.",
            "VernacExtend",
            "49a7e8c1296f377fc9555c26312bb5537dcbd04a"
        ],
        [
            "apply shareTreeEq_trans with (relativ_tree a x).",
            "VernacExtend",
            "20e0a36549dfb767e75d9f1b9855da119f78380f"
        ],
        [
            "apply shareTreeEq_sym; auto.",
            "VernacExtend",
            "6e948f494b6c4559f8b39f256b7653ba86d61870"
        ],
        [
            "destruct (mkCanon_eq x).",
            "VernacExtend",
            "bcc01eda03a74b1aa2749d165e1377a06a955407"
        ],
        [
            "split; apply relativ_cong; auto.",
            "VernacExtend",
            "b4d8cfe31b0094f3eacc8d12e87afeb9beae6454"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_intersect : forall a x y, relativ_tree a (intersect_tree x y) = intersect_tree (relativ_tree a x) (relativ_tree a y).",
            "VernacStartTheoremProof",
            "99560b56ccf457ac191751454049fb0bc22d7a1b"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "rewrite IHa1; rewrite IHa2; auto.",
            "VernacExtend",
            "673660442d6ce3ed5ef6eb313ee4636279160672"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_union : forall a x y, relativ_tree a (union_tree x y) = union_tree (relativ_tree a x) (relativ_tree a y).",
            "VernacStartTheoremProof",
            "6e096a3d7617313cd09d576eeb0b08d8fc0f91e9"
        ],
        [
            "induction a; simpl; intros; auto.",
            "VernacExtend",
            "df08f693a2e674057e2042f75c0208da84f43573"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "rewrite IHa1; rewrite IHa2; auto.",
            "VernacExtend",
            "673660442d6ce3ed5ef6eb313ee4636279160672"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_assoc : forall x y z, relativ_tree x (relativ_tree y z) = relativ_tree (relativ_tree x y) z.",
            "VernacStartTheoremProof",
            "b157ac7963a069b772d02cc64d46e838b0a1c40e"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "rewrite IHx1.",
            "VernacExtend",
            "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
        ],
        [
            "rewrite IHx2.",
            "VernacExtend",
            "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive Sctx : Set := | NodeB : Sctx -> Sctx -> Sctx | NodeR : ShareTree -> Sctx -> Sctx | NodeL : Sctx -> ShareTree -> Sctx | Hole : Sctx .",
            "VernacInductive",
            "2298e7bd7e1f9828ccfb21490b6608cb5d7cdb81"
        ],
        [
            "Fixpoint Sctx_app (c1 c2:Sctx) {struct c1} : Sctx := match c1 with | NodeB l r => NodeB (Sctx_app l c2) (Sctx_app r c2) | NodeR l r => NodeR l (Sctx_app r c2) | NodeL l r => NodeL (Sctx_app l c2) r | Hole => c2 end.",
            "VernacFixpoint",
            "77bc55254c33b029fb2cb806668905900098ab65"
        ],
        [
            "Fixpoint fill (c:Sctx) (x:ShareTree) {struct c} : ShareTree := match c with | NodeR l r => Node l (fill r x) | NodeL l r => Node (fill l x) r | NodeB l r => Node (fill l x) (fill r x) | Hole => x end.",
            "VernacFixpoint",
            "28d453fec96efa9fdb69fe62a13e1e6c012dac3d"
        ],
        [
            "Lemma fill_app : forall c1 c2 x, fill c1 (fill c2 x) = fill (Sctx_app c1 c2) x.",
            "VernacStartTheoremProof",
            "baf5906204b98dba65bc54c90cc5194a0d34ad86"
        ],
        [
            "induction c1; simpl; intros.",
            "VernacExtend",
            "a2b63e44a6c98449045bbc312371eee38702e2bc"
        ],
        [
            "rewrite <- IHc1_1.",
            "VernacExtend",
            "357e6d3b1825771e2c91e20582eaf34e6174a552"
        ],
        [
            "rewrite <- IHc1_2.",
            "VernacExtend",
            "f5eaeaf51aceff67ceb1fd7688e48840b6de8f60"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "rewrite IHc1; auto.",
            "VernacExtend",
            "f4b694cb7b5363005ac44ee6fed8826a0b72e88e"
        ],
        [
            "rewrite IHc1; auto.",
            "VernacExtend",
            "f4b694cb7b5363005ac44ee6fed8826a0b72e88e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fill_id : forall x c, fill c x = x -> c = Hole.",
            "VernacStartTheoremProof",
            "1d7947173eb5dce932d7fa819650746c80d38a7f"
        ],
        [
            "induction x; simpl; intros.",
            "VernacExtend",
            "691cd388c95cc3e8c35c6d5a814b368270d6121e"
        ],
        [
            "destruct c; simpl in *; auto; discriminate.",
            "VernacExtend",
            "939016b5c3905be7cbfeaef41d8e0139a0604646"
        ],
        [
            "destruct c; auto; simpl in *.",
            "VernacExtend",
            "842482e05a9ff8558e1d29561c1234b270d46a66"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "replace (fill c1 (Node x1 x2)) with (fill (Sctx_app c1 (NodeL Hole x2)) x1) in H1.",
            "VernacExtend",
            "758561857db9395759b16c3f89e6b0afa649b4b3"
        ],
        [
            "generalize (IHx1 _ H1).",
            "VernacExtend",
            "d31f60d5444c0ad35b7ec8bad9e0b2ceafb8ed73"
        ],
        [
            "destruct c1; simpl; intros; discriminate.",
            "VernacExtend",
            "d5eb986ef39e991a26c73ea9f25a6628981ed5d1"
        ],
        [
            "rewrite <- fill_app; simpl; auto.",
            "VernacExtend",
            "927544c3b77ca615c84f19f4b541a44ec33355c7"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "replace (fill c (Node x1 x2)) with (fill (Sctx_app c (NodeR x1 Hole)) x2) in H2.",
            "VernacExtend",
            "4112dd82a0b03abc0a2b98de6009e088d5440ef9"
        ],
        [
            "generalize (IHx2 _ H2).",
            "VernacExtend",
            "34c32b0772e6c50d89806bb3211ae04b41ff21fe"
        ],
        [
            "destruct c; simpl; intros; discriminate.",
            "VernacExtend",
            "7598358ebf7a2eedf213bd0e806ba8b96729fffa"
        ],
        [
            "rewrite <- fill_app; simpl; auto.",
            "VernacExtend",
            "927544c3b77ca615c84f19f4b541a44ec33355c7"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "replace (fill c (Node x1 x2)) with (fill (Sctx_app c (NodeL Hole x2)) x1) in H1.",
            "VernacExtend",
            "2e47d419a554b6f621ecc0dce0ffdd260669d951"
        ],
        [
            "generalize (IHx1 _ H1).",
            "VernacExtend",
            "d31f60d5444c0ad35b7ec8bad9e0b2ceafb8ed73"
        ],
        [
            "destruct c; simpl; intros; discriminate.",
            "VernacExtend",
            "7598358ebf7a2eedf213bd0e806ba8b96729fffa"
        ],
        [
            "rewrite <- fill_app; simpl; auto.",
            "VernacExtend",
            "927544c3b77ca615c84f19f4b541a44ec33355c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition to_Sctx (a:ShareTree) : nonEmptyTree a -> Sctx.",
            "VernacDefinition",
            "c83982c29cdfe76b32f106a0787426c33758b0c9"
        ],
        [
            "revert a.",
            "VernacExtend",
            "fca7ebc0dc4b29d6f26200e75bd08d5f5c664dc2"
        ],
        [
            "refine (fix f (a:ShareTree) {struct a} : nonEmptyTree a -> Sctx := match a as a' return nonEmptyTree a' -> Sctx with | Leaf true => fun H => Hole | Leaf false => fun H => False_rec _ _ | Node l r => fun H => match nonEmpty_dec l, nonEmpty_dec r with | left Hl, left Hr => NodeB (f l Hl) (f r Hr) | left Hl, right _ => NodeL (f l Hl) r | right _ , left Hr => NodeR l (f r Hr) | right Hl, right Hr => False_rec _ _ end end).",
            "VernacExtend",
            "980942db3c041814f89e86a9a48ce66fa1c62ba6"
        ],
        [
            "simpl in H; discriminate.",
            "VernacExtend",
            "e40837f5a952b53108ebf0b06936eed5990336f7"
        ],
        [
            "simpl in H; intuition.",
            "VernacExtend",
            "5ffe37021be37b02cc584ea27050e65e893e8fa1"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma relativ_to_Sctx : forall a x H, relativ_tree a x = fill (to_Sctx a H) x.",
            "VernacStartTheoremProof",
            "c4934dbc90627be6329418f154839b1014e8caaf"
        ],
        [
            "induction a; simpl.",
            "VernacExtend",
            "83046760be90957e25a4b343bcfdb8eb6df65d17"
        ],
        [
            "destruct b; intros; try discriminate.",
            "VernacExtend",
            "ad875af8c3ae8ed0aa4deb2409d11f597755be97"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (nonEmpty_dec a1); destruct (nonEmpty_dec a2); simpl.",
            "VernacExtend",
            "8989c06b582baa468fe3702763d4fe088441f839"
        ],
        [
            "rewrite <- IHa1; rewrite <- IHa2; auto.",
            "VernacExtend",
            "bfca5705f789309fed00aaec0fa0d661ba641ddd"
        ],
        [
            "rewrite <- IHa1; auto.",
            "VernacExtend",
            "1b61b820bde90da634a4f53bd15f65d0c1e5f3a3"
        ],
        [
            "replace (relativ_tree a2 x) with a2; auto.",
            "VernacExtend",
            "fd4dc608f295ff291c7cee3569d456a443043a0b"
        ],
        [
            "clear -n0.",
            "VernacExtend",
            "2adf8a46316b43b808c2d8ef7869258368cc193e"
        ],
        [
            "induction a2; simpl.",
            "VernacExtend",
            "0643af016ede79181066b28c6e7882e0b8c4a270"
        ],
        [
            "destruct b; simpl in *; auto.",
            "VernacExtend",
            "769f1856eb2e5aacd04742a52af64bbb77441c45"
        ],
        [
            "elim n0; auto.",
            "VernacExtend",
            "50f0b26ed6b37ffb4a92b51ccee093e13841cd08"
        ],
        [
            "rewrite <- IHa2_1.",
            "VernacExtend",
            "ab90a8b05f7df486bb7bd4f0ab5d8c65c4a9befc"
        ],
        [
            "rewrite <- IHa2_2; auto.",
            "VernacExtend",
            "03817c1128dce308bd018b4e96438457cb16669f"
        ],
        [
            "intro; apply n0; simpl; auto.",
            "VernacExtend",
            "cdc621b2d903781042940a3f14667194dc2258a7"
        ],
        [
            "intro; apply n0; simpl; auto.",
            "VernacExtend",
            "cdc621b2d903781042940a3f14667194dc2258a7"
        ],
        [
            "rewrite <- IHa2.",
            "VernacExtend",
            "93348a83dede8074f980f4a37010a14cf722b24d"
        ],
        [
            "replace (relativ_tree a1 x) with a1; auto.",
            "VernacExtend",
            "37306d1e377a9913f69a4525cb6628924f944030"
        ],
        [
            "clear -n.",
            "VernacExtend",
            "dba3a0d51422f97b7ce2c4622304c94095b6610d"
        ],
        [
            "induction a1; simpl.",
            "VernacExtend",
            "e271a9ab8d587688e84656b340c7920bde887cd7"
        ],
        [
            "destruct b; simpl in *; auto.",
            "VernacExtend",
            "769f1856eb2e5aacd04742a52af64bbb77441c45"
        ],
        [
            "elim n; auto.",
            "VernacExtend",
            "3a8caa8ad55d0caef05cad9a8edac9567ac3fef6"
        ],
        [
            "rewrite <- IHa1_1.",
            "VernacExtend",
            "07fc818a7c95d6697c300b670557a24a27713b6b"
        ],
        [
            "rewrite <- IHa1_2; auto.",
            "VernacExtend",
            "61235703881176f5663536774c2bea574f576f4c"
        ],
        [
            "intro; apply n; simpl; auto.",
            "VernacExtend",
            "db16cfa4351407999974e64ea76b47c0f7666a30"
        ],
        [
            "intro; apply n; simpl; auto.",
            "VernacExtend",
            "db16cfa4351407999974e64ea76b47c0f7666a30"
        ],
        [
            "elimtype False; intuition.",
            "VernacExtend",
            "fcefeecff54e1c0b57363d5b3614012ad7396864"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_stupid1 : forall x y a, nonEmptyTree x -> x = relativ_tree a (Node x y) -> False.",
            "VernacStartTheoremProof",
            "d9d57447a1b435faca3d3d70d3d8fc98de660a40"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nonEmptyTree a).",
            "VernacExtend",
            "214a50cffa4d8b98e81f7e76649c601035e5f57a"
        ],
        [
            "apply relativ_empty1 with (Node x y).",
            "VernacExtend",
            "f010d73c625eb7f86dca37e44aee6ac570338a90"
        ],
        [
            "rewrite <- H0; auto.",
            "VernacExtend",
            "075413acf92795f866dc4a2ff39c7d41ef0fda3f"
        ],
        [
            "rewrite (relativ_to_Sctx a (Node x y) H1) in H0.",
            "VernacExtend",
            "f69ef78fcd3a7183aca78460de1cc3168f5fe7fd"
        ],
        [
            "replace (fill (to_Sctx a H1) (Node x y)) with (fill (Sctx_app (to_Sctx a H1) (NodeL Hole y)) x) in H0.",
            "VernacExtend",
            "1f1a3f744f97e4d5d0d17bc66a4c7e12382f977d"
        ],
        [
            "symmetry in H0.",
            "VernacExtend",
            "6a4628a15502c5c72b4290e332e792b1559a4eae"
        ],
        [
            "generalize (fill_id _ _ H0).",
            "VernacExtend",
            "0f6db8203229d0f72d27eb37938503695cf29e8c"
        ],
        [
            "destruct (to_Sctx a H1); simpl; intros; discriminate.",
            "VernacExtend",
            "21d1e39d40a16ae666a0b40dd13349568404282e"
        ],
        [
            "rewrite <- fill_app; auto.",
            "VernacExtend",
            "d7de1cf1f20f81731ac2fcd04d265070b0041541"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_stupid2 : forall x y a, nonEmptyTree y -> y = relativ_tree a (Node x y) -> False.",
            "VernacStartTheoremProof",
            "7412658ce168567508dd90ee120e83fdb4f54af8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nonEmptyTree a).",
            "VernacExtend",
            "214a50cffa4d8b98e81f7e76649c601035e5f57a"
        ],
        [
            "apply relativ_empty1 with (Node x y).",
            "VernacExtend",
            "f010d73c625eb7f86dca37e44aee6ac570338a90"
        ],
        [
            "rewrite <- H0; auto.",
            "VernacExtend",
            "075413acf92795f866dc4a2ff39c7d41ef0fda3f"
        ],
        [
            "rewrite (relativ_to_Sctx a (Node x y) H1) in H0.",
            "VernacExtend",
            "f69ef78fcd3a7183aca78460de1cc3168f5fe7fd"
        ],
        [
            "replace (fill (to_Sctx a H1) (Node x y)) with (fill (Sctx_app (to_Sctx a H1) (NodeR x Hole)) y) in H0.",
            "VernacExtend",
            "70306aec64a2b49bcd7fb9ddf3dd258fa9e49e18"
        ],
        [
            "symmetry in H0.",
            "VernacExtend",
            "6a4628a15502c5c72b4290e332e792b1559a4eae"
        ],
        [
            "generalize (fill_id _ _ H0).",
            "VernacExtend",
            "0f6db8203229d0f72d27eb37938503695cf29e8c"
        ],
        [
            "destruct (to_Sctx a H1); simpl; intros; discriminate.",
            "VernacExtend",
            "21d1e39d40a16ae666a0b40dd13349568404282e"
        ],
        [
            "rewrite <- fill_app; auto.",
            "VernacExtend",
            "d7de1cf1f20f81731ac2fcd04d265070b0041541"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_stupid3 : forall a1 a2 x, nonEmptyTree x -> relativ_tree (Node a1 a2) x = x -> False.",
            "VernacStartTheoremProof",
            "162107968f846bbb98b4cf0c81b54536e7c7b3d9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nonEmptyTree (Node a1 a2)).",
            "VernacExtend",
            "b08fe1964ce92aafe57f13bb6d1a4a092fc5248e"
        ],
        [
            "rewrite <- H0 in H.",
            "VernacExtend",
            "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "left; apply relativ_empty1 with x; auto.",
            "VernacExtend",
            "488083d6a15fda9543eeb6ef7a4ce888d18d1605"
        ],
        [
            "right; apply relativ_empty1 with x; auto.",
            "VernacExtend",
            "ca94a20d262e7a911c1528faef69a0319d481a1c"
        ],
        [
            "rewrite (relativ_to_Sctx (Node a1 a2) x H1) in H0.",
            "VernacExtend",
            "7d41c7e16ac7a71623a686acd8481cbe06d1bd7b"
        ],
        [
            "generalize (fill_id _ _ H0).",
            "VernacExtend",
            "0f6db8203229d0f72d27eb37938503695cf29e8c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (nonEmpty_dec a1); destruct (nonEmpty_dec a2); intros; try discriminate.",
            "VernacExtend",
            "3f6efdbf6b752017d87d010e541e2497083b1e43"
        ],
        [
            "clear H0 H2.",
            "VernacExtend",
            "3e81cdc55a874282fd1819ec8763024804106b9f"
        ],
        [
            "simpl in H1; destruct H1; auto.",
            "VernacExtend",
            "a190281a735f8aa03a5584e63d8fd3a4067d1b72"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_inv2 : forall a1 a2 x, nonEmptyTree x -> relativ_tree a1 x = relativ_tree a2 x -> a1 = a2.",
            "VernacStartTheoremProof",
            "239520449576c170bbd8b530a90e4a7e34f3fb34"
        ],
        [
            "induction a1; intros.",
            "VernacExtend",
            "e64f2f70d3812ad514fee8878901770828151a66"
        ],
        [
            "destruct b; simpl in *.",
            "VernacExtend",
            "a9cbaf83ab780427b6902f023e4ed930b7d2ec3c"
        ],
        [
            "revert a2 H0.",
            "VernacExtend",
            "214f9b76aba115100a9bbdee7a20672a5bd7535a"
        ],
        [
            "induction x; simpl in *.",
            "VernacExtend",
            "975724fbbdbe8b2c449f32e0c13ef4b066faaee4"
        ],
        [
            "subst b; simpl; intros.",
            "VernacExtend",
            "fa6b9e58bfb259bb23fda2c4384f61214f7536a3"
        ],
        [
            "destruct a2; simpl in *.",
            "VernacExtend",
            "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct a2; simpl in *.",
            "VernacExtend",
            "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "injection H0; intros.",
            "VernacExtend",
            "8c8542f86b66e8ddb2aa325769b955b474d42042"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "elim relativ_stupid1 with x1 x2 a2_1; auto.",
            "VernacExtend",
            "e34426ad7e93c2e9791185daad99e566a05db806"
        ],
        [
            "elim relativ_stupid2 with x1 x2 a2_2; auto.",
            "VernacExtend",
            "8586ffe38b1d709231ebc181ff1b52399d30b6fb"
        ],
        [
            "destruct a2; simpl in *.",
            "VernacExtend",
            "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "subst x; simpl in H; discriminate.",
            "VernacExtend",
            "ea00c883f16b5f7951274957372a5264ef6fcc11"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "destruct a2; simpl in *.",
            "VernacExtend",
            "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
        ],
        [
            "destruct b; try discriminate.",
            "VernacExtend",
            "e59df6528a2cbe547c4838c8ebb828505d9c1c96"
        ],
        [
            "elimtype False; clear -H H0.",
            "VernacExtend",
            "6d216c5c12203dc117d3723cabf63e738a2ca48a"
        ],
        [
            "revert H0.",
            "VernacExtend",
            "de3e4fca453928a41c450906d5d5626d573cfb55"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (relativ_stupid3 _ _ _ H H0).",
            "VernacExtend",
            "efa6aaf14bc68b614a2ed1536cbd0e44b92790da"
        ],
        [
            "injection H0; intros.",
            "VernacExtend",
            "8c8542f86b66e8ddb2aa325769b955b474d42042"
        ],
        [
            "rewrite IHa1_1 with a2_1 x; auto.",
            "VernacExtend",
            "e73987d1d73f3a343b5c38789fdec1d6e5937b93"
        ],
        [
            "rewrite IHa1_2 with a2_2 x; auto.",
            "VernacExtend",
            "44c26dd8fc0364c74f3b12d5884a507d7bd25083"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition canonTree := { t:ShareTree | canonicalTree t }.",
            "VernacDefinition",
            "026de13cade4e9e0550aba3d9406e4a10e825a83"
        ],
        [
            "Lemma shareTree_dec_eq : forall x y:ShareTree, {x=y}+{x<>y}.",
            "VernacStartTheoremProof",
            "f0e2915a4ad2dd72b49625d9db549b50480d038b"
        ],
        [
            "decide equality; apply bool_dec.",
            "VernacExtend",
            "8617ec074f2c9d94d9e21ad528299c7ab3b06e62"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma canonTree_eq : forall x y:canonTree, proj1_sig x = proj1_sig y -> x = y.",
            "VernacStartTheoremProof",
            "ae05355cc6d30875ef2dfcdb31cf1fb50cbb18dd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x as [x Hx].",
            "VernacExtend",
            "ec3ff52cb5579022ab60d608e44d3ef315c32051"
        ],
        [
            "destruct y as [y Hy].",
            "VernacExtend",
            "a47221c03c35c055b3c95e06d58b746540a92e9b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "subst y.",
            "VernacExtend",
            "f056a00b852bc549d1b8bb21d500c90d8ff37bf8"
        ],
        [
            "replace Hy with Hx by apply proof_irr; auto.",
            "VernacExtend",
            "d14a108a592c919f134a4a4790c361b4d382b62c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_eq_dec : forall x y:canonTree, {x=y}+{x<>y}.",
            "VernacStartTheoremProof",
            "93f8f00e5c1487dc7811a911d7cf6f9307550348"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x as [x Hx].",
            "VernacExtend",
            "ec3ff52cb5579022ab60d608e44d3ef315c32051"
        ],
        [
            "destruct y as [y Hy].",
            "VernacExtend",
            "a47221c03c35c055b3c95e06d58b746540a92e9b"
        ],
        [
            "destruct (shareTree_dec_eq x y); [ left | right ].",
            "VernacExtend",
            "dae2514a24e1e23ede09c11500f3241a1b870b84"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "red; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "injection H.",
            "VernacExtend",
            "0b4168b75c87f7c322bfb81e661f04001b54052d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance EqDec_canonTree : EqDec canonTree := canonTree_eq_dec.",
            "VernacInstance",
            "fcb6f4a5bc9a055a3624f0dcb12021f75b398385"
        ],
        [
            "Lemma comp_tree_inv : forall t, comp_tree (comp_tree t) = t.",
            "VernacStartTheoremProof",
            "d421991bb44d2c6676492ffff9dc2d6b21de0802"
        ],
        [
            "induction t; simpl; intros; try destruct_bool; auto.",
            "VernacExtend",
            "3d24a8e32cc8a3cfabab1141667a5751710c6676"
        ],
        [
            "rewrite IHt1; rewrite IHt2; auto.",
            "VernacExtend",
            "257827d976e142de9a46d013987914bb3f6475ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_full_empty : forall x, nonFullTree x -> nonEmptyTree (comp_tree x).",
            "VernacStartTheoremProof",
            "389e438247638fda9ea435c9b8dc86f621f6533a"
        ],
        [
            "intro x; induction x; simpl; intros; destruct_bool; intuition.",
            "VernacExtend",
            "b6898cb27b48a416ee8f6d23970d2e644bde9a92"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_empty_full : forall x, nonEmptyTree x -> nonFullTree (comp_tree x).",
            "VernacStartTheoremProof",
            "2b175e0700537a32b1f223db61e68bb0f02864bf"
        ],
        [
            "intro x; induction x; simpl; intros; destruct_bool; intuition.",
            "VernacExtend",
            "b6898cb27b48a416ee8f6d23970d2e644bde9a92"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve comp_full_empty comp_empty_full.",
            "VernacHints",
            "cd00b52cff92b1847689e8d95635b5a1fac40bf7"
        ],
        [
            "Lemma comp_canonical : forall x, canonicalTree x -> canonicalTree (comp_tree x).",
            "VernacStartTheoremProof",
            "c94dc305e5cae9fd4136b2d75cad2cc7ec6e35ff"
        ],
        [
            "intro x; induction x; simpl; intros; intuition.",
            "VernacExtend",
            "e12970453ca0c64013870699c71cb843f50dba44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module BA <: BOOLEAN_ALGEBRA.",
            "VernacDefineModule",
            "4d9b636adbc55385cdd6126e14ca53c2e78c1e6d"
        ],
        [
            "Definition t := canonTree.",
            "VernacDefinition",
            "6ad3a7e17cd8873514f323227e0d6f30f6fb6110"
        ],
        [
            "Definition Ord (x y:canonTree) := shareTreeOrd (proj1_sig x) (proj1_sig y).",
            "VernacDefinition",
            "f9c715533e579556c278229f90587e352f9ceb87"
        ],
        [
            "Definition lub (x y:canonTree) : canonTree := exist (fun t => canonicalTree t) (mkCanon (union_tree (proj1_sig x) (proj1_sig y))) (mkCanon_correct _).",
            "VernacDefinition",
            "eb82a11fec7f35c336d15c05c76b3ecb1bc6d7ae"
        ],
        [
            "Definition glb (x y:canonTree) : canonTree := exist (fun t => canonicalTree t) (mkCanon (intersect_tree (proj1_sig x) (proj1_sig y))) (mkCanon_correct _).",
            "VernacDefinition",
            "7df24c515543bb10213515c7bfa527ab1e9a83e9"
        ],
        [
            "Definition top : canonTree := exist (fun t => canonicalTree t) (Leaf true) I.",
            "VernacDefinition",
            "ad5ea233dc8f931358b75b233b403733e1d99894"
        ],
        [
            "Definition bot : canonTree := exist (fun t => canonicalTree t) (Leaf false) I.",
            "VernacDefinition",
            "fe0ab41909e1295ebde64a469072bb278dce0a44"
        ],
        [
            "Definition comp (x:canonTree) : canonTree := exist (fun t => canonicalTree t) (comp_tree (proj1_sig x)) (comp_canonical _ (proj2_sig x)).",
            "VernacDefinition",
            "26f0aaf783a91c1e3a52821b45a4fdd2a71398c2"
        ],
        [
            "Lemma ord_refl : forall x, Ord x x.",
            "VernacStartTheoremProof",
            "3d6b847a49491ae2cc4588637cf08223d876d3b7"
        ],
        [
            "intros [x Hx]; unfold Ord; simpl.",
            "VernacExtend",
            "330bd3c5756e4b02ce4af6addf8e347a9c47d11d"
        ],
        [
            "apply shareTreeOrd_refl.",
            "VernacExtend",
            "59311386889bd5783efd51817785a54d1e894e50"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ord_trans : forall x y z, Ord x y -> Ord y z -> Ord x z.",
            "VernacStartTheoremProof",
            "5a2747cf4062f6ffccc93b42e4c382308393a08d"
        ],
        [
            "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "6082d07fb7671630c841a3b594569917e4d38802"
        ],
        [
            "apply shareTreeOrd_trans with y; auto.",
            "VernacExtend",
            "f0e5cdd38896baafbca02a25101393d12af09089"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ord_antisym : forall x y, Ord x y -> Ord y x -> x = y.",
            "VernacStartTheoremProof",
            "31d114f5a633816e2e11d7bf325bb1fb8e263618"
        ],
        [
            "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "apply canonicalUnique; try split; auto.",
            "VernacExtend",
            "a821562f7fb6288e03e5f424edda157de237ca52"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lub_upper1 : forall x y, Ord x (lub x y).",
            "VernacStartTheoremProof",
            "30cf46d48e1f71a33c7614333729b83c16aaba68"
        ],
        [
            "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
        ],
        [
            "destruct (mkCanon_eq (union_tree x y)).",
            "VernacExtend",
            "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree x y); auto.",
            "VernacExtend",
            "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lub_upper2 : forall x y, Ord y (lub x y).",
            "VernacStartTheoremProof",
            "ea8fd9c6864e2ef74d878cf97d94de44139cdc17"
        ],
        [
            "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
        ],
        [
            "destruct (mkCanon_eq (union_tree x y)).",
            "VernacExtend",
            "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree x y); auto.",
            "VernacExtend",
            "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
        ],
        [
            "rewrite union_commute.",
            "VernacExtend",
            "d885c24d3f94d08eb13f83b39d536446e5905fb9"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lub_least : forall x y z, Ord x z -> Ord y z -> Ord (lub x y) z.",
            "VernacStartTheoremProof",
            "c2ac4f816b5b9789c15aa3f0d24a8533d6ea53e9"
        ],
        [
            "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "6082d07fb7671630c841a3b594569917e4d38802"
        ],
        [
            "destruct (mkCanon_eq (union_tree x y)).",
            "VernacExtend",
            "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree x y); auto.",
            "VernacExtend",
            "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
        ],
        [
            "apply union_least_bound; auto.",
            "VernacExtend",
            "c1a97d8b4d34ca91ae4bbcf25c7193ad58383f3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma glb_lower1 : forall x y, Ord (glb x y) x.",
            "VernacStartTheoremProof",
            "edcb1178477a41d85ca577823084d1d44fc7144f"
        ],
        [
            "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
        ],
        [
            "destruct (mkCanon_eq (intersect_tree x y)).",
            "VernacExtend",
            "cc63c9d8e8cf26c06baca6ee932fade14319d134"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
            "VernacExtend",
            "6adbe975989989899a34749e279bfa4f9b2ff302"
        ],
        [
            "apply intersection_lower_bound.",
            "VernacExtend",
            "d70ff6da5fe9ed65e32a7aa167f6dcc8536ff011"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma glb_lower2 : forall x y, Ord (glb x y) y.",
            "VernacStartTheoremProof",
            "1dd2536b4fe38620405523ae4d679d30affbe7be"
        ],
        [
            "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
        ],
        [
            "destruct (mkCanon_eq (intersect_tree x y)).",
            "VernacExtend",
            "cc63c9d8e8cf26c06baca6ee932fade14319d134"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
            "VernacExtend",
            "6adbe975989989899a34749e279bfa4f9b2ff302"
        ],
        [
            "rewrite intersect_commute.",
            "VernacExtend",
            "1c8be1142858e888bf6e427763320641dd139023"
        ],
        [
            "apply intersection_lower_bound.",
            "VernacExtend",
            "d70ff6da5fe9ed65e32a7aa167f6dcc8536ff011"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma glb_greatest : forall x y z, Ord z x -> Ord z y -> Ord z (glb x y).",
            "VernacStartTheoremProof",
            "00c3a186d721ceee463b0747067729866ebcd70d"
        ],
        [
            "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
            "VernacExtend",
            "6082d07fb7671630c841a3b594569917e4d38802"
        ],
        [
            "destruct (mkCanon_eq (intersect_tree x y)).",
            "VernacExtend",
            "cc63c9d8e8cf26c06baca6ee932fade14319d134"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
            "VernacExtend",
            "6adbe975989989899a34749e279bfa4f9b2ff302"
        ],
        [
            "apply intersection_greatest_bound; auto.",
            "VernacExtend",
            "3029091d54a9f21b8bf2b6ceca0b4a5812342388"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma top_correct : forall x, Ord x top.",
            "VernacStartTheoremProof",
            "7595838bcc21b97ec489fb6074f1ada09e0f8ac2"
        ],
        [
            "intros [x Hx]; unfold Ord; simpl; auto.",
            "VernacExtend",
            "0e1b44797f39b193edc04bf0210e0a5cafd2d49b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bot_correct : forall x, Ord bot x.",
            "VernacStartTheoremProof",
            "37a97067b0b393ce5e00148b65e4501ba3f39e4b"
        ],
        [
            "intros [x Hx]; unfold Ord; simpl; auto.",
            "VernacExtend",
            "0e1b44797f39b193edc04bf0210e0a5cafd2d49b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp1 : forall x, lub x (comp x) = top.",
            "VernacStartTheoremProof",
            "12da15764e59fffd6f921ed966646c7d2006f75b"
        ],
        [
            "intros [x Hx]; simpl.",
            "VernacExtend",
            "df2dcbdd2bfa820a16e0324aaf57a94811acd1a8"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "apply fullTree_canonical_trueLeaf.",
            "VernacExtend",
            "b3a6ed5e28b67f3ce1367ce2e6d1f3a341148035"
        ],
        [
            "2: apply mkCanon_correct.",
            "VernacExtend",
            "88b6c4dce849ecb061d42cd6b08c0593fe90e8a5"
        ],
        [
            "apply geTrueFull.",
            "VernacExtend",
            "b02d471ecff91e0d9885be9ab63ce3bd64e47815"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree x (comp_tree x)).",
            "VernacExtend",
            "53853138f541180013cb5986269f9aef38500749"
        ],
        [
            "2: destruct (mkCanon_eq (union_tree x (comp_tree x))); auto.",
            "VernacExtend",
            "f53b18e2aacefd75219bafa50062096b267a807a"
        ],
        [
            "apply tree_comp1.",
            "VernacExtend",
            "7a31c939c3ee264f2661a515042ca31f579e8150"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp2 : forall x, glb x (comp x) = bot.",
            "VernacStartTheoremProof",
            "d6bd0a5b9cf298e2eaa44c18209040a2026d1c45"
        ],
        [
            "intros [x Hx]; simpl.",
            "VernacExtend",
            "df2dcbdd2bfa820a16e0324aaf57a94811acd1a8"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "apply emptyTree_canonical_falseLeaf.",
            "VernacExtend",
            "3e10a0e8e8d80d51066d321c75a6d620611360a1"
        ],
        [
            "2: apply mkCanon_correct.",
            "VernacExtend",
            "88b6c4dce849ecb061d42cd6b08c0593fe90e8a5"
        ],
        [
            "apply leFalseEmpty.",
            "VernacExtend",
            "d74ff512d4c825d571243485485d315db28b3d51"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree x (comp_tree x)).",
            "VernacExtend",
            "724cdfdbbac776a8e73a888b982b5b75dddaa347"
        ],
        [
            "destruct (mkCanon_eq (intersect_tree x (comp_tree x))); auto.",
            "VernacExtend",
            "89942018e123f3c692159a70ba92752bb6d909fb"
        ],
        [
            "apply tree_comp2.",
            "VernacExtend",
            "f92f985d66b96512774f1500e8deb8954f9aa8dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nontrivial : top <> bot.",
            "VernacStartTheoremProof",
            "fc5b22bb599caa205ba2b82dbed802df3c57851d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distrib1 : forall x y z, glb x (lub y z) = lub (glb x y) (glb x z).",
            "VernacStartTheoremProof",
            "3998c04522094bd85f4da7200855e51fd4ca005b"
        ],
        [
            "intros [x Hx] [y Hy] [z Hz]; unfold glb, lub.",
            "VernacExtend",
            "576e4a7e81c49f3bdb048a9cfe7c9f007ed0ce61"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "apply canonicalUnique; try apply mkCanon_correct.",
            "VernacExtend",
            "8dca9a21e8b898006acdd9b82e82eed7a261abf0"
        ],
        [
            "apply shareTreeEq_trans with (intersect_tree x (mkCanon (union_tree y z))).",
            "VernacExtend",
            "01c73677c730d9c78e56e96249b2f5eded8c94a1"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply shareTreeEq_trans with (union_tree (mkCanon (intersect_tree x y)) (mkCanon (intersect_tree x z))).",
            "VernacExtend",
            "fa4026305ec1a8dc31e93b0b041eeb3fd05e555e"
        ],
        [
            "2: apply mkCanon_eq.",
            "VernacExtend",
            "54c31c0f52c2c3716716a523fc6c2a66a7846b01"
        ],
        [
            "apply shareTreeEq_trans with (intersect_tree x (union_tree y z)).",
            "VernacExtend",
            "63923816e121065ac3d2daa6198021721c79b42c"
        ],
        [
            "apply intersect_cong.",
            "VernacExtend",
            "4b77c5399dc4797ddbb16dbbd5a4a898200c672b"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply shareTreeEq_trans with (union_tree (intersect_tree x y) (intersect_tree x z)).",
            "VernacExtend",
            "00a8c1cfb64e131d0d94a57bf885ee452905fdc6"
        ],
        [
            "rewrite intersect_distrib.",
            "VernacExtend",
            "34d8644f2205d96f5b67fdf3f0938fa3d65b5388"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply union_cong.",
            "VernacExtend",
            "5e39797d567c8d4c7818f3252c434a7583a0aa43"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BA.",
            "VernacEndSegment",
            "8807eb796eabe758861122eebbad1f58350a588f"
        ],
        [
            "Module BAF := BA_Facts BA.",
            "VernacDefineModule",
            "53165491a9c4d243f5e2cdc0a69dda68d9f24615"
        ],
        [
            "Include BAF.",
            "VernacInclude",
            "121e5ef7f731de15f478f5e24e0537a27a131d04"
        ],
        [
            "Definition rel (a x:t) : t.",
            "VernacDefinition",
            "9496bd56efd4b8a9e4663ae74889046731dea175"
        ],
        [
            "case_eq (proj1_sig x); intros.",
            "VernacExtend",
            "b060536d9539fa39b5a33c7dbddbcf8dffb2da7e"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "exact a.",
            "VernacExtend",
            "22ff3beb9eb73525898c3fe8426139b9069c03e7"
        ],
        [
            "exact (exist (fun t => canonicalTree t) (Leaf false) I).",
            "VernacExtend",
            "b6171ee214edc788fe5d3c97a6dc036647e9fe01"
        ],
        [
            "refine (exist _ (relativ_tree (proj1_sig a) (proj1_sig x)) _).",
            "VernacExtend",
            "73fc441472c527943ed71f1a06da7330b278f114"
        ],
        [
            "apply relativ_almost_canon.",
            "VernacExtend",
            "489c0c32dcfde3b7f4eae05657a702611f4a761d"
        ],
        [
            "apply (proj2_sig a).",
            "VernacExtend",
            "6c95188e6b1668fd521aa6f2a28b90647a352ad3"
        ],
        [
            "apply (proj2_sig x).",
            "VernacExtend",
            "1c2182c52877b31b0dabde06babedc0a9f1cae8d"
        ],
        [
            "destruct x; simpl in *; subst; simpl in *; intuition.",
            "VernacExtend",
            "03c9f71f065e5df43bfdd86e5829b2bba35b0375"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma relativ_tree_empty : forall a x, nonEmptyTree a -> nonEmptyTree x -> nonEmptyTree (relativ_tree a x).",
            "VernacStartTheoremProof",
            "845c76e4a39b76e96d86ef624756ac7c8bfa546e"
        ],
        [
            "induction a; simpl; intros.",
            "VernacExtend",
            "651d671a1d9148684b6a564fbcd0e8bdc7318584"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "intuition; eauto.",
            "VernacExtend",
            "fc07a008877a7fefaf8071071d531ca5f5163c56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relativ_tree_nonid : forall a x1 x2, nonEmptyTree a -> a = relativ_tree a (Node x1 x2) -> False.",
            "VernacStartTheoremProof",
            "341b2a02ab01e1e74bc780b92821023d559f3c03"
        ],
        [
            "induction a; simpl; intros; try destruct_bool; try discriminate.",
            "VernacExtend",
            "d38617476f834350d9794dfa5087301f29cdc83b"
        ],
        [
            "injection H0; clear H0; intros.",
            "VernacExtend",
            "c784b8ede908323a0e86176f63b0719f5c8eec6d"
        ],
        [
            "intuition; eauto.",
            "VernacExtend",
            "fc07a008877a7fefaf8071071d531ca5f5163c56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_classification : forall a x, { x = bot /\\ rel a x = bot } + { x <> bot /\\ proj1_sig (rel a x) = relativ_tree (proj1_sig a) (proj1_sig x) /\\ (a = bot <-> rel a x = bot) }.",
            "VernacStartTheoremProof",
            "5105ac5edb35d2ce6edb2cef9768eaa09716bd32"
        ],
        [
            "intros [a ?] [x ?].",
            "VernacExtend",
            "7bbd17960873943efe31884c1f5a03b1a68003c7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct x; try destruct_bool; simpl.",
            "VernacExtend",
            "df8331bf187403413c8bccd6717849009b419a32"
        ],
        [
            "right; split.",
            "VernacExtend",
            "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
        ],
        [
            "red; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "discriminate H.",
            "VernacExtend",
            "f00d7179963a09be7462e0ca3723e1bc13cd6c39"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite relativ_full; auto.",
            "VernacExtend",
            "ce971bb8f28baab003937a035ba77f4174325255"
        ],
        [
            "split; intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "injection H; clear H; intros.",
            "VernacExtend",
            "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
        ],
        [
            "subst a.",
            "VernacExtend",
            "d7670e5f9c196bd417b16b29da3532f33d34884d"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "injection H; auto.",
            "VernacExtend",
            "98b10cc71270f203eeea844ff97dc3dbc3665ef4"
        ],
        [
            "left; split; auto.",
            "VernacExtend",
            "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
        ],
        [
            "apply canonTree_eq; auto.",
            "VernacExtend",
            "0faa9968474d42ef4b1c30502cfd28c68610cd31"
        ],
        [
            "right; split.",
            "VernacExtend",
            "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
        ],
        [
            "red; intros; discriminate.",
            "VernacExtend",
            "3dc8cab2ad5f5b0f8cdd0c668624cfd3367c3237"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split; intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "injection H; clear H; intros.",
            "VernacExtend",
            "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "injection H; clear H; intros.",
            "VernacExtend",
            "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "destruct a; simpl in *; destruct_bool; auto; try discriminate.",
            "VernacExtend",
            "aae3d93c73a570aa9b5be7e546cdff61bc858d47"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma rel_inj_r : forall a1 a2 x, x <> bot -> rel a1 x = rel a2 x -> a1 = a2.",
            "VernacStartTheoremProof",
            "2d6d4c3b9d866a7fe32db75331893d606664f3f4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "destruct (rel_classification a1 x); intuition.",
            "VernacExtend",
            "b1762716d1d8bc6871c18f82c6d68782db846ae9"
        ],
        [
            "destruct (rel_classification a2 x); intuition.",
            "VernacExtend",
            "dfe095e4a994c8c0901183f95026aadbd2779212"
        ],
        [
            "apply relativ_inv2 with (proj1_sig x); auto.",
            "VernacExtend",
            "0166361a4cbd3dfe763a86e98c0fc7c7963aba94"
        ],
        [
            "destruct x; simpl.",
            "VernacExtend",
            "b0c3c03e2d0a8fa13c533c8a79c2c6b3067d60db"
        ],
        [
            "destruct x; simpl.",
            "VernacExtend",
            "b0c3c03e2d0a8fa13c533c8a79c2c6b3067d60db"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "elim H; simpl.",
            "VernacExtend",
            "dfbf07a7200e42447d91e7ea96ed257d1ba45228"
        ],
        [
            "apply canonTree_eq; auto.",
            "VernacExtend",
            "0faa9968474d42ef4b1c30502cfd28c68610cd31"
        ],
        [
            "generalize c; simpl; intuition.",
            "VernacExtend",
            "d5d57ed420a7597fbc43b04174efb13a6b96ffa5"
        ],
        [
            "rewrite <- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "rewrite <- H7.",
            "VernacExtend",
            "15eb34513c3298e9d5b8731fdb6616cb0a4f6a80"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_inj_l : forall a x y, a <> bot -> rel a x = rel a y -> x = y.",
            "VernacStartTheoremProof",
            "1d529d77f803036f473034ee698e87a8d88a772e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "destruct a as [a ?]; destruct x as [x ?]; destruct y as [y ?]; simpl.",
            "VernacExtend",
            "2d5cf70d0808fc3b378a7a505c34197a9c999231"
        ],
        [
            "assert (nonEmptyTree a).",
            "VernacExtend",
            "214a50cffa4d8b98e81f7e76649c601035e5f57a"
        ],
        [
            "destruct a; simpl in *.",
            "VernacExtend",
            "f16ce63ce10cf4add043d122c2aa557e3f699d02"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "elim H; apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "63084b74270f84394092c3da0614871bea6683b1"
        ],
        [
            "decompose [and] c; auto.",
            "VernacExtend",
            "886caa280b06b1b057e96447439ebff680472255"
        ],
        [
            "unfold rel in *; simpl in *.",
            "VernacExtend",
            "038fe3ed321a3e5598e9985c1d5f133f0d97db55"
        ],
        [
            "destruct x; destruct y; destruct_bool; auto; injection H0; clear H0; try congruence; intros.",
            "VernacExtend",
            "be54974c20c4f2fe742a7acef2e3c82194ac83c9"
        ],
        [
            "elim (relativ_tree_nonid a y1 y2); auto.",
            "VernacExtend",
            "ef0124215e8e0e50ba8919891a581bf3295a5c61"
        ],
        [
            "simpl in c1; decompose [and] c1.",
            "VernacExtend",
            "03f1bbc842fe33771f4470a1ed06bf247dbc2f08"
        ],
        [
            "generalize (relativ_tree_empty a (Node y1 y2) H1 H4).",
            "VernacExtend",
            "e04bcf7bd6a788ed139cebe8e7fe6aff84da3e3b"
        ],
        [
            "rewrite <- H0; simpl; intros; discriminate.",
            "VernacExtend",
            "8c75ba11f4444f5cd4c60eba91bedb5af8f7120f"
        ],
        [
            "elim (relativ_tree_nonid a x1 x2); auto.",
            "VernacExtend",
            "18eb42cbe7e219a78c5b3d49eb395d2e5d23e5e1"
        ],
        [
            "simpl in c0; decompose [and] c0.",
            "VernacExtend",
            "a8c133f698bc59241a976b2bae21cfbe50af9c40"
        ],
        [
            "generalize (relativ_tree_empty a (Node x1 x2) H1 H4).",
            "VernacExtend",
            "5cadfbf1a9df583571226e002de6b461ea6c8e94"
        ],
        [
            "rewrite H0; simpl; intros; discriminate.",
            "VernacExtend",
            "79f43733c0888865e85160489ef6abf949542925"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "split; apply relativ_inv with a; auto; rewrite H0; apply shareTreeOrd_refl.",
            "VernacExtend",
            "aa0ef7578e3608f795242efaef6ab21fefae36e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_assoc : forall x y z, rel x (rel y z) = rel (rel x y) z.",
            "VernacStartTheoremProof",
            "95fcf7220dfd4b62119c18ac03217f3eaab91188"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "destruct (rel_classification x (rel y z)); intuition.",
            "VernacExtend",
            "e78bc5a96ffd7a3eb0d1605a27196000ce1737c9"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "destruct (rel_classification (rel x y) z); intuition.",
            "VernacExtend",
            "ae318d866b44e234df7b4453ec5e25dfc2985acc"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "destruct (rel_classification x y); intuition.",
            "VernacExtend",
            "20e9d4a034ed0204c31c5f9f2c057a0eb303fa41"
        ],
        [
            "rewrite H7; auto.",
            "VernacExtend",
            "a4939b718312f015e111e05e9b001fd02d3063fd"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "rewrite H7.",
            "VernacExtend",
            "2b0de906e9dfacfe89c031c2266760d29b5450f6"
        ],
        [
            "rewrite <- relativ_assoc.",
            "VernacExtend",
            "7c77002eafe473ac048de5bc46a73d40e1527870"
        ],
        [
            "destruct (rel_classification y z); intuition.",
            "VernacExtend",
            "dd731f6942c46f5d74e3aa610a1c7ff0b613f04a"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "destruct (rel_classification y z); intuition.",
            "VernacExtend",
            "dd731f6942c46f5d74e3aa610a1c7ff0b613f04a"
        ],
        [
            "destruct (rel_classification (rel x y) z); intuition.",
            "VernacExtend",
            "ae318d866b44e234df7b4453ec5e25dfc2985acc"
        ],
        [
            "rewrite H9.",
            "VernacExtend",
            "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
        ],
        [
            "destruct (rel_classification x y); intuition.",
            "VernacExtend",
            "20e9d4a034ed0204c31c5f9f2c057a0eb303fa41"
        ],
        [
            "rewrite H13.",
            "VernacExtend",
            "bc2d32522e887645239b994008e234c058557cd9"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "apply relativ_assoc.",
            "VernacExtend",
            "be96e4c6165fd838ad055b1e9ba43f36c6d8ec2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_bot1 : forall a, rel a bot = bot.",
            "VernacStartTheoremProof",
            "4a430a0a5cfe7727765bf143fdde129939e2c22d"
        ],
        [
            "intros [a ?]; auto.",
            "VernacExtend",
            "86428ea795e5b7724498eed49ae40d4ae0adc83f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_bot2 : forall x, rel bot x = bot.",
            "VernacStartTheoremProof",
            "02eaf98ab7cea67614856ce062614967660917a8"
        ],
        [
            "intros e.",
            "VernacExtend",
            "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
        ],
        [
            "destruct (rel_classification bot e); intuition.",
            "VernacExtend",
            "cb4415526f793287cdbba64a8a82f99eb3293bf6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_top1 : forall a, rel a top = a.",
            "VernacStartTheoremProof",
            "b86432d60fa1395ec3e4b85a00c9fa94f47a3dfd"
        ],
        [
            "intros a.",
            "VernacExtend",
            "9fef235d1a71132a4c9de7f87ab95d540098d91d"
        ],
        [
            "destruct (rel_classification a top); intuition.",
            "VernacExtend",
            "f000c59eea5b2ada7d65f9f2a71597952d53b7c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_top2 : forall x, rel top x = x.",
            "VernacStartTheoremProof",
            "d522257712e938ee9675a57a1b7c661380531d82"
        ],
        [
            "intro x.",
            "VernacExtend",
            "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
        ],
        [
            "destruct (rel_classification top x); intuition.",
            "VernacExtend",
            "6c20d169ea05ca024d9b5e46da56a7e9e8682bf8"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_preserves_glb : forall a x y, rel a (glb x y) = glb (rel a x) (rel a y).",
            "VernacStartTheoremProof",
            "2b4c516ed6560e38561fb974e1e4233e1876ff5d"
        ],
        [
            "intros a x y.",
            "VernacExtend",
            "54c18a9ec1ae2ad7ded6b1c3c93da6947c7a7369"
        ],
        [
            "destruct (rel_classification a x); intuition.",
            "VernacExtend",
            "87e19c9cc76fc5b742376a6af27d72e7e4b4cb38"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite glb_bot.",
            "VernacExtend",
            "38cb8b135187eca898aaebf9f330369f95b96cf4"
        ],
        [
            "rewrite rel_bot1.",
            "VernacExtend",
            "18bb18a652fee506842ba0a5e61c7d8344d0fb9f"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite glb_bot.",
            "VernacExtend",
            "38cb8b135187eca898aaebf9f330369f95b96cf4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (rel_classification a y); intuition.",
            "VernacExtend",
            "e5c855cb769a6df5f5c450efe695699d2244c2b5"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite glb_bot.",
            "VernacExtend",
            "38cb8b135187eca898aaebf9f330369f95b96cf4"
        ],
        [
            "rewrite glb_bot.",
            "VernacExtend",
            "38cb8b135187eca898aaebf9f330369f95b96cf4"
        ],
        [
            "apply rel_bot1.",
            "VernacExtend",
            "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite <- relativ_intersect.",
            "VernacExtend",
            "497956f109e95a04ba225c51f8eb21e39b33db95"
        ],
        [
            "destruct (rel_classification a (glb x y)); intuition.",
            "VernacExtend",
            "0e272e7149c4585f470d349062dd79817dfee15b"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "injection H6; intros.",
            "VernacExtend",
            "7becb392b34f9bb7c7f1d4d76b2b638b3f1f9aa4"
        ],
        [
            "apply (mkCanon_test2 (Leaf false)).",
            "VernacExtend",
            "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
        ],
        [
            "apply shareTreeEq_trans with (relativ_tree (proj1_sig a) (Leaf false)).",
            "VernacExtend",
            "ba3d40e051acb5d38f24ca7511fdb2b222ea3707"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply emptyLeFalse.",
            "VernacExtend",
            "3939f158d07b4439b70583884e88cadf6d39f7d7"
        ],
        [
            "intro G.",
            "VernacExtend",
            "96942541382c43cade9bf717e8217e18207fb066"
        ],
        [
            "generalize (relativ_empty2 _ _ G); auto.",
            "VernacExtend",
            "cc070e9471d9db278344e8f4f76d638ab4016b40"
        ],
        [
            "simpl; intros; discriminate.",
            "VernacExtend",
            "3d59504195c7deca6b10553f120fad45a6155eb6"
        ],
        [
            "generalize (mkCanon_test _ (Leaf false) H9).",
            "VernacExtend",
            "737b53e4100b9033d1ffed001d5e350b375b2c03"
        ],
        [
            "unfold shareTreeEq; intuition; apply relativ_cong; auto.",
            "VernacExtend",
            "5d134459eb23a49fb8dd103bd8d496d23e40c16b"
        ],
        [
            "rewrite H9.",
            "VernacExtend",
            "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite relativ_canon_commute; auto.",
            "VernacExtend",
            "d7c0eb122691415bf94fb0e79e0ec40c395b75eb"
        ],
        [
            "destruct a; auto.",
            "VernacExtend",
            "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
        ],
        [
            "destruct (nonEmpty_dec (intersect_tree (proj1_sig x) (proj1_sig y))); auto.",
            "VernacExtend",
            "6bb0533080c74eea9ae68dfd497c28e32781dba6"
        ],
        [
            "elim H6.",
            "VernacExtend",
            "37df90b4b62522e9f9376bbd0ca7d8f3c914a4a2"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply (mkCanon_test2 (Leaf false)).",
            "VernacExtend",
            "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply emptyLeFalse; auto.",
            "VernacExtend",
            "2c94baf2ddcd414eb7f992e5c1cb9a01c61e61d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_preserves_lub : forall a x y, rel a (lub x y) = lub (rel a x) (rel a y).",
            "VernacStartTheoremProof",
            "42b3332e290b8908e71a7619f9900d4935a8f620"
        ],
        [
            "intros a x y.",
            "VernacExtend",
            "54c18a9ec1ae2ad7ded6b1c3c93da6947c7a7369"
        ],
        [
            "destruct (rel_classification a x); intuition.",
            "VernacExtend",
            "87e19c9cc76fc5b742376a6af27d72e7e4b4cb38"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (rel_classification a y); intuition.",
            "VernacExtend",
            "e5c855cb769a6df5f5c450efe695699d2244c2b5"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply canonTree_eq.",
            "VernacExtend",
            "b6814e490c9944e3365a134f606fa47d53c804aa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite <- relativ_union.",
            "VernacExtend",
            "ba74dd068ce39173cf8b6a4ba9dce0d2131dd876"
        ],
        [
            "destruct (rel_classification a (lub x y)); intuition.",
            "VernacExtend",
            "ffcb7eeff1cd8351ac00a7a94e3154ffdd546051"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "injection H6; intros.",
            "VernacExtend",
            "7becb392b34f9bb7c7f1d4d76b2b638b3f1f9aa4"
        ],
        [
            "apply (mkCanon_test2 (Leaf false)).",
            "VernacExtend",
            "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
        ],
        [
            "apply shareTreeEq_trans with (relativ_tree (proj1_sig a) (Leaf false)).",
            "VernacExtend",
            "ba3d40e051acb5d38f24ca7511fdb2b222ea3707"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply emptyLeFalse.",
            "VernacExtend",
            "3939f158d07b4439b70583884e88cadf6d39f7d7"
        ],
        [
            "intro G.",
            "VernacExtend",
            "96942541382c43cade9bf717e8217e18207fb066"
        ],
        [
            "generalize (relativ_empty2 _ _ G).",
            "VernacExtend",
            "b0abe23bd38c86d7e24892658c946dbbef9814f1"
        ],
        [
            "simpl; intros; discriminate.",
            "VernacExtend",
            "3d59504195c7deca6b10553f120fad45a6155eb6"
        ],
        [
            "generalize (mkCanon_test _ (Leaf false) H9).",
            "VernacExtend",
            "737b53e4100b9033d1ffed001d5e350b375b2c03"
        ],
        [
            "unfold shareTreeEq; intuition; apply relativ_cong; auto.",
            "VernacExtend",
            "5d134459eb23a49fb8dd103bd8d496d23e40c16b"
        ],
        [
            "rewrite H9.",
            "VernacExtend",
            "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite relativ_canon_commute; auto.",
            "VernacExtend",
            "d7c0eb122691415bf94fb0e79e0ec40c395b75eb"
        ],
        [
            "destruct a; auto.",
            "VernacExtend",
            "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
        ],
        [
            "destruct (nonEmpty_dec (union_tree (proj1_sig x) (proj1_sig y))); intros; auto.",
            "VernacExtend",
            "246b8177e7de1ffd8cee0471dc82bddfca70910e"
        ],
        [
            "elim H6.",
            "VernacExtend",
            "37df90b4b62522e9f9376bbd0ca7d8f3c914a4a2"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply (mkCanon_test2 (Leaf false)).",
            "VernacExtend",
            "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply emptyLeFalse; auto.",
            "VernacExtend",
            "2c94baf2ddcd414eb7f992e5c1cb9a01c61e61d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition leftTree : canonTree.",
            "VernacDefinition",
            "cd7ee37f4e05c2d166b3971087084a262b51e3bc"
        ],
        [
            "exists (Node (Leaf true) (Leaf false)).",
            "VernacExtend",
            "3d8a9b1e04d95d04d189f56a954b7322c1798a5b"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition rightTree : canonTree.",
            "VernacDefinition",
            "6216945f870f4675af83dd953ce6f084adf872bb"
        ],
        [
            "exists (Node (Leaf false) (Leaf true)).",
            "VernacExtend",
            "72a204c88ae506b1af4ca34005eda9bec9256330"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition split (x:canonTree) := (rel x leftTree, rel x rightTree).",
            "VernacDefinition",
            "6c914123b567970960b39ca002a1880489b49770"
        ],
        [
            "Lemma split_disjoint : forall x1 x2 x, split x = (x1, x2) -> glb x1 x2 = bot.",
            "VernacStartTheoremProof",
            "67c71a9a073459998290f046b68c58dfb64c5c18"
        ],
        [
            "unfold split; intros.",
            "VernacExtend",
            "06af64d30f020a11331d09c7e79022a9e0b283b1"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "rewrite <- rel_preserves_glb.",
            "VernacExtend",
            "eddb9edd936e3739293fd8481688a975ce2f2b50"
        ],
        [
            "replace (glb leftTree rightTree) with bot.",
            "VernacExtend",
            "f7ced8a6b54eac9819ebfeb73b86597b158b2ff2"
        ],
        [
            "apply rel_bot1.",
            "VernacExtend",
            "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_together : forall x1 x2 x, split x = (x1, x2) -> lub x1 x2 = x.",
            "VernacStartTheoremProof",
            "a457c420183d932f786ef4fc7819edfc59785627"
        ],
        [
            "unfold split; intros.",
            "VernacExtend",
            "06af64d30f020a11331d09c7e79022a9e0b283b1"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "rewrite <- rel_preserves_lub.",
            "VernacExtend",
            "2d9d58b432b8aed395f77eac8a5fff659368c63a"
        ],
        [
            "replace (lub leftTree rightTree) with top.",
            "VernacExtend",
            "72bce4227a215d8b8072945ab04096802a45b3ce"
        ],
        [
            "apply rel_top1.",
            "VernacExtend",
            "dadd305c4c5c1219e538dd18efa75f4cb3292170"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_nontrivial : forall x1 x2 x, split x = (x1, x2) -> (x1 = bot \\/ x2 = bot) -> x = bot.",
            "VernacStartTheoremProof",
            "4c2c43c30ef46703adb0f321921fa8e9caf9c784"
        ],
        [
            "unfold split; intros.",
            "VernacExtend",
            "06af64d30f020a11331d09c7e79022a9e0b283b1"
        ],
        [
            "inv H; destruct H0.",
            "VernacExtend",
            "fb6efdadeb059b60ebc90f679424929174748d1c"
        ],
        [
            "destruct (canonTree_eq_dec x bot); auto.",
            "VernacExtend",
            "41be4c06a06e6c6ce2c30a26423151f4ed8c2629"
        ],
        [
            "replace bot with (rel x bot) in H.",
            "VernacExtend",
            "fe601383fbcecac4f63844e63eaeef302c672feb"
        ],
        [
            "apply rel_inj_l in H; auto.",
            "VernacExtend",
            "49be499fa365b8fb23bb722631c2363c1f9ac92a"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "apply rel_bot1.",
            "VernacExtend",
            "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
        ],
        [
            "destruct (canonTree_eq_dec x bot); auto.",
            "VernacExtend",
            "41be4c06a06e6c6ce2c30a26423151f4ed8c2629"
        ],
        [
            "replace bot with (rel x bot) in H.",
            "VernacExtend",
            "fe601383fbcecac4f63844e63eaeef302c672feb"
        ],
        [
            "apply rel_inj_l in H; auto.",
            "VernacExtend",
            "49be499fa365b8fb23bb722631c2363c1f9ac92a"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "apply rel_bot1.",
            "VernacExtend",
            "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive isTokenFactory' : ShareTree -> nat -> Prop := | isTokFac_0 : isTokenFactory' (Leaf true) O | isTokFac_S_true : forall t n, isTokenFactory' t (S n) -> isTokenFactory' (Node (Leaf true) t) (S n) | isTokFac_S_false : forall t n, isTokenFactory' t n -> isTokenFactory' (Node (Leaf false) t) (S n).",
            "VernacInductive",
            "9852c738e5ed632ae1b1d791029ac1c7837d729a"
        ],
        [
            "Inductive isToken' : ShareTree -> nat -> Prop := | isTok_0 : isToken' (Leaf false) O | isTok_S_true : forall t n, isToken' t n -> isToken' (Node (Leaf true) t) (S n) | isTok_S_false : forall t n, isToken' t (S n) -> isToken' (Node (Leaf false) t) (S n).",
            "VernacInductive",
            "414ebbadd46c5e21f0b137e72eb766c5ff229f73"
        ],
        [
            "Definition isTokenFactory (x:t) (n:nat) := isTokenFactory' (proj1_sig x) n.",
            "VernacDefinition",
            "b3a2b475764929f1ab7b5d1309de6c8ef74fb3df"
        ],
        [
            "Definition isToken (x:t) (n:nat) := isToken' (proj1_sig x) n.",
            "VernacDefinition",
            "c28b9059057fc56898636e7b9066262248bfe227"
        ],
        [
            "Lemma isTokenFactory_canon : forall n fac, isTokenFactory' fac n -> canonicalTree fac.",
            "VernacStartTheoremProof",
            "a08db80e6dedd34cb3f6adf2a0db757fb8a33a29"
        ],
        [
            "intros n fac H; induction H; simpl; intuition.",
            "VernacExtend",
            "f2d3903f157933f2b058de81c8d059db3c544745"
        ],
        [
            "right; destruct t0; simpl in *; auto.",
            "VernacExtend",
            "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "right; destruct t0; simpl in *; auto.",
            "VernacExtend",
            "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
        ],
        [
            "inv H; auto.",
            "VernacExtend",
            "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isToken_canon : forall n tok, isToken' tok n -> canonicalTree tok.",
            "VernacStartTheoremProof",
            "1534aeee67ab944c3e94a9a5235a4794c67f2299"
        ],
        [
            "intros n tok H; induction H; simpl; intuition.",
            "VernacExtend",
            "9a521e85afa2ef049bbaa6bf2a88c11b8955ce69"
        ],
        [
            "right; destruct t0; simpl in *; auto.",
            "VernacExtend",
            "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
        ],
        [
            "inv H; auto.",
            "VernacExtend",
            "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "right; destruct t0; simpl in *; auto.",
            "VernacExtend",
            "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint split_tok1 (n:nat) (x:ShareTree) {struct x} : ShareTree := match x with | Node (Leaf true) t2 => match n with | O => Node (Leaf true) (Leaf false) | S n' => Node (Leaf true) (split_tok1 n' t2) end | Node (Leaf false) t2 => Node (Leaf false) (split_tok1 n t2) | _ => Leaf false end.",
            "VernacFixpoint",
            "b253203e0952e7fa75d6a54a6433818d366d9915"
        ],
        [
            "Fixpoint split_tok2 (n:nat) (x:ShareTree) {struct x} : ShareTree := match x with | Node (Leaf true) t2 => match n with | O => Node (Leaf false) t2 | S n' => Node (Leaf false) (split_tok2 n' t2) end | Node (Leaf false) t2 => Node (Leaf false) (split_tok2 n t2) | _ => x end.",
            "VernacFixpoint",
            "b23335c8bd1c6d7dbe24f98341bcda0cf830131f"
        ],
        [
            "Lemma split_tok_lub : forall tok n, shareTreeEq tok (union_tree (split_tok1 n tok) (split_tok2 n tok)).",
            "VernacStartTheoremProof",
            "40fb06a0894d934e6e432aec5192b366992f730e"
        ],
        [
            "induction tok; simpl; intros.",
            "VernacExtend",
            "95e644559188a474ec863de6c249731c37158966"
        ],
        [
            "destruct b; auto.",
            "VernacExtend",
            "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
        ],
        [
            "destruct tok1; simpl.",
            "VernacExtend",
            "b18975a54d167ec216430f99a16845bcbde46985"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "destruct n; simpl; auto.",
            "VernacExtend",
            "1e3544c1db38cf9d3b82500db7d90f24bce9aeea"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_tok_glb : forall tok n, shareTreeOrd (intersect_tree (split_tok1 n tok) (split_tok2 n tok)) (Leaf false).",
            "VernacStartTheoremProof",
            "1b16834f3edf2a8cf157486747d579a764da1374"
        ],
        [
            "induction tok; simpl; intros; auto.",
            "VernacExtend",
            "f1c3ba883841e5873d7337c99eef4a7c32660474"
        ],
        [
            "destruct tok1; simpl; auto.",
            "VernacExtend",
            "3d404697c4ae68bb907bd6ba2ebc82d002dd762d"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "destruct n; simpl.",
            "VernacExtend",
            "6554f156164019d92e1907ce49ab9159d733a0bb"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_tok1_correct : forall tok n m, isToken' tok m -> gt m n -> isToken' (split_tok1 n tok) (S n).",
            "VernacStartTheoremProof",
            "41f06124c6e7956ceb15213af1eb0e8fee577b62"
        ],
        [
            "intros tok n m H; revert n; induction H; intros.",
            "VernacExtend",
            "333d26651a469f9fef388437484de8735d037850"
        ],
        [
            "inv H; simpl.",
            "VernacExtend",
            "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply IHisToken'.",
            "VernacExtend",
            "df5a9032000f08630ca833737733ea4ae025f5ec"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply IHisToken'.",
            "VernacExtend",
            "df5a9032000f08630ca833737733ea4ae025f5ec"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_tok2_correct : forall tok n m, isToken' tok m -> gt m n -> isToken' (mkCanon (split_tok2 n tok)) (m - (S n)).",
            "VernacStartTheoremProof",
            "4b84753fcc268b48abffb487caba9726d5cf8c42"
        ],
        [
            "intros tok n m H; revert n; induction H; intros.",
            "VernacExtend",
            "333d26651a469f9fef388437484de8735d037850"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (mkCanon t0) with t0.",
            "VernacExtend",
            "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
        ],
        [
            "inv H; simpl.",
            "VernacExtend",
            "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "apply canonicalUnique.",
            "VernacExtend",
            "190434ded32bd8337d3648e0fac2f6ee88b019dd"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply isToken_canon with n; auto.",
            "VernacExtend",
            "fe9424e5502af052bb637def7c6e432c76584d54"
        ],
        [
            "apply mkCanon_correct.",
            "VernacExtend",
            "bd565ce231c7da85be042cb32a6ac9e7ebbe4850"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case_eq (mkCanon (split_tok2 n0 t0)); intros.",
            "VernacExtend",
            "a02e37c33d6eb59738ab964be66a39533b711d44"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "clear - H H1.",
            "VernacExtend",
            "23c492137dd039f7b534dbf72114fc4b965d8b28"
        ],
        [
            "revert n0 H H1.",
            "VernacExtend",
            "616d32ecb8cf93b36890679644ef5032913577c8"
        ],
        [
            "induction t0; simpl; intros.",
            "VernacExtend",
            "353d44e0ea933b0a5df56b5cde40190c52451d9c"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "destruct (mkCanon t0_2); try discriminate.",
            "VernacExtend",
            "7f931261b1ee0b541bd329e66b5386b5d3a2d354"
        ],
        [
            "destruct b; discriminate.",
            "VernacExtend",
            "7afd4970724fa0504fb9d93e9f4994db0189ed38"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "destruct (mkCanon (split_tok2 n0 t0_2)); try discriminate.",
            "VernacExtend",
            "c1ab69fb116f67715a236df6841b0bb22959d123"
        ],
        [
            "destruct b; discriminate.",
            "VernacExtend",
            "7afd4970724fa0504fb9d93e9f4994db0189ed38"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "destruct (mkCanon (split_tok2 n0 t0_2)); try discriminate.",
            "VernacExtend",
            "c1ab69fb116f67715a236df6841b0bb22959d123"
        ],
        [
            "destruct b; discriminate.",
            "VernacExtend",
            "7afd4970724fa0504fb9d93e9f4994db0189ed38"
        ],
        [
            "specialize ( IHisToken' n0).",
            "VernacExtend",
            "db0f0abf8c7e22b5747d8d2837512e7a54c16fa2"
        ],
        [
            "spec IHisToken'; [ omega | ].",
            "VernacExtend",
            "5f7ac0f5a7f0657318fe38670e2d5f897aa10241"
        ],
        [
            "rewrite H1 in IHisToken'.",
            "VernacExtend",
            "f2bc64d535891320a1fbe140f56674aea8fb49cc"
        ],
        [
            "inv IHisToken'.",
            "VernacExtend",
            "71bd4434b8e6775a704d5be1b24f3d6dc9acc247"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "specialize ( IHisToken' n0).",
            "VernacExtend",
            "db0f0abf8c7e22b5747d8d2837512e7a54c16fa2"
        ],
        [
            "spec IHisToken'.",
            "VernacExtend",
            "b2be1601767aea6941d881632beac54b0f25da41"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite H1 in IHisToken'.",
            "VernacExtend",
            "f2bc64d535891320a1fbe140f56674aea8fb49cc"
        ],
        [
            "inversion IHisToken'.",
            "VernacExtend",
            "f7c54ae735369c5199dd9fb23f8d7faea2f682be"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "rewrite H5; auto.",
            "VernacExtend",
            "b21071c2373ca254f86470b0d9b124cb25551839"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "subst; rewrite H5; auto.",
            "VernacExtend",
            "960856a292ae1af55b53f0dfe05142428b5f2f4b"
        ],
        [
            "specialize ( IHisToken' n0 H0).",
            "VernacExtend",
            "45ae907d04d50fd1c1994e29683e9de1ded910e3"
        ],
        [
            "simpl split_tok2.",
            "VernacExtend",
            "6a1e3e61ec579de562c5ab75739367c90c4c9907"
        ],
        [
            "inversion IHisToken'.",
            "VernacExtend",
            "f7c54ae735369c5199dd9fb23f8d7faea2f682be"
        ],
        [
            "simpl minus.",
            "VernacExtend",
            "11a89d7124a246240a56b6051428b4d104562673"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite <- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition split_token (n:nat) (tok:t) : t * t := match n with | O => (bot,tok) | S n' => (exist (fun x => canonicalTree x) (mkCanon (split_tok1 n' (proj1_sig tok))) (mkCanon_correct _) ,exist (fun x => canonicalTree x) (mkCanon (split_tok2 n' (proj1_sig tok))) (mkCanon_correct _) ) end.",
            "VernacDefinition",
            "4295e3eaf2befc0ce17eeee50ff66b6eb9fb6968"
        ],
        [
            "Lemma Eq_Ord : forall x y, shareTreeEq x y -> shareTreeOrd x y.",
            "VernacStartTheoremProof",
            "c015aaa9b5983de5e59cf0e924ec413b0c8eb7cc"
        ],
        [
            "unfold shareTreeEq; intuition.",
            "VernacExtend",
            "45ea87166cde0b3f46330d4987d4fa3ad52236ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_token_correct : forall n1 n2 tok tok1 tok2, isToken tok (n1+n2) -> split_token n1 tok = (tok1,tok2) -> isToken tok1 n1 /\\ isToken tok2 n2 /\\ join tok1 tok2 tok.",
            "VernacStartTheoremProof",
            "3c2eec8826972c066a7e42ff2db792a7748b5d29"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct tok as [tok Ht0].",
            "VernacExtend",
            "26e7f57c29d42cb1fff9ceb3983052b88ed7c814"
        ],
        [
            "destruct tok1 as [tok1 Ht1].",
            "VernacExtend",
            "b8203c7c2cc4abef46209db3eac9063273dcf425"
        ],
        [
            "destruct tok2 as [tok2 Ht2].",
            "VernacExtend",
            "bbd3ef039187e59ce993c2b2e5a5594e49da5930"
        ],
        [
            "unfold isToken in *.",
            "VernacExtend",
            "c625cb8ba02989f1a2ed68a5de16f261569e323e"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "unfold split_token in H0.",
            "VernacExtend",
            "cb79effe0f2fe627f7f18820dea89b3aac8129c1"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "destruct n1; inv H0; simpl; intuition.",
            "VernacExtend",
            "18a9df01aadec5ce9f38301f31641a4cbe7147b2"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "hnf; split; simpl.",
            "VernacExtend",
            "4352e034e95e665b844071ce69b93d52ba2b465b"
        ],
        [
            "unfold glb; simpl.",
            "VernacExtend",
            "901d1ebafd1393d3f481950d8948e9474becae46"
        ],
        [
            "unfold BA.glb; simpl.",
            "VernacExtend",
            "c503d2679594490780b5338b9922346a0fbc147d"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "unfold lub; simpl.",
            "VernacExtend",
            "7f81292c55a040f11f90ed3e37984a02efc595c6"
        ],
        [
            "unfold BA.lub; simpl.",
            "VernacExtend",
            "1765fdc38957d68dc7dba3bb7bb5dd495fbb490c"
        ],
        [
            "apply canonTree_eq; simpl; auto.",
            "VernacExtend",
            "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
        ],
        [
            "symmetry; apply canonicalUnique; auto.",
            "VernacExtend",
            "79ea6d490690ed475739a5e90bb821da0d077a57"
        ],
        [
            "assert (isToken' (split_tok1 n1 tok) (S n1)).",
            "VernacExtend",
            "ead33c8366cbe4340dd8574187dffcf3d83d244c"
        ],
        [
            "eapply split_tok1_correct; eauto.",
            "VernacExtend",
            "4c24cf1680a30bd8493f64e77d87c4f4f4815022"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "replace (mkCanon (split_tok1 n1 tok)) with (split_tok1 n1 tok); auto.",
            "VernacExtend",
            "8f0dc82ad588d43d28c2a629bb43607cd49d750b"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isToken_canon; eauto.",
            "VernacExtend",
            "860f375cd14a9b73367b9563caee29bd32f137e2"
        ],
        [
            "replace n2 with ((S n1 + n2) - S n1)%nat by omega.",
            "VernacExtend",
            "e81e5aea851f2a26a3e9f5b17d7c1252da726836"
        ],
        [
            "eapply split_tok2_correct; auto.",
            "VernacExtend",
            "aa492c696d847fbbb8d1f2f9c7c5e4a6e9d37241"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "hnf; simpl; split.",
            "VernacExtend",
            "e24aba0e1246c86619046e2301cbc7e2cefe8643"
        ],
        [
            "unfold glb; unfold BA.glb; simpl.",
            "VernacExtend",
            "4361b85671611496ee875ba0fe4c03ba5d88c664"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)).",
            "VernacExtend",
            "7dbe0ed82f85ee39ed2d431fbbb61a43f164e1a8"
        ],
        [
            "apply mkCanon_test2.",
            "VernacExtend",
            "adcadae0413fcbf97112669bccbe7c535701119d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree (split_tok1 n1 tok) (split_tok2 n1 tok)).",
            "VernacExtend",
            "07fc6257f45115084e1bdcc8708f44f3dfeb701d"
        ],
        [
            "apply Eq_Ord.",
            "VernacExtend",
            "18530ba08a35fdff8a7b32c01a1043d758923189"
        ],
        [
            "apply intersect_cong.",
            "VernacExtend",
            "4b77c5399dc4797ddbb16dbbd5a4a898200c672b"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply split_tok_glb.",
            "VernacExtend",
            "518c056c06d1aa0bea078b6b0f3caeca1a65a6ea"
        ],
        [
            "apply falseLeaf_bottom.",
            "VernacExtend",
            "b17e7267278367a8f760434f935f2cd8b9283613"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "pattern tok at 3.",
            "VernacExtend",
            "c860d9f00239c739e404133fcde40d26b94c123a"
        ],
        [
            "replace tok with (mkCanon tok).",
            "VernacExtend",
            "9a1fe1d1943dcb7b3232b4d3391f53ad31809511"
        ],
        [
            "apply mkCanon_test2.",
            "VernacExtend",
            "adcadae0413fcbf97112669bccbe7c535701119d"
        ],
        [
            "apply shareTreeEq_trans with (union_tree (split_tok1 n1 tok) (split_tok2 n1 tok)).",
            "VernacExtend",
            "0eb45603c8fd550b9ae6a52e9686d53967f683ea"
        ],
        [
            "apply union_cong.",
            "VernacExtend",
            "5e39797d567c8d4c7818f3252c434a7583a0aa43"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply mkCanon_eq.",
            "VernacExtend",
            "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply split_tok_lub.",
            "VernacExtend",
            "f8089c5460549d98a1dbf28dde53062061825b24"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint new_fac (n:nat) {struct n} : ShareTree := match n with | O => Node (Leaf false) (Leaf true) | S n' => Node (Leaf false) (new_fac n') end.",
            "VernacFixpoint",
            "22ebb6a266acfe54f1c0bb93719c10b031287f39"
        ],
        [
            "Fixpoint create_tok1 (n:nat) (x:ShareTree) {struct x} : ShareTree := match x with | Node (Leaf true) t2 => match n with | O => Node (Leaf false) t2 | S n' => Node (Leaf false) (create_tok1 n' t2) end | Node (Leaf false) t2 => Node (Leaf false) (create_tok1 n t2) | Leaf true => new_fac n | _ => x end.",
            "VernacFixpoint",
            "f93f06e969537801096cb94d8fda2068137703eb"
        ],
        [
            "Fixpoint create_tok2 (n:nat) (x:ShareTree) {struct x} : ShareTree := match x with | Node (Leaf true) t2 => match n with | O => Node (Leaf true) (Leaf false) | S n' => Node (Leaf true) (create_tok2 n' t2) end | Node (Leaf false) t2 => Node (Leaf false) (create_tok2 n t2) | Leaf true => comp_tree (new_fac n) | _ => Leaf false end.",
            "VernacFixpoint",
            "ad4bb354de6377580fb703da827f013c8d067de1"
        ],
        [
            "Lemma create_tok1_correct : forall fac m n, isTokenFactory' fac n -> isTokenFactory' (create_tok1 m fac) (S m + n).",
            "VernacStartTheoremProof",
            "9959c99b6758c404e7e483383764e2a64997d7ef"
        ],
        [
            "induction fac; simpl; intros.",
            "VernacExtend",
            "1a986c8baed30770d7922113b890497fc8e0740f"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "induction m; simpl.",
            "VernacExtend",
            "8eeca9e02ca7b585e952baf1eea0278de04f5480"
        ],
        [
            "constructor; constructor.",
            "VernacExtend",
            "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "inv H; simpl.",
            "VernacExtend",
            "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
        ],
        [
            "destruct m.",
            "VernacExtend",
            "8d29a39ed817a734f6646f7b42c80e41363356d4"
        ],
        [
            "constructor; simpl; auto.",
            "VernacExtend",
            "f572462624348d3b5055d4778fd188bcf617fb94"
        ],
        [
            "constructor; simpl.",
            "VernacExtend",
            "dedfc8791248d9f0998b0bf2378e59b81a2e0146"
        ],
        [
            "apply (IHfac2 m) in H3; auto.",
            "VernacExtend",
            "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
        ],
        [
            "constructor; simpl.",
            "VernacExtend",
            "dedfc8791248d9f0998b0bf2378e59b81a2e0146"
        ],
        [
            "apply (IHfac2 m) in H3; auto.",
            "VernacExtend",
            "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
        ],
        [
            "replace (m + S n0)%nat with (S m + n0)%nat by omega; auto.",
            "VernacExtend",
            "7d7baf23dda5d3bf1da5af0891da0e106daf2fac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma create_tok2_correct : forall fac m n, isTokenFactory' fac n -> isToken' (create_tok2 m fac) (S m).",
            "VernacStartTheoremProof",
            "0836f8ccd80b8e387ed55fb5136143c7f5382e4c"
        ],
        [
            "induction fac; intros.",
            "VernacExtend",
            "3483bdac1458a4c8ffff13df121a5d5365938406"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction m; simpl; auto.",
            "VernacExtend",
            "fef957ed452ac0981dd5620d82fa8cb3b652f75b"
        ],
        [
            "constructor; constructor.",
            "VernacExtend",
            "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "inv H; simpl.",
            "VernacExtend",
            "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
        ],
        [
            "destruct m.",
            "VernacExtend",
            "8d29a39ed817a734f6646f7b42c80e41363356d4"
        ],
        [
            "constructor; constructor.",
            "VernacExtend",
            "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply (IHfac2 m) in H3; auto.",
            "VernacExtend",
            "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply (IHfac2 m) in H3; auto.",
            "VernacExtend",
            "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma create_tok_lub : forall fac n, shareTreeEq fac (union_tree (create_tok1 n fac) (create_tok2 n fac)).",
            "VernacStartTheoremProof",
            "186b06a0c8fcc327cfac2b34bd62bfaf6c4b43d3"
        ],
        [
            "induction fac; simpl; intros; auto.",
            "VernacExtend",
            "f69dc3e1b47cb454a9c812313e9c81c0e1b754e0"
        ],
        [
            "induction n; simpl.",
            "VernacExtend",
            "1f285429454cbe9bad08c3e1d2fa969e99890bea"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)).",
            "VernacExtend",
            "b8d7b8d6cec9bf9d3c3b81f4be1fb67721b15a6c"
        ],
        [
            "split; do 3 constructor; auto.",
            "VernacExtend",
            "b308734eaa7d000c09471aa0407488989f09753f"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "destruct fac1; simpl.",
            "VernacExtend",
            "002c95641af493fe98ea69129866a3945ded0b01"
        ],
        [
            "destruct b; simpl.",
            "VernacExtend",
            "bc673f83b7fadb69a2678507bb22b8ff82ac3809"
        ],
        [
            "destruct n; simpl.",
            "VernacExtend",
            "6554f156164019d92e1907ce49ab9159d733a0bb"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "rewrite union_commute; simpl; auto.",
            "VernacExtend",
            "f018b66cd4a39d59c01b8f90c8b118d2bc233471"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "apply shareTreeEq_refl.",
            "VernacExtend",
            "257253fe9b06425e2382913bc17d450faf5d3889"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma create_tok_glb : forall fac n, shareTreeOrd (intersect_tree (create_tok1 n fac) (create_tok2 n fac)) (Leaf false).",
            "VernacStartTheoremProof",
            "d776d79923f7df1d7320f99c1cd656cfe1c1975d"
        ],
        [
            "induction fac; simpl; intros; auto.",
            "VernacExtend",
            "f69dc3e1b47cb454a9c812313e9c81c0e1b754e0"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "induction n; simpl; auto.",
            "VernacExtend",
            "e97dceb16245749e91243b27d3fd5ddc89e99bdd"
        ],
        [
            "destruct fac1; simpl; auto.",
            "VernacExtend",
            "833e26c0b2c9e2d92026a74f31bfbefd6e880aff"
        ],
        [
            "destruct b; simpl; auto.",
            "VernacExtend",
            "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
        ],
        [
            "destruct n; simpl; auto.",
            "VernacExtend",
            "1e3544c1db38cf9d3b82500db7d90f24bce9aeea"
        ],
        [
            "do 2 constructor; auto.",
            "VernacExtend",
            "e183be6e1e0bceb5835a789a335800bfc25e6ac5"
        ],
        [
            "rewrite intersect_commute; simpl; auto.",
            "VernacExtend",
            "61888a9a57b2b322bc396e05d172991fe380e421"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition create_token (n:nat) (fac:t) : t*t := match n with | O => (fac,bot) | S n' => (exist (fun x => canonicalTree x) (mkCanon (create_tok1 n' (proj1_sig fac))) (mkCanon_correct _), exist (fun x => canonicalTree x) (mkCanon (create_tok2 n' (proj1_sig fac))) (mkCanon_correct _)) end.",
            "VernacDefinition",
            "ad2b2a516f379611c10bfeb9ed59011b2748f928"
        ],
        [
            "Lemma create_token_correct : forall fac fac' tok x n, create_token n fac = (fac',tok) -> isTokenFactory fac x -> isTokenFactory fac' (n+x) /\\ isToken tok n /\\ join fac' tok fac.",
            "VernacStartTheoremProof",
            "198e41e7b4b6931adec9b3abeaa4196636fd56ba"
        ],
        [
            "intros; destruct n; simpl in H; inv H; simpl; intuition.",
            "VernacExtend",
            "d5d8c67b2c1d3594f84df760c59adc318a04553a"
        ],
        [
            "hnf; constructor.",
            "VernacExtend",
            "e464a633469a29fff833e6be498ea642719ea08f"
        ],
        [
            "split; [ apply glb_bot | apply lub_bot ].",
            "VernacExtend",
            "d20864cee0a4d728a178bd72bd9e1900c78866f1"
        ],
        [
            "hnf; simpl.",
            "VernacExtend",
            "4267e796fe98780d5775d90b490e2b3e0222d364"
        ],
        [
            "destruct fac as [fac H]; simpl.",
            "VernacExtend",
            "6916f53547153d01d843f2c26f49dfbc5b2d201f"
        ],
        [
            "assert (isTokenFactory' (create_tok1 n fac) (S (n+x))).",
            "VernacExtend",
            "2beb9da4ff180c189d8e9fb62750ce67d1d81217"
        ],
        [
            "apply create_tok1_correct; auto.",
            "VernacExtend",
            "f01da68f780cb5c5e88ed8fa89d3d5735aae9526"
        ],
        [
            "replace (mkCanon (create_tok1 n fac)) with (create_tok1 n fac); auto.",
            "VernacExtend",
            "3f6168d39f490ad9685d0ce1b7d1df740ccad5ce"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isTokenFactory_canon; eauto.",
            "VernacExtend",
            "8bf4a665f1919b66f912e2f1ccf34a7289858d72"
        ],
        [
            "hnf.",
            "VernacExtend",
            "93c9be61208bb2956fb47b51f12123e34260e667"
        ],
        [
            "destruct fac as [fac H]; simpl.",
            "VernacExtend",
            "6916f53547153d01d843f2c26f49dfbc5b2d201f"
        ],
        [
            "assert (isToken' (create_tok2 n fac) (S n)).",
            "VernacExtend",
            "e6b797ab0e63bfa2b41667893c439001535295b7"
        ],
        [
            "eapply create_tok2_correct; eauto.",
            "VernacExtend",
            "573bcbff45539b19e97ed65822bb02eba65fb683"
        ],
        [
            "replace (mkCanon (create_tok2 n fac)) with (create_tok2 n fac); auto.",
            "VernacExtend",
            "a2e0e56f6fa6c04ce99925b615c8cbf8f73a7927"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isToken_canon; eauto.",
            "VernacExtend",
            "860f375cd14a9b73367b9563caee29bd32f137e2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)).",
            "VernacExtend",
            "7dbe0ed82f85ee39ed2d431fbbb61a43f164e1a8"
        ],
        [
            "apply mkCanon_test2.",
            "VernacExtend",
            "adcadae0413fcbf97112669bccbe7c535701119d"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "apply shareTreeOrd_trans with (intersect_tree (create_tok1 n (proj1_sig fac)) (create_tok2 n (proj1_sig fac))).",
            "VernacExtend",
            "453eb6f4380655cd367d6ed0c19761f01b362a7c"
        ],
        [
            "apply Eq_Ord.",
            "VernacExtend",
            "18530ba08a35fdff8a7b32c01a1043d758923189"
        ],
        [
            "apply intersect_cong; apply shareTreeEq_sym; auto.",
            "VernacExtend",
            "fe09f6fa82cebb64a5f132e99f1e7d7ff39900d5"
        ],
        [
            "apply create_tok_glb.",
            "VernacExtend",
            "89135b103e4bda735cae0bcb193a59066e6a3d0d"
        ],
        [
            "apply canonTree_eq; simpl.",
            "VernacExtend",
            "04cf669704d2c6bc8465fbde983de3a1b877814d"
        ],
        [
            "destruct fac; simpl.",
            "VernacExtend",
            "aea9190d6552ec20d83d35e196cf955dc1d2d40e"
        ],
        [
            "pattern x0 at 3.",
            "VernacExtend",
            "82d9b28ee85f1c1b33cfb41c9e03fa7f2e5973bb"
        ],
        [
            "replace x0 with (mkCanon x0).",
            "VernacExtend",
            "1245302068399f95260d6878fa1e0b3df2274406"
        ],
        [
            "apply mkCanon_test2.",
            "VernacExtend",
            "adcadae0413fcbf97112669bccbe7c535701119d"
        ],
        [
            "apply shareTreeEq_trans with (union_tree (create_tok1 n x0) (create_tok2 n x0)).",
            "VernacExtend",
            "acfd95aedd271b5138fb6add9a8407511a3770d0"
        ],
        [
            "apply union_cong; apply shareTreeEq_sym; auto.",
            "VernacExtend",
            "fa0f51d450dcf4213d4e5e734fb15c7222ef2761"
        ],
        [
            "apply shareTreeEq_sym.",
            "VernacExtend",
            "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
        ],
        [
            "apply create_tok_lub.",
            "VernacExtend",
            "5407397857b8342771df1f4718d9281c26f5152d"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Open Scope nat_scope.",
            "VernacOpenCloseScope",
            "7386604700c7eb05ef0ae2947828bc909568dab7"
        ],
        [
            "Lemma fac_tok_classification : forall fac n, isTokenFactory' fac n -> forall tok m, isToken' tok m -> shareTreeOrd (intersect_tree fac tok) (Leaf false) -> ( n = m -> shareTreeEq (union_tree tok fac) (Leaf true)) /\\ ( n < m -> False ) /\\ ( n > m -> shareTreeEq (union_tree tok fac) (Leaf true) -> False).",
            "VernacStartTheoremProof",
            "b7e4f7117f44fa61fbf7ce53a59d0f086a6ec4f2"
        ],
        [
            "intros fac n H; induction H; simpl; intuition.",
            "VernacExtend",
            "6c1d4507e694130ec56cfc428ebe49c67cdb2e69"
        ],
        [
            "subst m; inv H.",
            "VernacExtend",
            "0b38b0c84c21b73a03fec8fa18c51a33d852ac36"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "invert_ord; discriminate.",
            "VernacExtend",
            "862761780d4c1999372938ffed6dc7238f757546"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "clear -H2 H7.",
            "VernacExtend",
            "c5fa43f34a9b1ccfa10555cd5c9b9122ab16e67c"
        ],
        [
            "revert n H2 H7; induction t0; simpl; intros.",
            "VernacExtend",
            "dec0f56ba671c918d8e4276f809996ac7e50e5c9"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "invert_ord; discriminate.",
            "VernacExtend",
            "862761780d4c1999372938ffed6dc7238f757546"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "eapply IHt0_2; eauto.",
            "VernacExtend",
            "5f3ad2674a061da2f58a60f349d1e35562a0d125"
        ],
        [
            "subst m.",
            "VernacExtend",
            "9ba78b8037512180a4349842defa7f5fabdd6010"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "invert_ord; discriminate.",
            "VernacExtend",
            "862761780d4c1999372938ffed6dc7238f757546"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
            "VernacExtend",
            "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
        ],
        [
            "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)); auto.",
            "VernacExtend",
            "19460eef0683f7855d6ac08762f78b29f8dc180a"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "invert_ord; discriminate.",
            "VernacExtend",
            "862761780d4c1999372938ffed6dc7238f757546"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H3 H8) as [? [? ?]].",
            "VernacExtend",
            "08a21abcb5fc8aeac2b29bf1d545b8f9b7023a95"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "rewrite union_commute in H3.",
            "VernacExtend",
            "6cf9abedd7ac815379720be314f9ce9fe9043e35"
        ],
        [
            "simpl in H3.",
            "VernacExtend",
            "2a96f120ac764efacadc60b978d01343f60aafa0"
        ],
        [
            "destruct tok; try destruct b; invert_ord; try discriminate.",
            "VernacExtend",
            "95a7beca4f507bec707a1f50c5750a2256045c8d"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "clear -H H11.",
            "VernacExtend",
            "02f2a803b9bdb3f844562ed5e7a7006391c58a87"
        ],
        [
            "revert n H H11; induction t0; simpl; intros.",
            "VernacExtend",
            "c982150c2e28c7e8662b22b755abaae821c45056"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H; invert_ord; eauto.",
            "VernacExtend",
            "0a1461ccabb45a36447c0c819683e3c7da4d3a2d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "inv H0; invert_ord; try discriminate.",
            "VernacExtend",
            "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H7 H10) as [? [? ?]].",
            "VernacExtend",
            "220b883907cb3fef38f23fff01c851a8c8e922a1"
        ],
        [
            "apply H6; auto.",
            "VernacExtend",
            "991b52fa2aa4a421e14189d20a004b7bf8b46321"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "rewrite union_commute; auto.",
            "VernacExtend",
            "85ab74937e237541cb98dba73d202a6899d76470"
        ],
        [
            "subst m.",
            "VernacExtend",
            "9ba78b8037512180a4349842defa7f5fabdd6010"
        ],
        [
            "inv H0; invert_ord; try discriminate.",
            "VernacExtend",
            "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
            "VernacExtend",
            "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
        ],
        [
            "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)); auto.",
            "VernacExtend",
            "19460eef0683f7855d6ac08762f78b29f8dc180a"
        ],
        [
            "apply Node_Eq; auto.",
            "VernacExtend",
            "489a9278b7878eb4b3f62f2d28e3984d060261ad"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct(IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
            "VernacExtend",
            "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
        ],
        [
            "elim H1; auto.",
            "VernacExtend",
            "d50026b5dc31929f05ffbd310861b147378ba238"
        ],
        [
            "destruct tok; try destruct b; invert_ord; try discriminate.",
            "VernacExtend",
            "95a7beca4f507bec707a1f50c5750a2256045c8d"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H6 H8) as [? [? ?]].",
            "VernacExtend",
            "947b4bff4fa0f3268356c6427ff1a43ffe6afdb4"
        ],
        [
            "elim H1; omega.",
            "VernacExtend",
            "756e83e787fe0905fefcf647f3461a0dedc88b29"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H6 H8) as [? [? ?]].",
            "VernacExtend",
            "947b4bff4fa0f3268356c6427ff1a43ffe6afdb4"
        ],
        [
            "elim H1; omega.",
            "VernacExtend",
            "756e83e787fe0905fefcf647f3461a0dedc88b29"
        ],
        [
            "rewrite union_commute in H3; simpl in H3.",
            "VernacExtend",
            "3080be42a9cc0e21d026fd2d67d95bac36ae76a9"
        ],
        [
            "inv H0; invert_ord; try discriminate.",
            "VernacExtend",
            "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
        ],
        [
            "destruct (IHisTokenFactory' _ _ H4 H10) as [? [? ?]].",
            "VernacExtend",
            "d06828edb97969ee82671f7f6067bdad230c5669"
        ],
        [
            "elim H7; [omega |].",
            "VernacExtend",
            "d08edb8022c85f0616551b9aa3f4614636684ccd"
        ],
        [
            "rewrite union_commute; auto.",
            "VernacExtend",
            "85ab74937e237541cb98dba73d202a6899d76470"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma token_nonbot : forall tok n, isToken' tok n -> n > 0 -> shareTreeOrd tok (Leaf false) -> False.",
            "VernacStartTheoremProof",
            "1fbe300ccacfb57bdb0a71ae910a25a2342a83fb"
        ],
        [
            "intros tok n H; induction H; intros; invert_ord; try discriminate; eauto.",
            "VernacExtend",
            "79617cf0813e97a0d2afcdfbfea4e7b531f06290"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tokens_nonfull : forall tok1 n, isToken' tok1 n -> forall tok2 m, isToken' tok2 m -> shareTreeOrd (Leaf true) (union_tree tok1 tok2) -> False.",
            "VernacStartTheoremProof",
            "2dce30a2328ce9bf842f52c562bb48415ed1a5b2"
        ],
        [
            "intros tok1 n H; induction H; simpl; intros.",
            "VernacExtend",
            "eca834e7f61a45d674a552785539dc4ef0285e42"
        ],
        [
            "induction H; invert_ord; try discriminate; auto.",
            "VernacExtend",
            "64062be1409f7eab2976816391197d40ccd956ac"
        ],
        [
            "inv H0; invert_ord; eauto.",
            "VernacExtend",
            "adbc5313583ee8f8bc51b8bced315a3a577ae0f9"
        ],
        [
            "clear -H H6.",
            "VernacExtend",
            "cb29de87fded7f7fe1985059438594c78a244009"
        ],
        [
            "induction H; invert_ord; try discriminate; auto.",
            "VernacExtend",
            "64062be1409f7eab2976816391197d40ccd956ac"
        ],
        [
            "inv H0; invert_ord; eauto.",
            "VernacExtend",
            "adbc5313583ee8f8bc51b8bced315a3a577ae0f9"
        ],
        [
            "clear -H H6.",
            "VernacExtend",
            "cb29de87fded7f7fe1985059438594c78a244009"
        ],
        [
            "induction H; invert_ord; try discriminate; auto.",
            "VernacExtend",
            "64062be1409f7eab2976816391197d40ccd956ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tokenFactory_nonbot : forall fac n, isTokenFactory' fac n -> shareTreeOrd fac (Leaf false) -> False.",
            "VernacStartTheoremProof",
            "483fc02e7870e95585f97866ee37f74c247d6059"
        ],
        [
            "intros fac n H; induction H; intros; invert_ord; try discriminate; eauto.",
            "VernacExtend",
            "e714cebe2c7a5c2c6ae544fcb7f88c97a9bfc9e2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma absorbToken : forall fac fac' tok x n, isTokenFactory fac' (n+x) -> isToken tok n -> join fac' tok fac -> isTokenFactory fac x.",
            "VernacStartTheoremProof",
            "695e7a14cea16bf62903f7e5e934532c260b08af"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct fac as [fac ?].",
            "VernacExtend",
            "dddec3c99ac28662e5042f1544cee4dea229d1a7"
        ],
        [
            "destruct fac' as [fac' ?].",
            "VernacExtend",
            "6c654f805d119b40a45e414d6aa25d04845dcb23"
        ],
        [
            "destruct tok as [tok ?].",
            "VernacExtend",
            "1f5dd930b3516f6150f10eb515872cdf21586b71"
        ],
        [
            "unfold isToken, isTokenFactory in *.",
            "VernacExtend",
            "54340f2cb4bf23cdc4d72729f7e854d7ffca8200"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "destruct H1; simpl in *.",
            "VernacExtend",
            "9679f53c12e4c95366b0728d5241ac62d6234764"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "clear c c0 c1.",
            "VernacExtend",
            "6619b222dbc69416d635dccd08acd61c9afb9c75"
        ],
        [
            "assert (shareTreeOrd (intersect_tree fac' tok) (Leaf false)).",
            "VernacExtend",
            "1bfbab1d212dfdeec4791870be29bfcbc79633ef"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "apply Eq_Ord; auto.",
            "VernacExtend",
            "6d2d900d05a4993779ea41cefefaf36fba22b2f3"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "revert tok x n H H0 H1; induction fac'; simpl; intros.",
            "VernacExtend",
            "3676fa9ba03246ff7a72d9be2134a9465f9c4265"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "replace x with O by omega.",
            "VernacExtend",
            "21198e10f4ab3abec58dcb2ee795b4b17a1623bc"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "replace (mkCanon (Node fac'1 fac'2)) with (Node fac'1 fac'2); auto.",
            "VernacExtend",
            "c1a8d22087cd644708aac513acb9483b6aa639cf"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isTokenFactory_canon; eauto.",
            "VernacExtend",
            "8bf4a665f1919b66f912e2f1ccf34a7289858d72"
        ],
        [
            "rewrite intersect_commute in H1.",
            "VernacExtend",
            "6022d0699df2c20f208b13f7e655167cc4e0b121"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "invert_ord; discriminate.",
            "VernacExtend",
            "862761780d4c1999372938ffed6dc7238f757546"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
            "VernacExtend",
            "2b244a42176933171301db368bd0273883d74c2d"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct (fac_tok_classification fac'2 (n0+S x)) with t0 n0 as [? [? ?]]; auto.",
            "VernacExtend",
            "cad767290d9e1316e5282a6c323f48be86b041a0"
        ],
        [
            "elim H5; [omega|].",
            "VernacExtend",
            "89eb7ad3bd87b6c75d179773c498cc5c60cf452e"
        ],
        [
            "apply mkCanon_test; simpl; auto.",
            "VernacExtend",
            "07a3287c188ae914d69a33d86d0ac5a2709e8de6"
        ],
        [
            "rewrite union_commute; auto.",
            "VernacExtend",
            "85ab74937e237541cb98dba73d202a6899d76470"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H.",
            "VernacExtend",
            "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
        ],
        [
            "apply mkCanon_test in H.",
            "VernacExtend",
            "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (shareTreeOrd fac'2 (Leaf false)).",
            "VernacExtend",
            "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
            "VernacExtend",
            "a9ac05f2c7a7867ab352b7930ee273f601abb517"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "elim (tokenFactory_nonbot fac'2 (n0+x)); auto.",
            "VernacExtend",
            "9ffc519a68141f04bb2d59cd3c128a24faed12e5"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "destruct (fac_tok_classification fac'2 (n0+0)) with t0 n0 as [? [? ?]]; auto.",
            "VernacExtend",
            "ebe129a57a5fa7ef3603ccba606bb21f1349cd7b"
        ],
        [
            "spec H0; [ omega |].",
            "VernacExtend",
            "49a5f196182784e8d969dd9e962c567f1ef57a18"
        ],
        [
            "apply mkCanon_test2 in H0.",
            "VernacExtend",
            "0fe44205c6bf05c60a7f9cba9a00650217914984"
        ],
        [
            "rewrite union_commute in H0.",
            "VernacExtend",
            "68ddb41d93876d0329dad42753820a56c5d3035e"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "eapply IHfac'2; eauto.",
            "VernacExtend",
            "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
        ],
        [
            "invert_ord; auto.",
            "VernacExtend",
            "e0f4bbd7c0e231287c9dbc20f6ff470269b6e650"
        ],
        [
            "rewrite intersect_commute in H1.",
            "VernacExtend",
            "6022d0699df2c20f208b13f7e655167cc4e0b121"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
            "VernacExtend",
            "2b244a42176933171301db368bd0273883d74c2d"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct (fac_tok_classification fac'2 (S (n0+S x))) with t0 (S n0) as [? [? ?]]; auto.",
            "VernacExtend",
            "23fbbd7bce29f614a25861ec8346eb85f6386192"
        ],
        [
            "elim H5; [ omega |].",
            "VernacExtend",
            "89eb7ad3bd87b6c75d179773c498cc5c60cf452e"
        ],
        [
            "apply mkCanon_test.",
            "VernacExtend",
            "5ac331f93277b882fd79a70772c9877cf7aa5c8b"
        ],
        [
            "rewrite union_commute.",
            "VernacExtend",
            "d885c24d3f94d08eb13f83b39d536446e5905fb9"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H.",
            "VernacExtend",
            "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
        ],
        [
            "apply mkCanon_test in H.",
            "VernacExtend",
            "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (shareTreeOrd fac'2 (Leaf false)).",
            "VernacExtend",
            "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
            "VernacExtend",
            "a9ac05f2c7a7867ab352b7930ee273f601abb517"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "elim (tokenFactory_nonbot fac'2 (S (n0+x))); auto.",
            "VernacExtend",
            "7cc9ddcda4c3a55a338c2402233640dab941c0ba"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "destruct (fac_tok_classification fac'2 (S (n0 + 0))) with t0 (S n0) as [? [? ?]]; auto.",
            "VernacExtend",
            "24584d7d02cad1b44429e06a1bd98795d7aa353e"
        ],
        [
            "spec H0; [ omega |].",
            "VernacExtend",
            "49a5f196182784e8d969dd9e962c567f1ef57a18"
        ],
        [
            "apply mkCanon_test2 in H0.",
            "VernacExtend",
            "0fe44205c6bf05c60a7f9cba9a00650217914984"
        ],
        [
            "rewrite union_commute in H0; rewrite H in H0.",
            "VernacExtend",
            "c22fb80472be6f935930914f617ecc1e73138ae2"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "eapply IHfac'2; eauto.",
            "VernacExtend",
            "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
        ],
        [
            "invert_ord; auto.",
            "VernacExtend",
            "e0f4bbd7c0e231287c9dbc20f6ff470269b6e650"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "destruct (fac_tok_classification fac'2 (n0 + 0)) with t0 (S n0) as [? [? ?]]; auto.",
            "VernacExtend",
            "f51d58f76cea229265f13d3b9365195bfce792fa"
        ],
        [
            "elim H0; omega.",
            "VernacExtend",
            "d598a79f92799c147ed9a6808edf50e23adf797e"
        ],
        [
            "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
            "VernacExtend",
            "2b244a42176933171301db368bd0273883d74c2d"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "eapply IHfac'2; eauto.",
            "VernacExtend",
            "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
        ],
        [
            "replace (S n0 + x) with (n0 + S x) by omega; auto.",
            "VernacExtend",
            "5b7d37b09965a725e19bc432b06a4d3faf11bfe4"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H.",
            "VernacExtend",
            "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
        ],
        [
            "apply mkCanon_test in H.",
            "VernacExtend",
            "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (shareTreeOrd fac'2 (Leaf false)).",
            "VernacExtend",
            "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
            "VernacExtend",
            "a9ac05f2c7a7867ab352b7930ee273f601abb517"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "elim (tokenFactory_nonbot fac'2 (n0 + S x)); auto.",
            "VernacExtend",
            "e96a684444a0e12ca87d2f92e3796acbf05df1e2"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "eapply IHfac'2; eauto.",
            "VernacExtend",
            "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
        ],
        [
            "replace (S n0 + x) with (n0 + S x) by omega; auto.",
            "VernacExtend",
            "5b7d37b09965a725e19bc432b06a4d3faf11bfe4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mergeToken : forall tok1 n1 tok2 n2 tok', isToken tok1 n1 -> isToken tok2 n2 -> join tok1 tok2 tok' -> isToken tok' (n1+n2).",
            "VernacStartTheoremProof",
            "c0afc5919c30d7ad9d8d772baf40074ad378b247"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct tok1 as [tok1 ?].",
            "VernacExtend",
            "63b2518033b80865e24754f7c80d9c16f80c49c7"
        ],
        [
            "destruct tok2 as [tok2 ?].",
            "VernacExtend",
            "c2d06bc027f2148e324897c1cad251e2cb3909a1"
        ],
        [
            "destruct tok' as [tok' ?].",
            "VernacExtend",
            "1e103fd1d66b2f3eeba3b8521f15d979216c35f7"
        ],
        [
            "unfold isToken in *; simpl in *.",
            "VernacExtend",
            "47b08ea51bee2df228c7ee0713f626654adcb0da"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "inv H1; inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "clear c c0 c1.",
            "VernacExtend",
            "6619b222dbc69416d635dccd08acd61c9afb9c75"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H4.",
            "VernacExtend",
            "200184b27913a477e6875d610225e2eb71b01518"
        ],
        [
            "apply mkCanon_test in H4.",
            "VernacExtend",
            "7360cbcd3ce0ca76089f089bb509bee2e1df01e8"
        ],
        [
            "destruct H4.",
            "VernacExtend",
            "9ae390e4b039d96b643e4c1e0cd28291b37e7b3e"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "revert tok2 n2 H0 H1.",
            "VernacExtend",
            "7e91aa2a1e966a76cc404854eecaeca1e5f02581"
        ],
        [
            "induction H; simpl; intros; invert_ord.",
            "VernacExtend",
            "c6c384c549501b939107c669fe480d5562dd4581"
        ],
        [
            "replace (mkCanon tok2) with tok2; auto.",
            "VernacExtend",
            "180971283d5c471c3988a392c169f5f3ed44b9e6"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isToken_canon; eauto.",
            "VernacExtend",
            "860f375cd14a9b73367b9563caee29bd32f137e2"
        ],
        [
            "induction H0; simpl; intros; invert_ord; try discriminate.",
            "VernacExtend",
            "5b905123f67dda126940c28f7d14a858b5be4d2c"
        ],
        [
            "replace (mkCanon t0) with t0.",
            "VernacExtend",
            "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
        ],
        [
            "inv H; simpl.",
            "VernacExtend",
            "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
        ],
        [
            "do 2 constructor.",
            "VernacExtend",
            "07211245421e12efccc5f1620fbfd6e44dd434a8"
        ],
        [
            "do 2 constructor.",
            "VernacExtend",
            "07211245421e12efccc5f1620fbfd6e44dd434a8"
        ],
        [
            "replace (n0+0) with n0 by omega; auto.",
            "VernacExtend",
            "100855d7c50746e11fce0e6f6dd006f98196bcc5"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "replace (n0+0) with n0 by omega; auto.",
            "VernacExtend",
            "100855d7c50746e11fce0e6f6dd006f98196bcc5"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isToken_canon; eauto.",
            "VernacExtend",
            "860f375cd14a9b73367b9563caee29bd32f137e2"
        ],
        [
            "case_eq (mkCanon (union_tree t0 t1)); intros.",
            "VernacExtend",
            "71301f9c7489e29f6702d8b1672e02534f41dd2f"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "change (Leaf true) with (mkCanon (Leaf true)) in H1.",
            "VernacExtend",
            "56d48766e5628ea5507322f66d0d8653f0668294"
        ],
        [
            "apply mkCanon_test in H1.",
            "VernacExtend",
            "72dcff2eab0b4e3ea0244a836d4eb9dae9cf5e7a"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "elim (tokens_nonfull _ _ H _ _ H0); auto.",
            "VernacExtend",
            "1fe6c1e05990dcb30d33bb94d0777ff24926dcfc"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H1.",
            "VernacExtend",
            "554dec5db62119bf64563a8fa5c579ca3897ddab"
        ],
        [
            "apply mkCanon_test in H1.",
            "VernacExtend",
            "72dcff2eab0b4e3ea0244a836d4eb9dae9cf5e7a"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "assert (shareTreeOrd t1 (Leaf false)).",
            "VernacExtend",
            "de76d85cd69333b4bba9b6cb9735e1f6a7f89c88"
        ],
        [
            "apply shareTreeOrd_trans with (union_tree t0 t1); auto.",
            "VernacExtend",
            "59286ad89a61b16e78564c39927d03dba5e9a4bf"
        ],
        [
            "rewrite union_commute.",
            "VernacExtend",
            "d885c24d3f94d08eb13f83b39d536446e5905fb9"
        ],
        [
            "apply union_upper_bound.",
            "VernacExtend",
            "c15cf2516a334d8e0e429ae7cd7535316adfae57"
        ],
        [
            "elim (token_nonbot t1 (S n0)); auto.",
            "VernacExtend",
            "8c0996931fa8d1966635db716a0f8d0828099b9f"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "apply IHisToken'; auto.",
            "VernacExtend",
            "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (mkCanon t0) with t0.",
            "VernacExtend",
            "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "do 2 constructor.",
            "VernacExtend",
            "07211245421e12efccc5f1620fbfd6e44dd434a8"
        ],
        [
            "replace (n+0) with n by omega; auto.",
            "VernacExtend",
            "fe4e771e08bf80fcb216f51ca1c32a682fe9c3a1"
        ],
        [
            "do 2 constructor.",
            "VernacExtend",
            "07211245421e12efccc5f1620fbfd6e44dd434a8"
        ],
        [
            "replace (n+0) with n by omega; auto.",
            "VernacExtend",
            "fe4e771e08bf80fcb216f51ca1c32a682fe9c3a1"
        ],
        [
            "apply canonicalUnique; auto.",
            "VernacExtend",
            "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
        ],
        [
            "eapply isToken_canon; eauto.",
            "VernacExtend",
            "860f375cd14a9b73367b9563caee29bd32f137e2"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case_eq (mkCanon (union_tree t0 t1)); intros.",
            "VernacExtend",
            "71301f9c7489e29f6702d8b1672e02534f41dd2f"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "change (Leaf true) with (mkCanon (Leaf true)) in H0.",
            "VernacExtend",
            "899bd573cccbe31fd57ca1989fd71298ee73798c"
        ],
        [
            "apply mkCanon_test in H0.",
            "VernacExtend",
            "7fabbbeac1deaa5472e366870fd0ec47c02f400c"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "elim (tokens_nonfull _ _ H _ _ H2); auto.",
            "VernacExtend",
            "f1bc5fd0d6919be6afd257c24895772873ef322e"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "replace (n + S n0) with (S n + n0) by omega.",
            "VernacExtend",
            "f6f7aecd8c254fd946d32d27abcbb4a57f6ea402"
        ],
        [
            "apply IHisToken'; auto.",
            "VernacExtend",
            "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "replace (n + S n0) with (S n + n0) by omega.",
            "VernacExtend",
            "f6f7aecd8c254fd946d32d27abcbb4a57f6ea402"
        ],
        [
            "apply IHisToken'; auto.",
            "VernacExtend",
            "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
        ],
        [
            "invert_ord.",
            "VernacExtend",
            "42fe6d4e4866cc4e34158c2c90438096392dbac4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case_eq (mkCanon (union_tree t0 t1)); intros.",
            "VernacExtend",
            "71301f9c7489e29f6702d8b1672e02534f41dd2f"
        ],
        [
            "destruct b.",
            "VernacExtend",
            "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
        ],
        [
            "change (Leaf true) with (mkCanon (Leaf true)) in H0.",
            "VernacExtend",
            "899bd573cccbe31fd57ca1989fd71298ee73798c"
        ],
        [
            "apply mkCanon_test in H0.",
            "VernacExtend",
            "7fabbbeac1deaa5472e366870fd0ec47c02f400c"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "elim (tokens_nonfull _ _ H _ _ H2); auto.",
            "VernacExtend",
            "f1bc5fd0d6919be6afd257c24895772873ef322e"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "apply IHisToken'; auto.",
            "VernacExtend",
            "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "apply IHisToken'; auto.",
            "VernacExtend",
            "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma factoryOverlap : forall f1 f2 n1 n2, isTokenFactory f1 n1 -> isTokenFactory f2 n2 -> glb f1 f2 <> bot.",
            "VernacStartTheoremProof",
            "da961a374eee329bd8d50807121da7aeb09cbda4"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "destruct f1 as [f1 ?].",
            "VernacExtend",
            "b6c2bb714d457fb87d81e46b181a0870e1de5b77"
        ],
        [
            "destruct f2 as [f2 ?].",
            "VernacExtend",
            "269fd6c7fc8e521c49d86d5956a3910d19068974"
        ],
        [
            "inv H1; hnf in H, H0.",
            "VernacExtend",
            "02e17ceb91be0d738d5c7744a960c8979e564759"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "change (Leaf false) with (mkCanon (Leaf false)) in H3.",
            "VernacExtend",
            "2dd1ce488ded48478df08285a8d18b62518b5367"
        ],
        [
            "apply mkCanon_test in H3.",
            "VernacExtend",
            "d802de40b996eb944201c3ef9f45247d78a99e1d"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "clear c c0 H2.",
            "VernacExtend",
            "29429a30f8c7a0c0c99c2ceeaa7b5e1443a7be8e"
        ],
        [
            "revert f2 n2 H0 H1.",
            "VernacExtend",
            "28e2f905ee9b3adec724368cfe382a009d4bd475"
        ],
        [
            "induction H; simpl; intros.",
            "VernacExtend",
            "b3d2fc5df2233b3d15b97f2e12d093021889751e"
        ],
        [
            "induction H0; simpl; invert_ord; try discriminate; auto.",
            "VernacExtend",
            "b604534c997be2e18db09b7c97a4dba6d71b0dd1"
        ],
        [
            "inv H0; invert_ord; try discriminate; eauto.",
            "VernacExtend",
            "3836ae55d1b2a4339733bc8367283f0904446a8b"
        ],
        [
            "inv H0; invert_ord; try discriminate; eauto.",
            "VernacExtend",
            "3836ae55d1b2a4339733bc8367283f0904446a8b"
        ],
        [
            "clear -H H6.",
            "VernacExtend",
            "cb29de87fded7f7fe1985059438594c78a244009"
        ],
        [
            "induction H; simpl; invert_ord; try discriminate; auto.",
            "VernacExtend",
            "d405dd9a7ea9484bb35320741f53a5650346e211"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullFactory : forall x, isTokenFactory x 0 <-> x = top.",
            "VernacStartTheoremProof",
            "7f64d3db57ae931c80c36173e38277cda6edd3ed"
        ],
        [
            "intros [x ?].",
            "VernacExtend",
            "123acfefdaed36c31f4a4f7516127a1cac006fa0"
        ],
        [
            "unfold isTokenFactory; simpl.",
            "VernacExtend",
            "6ac44472f0d5c5299808347a0e0852ad2c7841d6"
        ],
        [
            "split; intro H; inv H.",
            "VernacExtend",
            "cd54f1a935c0703fb85a555cccce118e17ff6709"
        ],
        [
            "apply canonTree_eq; auto.",
            "VernacExtend",
            "0faa9968474d42ef4b1c30502cfd28c68610cd31"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma identityToken : forall x, isToken x 0 <-> x = bot.",
            "VernacStartTheoremProof",
            "3722a80d025ca56a8611de651bf666a86b6ea482"
        ],
        [
            "intros [x ?].",
            "VernacExtend",
            "123acfefdaed36c31f4a4f7516127a1cac006fa0"
        ],
        [
            "unfold isToken; simpl.",
            "VernacExtend",
            "437f5ccab25c434bb3e076358c431f420e2b3f42"
        ],
        [
            "split; intro H; inv H.",
            "VernacExtend",
            "cd54f1a935c0703fb85a555cccce118e17ff6709"
        ],
        [
            "apply canonTree_eq; auto.",
            "VernacExtend",
            "0faa9968474d42ef4b1c30502cfd28c68610cd31"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nonidentityToken : forall x n, (n > 0)%nat -> isToken x n -> x <> bot.",
            "VernacStartTheoremProof",
            "bbbd00df6201f33e96ccf9653a1cf6150613c0f1"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "destruct x as [x ?].",
            "VernacExtend",
            "1327cdedb67ae081bd2d594f645a5e49c7c57d24"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "hnf in H0; simpl in H0.",
            "VernacExtend",
            "931c77ddcd4a190d6f33d581cc5b1d83eb75110d"
        ],
        [
            "inv H0; inv H.",
            "VernacExtend",
            "8a3cb710c637bb0f4e4690225ff7f35d609d735b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nonidentityFactory : forall x n, isTokenFactory x n -> x <> bot.",
            "VernacStartTheoremProof",
            "619e9c27405b69069ff31413f678543b0abb4c17"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "destruct x as [x ?].",
            "VernacExtend",
            "1327cdedb67ae081bd2d594f645a5e49c7c57d24"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "hnf in H.",
            "VernacExtend",
            "b998e5ae98dd847416f4f194f30407c3597ea052"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance EqDec_share : EqDec t := EqDec_canonTree.",
            "VernacInstance",
            "7e80468abe565254427bec231c5abb585bba15f1"
        ],
        [
            "Program Definition tree_decompose (ct : canonTree) :(canonTree * canonTree) := let (t, pf) := ct in match t with |Leaf b => (Leaf b, Leaf b) |Node t1 t2 => (t1 ,t2) end.",
            "VernacDefinition",
            "95220e251bdfdafe0f992904a431f78df7bbc31c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct pf.",
            "VernacExtend",
            "ea3b43004696f63e8850c4fbcd23f1da87044dae"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct pf.",
            "VernacExtend",
            "ea3b43004696f63e8850c4fbcd23f1da87044dae"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance decompose_tree : decomposible t := Decomposible tree_decompose.",
            "VernacInstance",
            "0471901f71fe524ae1e0e5d39e4b9705786fa562"
        ],
        [
            "Fixpoint tree_heightP (t : ShareTree) : nat := match t with | Leaf b => 0 | Node l r => (max (tree_heightP l) (tree_heightP r)) + 1 end.",
            "VernacFixpoint",
            "92b97bb492067b4ecf571c9d513db085da4bc13f"
        ],
        [
            "Definition tree_height (t : canonTree) := tree_heightP (proj1_sig t).",
            "VernacDefinition",
            "a65242f0bd5753092f0c2540fd10b044e59a3f96"
        ],
        [
            "Definition tree_height_zero (t : canonTree) : {tree_height t = 0} + {tree_height t <> 0}.",
            "VernacDefinition",
            "21a74a6918296fef1fa89fe84625b411a3db9be8"
        ],
        [
            "destruct t.",
            "VernacExtend",
            "03d3fc39431171b40684d8dff6748881af772fc7"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "unfold tree_height.",
            "VernacExtend",
            "73bd0d7a2a8cb56f8a44aefd6a760678b02f4bf7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite plus_comm in H.",
            "VernacExtend",
            "c98f948fd1624aa97b45ebb8d60598f2fec079ac"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance tree_heightable : heightable t := Heightable tree_height tree_height_zero.",
            "VernacInstance",
            "773f0ba01e3327e0899aad66737c5b87c508acde"
        ],
        [
            "Function unrel (t1 : t) (t2 : t) {measure tree_height t1} : t := match t1 with | exist _ (Leaf b) _ => t2 | _ => let (ltr1, rtr1) := decompose t1 in let (ltr2, rtr2) := decompose t2 in match ltr1 with | exist _ (Leaf true) _ => ltr2 | exist _ (Leaf false) _ => unrel rtr1 rtr2 | _ => unrel ltr1 ltr2 end end.",
            "VernacExtend",
            "41faaf0d184d54089dce4a9bff54f6e0c7fc762d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "clear -teq1.",
            "VernacExtend",
            "3ed366bf1dd69e30c49786bf58da02e12aa8db5f"
        ],
        [
            "inv teq1.",
            "VernacExtend",
            "6392224c3fef500969e8ff60be00adcc8bf476c9"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold tree_height.",
            "VernacExtend",
            "73bd0d7a2a8cb56f8a44aefd6a760678b02f4bf7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "clear -teq1.",
            "VernacExtend",
            "3ed366bf1dd69e30c49786bf58da02e12aa8db5f"
        ],
        [
            "inv teq1.",
            "VernacExtend",
            "6392224c3fef500969e8ff60be00adcc8bf476c9"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "unfold tree_height.",
            "VernacExtend",
            "73bd0d7a2a8cb56f8a44aefd6a760678b02f4bf7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "remember (max (tree_heightP s1) (tree_heightP s2) + 1).",
            "VernacExtend",
            "61d4b0aa77e02dfb7176ff585b6c5b68a7997ebf"
        ],
        [
            "assert (n1 <= max n1 (tree_heightP s0)).",
            "VernacExtend",
            "7fe19fc5c0caad69c1e3d3f72208b11648b745cf"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Set Warnings \"-funind-cannot-build-inversion,-funind-cannot-define-graph\".",
            "VernacSetOption",
            "85eb0aafaa33df4c71908632c301e35a1cb85ef6"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Set Warnings \"+funind-cannot-build-inversion,+funind-cannot-define-graph\".",
            "VernacSetOption",
            "e5ed377c004ed88c3e4d5eaec13ceca39421c111"
        ],
        [
            "Lemma canonTree_Leaf : forall b, canonicalTree (Leaf b).",
            "VernacStartTheoremProof",
            "3fbde91049ece28570363f20242b96cc890dc513"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_identity : forall t, canonicalTree t -> mkCanon t = t.",
            "VernacStartTheoremProof",
            "dfbc0652b9950d98ca7a85d09e7f774b37fc7cad"
        ],
        [
            "induction t0;intros.",
            "VernacExtend",
            "d5b57f6e82495304d613378e5f8ec6391beeb195"
        ],
        [
            "compute;trivial.",
            "VernacExtend",
            "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H as [? [? [? ?]]].",
            "VernacExtend",
            "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
        ],
        [
            "specialize ( IHt0_1 H1).",
            "VernacExtend",
            "e6d627104b03d07a7b6d0895001cf319fe34e32c"
        ],
        [
            "specialize ( IHt0_2 H2).",
            "VernacExtend",
            "98e998223936cb02abcfa6dd0d7fcb7eb86ad0b8"
        ],
        [
            "rewrite IHt0_1.",
            "VernacExtend",
            "acaba28ae65364f06336d4656525460e4453c188"
        ],
        [
            "rewrite IHt0_2.",
            "VernacExtend",
            "0c740b8f6c418eabdc692590e8f6c2eb69223e09"
        ],
        [
            "icase t0_1;icase t0_2.",
            "VernacExtend",
            "86bfdec47df68038d04347caba0c1e3e644165c0"
        ],
        [
            "icase (bool_dec b b0).",
            "VernacExtend",
            "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "icase b0;compute in H;compute in H0; firstorder.",
            "VernacExtend",
            "5e3f22a5bae3d6474eecad388a4b2a705c502a26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma identity_tree: identity (exist (fun t0 => canonicalTree t0) (Leaf false) (canonTree_Leaf _)).",
            "VernacStartTheoremProof",
            "c8b62380eaf501a12cbccf58e8b773e49848db96"
        ],
        [
            "unfold identity,join,BAF.Join_ba.",
            "VernacExtend",
            "d6633772cda8174682e9d565e34acaccb68a1971"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "unfold BAF.lub in H0.",
            "VernacExtend",
            "a0c724d0d25465e0b56ae51478e5ea3390226bb7"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply mkCanon_identity.",
            "VernacExtend",
            "50e1638254cb5c0364ae7e946f67b824fe968c15"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nonEmpty_nonidentity: forall x c,nonEmptyTree x -> nonidentity (exist _ x c).",
            "VernacStartTheoremProof",
            "be0919480340e56921f0ae0234f8d83687e89239"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "specialize ( H0 (exist (fun t0 => canonicalTree t0) (Leaf false) (canonTree_Leaf _)) (exist (fun t0 => canonicalTree t0) (Leaf true) (canonTree_Leaf _))).",
            "VernacExtend",
            "f71d591ea2f605da564d94a4d28fbd17cce7f90b"
        ],
        [
            "detach H0.",
            "VernacExtend",
            "fb1033d455428b41e9b90b2f6403a4498d1865bf"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "unfold join,BAF.Join_ba.",
            "VernacExtend",
            "59414273acdf11947ee88c302fe50e5102ce2cd5"
        ],
        [
            "split;apply exist_ext;compute;trivial.",
            "VernacExtend",
            "a2c1da90f37bbfb0b2c7f3b25ec829e5ae51ab02"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold identity in H0.",
            "VernacExtend",
            "cf05dce9a360a26f21ed54fc239680adb898736c"
        ],
        [
            "specialize ( H0 (exist (fun t0 => canonicalTree t0) (Leaf false) (canonTree_Leaf _)) (exist (fun t : ShareTree => canonicalTree t) (Node x1 x2) c)).",
            "VernacExtend",
            "bf8de902eb28305ba3873c8299970736c50b561d"
        ],
        [
            "detach H0.",
            "VernacExtend",
            "fb1033d455428b41e9b90b2f6403a4498d1865bf"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "apply join_comm.",
            "VernacExtend",
            "c355c563e0fb9ac01df8452aaaaf4009eeee22a7"
        ],
        [
            "unfold join.",
            "VernacExtend",
            "56d19727305f7ac52a9beb120f89f9b1e1b2cbfc"
        ],
        [
            "unfold BAF.Join_ba,BAF.glb,BAF.lub.",
            "VernacExtend",
            "11aa08477be769fc823173305778d97e425d1fa6"
        ],
        [
            "split;apply exist_ext;simpl;trivial.",
            "VernacExtend",
            "25e197fe2295326827498d7795ee5af5078a2c2d"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_rel: forall x sh, nonidentity x -> unrel x (rel x sh) = sh.",
            "VernacStartTheoremProof",
            "79633aaeb0f42682d7d476cd5aee3c5872e66be8"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "induction x;intros.",
            "VernacExtend",
            "967005fa252895ab470aa9876d40c37f363bf6d6"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "assert (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) c = top).",
            "VernacExtend",
            "1fb6d2272b3091502c15369a780fb2bfde96eeca"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply rel_top2.",
            "VernacExtend",
            "7c67cc3807e8c833415e7a9cdbfc5d6d78e15910"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) c = core (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) c)).",
            "VernacExtend",
            "0080d93a0829df2146d2cd78def773cc74832ce8"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold BAF.bot.",
            "VernacExtend",
            "2ea103cb8f3174c2438d4b7c8a203415930b5405"
        ],
        [
            "apply exist_ext;trivial.",
            "VernacExtend",
            "57a542efd5803f9f450ee003dbdb7ed63247566f"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply core_identity.",
            "VernacExtend",
            "5c1c5ff59150fe95f19be565f7f1c3a0225ed86c"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "assert (decompose (exist _ (Node x1 x2) (conj n (conj n0 (conj c c0)))) = (exist (fun t0 : ShareTree => canonicalTree t0) x1 c, exist (fun t0 : ShareTree => canonicalTree t0) x2 c0)).",
            "VernacExtend",
            "f2cf7279fd161878218c1ff3e422616a0cd930d9"
        ],
        [
            "simpl;trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H0;clear H0.",
            "VernacExtend",
            "fabeca7858ebb717928a37dd7ab85d95711cf62f"
        ],
        [
            "assert (decompose (rel (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh) = (rel (exist _ x1 c) sh, rel (exist _ x2 c0) sh)).",
            "VernacExtend",
            "cbed47da8f6c729f3e8066fe38e92a77ad38a6bf"
        ],
        [
            "generalize (rel_classification);intro.",
            "VernacExtend",
            "51c82dd296e46df457d516ed207ddb94863dfb6c"
        ],
        [
            "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh).",
            "VernacExtend",
            "518ac51f8262176fd143d4c088434713469bbc58"
        ],
        [
            "icase X.",
            "VernacExtend",
            "cb952cd283298e89cc9c88570eac9010e28a245f"
        ],
        [
            "destruct a;subst sh.",
            "VernacExtend",
            "7efbd38282074853a6b119da33a6f2089ae1f477"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply injective_projections;simpl;symmetry; apply rel_bot1.",
            "VernacExtend",
            "484f63874920d92480154d088e0a7408d2fe7cbb"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "unfold decompose.",
            "VernacExtend",
            "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
        ],
        [
            "remember (rel (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh).",
            "VernacExtend",
            "279beb86f3cd7716c04d01c50765c89b978c78af"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "destruct c1 as [? [? [? ?]]].",
            "VernacExtend",
            "3c359adc74576190ab9948d54bc08fb4d001d6d7"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "apply injective_projections;simpl; destruct sh; icase x;unfold rel;simpl;try apply exist_ext;trivial.",
            "VernacExtend",
            "99db50f9580c61862ccb144c1636f04371d8f9f4"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "icase x2.",
            "VernacExtend",
            "bcd0f33732012369c5e1e3dcf6222f010fea2811"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H0;clear H0.",
            "VernacExtend",
            "fabeca7858ebb717928a37dd7ab85d95711cf62f"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "assert (exist _ (Leaf true) c = top).",
            "VernacExtend",
            "afb2cc1427982a32fdfe9065db7d2b814c08a61d"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply rel_top2.",
            "VernacExtend",
            "7c67cc3807e8c833415e7a9cdbfc5d6d78e15910"
        ],
        [
            "apply IHx2.",
            "VernacExtend",
            "ec8945e07d5ebb780621c8089467ca601f2d7a9a"
        ],
        [
            "apply nonEmpty_nonidentity.",
            "VernacExtend",
            "29ccbcc74393077052c937a588cfb5e086d19f1f"
        ],
        [
            "icase n0.",
            "VernacExtend",
            "fd2ba696caa99f0b129d4fbb5031b00bf463aa87"
        ],
        [
            "apply IHx1.",
            "VernacExtend",
            "aeaa4dbd5568f59b5997dbaf98e557368b24eb25"
        ],
        [
            "apply nonEmpty_nonidentity.",
            "VernacExtend",
            "29ccbcc74393077052c937a588cfb5e086d19f1f"
        ],
        [
            "clear - c.",
            "VernacExtend",
            "bba79bd49e8799be6ca06d4e9633c46212a67b51"
        ],
        [
            "destruct c as [_ [? _]].",
            "VernacExtend",
            "5978447c741f569d19ae609e44d315a1fe479d8b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Lsh : Share.t := fst (Share.split Share.top).",
            "VernacDefinition",
            "a52ebcfb53993dab4eb0f445f268fb7eb8784398"
        ],
        [
            "Definition Rsh : Share.t := snd (Share.split Share.top).",
            "VernacDefinition",
            "c349a8be79dad2dc3a08dc70b0d06f7715bc963f"
        ],
        [
            "Definition splice (a b: t) : t := Share.lub (rel Lsh a) (rel Rsh b).",
            "VernacDefinition",
            "caccb8738d93695436fb2fee18c07070d1d6605b"
        ],
        [
            "Lemma mkCanon_Leaf : forall b , mkCanon (Leaf b) = Leaf b.",
            "VernacStartTheoremProof",
            "990293b3f974b6e6c8f5958f2a0d69f7cbc25731"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_double : forall t, mkCanon (mkCanon t) = mkCanon t.",
            "VernacStartTheoremProof",
            "67699707b7e15232920af9ab3bd2779e096b36f3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (mkCanon_correct t0);intro.",
            "VernacExtend",
            "515e214a36a1bb533bc84cc67f08f24bcee3cc15"
        ],
        [
            "generalize (mkCanon_identity _ H);intro.",
            "VernacExtend",
            "a4c407e4325e6feabf6903b6384263f316638d35"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_split : forall t1 t2 t1' t2', mkCanon (Node t1 t2) = Node t1' t2' -> mkCanon t1 = t1' /\\ mkCanon t2 = t2'.",
            "VernacStartTheoremProof",
            "26e3640ff8bb51d8774236abff8b9d5df0611f8b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase (mkCanon t1);icase (mkCanon t2); try icase (bool_dec b b0);inversion H1;auto.",
            "VernacExtend",
            "eb02046a39c71bd55b6e1ff6409468169483573e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_Leaf_split : forall t1 t2 b, Leaf b = mkCanon (Node t1 t2) -> mkCanon t1 = Leaf b /\\ mkCanon t2 = Leaf b.",
            "VernacStartTheoremProof",
            "c5045f54e4fa4bbee545972e2c2d51e753b72713"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase (mkCanon t1);icase (mkCanon t2).",
            "VernacExtend",
            "bd811165e0811144726988c940e4a7a2b69f2333"
        ],
        [
            "icase (bool_dec b0 b1);inversion H1;subst.",
            "VernacExtend",
            "f8b313ece6a5b4693948c1c2f8364ef5ed9f2a5f"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_union : forall t1 t2, mkCanon (union_tree (mkCanon t1) (mkCanon t2)) = mkCanon (union_tree t1 t2).",
            "VernacStartTheoremProof",
            "8aa3c787e04b5e3be08dcbc443d58a85d1832d28"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists n, n >= max (tree_heightP t1) (tree_heightP t2)).",
            "VernacExtend",
            "03dd3182aa4df662a2e4199d61fa6a33878c0469"
        ],
        [
            "exists (max (tree_heightP t1) (tree_heightP t2));omega.",
            "VernacExtend",
            "41f33d3a4287e710f99fe3054076749e921b5685"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "revert H.",
            "VernacExtend",
            "6842e040dd98a07b1eb54bbabc9c3f1076566a9a"
        ],
        [
            "revert t2 t1.",
            "VernacExtend",
            "8afc57ec65f3c5d54becc13f716c653ead5305ce"
        ],
        [
            "induction x;intros.",
            "VernacExtend",
            "967005fa252895ab470aa9876d40c37f363bf6d6"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "remember (tree_heightP (Node t2_1 t2_2)).",
            "VernacExtend",
            "166dddff85ff74575d4fada1110526ca654256cb"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "inversion Heqn.",
            "VernacExtend",
            "34f8462da0501cfa82647625d34ac4fea03cbd33"
        ],
        [
            "destruct (max (tree_heightP t2_1) (tree_heightP t2_2));elimtype False ;omega.",
            "VernacExtend",
            "4326b25aa24f14010e3b3f1df18438007bacc365"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "destruct (max (tree_heightP t1_1) (tree_heightP t1_2));inversion H1.",
            "VernacExtend",
            "a865c761ef46fb2cad373b60b1f8b330e6f65c47"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "destruct (max (tree_heightP t1_1) (tree_heightP t1_2)); destruct (max (tree_heightP t2_1) (tree_heightP t2_2)); inversion H1.",
            "VernacExtend",
            "2b3e6cf8b854a6a163a0c70cb0207ed7efce2f41"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
            "VernacExtend",
            "92cf76fe631ac25a334e03d7f89456639e854f7b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "unfold union_tree.",
            "VernacExtend",
            "76531f4f278e593d44983af5816265df72eaebcd"
        ],
        [
            "apply mkCanon_double.",
            "VernacExtend",
            "bd673e0198e52abcf80665d4d80939f987ec580f"
        ],
        [
            "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
            "VernacExtend",
            "92cf76fe631ac25a334e03d7f89456639e854f7b"
        ],
        [
            "replace (union_tree (mkCanon (Node t1_1 t1_2)) (Leaf b)) with (union_tree(Leaf b)(mkCanon (Node t1_1 t1_2))) by apply union_commute.",
            "VernacExtend",
            "5a2cc647f2d20935367c3a28d0964c98c9c671f0"
        ],
        [
            "replace (union_tree ( (Node t1_1 t1_2)) (Leaf b)) with (union_tree(Leaf b)(Node t1_1 t1_2)) by apply union_commute.",
            "VernacExtend",
            "9fff4ac07146352c45c7937ebb60d5047796606e"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "unfold union_tree.",
            "VernacExtend",
            "76531f4f278e593d44983af5816265df72eaebcd"
        ],
        [
            "apply mkCanon_double.",
            "VernacExtend",
            "bd673e0198e52abcf80665d4d80939f987ec580f"
        ],
        [
            "assert (x >= max (tree_heightP t1_1) (tree_heightP t2_1)).",
            "VernacExtend",
            "720c78affc0bf92c3622eb27c1217f64e30bce1f"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
            "VernacExtend",
            "0d247f450c95bf07dd150ec25290349c3f9b041a"
        ],
        [
            "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
            "VernacExtend",
            "7a7f3b025a777711289bbfa545257b7f3219a629"
        ],
        [
            "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
            "VernacExtend",
            "ddace4781e469afa72530ffe9510e612fc0ce661"
        ],
        [
            "rewrite<- H0 in H;clear H0.",
            "VernacExtend",
            "c8d008f6a681b3aa396caf5a4a36d040353c5bea"
        ],
        [
            "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
            "VernacExtend",
            "0a9b828055b85307b530f0ff2561f8b7658f620c"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
            "VernacExtend",
            "4f697524f71507015df6555e5dfa93d3ad44fe72"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
            "VernacExtend",
            "99d591959b3419c73d118a5ab4f2e91b5accea25"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_1).",
            "VernacExtend",
            "bb6914e35f2f71e8f906a4bfa7c04d0ecea8c4b6"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_1).",
            "VernacExtend",
            "7fe06ca08d0477228f6b819f522c3f9b0b080a7b"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "apply max_lub;omega.",
            "VernacExtend",
            "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
        ],
        [
            "assert (x >= max (tree_heightP t1_2) (tree_heightP t2_2)).",
            "VernacExtend",
            "4bec309b3e71bd7e674fe6f91ae2fdad44168a58"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
            "VernacExtend",
            "0d247f450c95bf07dd150ec25290349c3f9b041a"
        ],
        [
            "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
            "VernacExtend",
            "7a7f3b025a777711289bbfa545257b7f3219a629"
        ],
        [
            "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
            "VernacExtend",
            "ddace4781e469afa72530ffe9510e612fc0ce661"
        ],
        [
            "rewrite<- H1 in H;clear H1.",
            "VernacExtend",
            "cd8b55612d8b1cd5dd22277bd74c76417adb6480"
        ],
        [
            "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
            "VernacExtend",
            "0a9b828055b85307b530f0ff2561f8b7658f620c"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
            "VernacExtend",
            "4f697524f71507015df6555e5dfa93d3ad44fe72"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
            "VernacExtend",
            "99d591959b3419c73d118a5ab4f2e91b5accea25"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_2).",
            "VernacExtend",
            "e081a61f6ab3ebea723cc8d004cbb8fd97b5c214"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_2).",
            "VernacExtend",
            "1bb473544ad68959f318df74d89b33b14dc5138a"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "apply max_lub;omega.",
            "VernacExtend",
            "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
        ],
        [
            "generalize (IHx _ _ H0);intro.",
            "VernacExtend",
            "c6356c640473cbc82c60133a7ad64bfb95e1385c"
        ],
        [
            "generalize (IHx _ _ H1);intro.",
            "VernacExtend",
            "c534ce5587bba324b7e77225fe54d50bbe57b3c3"
        ],
        [
            "remember (mkCanon (Node t1_1 t1_2)); remember (mkCanon (Node t2_1 t2_2)).",
            "VernacExtend",
            "a3f2e0708a4e588e4bffade15f6c0142339eba6d"
        ],
        [
            "icase s;icase s0.",
            "VernacExtend",
            "161ab773bbd450aff668142fa775d0ee740c7c83"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
            "VernacExtend",
            "2913c7f415056c6f42826426c576ad14be131b68"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
            "VernacExtend",
            "a3cb58c11b5ba51941895458842055d394606df7"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H51 in *.",
            "VernacExtend",
            "b7d83e75ecef6ea410b4f382809360657e65e858"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite H52 in *.",
            "VernacExtend",
            "00b69e3806d8ddfd959bf1cb45a73f10a04902ef"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (mkCanon_Leaf b0);intro.",
            "VernacExtend",
            "c23b1909a67e14bfa7ffe0bbcf473089b2ed3d5d"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "icase (bool_dec b0 b0);trivial.",
            "VernacExtend",
            "2a2808120933a7f28679ebc5ada94c799f582c3c"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
            "VernacExtend",
            "2913c7f415056c6f42826426c576ad14be131b68"
        ],
        [
            "symmetry in Heqs0.",
            "VernacExtend",
            "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
            "VernacExtend",
            "d47cf62474b3562786f61978d6f5a242afc0c60c"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite<- H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<- H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<-H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<-H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
            "VernacExtend",
            "a3cb58c11b5ba51941895458842055d394606df7"
        ],
        [
            "symmetry in Heqs.",
            "VernacExtend",
            "9275975760708605add45ad78ef8579587cb34e0"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
            "VernacExtend",
            "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite<- H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<- H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "replace (union_tree (Node (mkCanon t1_1) (mkCanon t1_2)) (Leaf b)) with (union_tree (Leaf b) (Node (mkCanon t1_1) (mkCanon t1_2))) by apply union_commute.",
            "VernacExtend",
            "4d2fc2b903069aabea852e810501b6e00554cef8"
        ],
        [
            "replace (union_tree (mkCanon t1_1) (Leaf b)) with (union_tree (Leaf b)(mkCanon t1_1)) in H2 by apply union_commute.",
            "VernacExtend",
            "459c3a2969ef2598d1673fcdbf62047656b2b7a9"
        ],
        [
            "replace (union_tree (mkCanon t1_2) (Leaf b)) with (union_tree (Leaf b)(mkCanon t1_2)) in H3 by apply union_commute.",
            "VernacExtend",
            "c930e24682a07840e1e08e1787b238746298e073"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<-H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<-H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "symmetry in Heqs, Heqs0.",
            "VernacExtend",
            "3bf590587427358e6d96401a0d02b70be30779ba"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
            "VernacExtend",
            "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
            "VernacExtend",
            "d47cf62474b3562786f61978d6f5a242afc0c60c"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite<-H41 in *.",
            "VernacExtend",
            "ffefabf6ca3b9c3c5f90c11b36828d0f0acf154f"
        ],
        [
            "rewrite<- H42 in *.",
            "VernacExtend",
            "0c96bf4f5abff5d69b0c6d7f65737bd37baa6ee5"
        ],
        [
            "rewrite<-H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<-H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splice_rewrite: forall a b, splice a b = exist (fun t0 => canonicalTree t0) (mkCanon (Node (proj1_sig a) (proj1_sig b))) (mkCanon_correct _).",
            "VernacStartTheoremProof",
            "cbee190c0d48780da4c5812d6c777aadc102ba80"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold splice.",
            "VernacExtend",
            "a3ee6f27fd03cdcfe4181d600a996a3113362f11"
        ],
        [
            "unfold lub,Lsh,Rsh.",
            "VernacExtend",
            "d07d2081fff2aae141c6bdc8bf4b93e1f6019671"
        ],
        [
            "unfold split,fst,snd.",
            "VernacExtend",
            "ef3eb6274d722b08ea01f87929ce0fbfe73d103c"
        ],
        [
            "assert (rel top leftTree = leftTree) by apply rel_top2.",
            "VernacExtend",
            "396f6901eba548ee77f6b47a600dfbeafb869b84"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "assert (rel top rightTree = rightTree) by apply rel_top2.",
            "VernacExtend",
            "12cd823035c144be731452c6d44ad4b9ef3b73f1"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "assert (proj1_sig (rel leftTree a) = mkCanon (Node (proj1_sig a) (Leaf false))).",
            "VernacExtend",
            "d41accd458faf1beeabd613cbb0bc4468ddbbda8"
        ],
        [
            "destruct a; unfold leftTree.",
            "VernacExtend",
            "f8059665eb381026cf4f2cde4867e52406caa5dd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (rel_classification);intro.",
            "VernacExtend",
            "51c82dd296e46df457d516ed207ddb94863dfb6c"
        ],
        [
            "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror (true = false) (Logic.eq_refl false)) (conj (or_introl (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) x c)).",
            "VernacExtend",
            "aef33fc52c362d686a02269b002e4c15f9b20510"
        ],
        [
            "icase X.",
            "VernacExtend",
            "cb952cd283298e89cc9c88570eac9010e28a245f"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "compute;trivial.",
            "VernacExtend",
            "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b0.",
            "VernacExtend",
            "ca2770c77260a1c6c7f0c777f72d945c8436f889"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "assert (proj1_sig (rel rightTree b) = mkCanon (Node (Leaf false) (proj1_sig b))).",
            "VernacExtend",
            "0f636328a5f8c5572ca06063ae10a0fc3ef62744"
        ],
        [
            "destruct b; unfold rightTree.",
            "VernacExtend",
            "184e757046d91f7e32d169b4a25193cd81791eeb"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (rel_classification);intro.",
            "VernacExtend",
            "51c82dd296e46df457d516ed207ddb94863dfb6c"
        ],
        [
            "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) x c)).",
            "VernacExtend",
            "04d47172454a0fc22167b681a97bdb9dee3daff7"
        ],
        [
            "icase X.",
            "VernacExtend",
            "cb952cd283298e89cc9c88570eac9010e28a245f"
        ],
        [
            "destruct a0.",
            "VernacExtend",
            "a0487b579f70f8f2c661f4b75c8b4e6474630618"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "compute;trivial.",
            "VernacExtend",
            "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
        ],
        [
            "destruct a0.",
            "VernacExtend",
            "a0487b579f70f8f2c661f4b75c8b4e6474630618"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "rewrite mkCanon_union.",
            "VernacExtend",
            "b8afebc4fb124f16db47fd3a0aecd5911942fe62"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "rewrite union_commute.",
            "VernacExtend",
            "d885c24d3f94d08eb13f83b39d536446e5905fb9"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite union_commute.",
            "VernacExtend",
            "d885c24d3f94d08eb13f83b39d536446e5905fb9"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_check: forall x y, canonicalTree x -> canonicalTree y -> (exists b, x = Leaf b /\\ y = Leaf b) \\/ (canonicalTree (Node x y)).",
            "VernacStartTheoremProof",
            "75a59a85788a83b8235af656bf339a295bf7d278"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase y.",
            "VernacExtend",
            "39ee12dccf9b7c0cc8721df66556a7ad7898ff6d"
        ],
        [
            "icase b;icase b0.",
            "VernacExtend",
            "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
        ],
        [
            "left;exists true;auto.",
            "VernacExtend",
            "2ddaa07442f1e00bd2cf309ed9eb416427c493f7"
        ],
        [
            "right;compute;tauto.",
            "VernacExtend",
            "f79472d60e6d21f821812ddc2a6773e450c381dc"
        ],
        [
            "right;compute;tauto.",
            "VernacExtend",
            "f79472d60e6d21f821812ddc2a6773e450c381dc"
        ],
        [
            "left;exists false;auto.",
            "VernacExtend",
            "ed501193df873fd3ae4caf54ba87d6911a3c5f0b"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_splice_L: forall a b, unrel Lsh (splice a b) = a.",
            "VernacStartTheoremProof",
            "1e46c194f9fe37b159c1eb12c708d4d0bef2be5b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (splice_rewrite a b);intro.",
            "VernacExtend",
            "0e83279f9c97175ea3b50457abc0999487b3df7d"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "unfold Lsh,fst,split.",
            "VernacExtend",
            "3d52cf754c79ee3b24fda11b0808e7657954926f"
        ],
        [
            "assert (rel top leftTree = leftTree) by apply rel_top2.",
            "VernacExtend",
            "396f6901eba548ee77f6b47a600dfbeafb869b84"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "unfold leftTree.",
            "VernacExtend",
            "e2c2f538aa2d26608b71a15c88f60f4ef97a8dcf"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror (true = false) (Logic.eq_refl false)) (conj (or_introl (false = true) (Logic.eq_refl true)) (conj I I))))= (top,bot)).",
            "VernacExtend",
            "c92f31e64994aa0040f77b70b15b7499b891acf3"
        ],
        [
            "compute;apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "9652fbf03255545df52a368599fbbd8e892e02fe"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "assert (decompose ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (proj1_sig a) (proj1_sig b))) (mkCanon_correct (Node (proj1_sig a) (proj1_sig b))))) = (a,b)).",
            "VernacExtend",
            "04aea51ba77eaf54ff6a9fea64e10fd5f33f6796"
        ],
        [
            "destruct a,b.",
            "VernacExtend",
            "0e658611d817547f372dbd093d84556cba787228"
        ],
        [
            "unfold proj1_sig.",
            "VernacExtend",
            "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
        ],
        [
            "generalize (canonTree_check _ _ c c0);intro.",
            "VernacExtend",
            "ee811771ba979cfc2740911cca4c1ecbe41d33d1"
        ],
        [
            "icase H.",
            "VernacExtend",
            "4ce0bab02f31ebb323d7e036bc2a6b892fe6087f"
        ],
        [
            "destruct H as [? [? ?]];subst.",
            "VernacExtend",
            "a3dbb07ccbfbbcb43f61c08922f4ceb8847c6440"
        ],
        [
            "icase x1;unfold decompose;apply injective_projections; simpl; apply exist_ext;simpl;trivial.",
            "VernacExtend",
            "76f9d918845ac0701eac4480e010f3ccf6f3664d"
        ],
        [
            "assert ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))) = exist (fun t0 => canonicalTree t0) (Node x x0) H).",
            "VernacExtend",
            "4b8646efab91c13610dfac1dd250455d9d07296c"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "apply mkCanon_identity.",
            "VernacExtend",
            "50e1638254cb5c0364ae7e946f67b824fe968c15"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "unfold decompose.",
            "VernacExtend",
            "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
        ],
        [
            "destruct H as [? [? [? ?]]].",
            "VernacExtend",
            "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
        ],
        [
            "apply injective_projections;simpl;apply exist_ext;trivial.",
            "VernacExtend",
            "dd4c4e90bc556ef16824598d357116dea7807c33"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "unfold top;simpl.",
            "VernacExtend",
            "3134f9e28a34afc8076fa007deef1ac021f565d7"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_splice_R: forall a b, unrel Rsh (splice a b) = b.",
            "VernacStartTheoremProof",
            "19152f36a8acd255bc73e08d1de33e0841a7a421"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (splice_rewrite a b);intro.",
            "VernacExtend",
            "0e83279f9c97175ea3b50457abc0999487b3df7d"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "unfold Rsh,snd,split.",
            "VernacExtend",
            "a36ce32c38fbc3d7fc46f53df5bc583b2b19a5f0"
        ],
        [
            "assert (rel top rightTree = rightTree) by apply rel_top2.",
            "VernacExtend",
            "12cd823035c144be731452c6d44ad4b9ef3b73f1"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "unfold rightTree.",
            "VernacExtend",
            "388f003d57ee65b01f21317125df4004a5254f23"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) = (bot,top)).",
            "VernacExtend",
            "6f7c98194fb9d4b89a605b73066a8ea24403d6ca"
        ],
        [
            "compute;apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "9652fbf03255545df52a368599fbbd8e892e02fe"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H;clear H.",
            "VernacExtend",
            "a60de8fe6903e17bd74acece0951cbb10e6ef842"
        ],
        [
            "assert (decompose ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (proj1_sig a) (proj1_sig b))) (mkCanon_correct (Node (proj1_sig a) (proj1_sig b))))) = (a,b)).",
            "VernacExtend",
            "04aea51ba77eaf54ff6a9fea64e10fd5f33f6796"
        ],
        [
            "destruct a,b.",
            "VernacExtend",
            "0e658611d817547f372dbd093d84556cba787228"
        ],
        [
            "unfold proj1_sig.",
            "VernacExtend",
            "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
        ],
        [
            "generalize (canonTree_check _ _ c c0);intro.",
            "VernacExtend",
            "ee811771ba979cfc2740911cca4c1ecbe41d33d1"
        ],
        [
            "icase H.",
            "VernacExtend",
            "4ce0bab02f31ebb323d7e036bc2a6b892fe6087f"
        ],
        [
            "destruct H as [? [? ?]];subst.",
            "VernacExtend",
            "a3dbb07ccbfbbcb43f61c08922f4ceb8847c6440"
        ],
        [
            "icase x1;unfold decompose;apply injective_projections; simpl; apply exist_ext;simpl;trivial.",
            "VernacExtend",
            "76f9d918845ac0701eac4480e010f3ccf6f3664d"
        ],
        [
            "assert ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))) = exist (fun t0 => canonicalTree t0) (Node x x0) H).",
            "VernacExtend",
            "4b8646efab91c13610dfac1dd250455d9d07296c"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "apply mkCanon_identity.",
            "VernacExtend",
            "50e1638254cb5c0364ae7e946f67b824fe968c15"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "unfold decompose.",
            "VernacExtend",
            "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
        ],
        [
            "destruct H as [? [? [? ?]]].",
            "VernacExtend",
            "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
        ],
        [
            "apply injective_projections;simpl;apply exist_ext;trivial.",
            "VernacExtend",
            "dd4c4e90bc556ef16824598d357116dea7807c33"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "unfold bot;simpl.",
            "VernacExtend",
            "d4dcd819461ce9f4efd16ab8aefa176d3aa89c8d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contains_Lsh_e: forall sh, join_sub Lsh sh -> unrel Lsh sh = top.",
            "VernacStartTheoremProof",
            "93b38c630e1b38b38d76ecedcc7fde1ab7d208bd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "unfold Lsh,fst in *.",
            "VernacExtend",
            "2194722d30d4b6c7c2c5a6b4abef9325bd9b3e1b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "assert (rel top leftTree = leftTree) by apply rel_top2.",
            "VernacExtend",
            "396f6901eba548ee77f6b47a600dfbeafb869b84"
        ],
        [
            "rewrite H0 in *;clear H0.",
            "VernacExtend",
            "9a299ddcfa3f1ae3d6d642f1a77f90341d0457ad"
        ],
        [
            "unfold leftTree in *.",
            "VernacExtend",
            "30086b786015517702dda58f320396e76c59ec31"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "assert (CT: canonicalTree (Node (Leaf true) (Leaf false))).",
            "VernacExtend",
            "6fca6243260d1b4953c9d167b569e491a60d0659"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "left; reflexivity.",
            "VernacExtend",
            "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
        ],
        [
            "assert (@decompose t _ (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror eq_refl) (conj (or_introl eq_refl) (conj I I)))) = (top,bot)).",
            "VernacExtend",
            "77e178e726022c68f561852e9d5aa6d563336bb3"
        ],
        [
            "compute;apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "9652fbf03255545df52a368599fbbd8e892e02fe"
        ],
        [
            "simpl nonFullTree in H0; simpl nonEmptyTree in H0.",
            "VernacExtend",
            "56d36d3f1190c9ff5c97d7274dc65f0fa8539a0f"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "clear H0.",
            "VernacExtend",
            "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (mkCanon_correct (Node (Leaf true) (Leaf false))) as [? [? [? ?]]].",
            "VernacExtend",
            "f7c666e58a6db4bb36cc98e7099c276545d133a5"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "apply exist_ext;trivial.",
            "VernacExtend",
            "57a542efd5803f9f450ee003dbdb7ed63247566f"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "assert (decompose (BAF.lub (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror eq_refl) (conj (or_introl eq_refl) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0))))) = (top, exist (fun t0 : ShareTree => canonicalTree t0) x2 c0)).",
            "VernacExtend",
            "09189235e439c3111083b6dc25eb9f5baa0d1c6c"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "unfold proj1_sig.",
            "VernacExtend",
            "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
        ],
        [
            "assert (union_tree (Node (Leaf true) (Leaf false)) (Node x1 x2) = Node (Leaf true) x2).",
            "VernacExtend",
            "bc9d5b25ec4cbf0007849560e6b98eb19c95c41c"
        ],
        [
            "unfold union_tree;trivial.",
            "VernacExtend",
            "139d3c974a670b458f18b50b443ad498cabb9e91"
        ],
        [
            "rewrite H0;clear H0.",
            "VernacExtend",
            "fabeca7858ebb717928a37dd7ab85d95711cf62f"
        ],
        [
            "icase x2.",
            "VernacExtend",
            "bcd0f33732012369c5e1e3dcf6222f010fea2811"
        ],
        [
            "icase b; simpl.",
            "VernacExtend",
            "1a1e28fecc40b77f0153335d65cc99499468e23a"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "destruct (mkCanon_correct (Node (Leaf true) (Leaf false))) as [? [? [? ?]]].",
            "VernacExtend",
            "f7c666e58a6db4bb36cc98e7099c276545d133a5"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "assert (canonicalTree (Node (Leaf true) (Node x2_1 x2_2) )).",
            "VernacExtend",
            "503649f4b13a6944988f53b46d63111d01ca6f57"
        ],
        [
            "destruct c0 as [? [? [? ?]]]; firstorder.",
            "VernacExtend",
            "94f51043d42df58ca81c22c28fa3683459ecce40"
        ],
        [
            "assert (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (Leaf true) (Node x2_1 x2_2))) (mkCanon_correct (Node (Leaf true) (Node x2_1 x2_2)))= (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Node x2_1 x2_2)) H0)).",
            "VernacExtend",
            "f84c9f364ebba75e179579551e09feb0b5384545"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct c0 as [? [? [? ?]]].",
            "VernacExtend",
            "f5a4c8267f800fd26ac898e46507f0511b361079"
        ],
        [
            "generalize (mkCanon_identity x2_1 c0);intro.",
            "VernacExtend",
            "d0011caf29c16440505c1783605aab718788c6ed"
        ],
        [
            "generalize (mkCanon_identity x2_2 c1);intro.",
            "VernacExtend",
            "8c2f5b35d5a9291fc29db3331f125210f378ee12"
        ],
        [
            "rewrite H1;rewrite H2.",
            "VernacExtend",
            "8d018a8547fa22724706a4da5d7a7d5d3ce49c8e"
        ],
        [
            "icase x2_1;icase x2_2.",
            "VernacExtend",
            "6f3e71770c4f993227a12af16c58cbf77e70b43b"
        ],
        [
            "icase b;icase b0; simpl; elimtype False;firstorder.",
            "VernacExtend",
            "a6891d29f3d4362c677878021b62b8396b28ff53"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct H0 as [? [? [? ?]]].",
            "VernacExtend",
            "8e14a1b2f90a3a031837528c5f64c0afdfecd86c"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "change BAF.lub with lub in H0.",
            "VernacExtend",
            "102ca50a2b334ff87832e47837fd4fc4e110bb91"
        ],
        [
            "simpl nonFullTree in H0|-*; simpl nonEmptyTree in H0|-*.",
            "VernacExtend",
            "c541804dc4c2d06fc528c22b9a55f7aa94c2d99e"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "unfold bot.",
            "VernacExtend",
            "219ba0db17a375ffc83549c360f7fdc6200b973f"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contains_Rsh_e: forall sh, join_sub Rsh sh -> unrel Rsh sh = top.",
            "VernacStartTheoremProof",
            "204b835645352c9e82fdece97ad17cc6e5b1a6d3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "unfold Rsh,snd in *.",
            "VernacExtend",
            "27cf57024e2f379190654863e7b8de6f34e4893f"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "assert (rel top rightTree = rightTree) by apply rel_top2.",
            "VernacExtend",
            "12cd823035c144be731452c6d44ad4b9ef3b73f1"
        ],
        [
            "rewrite H0 in *;clear H0.",
            "VernacExtend",
            "9a299ddcfa3f1ae3d6d642f1a77f90341d0457ad"
        ],
        [
            "unfold rightTree in *.",
            "VernacExtend",
            "4add9440829d6f131233fdb06e39f0cb8b39ebd3"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) = (bot,top)).",
            "VernacExtend",
            "6f7c98194fb9d4b89a605b73066a8ea24403d6ca"
        ],
        [
            "compute;apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "9652fbf03255545df52a368599fbbd8e892e02fe"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H0;clear H0.",
            "VernacExtend",
            "fabeca7858ebb717928a37dd7ab85d95711cf62f"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (mkCanon_correct (Node (Leaf false) (Leaf true))) as [? [? [? ?]]].",
            "VernacExtend",
            "e416e6f14e2fc3af1b377d5b1a2984fb301fedda"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "apply exist_ext;trivial.",
            "VernacExtend",
            "57a542efd5803f9f450ee003dbdb7ed63247566f"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "assert (decompose (BAF.lub (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0))))) = (exist (fun t0 : ShareTree => canonicalTree t0) x1 c, top)).",
            "VernacExtend",
            "d55db6da713efde6b2f2bb68e1e2824f3d317534"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "unfold proj1_sig.",
            "VernacExtend",
            "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
        ],
        [
            "assert (union_tree (Node (Leaf false) (Leaf true)) (Node x1 x2) = Node x1 (Leaf true)).",
            "VernacExtend",
            "493b3c09bbefe171c59fa757ff82bcab3cbd2fed"
        ],
        [
            "unfold union_tree;trivial.",
            "VernacExtend",
            "139d3c974a670b458f18b50b443ad498cabb9e91"
        ],
        [
            "rewrite H0;clear H0.",
            "VernacExtend",
            "fabeca7858ebb717928a37dd7ab85d95711cf62f"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b; simpl.",
            "VernacExtend",
            "1a1e28fecc40b77f0153335d65cc99499468e23a"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "destruct (mkCanon_correct (Node (Leaf false) (Leaf true))) as [? [? [? ?]]].",
            "VernacExtend",
            "e416e6f14e2fc3af1b377d5b1a2984fb301fedda"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "assert (canonicalTree (Node (Node x1_1 x1_2) (Leaf true))).",
            "VernacExtend",
            "7fccac8d79ca4b4130269df049eebc835f9f5eca"
        ],
        [
            "destruct c as [? [? [? ?]]]; firstorder.",
            "VernacExtend",
            "ffcc0180227c8605f6ceddf3b749661c61f1becd"
        ],
        [
            "assert (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (Node x1_1 x1_2) (Leaf true))) (mkCanon_correct (Node (Node x1_1 x1_2) (Leaf true))) = (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Node x1_1 x1_2) (Leaf true)) H0)).",
            "VernacExtend",
            "06fd3ddcf61fb13423c1906284a5c880e804d288"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "generalize (mkCanon_identity x1_1 c);intro.",
            "VernacExtend",
            "8cb65826a9048759da8d2bd1e591d31d01a147c6"
        ],
        [
            "generalize (mkCanon_identity x1_2 c1);intro.",
            "VernacExtend",
            "f940f9abd55f759f9d863c23fb06e6c7d27cad9c"
        ],
        [
            "rewrite H1;rewrite H2.",
            "VernacExtend",
            "8d018a8547fa22724706a4da5d7a7d5d3ce49c8e"
        ],
        [
            "icase x1_1;icase x1_2.",
            "VernacExtend",
            "7e65a7dc60a690af213c9f3742527f731172d53d"
        ],
        [
            "icase b;icase b0; simpl; elimtype False;firstorder.",
            "VernacExtend",
            "a6891d29f3d4362c677878021b62b8396b28ff53"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct H0 as [? [? [? ?]]].",
            "VernacExtend",
            "8e14a1b2f90a3a031837528c5f64c0afdfecd86c"
        ],
        [
            "apply injective_projections;apply exist_ext;trivial.",
            "VernacExtend",
            "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
        ],
        [
            "unfold decompose,decompose_tree in *.",
            "VernacExtend",
            "a6c524a23c383506f0e159b8f618ee9360587590"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "unfold bot.",
            "VernacExtend",
            "219ba0db17a375ffc83549c360f7fdc6200b973f"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint fullTreeP (t : ShareTree) (d : nat): Prop := match t with | Leaf b => d = 0 | Node l r => (d > 0) /\\ (fullTreeP l (d - 1)) /\\ (fullTreeP r (d - 1)) end.",
            "VernacFixpoint",
            "66a049da286ba00ea2f563be07162b43d608d7b5"
        ],
        [
            "Definition fullTree (t : ShareTree) : Prop := fullTreeP t (tree_heightP t).",
            "VernacDefinition",
            "bb7859576d6113381f3de2ab16085f8d4cf3e500"
        ],
        [
            "Fixpoint mkFull (d : nat) (t : ShareTree) : option ShareTree := match d with |0 => match t with |Leaf b => Some (Leaf b) |Node l r => None end |S n => match t with |Leaf b => match (mkFull n (Leaf b)) with | Some t => Some (Node t t) |_ => None end |Node l r => match (mkFull n l, mkFull n r) with | (Some t1, Some t2) => Some (Node t1 t2) |_ => None end end end.",
            "VernacFixpoint",
            "1d288750030090b54d1a36e6fc4baaf12e7d8987"
        ],
        [
            "Fixpoint tree_round_leftP (n : nat) (t : ShareTree) : option ShareTree := match n with | 0 => None | 1 => match t with | Node (Leaf b1) (Leaf b2) => Some (Leaf b1) |_=> None end | S n' => match t with | Leaf b => Some (Leaf b) | Node t1 t2 => match (tree_round_leftP n' t1, tree_round_leftP n' t2) with | (Some t1', Some t2') => Some (Node t1' t2') | _ => None end end end.",
            "VernacFixpoint",
            "a83220640d16c34468193a011841d580640360e8"
        ],
        [
            "Definition tree_round_left (n : nat) (t : canonTree) : option canonTree:= match mkFull n (proj1_sig t) with | Some t' => match tree_round_leftP n t' with | Some t'' => Some (exist (fun t => canonicalTree t) (mkCanon t'') (mkCanon_correct _)) | None => None end | None => None end.",
            "VernacDefinition",
            "09d49de12f13d1960bdfc919da22779bee0c389a"
        ],
        [
            "Instance roundableL_tree : roundableLeft t := RoundableLeft tree_round_left.",
            "VernacInstance",
            "e89a0d9ef4caff6b646ca43d593f4dbed2562356"
        ],
        [
            "Fixpoint tree_round_rightP (n : nat) (t : ShareTree) : option ShareTree := match n with | 0 => None | 1 => match t with | Node (Leaf b1) (Leaf b2) => Some (Leaf b2) |_=> None end | S n' => match t with | Leaf b => Some (Leaf b) | Node t1 t2 => match (tree_round_rightP n' t1, tree_round_rightP n' t2) with | (Some t1', Some t2') => Some (Node t1' t2') | _ => None end end end.",
            "VernacFixpoint",
            "09b54bf115ac11a6b5d5d373745c34850a4deb33"
        ],
        [
            "Definition tree_round_right (n : nat) (t : canonTree) : option canonTree:= match mkFull n (proj1_sig t) with | Some t' => match tree_round_rightP n t' with | Some t'' => Some (exist (fun t => canonicalTree t) (mkCanon t'') (mkCanon_correct _)) | None => None end | None => None end.",
            "VernacDefinition",
            "6564a1eb7fb8dbbf3b6e1e05a7b52fa33f86bffc"
        ],
        [
            "Instance roundableR_tree : roundableRight t := RoundableRight tree_round_right.",
            "VernacInstance",
            "e9a55e2e829fadfa50b48b71fe2ae75fd9201e58"
        ],
        [
            "Fixpoint tree_avgP (t1 t2 : ShareTree) : option ShareTree := match (t1,t2) with |(Leaf b1, Leaf b2) => Some (Node (Leaf b1) (Leaf b2)) |(Node t11 t12, Node t21 t22) => match (tree_avgP t11 t21, tree_avgP t12 t22) with |(Some t1', Some t2') => Some (Node t1' t2') |_ => None end |_ => None end.",
            "VernacFixpoint",
            "d6133daf511a64a199960030ce3ec1ac21136202"
        ],
        [
            "Definition tree_avg (n : nat) (t1 t2 : canonTree) : option canonTree := match n with |0 => None |S n' => match (mkFull n' (proj1_sig t1), mkFull n' (proj1_sig t2)) with |(Some t1', Some t2') => match (tree_avgP t1' t2') with |Some t' => Some (exist (fun t => canonicalTree t) (mkCanon t') (mkCanon_correct _)) |None => None end |_ => None end end.",
            "VernacDefinition",
            "96818697892713d0257c02f98bbe8afe65c23b00"
        ],
        [
            "Instance avgable_tree : avgable t := Avgable tree_avg.",
            "VernacInstance",
            "142f9b52a2a9ede70c2ddd934f51e0a06afb483b"
        ],
        [
            "Lemma compose_canon1 : forall b1 b2,b1 <> b2 -> canonicalTree (Leaf b1) -> canonicalTree (Leaf b2) -> canonicalTree (Node (Leaf b1) (Leaf b2)).",
            "VernacStartTheoremProof",
            "42f95096d4d10fbcb8209dcfcf3ff6b6ea2c9ea0"
        ],
        [
            "intros; try icase b1;try icase b2;compute in *;tauto.",
            "VernacExtend",
            "4e28328848302e3ec36645177e06c185f52346db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compose_canon2 : forall b t1 t2, canonicalTree (Leaf b) -> canonicalTree (Node t1 t2)-> canonicalTree (Node (Leaf b) (Node t1 t2)).",
            "VernacStartTheoremProof",
            "1d32565c1bb40f7f6d51357f1318666745b28cb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl; firstorder.",
            "VernacExtend",
            "5569e2450a28f539c20b894ac76f01e7495507bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compose_canon3 : forall t1 t2 b, canonicalTree (Node t1 t2)-> canonicalTree (Leaf b) -> canonicalTree (Node (Node t1 t2) (Leaf b) ).",
            "VernacStartTheoremProof",
            "6996c1b5f9cabde1e9e611dc2df548626566c905"
        ],
        [
            "intros; simpl; firstorder.",
            "VernacExtend",
            "b938cb65215c2fcf232f3d8b0f024c5440a41e2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compose_canon4 : forall t1 t2 t3 t4, canonicalTree (Node t1 t2) -> canonicalTree (Node t3 t4) -> canonicalTree (Node (Node t1 t2) (Node t3 t4)).",
            "VernacStartTheoremProof",
            "7f2395d69a5f7a00f972cceeacea8e14f740b4d9"
        ],
        [
            "intros; simpl; firstorder.",
            "VernacExtend",
            "b938cb65215c2fcf232f3d8b0f024c5440a41e2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition recompose (tt : (canonTree*canonTree)): canonTree := let (t1, t2) := tt in let (x1, c1) := t1 in let (x2, c2) := t2 in match x1 as s return (canonicalTree s -> canonTree) with | Leaf b1 => fun c3 : canonicalTree (Leaf b1) => match x2 as s return (canonicalTree s -> canonTree) with | Leaf b2 => fun c4 : canonicalTree (Leaf b2) => match bool_dec b1 b2 with | left e => let H := eq_rec b1 (fun b3 : bool => canonicalTree (Leaf b3) -> canonTree) (fun _ : canonicalTree (Leaf b1) => exist (fun t : ShareTree => canonicalTree t) (Leaf b1) c3) b2 e in H c4 | right n => exist (fun t : ShareTree => canonicalTree t) (Node (Leaf b1) (Leaf b2)) (compose_canon1 b1 b2 n c3 c4) end | Node x21 x22 => fun c4 : canonicalTree (Node x21 x22) => exist (fun t : ShareTree => canonicalTree t) (Node (Leaf b1) (Node x21 x22)) (compose_canon2 b1 x21 x22 c3 c4) end c2 | Node x11 x12 => fun c3 : canonicalTree (Node x11 x12) => match x2 as s return (canonicalTree s -> canonTree) with | Leaf b2 => fun c4 : canonicalTree (Leaf b2) => exist (fun t : ShareTree => canonicalTree t) (Node (Node x11 x12) (Leaf b2)) (compose_canon3 x11 x12 b2 c3 c4) | Node x21 x22 => fun c4 : canonicalTree (Node x21 x22) => exist (fun t : ShareTree => canonicalTree t) (Node (Node x11 x12) (Node x21 x22)) (compose_canon4 x11 x12 x21 x22 c3 c4) end c2 end c1.",
            "VernacDefinition",
            "bc5ad7dcfebcaaeb73d759a7f1c7d8cfe09f83f7"
        ],
        [
            "Lemma tree_height_diff : forall t1 t2, height t1 <> height t2 -> t1 <> t2.",
            "VernacStartTheoremProof",
            "462d770bf6c8fcd7f24678ac384fee60e5391305"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intro H1;apply H.",
            "VernacExtend",
            "4fb6f967aeadb13b6734610be93a2631b261d70b"
        ],
        [
            "rewrite H1;trivial.",
            "VernacExtend",
            "898e530e8e03fcfe5f774f6e2b5b2f67998e5e5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTreeP_subL : forall n t1 t2, fullTreeP (Node t1 t2) (S n) -> fullTreeP t1 n.",
            "VernacStartTheoremProof",
            "f617d15e43953e2d301cc604711cecb6a1a1e410"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H as [_ [? _]].",
            "VernacExtend",
            "66bb7ff9891c688c7a02273ef27b47e5048dbe9f"
        ],
        [
            "replace (n-0) with n in * by omega.",
            "VernacExtend",
            "e162c0ea377dfce1731dc86f98c33bd402666849"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTreeP_subR : forall n t1 t2, fullTreeP (Node t1 t2) (S n) -> fullTreeP t2 n.",
            "VernacStartTheoremProof",
            "64c626f050bac83d16d231a5d978975d97c6446e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H as [_ [_ ?]].",
            "VernacExtend",
            "59de427df65ad789f1986ba3ee4953af0c632d32"
        ],
        [
            "replace (n-0) with n in * by omega.",
            "VernacExtend",
            "e162c0ea377dfce1731dc86f98c33bd402666849"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTreeP_height : forall n t, fullTreeP t n -> tree_heightP t = n.",
            "VernacStartTheoremProof",
            "bff530bad678700622db8ca408974dc6f97a799a"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct t0;inversion H.",
            "VernacExtend",
            "f6601ad380e88950478849592307f3862e4181de"
        ],
        [
            "simpl;trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct H as [_ [? ?]].",
            "VernacExtend",
            "59a28fd0dab9ea01996c71a819df927014cefc64"
        ],
        [
            "replace (n-0) with n in * by omega.",
            "VernacExtend",
            "e162c0ea377dfce1731dc86f98c33bd402666849"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (IHn t0_1 H);intro.",
            "VernacExtend",
            "ad49a2831c426463d6847a880555576662f9216c"
        ],
        [
            "generalize (IHn t0_2 H0);intro.",
            "VernacExtend",
            "bb83c1ea2be793ad5f432df1e49654880446a8f0"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite max_l; omega.",
            "VernacExtend",
            "101344384cc2e7a2b2f1e7d6d1a8d3ea172f4528"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTreeP_combine : forall t1 t2 n, fullTreeP t1 n -> fullTreeP t2 n -> fullTreeP (Node t1 t2) (S n).",
            "VernacStartTheoremProof",
            "a21da23f9e08dd5de0637012ac913b41cae15b6f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "split; replace (n-0) with n in * by omega; trivial.",
            "VernacExtend",
            "4fe64b1351c890be10703bdcdf8b810da5ccbf07"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTree_double : forall t, fullTree t -> fullTree (Node t t).",
            "VernacStartTheoremProof",
            "761e6b0ac7087b6847f6452d84c358e04080bc97"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold fullTree in *.",
            "VernacExtend",
            "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
        ],
        [
            "remember (tree_heightP (Node t0 t0)).",
            "VernacExtend",
            "7f6cf992de777037514e92123eab0a86dacefa19"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl in Heqn.",
            "VernacExtend",
            "17fed2902a2e0b05f608d15624a7081824b4a9a7"
        ],
        [
            "rewrite max_l in Heqn; trivial.",
            "VernacExtend",
            "1f1c8965f6e60151df9d1ca4bf21a458d5362e4c"
        ],
        [
            "destruct (tree_heightP t0); inversion Heqn.",
            "VernacExtend",
            "52a2912541cfca6ed75ed16432155c34c579c670"
        ],
        [
            "apply fullTreeP_combine; simpl in Heqn; rewrite max_l in Heqn;trivial; assert (n = tree_heightP t0) by omega; rewrite H0; trivial.",
            "VernacExtend",
            "5f43fe139928e8ed7553be4dcc272b79dc5ed1a8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fullTree_sub : forall t1 t2, fullTree (Node t1 t2) <-> (fullTree t1 /\\ fullTree t2 /\\ tree_heightP t1 = tree_heightP t2).",
            "VernacStartTheoremProof",
            "3543dc0832a5d1341437ce9f65cb34a0b7eac841"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold fullTree in *.",
            "VernacExtend",
            "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
        ],
        [
            "remember (tree_heightP (Node t1 t2)).",
            "VernacExtend",
            "15c0b7a43bdfc9f673f1e9b8e995dbfc7f744c99"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl in Heqn.",
            "VernacExtend",
            "17fed2902a2e0b05f608d15624a7081824b4a9a7"
        ],
        [
            "destruct ( max (tree_heightP t1) (tree_heightP t2)); inversion Heqn.",
            "VernacExtend",
            "0432d44c2d42ee54c2a37b3cd5d7a673cb04990c"
        ],
        [
            "generalize (fullTreeP_subL n t1 t2 H);intro.",
            "VernacExtend",
            "765fbd249a31207b122be128cab437e94d227e0a"
        ],
        [
            "generalize (fullTreeP_subR n t1 t2 H);intro.",
            "VernacExtend",
            "a4a836432e515c0040382d8c5b3238cb7c3d79f9"
        ],
        [
            "assert (tree_heightP t1 = n /\\ tree_heightP t2 = n).",
            "VernacExtend",
            "2337af4ea7e4ca144ac0ec94432e49fee96f9de2"
        ],
        [
            "generalize (fullTreeP_height n t1 H0);intro.",
            "VernacExtend",
            "c2aeb2de725263b1074c44385aedd7d581e9146a"
        ],
        [
            "generalize (fullTreeP_height n t2 H1);intro.",
            "VernacExtend",
            "bb0ffe3ae747d23463f4e985750f2396df8cf97d"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct H as [? [? ?]].",
            "VernacExtend",
            "7b80d34d0c991fb27b92313d17ea8675f1173807"
        ],
        [
            "unfold fullTree in *.",
            "VernacExtend",
            "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H1 in *.",
            "VernacExtend",
            "6efc0fda494639e9bce9f9de4bc64aa53e239e85"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "destruct (max (tree_heightP t2) (tree_heightP t2));omega.",
            "VernacExtend",
            "18badb8d47cf1870472f62e3bf7973b1390300c1"
        ],
        [
            "rewrite max_l;trivial.",
            "VernacExtend",
            "29ea12136ffafd0a981512684744da0684f86222"
        ],
        [
            "replace (tree_heightP t2 + 1 - 1) with (tree_heightP t2) in * by omega.",
            "VernacExtend",
            "47e1831d2d260c85a16a6ee0b90dbff4f96edfd5"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_height : forall n t t', mkFull n t = Some t' -> tree_heightP t' = n.",
            "VernacStartTheoremProof",
            "48e1ae7307968e8c7b3721a653613a4c8b9b1f58"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "destruct t0;inversion H.",
            "VernacExtend",
            "f6601ad380e88950478849592307f3862e4181de"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct t0;inversion H.",
            "VernacExtend",
            "f6601ad380e88950478849592307f3862e4181de"
        ],
        [
            "remember (mkFull n (Leaf b)).",
            "VernacExtend",
            "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "specialize ( IHn (Leaf b) s Heqo).",
            "VernacExtend",
            "524ae8048da932b4e4300089a70d5349fdd7d21b"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite max_l;trivial.",
            "VernacExtend",
            "29ea12136ffafd0a981512684744da0684f86222"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "remember (mkFull n t0_1).",
            "VernacExtend",
            "4ac7291bc276182eda510a0c12e659d6283086b8"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "remember (mkFull n t0_2).",
            "VernacExtend",
            "eec2681173bb0db737703314eb90877f3c13e66c"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "symmetry in Heqo0.",
            "VernacExtend",
            "68297959e7b7f7d51288f85870128a82c5b9160a"
        ],
        [
            "generalize (IHn t0_1 s Heqo);intro.",
            "VernacExtend",
            "089c8c7e05acb7afdef1b25b33adec2a74480e8d"
        ],
        [
            "generalize (IHn t0_2 s0 Heqo0);intro.",
            "VernacExtend",
            "2f6119033cd88ae30c7a1ad6870820b23350da78"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite max_l;trivial.",
            "VernacExtend",
            "29ea12136ffafd0a981512684744da0684f86222"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_correct : forall n t t', mkFull n t = Some t' -> fullTree t'.",
            "VernacStartTheoremProof",
            "116a3a074686f52f44bcfc2b7c055b6977b6f388"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct t0;inversion H.",
            "VernacExtend",
            "f6601ad380e88950478849592307f3862e4181de"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "remember (mkFull n (Leaf b)).",
            "VernacExtend",
            "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "specialize ( IHn (Leaf b) s Heqo).",
            "VernacExtend",
            "524ae8048da932b4e4300089a70d5349fdd7d21b"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "apply fullTree_double;trivial.",
            "VernacExtend",
            "d70e93b149375785ed777c8609a4e50bf21d68b0"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "remember (mkFull n t0_1).",
            "VernacExtend",
            "4ac7291bc276182eda510a0c12e659d6283086b8"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "remember (mkFull n t0_2).",
            "VernacExtend",
            "eec2681173bb0db737703314eb90877f3c13e66c"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "symmetry in Heqo0.",
            "VernacExtend",
            "68297959e7b7f7d51288f85870128a82c5b9160a"
        ],
        [
            "generalize (IHn t0_1 s Heqo);intro.",
            "VernacExtend",
            "089c8c7e05acb7afdef1b25b33adec2a74480e8d"
        ],
        [
            "generalize (IHn t0_2 s0 Heqo0);intro.",
            "VernacExtend",
            "2f6119033cd88ae30c7a1ad6870820b23350da78"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "generalize (fullTree_sub s s0);intro.",
            "VernacExtend",
            "a6a09c15c246cf372827a2f3450a3a0bbef61477"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "generalize (mkFull_height n t0_1 s Heqo);intro.",
            "VernacExtend",
            "75f56f226b266b81c54d224b108f3a7aaf34d739"
        ],
        [
            "generalize (mkFull_height n t0_2 s0 Heqo0);intro.",
            "VernacExtend",
            "5bf64b5a6ca9dda7b6d5a7f739a66c7167cfe022"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_mkCanon : forall n t t', mkFull n t = Some t' -> mkCanon t = mkCanon t'.",
            "VernacStartTheoremProof",
            "d5e06dfb8e90f1f0c8713cc5151dc705329f8f4f"
        ],
        [
            "induction n;intros; icase t0;icase t'; inv H;trivial.",
            "VernacExtend",
            "d2ce13781ec0238b04474d6b13aca5f4f4ae815f"
        ],
        [
            "icase (mkFull n (Leaf b)).",
            "VernacExtend",
            "139412c3c235384eee87742c728752d11d38f05a"
        ],
        [
            "remember (mkFull n (Leaf b)).",
            "VernacExtend",
            "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
        ],
        [
            "icase o.",
            "VernacExtend",
            "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "generalize (IHn _ _ Heqo);intro.",
            "VernacExtend",
            "3c5dc0b4af366adce56992347aefc82870e3a4f4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "icase (mkFull n t0_1); icase (mkFull n t0_2).",
            "VernacExtend",
            "e7dfc5b52c17f6ac62c2b6f7be63df8d4bfb3154"
        ],
        [
            "remember (mkFull n t0_1); remember (mkFull n t0_2).",
            "VernacExtend",
            "9ea04dd2a852b16a64f5e63e58c22e661fd0ea14"
        ],
        [
            "icase o;icase o0.",
            "VernacExtend",
            "efc863315bd6375d7e89a1c9d8ae1db5ed5244f6"
        ],
        [
            "symmetry in Heqo, Heqo0.",
            "VernacExtend",
            "2306a47a0eb7714afe2eee703bc366e880159bad"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "generalize (IHn _ _ Heqo);intro H1.",
            "VernacExtend",
            "ff53a1633f4b77a5c937e1edc9bd366d40d1fc2c"
        ],
        [
            "generalize (IHn _ _ Heqo0);intro H2.",
            "VernacExtend",
            "ca54ddaefb43877475023594220195b4f7b586fd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_split : forall n t1 t2 t1' t2', mkFull (S n) (Node t1 t2) = Some (Node t1' t2') <-> (mkFull n t1 = Some t1' /\\ mkFull n t2 = Some t2').",
            "VernacStartTheoremProof",
            "543a4406027533eca5dd7d347b12f13972bf6861"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split; remember (mkFull n t1); remember (mkFull n t2); icase o;icase o0;intros.",
            "VernacExtend",
            "d8adee10f12438fe651432ca0fbe1038b13fd0e7"
        ],
        [
            "inv H;tauto.",
            "VernacExtend",
            "c067a0d6463b36c3816a2db8b7d71ae906392923"
        ],
        [
            "destruct H as [H1 H2];inv H1; inv H2;trivial.",
            "VernacExtend",
            "d150f515330d38ebb7fb3572a63e0370393064b7"
        ],
        [
            "destruct H as [H1 H2];inv H1;inv H2.",
            "VernacExtend",
            "671e6752a5251b0217c4a690e660c91db08ed836"
        ],
        [
            "destruct H as [H1 H2];inv H1;inv H2.",
            "VernacExtend",
            "671e6752a5251b0217c4a690e660c91db08ed836"
        ],
        [
            "destruct H as [H1 H2];inv H1;inv H2.",
            "VernacExtend",
            "671e6752a5251b0217c4a690e660c91db08ed836"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_mkCanon_simpl : forall n t1 t2, mkFull (S n) (mkCanon (Node t1 t2)) = mkFull (S n) (Node (mkCanon t1) (mkCanon t2)).",
            "VernacStartTheoremProof",
            "fb492a13da951f37a98cc74bdc59f82b6753b4eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (mkCanon t1);icase (mkCanon t2).",
            "VernacExtend",
            "bd811165e0811144726988c940e4a7a2b69f2333"
        ],
        [
            "icase (bool_dec b b0);subst;trivial.",
            "VernacExtend",
            "5a1c117e7ceab212772596d504f35e9331e3755c"
        ],
        [
            "icase (mkFull n (Leaf b0)).",
            "VernacExtend",
            "172fc4dc9d2d67273b159200591867e9cc2c29c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_None : forall n t, n < tree_heightP t -> mkFull n t = None.",
            "VernacStartTheoremProof",
            "2df975f1fa8c9f94bae8d239d93ca678ffb3855c"
        ],
        [
            "induction n;intros; icase t0.",
            "VernacExtend",
            "db0ff5335e9b1ba61e5b9c663c76103afc6e6522"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (n < max (tree_heightP t0_1) (tree_heightP t0_2)) by omega.",
            "VernacExtend",
            "eb3a0d6b620cdb08c5fb498e852ee1d646ba9edd"
        ],
        [
            "generalize (Nat.max_lt_iff);intro.",
            "VernacExtend",
            "cb739092ddf4ffd5d4a3f7efb73570880fb78ea7"
        ],
        [
            "specialize ( H1 (tree_heightP t0_1) (tree_heightP t0_2) n).",
            "VernacExtend",
            "4d4d32742e0f75d5ae595bbbb76286cb43ca7557"
        ],
        [
            "destruct H1 as [? _].",
            "VernacExtend",
            "5b34589a2b4f60317a6fa0bbb0fcc15c72e975c5"
        ],
        [
            "specialize ( H1 H0).",
            "VernacExtend",
            "c30535d0a736db8f5e79c68666236ba4942df923"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "specialize ( IHn t0_1 H1).",
            "VernacExtend",
            "b0b267339510032d0a6adabb257091354018c0d4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHn; trivial.",
            "VernacExtend",
            "4e962862d28a8f66550c88f4f83b0ddc4e5c2840"
        ],
        [
            "specialize ( IHn t0_2 H1).",
            "VernacExtend",
            "08ae425e2799018d6e9c435b49d81d09ed5c1916"
        ],
        [
            "simpl;rewrite IHn.",
            "VernacExtend",
            "0af9eeb901f7eb58c6970ee73e02aae201e6b905"
        ],
        [
            "icase (mkFull n t0_1);trivial.",
            "VernacExtend",
            "dbcc413e447e92ac955cc167dfc18ebe137fbdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFull_Some : forall n t, n >= tree_heightP t -> exists t', mkFull n t = Some t'.",
            "VernacStartTheoremProof",
            "8cea33f75b5037b8ee0d0b784ca39454a1794a33"
        ],
        [
            "induction n;intros; icase t0.",
            "VernacExtend",
            "db0ff5335e9b1ba61e5b9c663c76103afc6e6522"
        ],
        [
            "exists (Leaf b).",
            "VernacExtend",
            "c2537af1a693c04da82fff1d7e0c25eb1ef512a7"
        ],
        [
            "compute;trivial.",
            "VernacExtend",
            "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "elimtype False;omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "assert (n >= tree_heightP (Leaf b)).",
            "VernacExtend",
            "e9ec835b917443b45e2fda1f0984229458acdffe"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "specialize ( IHn (Leaf b) H0).",
            "VernacExtend",
            "2e81cbceb83ee4dca85d279d49772eefcbeee306"
        ],
        [
            "destruct IHn.",
            "VernacExtend",
            "fbccbe66efd893d419c71173f3fec415f9a1a6e2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "exists (Node x x).",
            "VernacExtend",
            "16271e4391aa2389e1509d37d6f7ef54d65f568f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (n >= max (tree_heightP t0_1) (tree_heightP t0_2)) by omega.",
            "VernacExtend",
            "a800c24ca2248281671edd0d379858b3be763906"
        ],
        [
            "generalize (le_max_l (tree_heightP t0_1) (tree_heightP t0_2));intro.",
            "VernacExtend",
            "0ebefd99b6e18cd53aab4be3e068fd9795b4679a"
        ],
        [
            "generalize (le_max_r (tree_heightP t0_1) (tree_heightP t0_2));intro.",
            "VernacExtend",
            "7cd9174d682b535f64e4f235e59b0c0a743cee5a"
        ],
        [
            "assert (n >= tree_heightP t0_1) by omega.",
            "VernacExtend",
            "8ef5049a7d6fd0e2e51179b71a437f65d8b8c4d6"
        ],
        [
            "assert (n >= tree_heightP t0_2) by omega.",
            "VernacExtend",
            "9e94e6b2f56f2ff717cb5f7af6407c84e43663fd"
        ],
        [
            "generalize (IHn _ H3);intro.",
            "VernacExtend",
            "9cbb34800a9b9f446a784fbe9b893fdd8168ed31"
        ],
        [
            "generalize (IHn _ H4);intro.",
            "VernacExtend",
            "cb5427d35e5a2ace42cf9d3b9c38b0c90e708b86"
        ],
        [
            "destruct H5.",
            "VernacExtend",
            "ed9c2c1b0fd20c14ad03acc37362cc2c315199ed"
        ],
        [
            "destruct H6.",
            "VernacExtend",
            "bc461651d0c512c537c7e617c1056b84fca2b832"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "exists (Node x x0);trivial.",
            "VernacExtend",
            "e856b68287684ecb577f6175b1f4c3a5af0f426d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_eq_split : forall t1 t2 t1' t2', mkCanon (Node t1 t2) = mkCanon (Node t1' t2') -> mkCanon t1 = mkCanon t1' /\\ mkCanon t2 = mkCanon t2'.",
            "VernacStartTheoremProof",
            "9f927b097b78bb567d687e95c6158be5a51fbc8e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "icase (mkCanon t1);icase (mkCanon t2); icase (mkCanon t1');icase (mkCanon t2'); try icase (bool_dec b b0);try icase (bool_dec b1 b2);inversion H;try subst;auto; try icase (bool_dec b0 b1).",
            "VernacExtend",
            "fb86cd6eb4db5661e7904707119c8bcbf0a0ff4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_simpl : forall t1 t2, mkCanon (Node (mkCanon t1) (mkCanon t2)) = mkCanon (Node t1 t2).",
            "VernacStartTheoremProof",
            "760eb9c946babfe27eeb866638b2e6268e1dbc9d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_double t1);intro.",
            "VernacExtend",
            "cd1a2d5cbfe1c709b18aa0b26dfd370ac006dee3"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "generalize (mkCanon_double t2);intro.",
            "VernacExtend",
            "0852dea08a0dd812346442de42b5bfaaafbb8eba"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "icase (mkCanon t1);icase (mkCanon t2).",
            "VernacExtend",
            "bd811165e0811144726988c940e4a7a2b69f2333"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_height : forall t t', mkCanon t = t' -> tree_heightP t' <= tree_heightP t.",
            "VernacStartTheoremProof",
            "9601c492b26280e4e01759cf313f108b941c004d"
        ],
        [
            "induction t0;intros.",
            "VernacExtend",
            "d5b57f6e82495304d613378e5f8ec6391beeb195"
        ],
        [
            "generalize (mkCanon_Leaf b);intro.",
            "VernacExtend",
            "09fc7ae890766f9f57b21006218e95f87b4b4707"
        ],
        [
            "rewrite H in H0.",
            "VernacExtend",
            "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase t'.",
            "VernacExtend",
            "42f85af8b2f3076293ad1936857e7cce5ddc0910"
        ],
        [
            "symmetry in H.",
            "VernacExtend",
            "5ef7cf40d6f1a8a9f9fae5220b667eef42ea5534"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ H);intro.",
            "VernacExtend",
            "3ec4815b89f66ca0633b02d96294b9b7911ee694"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ H);intro.",
            "VernacExtend",
            "170b5af38d77efa702040c24ee32fcb526e622e2"
        ],
        [
            "destruct H0 as [? ?].",
            "VernacExtend",
            "0f697508c155a692f324e9ae2fc37c0385689df4"
        ],
        [
            "specialize ( IHt0_1 t'1 H0).",
            "VernacExtend",
            "c78f55ef61c4ed0c72f447fcf3305b6ad8059ae2"
        ],
        [
            "specialize (IHt0_2 t'2 H1).",
            "VernacExtend",
            "56b35aa9529c12636d25c9ef8a0cc19ed7fe8d2b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (max (tree_heightP t'1) (tree_heightP t'2) <= max (tree_heightP t0_1) (tree_heightP t0_2) ).",
            "VernacExtend",
            "27e9380fc8568dade0077e877521a3ef791f6990"
        ],
        [
            "generalize (le_max_l (tree_heightP t0_1) (tree_heightP t0_2));intro.",
            "VernacExtend",
            "0ebefd99b6e18cd53aab4be3e068fd9795b4679a"
        ],
        [
            "generalize (le_max_r (tree_heightP t0_1) (tree_heightP t0_2));intro.",
            "VernacExtend",
            "7cd9174d682b535f64e4f235e59b0c0a743cee5a"
        ],
        [
            "apply max_lub;omega.",
            "VernacExtend",
            "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_rewrite : forall t, exists t1, exists t2, mkCanon t = mkCanon (Node t1 t2).",
            "VernacStartTheoremProof",
            "70dad9bb4c861aff45a42370f71cefd2c7f93b47"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase t0.",
            "VernacExtend",
            "c910a652411f4e6c82c42760501e1073743b9ac9"
        ],
        [
            "exists (Leaf b); exists (Leaf b).",
            "VernacExtend",
            "8175f380e9219534b146fdcd5edca1671cf7b921"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "exists t0_1;exists t0_2;trivial.",
            "VernacExtend",
            "9650470257a17f3aa50cc75748e40f5f51c632e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_rewrite1 : forall (t' : canonTree), exists t1, exists t2, t' = (exist (fun t => canonicalTree t) (mkCanon (Node t1 t2)) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "441c817b99215fe3cb985bbfe7702e98647f3bec"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t' as [x c].",
            "VernacExtend",
            "c74ee216e8b8d083a9fd97e616fcd5158286a54d"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "exists (Leaf b);exists (Leaf b).",
            "VernacExtend",
            "8175f380e9219534b146fdcd5edca1671cf7b921"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "exists x1; exists x2.",
            "VernacExtend",
            "80c3d14ed148688986cd04da55cd74a5f64df526"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply mkCanon_identity.",
            "VernacExtend",
            "50e1638254cb5c0364ae7e946f67b824fe968c15"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_rewrite2: forall (t : canonTree), t = exist (fun t => canonicalTree t) (mkCanon (proj1_sig t)) (mkCanon_correct _).",
            "VernacStartTheoremProof",
            "f313d8ad1048dedf00ec788c76fcbdba8d610a53"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0 as [x c].",
            "VernacExtend",
            "1bbd86825644f3222b59ad972d4c2be0ab656553"
        ],
        [
            "apply exist_ext;simpl;trivial.",
            "VernacExtend",
            "6ddef3cd6dd9c36fd22fd33fc4624e3d6805a0d4"
        ],
        [
            "generalize (mkCanon_identity x c);intro.",
            "VernacExtend",
            "1d5e7841d0bece6654b1791002d24960834700ff"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_height_split : forall n t11 t12 t21 t22, max (tree_heightP (mkCanon (Node t11 t12))) (tree_heightP (mkCanon (Node t21 t22))) < S (S n) -> max (tree_heightP (mkCanon t11)) (tree_heightP (mkCanon t21)) < S n /\\ max (tree_heightP (mkCanon t12)) (tree_heightP (mkCanon t22)) < S n.",
            "VernacStartTheoremProof",
            "3afd4b5880396ea4372c4cdac016d2ea90cb0ebf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)).",
            "VernacExtend",
            "e406d54abc9ac7b1c5dfe8e6a4ab98e3a2748bb8"
        ],
        [
            "icase s;icase s0.",
            "VernacExtend",
            "161ab773bbd450aff668142fa775d0ee740c7c83"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "5623a56ef660641db9c08b1c976cdc082e775789"
        ],
        [
            "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
            "VernacExtend",
            "979bd7453c83386d4d2449de40c920f8b75e730f"
        ],
        [
            "rewrite H11,H12,H21,H22.",
            "VernacExtend",
            "c46e6b7fb5bf86e104b60be539bc7bad83566590"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "symmetry in Heqs0.",
            "VernacExtend",
            "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "de65540df45112df3dcacbba4b373e82189caf3b"
        ],
        [
            "destruct H1 as [H11 H12].",
            "VernacExtend",
            "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
        ],
        [
            "destruct H2 as [H21 H22].",
            "VernacExtend",
            "9875398f5504c3c30f8e5d09f2ed52249547376e"
        ],
        [
            "rewrite H11,H12,H21,H22.",
            "VernacExtend",
            "c46e6b7fb5bf86e104b60be539bc7bad83566590"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (max (tree_heightP s0_1) (tree_heightP s0_2) < S n) by omega.",
            "VernacExtend",
            "2834a7e506759c5756567afe06286ea73caadaf6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (le_max_l (tree_heightP s0_1) (tree_heightP s0_2));intro H31.",
            "VernacExtend",
            "917a54c72c854a5f5ddb3cf841f13873828d85b9"
        ],
        [
            "generalize (le_max_r (tree_heightP s0_1) (tree_heightP s0_2));intro H32.",
            "VernacExtend",
            "0a2c8df7201017d6042deaf63a4ead322f5ae82d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "symmetry in Heqs.",
            "VernacExtend",
            "9275975760708605add45ad78ef8579587cb34e0"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "190d066172ca6894f5bc4464e36cd3a66075d8b3"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "5623a56ef660641db9c08b1c976cdc082e775789"
        ],
        [
            "destruct H1 as [H11 H12].",
            "VernacExtend",
            "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
        ],
        [
            "destruct H2 as [H21 H22].",
            "VernacExtend",
            "9875398f5504c3c30f8e5d09f2ed52249547376e"
        ],
        [
            "rewrite H11,H12,H21,H22.",
            "VernacExtend",
            "c46e6b7fb5bf86e104b60be539bc7bad83566590"
        ],
        [
            "replace (max (tree_heightP (Node s1 s2)) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP (Node s1 s2)) ) in H by apply max_comm.",
            "VernacExtend",
            "f3a5cfa20cfcde53eb41a51e4c3450c2d40e79f4"
        ],
        [
            "replace (max (tree_heightP s1) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP s1)) by apply max_comm.",
            "VernacExtend",
            "e469a81b0fa1b6e9b8712612d96c24c2d6855aba"
        ],
        [
            "replace (max (tree_heightP s2) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP s2)) by apply max_comm.",
            "VernacExtend",
            "ca3cdf2dca3428fd79241a1e492d05f7f0f9dea4"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (max (tree_heightP s1) (tree_heightP s2) < S n) by omega.",
            "VernacExtend",
            "df298a6c0f9800cc6af610b65a47310fd30b2f7b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (le_max_l (tree_heightP s1) (tree_heightP s2));intro H31.",
            "VernacExtend",
            "f0c55a49e4c986fdc89f447c97abd5fb23aa1359"
        ],
        [
            "generalize (le_max_r (tree_heightP s1) (tree_heightP s2));intro H32.",
            "VernacExtend",
            "eb190a36c46ff37abe5f60704daa1e1df48e195d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "symmetry in Heqs,Heqs0.",
            "VernacExtend",
            "3bf590587427358e6d96401a0d02b70be30779ba"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "190d066172ca6894f5bc4464e36cd3a66075d8b3"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "de65540df45112df3dcacbba4b373e82189caf3b"
        ],
        [
            "destruct H1 as [H11 H12].",
            "VernacExtend",
            "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
        ],
        [
            "destruct H2 as [H21 H22].",
            "VernacExtend",
            "9875398f5504c3c30f8e5d09f2ed52249547376e"
        ],
        [
            "rewrite H11,H12,H21,H22.",
            "VernacExtend",
            "c46e6b7fb5bf86e104b60be539bc7bad83566590"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "generalize (plus_max_distr_r (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)) 1); intro H3.",
            "VernacExtend",
            "a30c21181f9aa7c38aba22bc765668d6f74c79cb"
        ],
        [
            "rewrite H3 in H.",
            "VernacExtend",
            "0be418eec9aacd60a81dcbee150a519cdf3b54a0"
        ],
        [
            "assert (max (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)) < S n) by omega.",
            "VernacExtend",
            "206e0f8e587904b70ab074d96228a533b7851462"
        ],
        [
            "generalize (le_max_r (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)));intro H4.",
            "VernacExtend",
            "3bd881cd0c3171446227794554aa2067ef598f70"
        ],
        [
            "generalize (le_max_l (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)));intro H5.",
            "VernacExtend",
            "5a88c738b32f0e58d56b049d95a2f6ed151d968b"
        ],
        [
            "generalize (le_max_r (tree_heightP s1) (tree_heightP s2));intro H6.",
            "VernacExtend",
            "8a046efe55321732861a94f310a4a3bf7ca37126"
        ],
        [
            "generalize (le_max_l (tree_heightP s1) (tree_heightP s2));intro H7.",
            "VernacExtend",
            "1ec1416c175ce1bf62c00f992aa2e722ad8b58fd"
        ],
        [
            "generalize (le_max_r (tree_heightP s0_1) (tree_heightP s0_2));intro H8.",
            "VernacExtend",
            "92b7eb055318714a2cff3f753bf82dbb5ef48fe2"
        ],
        [
            "generalize (le_max_l (tree_heightP s0_1) (tree_heightP s0_2));intro H9.",
            "VernacExtend",
            "ad836e7cdc771ed97701e83f3342dd1000ac89e4"
        ],
        [
            "assert (tree_heightP s1 <= n) by omega.",
            "VernacExtend",
            "6016ce375afc2a4a799f7356c0109db6c78bb92e"
        ],
        [
            "assert (tree_heightP s2 <= n) by omega.",
            "VernacExtend",
            "98f6b240aa2351049b5d687d6e277fab8a633fde"
        ],
        [
            "assert (tree_heightP s0_1 <= n) by omega.",
            "VernacExtend",
            "0c98e439c27774010aec364b19bf7a7e77639a05"
        ],
        [
            "assert (tree_heightP s0_2 <= n) by omega.",
            "VernacExtend",
            "ab9f46452ad30b753bfdef929d542905e66e637d"
        ],
        [
            "generalize (max_lub _ _ _ H1 H10);intro H14.",
            "VernacExtend",
            "d3900f2c610dd18453494d0a94542cd2abb0ac6d"
        ],
        [
            "generalize (max_lub _ _ _ H2 H13);intro H15.",
            "VernacExtend",
            "baefc5bda61ef2bedc5dea270715e89e8fdb595a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_diff : forall t11 t12 t21 t22, mkCanon (Node t11 t12) <> mkCanon (Node t21 t22) -> mkCanon t11 <> mkCanon t21 \\/ mkCanon t12 <> mkCanon t22.",
            "VernacStartTheoremProof",
            "720260df349877bef0ea9db71289da44d043b8d2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (shareTree_dec_eq (mkCanon t11) (mkCanon t21));intro H1.",
            "VernacExtend",
            "6be9053d5e3ca19ed1b4cea407aeea0a349a5fe1"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro H1;apply H.",
            "VernacExtend",
            "4fb6f967aeadb13b6734610be93a2631b261d70b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite e,H1;trivial.",
            "VernacExtend",
            "d3a20fe8ede8a70d03859b081c6faa8636019abf"
        ],
        [
            "left;trivial.",
            "VernacExtend",
            "2f1efd67ff23560c270a9589d0d1b100a9c80732"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_proof_irr: forall t1 t2 c1 c2, t1 = t2 -> exist (fun t => canonicalTree t) t1 c1 = exist (fun t => canonicalTree t) t2 c2.",
            "VernacStartTheoremProof",
            "51ca8ef3588fcf26b7c9a8c11b25c50c34625225"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply exist_ext;trivial.",
            "VernacExtend",
            "57a542efd5803f9f450ee003dbdb7ed63247566f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonTree_combine : forall t1 t2, canonicalTree t1 -> canonicalTree t2 -> max (tree_heightP t1) (tree_heightP t2) > 0 -> canonicalTree (Node t1 t2).",
            "VernacStartTheoremProof",
            "712d8229c76be123c615cc824ccae830b1301964"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (max_dec (tree_heightP t1) (tree_heightP t2));intro H2.",
            "VernacExtend",
            "af7f22be9a72320b6538a6e6dbd635aa9be29758"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "rewrite e in H1.",
            "VernacExtend",
            "a28d6916e25ed5087d44f185739fc8bbd69ba445"
        ],
        [
            "icase t1.",
            "VernacExtend",
            "e055cabe3107ded6bea02161ec5b25d83588817a"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "rewrite e in H1.",
            "VernacExtend",
            "a28d6916e25ed5087d44f185739fc8bbd69ba445"
        ],
        [
            "icase t2.",
            "VernacExtend",
            "2898deeb43a78b1839a90863fb466bca6fde01b3"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_intersect : forall t1 t2, mkCanon (intersect_tree (mkCanon t1) (mkCanon t2)) = mkCanon (intersect_tree t1 t2).",
            "VernacStartTheoremProof",
            "c9526e63c39a06d071949966de9b6b40fea897d9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists n, n >= max (tree_heightP t1) (tree_heightP t2)).",
            "VernacExtend",
            "03dd3182aa4df662a2e4199d61fa6a33878c0469"
        ],
        [
            "exists (max (tree_heightP t1) (tree_heightP t2));omega.",
            "VernacExtend",
            "41f33d3a4287e710f99fe3054076749e921b5685"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "revert H.",
            "VernacExtend",
            "6842e040dd98a07b1eb54bbabc9c3f1076566a9a"
        ],
        [
            "revert t2 t1.",
            "VernacExtend",
            "8afc57ec65f3c5d54becc13f716c653ead5305ce"
        ],
        [
            "induction x;intros.",
            "VernacExtend",
            "967005fa252895ab470aa9876d40c37f363bf6d6"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "remember (tree_heightP (Node t2_1 t2_2)).",
            "VernacExtend",
            "166dddff85ff74575d4fada1110526ca654256cb"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "inversion Heqn.",
            "VernacExtend",
            "34f8462da0501cfa82647625d34ac4fea03cbd33"
        ],
        [
            "destruct (max (tree_heightP t2_1) (tree_heightP t2_2));elimtype False ;omega.",
            "VernacExtend",
            "4326b25aa24f14010e3b3f1df18438007bacc365"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "destruct (max (tree_heightP t1_1) (tree_heightP t1_2));inversion H1.",
            "VernacExtend",
            "a865c761ef46fb2cad373b60b1f8b330e6f65c47"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "destruct (max (tree_heightP t1_1) (tree_heightP t1_2)); destruct (max (tree_heightP t2_1) (tree_heightP t2_2)); inversion H1.",
            "VernacExtend",
            "2b3e6cf8b854a6a163a0c70cb0207ed7efce2f41"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
            "VernacExtend",
            "92cf76fe631ac25a334e03d7f89456639e854f7b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "unfold intersect_tree.",
            "VernacExtend",
            "62f0cbf672e9f0a3f2d40a543cda8b3977ac1681"
        ],
        [
            "apply mkCanon_double.",
            "VernacExtend",
            "bd673e0198e52abcf80665d4d80939f987ec580f"
        ],
        [
            "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
            "VernacExtend",
            "92cf76fe631ac25a334e03d7f89456639e854f7b"
        ],
        [
            "replace (intersect_tree (mkCanon (Node t1_1 t1_2)) (Leaf b)) with (intersect_tree(Leaf b)(mkCanon (Node t1_1 t1_2))) by apply intersect_commute.",
            "VernacExtend",
            "3d34e95dafe12f6b2c6e9bd3801a95c26585ad11"
        ],
        [
            "replace (intersect_tree ( (Node t1_1 t1_2)) (Leaf b)) with (intersect_tree(Leaf b)(Node t1_1 t1_2)) by apply intersect_commute.",
            "VernacExtend",
            "85444539e0dc181e3e5a44995de3df4a44ab61e0"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "unfold intersect_tree.",
            "VernacExtend",
            "62f0cbf672e9f0a3f2d40a543cda8b3977ac1681"
        ],
        [
            "apply mkCanon_double.",
            "VernacExtend",
            "bd673e0198e52abcf80665d4d80939f987ec580f"
        ],
        [
            "assert (x >= max (tree_heightP t1_1) (tree_heightP t2_1)).",
            "VernacExtend",
            "720c78affc0bf92c3622eb27c1217f64e30bce1f"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
            "VernacExtend",
            "0d247f450c95bf07dd150ec25290349c3f9b041a"
        ],
        [
            "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
            "VernacExtend",
            "7a7f3b025a777711289bbfa545257b7f3219a629"
        ],
        [
            "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
            "VernacExtend",
            "ddace4781e469afa72530ffe9510e612fc0ce661"
        ],
        [
            "rewrite<- H0 in H;clear H0.",
            "VernacExtend",
            "c8d008f6a681b3aa396caf5a4a36d040353c5bea"
        ],
        [
            "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
            "VernacExtend",
            "0a9b828055b85307b530f0ff2561f8b7658f620c"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
            "VernacExtend",
            "4f697524f71507015df6555e5dfa93d3ad44fe72"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
            "VernacExtend",
            "99d591959b3419c73d118a5ab4f2e91b5accea25"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_1).",
            "VernacExtend",
            "bb6914e35f2f71e8f906a4bfa7c04d0ecea8c4b6"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_1).",
            "VernacExtend",
            "7fe06ca08d0477228f6b819f522c3f9b0b080a7b"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "apply max_lub;omega.",
            "VernacExtend",
            "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
        ],
        [
            "assert (x >= max (tree_heightP t1_2) (tree_heightP t2_2)).",
            "VernacExtend",
            "4bec309b3e71bd7e674fe6f91ae2fdad44168a58"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
            "VernacExtend",
            "0d247f450c95bf07dd150ec25290349c3f9b041a"
        ],
        [
            "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
            "VernacExtend",
            "7a7f3b025a777711289bbfa545257b7f3219a629"
        ],
        [
            "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
            "VernacExtend",
            "ddace4781e469afa72530ffe9510e612fc0ce661"
        ],
        [
            "rewrite<- H1 in H;clear H1.",
            "VernacExtend",
            "cd8b55612d8b1cd5dd22277bd74c76417adb6480"
        ],
        [
            "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
            "VernacExtend",
            "0a9b828055b85307b530f0ff2561f8b7658f620c"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
            "VernacExtend",
            "4f697524f71507015df6555e5dfa93d3ad44fe72"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
            "VernacExtend",
            "99d591959b3419c73d118a5ab4f2e91b5accea25"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_2).",
            "VernacExtend",
            "e081a61f6ab3ebea723cc8d004cbb8fd97b5c214"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_2).",
            "VernacExtend",
            "1bb473544ad68959f318df74d89b33b14dc5138a"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "apply max_lub;omega.",
            "VernacExtend",
            "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
        ],
        [
            "generalize (IHx _ _ H0);intro.",
            "VernacExtend",
            "c6356c640473cbc82c60133a7ad64bfb95e1385c"
        ],
        [
            "generalize (IHx _ _ H1);intro.",
            "VernacExtend",
            "c534ce5587bba324b7e77225fe54d50bbe57b3c3"
        ],
        [
            "remember (mkCanon (Node t1_1 t1_2)); remember (mkCanon (Node t2_1 t2_2)).",
            "VernacExtend",
            "a3f2e0708a4e588e4bffade15f6c0142339eba6d"
        ],
        [
            "icase s;icase s0.",
            "VernacExtend",
            "161ab773bbd450aff668142fa775d0ee740c7c83"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
            "VernacExtend",
            "2913c7f415056c6f42826426c576ad14be131b68"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
            "VernacExtend",
            "a3cb58c11b5ba51941895458842055d394606df7"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H51 in *.",
            "VernacExtend",
            "b7d83e75ecef6ea410b4f382809360657e65e858"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite H52 in *.",
            "VernacExtend",
            "00b69e3806d8ddfd959bf1cb45a73f10a04902ef"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (mkCanon_Leaf b0);intro.",
            "VernacExtend",
            "c23b1909a67e14bfa7ffe0bbcf473089b2ed3d5d"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "icase (bool_dec b0 b0);trivial.",
            "VernacExtend",
            "2a2808120933a7f28679ebc5ada94c799f582c3c"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
            "VernacExtend",
            "2913c7f415056c6f42826426c576ad14be131b68"
        ],
        [
            "symmetry in Heqs0.",
            "VernacExtend",
            "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
            "VernacExtend",
            "d47cf62474b3562786f61978d6f5a242afc0c60c"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite<- H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<- H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<-H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<-H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
            "VernacExtend",
            "a3cb58c11b5ba51941895458842055d394606df7"
        ],
        [
            "symmetry in Heqs.",
            "VernacExtend",
            "9275975760708605add45ad78ef8579587cb34e0"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
            "VernacExtend",
            "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite H41 in *.",
            "VernacExtend",
            "0303e636a875793fb155bb219f8ad53bd97c570c"
        ],
        [
            "rewrite H42 in *.",
            "VernacExtend",
            "120e85b63c3023d93138d115b0efe65c65fb3c11"
        ],
        [
            "rewrite<- H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<- H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "replace (intersect_tree (Node (mkCanon t1_1) (mkCanon t1_2)) (Leaf b)) with (intersect_tree (Leaf b) (Node (mkCanon t1_1) (mkCanon t1_2))) by apply intersect_commute.",
            "VernacExtend",
            "046c6bafbf1f87549609546f9268ca3a75cea6c3"
        ],
        [
            "replace (intersect_tree (mkCanon t1_1) (Leaf b)) with (intersect_tree (Leaf b)(mkCanon t1_1)) in H2 by apply intersect_commute.",
            "VernacExtend",
            "c4c38e10660d4f2ac7cc02ba7497c74516a90fac"
        ],
        [
            "replace (intersect_tree (mkCanon t1_2) (Leaf b)) with (intersect_tree (Leaf b)(mkCanon t1_2)) in H3 by apply intersect_commute.",
            "VernacExtend",
            "b3d06bf9cab2df1a7201d100c004d2bc95182bf2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<-H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite<-H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "symmetry in Heqs, Heqs0.",
            "VernacExtend",
            "3bf590587427358e6d96401a0d02b70be30779ba"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
            "VernacExtend",
            "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
            "VernacExtend",
            "d47cf62474b3562786f61978d6f5a242afc0c60c"
        ],
        [
            "destruct H4 as [H41 H42].",
            "VernacExtend",
            "217aceee8059cf8527a7842f56c35476f1cc853a"
        ],
        [
            "destruct H5 as [H51 H52].",
            "VernacExtend",
            "f9068bc493859ce9e1999c4ac13f155c2521e036"
        ],
        [
            "rewrite<-H41 in *.",
            "VernacExtend",
            "ffefabf6ca3b9c3c5f90c11b36828d0f0acf154f"
        ],
        [
            "rewrite<- H42 in *.",
            "VernacExtend",
            "0c96bf4f5abff5d69b0c6d7f65737bd37baa6ee5"
        ],
        [
            "rewrite<-H51 in *.",
            "VernacExtend",
            "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
        ],
        [
            "rewrite<-H52 in *.",
            "VernacExtend",
            "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_join_split : forall t11 t12 t21 t22 t31 t32, join (exist (fun t => canonicalTree t)(mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon (Node t21 t22)) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon (Node t31 t32)) (mkCanon_correct _))-> join (exist (fun t => canonicalTree t)(mkCanon t11) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t21) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t31) (mkCanon_correct _))/\\ join (exist (fun t => canonicalTree t)(mkCanon t12) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t22) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t32) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "6cf771c96f312b9470ea3a83be4afc922c33d281"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "red in H.",
            "VernacExtend",
            "a4b4bf9e03eb87c8fa06c84cfda5cac7b43f2be8"
        ],
        [
            "hnf in H.",
            "VernacExtend",
            "b998e5ae98dd847416f4f194f30407c3597ea052"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "split; red; hnf; inversion H; inversion H0; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl.",
            "VernacExtend",
            "38efbdc34cc817b9822a5243489deea1cf24b9f4"
        ],
        [
            "clear - H2.",
            "VernacExtend",
            "df3dc56b8cb8ec54f9503844cf7d5b731417589e"
        ],
        [
            "assert (Leaf false = mkCanon (Node (Leaf false) (Leaf false))).",
            "VernacExtend",
            "343ded9ae1923b1d342d4c84da2abcbf31399f79"
        ],
        [
            "compute;auto.",
            "VernacExtend",
            "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
        ],
        [
            "rewrite H in H2.",
            "VernacExtend",
            "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
        ],
        [
            "generalize (mkCanon_intersect ((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite H3 in H2.",
            "VernacExtend",
            "cd6e90473b6ddc3ec3eb78a9c40980b4c1f2a641"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H2);intro.",
            "VernacExtend",
            "981ce45811a241e5aee47b7cc05f013812b4697d"
        ],
        [
            "destruct H1 as [? _].",
            "VernacExtend",
            "5b34589a2b4f60317a6fa0bbb0fcc15c72e975c5"
        ],
        [
            "assert (mkCanon (Leaf false) = Leaf false).",
            "VernacExtend",
            "7ebffe5c92ac65e6263aea357ffec84bdafc446e"
        ],
        [
            "compute;auto.",
            "VernacExtend",
            "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
        ],
        [
            "rewrite H4 in H1.",
            "VernacExtend",
            "8c5b5df9fad672e6e5e81d3d0efb0ec2ed09e9bf"
        ],
        [
            "generalize (mkCanon_intersect t11 t21);intro.",
            "VernacExtend",
            "df0c61e9b7086d2345d498489d1f168ef2b2c434"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "clear - H3.",
            "VernacExtend",
            "1ca535424183962a58658c6a9f78c07e3db56ca5"
        ],
        [
            "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "11c5a0f10c8f24632d42bf152123c583d0fecf90"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
            "VernacExtend",
            "d1902807081df5275f7f389da7feb6af630f8d5b"
        ],
        [
            "destruct H0 as [? _].",
            "VernacExtend",
            "1e578e84e7a531f32f36c087bbd511d26e131ff7"
        ],
        [
            "generalize (mkCanon_union t11 t21);intro.",
            "VernacExtend",
            "727f127f5f6f2dca4ee0690e783358cd657df374"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "clear - H2.",
            "VernacExtend",
            "df3dc56b8cb8ec54f9503844cf7d5b731417589e"
        ],
        [
            "assert (Leaf false = mkCanon (Node (Leaf false) (Leaf false))).",
            "VernacExtend",
            "343ded9ae1923b1d342d4c84da2abcbf31399f79"
        ],
        [
            "compute;auto.",
            "VernacExtend",
            "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
        ],
        [
            "rewrite H in H2.",
            "VernacExtend",
            "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
        ],
        [
            "generalize (mkCanon_intersect ((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite H3 in H2.",
            "VernacExtend",
            "cd6e90473b6ddc3ec3eb78a9c40980b4c1f2a641"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H2);intro.",
            "VernacExtend",
            "981ce45811a241e5aee47b7cc05f013812b4697d"
        ],
        [
            "destruct H1 as [_ ?].",
            "VernacExtend",
            "7e68e8c2df0ca89c3c9a863d0f69060ddd22a3d3"
        ],
        [
            "assert (mkCanon (Leaf false) = Leaf false).",
            "VernacExtend",
            "7ebffe5c92ac65e6263aea357ffec84bdafc446e"
        ],
        [
            "compute;auto.",
            "VernacExtend",
            "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
        ],
        [
            "rewrite H4 in H1.",
            "VernacExtend",
            "8c5b5df9fad672e6e5e81d3d0efb0ec2ed09e9bf"
        ],
        [
            "generalize (mkCanon_intersect t12 t22);intro.",
            "VernacExtend",
            "31387e1e4752cafec66e83748dee77972050c88b"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "clear - H3.",
            "VernacExtend",
            "1ca535424183962a58658c6a9f78c07e3db56ca5"
        ],
        [
            "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "11c5a0f10c8f24632d42bf152123c583d0fecf90"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
            "VernacExtend",
            "d1902807081df5275f7f389da7feb6af630f8d5b"
        ],
        [
            "destruct H0 as [_ ?].",
            "VernacExtend",
            "be018d42e9727a921a4de9f46d22ec5ebbb37ee3"
        ],
        [
            "generalize (mkCanon_union t12 t22);intro.",
            "VernacExtend",
            "4f33d5dd7a6e5c10f57aba43783d5ad1aa53c80d"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_join_combine : forall t11 t12 t21 t22 t31 t32, join (exist (fun t => canonicalTree t)(mkCanon t11) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t21) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t31) (mkCanon_correct _))-> join (exist (fun t => canonicalTree t)(mkCanon t12) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t22) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon t32) (mkCanon_correct _))-> join (exist (fun t => canonicalTree t)(mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon (Node t21 t22)) (mkCanon_correct _)) (exist (fun t => canonicalTree t)(mkCanon (Node t31 t32)) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "ad41fc1a4793b4053231227241da6110c3184ef6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "hnf in *.",
            "VernacExtend",
            "2b83f930e16edf1e74901190007d847b58b5d93a"
        ],
        [
            "destruct H as [H11 H12].",
            "VernacExtend",
            "f75cc39a1fca34ba5004e9c7daf3fd7a95b7b4dd"
        ],
        [
            "destruct H0 as [H21 H22].",
            "VernacExtend",
            "4bcbc5a2c4b81ff90365b213531f58172353f828"
        ],
        [
            "unfold BAF.glb, BAF.lub in *.",
            "VernacExtend",
            "2fd42e3c30925cf7b1bba587b40d8c5d0379f1d3"
        ],
        [
            "inv H11;inv H12;inv H21;inv H22.",
            "VernacExtend",
            "a52d4d6248e3c1eace339644a51bbd314ac2cd7d"
        ],
        [
            "split; apply exist_ext.",
            "VernacExtend",
            "bcea74c656fe4749920b344ccb6197b6cdb61ada"
        ],
        [
            "generalize (mkCanon_intersect t11 t21);intro H31.",
            "VernacExtend",
            "38763e90b1e06deb8d1da998a7d4c5f9eee5a072"
        ],
        [
            "generalize (mkCanon_intersect t12 t22);intro H32.",
            "VernacExtend",
            "b507ff04ce4d5c5aa2446f012da6e312bbde3731"
        ],
        [
            "generalize (mkCanon_intersect (Node t11 t12) (Node t21 t22));intro H33.",
            "VernacExtend",
            "2006ed6ea1949eb9f49005a24f24adc65dbc4c03"
        ],
        [
            "rewrite H31 in H0;clear H31.",
            "VernacExtend",
            "b3f018e4f14b27d76b68f736e366511619466e4f"
        ],
        [
            "rewrite H32 in H2;clear H32.",
            "VernacExtend",
            "88d9f05237ff43aae92dc614629011cf3a6215b4"
        ],
        [
            "simpl;simpl in H33; rewrite H33;clear H33.",
            "VernacExtend",
            "03484fe1e32a1e8ba823ce5eec972f500ec7e3bc"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "icase (bool_dec false false).",
            "VernacExtend",
            "3e4fd10c4bea458d6c35572f41e334ce947024f7"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "generalize (mkCanon_union t11 t21);intro H31.",
            "VernacExtend",
            "dd2e86c55e393c778970d26d6c61abbbc6976cd6"
        ],
        [
            "generalize (mkCanon_union t12 t22);intro H32.",
            "VernacExtend",
            "4655ae4056ee23d0ad7257b5a5bdba9526db2df8"
        ],
        [
            "generalize (mkCanon_union (Node t11 t12) (Node t21 t22));intro H33.",
            "VernacExtend",
            "6cd835e92e6355932c8080ab46b688be6e3ffdda"
        ],
        [
            "rewrite H31 in H1;clear H31.",
            "VernacExtend",
            "af1c070aa16a7d7cd66d6652001c18a1bf8bbbfd"
        ],
        [
            "rewrite H32 in H3;clear H32.",
            "VernacExtend",
            "1f2d62bba76c226bd665a7d876c6e5494a414155"
        ],
        [
            "simpl;simpl in H33; rewrite H33;clear H33.",
            "VernacExtend",
            "03484fe1e32a1e8ba823ce5eec972f500ec7e3bc"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_mkFull_split : forall n t1 t2 t1' t2', mkFull (S n) (mkCanon (Node t1 t2)) = Some (Node t1' t2') <-> mkFull n (mkCanon t1) = Some t1' /\\ mkFull n (mkCanon t2) = Some t2'.",
            "VernacStartTheoremProof",
            "e79fe21ccf27622960474e4e7c3ee665da81232e"
        ],
        [
            "intros; remember (mkCanon (Node t1 t2)); icase s.",
            "VernacExtend",
            "a64e6b970ac58858c192e1144c8f26c29b8f193f"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
        ],
        [
            "destruct H1 as [H1 H2].",
            "VernacExtend",
            "352758143f119ffe1117850fdcea520fdbdaf126"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (mkFull n (Leaf b)); split;intro H;inv H;auto; inv H0;inv H3;auto.",
            "VernacExtend",
            "53b7dabcac1fdc57d1f704190c048c6d3b80baa9"
        ],
        [
            "symmetry in Heqs.",
            "VernacExtend",
            "9275975760708605add45ad78ef8579587cb34e0"
        ],
        [
            "generalize (mkCanon_split _ _ _ _ Heqs);intro H.",
            "VernacExtend",
            "65090fccce55479988d549cb546b46cd27215a87"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "apply mkFull_split.",
            "VernacExtend",
            "9d323fd9e9f9b382e3f2f3a1e99cbf15e287a1c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_zero : forall t, roundL 0 t = None.",
            "VernacStartTheoremProof",
            "7472f231cc3ea7f22e2530b82122b9064fd56f1c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tree_round_left.",
            "VernacExtend",
            "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
        ],
        [
            "icase (mkFull 0 (proj1_sig t0)).",
            "VernacExtend",
            "26c9725bfa4dd073d0a1929c6cab0e6b79f31dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_combine: forall n t1 t2 t1' t2', roundL n (exist (fun t => canonicalTree t)(mkCanon t1) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t1') (mkCanon_correct _)) -> roundL n (exist (fun t => canonicalTree t)(mkCanon t2) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t2') (mkCanon_correct _))-> roundL (S n) (exist (fun t => canonicalTree t)(mkCanon (Node t1 t2)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon (Node t1' t2')) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "e9382f310ced18591d4db98bc4d88df1c19262f6"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "intros ? ? ? ? ? H1 H2.",
            "VernacExtend",
            "0121d00d1517229ac55dbc2a218d5b1c6ac6069e"
        ],
        [
            "unfold tree_round_left in *.",
            "VernacExtend",
            "aac2be472453863ab862f10589317e37d530b089"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "remember (mkFull n (mkCanon t1)) as o1; remember (mkFull n (mkCanon t2)) as o2.",
            "VernacExtend",
            "4e296e332f7f24549a4a7f6bd40f71967d354397"
        ],
        [
            "icase o1;icase o2.",
            "VernacExtend",
            "e112e2f93717ff9f0911ba3d038970d2ebc3deb4"
        ],
        [
            "symmetry in Heqo1,Heqo2.",
            "VernacExtend",
            "22d356b5f755f3f4ea868d08c6a406c48018db55"
        ],
        [
            "generalize (mkCanon_mkFull_split n t1 t2 s s0);intro H.",
            "VernacExtend",
            "f2d12a768c7f0b1028e48ff5fdc2f5d1f4582254"
        ],
        [
            "destruct H as [_ H].",
            "VernacExtend",
            "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
        ],
        [
            "detach H;auto.",
            "VernacExtend",
            "ff4db3e26f80737b66847a6dc210f3d29548edd4"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "icase (tree_round_leftP (S n) s); icase (tree_round_leftP (S n) s0).",
            "VernacExtend",
            "9558da99f4b4748a20c0535080a4ff53bdd28031"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "rewrite<- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "rewrite<- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_split : forall n t1 t2 t1' t2', roundL (S (S n)) (exist (fun t => canonicalTree t)(mkCanon (Node t1 t2)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon (Node t1' t2')) (mkCanon_correct _)) -> roundL (S n) (exist (fun t => canonicalTree t)(mkCanon t1) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t1') (mkCanon_correct _)) /\\ roundL (S n) (exist (fun t => canonicalTree t)(mkCanon t2) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t2') (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "46602a67292359c8e9d6f20ab9d0945506bd8c1e"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "intros ? ? ? ? ? H.",
            "VernacExtend",
            "7b77f8f7e8332748301f074944b6c5a46f84f2c8"
        ],
        [
            "unfold tree_round_left in *.",
            "VernacExtend",
            "aac2be472453863ab862f10589317e37d530b089"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "remember (mkFull (S (S n)) (mkCanon (Node t1 t2))) as o.",
            "VernacExtend",
            "6a3a87e2a4e9970eec9acf8d3a77270123a715ae"
        ],
        [
            "icase o.",
            "VernacExtend",
            "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "icase s; remember (S n) as nk.",
            "VernacExtend",
            "dcd95285b50d230b18d91f51df9301e28f51e071"
        ],
        [
            "icase (mkCanon (Node t1 t2)).",
            "VernacExtend",
            "832b44591438431e738e0943576516aded1e32d2"
        ],
        [
            "simpl in Heqo; icase (mkFull nk (Leaf b0)).",
            "VernacExtend",
            "7274dd7acbd8316128bfc9da3872c11b12a4a492"
        ],
        [
            "simpl in Heqo;icase (mkFull nk s1); icase (mkFull nk s2).",
            "VernacExtend",
            "7b3872e3fc256ec3cc9bc59d13060f7e84202308"
        ],
        [
            "generalize (mkCanon_mkFull_split nk t1 t2 s1 s2);intro H1.",
            "VernacExtend",
            "b4535eef2d81327c616ef3acb09840c59c4c1cdc"
        ],
        [
            "destruct H1 as [H1 _].",
            "VernacExtend",
            "a6c834813ac9bc3eed37edeeefb0fa107dee2dac"
        ],
        [
            "detach H1;trivial.",
            "VernacExtend",
            "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
        ],
        [
            "destruct H1 as [H1 H2].",
            "VernacExtend",
            "352758143f119ffe1117850fdcea520fdbdaf126"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite Heqnk in *.",
            "VernacExtend",
            "04d7891f675fe588e9b41c4161d0566d3d1ecec6"
        ],
        [
            "icase (tree_round_leftP (S n) s1); icase (tree_round_leftP (S n) s2).",
            "VernacExtend",
            "0a51707e9de9d03c1eafad9ed65ff69d317a85cd"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro H.",
            "VernacExtend",
            "b3c349e3d55f47284ef08c128f7c140b198703f8"
        ],
        [
            "destruct H as [H4 H5].",
            "VernacExtend",
            "c2a7751626aa2695f686607313f4016af3556e06"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_Leaf : forall b n, roundL (S n) (exist (fun t => canonicalTree t)(Leaf b) (canonTree_Leaf _)) = Some (exist (fun t => canonicalTree t)(Leaf b) (canonTree_Leaf _)).",
            "VernacStartTheoremProof",
            "87b7c2fb2012b1a0edb986c7e457d6c03b40fc1e"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "unfold tree_round_left.",
            "VernacExtend",
            "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Leaf b)) (canonTree_Leaf _) (mkCanon_correct _)); intro H.",
            "VernacExtend",
            "6a5f3fb0980e3192ab0bd4da1327e326c630b360"
        ],
        [
            "detach H.",
            "VernacExtend",
            "7b1cbb27e97f4baf25473f44a1a47a398ac68156"
        ],
        [
            "rewrite H in IHn.",
            "VernacExtend",
            "f0732d6832759b144fe560e722696ffeacd14e6c"
        ],
        [
            "generalize (tree_round_left_combine _ _ _ _ _ IHn IHn);intro H1.",
            "VernacExtend",
            "48fe50d4259adb6c92643f2919aaa089da1e40d4"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Node (Leaf b) (Leaf b))) (canonTree_Leaf _) (mkCanon_correct _)); intro H2.",
            "VernacExtend",
            "4ab5a88d346bda94c9f3f851ef3d55d5f4b388be"
        ],
        [
            "detach H2.",
            "VernacExtend",
            "37dcd8f355354d3a35c87e71d575ce2b99de98cf"
        ],
        [
            "rewrite H2;trivial.",
            "VernacExtend",
            "f4439e25b4e46b870f332cc9d16d49fe012ed96a"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_identity : forall n t, height t < n -> roundL n t = Some t.",
            "VernacStartTheoremProof",
            "a8269b853b65be625b4cbc7ebc80efc50af69e47"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 : n > height t0) by omega.",
            "VernacExtend",
            "8fe1f9cfe80052b03cdffa3a88a990ae03b506d8"
        ],
        [
            "clear H;rename H1 into H.",
            "VernacExtend",
            "089aeea23b40be75783bd40cfebd97d666c59f76"
        ],
        [
            "revert H;revert t0.",
            "VernacExtend",
            "f6572a4ca7b73d075300b981460c5a2021b2d55a"
        ],
        [
            "induction n;intros;unfold height;simpl in *; unfold tree_height in *.",
            "VernacExtend",
            "8abd4a47121940922b8529006ef4f2842c07379c"
        ],
        [
            "inversion H;icase t0.",
            "VernacExtend",
            "12cdd9ef7756b0905ebb39e6b043d5b6839f7056"
        ],
        [
            "destruct t0 as [x c].",
            "VernacExtend",
            "1bbd86825644f3222b59ad972d4c2be0ab656553"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (Leaf b) c (canonTree_Leaf _));intro H1.",
            "VernacExtend",
            "a3c7b86026256b43c66b0aef029be88359bd81ac"
        ],
        [
            "detach H1;trivial.",
            "VernacExtend",
            "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply tree_round_left_Leaf.",
            "VernacExtend",
            "901ab73d91a38b46346b703f03c0dbba7bd652b9"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert ( n > tree_heightP x1 /\\ n > tree_heightP x2).",
            "VernacExtend",
            "32d630af072b6b048480a22aab2761549f481450"
        ],
        [
            "generalize (le_max_l (tree_heightP x1) (tree_heightP x2)).",
            "VernacExtend",
            "fa9b5de4c57b1b0088b378e3364a17f1fd2a6492"
        ],
        [
            "generalize (le_max_r (tree_heightP x1) (tree_heightP x2)).",
            "VernacExtend",
            "b7b12eb8a2c2081661944ce15392606baebaf783"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct H0 as [H1 H2].",
            "VernacExtend",
            "43c576a82ec84c07f51bc50e18269c6d09f20cef"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c.",
            "VernacExtend",
            "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
        ],
        [
            "destruct c as [H3 [H4 [H5 H6]]].",
            "VernacExtend",
            "acd3d5230a896ef5f935d1d1cd957c7409ac28a2"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H5) H1);intro.",
            "VernacExtend",
            "639d7659a3ce3a1086a4b4f398f8191f0ec58940"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H6) H2);intro.",
            "VernacExtend",
            "b837a2d1c9b898a16d37c7ec12a4ebd8bdfe0809"
        ],
        [
            "generalize (canonTree_proof_irr x1 (mkCanon x1) H5 (mkCanon_correct _));intro H8.",
            "VernacExtend",
            "99cd7c748251a51cb2563b9845b4112ca29bdd71"
        ],
        [
            "detach H8.",
            "VernacExtend",
            "5bf08f2a6d47fffecd56809c43f956d01c62ccb6"
        ],
        [
            "generalize (canonTree_proof_irr x2 (mkCanon x2) H6 (mkCanon_correct _));intro H9.",
            "VernacExtend",
            "2d151c3b14b6e62bc5b186b6ab72961c480323c0"
        ],
        [
            "detach H9.",
            "VernacExtend",
            "ba2310bb2943fbe934d85ab8814138a09aa10acc"
        ],
        [
            "generalize (canonTree_proof_irr (Node x1 x2) (mkCanon (Node x1 x2)) c0 (mkCanon_correct _));intro H10.",
            "VernacExtend",
            "14617d2dd3f24956d5ab3f313a83b80693948a83"
        ],
        [
            "detach H10.",
            "VernacExtend",
            "d973e442f828c667cc28310ca687622d2cbb7098"
        ],
        [
            "rewrite H8,H9,H10 in *.",
            "VernacExtend",
            "1373e5dec310a73733f29bf29718f4c15e1312be"
        ],
        [
            "apply tree_round_left_combine;trivial.",
            "VernacExtend",
            "c956d01ee2e8d4d2a38a7d03db4daf0d373cc4de"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_one : forall t1 t2 t c, roundL 1 (exist (fun t => canonicalTree t)(Node t1 t2) c) = Some t -> exists b1,exists b2, t1 = Leaf b1 /\\ t2 = Leaf b2 /\\ t = (exist (fun t => canonicalTree t)(Leaf b1) (canonTree_Leaf _)).",
            "VernacStartTheoremProof",
            "35d890a169a61ea83d43e8bb5230b6e4b10ab283"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "exists b;exists b0.",
            "VernacExtend",
            "de67d4e18acd25db923c44b2a78056225f1db57e"
        ],
        [
            "compute in H.",
            "VernacExtend",
            "686103f70bd92c1e64ec2f78836e7444971cef09"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_join : forall n t1 t2 t3 t1' t2' t3', join t1 t2 t3 -> roundL n t1 = Some t1' -> roundL n t2 = Some t2' -> roundL n t3 = Some t3' -> join t1' t2' t3'.",
            "VernacStartTheoremProof",
            "19ee2e99cc6ee60bbf10af0afa2dc5df814d3ddd"
        ],
        [
            "unfold roundL,roundableL_tree.",
            "VernacExtend",
            "e8a5644d2260c860bf2458e9fa618a656c071313"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct t1.",
            "VernacExtend",
            "5690e26538feaaf47c16cb191a37ff746748469a"
        ],
        [
            "unfold tree_round_left in H0.",
            "VernacExtend",
            "0553c7852a3745807a930d72128317088f56d941"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "destruct t1 as [t1 ?]; destruct t2 as [t2 ?]; destruct t3 as [t3 ?].",
            "VernacExtend",
            "c6618f03a54e7cd5b0d84e1e6300df20d9b8698b"
        ],
        [
            "icase t1;icase t2;icase t3.",
            "VernacExtend",
            "c5c70d4ca66273d3e6d019b43f0fc8ba11279b31"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "icase b;icase b0;icase b1; compute;split;apply exist_ext;trivial.",
            "VernacExtend",
            "5d1da5b025f02679ed5ce08967dc11b23c1d9da0"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H2);intro H3.",
            "VernacExtend",
            "606317f1a123dd7263a64ff255964856dc9a88cb"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "destruct H as [_ H].",
            "VernacExtend",
            "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
        ],
        [
            "elimtype False;clear-H.",
            "VernacExtend",
            "df101ff4b489cf904bd8e6159ba4f4fc0cc0036e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "a71f63f235c3f00d2df06527d305855c02229d86"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "destruct H as [H3 H4].",
            "VernacExtend",
            "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
        ],
        [
            "elimtype False;clear-H3 H4 c0.",
            "VernacExtend",
            "a72d5783c74f4fc399400d8d68ca133abc86562e"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "generalize (mkCanon_identity _ c0);intro.",
            "VernacExtend",
            "672d1a1cfdc5ba5010faa95a67579d45610996d8"
        ],
        [
            "icase b; congruence.",
            "VernacExtend",
            "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "a71f63f235c3f00d2df06527d305855c02229d86"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H2);intro H4.",
            "VernacExtend",
            "82de9ff72f583c90b312f9c420e96aca497dadd8"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_left_Leaf b 0);intro H5.",
            "VernacExtend",
            "cfabcff5f44d4b3e7f216bd8d75a331136710050"
        ],
        [
            "assert (canonTree_Leaf b = c) by apply proof_irr.",
            "VernacExtend",
            "c9324db94f5b27003c608301cef66a6a847b58d7"
        ],
        [
            "rewrite H3 in H5;clear H3.",
            "VernacExtend",
            "18e16c85fb8636c6522ec69b7a026d1be664007b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H5 in H0;clear H5.",
            "VernacExtend",
            "b846d4b7e33dee5b648f69c3b3a26b261cdfd1d0"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "icase b; inv H; inv H3.",
            "VernacExtend",
            "3b504a53d263be900b9899af24cef6de5e0ec395"
        ],
        [
            "icase (bool_dec b31 b32).",
            "VernacExtend",
            "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold BAF.glb.",
            "VernacExtend",
            "eb79f2d18106e6192f9b9503600828c1ee6038db"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "elimtype False;clear -H c.",
            "VernacExtend",
            "fa26bc2d4f035abe0cd3394b0e1d8d8a79f00f5e"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "icase b;congruence.",
            "VernacExtend",
            "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H2);intro H4.",
            "VernacExtend",
            "82de9ff72f583c90b312f9c420e96aca497dadd8"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_left_Leaf b 0);intro.",
            "VernacExtend",
            "06d8bce9438d890fc93c612eeb81d893cedfab65"
        ],
        [
            "assert (canonTree_Leaf b = c0) by apply proof_irr.",
            "VernacExtend",
            "bb02bc20cc8cd7e56ddbda7d3175d7e4544aa8af"
        ],
        [
            "rewrite H4 in H3;clear H4.",
            "VernacExtend",
            "4aa46440341dd396700f545892dabc0792b19379"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H3 in H1;clear H3.",
            "VernacExtend",
            "27cf446084dfa77d508991ea930536685b688fcf"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "icase b; inv H; inv H3; inv H4.",
            "VernacExtend",
            "c036953c568aaa789f26c1b51a8c32023a3face5"
        ],
        [
            "icase (bool_dec b31 b32).",
            "VernacExtend",
            "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold BAF.glb.",
            "VernacExtend",
            "eb79f2d18106e6192f9b9503600828c1ee6038db"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b41;trivial.",
            "VernacExtend",
            "4d5895a05181912e169601f8c52b061184cb0d25"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b41; trivial.",
            "VernacExtend",
            "4d5895a05181912e169601f8c52b061184cb0d25"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H1);intro H4.",
            "VernacExtend",
            "941589165ec112bf10d2584d2b9e90f9fac80136"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_left_Leaf b 0);intro.",
            "VernacExtend",
            "06d8bce9438d890fc93c612eeb81d893cedfab65"
        ],
        [
            "assert (canonTree_Leaf b = c1) by apply proof_irr.",
            "VernacExtend",
            "45b1d455107f8b62b02821b8fc2339b3bf4bf80d"
        ],
        [
            "rewrite H4 in H3;clear H4.",
            "VernacExtend",
            "4aa46440341dd396700f545892dabc0792b19379"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H3 in H2;clear H3.",
            "VernacExtend",
            "3b50dc6fcc42adce18b93f1836854e98b8b062ab"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "icase b; inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
            "VernacExtend",
            "de032df4c6123f7c586596d4756db3bab2f88ffe"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H1);intro H4.",
            "VernacExtend",
            "941589165ec112bf10d2584d2b9e90f9fac80136"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_left_one _ _ _ _ H2);intro H5.",
            "VernacExtend",
            "a26ec5bce6c027322c36058c20ccedb308b23471"
        ],
        [
            "destruct H5 as [b51 [b52 [H51 [H52 H53]]]];subst.",
            "VernacExtend",
            "681ddd16039acc5a00eb922e148b6c1da74d3213"
        ],
        [
            "inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
            "VernacExtend",
            "b6415d6540a0b2a2201dbdd01fe60812cefe2e8a"
        ],
        [
            "generalize (canonTree_rewrite1 t1);intro H3; generalize (canonTree_rewrite1 t2);intro H4; generalize (canonTree_rewrite1 t3);intro H5; generalize (canonTree_rewrite1 t1');intro H6; generalize (canonTree_rewrite1 t2');intro H7; generalize (canonTree_rewrite1 t3');intro H8; destruct H3 as [? [? ?]]; destruct H4 as [? [? ?]]; destruct H5 as [? [? ?]]; destruct H6 as [? [? ?]]; destruct H7 as [? [? ?]]; destruct H8 as [? [? ?]].",
            "VernacExtend",
            "d4e1694ed4661514ae37999bbdb0e80f892f49d9"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "generalize (tree_round_left_split _ _ _ _ _ H0);intro H01.",
            "VernacExtend",
            "786a9bf8f9b5a159440035a29648457179cf1126"
        ],
        [
            "generalize (tree_round_left_split _ _ _ _ _ H1);intro H11.",
            "VernacExtend",
            "cf49ccff86ec3a8672ec413846d929df9eec07ac"
        ],
        [
            "generalize (tree_round_left_split _ _ _ _ _ H2);intro H21.",
            "VernacExtend",
            "0393874a1787765bc5548dfd0c60bd74b1221433"
        ],
        [
            "destruct H01 as [H01 H02].",
            "VernacExtend",
            "6918c478d33134759ac1b43027976d6ec219b8e3"
        ],
        [
            "destruct H11 as [H11 H12].",
            "VernacExtend",
            "e1974e4ce31e9065c7b502c0d9f6dea598b78b6e"
        ],
        [
            "destruct H21 as [H21 H22].",
            "VernacExtend",
            "5ac9d8330971075d82ab4bda04366276f754d263"
        ],
        [
            "generalize (mkCanon_join_split _ _ _ _ _ _ H);intro H3.",
            "VernacExtend",
            "538417e9a791189176e6b8477ee5a975b7ce418d"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ H31 H01 H11 H21);intro H41.",
            "VernacExtend",
            "bdedc8d7ba091cf5fe0aea6840ad6e1fccd43df1"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ H32 H02 H12 H22);intro H42.",
            "VernacExtend",
            "5b40ae4d025c765b87247ef37104be2f3e8d2d24"
        ],
        [
            "apply mkCanon_join_combine;trivial.",
            "VernacExtend",
            "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_None : forall n t, n < height t -> roundL n t = None.",
            "VernacStartTheoremProof",
            "283b8c728399b5e2922782da878ed52ad6e88b6a"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tree_round_left.",
            "VernacExtend",
            "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
        ],
        [
            "generalize (mkFull_None _ _ H);intro.",
            "VernacExtend",
            "aac8975fe6b48d5d41c6e2a56388c30f93cdff96"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_decrease : forall n t, S n = height t -> exists t', roundL (S n) t = Some t' /\\ height t' <= n.",
            "VernacStartTheoremProof",
            "5dc35707aa43ad38a8f9bf69ef4312f4812ed062"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction n;intros; destruct t0; icase x.",
            "VernacExtend",
            "69dbc9a8c4afaec29b752a82601b4c571cd70ad9"
        ],
        [
            "icase x1;icase x2;unfold tree_height in *;inversion H.",
            "VernacExtend",
            "7c671c853f416b61366875f539e3da4cc0454484"
        ],
        [
            "exists (exist (fun t => canonicalTree t) (Leaf b) (canonTree_Leaf _)).",
            "VernacExtend",
            "890bc986c92886d6782ec448fe44f616fb7b4662"
        ],
        [
            "compute;split;try omega;try f_equal;try apply exist_ext;trivial.",
            "VernacExtend",
            "f69632261fed51f9918749ee9253bba65eb76f9e"
        ],
        [
            "elimtype False;omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "elimtype False;clear -H1.",
            "VernacExtend",
            "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
        ],
        [
            "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) 0) by omega; clear H1.",
            "VernacExtend",
            "4fd33d518b03948fcb07fc7ba91feb309632262d"
        ],
        [
            "generalize (max_0_r (max (tree_heightP x1_1) (tree_heightP x1_2) + 1));intro.",
            "VernacExtend",
            "d24b4be006df1d4185ad73d76fe106d7e14947dc"
        ],
        [
            "rewrite H0 in H;clear H0.",
            "VernacExtend",
            "811f7a58e18c564af35c6b055d384792dac7a36c"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "elimtype False;clear -H1.",
            "VernacExtend",
            "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
        ],
        [
            "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) (max (tree_heightP x2_1) (tree_heightP x2_2) + 1)) by omega; clear H1.",
            "VernacExtend",
            "cf505960e4f54f0966856abc1b1824d4b26e33f8"
        ],
        [
            "generalize (plus_max_distr_r (max (tree_heightP x1_1) (tree_heightP x1_2)) (max (tree_heightP x2_1) (tree_heightP x2_2)) 1);intro.",
            "VernacExtend",
            "4e4e7862b543e5ccd848c5b9e7d815ca75e16ba3"
        ],
        [
            "rewrite H0 in H;omega.",
            "VernacExtend",
            "d1e3daf704b10903d22ad1c79f649670fe7fb9cc"
        ],
        [
            "remember (S n) as nk.",
            "VernacExtend",
            "4c592adec846f68ed9a938cbef6bc7204726682e"
        ],
        [
            "unfold tree_height in H.",
            "VernacExtend",
            "6f0a5994900d304b7e37570ee9395dd2367747c9"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (nk = max (tree_heightP x1) (tree_heightP x2)) by omega;clear H.",
            "VernacExtend",
            "db23fa6214c158b457bdc23a262fc246a3205116"
        ],
        [
            "generalize (lt_dec (tree_heightP x1) (tree_heightP x2) );intro H.",
            "VernacExtend",
            "a155a027abb29ac4e6c6f24960bfe60d6eb4ec91"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (nk = tree_heightP x2).",
            "VernacExtend",
            "68433559f7b0cda2e65a4f17d63d13618c772ec6"
        ],
        [
            "assert (tree_heightP x1 <= tree_heightP x2 ) by omega.",
            "VernacExtend",
            "eb2f8bc29c5e8bbee98aef428847addc87432391"
        ],
        [
            "generalize (max_r _ _ H);intro.",
            "VernacExtend",
            "7fde9e9d627f1d0d002ef968f3f28cdf99adc387"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite<- H in l.",
            "VernacExtend",
            "188bcc1877234a0721a024fadd0025c3d5f7ab25"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c;destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H21.",
            "VernacExtend",
            "0899e7e25e7aeea9ad36f8988e8e8891bda2b488"
        ],
        [
            "generalize (tree_round_left_identity _ (exist (fun t => canonicalTree t) x1 H3) l);intro H11.",
            "VernacExtend",
            "d84228cdbe75021bc5f15773ce0325fc3e72d434"
        ],
        [
            "destruct H21 as [? [H21 H22]].",
            "VernacExtend",
            "863182f36b5b65c75271f960a285a4ada94ad0fc"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
            "VernacExtend",
            "fc0e4a9efeec2d3b349168a888719713334d8650"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "74b2a23f282f495a0824abd025a18140e261c6b3"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x1 H3 = exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _)).",
            "VernacExtend",
            "5ff3c2605e57f37e4bc4297c0476d9c213a88adc"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "47694f81ebb96e3a708b58680091b1968fe53680"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "assert (tree_round_left (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "6f394d9a4f132ebf9e17619cc84ff12171db2432"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
            "VernacExtend",
            "0c2ac849152d7084484a63976cea914ea9156413"
        ],
        [
            "rewrite H5;clear H5.",
            "VernacExtend",
            "8368d9536fb39e6bf32a42676999c5775eb8bbef"
        ],
        [
            "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "a29434467b799a068844e03a9c8c2c45cbe4c12b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H5;clear H5.",
            "VernacExtend",
            "8368d9536fb39e6bf32a42676999c5775eb8bbef"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x1 x)) (mkCanon_correct (Node x1 x))).",
            "VernacExtend",
            "86a50a4b559a4c6d87cd578468933f85f8b46e73"
        ],
        [
            "split;trivial;subst nk.",
            "VernacExtend",
            "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
        ],
        [
            "clear -H22 l.",
            "VernacExtend",
            "6dff2c9f35f0c3ea21666e41d0989738a50b3eb9"
        ],
        [
            "assert (tree_heightP x1 <= n) by omega;clear l.",
            "VernacExtend",
            "d4b03797ba75046d33fbc828640b62d689ac5de5"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "assert (tree_heightP (Node x1 x) <= S n).",
            "VernacExtend",
            "9d6836a56c250cc63eee9f97b9924e3edcb2dbc2"
        ],
        [
            "generalize (max_lub _ _ _ H H22);intro.",
            "VernacExtend",
            "bf713280fd8f4f18d36eaad423c0426a480ee5f3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x1 x) = mkCanon (Node x1 x)) by trivial.",
            "VernacExtend",
            "38b1b219945f3261c05521cd136482f89219dd60"
        ],
        [
            "generalize (mkCanon_height _ _ H1);intro.",
            "VernacExtend",
            "e31cc829c1db47ff565100f4e139051e1865cd7f"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (tree_heightP x1 = tree_heightP x2 \\/ tree_heightP x1 > tree_heightP x2).",
            "VernacExtend",
            "d2d3353cd2a55151624ff73042d5be257094f1de"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite<- H in H0.",
            "VernacExtend",
            "044ef0a64c068347d38112a9feb1635f78270f85"
        ],
        [
            "generalize (max_idempotent (tree_heightP x1));intro.",
            "VernacExtend",
            "08528438d659923e0cfb51765c23ef296f788eaa"
        ],
        [
            "rewrite H1 in H0.",
            "VernacExtend",
            "4421ff2cd84dca8f3db1b9c68d58f4e168d6194d"
        ],
        [
            "rewrite<- H0 in H.",
            "VernacExtend",
            "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
        ],
        [
            "clear n0 H1.",
            "VernacExtend",
            "80a5472a37a3a3c4d483230f2795562ea002e7bd"
        ],
        [
            "assert (tree_round_left (S nk) (exist (fun t => canonicalTree t) (Node x1 x2) c) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "3c9cdd24429bc4e1fbf8bd6d1a3c345158c7ae6a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "rewrite<-H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H1;clear H1.",
            "VernacExtend",
            "00d5f4aac5a8b3519e323a55e4be18868171cc4f"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c.",
            "VernacExtend",
            "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H3) H0);intro H5.",
            "VernacExtend",
            "d93cf3c16dbc6a1d15f53abe7b0c6cef122675d1"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H6.",
            "VernacExtend",
            "b7df9067a10056e032c9ba02af8c2c707f7350c0"
        ],
        [
            "destruct H5 as [? [H11 H12]].",
            "VernacExtend",
            "87c046024cd12ef2f64306f6bf37b4ac056208b6"
        ],
        [
            "destruct H6 as [? [H21 H22]].",
            "VernacExtend",
            "90b5c5f2f0449c8023e919c2ffaf8a27e48edcd4"
        ],
        [
            "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x1 H3)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
            "VernacExtend",
            "d7aa4a1d84e30ec048136d6d6678f9866384583b"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "47694f81ebb96e3a708b58680091b1968fe53680"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
            "VernacExtend",
            "fc0e4a9efeec2d3b349168a888719713334d8650"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "9fd67603844fba7eec0b68149c7265617496c3da"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "destruct x0.",
            "VernacExtend",
            "080771fa4796a8f8a5b665c53a861793a726da17"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x0 c1 = exist (fun t => canonicalTree t) (mkCanon x0) (mkCanon_correct _)).",
            "VernacExtend",
            "ac63707e6f2bf3a654b47126e58a54e66a2839c0"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c1);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "8b4de42d6de6f110efa08949d97a3b4dc329def7"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "a29434467b799a068844e03a9c8c2c45cbe4c12b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))).",
            "VernacExtend",
            "ccc8b3d7acbd07f2282f17d3f1ec885cfb8b955f"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "clear - H12 H22 Heqnk.",
            "VernacExtend",
            "7cb7075c692935b8cbfb9f5c0646ffaed1c06907"
        ],
        [
            "unfold tree_height in *.",
            "VernacExtend",
            "6cf808b018092d3a5afb1f060467b3dce93bc24b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "subst nk.",
            "VernacExtend",
            "1a30101555f48d7c79b686bb3adc7038c4511f82"
        ],
        [
            "assert (tree_heightP (Node x x0) <= S n).",
            "VernacExtend",
            "027d20ee8f150b8b2f2e256b9c177b0fb0de7282"
        ],
        [
            "generalize (max_lub _ _ _ H12 H22);intro.",
            "VernacExtend",
            "f58ed39dd0930b424b4a711b67dc32ce37c224bb"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x x0) = mkCanon (Node x x0)) by trivial.",
            "VernacExtend",
            "bed616be7b312d7ce1b56c7bb1e04e36cc219a2c"
        ],
        [
            "generalize (mkCanon_height _ _ H0);intro.",
            "VernacExtend",
            "a8f8c94392579a0dde84863c9ee5a2dfd7ef059a"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (nk = tree_heightP x1).",
            "VernacExtend",
            "bdc8051231fdc6e8aecc1472d524250acb39ac6f"
        ],
        [
            "assert (tree_heightP x2 <= tree_heightP x1 ) by omega.",
            "VernacExtend",
            "6e674527ce79cbac56414ae55383ae08e65d4edd"
        ],
        [
            "generalize (max_l _ _ H1);intro.",
            "VernacExtend",
            "40694c751ddd0b3900054841b0e96671e5d7a466"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite<- H1 in H.",
            "VernacExtend",
            "e11682041b56405a4c951bbc5e0f5120244b17e2"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c;destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H4) H1);intro H11.",
            "VernacExtend",
            "1f1df06f22dc8ddc87be614c094e6ece44551238"
        ],
        [
            "generalize (tree_round_left_identity _ (exist (fun t => canonicalTree t) x2 H5) H);intro H21.",
            "VernacExtend",
            "9fee5dc7075267dd058b07a72aca7fcde0f26874"
        ],
        [
            "destruct H11 as [? [H11 H12]].",
            "VernacExtend",
            "a8f98c1fc768df646018e3d27ac053d6a39015a9"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x1 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
            "VernacExtend",
            "4f02379099a40e563316b25ddb52569a13ef0360"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "41760b235d413eb6f4ee57a31b2e518ac5f49202"
        ],
        [
            "rewrite H6 in H11;clear H6.",
            "VernacExtend",
            "5675c1d11de624f1f779780ad005c55c9336a6fd"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "9fd67603844fba7eec0b68149c7265617496c3da"
        ],
        [
            "rewrite H6 in H11;clear H6.",
            "VernacExtend",
            "5675c1d11de624f1f779780ad005c55c9336a6fd"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x2 H5 = exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _)).",
            "VernacExtend",
            "44bd8b4c4e9485df552e969ad80c4c37daacced4"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H5);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "389618fca8f8d5ba6ed28856975d616d4a8ca446"
        ],
        [
            "rewrite H6 in H21;clear H6.",
            "VernacExtend",
            "5c031d266d81511bbdfacb431036df70fbd1a67e"
        ],
        [
            "assert (tree_round_left (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "6f394d9a4f132ebf9e17619cc84ff12171db2432"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
            "VernacExtend",
            "0c2ac849152d7084484a63976cea914ea9156413"
        ],
        [
            "rewrite H6;clear H6.",
            "VernacExtend",
            "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
        ],
        [
            "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "a29434467b799a068844e03a9c8c2c45cbe4c12b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H6;clear H6.",
            "VernacExtend",
            "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x2)) (mkCanon_correct (Node x x2))).",
            "VernacExtend",
            "c7c97404fd37d8eb83017a77b45797494244f91b"
        ],
        [
            "split;trivial;subst nk.",
            "VernacExtend",
            "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
        ],
        [
            "clear -H12 H.",
            "VernacExtend",
            "bd0428404d6026523e35f613781c3476df0b3275"
        ],
        [
            "assert (tree_heightP x2 <= n) by omega;clear H.",
            "VernacExtend",
            "4a49a2bba09808d76f190cd63a0b5a1aaf9f55e1"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "assert (tree_heightP (Node x x2) <= S n).",
            "VernacExtend",
            "8aab27d2aeabf89928e8f4733095d3ce758b6fa0"
        ],
        [
            "generalize (max_lub _ _ _ H12 H0);intro.",
            "VernacExtend",
            "e6d7ae1707b429e7f3d806fd43e0acb450196317"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x x2) = mkCanon (Node x x2)) by trivial.",
            "VernacExtend",
            "b944b305c6ef015230ea598404d1cc08cf633cba"
        ],
        [
            "generalize (mkCanon_height _ _ H1);intro.",
            "VernacExtend",
            "e31cc829c1db47ff565100f4e139051e1865cd7f"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_Some : forall n t, height t <= S n -> exists t', roundL (S n) t = Some t'.",
            "VernacStartTheoremProof",
            "c8f46d177cfd8d2dd5b44442420b59f5a51298e5"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "symmetry in H1.",
            "VernacExtend",
            "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
        ],
        [
            "copy H1.",
            "VernacExtend",
            "ab6a2ace31991f8c906c1f88199789977b1583e2"
        ],
        [
            "apply tree_round_left_decrease in H1.",
            "VernacExtend",
            "8c4b3447d110e65ff48b9031ef577b2224ff5b55"
        ],
        [
            "destruct H1 as [? [? ?]].",
            "VernacExtend",
            "787dbc926803499e9a09503c86fee4ac1727e31b"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "rewrite<- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H2 : tree_height t0 < S n) by omega.",
            "VernacExtend",
            "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
        ],
        [
            "apply tree_round_left_identity in H2.",
            "VernacExtend",
            "667806aceb8dfb1dfa554b880d1b752e3bfbfde1"
        ],
        [
            "exists t0.",
            "VernacExtend",
            "6d50368891babea086e8c2d39fddce76180a7059"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_left_height_compare : forall t t' n, roundL n t = Some t' -> height t' < n.",
            "VernacStartTheoremProof",
            "e3a957f053950e5bad9cb933de4e2fe00ebe547b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "compute in H.",
            "VernacExtend",
            "686103f70bd92c1e64ec2f78836e7444971cef09"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "assert (H1 := le_lt_dec (tree_height t0) (S n)).",
            "VernacExtend",
            "c9258a6e28421f5b26c4d9cf2c1dd43aaacba791"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "inv l.",
            "VernacExtend",
            "bc13524cfd3b1d903ce15a10499e722312e03c8d"
        ],
        [
            "symmetry in H1.",
            "VernacExtend",
            "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
        ],
        [
            "copy H1.",
            "VernacExtend",
            "ab6a2ace31991f8c906c1f88199789977b1583e2"
        ],
        [
            "apply tree_round_left_decrease in H1.",
            "VernacExtend",
            "8c4b3447d110e65ff48b9031ef577b2224ff5b55"
        ],
        [
            "destruct H1 as [? [? ?]].",
            "VernacExtend",
            "787dbc926803499e9a09503c86fee4ac1727e31b"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H in H1.",
            "VernacExtend",
            "72668ea55992bff4c6a64774b37a8290e2ed12ee"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (H2 : tree_height t0 < S n) by omega.",
            "VernacExtend",
            "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
        ],
        [
            "apply tree_round_left_identity in H2.",
            "VernacExtend",
            "667806aceb8dfb1dfa554b880d1b752e3bfbfde1"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H in H2.",
            "VernacExtend",
            "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply tree_round_left_None in l.",
            "VernacExtend",
            "16a939dbce0d6964d79deb99c394ddd6a65890cb"
        ],
        [
            "unfold roundL,roundableL_tree in *.",
            "VernacExtend",
            "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
        ],
        [
            "rewrite H in l.",
            "VernacExtend",
            "2fd827005c795fc7de50e461a47e50acb651d334"
        ],
        [
            "inv l.",
            "VernacExtend",
            "bc13524cfd3b1d903ce15a10499e722312e03c8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_combine : forall n t1 t2 t1' t2', roundR n (exist (fun t => canonicalTree t)(mkCanon t1) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t1') (mkCanon_correct _)) -> roundR n (exist (fun t => canonicalTree t)(mkCanon t2) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t2') (mkCanon_correct _))-> roundR (S n) (exist (fun t => canonicalTree t)(mkCanon (Node t1 t2)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon (Node t1' t2')) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "6bbd6f343cf6129469ac663291ae31ed8ca27bdf"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "intros ? ? ? ? ? H1 H2.",
            "VernacExtend",
            "0121d00d1517229ac55dbc2a218d5b1c6ac6069e"
        ],
        [
            "unfold tree_round_right in *.",
            "VernacExtend",
            "a386295242b828a35fa2b1ee1c5b5d339fb17daf"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "remember (mkFull n (mkCanon t1)) as o1; remember (mkFull n (mkCanon t2)) as o2.",
            "VernacExtend",
            "4e296e332f7f24549a4a7f6bd40f71967d354397"
        ],
        [
            "icase o1;icase o2.",
            "VernacExtend",
            "e112e2f93717ff9f0911ba3d038970d2ebc3deb4"
        ],
        [
            "symmetry in Heqo1,Heqo2.",
            "VernacExtend",
            "22d356b5f755f3f4ea868d08c6a406c48018db55"
        ],
        [
            "generalize (mkCanon_mkFull_split n t1 t2 s s0);intro H.",
            "VernacExtend",
            "f2d12a768c7f0b1028e48ff5fdc2f5d1f4582254"
        ],
        [
            "destruct H as [_ H].",
            "VernacExtend",
            "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
        ],
        [
            "detach H;auto.",
            "VernacExtend",
            "ff4db3e26f80737b66847a6dc210f3d29548edd4"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "icase (tree_round_rightP (S n) s); icase (tree_round_rightP (S n) s0).",
            "VernacExtend",
            "7109815a088048b3310337e98d163a00a9e1669c"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "rewrite<- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "rewrite<- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_split : forall n t1 t2 t1' t2', roundR (S (S n)) (exist (fun t => canonicalTree t)(mkCanon (Node t1 t2)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon (Node t1' t2')) (mkCanon_correct _)) -> roundR (S n) (exist (fun t => canonicalTree t)(mkCanon t1) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t1') (mkCanon_correct _)) /\\ roundR (S n) (exist (fun t => canonicalTree t)(mkCanon t2) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t)(mkCanon t2') (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "d98787a42d7e8bba8a0eb47c90469f83535d2b56"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "intros ? ? ? ? ? H.",
            "VernacExtend",
            "7b77f8f7e8332748301f074944b6c5a46f84f2c8"
        ],
        [
            "unfold tree_round_right in *.",
            "VernacExtend",
            "a386295242b828a35fa2b1ee1c5b5d339fb17daf"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "remember (mkFull (S (S n)) (mkCanon (Node t1 t2))) as o.",
            "VernacExtend",
            "6a3a87e2a4e9970eec9acf8d3a77270123a715ae"
        ],
        [
            "icase o.",
            "VernacExtend",
            "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
        ],
        [
            "symmetry in Heqo.",
            "VernacExtend",
            "7c9e17471ef37417b4efe25396a55ff7e2458b50"
        ],
        [
            "icase s; remember (S n) as nk.",
            "VernacExtend",
            "dcd95285b50d230b18d91f51df9301e28f51e071"
        ],
        [
            "icase (mkCanon (Node t1 t2)).",
            "VernacExtend",
            "832b44591438431e738e0943576516aded1e32d2"
        ],
        [
            "simpl in Heqo; icase (mkFull nk (Leaf b0)).",
            "VernacExtend",
            "7274dd7acbd8316128bfc9da3872c11b12a4a492"
        ],
        [
            "simpl in Heqo;icase (mkFull nk s1); icase (mkFull nk s2).",
            "VernacExtend",
            "7b3872e3fc256ec3cc9bc59d13060f7e84202308"
        ],
        [
            "generalize (mkCanon_mkFull_split nk t1 t2 s1 s2);intro H1.",
            "VernacExtend",
            "b4535eef2d81327c616ef3acb09840c59c4c1cdc"
        ],
        [
            "destruct H1 as [H1 _].",
            "VernacExtend",
            "a6c834813ac9bc3eed37edeeefb0fa107dee2dac"
        ],
        [
            "detach H1;trivial.",
            "VernacExtend",
            "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
        ],
        [
            "destruct H1 as [H1 H2].",
            "VernacExtend",
            "352758143f119ffe1117850fdcea520fdbdaf126"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite Heqnk in *.",
            "VernacExtend",
            "04d7891f675fe588e9b41c4161d0566d3d1ecec6"
        ],
        [
            "icase (tree_round_rightP (S n) s1); icase (tree_round_rightP (S n) s2).",
            "VernacExtend",
            "660e5e1e13e9772246f0d404a50123faa4a6c2ff"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro H.",
            "VernacExtend",
            "b3c349e3d55f47284ef08c128f7c140b198703f8"
        ],
        [
            "destruct H as [H4 H5].",
            "VernacExtend",
            "c2a7751626aa2695f686607313f4016af3556e06"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_Leaf : forall b n, roundR (S n) (exist (fun t => canonicalTree t)(Leaf b) (canonTree_Leaf _)) = Some (exist (fun t => canonicalTree t)(Leaf b) (canonTree_Leaf _)).",
            "VernacStartTheoremProof",
            "e13927b4ecb117eeb9ab8fe1d5f1db2b15168277"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "unfold tree_round_right.",
            "VernacExtend",
            "7048b8a02f110268d457cb9011c1c51ea90c6e74"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Leaf b)) (canonTree_Leaf _) (mkCanon_correct _)); intro H.",
            "VernacExtend",
            "6a5f3fb0980e3192ab0bd4da1327e326c630b360"
        ],
        [
            "detach H.",
            "VernacExtend",
            "7b1cbb27e97f4baf25473f44a1a47a398ac68156"
        ],
        [
            "rewrite H in IHn.",
            "VernacExtend",
            "f0732d6832759b144fe560e722696ffeacd14e6c"
        ],
        [
            "generalize (tree_round_right_combine _ _ _ _ _ IHn IHn);intro H1.",
            "VernacExtend",
            "b4cb36a1bcab90768bc834f34ddb05a2cf45bdac"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Node (Leaf b) (Leaf b))) (canonTree_Leaf _) (mkCanon_correct _)); intro H2.",
            "VernacExtend",
            "4ab5a88d346bda94c9f3f851ef3d55d5f4b388be"
        ],
        [
            "detach H2.",
            "VernacExtend",
            "37dcd8f355354d3a35c87e71d575ce2b99de98cf"
        ],
        [
            "rewrite H2;trivial.",
            "VernacExtend",
            "f4439e25b4e46b870f332cc9d16d49fe012ed96a"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_identity : forall n t, height t < n -> roundR n t = Some t.",
            "VernacStartTheoremProof",
            "14a70c2eb01591ef2cc2f03588951f59f21586f3"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ( H1 : n > tree_height t0) by omega.",
            "VernacExtend",
            "0f298e50454e3a4e76605a6ddd241c28a3d2bf71"
        ],
        [
            "clear H;rename H1 into H.",
            "VernacExtend",
            "089aeea23b40be75783bd40cfebd97d666c59f76"
        ],
        [
            "revert H;revert t0.",
            "VernacExtend",
            "f6572a4ca7b73d075300b981460c5a2021b2d55a"
        ],
        [
            "induction n;intros;unfold tree_height in *.",
            "VernacExtend",
            "b556b09d0fdbc9100762ec41a97a3430461f5226"
        ],
        [
            "inversion H;icase t0.",
            "VernacExtend",
            "12cdd9ef7756b0905ebb39e6b043d5b6839f7056"
        ],
        [
            "destruct t0 as [x c].",
            "VernacExtend",
            "1bbd86825644f3222b59ad972d4c2be0ab656553"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "generalize (canonTree_proof_irr (Leaf b) (Leaf b) c (canonTree_Leaf _));intro H1.",
            "VernacExtend",
            "a3c7b86026256b43c66b0aef029be88359bd81ac"
        ],
        [
            "detach H1;trivial.",
            "VernacExtend",
            "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply tree_round_right_Leaf.",
            "VernacExtend",
            "f9c8ba98646fcacec3206aaccfe3047d0691c1e6"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert ( n > tree_heightP x1 /\\ n > tree_heightP x2).",
            "VernacExtend",
            "32d630af072b6b048480a22aab2761549f481450"
        ],
        [
            "generalize (le_max_l (tree_heightP x1) (tree_heightP x2)).",
            "VernacExtend",
            "fa9b5de4c57b1b0088b378e3364a17f1fd2a6492"
        ],
        [
            "generalize (le_max_r (tree_heightP x1) (tree_heightP x2)).",
            "VernacExtend",
            "b7b12eb8a2c2081661944ce15392606baebaf783"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct H0 as [H1 H2].",
            "VernacExtend",
            "43c576a82ec84c07f51bc50e18269c6d09f20cef"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c.",
            "VernacExtend",
            "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
        ],
        [
            "destruct c as [H3 [H4 [H5 H6]]].",
            "VernacExtend",
            "acd3d5230a896ef5f935d1d1cd957c7409ac28a2"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H5) H1);intro.",
            "VernacExtend",
            "639d7659a3ce3a1086a4b4f398f8191f0ec58940"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H6) H2);intro.",
            "VernacExtend",
            "b837a2d1c9b898a16d37c7ec12a4ebd8bdfe0809"
        ],
        [
            "generalize (canonTree_proof_irr x1 (mkCanon x1) H5 (mkCanon_correct _));intro H8.",
            "VernacExtend",
            "99cd7c748251a51cb2563b9845b4112ca29bdd71"
        ],
        [
            "detach H8.",
            "VernacExtend",
            "5bf08f2a6d47fffecd56809c43f956d01c62ccb6"
        ],
        [
            "generalize (canonTree_proof_irr x2 (mkCanon x2) H6 (mkCanon_correct _));intro H9.",
            "VernacExtend",
            "2d151c3b14b6e62bc5b186b6ab72961c480323c0"
        ],
        [
            "detach H9.",
            "VernacExtend",
            "ba2310bb2943fbe934d85ab8814138a09aa10acc"
        ],
        [
            "generalize (canonTree_proof_irr (Node x1 x2) (mkCanon (Node x1 x2)) c0 (mkCanon_correct _));intro H10.",
            "VernacExtend",
            "14617d2dd3f24956d5ab3f313a83b80693948a83"
        ],
        [
            "detach H10.",
            "VernacExtend",
            "d973e442f828c667cc28310ca687622d2cbb7098"
        ],
        [
            "rewrite H8,H9,H10 in *.",
            "VernacExtend",
            "1373e5dec310a73733f29bf29718f4c15e1312be"
        ],
        [
            "apply tree_round_right_combine;trivial.",
            "VernacExtend",
            "73435348908ed79ff71e12f9967dff048e5e1d59"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "symmetry; apply mkCanon_identity;trivial.",
            "VernacExtend",
            "0e555111f7cd02568f5f0754a785aeb9847ff37d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_one : forall t1 t2 t c, roundR 1 (exist (fun t => canonicalTree t)(Node t1 t2) c) = Some t -> exists b1,exists b2, t1 = Leaf b1 /\\ t2 = Leaf b2 /\\ t = (exist (fun t => canonicalTree t)(Leaf b2) (canonTree_Leaf _)).",
            "VernacStartTheoremProof",
            "b806823a32a484b841031cd31e970a5fdf10d53e"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase t1;icase t2.",
            "VernacExtend",
            "15a3568284d2cd175af8b5611f56214888d4a2ae"
        ],
        [
            "exists b;exists b0.",
            "VernacExtend",
            "de67d4e18acd25db923c44b2a78056225f1db57e"
        ],
        [
            "compute in H.",
            "VernacExtend",
            "686103f70bd92c1e64ec2f78836e7444971cef09"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_join : forall n t1 t2 t3 t1' t2' t3', join t1 t2 t3 -> roundR n t1 = Some t1' -> roundR n t2 = Some t2' -> roundR n t3 = Some t3' -> join t1' t2' t3'.",
            "VernacStartTheoremProof",
            "69a6fe542a337b040c320bf88fdbfc6ce77060ab"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct t1.",
            "VernacExtend",
            "5690e26538feaaf47c16cb191a37ff746748469a"
        ],
        [
            "unfold tree_round_right in H0.",
            "VernacExtend",
            "283fa8d0f4f737bce47abdd9929a028d3a06e7a7"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "destruct t1 as [t1 ?]; destruct t2 as [t2 ?]; destruct t3 as [t3 ?].",
            "VernacExtend",
            "c6618f03a54e7cd5b0d84e1e6300df20d9b8698b"
        ],
        [
            "icase t1;icase t2;icase t3.",
            "VernacExtend",
            "c5c70d4ca66273d3e6d019b43f0fc8ba11279b31"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "icase b;icase b0;icase b1; compute;split;apply exist_ext;trivial.",
            "VernacExtend",
            "5d1da5b025f02679ed5ce08967dc11b23c1d9da0"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H2);intro H3.",
            "VernacExtend",
            "128f449e8e8487c189a2bb1ef66c2f542b83e6af"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "destruct H as [_ H].",
            "VernacExtend",
            "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
        ],
        [
            "elimtype False;clear-H.",
            "VernacExtend",
            "df101ff4b489cf904bd8e6159ba4f4fc0cc0036e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "5a788672512092066a41f529974e085c08206738"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "destruct H as [H3 H4].",
            "VernacExtend",
            "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
        ],
        [
            "elimtype False;clear-H3 H4 c0.",
            "VernacExtend",
            "a72d5783c74f4fc399400d8d68ca133abc86562e"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "generalize (mkCanon_identity _ c0);intro.",
            "VernacExtend",
            "672d1a1cfdc5ba5010faa95a67579d45610996d8"
        ],
        [
            "icase b; congruence.",
            "VernacExtend",
            "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "5a788672512092066a41f529974e085c08206738"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H2);intro H4.",
            "VernacExtend",
            "8ee077b45930f491d38a27c3225c70e1260a8018"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_right_Leaf b 0);intro H5.",
            "VernacExtend",
            "560f84c9141f4433b357c0ba11169c7fe7be5cfc"
        ],
        [
            "assert (canonTree_Leaf b = c) by apply proof_irr.",
            "VernacExtend",
            "c9324db94f5b27003c608301cef66a6a847b58d7"
        ],
        [
            "rewrite H3 in H5;clear H3.",
            "VernacExtend",
            "18e16c85fb8636c6522ec69b7a026d1be664007b"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H5 in H0;clear H5.",
            "VernacExtend",
            "b846d4b7e33dee5b648f69c3b3a26b261cdfd1d0"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "icase b; inv H; inv H3.",
            "VernacExtend",
            "3b504a53d263be900b9899af24cef6de5e0ec395"
        ],
        [
            "icase (bool_dec b31 b32).",
            "VernacExtend",
            "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
        ],
        [
            "inv H4.",
            "VernacExtend",
            "901a2034cad394e040195b9b10020bf0a16b908e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold BAF.glb.",
            "VernacExtend",
            "eb79f2d18106e6192f9b9503600828c1ee6038db"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "df352eabe36fe83480e7bdedfa49696274abff70"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "elimtype False;clear -H c.",
            "VernacExtend",
            "fa26bc2d4f035abe0cd3394b0e1d8d8a79f00f5e"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "icase b;congruence.",
            "VernacExtend",
            "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "df352eabe36fe83480e7bdedfa49696274abff70"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H2);intro H4.",
            "VernacExtend",
            "8ee077b45930f491d38a27c3225c70e1260a8018"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_right_Leaf b 0);intro.",
            "VernacExtend",
            "35fa49a1b0c3b4c27e6ba840cbb74842b3d32fa1"
        ],
        [
            "assert (canonTree_Leaf b = c0) by apply proof_irr.",
            "VernacExtend",
            "bb02bc20cc8cd7e56ddbda7d3175d7e4544aa8af"
        ],
        [
            "rewrite H4 in H3;clear H4.",
            "VernacExtend",
            "4aa46440341dd396700f545892dabc0792b19379"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H3 in H1;clear H3.",
            "VernacExtend",
            "27cf446084dfa77d508991ea930536685b688fcf"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "icase b; inv H; inv H3; inv H4.",
            "VernacExtend",
            "c036953c568aaa789f26c1b51a8c32023a3face5"
        ],
        [
            "icase (bool_dec b31 b32).",
            "VernacExtend",
            "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "cfd5de51d4e25939e681ebd61032b9713860d1ca"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold BAF.glb.",
            "VernacExtend",
            "eb79f2d18106e6192f9b9503600828c1ee6038db"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b42.",
            "VernacExtend",
            "f1312c574ebdb0bcc8ee214ec32bd58c9d029ed2"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b42.",
            "VernacExtend",
            "f1312c574ebdb0bcc8ee214ec32bd58c9d029ed2"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "df352eabe36fe83480e7bdedfa49696274abff70"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H1);intro H4.",
            "VernacExtend",
            "cb7d8d8048b0c0871b8cd6f5e65a99dbd2e846ce"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_right_Leaf b 0);intro.",
            "VernacExtend",
            "35fa49a1b0c3b4c27e6ba840cbb74842b3d32fa1"
        ],
        [
            "assert (canonTree_Leaf b = c1) by apply proof_irr.",
            "VernacExtend",
            "45b1d455107f8b62b02821b8fc2339b3bf4bf80d"
        ],
        [
            "rewrite H4 in H3;clear H4.",
            "VernacExtend",
            "4aa46440341dd396700f545892dabc0792b19379"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H3 in H2;clear H3.",
            "VernacExtend",
            "3b50dc6fcc42adce18b93f1836854e98b8b062ab"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "icase b; inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
            "VernacExtend",
            "de032df4c6123f7c586596d4756db3bab2f88ffe"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
            "VernacExtend",
            "df352eabe36fe83480e7bdedfa49696274abff70"
        ],
        [
            "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
            "VernacExtend",
            "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H1);intro H4.",
            "VernacExtend",
            "cb7d8d8048b0c0871b8cd6f5e65a99dbd2e846ce"
        ],
        [
            "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
            "VernacExtend",
            "22fe172a243362d822ac59920f21a9d994151567"
        ],
        [
            "generalize (tree_round_right_one _ _ _ _ H2);intro H5.",
            "VernacExtend",
            "8d1fd776c98c1f7cf7a3b96df529e6a4cd48564a"
        ],
        [
            "destruct H5 as [b51 [b52 [H51 [H52 H53]]]];subst.",
            "VernacExtend",
            "681ddd16039acc5a00eb922e148b6c1da74d3213"
        ],
        [
            "inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
            "VernacExtend",
            "b6415d6540a0b2a2201dbdd01fe60812cefe2e8a"
        ],
        [
            "generalize (canonTree_rewrite1 t1);intro H3; generalize (canonTree_rewrite1 t2);intro H4; generalize (canonTree_rewrite1 t3);intro H5; generalize (canonTree_rewrite1 t1');intro H6; generalize (canonTree_rewrite1 t2');intro H7; generalize (canonTree_rewrite1 t3');intro H8; destruct H3 as [? [? ?]]; destruct H4 as [? [? ?]]; destruct H5 as [? [? ?]]; destruct H6 as [? [? ?]]; destruct H7 as [? [? ?]]; destruct H8 as [? [? ?]].",
            "VernacExtend",
            "d4e1694ed4661514ae37999bbdb0e80f892f49d9"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "generalize (tree_round_right_split _ _ _ _ _ H0);intro H01.",
            "VernacExtend",
            "dd388da1c8f0e8dd17c2d439b727c2ae61fa37d9"
        ],
        [
            "generalize (tree_round_right_split _ _ _ _ _ H1);intro H11.",
            "VernacExtend",
            "8fd5b18660eb8f48f2959df79e943136ef9a56db"
        ],
        [
            "generalize (tree_round_right_split _ _ _ _ _ H2);intro H21.",
            "VernacExtend",
            "6c730065ad147441e46052ad36f88589bc92c3ab"
        ],
        [
            "destruct H01 as [H01 H02].",
            "VernacExtend",
            "6918c478d33134759ac1b43027976d6ec219b8e3"
        ],
        [
            "destruct H11 as [H11 H12].",
            "VernacExtend",
            "e1974e4ce31e9065c7b502c0d9f6dea598b78b6e"
        ],
        [
            "destruct H21 as [H21 H22].",
            "VernacExtend",
            "5ac9d8330971075d82ab4bda04366276f754d263"
        ],
        [
            "generalize (mkCanon_join_split _ _ _ _ _ _ H);intro H3.",
            "VernacExtend",
            "538417e9a791189176e6b8477ee5a975b7ce418d"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ H31 H01 H11 H21);intro H41.",
            "VernacExtend",
            "bdedc8d7ba091cf5fe0aea6840ad6e1fccd43df1"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ H32 H02 H12 H22);intro H42.",
            "VernacExtend",
            "5b40ae4d025c765b87247ef37104be2f3e8d2d24"
        ],
        [
            "apply mkCanon_join_combine;trivial.",
            "VernacExtend",
            "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_None : forall n t, n < height t -> roundR n t = None.",
            "VernacStartTheoremProof",
            "395f8d2799eaf65b3918e74657d9af86e02c8bc7"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tree_round_right.",
            "VernacExtend",
            "7048b8a02f110268d457cb9011c1c51ea90c6e74"
        ],
        [
            "generalize (mkFull_None _ _ H);intro.",
            "VernacExtend",
            "aac8975fe6b48d5d41c6e2a56388c30f93cdff96"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_decrease : forall n t, S n = height t -> exists t', roundR (S n) t = Some t' /\\ height t' <= n.",
            "VernacStartTheoremProof",
            "19271b2e92631aaaa82c07c33ef6dbd3f235ea5c"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros; destruct t0; icase x.",
            "VernacExtend",
            "69dbc9a8c4afaec29b752a82601b4c571cd70ad9"
        ],
        [
            "icase x1;icase x2;unfold tree_height in *;inversion H.",
            "VernacExtend",
            "7c671c853f416b61366875f539e3da4cc0454484"
        ],
        [
            "exists (exist (fun t => canonicalTree t) (Leaf b0) (canonTree_Leaf _)).",
            "VernacExtend",
            "58fa6d53472551a681396517a6983d1bc7b1f0db"
        ],
        [
            "compute;split;try omega;try f_equal;try apply exist_ext;trivial.",
            "VernacExtend",
            "f69632261fed51f9918749ee9253bba65eb76f9e"
        ],
        [
            "elimtype False;omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "elimtype False;clear -H1.",
            "VernacExtend",
            "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
        ],
        [
            "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) 0) by omega; clear H1.",
            "VernacExtend",
            "4fd33d518b03948fcb07fc7ba91feb309632262d"
        ],
        [
            "generalize (max_0_r (max (tree_heightP x1_1) (tree_heightP x1_2) + 1));intro.",
            "VernacExtend",
            "d24b4be006df1d4185ad73d76fe106d7e14947dc"
        ],
        [
            "rewrite H0 in H;clear H0.",
            "VernacExtend",
            "811f7a58e18c564af35c6b055d384792dac7a36c"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "elimtype False;clear -H1.",
            "VernacExtend",
            "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
        ],
        [
            "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) (max (tree_heightP x2_1) (tree_heightP x2_2) + 1)) by omega; clear H1.",
            "VernacExtend",
            "cf505960e4f54f0966856abc1b1824d4b26e33f8"
        ],
        [
            "generalize (plus_max_distr_r (max (tree_heightP x1_1) (tree_heightP x1_2)) (max (tree_heightP x2_1) (tree_heightP x2_2)) 1);intro.",
            "VernacExtend",
            "4e4e7862b543e5ccd848c5b9e7d815ca75e16ba3"
        ],
        [
            "rewrite H0 in H;omega.",
            "VernacExtend",
            "d1e3daf704b10903d22ad1c79f649670fe7fb9cc"
        ],
        [
            "remember (S n) as nk.",
            "VernacExtend",
            "4c592adec846f68ed9a938cbef6bc7204726682e"
        ],
        [
            "unfold tree_height in H.",
            "VernacExtend",
            "6f0a5994900d304b7e37570ee9395dd2367747c9"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (nk = max (tree_heightP x1) (tree_heightP x2)) by omega;clear H.",
            "VernacExtend",
            "db23fa6214c158b457bdc23a262fc246a3205116"
        ],
        [
            "generalize (lt_dec (tree_heightP x1) (tree_heightP x2) );intro H.",
            "VernacExtend",
            "a155a027abb29ac4e6c6f24960bfe60d6eb4ec91"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (nk = tree_heightP x2).",
            "VernacExtend",
            "68433559f7b0cda2e65a4f17d63d13618c772ec6"
        ],
        [
            "assert (tree_heightP x1 <= tree_heightP x2 ) by omega.",
            "VernacExtend",
            "eb2f8bc29c5e8bbee98aef428847addc87432391"
        ],
        [
            "generalize (max_r _ _ H);intro.",
            "VernacExtend",
            "7fde9e9d627f1d0d002ef968f3f28cdf99adc387"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite<- H in l.",
            "VernacExtend",
            "188bcc1877234a0721a024fadd0025c3d5f7ab25"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c;destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H21.",
            "VernacExtend",
            "0899e7e25e7aeea9ad36f8988e8e8891bda2b488"
        ],
        [
            "generalize (tree_round_right_identity _ (exist (fun t => canonicalTree t) x1 H3) l);intro H11.",
            "VernacExtend",
            "1b079366ca0f894351f70fc90e2580f5525212ef"
        ],
        [
            "destruct H21 as [? [H21 H22]].",
            "VernacExtend",
            "863182f36b5b65c75271f960a285a4ada94ad0fc"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
            "VernacExtend",
            "97fe348686849a178d2d8bb3c5a751af77ba7abb"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "74b2a23f282f495a0824abd025a18140e261c6b3"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x1 H3 = exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _)).",
            "VernacExtend",
            "5ff3c2605e57f37e4bc4297c0476d9c213a88adc"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "47694f81ebb96e3a708b58680091b1968fe53680"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "assert (tree_round_right (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "526e7f07917c602f94e3481dd32a2b3105c1dc28"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
            "VernacExtend",
            "0c2ac849152d7084484a63976cea914ea9156413"
        ],
        [
            "rewrite H5;clear H5.",
            "VernacExtend",
            "8368d9536fb39e6bf32a42676999c5775eb8bbef"
        ],
        [
            "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "2d22fdb979f422a76de9bebf1933606724605c62"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H5;clear H5.",
            "VernacExtend",
            "8368d9536fb39e6bf32a42676999c5775eb8bbef"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x1 x)) (mkCanon_correct (Node x1 x))).",
            "VernacExtend",
            "86a50a4b559a4c6d87cd578468933f85f8b46e73"
        ],
        [
            "split;trivial;subst nk.",
            "VernacExtend",
            "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
        ],
        [
            "clear -H22 l.",
            "VernacExtend",
            "6dff2c9f35f0c3ea21666e41d0989738a50b3eb9"
        ],
        [
            "assert (tree_heightP x1 <= n) by omega;clear l.",
            "VernacExtend",
            "d4b03797ba75046d33fbc828640b62d689ac5de5"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "assert (tree_heightP (Node x1 x) <= S n).",
            "VernacExtend",
            "9d6836a56c250cc63eee9f97b9924e3edcb2dbc2"
        ],
        [
            "generalize (max_lub _ _ _ H H22);intro.",
            "VernacExtend",
            "bf713280fd8f4f18d36eaad423c0426a480ee5f3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x1 x) = mkCanon (Node x1 x)) by trivial.",
            "VernacExtend",
            "38b1b219945f3261c05521cd136482f89219dd60"
        ],
        [
            "generalize (mkCanon_height _ _ H1);intro.",
            "VernacExtend",
            "e31cc829c1db47ff565100f4e139051e1865cd7f"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (tree_heightP x1 = tree_heightP x2 \\/ tree_heightP x1 > tree_heightP x2).",
            "VernacExtend",
            "d2d3353cd2a55151624ff73042d5be257094f1de"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite<- H in H0.",
            "VernacExtend",
            "044ef0a64c068347d38112a9feb1635f78270f85"
        ],
        [
            "generalize (max_idempotent (tree_heightP x1));intro.",
            "VernacExtend",
            "08528438d659923e0cfb51765c23ef296f788eaa"
        ],
        [
            "rewrite H1 in H0.",
            "VernacExtend",
            "4421ff2cd84dca8f3db1b9c68d58f4e168d6194d"
        ],
        [
            "rewrite<- H0 in H.",
            "VernacExtend",
            "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
        ],
        [
            "clear n0 H1.",
            "VernacExtend",
            "80a5472a37a3a3c4d483230f2795562ea002e7bd"
        ],
        [
            "assert (tree_round_right (S nk) (exist (fun t => canonicalTree t) (Node x1 x2) c) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "59b818719948c1bd2134b19a255b80e2af607467"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "generalize (mkCanon_identity _ c);intro.",
            "VernacExtend",
            "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
        ],
        [
            "rewrite<-H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H1;clear H1.",
            "VernacExtend",
            "00d5f4aac5a8b3519e323a55e4be18868171cc4f"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c.",
            "VernacExtend",
            "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H3) H0);intro H5.",
            "VernacExtend",
            "d93cf3c16dbc6a1d15f53abe7b0c6cef122675d1"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H6.",
            "VernacExtend",
            "b7df9067a10056e032c9ba02af8c2c707f7350c0"
        ],
        [
            "destruct H5 as [? [H11 H12]].",
            "VernacExtend",
            "87c046024cd12ef2f64306f6bf37b4ac056208b6"
        ],
        [
            "destruct H6 as [? [H21 H22]].",
            "VernacExtend",
            "90b5c5f2f0449c8023e919c2ffaf8a27e48edcd4"
        ],
        [
            "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x1 H3)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
            "VernacExtend",
            "b656c1ec12759ed9f42aac4445aeb6f670f45cdd"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "47694f81ebb96e3a708b58680091b1968fe53680"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
            "VernacExtend",
            "97fe348686849a178d2d8bb3c5a751af77ba7abb"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "9fd67603844fba7eec0b68149c7265617496c3da"
        ],
        [
            "rewrite H5 in H11;clear H5.",
            "VernacExtend",
            "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
        ],
        [
            "destruct x0.",
            "VernacExtend",
            "080771fa4796a8f8a5b665c53a861793a726da17"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x0 c1 = exist (fun t => canonicalTree t) (mkCanon x0) (mkCanon_correct _)).",
            "VernacExtend",
            "ac63707e6f2bf3a654b47126e58a54e66a2839c0"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c1);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "8b4de42d6de6f110efa08949d97a3b4dc329def7"
        ],
        [
            "rewrite H5 in H21;clear H5.",
            "VernacExtend",
            "9ec9011253a5a88eca5fdab77078cbda36696aa5"
        ],
        [
            "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "2d22fdb979f422a76de9bebf1933606724605c62"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))).",
            "VernacExtend",
            "ccc8b3d7acbd07f2282f17d3f1ec885cfb8b955f"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "clear - H12 H22 Heqnk.",
            "VernacExtend",
            "7cb7075c692935b8cbfb9f5c0646ffaed1c06907"
        ],
        [
            "unfold tree_height in *.",
            "VernacExtend",
            "6cf808b018092d3a5afb1f060467b3dce93bc24b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "subst nk.",
            "VernacExtend",
            "1a30101555f48d7c79b686bb3adc7038c4511f82"
        ],
        [
            "assert (tree_heightP (Node x x0) <= S n).",
            "VernacExtend",
            "027d20ee8f150b8b2f2e256b9c177b0fb0de7282"
        ],
        [
            "generalize (max_lub _ _ _ H12 H22);intro.",
            "VernacExtend",
            "f58ed39dd0930b424b4a711b67dc32ce37c224bb"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x x0) = mkCanon (Node x x0)) by trivial.",
            "VernacExtend",
            "bed616be7b312d7ce1b56c7bb1e04e36cc219a2c"
        ],
        [
            "generalize (mkCanon_height _ _ H0);intro.",
            "VernacExtend",
            "a8f8c94392579a0dde84863c9ee5a2dfd7ef059a"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (nk = tree_heightP x1).",
            "VernacExtend",
            "bdc8051231fdc6e8aecc1472d524250acb39ac6f"
        ],
        [
            "assert (tree_heightP x2 <= tree_heightP x1 ) by omega.",
            "VernacExtend",
            "6e674527ce79cbac56414ae55383ae08e65d4edd"
        ],
        [
            "generalize (max_l _ _ H1);intro.",
            "VernacExtend",
            "40694c751ddd0b3900054841b0e96671e5d7a466"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "rewrite<- H1 in H.",
            "VernacExtend",
            "e11682041b56405a4c951bbc5e0f5120244b17e2"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c;destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 H4) H1);intro H11.",
            "VernacExtend",
            "1f1df06f22dc8ddc87be614c094e6ece44551238"
        ],
        [
            "generalize (tree_round_right_identity _ (exist (fun t => canonicalTree t) x2 H5) H);intro H21.",
            "VernacExtend",
            "272e424af7bff608377b936b820fedb242658372"
        ],
        [
            "destruct H11 as [? [H11 H12]].",
            "VernacExtend",
            "a8f98c1fc768df646018e3d27ac053d6a39015a9"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x1 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
            "VernacExtend",
            "2189c5c331eba578c08191f252be1dc3f3fbfe0b"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "41760b235d413eb6f4ee57a31b2e518ac5f49202"
        ],
        [
            "rewrite H6 in H11;clear H6.",
            "VernacExtend",
            "5675c1d11de624f1f779780ad005c55c9336a6fd"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
            "VernacExtend",
            "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
            "VernacExtend",
            "9fd67603844fba7eec0b68149c7265617496c3da"
        ],
        [
            "rewrite H6 in H11;clear H6.",
            "VernacExtend",
            "5675c1d11de624f1f779780ad005c55c9336a6fd"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) x2 H5 = exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _)).",
            "VernacExtend",
            "44bd8b4c4e9485df552e969ad80c4c37daacced4"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H5);intro H23; rewrite H23; trivial.",
            "VernacExtend",
            "389618fca8f8d5ba6ed28856975d616d4a8ca446"
        ],
        [
            "rewrite H6 in H21;clear H6.",
            "VernacExtend",
            "5c031d266d81511bbdfacb431036df70fbd1a67e"
        ],
        [
            "assert (tree_round_right (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
            "VernacExtend",
            "526e7f07917c602f94e3481dd32a2b3105c1dc28"
        ],
        [
            "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
            "VernacExtend",
            "0c2ac849152d7084484a63976cea914ea9156413"
        ],
        [
            "rewrite H6;clear H6.",
            "VernacExtend",
            "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
        ],
        [
            "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
            "VernacExtend",
            "2d22fdb979f422a76de9bebf1933606724605c62"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H6;clear H6.",
            "VernacExtend",
            "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x2)) (mkCanon_correct (Node x x2))).",
            "VernacExtend",
            "c7c97404fd37d8eb83017a77b45797494244f91b"
        ],
        [
            "split;trivial;subst nk.",
            "VernacExtend",
            "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
        ],
        [
            "clear -H12 H.",
            "VernacExtend",
            "bd0428404d6026523e35f613781c3476df0b3275"
        ],
        [
            "assert (tree_heightP x2 <= n) by omega;clear H.",
            "VernacExtend",
            "4a49a2bba09808d76f190cd63a0b5a1aaf9f55e1"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "assert (tree_heightP (Node x x2) <= S n).",
            "VernacExtend",
            "8aab27d2aeabf89928e8f4733095d3ce758b6fa0"
        ],
        [
            "generalize (max_lub _ _ _ H12 H0);intro.",
            "VernacExtend",
            "e6d7ae1707b429e7f3d806fd43e0acb450196317"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (mkCanon (Node x x2) = mkCanon (Node x x2)) by trivial.",
            "VernacExtend",
            "b944b305c6ef015230ea598404d1cc08cf633cba"
        ],
        [
            "generalize (mkCanon_height _ _ H1);intro.",
            "VernacExtend",
            "e31cc829c1db47ff565100f4e139051e1865cd7f"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_Some : forall n t, height t <= S n -> exists t', roundR (S n) t = Some t'.",
            "VernacStartTheoremProof",
            "32e9cff9b13d281a7b48be1e75894a64b348dba2"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "symmetry in H1.",
            "VernacExtend",
            "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
        ],
        [
            "copy H1.",
            "VernacExtend",
            "ab6a2ace31991f8c906c1f88199789977b1583e2"
        ],
        [
            "apply tree_round_right_decrease in H1.",
            "VernacExtend",
            "22b7a94fdc5c6d1b6a2431281dce81bffa1c35ff"
        ],
        [
            "destruct H1 as [? [? ?]].",
            "VernacExtend",
            "787dbc926803499e9a09503c86fee4ac1727e31b"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "rewrite<- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H2 : tree_height t0 < S n) by omega.",
            "VernacExtend",
            "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
        ],
        [
            "apply tree_round_right_identity in H2.",
            "VernacExtend",
            "f25bcf24d827411433114258b744892258d0f0e0"
        ],
        [
            "exists t0.",
            "VernacExtend",
            "6d50368891babea086e8c2d39fddce76180a7059"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_height_compare : forall t t' n, roundR n t = Some t' -> height t' < n.",
            "VernacStartTheoremProof",
            "9fc92d3ae618b50a1853c48e4ec4c45d36f33e58"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "compute in H.",
            "VernacExtend",
            "686103f70bd92c1e64ec2f78836e7444971cef09"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "assert (H1 := le_lt_dec (tree_height t0) (S n)).",
            "VernacExtend",
            "c9258a6e28421f5b26c4d9cf2c1dd43aaacba791"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "inv l.",
            "VernacExtend",
            "bc13524cfd3b1d903ce15a10499e722312e03c8d"
        ],
        [
            "symmetry in H1.",
            "VernacExtend",
            "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
        ],
        [
            "copy H1.",
            "VernacExtend",
            "ab6a2ace31991f8c906c1f88199789977b1583e2"
        ],
        [
            "apply tree_round_right_decrease in H1.",
            "VernacExtend",
            "22b7a94fdc5c6d1b6a2431281dce81bffa1c35ff"
        ],
        [
            "destruct H1 as [? [? ?]].",
            "VernacExtend",
            "787dbc926803499e9a09503c86fee4ac1727e31b"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H in H1.",
            "VernacExtend",
            "72668ea55992bff4c6a64774b37a8290e2ed12ee"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (H2 : tree_height t0 < S n) by omega.",
            "VernacExtend",
            "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
        ],
        [
            "apply tree_round_right_identity in H2.",
            "VernacExtend",
            "f25bcf24d827411433114258b744892258d0f0e0"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H in H2.",
            "VernacExtend",
            "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply tree_round_right_None in l.",
            "VernacExtend",
            "5613c60a24b1ce4a792cb90a72eb959ff1c9c6f8"
        ],
        [
            "unfold roundR,roundableR_tree in *.",
            "VernacExtend",
            "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
        ],
        [
            "rewrite H in l.",
            "VernacExtend",
            "2fd827005c795fc7de50e461a47e50acb651d334"
        ],
        [
            "inv l.",
            "VernacExtend",
            "bc13524cfd3b1d903ce15a10499e722312e03c8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_round_right_zero : forall t, roundR 0 t = None.",
            "VernacStartTheoremProof",
            "9884843ad0ebb98d2915394f52ae40d56799a396"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold tree_round_right.",
            "VernacExtend",
            "7048b8a02f110268d457cb9011c1c51ea90c6e74"
        ],
        [
            "icase (mkFull 0 (proj1_sig t0)).",
            "VernacExtend",
            "26c9725bfa4dd073d0a1929c6cab0e6b79f31dd5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_Leaf : forall n b c, avg (S n) (exist (fun t => canonicalTree t)(Leaf b) c) (exist (fun t => canonicalTree t)(Leaf b) c) = Some (exist (fun t => canonicalTree t)(Leaf b) c).",
            "VernacStartTheoremProof",
            "4afbff4ed18c6acf86e8d65e60a81288c2cfe81b"
        ],
        [
            "unfold avg,avgable_tree in *.",
            "VernacExtend",
            "b627129ffff7d4e26a5120cb69eafbb114222625"
        ],
        [
            "induction n ;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "specialize ( IHn b c).",
            "VernacExtend",
            "70e37eb8b7102cd8268a14b3d55de21994cf1baa"
        ],
        [
            "icase (mkFull n (Leaf b)).",
            "VernacExtend",
            "139412c3c235384eee87742c728752d11d38f05a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s).",
            "VernacExtend",
            "33dd8891a1053ab35c628fcfe6fb64419316756b"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "inv IHn.",
            "VernacExtend",
            "1bc818ce5aa84ea48cccd1a86181bc19d9db8bcc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_identity : forall n t, height t < n -> avg n t t = Some t.",
            "VernacStartTheoremProof",
            "8341afcec88afd119208a2b1cacd2ba637be5d25"
        ],
        [
            "unfold avg,avgable_tree in *.",
            "VernacExtend",
            "b627129ffff7d4e26a5120cb69eafbb114222625"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros; destruct t0; unfold tree_height in *.",
            "VernacExtend",
            "0f6b6a97594a3252bc43df8ff8b85e8a55a1f79e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "apply tree_avg_Leaf.",
            "VernacExtend",
            "a248e0c207190f4f10c7fc87290a3a9ccb16c9dd"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (tree_heightP x1 < n /\\ tree_heightP x2 < n).",
            "VernacExtend",
            "412ef4f80a659f1d154e45a2e6c39ae25a1a791a"
        ],
        [
            "assert (max (tree_heightP x1) (tree_heightP x2) < n) by omega.",
            "VernacExtend",
            "ebfef53ddc9a58c495fc768968996c5e5a008669"
        ],
        [
            "generalize (le_max_l (tree_heightP x1) (tree_heightP x2));intro.",
            "VernacExtend",
            "59d3878fd2062adf1e820ae6f354efe6473532fc"
        ],
        [
            "generalize (le_max_r (tree_heightP x1) (tree_heightP x2));intro.",
            "VernacExtend",
            "f6a59f494a0cbe081b5521cc95f76e4e3e91884b"
        ],
        [
            "split;omega.",
            "VernacExtend",
            "df637d3a8961211fcf05d779d2cb4ddd6ba80684"
        ],
        [
            "destruct H0 as [? ?].",
            "VernacExtend",
            "0f697508c155a692f324e9ae2fc37c0385689df4"
        ],
        [
            "copy c.",
            "VernacExtend",
            "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
        ],
        [
            "simpl in c0.",
            "VernacExtend",
            "72ef962efe870f10b593d4b396bcff6020716681"
        ],
        [
            "destruct c0 as [? [? [? ?]]].",
            "VernacExtend",
            "f5a4c8267f800fd26ac898e46507f0511b361079"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x1 c0) H0);intro.",
            "VernacExtend",
            "5c9f146c9883048cd60513a971a97b5460831193"
        ],
        [
            "generalize (IHn (exist (fun t => canonicalTree t) x2 c1) H1);intro.",
            "VernacExtend",
            "6aa3d80b870c6459acde7af1859464ecaaa96e8d"
        ],
        [
            "clear - H2 H3.",
            "VernacExtend",
            "4e8f4ded31fadc8965664652d1eb78a93c7ac505"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl in H2,H3;simpl.",
            "VernacExtend",
            "97ce50ca7c2c4255cc7ac8bdde93740d553f7235"
        ],
        [
            "icase (mkFull n x1); icase (mkFull n x2).",
            "VernacExtend",
            "12d0dd0b2de38c48d14e2a3af7e451b11fc7aa3a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s); icase (tree_avgP s0 s0).",
            "VernacExtend",
            "0707e6f6f8dff86c8cb5f06236101cad0c38bf19"
        ],
        [
            "inv H2;inv H3.",
            "VernacExtend",
            "b0459147af7aebdc3ce0896fd581e1f236254fcd"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (mkCanon s1); icase (mkCanon s2).",
            "VernacExtend",
            "93e9c4b2c0fd7b522c60f9e3ff3b3785f60efef1"
        ],
        [
            "icase b; icase b0;simpl in *.",
            "VernacExtend",
            "c54d895896203fc5123ebd53170aa2bacfbfb426"
        ],
        [
            "elimtype False; firstorder.",
            "VernacExtend",
            "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
        ],
        [
            "elimtype False; firstorder.",
            "VernacExtend",
            "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_None : forall n t1 t2, n <= max (height t1) (height t2) -> avg n t1 t2 = None.",
            "VernacStartTheoremProof",
            "1a3bcccb52116dfd0729beee5722745b867a0aa5"
        ],
        [
            "unfold avg,avgable_tree in *.",
            "VernacExtend",
            "b627129ffff7d4e26a5120cb69eafbb114222625"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "assert (n < tree_height t1 \\/n < tree_height t2).",
            "VernacExtend",
            "d235c009a31e1d215e2c19187cb037758a549d76"
        ],
        [
            "assert (n < max (tree_height t1) (tree_height t2)) by omega.",
            "VernacExtend",
            "1f82ee44a8c34b4cd1f20ac7ce327685837a5986"
        ],
        [
            "apply Nat.max_lt_iff.",
            "VernacExtend",
            "e00c44c3360b976f806d65f0539ab4cd37d5bfe4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct t1;destruct t2; simpl;destruct H0; unfold tree_height in *; simpl in *.",
            "VernacExtend",
            "a800f211474e5332b1e3ab40022fd3da9143c1d5"
        ],
        [
            "generalize (mkFull_None _ _ H0);intro.",
            "VernacExtend",
            "85d19c29e509b419b0e6f6e60fefdd9dba95a765"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "generalize (mkFull_None _ _ H0);intro.",
            "VernacExtend",
            "85d19c29e509b419b0e6f6e60fefdd9dba95a765"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "icase (mkFull n x).",
            "VernacExtend",
            "4c141d1e809b8b9579644cf3cf3e28cc2715ed7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_split : forall n t11 t12 t21 t22 t31 t32, avg (S (S n)) (exist (fun t => canonicalTree t) (mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon (Node t21 t22)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon (Node t31 t32)) (mkCanon_correct _))-> avg (S n ) (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon t31) (mkCanon_correct _)) /\\ avg (S n ) (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon t32) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "0796f96dc4e26656281a6fa5a0590fbd85d3e19a"
        ],
        [
            "unfold avg,avgable_tree in *.",
            "VernacExtend",
            "b627129ffff7d4e26a5120cb69eafbb114222625"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)); simpl in Heqs,Heqs0; rewrite<- Heqs in H; rewrite<-Heqs0 in H; icase s;icase s0.",
            "VernacExtend",
            "c9ee4c071d7e487b3beebc1f25f88ee80413ae98"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
            "VernacExtend",
            "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "5623a56ef660641db9c08b1c976cdc082e775789"
        ],
        [
            "destruct H1 as [H11 H12]; destruct H2 as [H21 H22]; rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "f471a111b6457cd93714bf5cf27282c713d712ec"
        ],
        [
            "icase (mkFull n (Leaf b)); icase (mkFull n (Leaf b0)).",
            "VernacExtend",
            "376fdcc9dc30beab9c1a61651d28e275d6f2b87c"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "icase (tree_avgP s s0).",
            "VernacExtend",
            "bc3f6bb12ceb5cdb5d71632cafa32500ee7da58f"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "symmetry in Heqs0; generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1; generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "34548d62d577b50f5f94005094b71fde4bfeaa69"
        ],
        [
            "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
            "VernacExtend",
            "979bd7453c83386d4d2449de40c920f8b75e730f"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n (Leaf b)); icase (mkFull n s0_1); icase (mkFull n s0_2).",
            "VernacExtend",
            "7ec1269cedd4b6b21bccb96d85d3f7f1e8b8f064"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "icase (tree_avgP s s0); icase (tree_avgP s s1).",
            "VernacExtend",
            "53fa47332ddcea3c527d8e9dd488c2a4923893b1"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "symmetry in Heqs; generalize (mkCanon_split _ _ _ _ Heqs);intro H1; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "b61d4d249d819e257671e8d5b0a841f85eba358c"
        ],
        [
            "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
            "VernacExtend",
            "979bd7453c83386d4d2449de40c920f8b75e730f"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n (Leaf b)).",
            "VernacExtend",
            "b2172c37ef977b7ea32c7861624ccdaf215caed5"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "icase (tree_avgP s s3); icase (tree_avgP s0 s3).",
            "VernacExtend",
            "23c7289a65e03e8e38db66e646639af6b57de84f"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "symmetry in Heqs,Heqs0; generalize (mkCanon_split _ _ _ _ Heqs);intro H1; generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
            "VernacExtend",
            "de8ba9d2db71fec692784793945909f48a9576e0"
        ],
        [
            "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
            "VernacExtend",
            "979bd7453c83386d4d2449de40c920f8b75e730f"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n s0_1); icase (mkFull n s0_2).",
            "VernacExtend",
            "18268c1e972cdf517f471bde2decfdbafa2d3ac1"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "icase (tree_avgP s s3); icase (tree_avgP s0 s4).",
            "VernacExtend",
            "e569d5fa753898566b15e403e8221ea3e3705ee1"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
            "VernacExtend",
            "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
        ],
        [
            "destruct H3 as [H31 H32].",
            "VernacExtend",
            "b19fe2f9a37c81a01039417b377bdf68fc674dec"
        ],
        [
            "split;f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "cca94aa2ffc05713ba47869af490d366820795d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_combine : forall n t11 t12 t21 t22 t31 t32, avg n (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon t31) (mkCanon_correct _)) -> avg n (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon t32) (mkCanon_correct _)) -> avg (S n) (exist (fun t => canonicalTree t) (mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist (fun t => canonicalTree t) (mkCanon (Node t21 t22)) (mkCanon_correct _)) = Some (exist (fun t => canonicalTree t) (mkCanon (Node t31 t32)) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "2776e6990bf160f69f77dbb31d0cbeb7ca6a84ae"
        ],
        [
            "unfold avg,avgable_tree in *.",
            "VernacExtend",
            "b627129ffff7d4e26a5120cb69eafbb114222625"
        ],
        [
            "intros ? ? ? ? ? ? ? H1 H2.",
            "VernacExtend",
            "c99940cf9f29e9c9face4ff67e894adf76d2bc21"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)); simpl in Heqs,Heqs0; rewrite<- Heqs; rewrite<- Heqs0; icase s;icase s0.",
            "VernacExtend",
            "a949326bc4cf26fc907a807ca498b82f02643721"
        ],
        [
            "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H11; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H21.",
            "VernacExtend",
            "0a9ec392216387f233dde3eb25af2613b9f00a8f"
        ],
        [
            "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
            "VernacExtend",
            "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n (Leaf b)); icase (mkFull n (Leaf b0)).",
            "VernacExtend",
            "376fdcc9dc30beab9c1a61651d28e275d6f2b87c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s0).",
            "VernacExtend",
            "bc3f6bb12ceb5cdb5d71632cafa32500ee7da58f"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite<-H0;rewrite<-H1;trivial.",
            "VernacExtend",
            "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
        ],
        [
            "symmetry in Heqs0; generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H11; generalize (mkCanon_split _ _ _ _ Heqs0);intro H21.",
            "VernacExtend",
            "45e6683e52814a842da1297cb766ed313f05e867"
        ],
        [
            "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
            "VernacExtend",
            "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n (Leaf b)); icase (mkFull n s0_1); icase (mkFull n s0_2).",
            "VernacExtend",
            "7ec1269cedd4b6b21bccb96d85d3f7f1e8b8f064"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s0); icase (tree_avgP s s1).",
            "VernacExtend",
            "53fa47332ddcea3c527d8e9dd488c2a4923893b1"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "rewrite<-H0;rewrite<-H1;trivial.",
            "VernacExtend",
            "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
        ],
        [
            "symmetry in Heqs; generalize (mkCanon_split _ _ _ _ Heqs);intro H11; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H21.",
            "VernacExtend",
            "d52d86b8c0aa1811445ee23c5c21d892776cbaa0"
        ],
        [
            "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
            "VernacExtend",
            "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n (Leaf b)).",
            "VernacExtend",
            "b2172c37ef977b7ea32c7861624ccdaf215caed5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s3); icase (tree_avgP s0 s3).",
            "VernacExtend",
            "23c7289a65e03e8e38db66e646639af6b57de84f"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "rewrite<- H0;rewrite<- H1;trivial.",
            "VernacExtend",
            "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
        ],
        [
            "symmetry in Heqs,Heqs0; generalize (mkCanon_split _ _ _ _ Heqs);intro H11; generalize (mkCanon_split _ _ _ _ Heqs0);intro H21.",
            "VernacExtend",
            "db67009f916497fab53589b46e56467596a428bd"
        ],
        [
            "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
            "VernacExtend",
            "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
        ],
        [
            "rewrite H11,H12,H21,H22 in *.",
            "VernacExtend",
            "d3288713d9673c705079d02ed4a3726fbd1ce442"
        ],
        [
            "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n s0_1); icase (mkFull n s0_2).",
            "VernacExtend",
            "18268c1e972cdf517f471bde2decfdbafa2d3ac1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (tree_avgP s s3); icase (tree_avgP s0 s4).",
            "VernacExtend",
            "e569d5fa753898566b15e403e8221ea3e3705ee1"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "f_equal;apply exist_ext.",
            "VernacExtend",
            "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
        ],
        [
            "rewrite<- H0;rewrite<- H1;trivial.",
            "VernacExtend",
            "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_round2avg : forall n t1 t2 t3, roundL n t3 = Some t1 -> roundR n t3 = Some t2 -> avg n t1 t2 = Some t3.",
            "VernacStartTheoremProof",
            "0785f84a1855a12341133496a3c247f724f2dfff"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "induction n;intros ? ? ? H1 H2.",
            "VernacExtend",
            "b4ee214cafa7501bfbb6aa3d62232cbcf6191297"
        ],
        [
            "destruct t3 as [x3 c3].",
            "VernacExtend",
            "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
        ],
        [
            "icase x3.",
            "VernacExtend",
            "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
        ],
        [
            "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
            "VernacExtend",
            "195068c20e4ffcf8d76286499ee2886c68b06bfa"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "icase x3.",
            "VernacExtend",
            "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply f_equal;apply exist_ext.",
            "VernacExtend",
            "473463cbeb33b5e37ec27a65adf9f8a1ea57eb23"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "icase x3_1;icase x3_2.",
            "VernacExtend",
            "daaf859edbffd749ae655ea23afae6d709346c12"
        ],
        [
            "icase x1;icase x2.",
            "VernacExtend",
            "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
        ],
        [
            "inv H1;inv H2.",
            "VernacExtend",
            "475fe94295b345ec587611d2f4b7c6525a02d1ea"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply f_equal;apply exist_ext.",
            "VernacExtend",
            "473463cbeb33b5e37ec27a65adf9f8a1ea57eb23"
        ],
        [
            "icase b1;icase b2;compute in c3.",
            "VernacExtend",
            "c3f2e7efc732f10cc47975ebfdd484cbc7298344"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "destruct c3 as [c3 ?].",
            "VernacExtend",
            "75029210cf3603847db185e536c56a2b4ee7d286"
        ],
        [
            "destruct c3; inv H0.",
            "VernacExtend",
            "01a624a9142829b4c11b9617cb8334b0a3ed3134"
        ],
        [
            "destruct c3 as [? [c3 ?]].",
            "VernacExtend",
            "c5224d3eeec154fbee5f32a46653befe6d94b6bd"
        ],
        [
            "destruct c3; inv H1.",
            "VernacExtend",
            "c6c61bd578df03d44b0435cde48dc14e7b9b9f52"
        ],
        [
            "generalize (mkCanon_identity _ c3);intro H31.",
            "VernacExtend",
            "606c698af9fca68e02e0afd19ac42b0c582606ad"
        ],
        [
            "generalize (mkCanon_rewrite x3);intro H32.",
            "VernacExtend",
            "64413d8ea13463bc01ca6e38d0e9978aa7ea5fdf"
        ],
        [
            "destruct H32 as [x31 [x32 H32]].",
            "VernacExtend",
            "adff58517ab6b3d275e261c74d2f834b5dcfa5d8"
        ],
        [
            "rewrite H32 in H31.",
            "VernacExtend",
            "afbe5b9bb1512142f88157612815f3891029f948"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c3 H31);intro H33.",
            "VernacExtend",
            "05f2f0a435ed842adf32188769a3b74988145090"
        ],
        [
            "generalize (mkCanon_identity _ c1);intro H11.",
            "VernacExtend",
            "b68dfe726af18b90b87284586c6d51807b36334d"
        ],
        [
            "generalize (mkCanon_rewrite x1);intro H12.",
            "VernacExtend",
            "d1fcda947c72d8650cd5fd1f639618d0ee38ee8d"
        ],
        [
            "destruct H12 as [x11 [x12 H12]].",
            "VernacExtend",
            "01d357698ab3be36775553b38eaa0d4614351eb3"
        ],
        [
            "rewrite H12 in H11.",
            "VernacExtend",
            "4bef6c6c4fd0a010878915d10fc3950ae8905d1e"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c1 H11);intro H13.",
            "VernacExtend",
            "dcb38f25e89e76685eef1131a79194043fb069ee"
        ],
        [
            "generalize (mkCanon_identity _ c2);intro H21.",
            "VernacExtend",
            "bff7c1cab24590ec88a3e68161f69341a7329849"
        ],
        [
            "generalize (mkCanon_rewrite x2);intro H22.",
            "VernacExtend",
            "e36fccf8aa62eea74245df963ac0c133e3a8a7ee"
        ],
        [
            "destruct H22 as [x21 [x22 H22]].",
            "VernacExtend",
            "9a3286c3191fc3e5af51c55335a4b62adb1ca5f2"
        ],
        [
            "rewrite H22 in H21.",
            "VernacExtend",
            "e4e7181268db44e124005d5b112f2c32c5264c02"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c2 H21);intro H23.",
            "VernacExtend",
            "f037072d5cba9922bb4d20fcfde1651f247c7634"
        ],
        [
            "rewrite<- H33 in H1,H2.",
            "VernacExtend",
            "6e97d9af209b0396cf3f8b762475867d40776aba"
        ],
        [
            "rewrite<- H13 in H1.",
            "VernacExtend",
            "64509c701ca8f856ebf39fb23d847991ce219bba"
        ],
        [
            "rewrite<- H23 in H2.",
            "VernacExtend",
            "2e243a8332f6ac8374ed9e88e9d0105114ac1e82"
        ],
        [
            "generalize (tree_round_left_split _ _ _ _ _ H1);intro H14.",
            "VernacExtend",
            "a3efca16b458a1ff6e33db58864eea659eb5ada7"
        ],
        [
            "generalize (tree_round_right_split _ _ _ _ _ H2);intro H24.",
            "VernacExtend",
            "91c21c1bde71668e63c093c345fef17fd18363b7"
        ],
        [
            "destruct H14 as [H14 H15]; destruct H24 as [H24 H25].",
            "VernacExtend",
            "12b121894bbb42aeecd1bcc3b5c166ea15ae9fc2"
        ],
        [
            "generalize (IHn _ _ _ H14 H24);intro H34.",
            "VernacExtend",
            "b47a143b9ac7cee7e6ada71866b837f4391d8bdc"
        ],
        [
            "generalize (IHn _ _ _ H15 H25);intro H35.",
            "VernacExtend",
            "4ba3b5cc930f364344281c68ada239d05bfd8962"
        ],
        [
            "generalize (tree_avg_combine _ _ _ _ _ _ _ H34 H35);intro H36.",
            "VernacExtend",
            "6cc989c70a96a972ef88dc19536bd1c894d07772"
        ],
        [
            "rewrite H13 in H36.",
            "VernacExtend",
            "c4fcf3f7f09aa4ef002a8579a7dd9084a0f1617d"
        ],
        [
            "rewrite H23 in H36.",
            "VernacExtend",
            "59d62063690163db02e86e7c5575265b26cabf7e"
        ],
        [
            "rewrite H33 in H36.",
            "VernacExtend",
            "a8a4c063e338a91e8cc9689f5780368a6a6df85f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_avg2round : forall n t1 t2 t3, avg n t1 t2 = Some t3 -> roundL n t3 = Some t1 /\\ roundR n t3 = Some t2.",
            "VernacStartTheoremProof",
            "3b260f777d67845aec6dd44575a25736ca511f21"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
            "VernacExtend",
            "195068c20e4ffcf8d76286499ee2886c68b06bfa"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "icase x1; icase x2; icase x3.",
            "VernacExtend",
            "e7f506ee38d3e0e5e6e17b73d02de1e3940c65a2"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase (bool_dec b b0).",
            "VernacExtend",
            "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "unfold tree_round_left; unfold tree_round_right; simpl.",
            "VernacExtend",
            "8055317468065f773f3fb4e3be9d9b7905f0a7a9"
        ],
        [
            "try subst.",
            "VernacExtend",
            "e5e31f092f515cdb7cde379b327cd358da0036ac"
        ],
        [
            "split;apply f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "7c5464ffae546e3dd21622e7d85a9bf8dbd277dc"
        ],
        [
            "unfold tree_avg in H.",
            "VernacExtend",
            "74e05ef636f45788f81c5b9df7702ccbdce6d706"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase (bool_dec b b0).",
            "VernacExtend",
            "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "unfold tree_round_left; unfold tree_round_right; simpl.",
            "VernacExtend",
            "8055317468065f773f3fb4e3be9d9b7905f0a7a9"
        ],
        [
            "split;apply f_equal;apply exist_ext;trivial.",
            "VernacExtend",
            "7c5464ffae546e3dd21622e7d85a9bf8dbd277dc"
        ],
        [
            "generalize (mkCanon_identity _ c1);intro H11; generalize (mkCanon_identity _ c2);intro H21.",
            "VernacExtend",
            "b8806e5b4f7e0058593239bcc550ffe373de69bb"
        ],
        [
            "generalize (mkCanon_identity _ c3);intro H31.",
            "VernacExtend",
            "606c698af9fca68e02e0afd19ac42b0c582606ad"
        ],
        [
            "generalize (mkCanon_rewrite x1);intro H12.",
            "VernacExtend",
            "d1fcda947c72d8650cd5fd1f639618d0ee38ee8d"
        ],
        [
            "generalize (mkCanon_rewrite x2);intro H22.",
            "VernacExtend",
            "e36fccf8aa62eea74245df963ac0c133e3a8a7ee"
        ],
        [
            "generalize (mkCanon_rewrite x3);intro H32.",
            "VernacExtend",
            "64413d8ea13463bc01ca6e38d0e9978aa7ea5fdf"
        ],
        [
            "destruct H12 as [x11 [x12 H12]].",
            "VernacExtend",
            "01d357698ab3be36775553b38eaa0d4614351eb3"
        ],
        [
            "destruct H22 as [x21 [x22 H22]].",
            "VernacExtend",
            "9a3286c3191fc3e5af51c55335a4b62adb1ca5f2"
        ],
        [
            "destruct H32 as [x31 [x32 H32]].",
            "VernacExtend",
            "adff58517ab6b3d275e261c74d2f834b5dcfa5d8"
        ],
        [
            "rewrite H12 in H11.",
            "VernacExtend",
            "4bef6c6c4fd0a010878915d10fc3950ae8905d1e"
        ],
        [
            "rewrite H22 in H21.",
            "VernacExtend",
            "e4e7181268db44e124005d5b112f2c32c5264c02"
        ],
        [
            "rewrite H32 in H31.",
            "VernacExtend",
            "afbe5b9bb1512142f88157612815f3891029f948"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c1 H11);intro H13.",
            "VernacExtend",
            "dcb38f25e89e76685eef1131a79194043fb069ee"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c2 H21);intro H23.",
            "VernacExtend",
            "f037072d5cba9922bb4d20fcfde1651f247c7634"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c3 H31);intro H33.",
            "VernacExtend",
            "05f2f0a435ed842adf32188769a3b74988145090"
        ],
        [
            "rewrite<-H13 in *.",
            "VernacExtend",
            "7d485d361ffd3e5b3b42de9f2918f5dcb6d7ae1c"
        ],
        [
            "rewrite<-H23 in *.",
            "VernacExtend",
            "f7bdd75994b8b971532eb0be483ffae4aa516bae"
        ],
        [
            "rewrite<-H33 in *.",
            "VernacExtend",
            "87d260a6d1d4378dfddd90d7d47030f1e3e9f9d9"
        ],
        [
            "generalize (tree_avg_split _ _ _ _ _ _ _ H);intro H34.",
            "VernacExtend",
            "768da67f141f4dc82bc9742ad01993c886e9d40a"
        ],
        [
            "destruct H34 as [H34 H35].",
            "VernacExtend",
            "5713e417e9d800ed085ed6c102854c19a74d6323"
        ],
        [
            "generalize (IHn _ _ _ H34);intro H36.",
            "VernacExtend",
            "bb0e015a643150078b3f5de3b4c09eb819dc5256"
        ],
        [
            "destruct H36 as [H36 H37].",
            "VernacExtend",
            "9e427eb752084baa39e604635cd7488e89244a1e"
        ],
        [
            "generalize (IHn _ _ _ H35);intro H38.",
            "VernacExtend",
            "64bf975aa0184175c86deb7816e3a77c3aeeda2f"
        ],
        [
            "destruct H38 as [H38 H39].",
            "VernacExtend",
            "29d722306409b5ceb4220a1f2ef53591eb03470e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply tree_round_left_combine;trivial.",
            "VernacExtend",
            "c956d01ee2e8d4d2a38a7d03db4daf0d373cc4de"
        ],
        [
            "apply tree_round_right_combine;trivial.",
            "VernacExtend",
            "73435348908ed79ff71e12f9967dff048e5e1d59"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_join : forall n t11 t12 t13 t21 t22 t23 t31 t32 t33, avg n t11 t12 = Some t13 -> avg n t21 t22 = Some t23 -> avg n t31 t32 = Some t33 -> join t11 t21 t31 -> join t12 t22 t32 -> join t13 t23 t33.",
            "VernacStartTheoremProof",
            "94bce3a96e6eed9f3fd4d2625e8e8cb1feab2015"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction n; intros ? ? ? ? ? ? ? ? ? H1 H2 H3 H4 H5.",
            "VernacExtend",
            "0669c72337e4bf504dadea7db51ff3f1c3721934"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "destruct t11 as [x11 c11]; destruct t12 as [x12 c12]; destruct t13 as [x13 c13]; destruct t21 as [x21 c21]; destruct t22 as [x22 c22]; destruct t23 as [x23 c23]; destruct t31 as [x31 c31]; destruct t32 as [x32 c32]; destruct t33 as [x33 c33].",
            "VernacExtend",
            "aa288b8cb933c6e477cc03a5e97366e276ce06da"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "icase x11;icase x12; icase x21;icase x22; icase x31;icase x32.",
            "VernacExtend",
            "0a34dc496549c127fdbc7a16733c9575fe6a4992"
        ],
        [
            "unfold tree_avg in *;simpl in *.",
            "VernacExtend",
            "974888171616a89f1ea4a363e5e072ff558932d9"
        ],
        [
            "inv H1;inv H2;inv H3.",
            "VernacExtend",
            "5846b5951d70091dd509db348db0a4b7264e2a24"
        ],
        [
            "destruct H4 as [H41 H42]; destruct H5 as [H51 H52].",
            "VernacExtend",
            "95bdf36800ee3bc5bdaea40f50b100d353a4e865"
        ],
        [
            "split; unfold BAF.glb, BAF.lub in *;simpl in *; inv H41;inv H42;inv H51;inv H52; apply exist_ext.",
            "VernacExtend",
            "149d135b420b1df26dbfc974c91d116c2b5d9b1c"
        ],
        [
            "icase b;icase b0;icase b1;icase b2.",
            "VernacExtend",
            "c358f2f0abd5b5e9ca206d9f7f14488cd004c299"
        ],
        [
            "icase b;icase b0;icase b1;icase b2;icase b3;icase b4.",
            "VernacExtend",
            "213e3d25c7054aad5e763a05ec78992b9ddb0b0b"
        ],
        [
            "generalize (mkCanon_identity _ c11);intro H11.",
            "VernacExtend",
            "196fef3893405d40d12f95f03be7c1d91e947126"
        ],
        [
            "generalize (mkCanon_identity _ c12);intro H12.",
            "VernacExtend",
            "0b46a19ce658318d223dc2d78efc666c822a6263"
        ],
        [
            "generalize (mkCanon_identity _ c13);intro H13.",
            "VernacExtend",
            "c9d83a4c268aec4b9898b893da13b3b31bedfe74"
        ],
        [
            "generalize (mkCanon_identity _ c21);intro H21.",
            "VernacExtend",
            "eaebbb2a428c39aeb85d60cc5058f026cf36714b"
        ],
        [
            "generalize (mkCanon_identity _ c22);intro H22.",
            "VernacExtend",
            "6a8f53936266d7b2274fab31409ab422aa16d4f9"
        ],
        [
            "generalize (mkCanon_identity _ c23);intro H23.",
            "VernacExtend",
            "07c659618b947b56f9f0c40680a0a51aa328b6a5"
        ],
        [
            "generalize (mkCanon_identity _ c31);intro H31.",
            "VernacExtend",
            "011b34c939cb4c40744c2519d2ec64535c6b0955"
        ],
        [
            "generalize (mkCanon_identity _ c32);intro H32.",
            "VernacExtend",
            "d2bd28881374254ef0b363798db61841e8261504"
        ],
        [
            "generalize (mkCanon_identity _ c33);intro H33.",
            "VernacExtend",
            "03a8f586d363386737f9db38cded92fcfc78ba2b"
        ],
        [
            "generalize (mkCanon_rewrite x11);intro H14; destruct H14 as [x111 [x112 H14]].",
            "VernacExtend",
            "089791b455d9a448cede55b7935e1a75af42296b"
        ],
        [
            "generalize (mkCanon_rewrite x12);intro H15; destruct H15 as [x121 [x122 H15]].",
            "VernacExtend",
            "6439398d4f11e66673e406e1b19d3c601ef2997c"
        ],
        [
            "generalize (mkCanon_rewrite x13);intro H16; destruct H16 as [x131 [x132 H16]].",
            "VernacExtend",
            "3c9d7335f78a6722f4850615e9aab978517ec3d1"
        ],
        [
            "generalize (mkCanon_rewrite x21);intro H24; destruct H24 as [x211 [x212 H24]].",
            "VernacExtend",
            "dc526a3a22bc2808d494e77307a3187ad44b37b5"
        ],
        [
            "generalize (mkCanon_rewrite x22);intro H25; destruct H25 as [x221 [x222 H25]].",
            "VernacExtend",
            "524eccf67aa3abdc4ab47e2aec51c226d8670d6f"
        ],
        [
            "generalize (mkCanon_rewrite x23);intro H26; destruct H26 as [x231 [x232 H26]].",
            "VernacExtend",
            "5d40c8d640419cd2886952b54485b8fa1492654d"
        ],
        [
            "generalize (mkCanon_rewrite x31);intro H34; destruct H34 as [x311 [x312 H34]].",
            "VernacExtend",
            "c630ac053829d3fd8eb173b301d567366fccdd70"
        ],
        [
            "generalize (mkCanon_rewrite x32);intro H35; destruct H35 as [x321 [x322 H35]].",
            "VernacExtend",
            "8b360197588636076a67af4391bf332aa28514de"
        ],
        [
            "generalize (mkCanon_rewrite x33);intro H36; destruct H36 as [x331 [x332 H36]].",
            "VernacExtend",
            "000b3313fa137d0c17f49f0cf689164d7c826d5e"
        ],
        [
            "rewrite H14 in H11.",
            "VernacExtend",
            "79cb30fa9e15ce00cbe0d635f54c3152f74e42dc"
        ],
        [
            "rewrite H15 in H12.",
            "VernacExtend",
            "36423dc65af3d4dab6883ee40beeddb8e6f18a4d"
        ],
        [
            "rewrite H16 in H13.",
            "VernacExtend",
            "eebf458ab702b54802f4f9f72c6e97f80cfe307c"
        ],
        [
            "rewrite H24 in H21.",
            "VernacExtend",
            "ea5c8901708848c6f1fb597f348c0cb4893cd5b0"
        ],
        [
            "rewrite H25 in H22.",
            "VernacExtend",
            "26c582ce2a8e78ec14251998b961e85e71e137af"
        ],
        [
            "rewrite H26 in H23.",
            "VernacExtend",
            "11352d604b6e6646389daf9332c4250b2b3dbf08"
        ],
        [
            "rewrite H34 in H31.",
            "VernacExtend",
            "a32ebfcc34bf2db03c3d45a087403a9cc36ea678"
        ],
        [
            "rewrite H35 in H32.",
            "VernacExtend",
            "a9750ffdffa0bfcbfd5f50fa3210daf130d9b5a3"
        ],
        [
            "rewrite H36 in H33.",
            "VernacExtend",
            "6811f84bbb6847a5569002c1198e8702f2e432b4"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c11 H11);intro H111.",
            "VernacExtend",
            "84172cf0228bd6fc0454c289fc395b510dee310b"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c12 H12);intro H121.",
            "VernacExtend",
            "1b77105a7bd3f52b89e523d04af2422447524158"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c13 H13);intro H131.",
            "VernacExtend",
            "405c3590f09ffc1911b00576cd0061a60d9c88e3"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c21 H21);intro H211.",
            "VernacExtend",
            "d748d4aed438f406b1229f3bcdd6c57c6cb52351"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c22 H22);intro H221.",
            "VernacExtend",
            "45f856d91f48f863cdc4a37f371368bb5279d47c"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c23 H23);intro H231.",
            "VernacExtend",
            "1de6ed0748cf51319df2a9acd7c9081a158b5398"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c31 H31);intro H311.",
            "VernacExtend",
            "b350e8d0c6296eed595fcb553592d135b66cf451"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c32 H32);intro H321.",
            "VernacExtend",
            "315b8dd1497789eff4fed02b60d12ab6141618f6"
        ],
        [
            "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c33 H33);intro H331.",
            "VernacExtend",
            "59fee03d7a019c56c800664aca98bb2ae4a06030"
        ],
        [
            "rewrite<-H111 in *.",
            "VernacExtend",
            "ab35bff15c0420de0ce2ab1491902cfe7328d2da"
        ],
        [
            "rewrite<-H121 in *.",
            "VernacExtend",
            "e3aa3f448592ccde06438f092f8181ed22b87270"
        ],
        [
            "rewrite<-H131 in *.",
            "VernacExtend",
            "680b1058f024bcea1ef302da7ffb7ec701a7d56c"
        ],
        [
            "rewrite<-H211 in *.",
            "VernacExtend",
            "9afec5bdb2013833595b45d78c24492d07b14855"
        ],
        [
            "rewrite<-H221 in *.",
            "VernacExtend",
            "a356a636c89bcefcaffba81f7fd0fefef70d3962"
        ],
        [
            "rewrite<-H231 in *.",
            "VernacExtend",
            "eee5ddeb4eda64ad7ec2d31538c84c5e47e5b1ed"
        ],
        [
            "rewrite<-H311 in *.",
            "VernacExtend",
            "44e80c63fb04d891c2d753bdf89385708b55f431"
        ],
        [
            "rewrite<-H321 in *.",
            "VernacExtend",
            "f2ca4a323e8a61e11f78dc75735961bf8502c84f"
        ],
        [
            "rewrite<-H331 in *.",
            "VernacExtend",
            "878cf3a667352fb6f66fd8c3f3e16f0658cc0cae"
        ],
        [
            "generalize (tree_avg_split _ _ _ _ _ _ _ H1);intro H6.",
            "VernacExtend",
            "ad4a6a1f2c569122d816342dcf1bd8f57b790d9c"
        ],
        [
            "generalize (tree_avg_split _ _ _ _ _ _ _ H2);intro H7.",
            "VernacExtend",
            "36b7c88a2a010fd2a37f63399331c32456351894"
        ],
        [
            "generalize (tree_avg_split _ _ _ _ _ _ _ H3);intro H8.",
            "VernacExtend",
            "a0de6f06697d14e3a430b4fe8c893ced81291ccf"
        ],
        [
            "destruct H6 as [H61 H62].",
            "VernacExtend",
            "517d059d58e4da431a5439670e1153646b56db4b"
        ],
        [
            "destruct H7 as [H71 H72].",
            "VernacExtend",
            "a2e6421acb64b052b60bde87c34fa9027c3f5f3f"
        ],
        [
            "destruct H8 as [H81 H82].",
            "VernacExtend",
            "c807bd90c9888128060cc1d39ae3937bb6ab3184"
        ],
        [
            "generalize (mkCanon_join_split _ _ _ _ _ _ H4);intro H9.",
            "VernacExtend",
            "7e68ddbb12c742a7c0d412d7bcbc3e38312d2b7a"
        ],
        [
            "generalize (mkCanon_join_split _ _ _ _ _ _ H5);intro H10.",
            "VernacExtend",
            "6214796c5c315ab04091b4f1d52969d6341bf6d0"
        ],
        [
            "destruct H9 as [H91 H92].",
            "VernacExtend",
            "e648716d3030bd4c0eddc534781ca26d3131a6bb"
        ],
        [
            "destruct H10 as [H101 H102].",
            "VernacExtend",
            "af1239e49d099269cb2f147880b268f765b798a5"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ _ _ _ H61 H71 H81 H91 H101);intro Hr1.",
            "VernacExtend",
            "be0cd30e01cac81fa742c7356900e1bab93842ed"
        ],
        [
            "generalize (IHn _ _ _ _ _ _ _ _ _ H62 H72 H82 H92 H102);intro Hr2.",
            "VernacExtend",
            "5770dd35478dafc975d48a81e0e58c11ae858f19"
        ],
        [
            "apply mkCanon_join_combine;trivial.",
            "VernacExtend",
            "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_increase : forall n t1 t2, t1 <> t2 -> max (height t1) (height t2) < n -> exists t3, avg n t1 t2 = Some t3 /\\ height t3 = n.",
            "VernacStartTheoremProof",
            "37a3fcd0b7691c612cff90b36d318844a8a646b2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "unfold tree_height in H0.",
            "VernacExtend",
            "0151399de7231e3831e74607bfc3ee4ddd03dca7"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
            "VernacExtend",
            "5e10407307800b7bfc94c3096675d80ad69d1e56"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assert (max (tree_heightP x1) (tree_heightP x2) = 0) by omega.",
            "VernacExtend",
            "1555eb18d12f70aa19b3f0c21e934e3cd0825ad6"
        ],
        [
            "generalize (le_max_l (tree_heightP x1) (tree_heightP x2));intro H2.",
            "VernacExtend",
            "debe00727bf1b501ef7b5060a6362d653c1de7a6"
        ],
        [
            "generalize (le_max_r (tree_heightP x1) (tree_heightP x2));intro H3.",
            "VernacExtend",
            "df3b99ad09fee6815a6647bcf9d4007523ad805f"
        ],
        [
            "assert (tree_heightP x1 = 0) by omega.",
            "VernacExtend",
            "6a1d3199a9b1431aaca9671b05dfec9e4ae66301"
        ],
        [
            "assert (tree_heightP x2 = 0) by omega.",
            "VernacExtend",
            "b15ce3df293474941ec94387eb02dd0aebe554af"
        ],
        [
            "icase x1;icase x2.",
            "VernacExtend",
            "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (b<> b0).",
            "VernacExtend",
            "34eb206c823c21159af20295639f79480ed5cab6"
        ],
        [
            "intro;apply H.",
            "VernacExtend",
            "2155aadd67abfad07bb52771af5eefbf7e2e6097"
        ],
        [
            "rewrite H6;apply exist_ext;trivial.",
            "VernacExtend",
            "202f2a8845025616d73b82d0ee646a9761932240"
        ],
        [
            "icase b;icase b0;simpl.",
            "VernacExtend",
            "c689c5f12d1a31c924449f49695c7741480b65fc"
        ],
        [
            "try (elimtype False; tauto).",
            "VernacExtend",
            "b28fd6c3df32de104d6867f168f4aa96ae9f59bd"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (mkCanon_correct (Node (Leaf true) (Leaf false)))).",
            "VernacExtend",
            "7b837c5311a493bb8d440e9a0fa06daf9be13415"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "exists (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (mkCanon_correct (Node (Leaf false) (Leaf true)))).",
            "VernacExtend",
            "791c8635154628dec0dda674a249236fa887b139"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "try (elimtype False; tauto).",
            "VernacExtend",
            "b28fd6c3df32de104d6867f168f4aa96ae9f59bd"
        ],
        [
            "inv H5;inv H4;elimtype False;omega.",
            "VernacExtend",
            "d4dd784668bd28305366671469ba8a31bc81562d"
        ],
        [
            "inv H5;inv H4;elimtype False;omega.",
            "VernacExtend",
            "d4dd784668bd28305366671469ba8a31bc81562d"
        ],
        [
            "inv H5;inv H4;elimtype False;omega.",
            "VernacExtend",
            "d4dd784668bd28305366671469ba8a31bc81562d"
        ],
        [
            "generalize (canonTree_rewrite1 t1);intro H3.",
            "VernacExtend",
            "1ae57efeec672c4ac4d634e179df47bf6742402f"
        ],
        [
            "generalize (canonTree_rewrite1 t2);intro H4.",
            "VernacExtend",
            "548951661a1a648641a7e1306b6d6ee6f32f41d6"
        ],
        [
            "destruct H3 as [t11 [t12 H3]].",
            "VernacExtend",
            "5f141973f5444f4eb9fe2101d5c7a3d18db0e368"
        ],
        [
            "destruct H4 as [t21 [t22 H4]].",
            "VernacExtend",
            "bcb775412bf35841eac6bd1c3b666f0e31105237"
        ],
        [
            "rewrite H3,H4 in *.",
            "VernacExtend",
            "396115a6b9c62f7e07a2fac7d3be0c9267f1e202"
        ],
        [
            "generalize (mkCanon_height_split _ _ _ _ _ H0);intro H5.",
            "VernacExtend",
            "4373a9ebbd073f45df9d47d79142672d62caba81"
        ],
        [
            "destruct H5 as [H5 H6].",
            "VernacExtend",
            "cf322e957a0a17c4f0129b9b5ab195ffd549b719"
        ],
        [
            "assert (mkCanon (Node t11 t12) <> mkCanon (Node t21 t22)).",
            "VernacExtend",
            "e5ebda88dcf7252d02fe790742ca5186433f1924"
        ],
        [
            "intro;apply H.",
            "VernacExtend",
            "2155aadd67abfad07bb52771af5eefbf7e2e6097"
        ],
        [
            "apply exist_ext;trivial.",
            "VernacExtend",
            "57a542efd5803f9f450ee003dbdb7ed63247566f"
        ],
        [
            "generalize (mkCanon_diff _ _ _ _ H1);intro H7.",
            "VernacExtend",
            "202e39e0b3e0864a0df4635a218bbef8e66790fb"
        ],
        [
            "generalize (shareTree_dec_eq (mkCanon t11) (mkCanon t21));intro H8.",
            "VernacExtend",
            "eb479b5baf234f5a361ab3a77ce7064b1b58706b"
        ],
        [
            "destruct H8.",
            "VernacExtend",
            "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
        ],
        [
            "assert (mkCanon t12 <> mkCanon t22).",
            "VernacExtend",
            "d5530f0dcac3c9be8952682b076c753553a9ed4e"
        ],
        [
            "destruct H7.",
            "VernacExtend",
            "f6b4c745a19e0b13add33f75bb62e394f2c83618"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (tree_heightP (mkCanon t11) < S n).",
            "VernacExtend",
            "e9a851b22893a180ea42e50e59a5e11c02f84a0d"
        ],
        [
            "generalize (le_max_l (tree_heightP (mkCanon t11)) (tree_heightP (mkCanon t21)));intro.",
            "VernacExtend",
            "e27a045e394324b484d34afac5cf9a439723bd86"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "generalize (tree_avg_identity (S n) (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _)) H8); intro H9.",
            "VernacExtend",
            "1f04daa34a11f1089617bce5f3df905a20edfba9"
        ],
        [
            "assert (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)).",
            "VernacExtend",
            "676566ccd12df063ba567387fcc06935e88ae89d"
        ],
        [
            "intro H10;apply H2;inv H10;trivial.",
            "VernacExtend",
            "81f4ad1f23e3228996a395a6e9955b3ab248cbea"
        ],
        [
            "generalize (IHn _ _ H10 H6);intro H11.",
            "VernacExtend",
            "65e2ef160bdfd9930535086630cd75a54c921423"
        ],
        [
            "destruct H11 as [ t3 [H11 H12]].",
            "VernacExtend",
            "e338dc21fcbc0d9218f24c39a5f9de30e18cb8b5"
        ],
        [
            "generalize (canonTree_rewrite2 t3);intro H13.",
            "VernacExtend",
            "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
        ],
        [
            "rewrite H13 in H11.",
            "VernacExtend",
            "127222eef41ce89095b0ee60c2cc77e194b3c54e"
        ],
        [
            "assert ((exist (fun t : ShareTree => canonicalTree t) (mkCanon t11) (mkCanon_correct t11)) = (exist (fun t : ShareTree => canonicalTree t) (mkCanon t21) (mkCanon_correct t21))).",
            "VernacExtend",
            "16db315bbd3d9f1a7fc38ee3b02b31e91a239c84"
        ],
        [
            "apply canonTree_proof_irr.",
            "VernacExtend",
            "c1839a326dcd3dbab0610d41a14ef9dfb15a467f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite H14 in H9 at 2.",
            "VernacExtend",
            "1d85736438994c1d74ea8c5ea5665af0e19601bb"
        ],
        [
            "generalize (tree_avg_combine _ _ _ _ _ _ _ H9 H11);intro H15.",
            "VernacExtend",
            "9fcc62f2b9596c3d693b5463d92fb40a26fedb57"
        ],
        [
            "unfold avg, avgable_tree in H15.",
            "VernacExtend",
            "20a34cc88867e9063f5293996536454274cfd253"
        ],
        [
            "rewrite H15.",
            "VernacExtend",
            "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
        ],
        [
            "exists (exist (fun t4 : ShareTree => canonicalTree t4) (mkCanon (Node t11 (proj1_sig t3))) (mkCanon_correct (Node t11 (proj1_sig t3)))).",
            "VernacExtend",
            "eebeec09dc2f2bce787ca5387580b09774d7bace"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "destruct t3 as [x3 c3].",
            "VernacExtend",
            "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "assert (mkCanon (Node t11 x3) = Node (mkCanon t11) x3).",
            "VernacExtend",
            "15c8c1a6d5a02ef1a006c5d9a7fc8c919571fe0c"
        ],
        [
            "clear - c3 H12.",
            "VernacExtend",
            "6aee0757338f7e1d3cd6deef211bf6753dac11e7"
        ],
        [
            "unfold tree_height in H12;simpl in H12.",
            "VernacExtend",
            "efa1be8339da6067853a95a093c0c0d6a5788d76"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_identity _ c3);intro.",
            "VernacExtend",
            "1ce1f27d257533af76a6c0c62b63d08d302c3b26"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "icase (mkCanon t11).",
            "VernacExtend",
            "52531f891fcfd7acc3aba32fc6a720ec558edd14"
        ],
        [
            "icase x3.",
            "VernacExtend",
            "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
        ],
        [
            "clear -H8 H12 H16.",
            "VernacExtend",
            "b233188f915adc672baa461b483025ecbbc6fcd1"
        ],
        [
            "unfold tree_height,proj1_sig in *.",
            "VernacExtend",
            "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
        ],
        [
            "rewrite H16.",
            "VernacExtend",
            "d46611b9926d3411ed586aec14fbb4de59848bae"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (max (tree_heightP (mkCanon t11)) (tree_heightP x3) + 1) with (S (max (tree_heightP (mkCanon t11)) (tree_heightP x3))) by omega.",
            "VernacExtend",
            "06042e6d6917ccaf5e1342556da88f279a035c00"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "assert (tree_heightP (mkCanon t11) <= tree_heightP x3 ) by omega.",
            "VernacExtend",
            "a2c93fd667b952c2f1c1627d5d047943395eb525"
        ],
        [
            "rewrite<- H12.",
            "VernacExtend",
            "535d97bd150861302e54cffeb5719d00d6f597bb"
        ],
        [
            "apply max_r;trivial.",
            "VernacExtend",
            "4a66b5f0b6a3156113a20c5bd47ea461c6373594"
        ],
        [
            "generalize (shareTree_dec_eq (mkCanon t12) (mkCanon t22));intro H8.",
            "VernacExtend",
            "f1022e3a105562de544f28ad632cdf86e849f55c"
        ],
        [
            "unfold proj1_sig in *.",
            "VernacExtend",
            "daea89653bff3583b56747d0a593691b68c1a196"
        ],
        [
            "destruct H8.",
            "VernacExtend",
            "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
        ],
        [
            "assert (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)).",
            "VernacExtend",
            "af5aae2994568e21a49337ad5b82f9739202f56c"
        ],
        [
            "intro H8;apply n0;inv H8;trivial.",
            "VernacExtend",
            "a81c2bfad8182f9377d55de51438a34c660eb236"
        ],
        [
            "generalize (IHn _ _ H2 H5);intro H8.",
            "VernacExtend",
            "1d443924a0a9f13bd0fef5317d6e28a25c0d6f89"
        ],
        [
            "destruct H8 as [t3 [H8 H9]].",
            "VernacExtend",
            "b40b675ab8e18f8e02bec26c231a6f8dcd9632bd"
        ],
        [
            "rewrite e in H6.",
            "VernacExtend",
            "5a1cf64e61e309ed4ae42b687a7569b82b534ba5"
        ],
        [
            "assert (tree_heightP (mkCanon t22) < S n).",
            "VernacExtend",
            "c9d20a221acafbca1bcbddadafea087dbc915391"
        ],
        [
            "generalize (le_max_r (tree_heightP (mkCanon t22)) (tree_heightP (mkCanon t22)));intro.",
            "VernacExtend",
            "551995a2c06f4171bd1175c7bc0d1e574ec939d3"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "generalize (tree_avg_identity (S n) (exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)) H10);intro H11.",
            "VernacExtend",
            "4c6fc7f751c6dbd7b283b0f604f8928eec6d1191"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) (mkCanon t12) (mkCanon_correct t12) = exist (fun t : ShareTree => canonicalTree t) (mkCanon t22) (mkCanon_correct t22)).",
            "VernacExtend",
            "fe49197fdba92364d9c5a53c16191011f48ed7b2"
        ],
        [
            "apply canonTree_proof_irr;trivial.",
            "VernacExtend",
            "db71edd8a3e48d3dbe9671c50722b3f2dbee46a8"
        ],
        [
            "rewrite<- H12 in H11 at 1.",
            "VernacExtend",
            "f3471472ab8d1e70f076e3f8dca1beb4f9959bf4"
        ],
        [
            "generalize (canonTree_rewrite2 t3);intro H13.",
            "VernacExtend",
            "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
        ],
        [
            "rewrite H13 in H8.",
            "VernacExtend",
            "e1c0b725aa0c5da577baecfb3fcbc21d84610608"
        ],
        [
            "generalize (tree_avg_combine _ _ _ _ _ _ _ H8 H11);intro H14.",
            "VernacExtend",
            "9183ea174afe7e6ba89bd1e26bd84c8340e5b90b"
        ],
        [
            "unfold avg,avgable_tree in H14.",
            "VernacExtend",
            "a1acbacd6fcf5aa813d7734f2295fa72baaebc50"
        ],
        [
            "rewrite H14.",
            "VernacExtend",
            "b53d81c05d6007e728db7abfa7c98c200268f9e7"
        ],
        [
            "exists (exist (fun t4 : ShareTree => canonicalTree t4) (mkCanon (Node (proj1_sig t3) t22)) (mkCanon_correct (Node (proj1_sig t3) t22))).",
            "VernacExtend",
            "37e32e4dba1fe44763aa8f0f2a21f3c9067442e4"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "destruct t3 as [x3 c3].",
            "VernacExtend",
            "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
        ],
        [
            "unfold tree_height,proj1_sig in *.",
            "VernacExtend",
            "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
        ],
        [
            "clear - H9 H10 c3.",
            "VernacExtend",
            "9a8cfc6a58564be8329e6b25d76f970790fa42a5"
        ],
        [
            "assert (mkCanon (Node x3 t22) = Node x3 (mkCanon t22)).",
            "VernacExtend",
            "f96aaa42366c7a3527cb476998984cb3efdecc95"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_identity _ c3);intro H.",
            "VernacExtend",
            "121ad7fc9098bcc6ed761e0e237c5d4ad7bb112e"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "icase x3.",
            "VernacExtend",
            "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (max (tree_heightP x3) (tree_heightP (mkCanon t22)) + 1 = S (max (tree_heightP x3) (tree_heightP (mkCanon t22)))) by omega.",
            "VernacExtend",
            "04cf84081b41f3990410b7fabf42fd46bf1dc7d1"
        ],
        [
            "rewrite H0;f_equal.",
            "VernacExtend",
            "4daa109ecd0f81b681893d8417577008c878b091"
        ],
        [
            "rewrite<- H9 in *.",
            "VernacExtend",
            "1b3d1842b608dfb7e9786682bbef87efa740f9a0"
        ],
        [
            "assert (tree_heightP (mkCanon t22) <= tree_heightP x3) by omega.",
            "VernacExtend",
            "d4399341c069e547c4594a4772cf42af2f0b40b2"
        ],
        [
            "apply max_l;trivial.",
            "VernacExtend",
            "357b43e1489a082e768815cb343917c66d5af9a7"
        ],
        [
            "assert (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)).",
            "VernacExtend",
            "af5aae2994568e21a49337ad5b82f9739202f56c"
        ],
        [
            "intro H8;apply n0;inv H8;trivial.",
            "VernacExtend",
            "a81c2bfad8182f9377d55de51438a34c660eb236"
        ],
        [
            "assert (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)).",
            "VernacExtend",
            "676566ccd12df063ba567387fcc06935e88ae89d"
        ],
        [
            "intro H8;apply n1;inv H8;trivial.",
            "VernacExtend",
            "725cf99f21a01269787bb3dd13dfd3c96287dd50"
        ],
        [
            "generalize (IHn _ _ H2 H5);intro H9.",
            "VernacExtend",
            "2ae01891d7e9b77334e03fde9791ce51537eb0fd"
        ],
        [
            "destruct H9 as [t3 [H9 H10]].",
            "VernacExtend",
            "2ce64c7bbbd49024f0ae65c3a23c3c9ce501ebd9"
        ],
        [
            "generalize (IHn _ _ H8 H6);intro H11.",
            "VernacExtend",
            "5e4323710cd00e2576f60ec8daecc73ace0e67fa"
        ],
        [
            "destruct H11 as [t4 [H11 H12]].",
            "VernacExtend",
            "591f9c0d5ecc6891cfe0f355ba9037dea98a50a2"
        ],
        [
            "generalize (canonTree_rewrite2 t3);intro H13.",
            "VernacExtend",
            "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
        ],
        [
            "generalize (canonTree_rewrite2 t4);intro H14.",
            "VernacExtend",
            "50242437fcfe9c47e34cd91eda7644cdf8ce275a"
        ],
        [
            "rewrite H13 in H9.",
            "VernacExtend",
            "20fe868c83b682fc53998a197449d05316cea45d"
        ],
        [
            "rewrite H14 in H11.",
            "VernacExtend",
            "79cb30fa9e15ce00cbe0d635f54c3152f74e42dc"
        ],
        [
            "generalize (tree_avg_combine _ _ _ _ _ _ _ H9 H11);intro H15.",
            "VernacExtend",
            "9fcc62f2b9596c3d693b5463d92fb40a26fedb57"
        ],
        [
            "unfold avg,avgable_tree in H15.",
            "VernacExtend",
            "20a34cc88867e9063f5293996536454274cfd253"
        ],
        [
            "rewrite H15.",
            "VernacExtend",
            "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
        ],
        [
            "exists (exist (fun t5 : ShareTree => canonicalTree t5) (mkCanon (Node (proj1_sig t3) (proj1_sig t4))) (mkCanon_correct (Node (proj1_sig t3) (proj1_sig t4)))).",
            "VernacExtend",
            "c100613b1e8836df641d86b3193bc5dabf722eff"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "destruct t3 as [x3 c3]; destruct t4 as [x4 c4].",
            "VernacExtend",
            "c7505403ed5c10598f36f50169ae57fe5ddbd928"
        ],
        [
            "unfold tree_height,proj1_sig in *.",
            "VernacExtend",
            "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
        ],
        [
            "clear -c3 c4 H10 H12.",
            "VernacExtend",
            "6adcb5a69922267151552e9f5cc94552e10611c1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (mkCanon_identity _ c3);intro H1.",
            "VernacExtend",
            "8e972f584831f1fda5a340544a94cd6d4fbf1c14"
        ],
        [
            "generalize (mkCanon_identity _ c4);intro H2.",
            "VernacExtend",
            "a14b5d15918b8d92db288fe160476947a255ac20"
        ],
        [
            "rewrite H1,H2.",
            "VernacExtend",
            "0ce0ee884f848b2a2759f8abce9a0e685be27984"
        ],
        [
            "icase x3;icase x4.",
            "VernacExtend",
            "3b6468c47f1d95b8484c439733b9d3306cc0a6c2"
        ],
        [
            "simpl in *;clear -H10 H12.",
            "VernacExtend",
            "ff48b9cbae2ec2d64a301fd0d33040298e98b5d9"
        ],
        [
            "rewrite H10,H12.",
            "VernacExtend",
            "095b838a18d0117772841cf234b0b3374db0eb6d"
        ],
        [
            "generalize (max_idempotent (S n));intro H.",
            "VernacExtend",
            "3a8fb906a8e84f29510dd1d0e812dad1c2027ed0"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_ex: forall n t1 t2, height t1 < n -> height t2 < n -> exists t3, avg n t1 t2 = Some t3.",
            "VernacStartTheoremProof",
            "202bdfd549a496bfb4072b170debb950d3fa17a0"
        ],
        [
            "simpl;intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "assert (H1 := eq_dec t1 t2).",
            "VernacExtend",
            "cf0043a25a6c40c2663344df5ba6d6bbc364261b"
        ],
        [
            "destruct H1 as [H1|H1].",
            "VernacExtend",
            "3d64b5d5257c32cb97db1118ac8095f035e8c53f"
        ],
        [
            "subst t2.",
            "VernacExtend",
            "e4dd57e9b9492f7f098f4c9b9f0931631f282df4"
        ],
        [
            "exists t1.",
            "VernacExtend",
            "3e549779dc8ddd0d5b9c600a078ba0eb9d6c2a5e"
        ],
        [
            "apply tree_avg_identity.",
            "VernacExtend",
            "56ba71456a5e467a8bb56c6f0a0b2f9ef9f771da"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H2 : max (height t1) (height t2) < n).",
            "VernacExtend",
            "d9b71b643447be69e24f04f6388a88ff64fd719a"
        ],
        [
            "apply Nat.max_lub_lt;trivial.",
            "VernacExtend",
            "604b3e01c990ad6991675e87f51b031303844609"
        ],
        [
            "assert (H3 := tree_avg_increase _ _ _ H1 H2).",
            "VernacExtend",
            "0a694ee4371953f86b1b72dd26b22f09d47953b4"
        ],
        [
            "destruct H3 as [t3 [H3 H4]].",
            "VernacExtend",
            "98a2af6d1d6f4f1957d83318da58e590d1132764"
        ],
        [
            "exists t3.",
            "VernacExtend",
            "9d40ffa34956812a2dad4a892467376ff2712db0"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma avg_share_correct: forall n s, (height s <= S n)%nat -> exists s', exists s'', roundL (S n) s = Some s' /\\ roundR (S n) s = Some s'' /\\ avg (S n) s' s'' = Some s.",
            "VernacStartTheoremProof",
            "b4a667397af5aacd3f202014d755b9620adceecc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "copy H.",
            "VernacExtend",
            "3c4af1b59cd5812a53406fa43cc959406b13503f"
        ],
        [
            "apply tree_round_left_Some in H.",
            "VernacExtend",
            "c512dd7b7220b8b2b7a06772d22533111caa59e8"
        ],
        [
            "apply tree_round_right_Some in H0.",
            "VernacExtend",
            "a9abb84037ba92e60798a0eab80945217a1cce8f"
        ],
        [
            "destruct H as [t1 H].",
            "VernacExtend",
            "1356fbf966b7e0d5200b8fab788d144750bd4e64"
        ],
        [
            "destruct H0 as [t2 H0].",
            "VernacExtend",
            "c4aca7d2b72117426358fd5eff47d1add26b0671"
        ],
        [
            "exists t1.",
            "VernacExtend",
            "3e549779dc8ddd0d5b9c600a078ba0eb9d6c2a5e"
        ],
        [
            "exists t2.",
            "VernacExtend",
            "aebad7a61dd4b815a87f5f1fcf62e7ad254044e2"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "split;trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "apply tree_avg_round2avg;trivial.",
            "VernacExtend",
            "72df0a799c9bb0b5a96969446b11672aa47e6263"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_recompose: forall t, decompose (recompose t) = t.",
            "VernacStartTheoremProof",
            "8f29e0f000960e41351a82d876f2cd359dd8c5fa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0 as [t1 t2].",
            "VernacExtend",
            "05205e12573d5312b7424d571553b8cf2ed6d1a0"
        ],
        [
            "destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
            "VernacExtend",
            "5e10407307800b7bfc94c3096675d80ad69d1e56"
        ],
        [
            "icase x1;icase x2; simpl.",
            "VernacExtend",
            "3bf100d2ed402e45d65cdea1e4d291d97c665b86"
        ],
        [
            "icase (bool_dec b b0); try subst b0; unfold decompose; simpl.",
            "VernacExtend",
            "4c3036e7374f60592c3a9e36b8e6841e02d24f95"
        ],
        [
            "f_equal; apply exist_ext; trivial.",
            "VernacExtend",
            "d14cd8b10fd6412dd0c5172f7d61f3c556912e06"
        ],
        [
            "destruct (compose_canon1 b b0 n c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext; trivial.",
            "VernacExtend",
            "392ce7b3d5cd7b0e0caa919db422421f52d5fcc5"
        ],
        [
            "destruct (compose_canon2 b x2_1 x2_2 c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
            "VernacExtend",
            "7b8a5c982e1868c20c700681a7df4ee14c4f2e75"
        ],
        [
            "destruct (compose_canon3 x1_1 x1_2 b c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
            "VernacExtend",
            "54f11e23e9eae144a96e5f70901a1f2de99bd96c"
        ],
        [
            "destruct (compose_canon4 x1_1 x1_2 x2_1 x2_2 c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
            "VernacExtend",
            "7078a9fb2b522201185ba9dbc974f6bb3cad2532"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma recompose_decompose: forall t, recompose(decompose t) = t.",
            "VernacStartTheoremProof",
            "60f8063b25fc209ac38a991475a5235b6bf8f126"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0 as [x c].",
            "VernacExtend",
            "1bbd86825644f3222b59ad972d4c2be0ab656553"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "unfold recompose.",
            "VernacExtend",
            "895ba2a52e167cf060d9737130d43d999cf601dd"
        ],
        [
            "icase x1; icase x2.",
            "VernacExtend",
            "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
        ],
        [
            "icase (bool_dec b b0);try subst b0; simpl; apply exist_ext;trivial.",
            "VernacExtend",
            "e0096e35bfbac1bd41a0f3000b023686eda9bba1"
        ],
        [
            "icase b;elimtype False;firstorder.",
            "VernacExtend",
            "85de6e2c5edb9442a827d607b20e4f3189f9dd3a"
        ],
        [
            "f_equal; apply proof_irr.",
            "VernacExtend",
            "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
        ],
        [
            "f_equal; apply proof_irr.",
            "VernacExtend",
            "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
        ],
        [
            "f_equal; apply proof_irr.",
            "VernacExtend",
            "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_rewrite : forall t t1 t2, decompose t = (t1 ,t2) <-> t = exist (fun t => canonicalTree t) (mkCanon (Node (proj1_sig t1) (proj1_sig t2))) (mkCanon_correct _).",
            "VernacStartTheoremProof",
            "05364b51f787857053e5b78b85ddd0900a2343e6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0 as [x c]; destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
            "VernacExtend",
            "e0e8bd0a9fe6210c94302282986ab860574d448e"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split;intros; inv H; generalize (mkCanon_identity _ c1);intro; generalize (mkCanon_identity _ c2);intro.",
            "VernacExtend",
            "2badd030c1f2b5af3aa4b3e058ee3c9539b3d9ea"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "f_equal; apply exist_ext; rewrite H in H1;rewrite H0 in H1; icase x1;icase x2; icase b0;icase b1.",
            "VernacExtend",
            "4ac8b02da52804aa7c7ba5a29528cc0af7565e15"
        ],
        [
            "split;intro; try apply exist_ext; simpl in H,c; destruct c as [? [? [? ?]]]; inv H; simpl; generalize (mkCanon_identity _ c1);intro; generalize (mkCanon_identity _ c2);intro.",
            "VernacExtend",
            "6f9ae9f24317ee3340e410fa2b4450036479e51b"
        ],
        [
            "rewrite H;rewrite H0.",
            "VernacExtend",
            "cadacb31556a02adbe2c6bc962279414f9ba19d0"
        ],
        [
            "icase x1;icase x2.",
            "VernacExtend",
            "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
        ],
        [
            "icase b;icase b0.",
            "VernacExtend",
            "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
        ],
        [
            "elimtype False;firstorder.",
            "VernacExtend",
            "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
        ],
        [
            "elimtype False;firstorder.",
            "VernacExtend",
            "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
        ],
        [
            "f_equal;apply exist_ext; rewrite H in H1;rewrite H0 in H1; icase x1;icase x2;try icase b;try icase b0;inv H1;auto.",
            "VernacExtend",
            "e1edc738f85fe7b6c9dddd84b82737ae76d44701"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_height : forall n t1 t2 t3, height t1 = S n -> decompose t1 = (t2, t3) -> height t2 <= n /\\ height t3 <= n.",
            "VernacStartTheoremProof",
            "2d6ddb963eaa27531df48dc3a7dd66a3ceb3201e"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
            "VernacExtend",
            "195068c20e4ffcf8d76286499ee2886c68b06bfa"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "destruct c1 as [? [? [? ?]]].",
            "VernacExtend",
            "3c359adc74576190ab9948d54bc08fb4d001d6d7"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "assert (max (tree_heightP x2) (tree_heightP x3) <= n) by omega.",
            "VernacExtend",
            "c71d458ca8d3c9f6fec9aad54244abc87779b914"
        ],
        [
            "generalize (max_lub_l _ _ _ H0);intro.",
            "VernacExtend",
            "b16694f4ea1ec3ab3edce1db0209132569d976b0"
        ],
        [
            "generalize (max_lub_r _ _ _ H0);intro.",
            "VernacExtend",
            "f3975fc857fa662e512ff8546610937fa11f7c5c"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_join : forall t1 t11 t12 t2 t21 t22 t3 t31 t32, decompose t1 = (t11, t12) -> decompose t2 = (t21, t22) -> decompose t3 = (t31, t32) -> (join t1 t2 t3 <-> (join t11 t21 t31 /\\ join t12 t22 t32)).",
            "VernacStartTheoremProof",
            "a31fdc558daf3d4bb4ec8858ce184a4358b2abab"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
            "VernacExtend",
            "812b79a562ea96af4db197fa2a08592a266df50c"
        ],
        [
            "generalize (decompose_rewrite t1 t11 t12);intro H11.",
            "VernacExtend",
            "b087360e9b5c442b60b0622598cfb41904f1c7ef"
        ],
        [
            "generalize (decompose_rewrite t2 t21 t22);intro H21.",
            "VernacExtend",
            "01102d5c313419994f35f053eea35468b1d6ccb3"
        ],
        [
            "generalize (decompose_rewrite t3 t31 t32);intro H31.",
            "VernacExtend",
            "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
        ],
        [
            "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
            "VernacExtend",
            "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
        ],
        [
            "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
            "VernacExtend",
            "c437650f09b7a627ae31c68a8d4edf52c12738db"
        ],
        [
            "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
            "VernacExtend",
            "9657b220c6a032f534b1b435e912c267137e1c93"
        ],
        [
            "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
            "VernacExtend",
            "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "split;intro.",
            "VernacExtend",
            "966a6edea9c2088caf0e546be884ea531f6207b3"
        ],
        [
            "apply mkCanon_join_split;trivial.",
            "VernacExtend",
            "90d55308a40d7d26ba8fb9a9f45528ca94759b1c"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "apply mkCanon_join_combine;trivial.",
            "VernacExtend",
            "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_height_zero : forall t, {height t = 0} + {height t <> 0}.",
            "VernacStartTheoremProof",
            "2fb1e2b6483ae1e0fff15fafa5dbef776641f44b"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0 as [x c].",
            "VernacExtend",
            "1bbd86825644f3222b59ad972d4c2be0ab656553"
        ],
        [
            "unfold tree_height in *.",
            "VernacExtend",
            "6cf808b018092d3a5afb1f060467b3dce93bc24b"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Fixpoint countBLeafST (n : nat) (s : ShareTree) : nat := match (n,s) with | (0,Leaf true) => 1 | (0,Leaf false) => 0 | (0, Node s1 s2) => 0 | (S n', Leaf true) => (countBLeafST n' (Leaf true)) + (countBLeafST n' (Leaf true)) | (S n', Leaf false) => 0 | (S n', Node s1 s2) => (countBLeafST n' s1) + (countBLeafST n' s2) end.",
            "VernacFixpoint",
            "84053032e819d3ac0edb004cffa10852d80cd69d"
        ],
        [
            "Definition countBLeafCT (n : nat) (s : canonTree) : nat := countBLeafST n (proj1_sig s).",
            "VernacDefinition",
            "0f669345eaa1f625040364284dd48a878f29252c"
        ],
        [
            "Lemma decompose_height_le : forall n s s1 s2, decompose s = (s1,s2) -> height s <= S n -> height s1 <= n /\\ height s2 <= n.",
            "VernacStartTheoremProof",
            "54a2824263f00a789f285762135a6ebf13ade6ae"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s as [s pf]; destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
            "VernacExtend",
            "1aacb5359bf929aead81dd2383de96224637ad60"
        ],
        [
            "icase s; simpl in H; destruct pf; inv H; unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "b0159cb3e3bb4c75ceb577509b85b5bc2c153ed7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (max (tree_heightP s1) (tree_heightP s2) <= n) by omega.",
            "VernacExtend",
            "709994c57036434f40541854a0fb6586b53ad368"
        ],
        [
            "generalize (max_lub_l _ _ _ H);intro.",
            "VernacExtend",
            "84feca1efcf58b1a7592f5717d76fe03a4ffeb1e"
        ],
        [
            "generalize (max_lub_r _ _ _ H);intro.",
            "VernacExtend",
            "0836df7c002260d87c9bd0e3ce60510e052f64a5"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_le: forall s1 s2 s11 s12 s21 s22, (s1 <= s2)%ba -> decompose s1 = (s11,s12) -> decompose s2 = (s21,s22) -> (s11 <= s21)%ba /\\ (s12 <= s22)%ba.",
            "VernacStartTheoremProof",
            "0e4ae8dbb98ee652d743809de2178de5403af223"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
            "VernacExtend",
            "4c0182061f61259973f8c4484e860129b29d196e"
        ],
        [
            "unfold Ord in H;simpl in H.",
            "VernacExtend",
            "f94e68108c7289650f7efba89bcf78152ba8bdc8"
        ],
        [
            "icase s1;icase s2;inv H0;inv H1;unfold Ord; simpl in pf1,pf2; destruct pf1; destruct pf2;simpl.",
            "VernacExtend",
            "517a06b13bbdf0f01ba3135e3087e4a43f276824"
        ],
        [
            "icase b;icase b0;inv H.",
            "VernacExtend",
            "bdcbbc9cf4b9e01d8c4edb70aeda38458966e76a"
        ],
        [
            "inversion H;subst.",
            "VernacExtend",
            "123ebc73101dcac5781200440a60232218464ea1"
        ],
        [
            "inversion H2;subst.",
            "VernacExtend",
            "cbe105a5addb129fa1e578ba8ef36c4763179006"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "inversion H;subst.",
            "VernacExtend",
            "123ebc73101dcac5781200440a60232218464ea1"
        ],
        [
            "inversion H1;subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "inversion H;subst.",
            "VernacExtend",
            "123ebc73101dcac5781200440a60232218464ea1"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_diff: forall s1 s2 s11 s12 s21 s22, s1 <> s2 -> decompose s1 = (s11,s12) -> decompose s2 = (s21,s22) -> s11 <> s21 \\/ s12 <> s22.",
            "VernacStartTheoremProof",
            "36bae0164bb914c8013cfa7ff6724f560b4b2506"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H2 := canonTree_eq_dec s11 s21).",
            "VernacExtend",
            "f1de325dd188bb9d4b8166bfdc193bb069990eff"
        ],
        [
            "destruct H2 as [H2|H2].",
            "VernacExtend",
            "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
        ],
        [
            "subst s11.",
            "VernacExtend",
            "97aac360c08de454a9e244310eaeb7535778922c"
        ],
        [
            "assert (H2 := canonTree_eq_dec s12 s22).",
            "VernacExtend",
            "ff24f291ffc773884ba2e397a8cf4bf328951409"
        ],
        [
            "destruct H2 as [H2|H2].",
            "VernacExtend",
            "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
        ],
        [
            "subst s12.",
            "VernacExtend",
            "6a5af557f014438a87bc57db907de2749ff24da1"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite<- H1 in H0.",
            "VernacExtend",
            "42d08cd43ac5900fc8cb5b0f113d48246a828cad"
        ],
        [
            "assert (H2 : recompose (decompose s1) = recompose (decompose s2)).",
            "VernacExtend",
            "40de953af7bedd1778f0f1463d53136c07f77259"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "repeat rewrite recompose_decompose in H2.",
            "VernacExtend",
            "71c34f239f9a0e93f1d269c7f080bfa8f5d04da2"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "right;trivial.",
            "VernacExtend",
            "0340ad4c708a2ae89a0d63d55c2e24a5dd555b53"
        ],
        [
            "left;trivial.",
            "VernacExtend",
            "2f1efd67ff23560c270a9589d0d1b100a9c80732"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_decompose : forall n s s1 s2, decompose s = (s1,s2) -> countBLeafCT (S n) s = countBLeafCT n s1 + countBLeafCT n s2.",
            "VernacStartTheoremProof",
            "e860d095c14e0ab47597426da81a80676932fd02"
        ],
        [
            "destruct s as [s pf].",
            "VernacExtend",
            "481a787c654b6520d8b63e35856076f4cc563116"
        ],
        [
            "icase s;intros.",
            "VernacExtend",
            "73216b67704b9caf147358105b593fabebe15859"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold countBLeafCT;simpl.",
            "VernacExtend",
            "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "icase n;compute;omega.",
            "VernacExtend",
            "e64f84c1aa2c335c3c6aa7f10d228ca4f7a23491"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "simpl in pf.",
            "VernacExtend",
            "d8660beef72b9fca98b73ea7a37cc4e035d4b28d"
        ],
        [
            "destruct pf as [H1 [H2 [H3 H4]]].",
            "VernacExtend",
            "82d72a3aebf28dfe2853dcfb04027d2108fdc703"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold countBLeafCT;simpl.",
            "VernacExtend",
            "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_le : forall n s1 s2, (s1 <= s2)%ba -> countBLeafCT n s1 <= countBLeafCT n s2.",
            "VernacStartTheoremProof",
            "738df9d97baf4e3be08be6df12097359b9e0fb54"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
            "VernacExtend",
            "4c0182061f61259973f8c4484e860129b29d196e"
        ],
        [
            "unfold countBLeafCT;simpl.",
            "VernacExtend",
            "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
        ],
        [
            "icase s1;icase s2; try icase b;try icase b0;inv H.",
            "VernacExtend",
            "08e78bd868a2d1c88b11ca11794a986d984ac5b3"
        ],
        [
            "compute in H2.",
            "VernacExtend",
            "7211b392316dd70a6982bd2611971f542f675139"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "simpl in pf2.",
            "VernacExtend",
            "ed413fcad6238bbd7b3c654dedb31d51fbfb46a9"
        ],
        [
            "destruct pf2 as [H6 [H7 [H8 H9]]].",
            "VernacExtend",
            "d5ec27bde7a7643290cfc7e3b58c35cf865660b4"
        ],
        [
            "assert (H10 := top_correct (exist (fun t => canonicalTree t) s2_1 H8)).",
            "VernacExtend",
            "f5251d67a1c25ab6550e7f361166ae99cdcfb724"
        ],
        [
            "assert (H11 : (top <= exist (fun t => canonicalTree t) s2_1 H8)%ba) by auto.",
            "VernacExtend",
            "e11d75389a80abbda7349ac53f4448b82da041e6"
        ],
        [
            "assert (H12 := ord_antisym _ _ H10 H11).",
            "VernacExtend",
            "a85e4d80adf89b142c47218b27ed9f581ec22313"
        ],
        [
            "unfold top in H12;inv H12.",
            "VernacExtend",
            "958818aef5f06563874574720a81688654f12e65"
        ],
        [
            "assert (H13 := top_correct (exist (fun t => canonicalTree t) s2_2 H9)).",
            "VernacExtend",
            "e774c102ba1ed62834a83b1931422259e4f8e19c"
        ],
        [
            "assert (H14 : (top <= exist (fun t => canonicalTree t) s2_2 H9)%ba) by auto.",
            "VernacExtend",
            "563ef7edf68d4e8a0175cd6cdc8d50f5251c0aff"
        ],
        [
            "assert (H15 := ord_antisym _ _ H13 H14).",
            "VernacExtend",
            "6c904e757469ed7a99ecadb8c38ce5578cf3de87"
        ],
        [
            "unfold top in H15;inv H15.",
            "VernacExtend",
            "6d58631dee88387f98ccf3d8a27d08afd788fdc4"
        ],
        [
            "destruct H6 as [H6|H6];inv H6.",
            "VernacExtend",
            "48706d2927a4c04d0ae4a58828e64c0a54b9cd58"
        ],
        [
            "remember (decompose s1) as ds1; remember (decompose s2) as ds2; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; symmetry in Heqds1, Heqds2.",
            "VernacExtend",
            "5153417822dd84c035e2d00a0e6033955e87f081"
        ],
        [
            "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H;trivial.",
            "VernacExtend",
            "665f20cf671bc6f9665db03dd058f2e6cb1ea075"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "assert (H3 := IHn _ _ H1).",
            "VernacExtend",
            "ce596b7d42026630525d3ef9fb216a528a52edce"
        ],
        [
            "assert (H4 := IHn _ _ H2).",
            "VernacExtend",
            "a299085c13f188ed613b7726f172f5301407124d"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_lt : forall n s1 s2, (s1 <= s2)%ba -> s1 <> s2 -> height s2 <= n -> countBLeafCT n s1 < countBLeafCT n s2.",
            "VernacStartTheoremProof",
            "d39e13969dffb244a3a84b38be1ded69f9e40bda"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2]; unfold countBLeafCT;simpl.",
            "VernacExtend",
            "404c99b9e27f0e029411159bf7433256805034fd"
        ],
        [
            "icase s1.",
            "VernacExtend",
            "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply ord_antisym.",
            "VernacExtend",
            "73580188c8bc86e36a3f0a42a2ae63f021ef4184"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply top_correct.",
            "VernacExtend",
            "61ae8bf070472f85f6360bbcdbcc40ef9c963293"
        ],
        [
            "icase s2.",
            "VernacExtend",
            "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "unfold tree_height in H1.",
            "VernacExtend",
            "082517f1d81f95fb630f736216639ebc81fcf197"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase s2.",
            "VernacExtend",
            "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "assert (exist (fun t : ShareTree => canonicalTree t) (Node s1_1 s1_2) pf1 = bot).",
            "VernacExtend",
            "41c181254ae7594f3c2379a82d6cbaca17909987"
        ],
        [
            "apply ord_antisym.",
            "VernacExtend",
            "73580188c8bc86e36a3f0a42a2ae63f021ef4184"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply bot_correct.",
            "VernacExtend",
            "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "unfold tree_height in H1.",
            "VernacExtend",
            "082517f1d81f95fb630f736216639ebc81fcf197"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "remember (decompose s1) as ds1; remember (decompose s2) as ds2; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; symmetry in Heqds1,Heqds2.",
            "VernacExtend",
            "5153417822dd84c035e2d00a0e6033955e87f081"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "apply decompose_height_le with (s1:=s21) (s2:=s22) in H1;trivial.",
            "VernacExtend",
            "515fa2f272317be24c3c26c23c4772cc416aff78"
        ],
        [
            "destruct H1 as [H1 H2].",
            "VernacExtend",
            "352758143f119ffe1117850fdcea520fdbdaf126"
        ],
        [
            "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H;trivial.",
            "VernacExtend",
            "665f20cf671bc6f9665db03dd058f2e6cb1ea075"
        ],
        [
            "destruct H as [H3 H4].",
            "VernacExtend",
            "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
        ],
        [
            "apply decompose_diff with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H0;trivial.",
            "VernacExtend",
            "fe2de9c5ebdc189516ce4f467d10d76b336eb592"
        ],
        [
            "destruct H0 as [H0|H0].",
            "VernacExtend",
            "cda8f01400e79ae6a2001885abfe4004cf77fbc0"
        ],
        [
            "specialize ( IHn s11 s21 H3 H0 H1).",
            "VernacExtend",
            "2d7477d5acb60560cdeef0dbaf6c9002b3a534c9"
        ],
        [
            "assert (H5 := countBLeafCT_le n _ _ H4).",
            "VernacExtend",
            "3ddad8195f65100918426f340d26fdacba66c99a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "specialize ( IHn s12 s22 H4 H0 H2).",
            "VernacExtend",
            "5ce3b3469de20f54a4ea82d56e9e98545d431ded"
        ],
        [
            "assert (H5 := countBLeafCT_le n _ _ H3).",
            "VernacExtend",
            "15837b16671cedc67a9d0323042b1a0155955e1c"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint power (base : nat) (exp : nat) : nat := match exp with | 0 => 1 | S n => base * (power base n) end.",
            "VernacFixpoint",
            "61ec9224a185e02d67fb46688c6b3d3588cfcc38"
        ],
        [
            "Lemma countBLeafCT_limit: forall n s, countBLeafCT n s <= power 2 n.",
            "VernacStartTheoremProof",
            "5b7aac690a5eaefe4ba966f6fdf43bbebfa47ff6"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "simpl; destruct s as [s pf];unfold countBLeafCT;simpl; icase s.",
            "VernacExtend",
            "948b44d98bfe20c14d700582dd7184197b05db4c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "remember (decompose s) as ds; destruct ds as [s1 s2]; symmetry in Heqds.",
            "VernacExtend",
            "d03f67f4ce1c29ad93b0c09213066b0983cdb716"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s1) (s2:=s2);trivial.",
            "VernacExtend",
            "26e782cf053dbe0678f78875139ccc2d85bc1d5f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (H1 := IHn s1).",
            "VernacExtend",
            "d5308020e1a52b7085f6d59fd173f157a6a3d11a"
        ],
        [
            "assert (H2 := IHn s2).",
            "VernacExtend",
            "b870fe84b782a54c6ab856813d275e04a7122f05"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_bot: forall n, countBLeafCT n bot = 0.",
            "VernacStartTheoremProof",
            "052ca9272d740dee8c69fef05fd70bcffba2dbcf"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "assert (H1 := countBLeafCT_lt 0 bot top).",
            "VernacExtend",
            "e376f891c3c4ce702314b43f0306bbbdd1a818b0"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "apply bot_correct.",
            "VernacExtend",
            "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "assert (H2 := countBLeafCT_limit 0 top).",
            "VernacExtend",
            "79630dcf7cf22ed12330f89d0ffd05721e6fe9de"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (decompose bot = (bot,bot)).",
            "VernacExtend",
            "b1040d0962eb848db71e1c176b5b43d640df1630"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "apply countBLeafCT_decompose with (n := n) in H .",
            "VernacExtend",
            "c366895b567389aba20eb3cc0b30314d1279862c"
        ],
        [
            "rewrite IHn in H.",
            "VernacExtend",
            "0d83c198d9247034a938c227ea1e8118c2389808"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_top: forall n, countBLeafCT n top = power 2 n.",
            "VernacStartTheoremProof",
            "8d678dad3bfb627f1470618a62abb43650ee3f97"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "assert (H1 := countBLeafCT_lt 0 bot top).",
            "VernacExtend",
            "e376f891c3c4ce702314b43f0306bbbdd1a818b0"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "apply bot_correct.",
            "VernacExtend",
            "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "assert (H2 := countBLeafCT_limit 0 top).",
            "VernacExtend",
            "79630dcf7cf22ed12330f89d0ffd05721e6fe9de"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "rewrite countBLeafCT_bot in H1.",
            "VernacExtend",
            "6c42d5e583128ebd47da6d6ce09edaaf2858838b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (H : decompose top = (top,top)) by auto.",
            "VernacExtend",
            "264835130520bd277fcff651c05a1a8fdd075e50"
        ],
        [
            "apply countBLeafCT_decompose with (n:=n) in H.",
            "VernacExtend",
            "c366895b567389aba20eb3cc0b30314d1279862c"
        ],
        [
            "rewrite IHn in H.",
            "VernacExtend",
            "0d83c198d9247034a938c227ea1e8118c2389808"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_positive : forall s n, height s <= n -> bot <> s -> 0 < countBLeafCT n s.",
            "VernacStartTheoremProof",
            "dcb74943f96cf5a33005cf4c4899041da4c93b7d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "replace 0 with (countBLeafCT n bot) by apply countBLeafCT_bot.",
            "VernacExtend",
            "b7141ba4522c44abcf646a53d3c3bd84bbb6c6f8"
        ],
        [
            "apply countBLeafCT_lt.",
            "VernacExtend",
            "7023b9124e8b2a300298dad5b6b17722452c0dc7"
        ],
        [
            "apply bot_correct.",
            "VernacExtend",
            "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_mono_le: forall n1 n2 s, n1 <= n2 -> countBLeafCT n1 s <= countBLeafCT n2 s .",
            "VernacStartTheoremProof",
            "0da772df5d88b92d53190f13eac283d5b010da90"
        ],
        [
            "induction n1.",
            "VernacExtend",
            "cd0aa0880ea68526e051c76c121a77fe7deaafe4"
        ],
        [
            "destruct s as [s pf];intros.",
            "VernacExtend",
            "a2c5cace68f57e42e1fd0f049929ddfb80c66498"
        ],
        [
            "destruct s.",
            "VernacExtend",
            "25b900e268e7851d959aa45edce33af62b3fca65"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf) with top.",
            "VernacExtend",
            "edbf958a81cc44d60ec786c2c798cb9e4dc6b66c"
        ],
        [
            "repeat rewrite countBLeafCT_top.",
            "VernacExtend",
            "d04fb5afb247b849c83742b10a962ba42400b888"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction n2.",
            "VernacExtend",
            "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
        ],
        [
            "simpl;omega.",
            "VernacExtend",
            "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "spec IHn2.",
            "VernacExtend",
            "815406f942fd35c65266e07479bd5aea60456d4d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "f_equal;apply proof_irr.",
            "VernacExtend",
            "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
        ],
        [
            "icase n2;compute.",
            "VernacExtend",
            "3f261b1679f8004faf6160947048d374cd827fd5"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n2.",
            "VernacExtend",
            "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "assert (H1 : n1 <= n2) by omega.",
            "VernacExtend",
            "7803aa2dea9b14af2b80b4f015d261622da8385f"
        ],
        [
            "remember (decompose s) as ds.",
            "VernacExtend",
            "653940f7be98529671b5db634538e301081551d8"
        ],
        [
            "destruct ds as [s1 s2].",
            "VernacExtend",
            "2a805b644fb3c0fab755a20fa8e4fcc6d2f25661"
        ],
        [
            "symmetry in Heqds.",
            "VernacExtend",
            "27d9246a0cbde54e6434e2a97d7a342c5eb97bb8"
        ],
        [
            "assert (H2 := countBLeafCT_decompose n1 _ _ _ Heqds).",
            "VernacExtend",
            "2085e95ea632f882af79efd519c0dcf8dd9b650e"
        ],
        [
            "assert (H3 := countBLeafCT_decompose n2 _ _ _ Heqds).",
            "VernacExtend",
            "4636c8dfe909d56c0bd72d7c9f28b83541733c05"
        ],
        [
            "assert (H4 := IHn1 n2 s1).",
            "VernacExtend",
            "c3e5c93be092039e5f960787d56decc9dfc060f4"
        ],
        [
            "assert (H5 := IHn1 n2 s2).",
            "VernacExtend",
            "d538bbf67283f7520fe0e3225525ea3439e86e37"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_mono_diff: forall n1 n2 s1 s2, n1 <= n2 -> (s1 <= s2)%ba -> countBLeafCT n1 s2 - countBLeafCT n1 s1 <= countBLeafCT n2 s2 - countBLeafCT n2 s1.",
            "VernacStartTheoremProof",
            "2711e2efd3b0f5949feb0932bd96b8a98370f578"
        ],
        [
            "induction n1;intros.",
            "VernacExtend",
            "110e1e640061b819fca7654c467aea3c129c1de5"
        ],
        [
            "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
            "VernacExtend",
            "4c0182061f61259973f8c4484e860129b29d196e"
        ],
        [
            "icase s1;icase s2.",
            "VernacExtend",
            "e137b456e73bd248aa1b59eee16313d4afbcfc51"
        ],
        [
            "icase b;icase b0.",
            "VernacExtend",
            "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf1) with top.",
            "VernacExtend",
            "1012c0daa94a6a7386dc01e6fceab87ed3b0b67d"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
            "VernacExtend",
            "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf2) with bot.",
            "VernacExtend",
            "48d49b81b124391bbd58041fffed31b02e0e8670"
        ],
        [
            "repeat rewrite countBLeafCT_bot.",
            "VernacExtend",
            "022e5e17997d54e85533cb46bbd305b2878cd5b5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
            "VernacExtend",
            "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf1) with bot.",
            "VernacExtend",
            "2fc5e22c89183905bec59a75f5bddd1a86c2058c"
        ],
        [
            "rewrite countBLeafCT_bot.",
            "VernacExtend",
            "0b9214fbb7f56e2bbd6bc14e053345b438fc7d5d"
        ],
        [
            "rewrite countBLeafCT_top.",
            "VernacExtend",
            "729e40a1fb9aa710573d85c9e45171b3936847d3"
        ],
        [
            "induction n2.",
            "VernacExtend",
            "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
        ],
        [
            "simpl;omega.",
            "VernacExtend",
            "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
        ],
        [
            "spec IHn2.",
            "VernacExtend",
            "815406f942fd35c65266e07479bd5aea60456d4d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl;omega.",
            "VernacExtend",
            "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
            "VernacExtend",
            "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
        ],
        [
            "assert (H1 : countBLeafCT n2 (exist (fun t0 : ShareTree => canonicalTree t0) (Node s1_1 s1_2) pf1) < countBLeafCT n2 top).",
            "VernacExtend",
            "68239b36e559c40ee1e2f093fee578629c58462a"
        ],
        [
            "apply countBLeafCT_lt.",
            "VernacExtend",
            "7023b9124e8b2a300298dad5b6b17722452c0dc7"
        ],
        [
            "apply top_correct.",
            "VernacExtend",
            "61ae8bf070472f85f6360bbcdbcc40ef9c963293"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "remember (countBLeafCT n2 (exist (fun t0 : ShareTree => canonicalTree t0) (Node s1_1 s1_2) pf1)) as n0.",
            "VernacExtend",
            "8678d87d8d80abbf46f948845bc8b200cfa0bdff"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase n2.",
            "VernacExtend",
            "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "assert (H1 : n1 <= n2).",
            "VernacExtend",
            "64f5ef4593d5a7a467e3b272c7a124c44184bca5"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "remember (decompose s1) as ds1.",
            "VernacExtend",
            "888832096e972876e2a448cb98bc752c4776097c"
        ],
        [
            "destruct ds1 as [s11 s12].",
            "VernacExtend",
            "37584c42d191f3f0e1380f77ffda4a20cfec9804"
        ],
        [
            "symmetry in Heqds1.",
            "VernacExtend",
            "0a8d5009e306d9fd12694c017bc2fb66bffa3622"
        ],
        [
            "remember (decompose s2) as ds2.",
            "VernacExtend",
            "153988e88c0f61353467ad81cee0099fbf4f451d"
        ],
        [
            "destruct ds2 as [s21 s22].",
            "VernacExtend",
            "cbf77139c7712445b4d76b43ecae8660d55b1e39"
        ],
        [
            "symmetry in Heqds2.",
            "VernacExtend",
            "ff5b4f1192a712fdf30d4dd0945ab6e8d37d0ca2"
        ],
        [
            "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H0;trivial.",
            "VernacExtend",
            "e3ee9c1b75ba7d973658abe0bbd5adbb9273c8e4"
        ],
        [
            "destruct H0 as [H2 H3].",
            "VernacExtend",
            "0d3efc95e2da5ca56f472e195f04f2c8e2aaf84b"
        ],
        [
            "assert (H4 := IHn1 n2 s11 s21 H1 H2).",
            "VernacExtend",
            "cbcbd9dda29362e3203bf19be524155857532186"
        ],
        [
            "assert (H5 := IHn1 n2 s12 s22 H1 H3).",
            "VernacExtend",
            "f0937341b7ddd8a6b2d449efd88b3fd77d2cde4f"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "assert (H6 := countBLeafCT_le n2 _ _ H2).",
            "VernacExtend",
            "efa40cecedbda79efa0377a2f84b1c366d907eb3"
        ],
        [
            "assert (H7 := countBLeafCT_le n2 _ _ H3).",
            "VernacExtend",
            "cd7d6dcaf74e6e86e8be0529166637f6120e2c52"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_mono_lt: forall n1 n2 s, n1 < n2 -> 0 < countBLeafCT n1 s -> countBLeafCT n1 s < countBLeafCT n2 s .",
            "VernacStartTheoremProof",
            "b9d12e59f7ece882205d96e92172d21c02cca5be"
        ],
        [
            "induction n1;intros.",
            "VernacExtend",
            "110e1e640061b819fca7654c467aea3c129c1de5"
        ],
        [
            "icase n2.",
            "VernacExtend",
            "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "destruct s as [s pf].",
            "VernacExtend",
            "481a787c654b6520d8b63e35856076f4cc563116"
        ],
        [
            "icase s.",
            "VernacExtend",
            "95bd8eb817fb0ad1529803d20290e40de7fdad6b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf) with top.",
            "VernacExtend",
            "edbf958a81cc44d60ec786c2c798cb9e4dc6b66c"
        ],
        [
            "repeat rewrite countBLeafCT_top.",
            "VernacExtend",
            "d04fb5afb247b849c83742b10a962ba42400b888"
        ],
        [
            "induction n2.",
            "VernacExtend",
            "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "spec IHn2.",
            "VernacExtend",
            "815406f942fd35c65266e07479bd5aea60456d4d"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in *;omega.",
            "VernacExtend",
            "2e505872d892cb5022bef5b246ceb26cdd84b133"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "icase n2.",
            "VernacExtend",
            "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "assert ( H1 : n1 < n2) by omega.",
            "VernacExtend",
            "b8a8bc17a9670cde62bbe57336266184faa8f00a"
        ],
        [
            "remember (decompose s) as ds; destruct ds as [s1 s2]; symmetry in Heqds.",
            "VernacExtend",
            "d03f67f4ce1c29ad93b0c09213066b0983cdb716"
        ],
        [
            "repeat rewrite countBLeafCT_decompose with (s1:=s1)(s2:=s2);trivial.",
            "VernacExtend",
            "a6d21a719e4daa2bfa29d817b1c6251d489888f9"
        ],
        [
            "assert (H2 : 0 < countBLeafCT n1 s1 \\/ 0 < countBLeafCT n1 s2).",
            "VernacExtend",
            "7890630a0361459c2a23535d35ccd421fa199d97"
        ],
        [
            "apply countBLeafCT_decompose with (n:=n1) in Heqds.",
            "VernacExtend",
            "edf211ee3520a510c8864f2bca02eb7ee7d7ec98"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct H2 as [H2|H2].",
            "VernacExtend",
            "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
        ],
        [
            "specialize ( IHn1 n2 s1 H1 H2).",
            "VernacExtend",
            "0c2d6b8bd1467ac1b8187d12f91b699e1e4e7150"
        ],
        [
            "assert (H3 : n1 <= n2) by omega.",
            "VernacExtend",
            "fc6a739ee450b19334581bf28311ce04bc3a2246"
        ],
        [
            "apply countBLeafCT_mono_le with (s:=s2) in H3.",
            "VernacExtend",
            "2be5a5c4874c097f30162f2d46f3c0f5275b68fe"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "specialize ( IHn1 n2 s2 H1 H2).",
            "VernacExtend",
            "6eba08cca4890c3c99eebf3ea6ad478d2bb56571"
        ],
        [
            "assert (H3 : n1 <= n2) by omega.",
            "VernacExtend",
            "fc6a739ee450b19334581bf28311ce04bc3a2246"
        ],
        [
            "apply countBLeafCT_mono_le with (s:=s1) in H3.",
            "VernacExtend",
            "a31650a758a8443d8bae450aacc674f57f357843"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bot_join: forall t1 t2, join bot t1 t2 -> t1 = t2.",
            "VernacStartTheoremProof",
            "b9c55473ecee052bcebcd56da252ba6fe263d741"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite lub_commute in H0.",
            "VernacExtend",
            "9c8f9ff816d8a89fcb05ade96e3c1ab92bfc449b"
        ],
        [
            "rewrite lub_bot in H0.",
            "VernacExtend",
            "a733d8b51bbe7a6a894b11160891b2ef4c21c408"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma join_top : forall t1 t2, join top t1 t2 -> t1 = bot /\\ t2 = top.",
            "VernacStartTheoremProof",
            "bd8f9dcfef0f69f237988da449cf2366adf2e896"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite glb_commute, glb_top in H.",
            "VernacExtend",
            "e3b677de40f23c6ea1d7674e9403fc7840cd036b"
        ],
        [
            "rewrite lub_commute, lub_top in H0.",
            "VernacExtend",
            "d11fef80fb3294fe6260c95dd34aa8ea3e0e7541"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_height_0: forall s, height s = 0 -> s = top \\/ s = bot.",
            "VernacStartTheoremProof",
            "ed8e3ead90ead57acb7e82b39d001737d4b736ef"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s as [s pf].",
            "VernacExtend",
            "481a787c654b6520d8b63e35856076f4cc563116"
        ],
        [
            "icase s.",
            "VernacExtend",
            "95bd8eb817fb0ad1529803d20290e40de7fdad6b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "left;unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "e9161670c4fc6367f5102a284f569523daca359d"
        ],
        [
            "right;unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "a527e7191d2dfd3cc55eeb05e2b91f17bd51f1c7"
        ],
        [
            "unfold tree_height in H.",
            "VernacExtend",
            "6f0a5994900d304b7e37570ee9395dd2367747c9"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "elimtype False;omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_height_glb_limit: forall n s1 s2, height s1 <= n -> height s2 <= n -> height (glb s1 s2) <= n.",
            "VernacStartTheoremProof",
            "600abf81ccc5888e1be6ea6eae4581f203cb2492"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inv H;inv H0.",
            "VernacExtend",
            "a68a921d6be7f316f7f04b942586a57884cf2fe6"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply tree_height_0 in H1.",
            "VernacExtend",
            "eb660c6256ce7656e69bf0c26769a9ddfef2276a"
        ],
        [
            "apply tree_height_0 in H2.",
            "VernacExtend",
            "8fdf12e2f42413813e876f11e01be7fbe5865afb"
        ],
        [
            "destruct H1;destruct H2;subst;compute;omega.",
            "VernacExtend",
            "9fe0faf7d0d8acd8d8c3c2bca72cb6862f76004e"
        ],
        [
            "destruct s1 as [s1 pf1].",
            "VernacExtend",
            "1167e6a7e9db374781590c0e54391f8f14eab001"
        ],
        [
            "icase s1.",
            "VernacExtend",
            "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf1) with top.",
            "VernacExtend",
            "1012c0daa94a6a7386dc01e6fceab87ed3b0b67d"
        ],
        [
            "rewrite glb_top.",
            "VernacExtend",
            "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "destruct s2 as [s2 pf2].",
            "VernacExtend",
            "ad067e598cfeae6f7538fcb420f4a37750080ba6"
        ],
        [
            "icase s2.",
            "VernacExtend",
            "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
            "VernacExtend",
            "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
        ],
        [
            "rewrite glb_top.",
            "VernacExtend",
            "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "unfold tree_height,glb,proj1_sig.",
            "VernacExtend",
            "c2df6f747ef84f2684e6d0644341b62c4a1d754b"
        ],
        [
            "simpl in pf1,pf2.",
            "VernacExtend",
            "d69d5c77affe201d4427140813c499f887334168"
        ],
        [
            "destruct pf1 as [? [? [? ?]]].",
            "VernacExtend",
            "8a56391efa967d9acd5732b00f4f643c174aa7fc"
        ],
        [
            "destruct pf2 as [? [? [? ?]]].",
            "VernacExtend",
            "ae5e955c991beaa0fc65174029a0df608d4cdbca"
        ],
        [
            "assert (H1 := IHn (exist (fun t => canonicalTree t) s1_1 c)(exist (fun t => canonicalTree t) s2_1 c1)).",
            "VernacExtend",
            "39b2ba93dd6b9901ae4af7976dab0d8b2b0e403e"
        ],
        [
            "assert (H2 := IHn (exist (fun t => canonicalTree t) s1_2 c0)(exist (fun t => canonicalTree t) s2_2 c2)).",
            "VernacExtend",
            "b2251edd69b9e4cbc49009fc18fd11357b8d545c"
        ],
        [
            "unfold tree_height,proj1_sig in *.",
            "VernacExtend",
            "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
        ],
        [
            "simpl in H,H0,H1,H2.",
            "VernacExtend",
            "c33df49656e152371b54f4fb312897594cbb0bcf"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "assert (Help := le_max_l (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
            "VernacExtend",
            "268171eff33a0228d90601686fa7e808d897e673"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "assert (Help := le_max_l (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
            "VernacExtend",
            "3b78ec64a2b295cfa81665df930925e318c414a1"
        ],
        [
            "spec H2.",
            "VernacExtend",
            "ccbc913e682d1020971c7fd5f1b9a88216edea30"
        ],
        [
            "assert (Help := le_max_r (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
            "VernacExtend",
            "14f664e9bf22e9e3733f407db75ad75361475986"
        ],
        [
            "spec H2.",
            "VernacExtend",
            "ccbc913e682d1020971c7fd5f1b9a88216edea30"
        ],
        [
            "assert (Help := le_max_r (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
            "VernacExtend",
            "ab6bfe1dae1b566b75d9ef69423d8f2f7ff4ac8f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (mkCanon (intersect_tree s1_1 s2_1)); icase (mkCanon (intersect_tree s1_2 s2_2)).",
            "VernacExtend",
            "829f87879c96c33200ce807dc418e2cdb0e4c9a6"
        ],
        [
            "icase b;icase b0;compute;omega.",
            "VernacExtend",
            "f1cdb8b97d0314a1c79f0dbc0cd9aa2f804f92ca"
        ],
        [
            "simpl in *;omega.",
            "VernacExtend",
            "2e505872d892cb5022bef5b246ceb26cdd84b133"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite max_0_r.",
            "VernacExtend",
            "3362d2c16e9cd1d151f6901fb81ca36c644e6bb0"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "assert (H3 := max_lub _ _ _ H1 H2).",
            "VernacExtend",
            "7b1509535176f701348d718bf63b29f39b3b51c9"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_glb1 : forall s1 s2, height s1 <= tree_height s2-> height (glb s1 s2) <= height s2.",
            "VernacStartTheoremProof",
            "69e025125ae3d43f4ae2ac8152eaaa7e57a67db7"
        ],
        [
            "unfold tree_height;simpl.",
            "VernacExtend",
            "bedca101ebaee15d2c33e8b9ac15e7a228ec7dbf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply tree_height_glb_limit.",
            "VernacExtend",
            "4f2acbdb8ae59cd5d0d2fb6e2f0f1962004970e0"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_height_lub_limit: forall n s1 s2, height s1 <= n -> height s2 <= n -> height (lub s1 s2) <= n.",
            "VernacStartTheoremProof",
            "72c5b5034b5d110cc51689a2fbf3bd021e407569"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inv H;inv H0.",
            "VernacExtend",
            "a68a921d6be7f316f7f04b942586a57884cf2fe6"
        ],
        [
            "apply tree_height_0 in H1.",
            "VernacExtend",
            "eb660c6256ce7656e69bf0c26769a9ddfef2276a"
        ],
        [
            "apply tree_height_0 in H2.",
            "VernacExtend",
            "8fdf12e2f42413813e876f11e01be7fbe5865afb"
        ],
        [
            "destruct H1;destruct H2;subst;compute;omega.",
            "VernacExtend",
            "9fe0faf7d0d8acd8d8c3c2bca72cb6862f76004e"
        ],
        [
            "destruct s1 as [s1 pf1].",
            "VernacExtend",
            "1167e6a7e9db374781590c0e54391f8f14eab001"
        ],
        [
            "icase s1.",
            "VernacExtend",
            "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf1) with bot.",
            "VernacExtend",
            "2fc5e22c89183905bec59a75f5bddd1a86c2058c"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "destruct s2 as [s2 pf2].",
            "VernacExtend",
            "ad067e598cfeae6f7538fcb420f4a37750080ba6"
        ],
        [
            "icase s2.",
            "VernacExtend",
            "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf2) with bot.",
            "VernacExtend",
            "48d49b81b124391bbd58041fffed31b02e0e8670"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "simpl in pf1,pf2.",
            "VernacExtend",
            "d69d5c77affe201d4427140813c499f887334168"
        ],
        [
            "destruct pf1 as [? [? [? ?]]].",
            "VernacExtend",
            "8a56391efa967d9acd5732b00f4f643c174aa7fc"
        ],
        [
            "destruct pf2 as [? [? [? ?]]].",
            "VernacExtend",
            "ae5e955c991beaa0fc65174029a0df608d4cdbca"
        ],
        [
            "assert (H1 := IHn (exist (fun t => canonicalTree t) s1_1 c)(exist (fun t => canonicalTree t) s2_1 c1)).",
            "VernacExtend",
            "39b2ba93dd6b9901ae4af7976dab0d8b2b0e403e"
        ],
        [
            "assert (H2 := IHn (exist (fun t => canonicalTree t) s1_2 c0)(exist (fun t => canonicalTree t) s2_2 c2)).",
            "VernacExtend",
            "b2251edd69b9e4cbc49009fc18fd11357b8d545c"
        ],
        [
            "unfold tree_height,proj1_sig in *;simpl in *.",
            "VernacExtend",
            "114dae78efd2e3c5b7f6f41c225713222f8fb915"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "assert (Help := le_max_l (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
            "VernacExtend",
            "268171eff33a0228d90601686fa7e808d897e673"
        ],
        [
            "spec H1.",
            "VernacExtend",
            "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
        ],
        [
            "assert (Help := le_max_l (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
            "VernacExtend",
            "3b78ec64a2b295cfa81665df930925e318c414a1"
        ],
        [
            "spec H2.",
            "VernacExtend",
            "ccbc913e682d1020971c7fd5f1b9a88216edea30"
        ],
        [
            "assert (Help := le_max_r (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
            "VernacExtend",
            "14f664e9bf22e9e3733f407db75ad75361475986"
        ],
        [
            "spec H2.",
            "VernacExtend",
            "ccbc913e682d1020971c7fd5f1b9a88216edea30"
        ],
        [
            "assert (Help := le_max_r (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
            "VernacExtend",
            "ab6bfe1dae1b566b75d9ef69423d8f2f7ff4ac8f"
        ],
        [
            "icase (mkCanon (union_tree s1_1 s2_1)); icase (mkCanon (union_tree s1_2 s2_2)).",
            "VernacExtend",
            "950da7d22246556d02b1cf8ba4019adc866ed60f"
        ],
        [
            "icase b;icase b0;compute;omega.",
            "VernacExtend",
            "f1cdb8b97d0314a1c79f0dbc0cd9aa2f804f92ca"
        ],
        [
            "simpl in *;omega.",
            "VernacExtend",
            "2e505872d892cb5022bef5b246ceb26cdd84b133"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite max_0_r.",
            "VernacExtend",
            "3362d2c16e9cd1d151f6901fb81ca36c644e6bb0"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "assert (H3 := max_lub _ _ _ H1 H2).",
            "VernacExtend",
            "7b1509535176f701348d718bf63b29f39b3b51c9"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_lub1 : forall s1 s2, height s1 <= height s2-> height (lub s1 s2) <= height s2.",
            "VernacStartTheoremProof",
            "3da8277fbe101ac67b08dc264c3f52a52084a6b8"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply tree_height_lub_limit.",
            "VernacExtend",
            "d0ce1d5195798333adc718ca60c6b922ac10a568"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_comp: forall s, height (comp s)= height s.",
            "VernacStartTheoremProof",
            "95b48544fce1921040b1596ecb917e43d3c0486a"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "intro s.",
            "VernacExtend",
            "8f016ced1ae59837b7d879a76d5f880ff6397ebe"
        ],
        [
            "destruct s as [s pf].",
            "VernacExtend",
            "481a787c654b6520d8b63e35856076f4cc563116"
        ],
        [
            "induction s;unfold tree_height;simpl.",
            "VernacExtend",
            "002aeeb395cf99dc750267e33d3cea88a2fe2029"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "simpl in pf.",
            "VernacExtend",
            "d8660beef72b9fca98b73ea7a37cc4e035d4b28d"
        ],
        [
            "destruct pf as [? [? [? ?]]].",
            "VernacExtend",
            "c005f3e0a34f37377546d9ec3f9cc56a0cc16f90"
        ],
        [
            "specialize ( IHs1 H1).",
            "VernacExtend",
            "143dfb53f25252e382fc42ea9ee0acdf30c22a77"
        ],
        [
            "specialize ( IHs2 H2).",
            "VernacExtend",
            "947cf913186151cc778935a614c73434e3679cb7"
        ],
        [
            "unfold tree_height in *;simpl in *.",
            "VernacExtend",
            "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_join_le: forall n s1 s2 s3, join s1 s2 s3 -> countBLeafCT n s1 + countBLeafCT n s2 <= countBLeafCT n s3.",
            "VernacStartTheoremProof",
            "a69a6ed79f64746066d78d34f3b19169ca65a1aa"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2]; destruct s3 as [s3 pf3].",
            "VernacExtend",
            "f5b7fbc5165c3efdebd21024d0b1812d8af34b9b"
        ],
        [
            "icase s1;icase s2;icase s3.",
            "VernacExtend",
            "290b544c2d9cf26da1dff483638091794bb038e6"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
            "VernacExtend",
            "bc9215a423d068a7996cd12d68c6e27356fcac96"
        ],
        [
            "apply join_top in H.",
            "VernacExtend",
            "2a48981e5b9a1535acef17ff8571433a720714ba"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite H;rewrite H0.",
            "VernacExtend",
            "cadacb31556a02adbe2c6bc962279414f9ba19d0"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf false) pf1) with bot in H.",
            "VernacExtend",
            "b733f8d88fd89f2582246ad5b2cdf4f9b5e61ce2"
        ],
        [
            "apply bot_join in H.",
            "VernacExtend",
            "a6aaec72c8e74900278a5a037b1eeaec7cce4058"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "assert (tree_height (exist (fun t : ShareTree => canonicalTree t) (Leaf b) pf1) <= 0) by (compute;omega).",
            "VernacExtend",
            "453b43f61e779e44bea845ca41084c23770ca072"
        ],
        [
            "assert (tree_height (exist (fun t : ShareTree => canonicalTree t) (Leaf b0) pf2) <= 0) by (compute;omega).",
            "VernacExtend",
            "24ef04357cc7b626132d8642f2107d467514d3fa"
        ],
        [
            "assert (H3 := tree_height_lub_limit _ _ _ H H0).",
            "VernacExtend",
            "2d6ad010425489fd232e54464490c117305a19b7"
        ],
        [
            "rewrite H2 in H3.",
            "VernacExtend",
            "009aed681b5bf7878390422291392aff7e71e42a"
        ],
        [
            "clear - H3.",
            "VernacExtend",
            "1ca535424183962a58658c6a9f78c07e3db56ca5"
        ],
        [
            "unfold height in H3;simpl in H3;unfold tree_height,proj1_sig in H3.",
            "VernacExtend",
            "18c086c7778220f45f2d84617c7d54e951983ec6"
        ],
        [
            "simpl in H3.",
            "VernacExtend",
            "2a96f120ac764efacadc60b978d01343f60aafa0"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold countBLeafCT;simpl.",
            "VernacExtend",
            "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
            "VernacExtend",
            "bc9215a423d068a7996cd12d68c6e27356fcac96"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite glb_commute in H.",
            "VernacExtend",
            "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
        ],
        [
            "rewrite glb_top in H.",
            "VernacExtend",
            "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
            "VernacExtend",
            "bc9215a423d068a7996cd12d68c6e27356fcac96"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite glb_commute in H.",
            "VernacExtend",
            "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
        ],
        [
            "rewrite glb_top in H.",
            "VernacExtend",
            "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "apply join_comm in H.",
            "VernacExtend",
            "6430d4c65b40e6875fb2470579dbfa1c0a109213"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf2) with top in H.",
            "VernacExtend",
            "617b45bfdd3a93a578dd51c5ef632fe8ab6a62ea"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite glb_commute in H.",
            "VernacExtend",
            "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
        ],
        [
            "rewrite glb_top in H.",
            "VernacExtend",
            "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf false) pf2) with bot in H.",
            "VernacExtend",
            "af7c4daf2f362992d1bbe48003a3a0cc28e275da"
        ],
        [
            "apply bot_join in H.",
            "VernacExtend",
            "a6aaec72c8e74900278a5a037b1eeaec7cce4058"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "unfold countBLeafCT,proj1_sig;simpl.",
            "VernacExtend",
            "de3e2c0145898ec24a7c3ef70739feb5f084b2fb"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold bot;f_equal;apply proof_irr.",
            "VernacExtend",
            "776e7c9934c6c2c973d5382d035a1df1ff33726c"
        ],
        [
            "apply join_comm in H.",
            "VernacExtend",
            "6430d4c65b40e6875fb2470579dbfa1c0a109213"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf2) with top in H.",
            "VernacExtend",
            "617b45bfdd3a93a578dd51c5ef632fe8ab6a62ea"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite glb_commute in H.",
            "VernacExtend",
            "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
        ],
        [
            "rewrite glb_top in H.",
            "VernacExtend",
            "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "unfold top;f_equal;apply proof_irr.",
            "VernacExtend",
            "b3293e1052e563035d6fe43c01c96fc7dd88679f"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "remember (decompose s1) as ds1; remember (decompose s2) as ds2; remember (decompose s3) as ds3; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; destruct ds3 as [s31 s32]; symmetry in Heqds1,Heqds2,Heqds3.",
            "VernacExtend",
            "3167bdc32b50069eac32c8099259d592dd476f4e"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s31) (s2:=s32);trivial.",
            "VernacExtend",
            "c812835e2bf655ed2a669da2234b9861bf79fc85"
        ],
        [
            "rewrite decompose_join with (t11:=s11) (t12:=s12) (t21:=s21) (t22:=s22) (t31:=s31) (t32:=s32)in H;trivial.",
            "VernacExtend",
            "1c749a171933987cac5fa1ad0748caeca12c36c2"
        ],
        [
            "destruct H as [H1 H2].",
            "VernacExtend",
            "c7474c5d52e048046b184a41b5748899e80e4e65"
        ],
        [
            "assert (H4 := IHn _ _ _ H1).",
            "VernacExtend",
            "f8c602422104c2e72cd407b0ed210dacaeac3e77"
        ],
        [
            "assert (H5 := IHn _ _ _ H2).",
            "VernacExtend",
            "b67f3afa8ed5a27fcbae989c6f2511c88b2fdbe6"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma countBLeafCT_join_eq: forall n s1 s2 s3, join s1 s2 s3 -> height s1 <= n -> height s2 <= n -> countBLeafCT n s1 + countBLeafCT n s2 = countBLeafCT n s3.",
            "VernacStartTheoremProof",
            "f36f279f4cb7d241dc1f270fd11a7d05e76fc945"
        ],
        [
            "unfold height;simpl.",
            "VernacExtend",
            "e23d389d1c77a219343ba58844b37a2178bd1331"
        ],
        [
            "induction n;intros.",
            "VernacExtend",
            "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "apply tree_height_0 in H3.",
            "VernacExtend",
            "5ec33cfde2ccdab1ffa8b8f2f193928ec70b364e"
        ],
        [
            "destruct H3 as [H3|H3];subst.",
            "VernacExtend",
            "46f0b8663fca9427902a3e369ec023aa836c4450"
        ],
        [
            "apply join_top in H.",
            "VernacExtend",
            "2a48981e5b9a1535acef17ff8571433a720714ba"
        ],
        [
            "destruct H;subst.",
            "VernacExtend",
            "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
        ],
        [
            "compute;omega.",
            "VernacExtend",
            "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
        ],
        [
            "apply bot_join in H;subst.",
            "VernacExtend",
            "f90d1d3deb1e20588a52a3204a19a548231f05f7"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "remember (decompose s1) as ds1; remember (decompose s2) as ds2; remember (decompose s3) as ds3; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; destruct ds3 as [s31 s32]; symmetry in Heqds1,Heqds2,Heqds3.",
            "VernacExtend",
            "3167bdc32b50069eac32c8099259d592dd476f4e"
        ],
        [
            "apply decompose_height_le with (s1:= s11) (s2:=s12)in H0;trivial.",
            "VernacExtend",
            "ff72bc766cc625928a40b8d89913eff4e1bb3052"
        ],
        [
            "apply decompose_height_le with (s1:= s21) (s2:=s22)in H1;trivial.",
            "VernacExtend",
            "515fa2f272317be24c3c26c23c4772cc416aff78"
        ],
        [
            "destruct H0 as [H2 H3]; destruct H1 as [H4 H5].",
            "VernacExtend",
            "d5cc623ea241f2c22de8fe554b5f4f2070fc8b86"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
            "VernacExtend",
            "177480b482f25e4361e2ee914ac13f40542052f0"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
            "VernacExtend",
            "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
        ],
        [
            "rewrite countBLeafCT_decompose with (s1:=s31) (s2:=s32);trivial.",
            "VernacExtend",
            "c812835e2bf655ed2a669da2234b9861bf79fc85"
        ],
        [
            "rewrite decompose_join with (t11:=s11) (t12:=s12) (t21:=s21) (t22:=s22) (t31:=s31) (t32:=s32)in H;trivial.",
            "VernacExtend",
            "1c749a171933987cac5fa1ad0748caeca12c36c2"
        ],
        [
            "destruct H as [H6 H7].",
            "VernacExtend",
            "2785cd644304d2d2dfcca4f33714fc9d2efce840"
        ],
        [
            "assert (H8 := IHn _ _ _ H6 H2 H4).",
            "VernacExtend",
            "81168f0056ff3fd3588d2ed34508d0f7e60d9dac"
        ],
        [
            "assert (H9 := IHn _ _ _ H7 H3 H5).",
            "VernacExtend",
            "15447c2fb343f169e94d272b58797be6c9e90fbb"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition share_metric (n : nat) (s : canonTree) : nat := match n with | 0 => 0 | S n => match le_dec (height s) n with | left _ => countBLeafCT n s + 1 | right _ => 0 end end.",
            "VernacDefinition",
            "a6de1819ed3e174950b2d6cb334160b3a2b02c68"
        ],
        [
            "Lemma share_metric_nerr : forall s n, height s < n -> 0 < share_metric n s.",
            "VernacStartTheoremProof",
            "321b53dd54e6c8d2968a6cf713a8597ca3ff5365"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height s) n).",
            "VernacExtend",
            "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold height in H;simpl in H.",
            "VernacExtend",
            "8b5c882e669027a49f1cb4f51d179e3c8f43c068"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma share_metric_err : forall s n, n <= height s -> share_metric n s = 0.",
            "VernacStartTheoremProof",
            "a64c95a4b2d053e85959838ac681ab9065454b7b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height s) n).",
            "VernacExtend",
            "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
        ],
        [
            "unfold height in H;simpl in H.",
            "VernacExtend",
            "8b5c882e669027a49f1cb4f51d179e3c8f43c068"
        ],
        [
            "elimtype False;omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma share_metric_height_monotonic : forall s n1 n2, n1<=n2 -> share_metric n1 s <= share_metric n2 s.",
            "VernacStartTheoremProof",
            "106c022b2b16eeda1c209adad2a5a9336b6ab7f3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n1.",
            "VernacExtend",
            "c3143fb15f4e22691029772031c7e992281d98db"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "icase n2.",
            "VernacExtend",
            "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "assert (H1 : n1 <= n2) by omega.",
            "VernacExtend",
            "7803aa2dea9b14af2b80b4f015d261622da8385f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height s) n1); icase (le_dec (tree_height s) n2).",
            "VernacExtend",
            "3958477e018e970b99281f7f6b131bcb295440af"
        ],
        [
            "assert (H2 := countBLeafCT_mono_le _ _ s H1).",
            "VernacExtend",
            "72220c7b1cc2524123980cf3162a86bb133b44ea"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma share_metric_lub : forall s s' n, ~(s'<=s)%ba-> 0 < share_metric n s -> 0 < share_metric n (lub s s') -> (share_metric n s<share_metric n (lub s s')).",
            "VernacStartTheoremProof",
            "ac9cde5eb100f2af32b69bd494798ab8c1625b31"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height s) n); icase (le_dec (tree_height (lub s s')) n).",
            "VernacExtend",
            "9cbe8e3c592a07202349fc61c2d89fdc6729978a"
        ],
        [
            "assert (H2 := lub_upper1 s s').",
            "VernacExtend",
            "0965971e70e504b512a9b8f8bb1e702c1909c03f"
        ],
        [
            "assert (H3 : s <> lub s s').",
            "VernacExtend",
            "08b5de68fd8dd9587695777cb5fa4847fc289862"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "apply lub_upper2.",
            "VernacExtend",
            "719c134a5ab6901ae588bda202544d5c526c245a"
        ],
        [
            "assert (H4 := countBLeafCT_lt _ _ _ H2 H3 l0).",
            "VernacExtend",
            "30f71c99e727fd7f299d43a50ac4c9e7e8470b0e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "revert H1.",
            "VernacExtend",
            "f960614533a2a55b448cbf376832532eaf449c34"
        ],
        [
            "icase (le_dec (tree_height (lub s s')) n);intro.",
            "VernacExtend",
            "e9d9a637244221798c6ed6ae6182218f265f2687"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma share_metric_glb : forall s s' n, ~(s<=s')%ba-> 0 < share_metric n s -> 0 < share_metric n (glb s s') -> (share_metric n (glb s s') < share_metric n s)%nat.",
            "VernacStartTheoremProof",
            "570b82e9e6e07e4cfff4acb14593908a1c149dc6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height (glb s s')) n); icase (le_dec (tree_height s) n).",
            "VernacExtend",
            "0492245c0b002706b3d70dcf18844b5ad0b39031"
        ],
        [
            "assert (H2 := glb_lower1 s s').",
            "VernacExtend",
            "b369b4e782fe08d900b6d5aa8ecdc77222ab351d"
        ],
        [
            "assert (H3 : glb s s' <> s).",
            "VernacExtend",
            "724712ba43b16cfb6e072bf9a9b9beba1bd50bdc"
        ],
        [
            "intro H3.",
            "VernacExtend",
            "c6ea07328dd3b3e09514a6b250aa3ceeb1e62693"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite<- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "apply glb_lower2.",
            "VernacExtend",
            "eec43869733b6bd6c1147d7619eaeac64edb95a2"
        ],
        [
            "assert (H4 := countBLeafCT_lt _ _ _ H2 H3 l0).",
            "VernacExtend",
            "30f71c99e727fd7f299d43a50ac4c9e7e8470b0e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "revert H0.",
            "VernacExtend",
            "de3e4fca453928a41c450906d5d5626d573cfb55"
        ],
        [
            "icase (le_dec (tree_height s) n).",
            "VernacExtend",
            "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma share_metric_dif_monotonic: forall s1 s2 n n0, (s1<=s2)%ba -> n<=n0 -> height s1 < n -> height s2 < n -> (share_metric n s2 - share_metric n s1 <= share_metric n0 s2 - share_metric n0 s1).",
            "VernacStartTheoremProof",
            "e217fa1538a411108e3c68262d0d08e80b6cf226"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "7549fbb600c3af6072a6d21bdcba999a253a2e01"
        ],
        [
            "icase n0.",
            "VernacExtend",
            "fd2ba696caa99f0b129d4fbb5031b00bf463aa87"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "assert (H3 : n <= n0) by omega.",
            "VernacExtend",
            "80fa88207e41b67eacc6f1caeb2d820413541f6d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "icase (le_dec (tree_height s1) n); icase (le_dec (tree_height s2) n); icase (le_dec (tree_height s1) n0); icase (le_dec (tree_height s2) n0); simpl;try omega.",
            "VernacExtend",
            "fceec9e8f7c87500e4d34d179cac9a18bb79b0b7"
        ],
        [
            "assert (H4 := countBLeafCT_mono_diff _ _ _ _ H3 H).",
            "VernacExtend",
            "83e0943d5f83afc1f98d4281951c3c07bd9f7dac"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold height in *;simpl in *.",
            "VernacExtend",
            "7a27ed62dd8e8cc5f4ee667ec76fb7d0665486aa"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold height in *;simpl in *.",
            "VernacExtend",
            "7a27ed62dd8e8cc5f4ee667ec76fb7d0665486aa"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shareTreeOrd_dec: forall t1 t2 : ShareTree, {shareTreeOrd t1 t2} + {~shareTreeOrd t1 t2}.",
            "VernacStartTheoremProof",
            "ff72b72827ab2ff34bc5d6b286759c214a8ced2d"
        ],
        [
            "Proof with try tauto.",
            "VernacProof",
            "15b79e71eaa27175bc0d0232ce351741147862ad"
        ],
        [
            "induction t1;intros.",
            "VernacExtend",
            "86b128637d2699b797a321f122eb12859eba7ca8"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "induction t2.",
            "VernacExtend",
            "53f08fccb09c885f9b579671cbf71bb2467c1614"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H2.",
            "VernacExtend",
            "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
        ],
        [
            "destruct IHt2_1.",
            "VernacExtend",
            "18cd2e12d21a1faf928a5c3721878c1d91f2ad01"
        ],
        [
            "destruct IHt2_2.",
            "VernacExtend",
            "3196e0a9bf78ca2a33a45d3710df2db61c92c24d"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply LeafNode_Ord;apply Node_Ord...",
            "VernacExtend",
            "a51cba5df9608c622502a03a6d70e4d4e06f7a03"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H2...",
            "VernacExtend",
            "e56884307fd8fa695f0781b00e68d60659f17bd1"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H2...",
            "VernacExtend",
            "e56884307fd8fa695f0781b00e68d60659f17bd1"
        ],
        [
            "icase t2.",
            "VernacExtend",
            "2898deeb43a78b1839a90863fb466bca6fde01b3"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "specialize ( IHt1_1 (Leaf false)).",
            "VernacExtend",
            "459a24056ffdd63385ad8a83e3300ff0dcf382be"
        ],
        [
            "specialize ( IHt1_2 (Leaf false)).",
            "VernacExtend",
            "93ba4b736be1afd03cb6328e376f2f2f95112cd9"
        ],
        [
            "destruct IHt1_1.",
            "VernacExtend",
            "923b658658f5b699d714aa79941641f8f3686e6d"
        ],
        [
            "destruct IHt1_2.",
            "VernacExtend",
            "a222fb9da7b9520d9fb70a02102277a26d26ab7c"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply NodeLeaf_Ord;apply Node_Ord...",
            "VernacExtend",
            "894a1815987aaba46497d1e2050e2f921eee5e49"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H1...",
            "VernacExtend",
            "4c4c02d639082e1381614270fb68ea2fec117282"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "inv H1...",
            "VernacExtend",
            "4c4c02d639082e1381614270fb68ea2fec117282"
        ],
        [
            "specialize ( IHt1_1 t2_1).",
            "VernacExtend",
            "026676e03457b8ff5dd9b2e410482e709abbf067"
        ],
        [
            "specialize ( IHt1_2 t2_2).",
            "VernacExtend",
            "a56067ccf39c5bb863a5b4fd2b7fe70241fc3d2f"
        ],
        [
            "destruct IHt1_1.",
            "VernacExtend",
            "923b658658f5b699d714aa79941641f8f3686e6d"
        ],
        [
            "destruct IHt1_2.",
            "VernacExtend",
            "a222fb9da7b9520d9fb70a02102277a26d26ab7c"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply Node_Ord...",
            "VernacExtend",
            "1c16d5d2177a34e81c7d2fbd85ceb96b1aefdf4f"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H...",
            "VernacExtend",
            "2db550cdcc6cd58ea31b2db993e234b30b874d29"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H...",
            "VernacExtend",
            "2db550cdcc6cd58ea31b2db993e234b30b874d29"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma leq_dec : forall (x y : t), {(x <= y)%ba} + {~ (x <= y)%ba}.",
            "VernacStartTheoremProof",
            "6e21848a0a55cb187c85537ede24e6ce35564fcf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Ord.",
            "VernacExtend",
            "d6887636da3c91a386eaa0b75899507ccb70d265"
        ],
        [
            "apply shareTreeOrd_dec.",
            "VernacExtend",
            "9267490a111117c8be2794a13eea46858b1b8e48"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma height_top : height top = 0.",
            "VernacStartTheoremProof",
            "dcb44890dab1e4fd7cf350a85d0e8fc164e777d2"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_bot: height bot = 0.",
            "VernacStartTheoremProof",
            "5440eda9413b9f46a1bdf66683e4142496ddf9a2"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_zero_eq: forall t, height t = 0 -> {t = top} + {t = bot}.",
            "VernacStartTheoremProof",
            "649139259f6fe674e840707b24cb06cb34980ca2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "unfold bot.",
            "VernacExtend",
            "219ba0db17a375ffc83549c360f7fdc6200b973f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "unfold tree_height in H.",
            "VernacExtend",
            "6f0a5994900d304b7e37570ee9395dd2367747c9"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "elimtype False.",
            "VernacExtend",
            "193053c8983316978aeded05598d605cc4f35bde"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition add (x y : canonTree) : option canonTree := match eq_dec (glb x y) bot with | left _ => Some (lub x y) | right _ => None end.",
            "VernacDefinition",
            "2f5fbfa96711b4be79d4e8fd529fcb58195723c5"
        ],
        [
            "Lemma add_join : forall t1 t2 t3, add t1 t2 = Some t3 <-> join t1 t2 t3.",
            "VernacStartTheoremProof",
            "b81ff8ec3ea94643516610dca97c194c9c504b9a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold add.",
            "VernacExtend",
            "11cf98bf231f22df486b46b3b6a1c38a94e859dd"
        ],
        [
            "icase (eq_dec (glb t1 t2) bot).",
            "VernacExtend",
            "911420e4d5c574ff50111a780b946712f722ecd1"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "split;auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "inv H;auto.",
            "VernacExtend",
            "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "destruct H;auto.",
            "VernacExtend",
            "95ae427bd4e09a5f31c59184b718811a23ecb36f"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "destruct H;tauto.",
            "VernacExtend",
            "2f14e8f2289aea21e930aa694b4171f63873e2e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sub (x y : canonTree) : option canonTree := match eq_dec (glb x y) y with | left _ => Some (glb x (comp y)) | right _ => None end.",
            "VernacDefinition",
            "013a7c71f965704e42c127cfd5f49cfc185bdd27"
        ],
        [
            "Lemma sub_join : forall t1 t2 t3, sub t1 t2 = Some t3 <-> join t2 t3 t1.",
            "VernacStartTheoremProof",
            "414087214536b468eee9fac7025cea1705a5b427"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sub.",
            "VernacExtend",
            "09a336a2b822859bc335120602ae265ad23b7a0d"
        ],
        [
            "icase (eq_dec (glb t1 t2) t2).",
            "VernacExtend",
            "338efb03d1daae3b8b0a43196f176d6d22c9de01"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite glb_assoc.",
            "VernacExtend",
            "3fde6022003f4830c8b8e15e693e56f6695285d9"
        ],
        [
            "replace (glb (comp t2) t2) with (glb t2 (comp t2)) by apply glb_commute.",
            "VernacExtend",
            "4b63e419253c2809f122d024b611c3b8ab99815c"
        ],
        [
            "rewrite comp2.",
            "VernacExtend",
            "741d8836b219ce289bee8338157ec007849bd04b"
        ],
        [
            "apply glb_bot.",
            "VernacExtend",
            "31e2e44b361dd8473cac239d0f57fd225a11b491"
        ],
        [
            "rewrite distrib2.",
            "VernacExtend",
            "32b45b89e4b12cf930149f7e51442efa1995b8c0"
        ],
        [
            "replace (lub (comp t2) t2) with (lub t2 (comp t2)) by apply lub_commute.",
            "VernacExtend",
            "0f72a3653ef6563bb602fd09dfe41ead65c486d5"
        ],
        [
            "rewrite comp1.",
            "VernacExtend",
            "038c4a07dd8a463e3722946a32d6bd565239a68b"
        ],
        [
            "rewrite glb_top.",
            "VernacExtend",
            "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
        ],
        [
            "rewrite<- e.",
            "VernacExtend",
            "038d705295bc042ea4f7eab695069943e9f585f2"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "apply lub_absorb.",
            "VernacExtend",
            "e4ca310df7a3e1b9c597a23b3914d4684cfab770"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite distrib1.",
            "VernacExtend",
            "7725acef05a9aeeb4ab7f3b008905f729a4a5660"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite comp2.",
            "VernacExtend",
            "741d8836b219ce289bee8338157ec007849bd04b"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "rewrite glb_commute in H.",
            "VernacExtend",
            "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
        ],
        [
            "assert (H1 : lub (glb t3 t2) (glb t3 (comp t2)) = glb t3 (comp t2)).",
            "VernacExtend",
            "ff2fde1b54ec0b531b700693ddc239d602f2328f"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite<- distrib1 in H1.",
            "VernacExtend",
            "232caf17124276f8d269a43c39132280e89f5470"
        ],
        [
            "rewrite comp1 in H1.",
            "VernacExtend",
            "8ad16b9da8e0f9a08330ee866d73b00ab4156f44"
        ],
        [
            "rewrite glb_top in H1.",
            "VernacExtend",
            "dffa833967f4d5bf1b63339c95725abd30b73f69"
        ],
        [
            "rewrite H1 at 2.",
            "VernacExtend",
            "5862269d34c11d2c45e997646dc2ea020eaa5028"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "elimtype False;apply n.",
            "VernacExtend",
            "a6ad8a193aa618eeda1e78640c920d02cc8c8335"
        ],
        [
            "rewrite<- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "rewrite distrib1.",
            "VernacExtend",
            "7725acef05a9aeeb4ab7f3b008905f729a4a5660"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "apply glb_idem.",
            "VernacExtend",
            "610524aa6de79feb1245a782c1dfd3078b5c5101"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_share_height_no_increase: forall sh sh' sh'' , decompose sh = (sh',sh'')-> height sh' <= height sh /\\ height sh'' <= height sh.",
            "VernacStartTheoremProof",
            "15a2d74fa0e60f0430df94df30d6bb4213d4cc62"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "remember (tree_height sh) as n.",
            "VernacExtend",
            "e3b810ed8fc10ef0dd51dc3ced1c179480be2489"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "symmetry in Heqn.",
            "VernacExtend",
            "c79e4e7f9c935eaf7e6fd943ab765bcfccf5f6ea"
        ],
        [
            "apply height_zero_eq in Heqn.",
            "VernacExtend",
            "f2a66be693b71718a370b37ca91927c3943583b6"
        ],
        [
            "icase Heqn;subst; inv H;compute;omega.",
            "VernacExtend",
            "e89a628b8940f538a2c2884f16cfa76d221bda19"
        ],
        [
            "symmetry in Heqn.",
            "VernacExtend",
            "c79e4e7f9c935eaf7e6fd943ab765bcfccf5f6ea"
        ],
        [
            "assert (H1 := decompose_height _ _ _ _ Heqn H).",
            "VernacExtend",
            "0532d2fd43a588d5a3091180f1f519d7a35c8fa4"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_top_rewrite : forall c, exist _ (Leaf true) c = top.",
            "VernacStartTheoremProof",
            "ace118e28d11ecc6e143af88ca90ae135aa95ac3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_bot_rewrite : forall c, exist _ (Leaf false) c = bot.",
            "VernacStartTheoremProof",
            "3bd59be7d751b206126c00bdde4f65a4dd2d25da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bot.",
            "VernacExtend",
            "219ba0db17a375ffc83549c360f7fdc6200b973f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_basic_rewrite : forall b c, exist _ (Leaf b) c = top \\/ exist _ (Leaf b) c = bot.",
            "VernacStartTheoremProof",
            "a0b229a68d1b81cd0e3fb506cbe00bebff2d222e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "left;apply tree_top_rewrite.",
            "VernacExtend",
            "e2c44085820d7ca7c9c599a3b61e9f66e0160fba"
        ],
        [
            "right;apply tree_bot_rewrite.",
            "VernacExtend",
            "273a16833de4e2d4cd4dd256170864088d5db0e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_case_rewrite : forall t, (t = top \\/ t = bot) \\/ exists t1 t2 c, t = exist _ (Node t1 t2) c.",
            "VernacStartTheoremProof",
            "1f50c0b9f4deec75501cb63cc11ecc51d1b42270"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "left;apply tree_basic_rewrite.",
            "VernacExtend",
            "aca28b3405628a8181b82e0fc39d4d868a840147"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "exists x1.",
            "VernacExtend",
            "41149f92e5f2a0109418d3e02971541f67fbd3df"
        ],
        [
            "exists x2.",
            "VernacExtend",
            "c66cfc490b972d4e27c8ead94cd5deb052231b69"
        ],
        [
            "exists c.",
            "VernacExtend",
            "683d4593ad0b3c7125e420e0670d5a4b0d3c38bc"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_basic: forall b c c1 c2, decompose (exist _ (Leaf b) c) = (exist _ (Leaf b) c1,exist _ (Leaf b) c2).",
            "VernacStartTheoremProof",
            "c6fbb775e1e822fe95767c001e257ce96f0d0b32"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold decompose,decompose_tree.",
            "VernacExtend",
            "dc4ee8bd3ea4dba818622466bb6791d2a0013ea6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_top: decompose top = (top,top).",
            "VernacStartTheoremProof",
            "083e9e47b252f80580f742c444b82f1f5805bc47"
        ],
        [
            "apply decompose_basic.",
            "VernacExtend",
            "f12e9cad9fde1e3ae705b13ce0bc59e4c7b2b06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_bot: decompose bot = (bot,bot).",
            "VernacStartTheoremProof",
            "a3a8565c00cd132d0b034862c0e32f0df9b57bea"
        ],
        [
            "apply decompose_basic.",
            "VernacExtend",
            "f12e9cad9fde1e3ae705b13ce0bc59e4c7b2b06c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_Node: forall t1 t2 c c1 c2, decompose (exist _ (Node t1 t2) c) = (exist _ t1 c1, exist _ t2 c2).",
            "VernacStartTheoremProof",
            "0f59123b983d6ccbd9c7dd71ad36921b1ef360f1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold decompose.",
            "VernacExtend",
            "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
        ],
        [
            "unfold decompose_tree.",
            "VernacExtend",
            "2d95efd928797f66424a9b08e1f8f7a763a49c8e"
        ],
        [
            "unfold tree_decompose.",
            "VernacExtend",
            "2fb82aadd4d80809cef1d46f6649a97e7e43f0ce"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma identity_bot: forall s, identity s <-> s = bot.",
            "VernacStartTheoremProof",
            "f38b7f0bb467717a413fce0ed48a4c4cb5cf5117"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "specialize ( H bot s).",
            "VernacExtend",
            "c4375517b2f0071074cd79b16355c562a855adfc"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply glb_bot.",
            "VernacExtend",
            "31e2e44b361dd8473cac239d0f57fd225a11b491"
        ],
        [
            "apply lub_bot.",
            "VernacExtend",
            "9143ce4f15da365c263100b45b1f0543e2cb2003"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite lub_commute in H0.",
            "VernacExtend",
            "9c8f9ff816d8a89fcb05ade96e3c1ab92bfc449b"
        ],
        [
            "rewrite lub_bot in H0.",
            "VernacExtend",
            "a733d8b51bbe7a6a894b11160891b2ef4c21c408"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_proof_replace: forall (t : ShareTree) c1 c2, exist (fun t => canonicalTree t) t c1 = exist _ t c2.",
            "VernacStartTheoremProof",
            "7c6b96a66af1852c992fb88f2e39cfff4ce9b994"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma top_unrel: forall a, unrel top a = a.",
            "VernacStartTheoremProof",
            "fe0099388261ee96855a7458afe14664b82574dd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold top.",
            "VernacExtend",
            "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bot_unrel: forall a, unrel bot a = a.",
            "VernacStartTheoremProof",
            "1f5c9338918bf1b3db3c2de8fd25673dbf8e0a9e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold bot.",
            "VernacExtend",
            "219ba0db17a375ffc83549c360f7fdc6200b973f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_lub : forall t11 t12 t21 t22 t31 t32, lub (exist _ (mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist _ (mkCanon (Node t21 t22)) (mkCanon_correct _)) = (exist _ (mkCanon (Node t31 t32)) (mkCanon_correct _))<-> lub (exist _ (mkCanon t11) (mkCanon_correct _)) (exist _ (mkCanon t21) (mkCanon_correct _)) = (exist _ (mkCanon t31) (mkCanon_correct _))/\\ lub (exist _ (mkCanon t12) (mkCanon_correct _)) (exist _ (mkCanon t22) (mkCanon_correct _)) = (exist _ (mkCanon t32) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "25a83c3e263dfb24d71993193c0f7bddb4d99074"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "11c5a0f10c8f24632d42bf152123c583d0fecf90"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
            "VernacExtend",
            "d1902807081df5275f7f389da7feb6af630f8d5b"
        ],
        [
            "destruct H2 as [? ?].",
            "VernacExtend",
            "2c09fffa3a23f0a9a50fd3d7d3264f34f5f4936e"
        ],
        [
            "split;apply exist_ext;rewrite mkCanon_union;congruence.",
            "VernacExtend",
            "825b2304970a722da25e44ffa503a643792799de"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "generalize (mkCanon_union (Node t11 t12) (Node t21 t22));intro.",
            "VernacExtend",
            "11c5a0f10c8f24632d42bf152123c583d0fecf90"
        ],
        [
            "rewrite mkCanon_union in H2.",
            "VernacExtend",
            "dedcb98adc093cb3d85f256e6aa103ce92d9c99e"
        ],
        [
            "rewrite mkCanon_union in H3.",
            "VernacExtend",
            "cb3e1bae4a3073531326e0a6fc11c2a7cef82122"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in H1;rewrite H1.",
            "VernacExtend",
            "0244cd355678d557b83a3ff1f1d854d52775c68b"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkCanon_glb : forall t11 t12 t21 t22 t31 t32, glb (exist _ (mkCanon (Node t11 t12)) (mkCanon_correct _)) (exist _ (mkCanon (Node t21 t22)) (mkCanon_correct _)) = (exist _ (mkCanon (Node t31 t32)) (mkCanon_correct _))<-> glb (exist _ (mkCanon t11) (mkCanon_correct _)) (exist _ (mkCanon t21) (mkCanon_correct _)) = (exist _ (mkCanon t31) (mkCanon_correct _))/\\ glb (exist _ (mkCanon t12) (mkCanon_correct _)) (exist _ (mkCanon t22) (mkCanon_correct _)) = (exist _ (mkCanon t32) (mkCanon_correct _)).",
            "VernacStartTheoremProof",
            "e287f487e9714e2bee2ef8b1d584691de3f8c8e7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold BAF.lub.",
            "VernacExtend",
            "72222c35d399d093dcddc6c9238bac9d2efa49f3"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "generalize (mkCanon_intersect((Node t11 t12)) ((Node t21 t22)));intro.",
            "VernacExtend",
            "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite H1 in H3.",
            "VernacExtend",
            "1a5bd25c47245138a7a03e032524fd4066f525ce"
        ],
        [
            "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
            "VernacExtend",
            "d1902807081df5275f7f389da7feb6af630f8d5b"
        ],
        [
            "destruct H2 as [? ?].",
            "VernacExtend",
            "2c09fffa3a23f0a9a50fd3d7d3264f34f5f4936e"
        ],
        [
            "split;apply exist_ext; simpl; rewrite mkCanon_intersect;congruence.",
            "VernacExtend",
            "df72f376d71fd339143e1c105b105571ba4da671"
        ],
        [
            "apply exist_ext.",
            "VernacExtend",
            "04869c9def673870f0220158e4e6618faccfd279"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "generalize (mkCanon_intersect (Node t11 t12) (Node t21 t22));intro.",
            "VernacExtend",
            "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
        ],
        [
            "rewrite mkCanon_intersect in H2.",
            "VernacExtend",
            "d5f3c47169eaaa6b664b25b047d3abb8dd9cdc05"
        ],
        [
            "rewrite mkCanon_intersect in H3.",
            "VernacExtend",
            "9471788beabfa58dd63199a0466ff7310bceddf9"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in H1;rewrite H1.",
            "VernacExtend",
            "0244cd355678d557b83a3ff1f1d854d52775c68b"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_lub: forall t1 t11 t12 t2 t21 t22 t3 t31 t32, decompose t1 = (t11,t12) -> decompose t2 = (t21,t22) -> decompose t3 = (t31,t32) -> (lub t1 t2 = t3 <-> (lub t11 t21 = t31 /\\ lub t12 t22 = t32)).",
            "VernacStartTheoremProof",
            "eece4fddedb5f6f648a5a15e09bf58690901ee75"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
            "VernacExtend",
            "812b79a562ea96af4db197fa2a08592a266df50c"
        ],
        [
            "generalize (decompose_rewrite t1 t11 t12);intro H11.",
            "VernacExtend",
            "b087360e9b5c442b60b0622598cfb41904f1c7ef"
        ],
        [
            "generalize (decompose_rewrite t2 t21 t22);intro H21.",
            "VernacExtend",
            "01102d5c313419994f35f053eea35468b1d6ccb3"
        ],
        [
            "generalize (decompose_rewrite t3 t31 t32);intro H31.",
            "VernacExtend",
            "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
        ],
        [
            "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
            "VernacExtend",
            "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
        ],
        [
            "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
            "VernacExtend",
            "c437650f09b7a627ae31c68a8d4edf52c12738db"
        ],
        [
            "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
            "VernacExtend",
            "9657b220c6a032f534b1b435e912c267137e1c93"
        ],
        [
            "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
            "VernacExtend",
            "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
        ],
        [
            "apply mkCanon_lub.",
            "VernacExtend",
            "8fdf013fdc6715b6584dca111846b548043e5f31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_glb: forall t1 t11 t12 t2 t21 t22 t3 t31 t32, decompose t1 = (t11,t12) -> decompose t2 = (t21,t22) -> decompose t3 = (t31,t32) -> (glb t1 t2 = t3 <-> (glb t11 t21 = t31 /\\ glb t12 t22 = t32)).",
            "VernacStartTheoremProof",
            "78bcb7e7fd579f320cf0cfc624af32b92628f825"
        ],
        [
            "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
            "VernacExtend",
            "812b79a562ea96af4db197fa2a08592a266df50c"
        ],
        [
            "generalize (decompose_rewrite t1 t11 t12);intro H11.",
            "VernacExtend",
            "b087360e9b5c442b60b0622598cfb41904f1c7ef"
        ],
        [
            "generalize (decompose_rewrite t2 t21 t22);intro H21.",
            "VernacExtend",
            "01102d5c313419994f35f053eea35468b1d6ccb3"
        ],
        [
            "generalize (decompose_rewrite t3 t31 t32);intro H31.",
            "VernacExtend",
            "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
        ],
        [
            "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
            "VernacExtend",
            "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
        ],
        [
            "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
            "VernacExtend",
            "c437650f09b7a627ae31c68a8d4edf52c12738db"
        ],
        [
            "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
            "VernacExtend",
            "9657b220c6a032f534b1b435e912c267137e1c93"
        ],
        [
            "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
            "VernacExtend",
            "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
        ],
        [
            "apply mkCanon_glb.",
            "VernacExtend",
            "cf41e875b0383f7ac95f4d9130e5fca3fa6a917b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_right_obmit: forall a a1 a2 t1 t2 c c1, t1 <> Leaf false -> decompose a = (a1,a2) -> unrel (exist _ (Node t1 t2) c) a = unrel (exist _ t1 c1) a1.",
            "VernacStartTheoremProof",
            "bb11c21871fa028f9468bda7ac928d444806391a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "replace (tree_decompose a) with (decompose a) by trivial.",
            "VernacExtend",
            "75b1abf71424702bfad4ce90ad75d7a726fbe06b"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "icase t1.",
            "VernacExtend",
            "e055cabe3107ded6bea02161ec5b25d83588817a"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "try tauto.",
            "VernacExtend",
            "0cc92a52db239479be3b46183fa1f5fb3e6cfd5f"
        ],
        [
            "repeat f_equal.",
            "VernacExtend",
            "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_left_obmit: forall a a1 a2 t c c', decompose a = (a1,a2) -> unrel (exist _ (Node (Leaf false) t) c) a = unrel (exist _ t c') a2.",
            "VernacStartTheoremProof",
            "6f78d7ab86f4637262fc0a14bfa1d995c7bc0cff"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "replace (tree_decompose a) with (decompose a) by trivial.",
            "VernacExtend",
            "75b1abf71424702bfad4ce90ad75d7a726fbe06b"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "repeat f_equal.",
            "VernacExtend",
            "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_lub: forall a b1 b2, unrel a (lub b1 b2) = lub (unrel a b1) (unrel a b2).",
            "VernacStartTheoremProof",
            "a8632641d380127764206b6d2b19027da80a9dc2"
        ],
        [
            "intro a.",
            "VernacExtend",
            "14896994838b4c124c1f1123678e1f3468f5e2ea"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "induction x;intros;rewrite unrel_equation.",
            "VernacExtend",
            "f5e06b5c7a31c533e273402e6ebcfb560855476f"
        ],
        [
            "generalize (tree_basic_rewrite b c);intro.",
            "VernacExtend",
            "ec83dd8624e8e59e5838416e49f4602035f24760"
        ],
        [
            "destruct H;rewrite H.",
            "VernacExtend",
            "8d728eff26797af2a131863c90007e8dec0b6f4d"
        ],
        [
            "repeat rewrite top_unrel.",
            "VernacExtend",
            "491a129d5c5c86818f9c7c26d5d083ae79a60223"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "repeat rewrite bot_unrel.",
            "VernacExtend",
            "008d5a8d43e06e2a7a292fa872617043a53732f9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite decompose_Node with (c1:=c) (c2:=c0).",
            "VernacExtend",
            "f40521421cf998d31d844da3a33942ae0e755298"
        ],
        [
            "remember (lub b1 b2) as b3.",
            "VernacExtend",
            "8d955c4068bb9883293f8eef49988073d7bf0a3e"
        ],
        [
            "symmetry in Heqb3.",
            "VernacExtend",
            "15ac3582d987b1f03b01cfaaf7eb3fb3329d64f3"
        ],
        [
            "remember (decompose b1); remember (decompose b2);remember (decompose b3).",
            "VernacExtend",
            "d771d73bc20290ca125a1ddb33ac03e5e6c963aa"
        ],
        [
            "destruct p; destruct p0; destruct p1.",
            "VernacExtend",
            "7495d2d1b8ef700f98bc924c64ae5e0c8af248b8"
        ],
        [
            "symmetry in Heqp,Heqp0,Heqp1.",
            "VernacExtend",
            "0d37e327e4518665655212a22e7e2700a1017cb7"
        ],
        [
            "eapply decompose_lub in Heqb3.",
            "VernacExtend",
            "b1a22562aef1a3c010560233737fbe1a77536dad"
        ],
        [
            "2: apply Heqp.",
            "VernacExtend",
            "2893d51d4b738ff318c4e423be438631282d26d2"
        ],
        [
            "2: apply Heqp0.",
            "VernacExtend",
            "e8481939a51359540b58e9e22e87e90e3e405f78"
        ],
        [
            "2: apply Heqp1.",
            "VernacExtend",
            "ceb400faf8091b11aa3085c31ec309afad71cf2b"
        ],
        [
            "destruct Heqb3;subst.",
            "VernacExtend",
            "1e764c01ecdc1288fcf6be8c3442ab50c4c23b16"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c)(a1:=t0)(a2:=t1);trivial.",
            "VernacExtend",
            "1723d29dc263d9fa491e1735aa7714fa8da8308f"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t2) (a2:=t3);trivial.",
            "VernacExtend",
            "34ce51573213ee83f4aae933a9ff7a259d25b711"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "rewrite unrel_left_obmit with (c':=c0)(a1:=t0)(a2:=t1);trivial.",
            "VernacExtend",
            "e685e0f9e552c3ab6c8e6f7f55620d4550f6e1b6"
        ],
        [
            "rewrite unrel_left_obmit with (c':=c0)(a1:=t2)(a2:=t3);trivial.",
            "VernacExtend",
            "08f1172b91b2cdb9f605ea9ae69928a1c7a774ca"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t0) (a2:=t1);trivial.",
            "VernacExtend",
            "1723d29dc263d9fa491e1735aa7714fa8da8308f"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t2) (a2:=t3);trivial.",
            "VernacExtend",
            "34ce51573213ee83f4aae933a9ff7a259d25b711"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_glb: forall a b1 b2, unrel a (glb b1 b2) = glb (unrel a b1) (unrel a b2).",
            "VernacStartTheoremProof",
            "d6cb5279e7ab3aa4d3ee179bfed96bff45244dae"
        ],
        [
            "intro a.",
            "VernacExtend",
            "14896994838b4c124c1f1123678e1f3468f5e2ea"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "induction x;intros;rewrite unrel_equation.",
            "VernacExtend",
            "f5e06b5c7a31c533e273402e6ebcfb560855476f"
        ],
        [
            "generalize (tree_basic_rewrite b c);intro.",
            "VernacExtend",
            "ec83dd8624e8e59e5838416e49f4602035f24760"
        ],
        [
            "destruct H;rewrite H.",
            "VernacExtend",
            "8d728eff26797af2a131863c90007e8dec0b6f4d"
        ],
        [
            "repeat rewrite top_unrel.",
            "VernacExtend",
            "491a129d5c5c86818f9c7c26d5d083ae79a60223"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "repeat rewrite bot_unrel.",
            "VernacExtend",
            "008d5a8d43e06e2a7a292fa872617043a53732f9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite decompose_Node with (c1:=c) (c2:=c0).",
            "VernacExtend",
            "f40521421cf998d31d844da3a33942ae0e755298"
        ],
        [
            "remember (glb b1 b2) as b3.",
            "VernacExtend",
            "3f9997d8d3f326e26f3e640c9a5fc9eeb86b83fc"
        ],
        [
            "symmetry in Heqb3.",
            "VernacExtend",
            "15ac3582d987b1f03b01cfaaf7eb3fb3329d64f3"
        ],
        [
            "remember (decompose b1); remember (decompose b2);remember (decompose b3).",
            "VernacExtend",
            "d771d73bc20290ca125a1ddb33ac03e5e6c963aa"
        ],
        [
            "destruct p; destruct p0; destruct p1.",
            "VernacExtend",
            "7495d2d1b8ef700f98bc924c64ae5e0c8af248b8"
        ],
        [
            "symmetry in Heqp,Heqp0,Heqp1.",
            "VernacExtend",
            "0d37e327e4518665655212a22e7e2700a1017cb7"
        ],
        [
            "eapply decompose_glb in Heqb3.",
            "VernacExtend",
            "f5498efb85d49d8d28d6dd3a9a48f733a28c7a15"
        ],
        [
            "2: apply Heqp.",
            "VernacExtend",
            "2893d51d4b738ff318c4e423be438631282d26d2"
        ],
        [
            "2: apply Heqp0.",
            "VernacExtend",
            "e8481939a51359540b58e9e22e87e90e3e405f78"
        ],
        [
            "2: apply Heqp1.",
            "VernacExtend",
            "ceb400faf8091b11aa3085c31ec309afad71cf2b"
        ],
        [
            "destruct Heqb3;subst.",
            "VernacExtend",
            "1e764c01ecdc1288fcf6be8c3442ab50c4c23b16"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c)(a1:=t0)(a2:=t1);trivial.",
            "VernacExtend",
            "1723d29dc263d9fa491e1735aa7714fa8da8308f"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t2) (a2:=t3);trivial.",
            "VernacExtend",
            "34ce51573213ee83f4aae933a9ff7a259d25b711"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "rewrite unrel_left_obmit with (c':=c0)(a1:=t0)(a2:=t1);trivial.",
            "VernacExtend",
            "e685e0f9e552c3ab6c8e6f7f55620d4550f6e1b6"
        ],
        [
            "rewrite unrel_left_obmit with (c':=c0)(a1:=t2)(a2:=t3);trivial.",
            "VernacExtend",
            "08f1172b91b2cdb9f605ea9ae69928a1c7a774ca"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t0) (a2:=t1);trivial.",
            "VernacExtend",
            "1723d29dc263d9fa491e1735aa7714fa8da8308f"
        ],
        [
            "rewrite unrel_right_obmit with (c1:=c) (a1:=t2) (a2:=t3);trivial.",
            "VernacExtend",
            "34ce51573213ee83f4aae933a9ff7a259d25b711"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_bot: forall a, unrel a bot = bot.",
            "VernacStartTheoremProof",
            "5f4bb46bc49557994757a41b96913597348a1447"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "rewrite decompose_Node with (c1:=c) (c2:=c0).",
            "VernacExtend",
            "f40521421cf998d31d844da3a33942ae0e755298"
        ],
        [
            "rewrite decompose_bot.",
            "VernacExtend",
            "c836a17c3b8722d7b4aa95667ad2521c13f9502f"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_top: forall a, unrel a top = top.",
            "VernacStartTheoremProof",
            "cf1fd398fbab8bf0539422c3ef008dab89921881"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "rewrite decompose_Node with (c1:=c) (c2:=c0).",
            "VernacExtend",
            "f40521421cf998d31d844da3a33942ae0e755298"
        ],
        [
            "rewrite decompose_top.",
            "VernacExtend",
            "a577e3bc652b1ce5dbf2924e6742a4305f6ade9c"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_join: forall x a b c, join a b c -> join (unrel x a) (unrel x b) (unrel x c).",
            "VernacStartTheoremProof",
            "30912aa6f5a5f2952a0ad30629a2ac7b5ece8a65"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite<- unrel_glb.",
            "VernacExtend",
            "fe404b831ebf01fd74d5f0d779acd0ab8155877d"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply unrel_bot.",
            "VernacExtend",
            "cd927bbd0bbb863d07327a1ca15cf47be2a6f245"
        ],
        [
            "rewrite<- unrel_lub.",
            "VernacExtend",
            "1e76d58d1eb6964bf2e70afed65d9c92fe200968"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unrel_disjoint: forall a a', a <> bot -> glb a a' = bot -> unrel a a' = bot.",
            "VernacStartTheoremProof",
            "6c164b859caf978b2307180fca48c9af718e4326"
        ],
        [
            "intro a.",
            "VernacExtend",
            "14896994838b4c124c1f1123678e1f3468f5e2ea"
        ],
        [
            "destruct a.",
            "VernacExtend",
            "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
        ],
        [
            "induction x;intros.",
            "VernacExtend",
            "967005fa252895ab470aa9876d40c37f363bf6d6"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite tree_top_rewrite in *.",
            "VernacExtend",
            "4a607d1b4afbb0b85fcb26fc652d13bbface47aa"
        ],
        [
            "rewrite glb_commute in H0.",
            "VernacExtend",
            "249b2132b0b20fa96781ad372d3bd49cf3c7d454"
        ],
        [
            "rewrite glb_top in H0.",
            "VernacExtend",
            "8ce54f8d163db1304b12a67317567be4baeb6c4d"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply top_unrel.",
            "VernacExtend",
            "ed78aace6e6efe0707bd91fc58fb57c0ec2b8e0a"
        ],
        [
            "rewrite tree_bot_rewrite in *.",
            "VernacExtend",
            "d12131325551185255f327de42bb65b460fb8c8f"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite decompose_Node with (c1:=c)(c2:=c0).",
            "VernacExtend",
            "f40521421cf998d31d844da3a33942ae0e755298"
        ],
        [
            "remember (decompose a').",
            "VernacExtend",
            "7d4988648eed92cae7853a3ce2f55b1854b6bcc4"
        ],
        [
            "icase p.",
            "VernacExtend",
            "7265928ecd1563dd7e0cd295bd319b31056c8578"
        ],
        [
            "symmetry in Heqp.",
            "VernacExtend",
            "672a829a182c5fd0cceb35b039fef560742f36d3"
        ],
        [
            "generalize (decompose_Node x1 x2 (conj n (conj n0 (conj c c0))) c c0);intro.",
            "VernacExtend",
            "550c1a96a140c710b8b24ce69a7cbe5d0b0cead7"
        ],
        [
            "generalize decompose_bot;intro.",
            "VernacExtend",
            "fff45f109faa88e325e55d4c583f9f8dec882535"
        ],
        [
            "generalize (decompose_glb _ _ _ _ _ _ _ _ _ H1 Heqp H2);intro.",
            "VernacExtend",
            "4a6686103ec755b7949ec1713099d709ff0f1b56"
        ],
        [
            "rewrite H3 in H0.",
            "VernacExtend",
            "dbae769fea2529c982ec8b4da339407464bc3cb4"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "icase x1.",
            "VernacExtend",
            "b8b4e1cbe4608005ab4d47831383899c8d46547c"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "rewrite tree_top_rewrite in H0.",
            "VernacExtend",
            "0eb6e1e44328e328dab76e52d4882661e6ce3cc7"
        ],
        [
            "rewrite glb_commute in H0.",
            "VernacExtend",
            "249b2132b0b20fa96781ad372d3bd49cf3c7d454"
        ],
        [
            "rewrite glb_top in H0.",
            "VernacExtend",
            "8ce54f8d163db1304b12a67317567be4baeb6c4d"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply IHx2;trivial.",
            "VernacExtend",
            "2a4efcac64c68833936c7183b983c71c55212ac9"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "inversion n0.",
            "VernacExtend",
            "1066af8025aa041fa75888620f1cce5ad6b8e853"
        ],
        [
            "icase x2.",
            "VernacExtend",
            "bcd0f33732012369c5e1e3dcf6222f010fea2811"
        ],
        [
            "icase b.",
            "VernacExtend",
            "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
        ],
        [
            "apply IHx1;trivial.",
            "VernacExtend",
            "ec3cfcdf2bd2b884099a84f0546dc79862c99e23"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inversion H5.",
            "VernacExtend",
            "c72c29a0eff26255c8a4846e1794fb6f7559049a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_height_zero: forall s sL sR, decompose s = (sL,sR) -> height s = 0 -> sL = s /\\ sR = s.",
            "VernacStartTheoremProof",
            "1e253f5856ad008c7726d575a7e218ecf25987e4"
        ],
        [
            "Proof with try tauto.",
            "VernacProof",
            "15b79e71eaa27175bc0d0232ce351741147862ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply height_zero_eq in H0.",
            "VernacExtend",
            "664e0db1c117f1b1e31650e3306baf6251960731"
        ],
        [
            "destruct H0;subst.",
            "VernacExtend",
            "20271853295fa24b8817fa15426b7cb1d3d3abe2"
        ],
        [
            "rewrite decompose_top in H.",
            "VernacExtend",
            "d37d5a1e76c372ffe00fb1bb31897544536c3648"
        ],
        [
            "inv H...",
            "VernacExtend",
            "2db550cdcc6cd58ea31b2db993e234b30b874d29"
        ],
        [
            "rewrite decompose_bot in H.",
            "VernacExtend",
            "36f2966edee96e51f3ff9557a38978aa5c6b60d4"
        ],
        [
            "inv H...",
            "VernacExtend",
            "2db550cdcc6cd58ea31b2db993e234b30b874d29"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_equal: forall a b aL aR bL bR, decompose a = (aL,aR) -> decompose b = (bL,bR) -> (a = b <-> aL = bL /\\ aR = bR).",
            "VernacStartTheoremProof",
            "4418b3b9df2df31fff16e0b2438ca2045f3caa17"
        ],
        [
            "Proof with auto.",
            "VernacProof",
            "a7e71b78b5628467da426641e148a0229b525f22"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (forall x y, x = y <-> join bot x y).",
            "VernacExtend",
            "2e30a6cb07d1d1061587cb30cf3507e9b031d74f"
        ],
        [
            "intros;split;intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite glb_commute.",
            "VernacExtend",
            "bb4c622c49b9220b28be788a8847088215d049dd"
        ],
        [
            "apply glb_bot.",
            "VernacExtend",
            "31e2e44b361dd8473cac239d0f57fd225a11b491"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "apply lub_bot.",
            "VernacExtend",
            "9143ce4f15da365c263100b45b1f0543e2cb2003"
        ],
        [
            "apply bot_join...",
            "VernacExtend",
            "07c64f8f8bf899c1494205755cf84f3461fe1683"
        ],
        [
            "repeat rewrite H1.",
            "VernacExtend",
            "3fc28a6233df83b351f29083bc0239a8b3212daf"
        ],
        [
            "generalize (decompose_bot);intro.",
            "VernacExtend",
            "fff45f109faa88e325e55d4c583f9f8dec882535"
        ],
        [
            "apply decompose_join...",
            "VernacExtend",
            "18063c083a0a28d4df89047fa21b9c348e4ffa13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_nonzero: forall sL sR s, decompose s = (sL,sR) -> (s <> bot <-> sL <> bot \\/ sR <> bot).",
            "VernacStartTheoremProof",
            "8193dfe1ca21d114d5664b9bb42e7591fdb1f47c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s.",
            "VernacExtend",
            "25b900e268e7851d959aa45edce33af62b3fca65"
        ],
        [
            "icase x.",
            "VernacExtend",
            "a3a02324b64cdcca858e774328c9995e2746731d"
        ],
        [
            "rewrite decompose_basic with (c1:=c) (c2:=c)in H.",
            "VernacExtend",
            "0b530beef2562672f678e04f23f758920493c91f"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "icase b;tauto.",
            "VernacExtend",
            "f309280eb78688da10827c001fc271dcc7657e8f"
        ],
        [
            "destruct c as [? [? [? ?]]].",
            "VernacExtend",
            "91b35c9e9e89936f86e31eb47804a072d7d5134f"
        ],
        [
            "rewrite decompose_Node with (c1 :=c) (c2:=c0)in H.",
            "VernacExtend",
            "35df2e5e666a06d0963276e1d61c8db1150f67ed"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv n0.",
            "VernacExtend",
            "fbd48752f13728de175cb8a5ee3f2ccc12e57d08"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "repeat intro.",
            "VernacExtend",
            "b1b5d9b3004bf4634299c208df98406e88278608"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "inv n0.",
            "VernacExtend",
            "fbd48752f13728de175cb8a5ee3f2ccc12e57d08"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "2721274aada33cbec3c1f62204a14a93dcf297fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_equal: forall sL sR sL' sR' s n, avg n sL sR = Some s -> avg n sL' sR' = Some s -> sL = sL' /\\ sR = sR'.",
            "VernacStartTheoremProof",
            "1524818831b7a4dc709a577c616565fd667000e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply tree_avg_avg2round in H.",
            "VernacExtend",
            "2003d72aa62da7b837ea8906df994aac871efd28"
        ],
        [
            "apply tree_avg_avg2round in H0.",
            "VernacExtend",
            "1cf3ca52ec5232eb5fe157cfb3811a4069679f9f"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "split;congruence.",
            "VernacExtend",
            "7f007b5ce3732856c1deed66b0edcc61cdb7f2d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_bot: forall n, avg (S n) bot bot = Some bot.",
            "VernacStartTheoremProof",
            "d34e46d043dd56df4f4d1c347a2ec5d1806a77ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply tree_avg_identity.",
            "VernacExtend",
            "56ba71456a5e467a8bb56c6f0a0b2f9ef9f771da"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_zero: forall sL sR s n, avg n sL sR = Some s -> (s = bot <-> sL = bot /\\ sR = bot).",
            "VernacStartTheoremProof",
            "941dc99a31f696ad5551ed01e179a1e534620f70"
        ],
        [
            "Proof with try tauto.",
            "VernacProof",
            "15b79e71eaa27175bc0d0232ce351741147862ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "split;intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "subst s.",
            "VernacExtend",
            "74f9d19bed934d582499e429031854bbf4cf674a"
        ],
        [
            "apply tree_avg_equal with bot (S n)...",
            "VernacExtend",
            "57b2afae0d0a994ef07261622266023f21dc370a"
        ],
        [
            "apply tree_avg_bot.",
            "VernacExtend",
            "d6f0feeb1e37fc8d85ed07cdc09c3e413ef647b5"
        ],
        [
            "destruct H0;subst.",
            "VernacExtend",
            "20271853295fa24b8817fa15426b7cb1d3d3abe2"
        ],
        [
            "rewrite tree_avg_bot in H.",
            "VernacExtend",
            "6e1f140c5836f0b5b32d066830a3bbf99c6f51b3"
        ],
        [
            "inv H...",
            "VernacExtend",
            "2db550cdcc6cd58ea31b2db993e234b30b874d29"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_nonzero: forall sL sR s n, avg n sL sR = Some s -> (s <> bot <-> sL <> bot \\/ sR <> bot).",
            "VernacStartTheoremProof",
            "d48711940cf8acf1346e3a0d40852a2a38b7190b"
        ],
        [
            "Proof with try tauto.",
            "VernacProof",
            "15b79e71eaa27175bc0d0232ce351741147862ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split;repeat intro.",
            "VernacExtend",
            "58781e8240fd8f74127c645d945c17db427c39f7"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "destruct (eq_dec sL bot)...",
            "VernacExtend",
            "f1e04176e9f7464e99850b451b93d9cc91540228"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "destruct (eq_dec sR bot)...",
            "VernacExtend",
            "4ea86a900da2507c337375ebd57c6754fdeed204"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply tree_avg_zero in H...",
            "VernacExtend",
            "a139331052c6ef0901c48d49f255ab9e146ec1e5"
        ],
        [
            "apply tree_avg_zero in H...",
            "VernacExtend",
            "a139331052c6ef0901c48d49f255ab9e146ec1e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_avg_bound: forall sL sR s n, avg n sL sR = Some s -> (height s <= n)%nat.",
            "VernacStartTheoremProof",
            "58f45ef7754f587d7d131f7b60f83a8acfdccddc"
        ],
        [
            "Proof with try tauto;try omega.",
            "VernacProof",
            "331fb6ec6dd5630cc443e6e3b58a16e43f8759a2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "icase n.",
            "VernacExtend",
            "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
        ],
        [
            "apply tree_avg_avg2round in H.",
            "VernacExtend",
            "2003d72aa62da7b837ea8906df994aac871efd28"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct (le_dec (height s) (S n))...",
            "VernacExtend",
            "47d7f72bf70eb5cbc8a154e0c60f631d0026cbd1"
        ],
        [
            "rewrite tree_round_left_None in H...",
            "VernacExtend",
            "76c5840c73eb77bb745b55775be547b28b764781"
        ],
        [
            "inv H.",
            "VernacExtend",
            "b84516fdc68c352f174305f1c391bddd57650d6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Lsh_recompose: Lsh = recompose (top, bot).",
            "VernacStartTheoremProof",
            "f31dbb5276603b647de338fac14a1bd313429c4b"
        ],
        [
            "compute;f_equal.",
            "VernacExtend",
            "b504d13f2142036db3b4e17dcafa76217ca63617"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsh_recompose: Rsh = recompose (bot,top).",
            "VernacStartTheoremProof",
            "d9a9680fa47980b6d3e02266d642de0646cc3dcd"
        ],
        [
            "compute;f_equal.",
            "VernacExtend",
            "b504d13f2142036db3b4e17dcafa76217ca63617"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_Rsh: forall sh, unrel Rsh sh = snd (decompose sh).",
            "VernacStartTheoremProof",
            "31df9398fb764e8e335919f7b2f70f54a5f3292e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Rsh.",
            "VernacExtend",
            "7f6c0277332c6ab18f24d668bb89c2f1dd05cfb1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold rel;simpl.",
            "VernacExtend",
            "a82ad96569cac257fa36582a5a68a1e6d7cfefef"
        ],
        [
            "destruct (tree_decompose sh);simpl.",
            "VernacExtend",
            "aa0b1765241d6b6b9bf06243e50f20fe4a0fb8cd"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decompose_Lsh: forall sh, unrel Lsh sh = fst (decompose sh).",
            "VernacStartTheoremProof",
            "2381fac795f7793c86002159aecb4b803656ce23"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Lsh.",
            "VernacExtend",
            "3ea1762a790399f392b6d525cb4f28da8a3003f4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite unrel_equation.",
            "VernacExtend",
            "9970753558687ba8cc48e2c9612ef87c0b448c30"
        ],
        [
            "unfold rel;simpl.",
            "VernacExtend",
            "a82ad96569cac257fa36582a5a68a1e6d7cfefef"
        ],
        [
            "destruct (tree_decompose sh);simpl.",
            "VernacExtend",
            "aa0b1765241d6b6b9bf06243e50f20fe4a0fb8cd"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_Lsh: forall sh, rel Lsh sh = recompose (sh,bot).",
            "VernacStartTheoremProof",
            "8077661042afe9790d84ce4e5ca8d9f9431140dd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct sh.",
            "VernacExtend",
            "33af23db925f05f4181a97d2c063549cdbd4e648"
        ],
        [
            "unfold Lsh.",
            "VernacExtend",
            "3ea1762a790399f392b6d525cb4f28da8a3003f4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite rel_top2.",
            "VernacExtend",
            "9f5067958669738360c6933421909eff444e54de"
        ],
        [
            "icase x;simpl.",
            "VernacExtend",
            "30a70991163ebff811284495e6dd81881141be58"
        ],
        [
            "icase b;simpl.",
            "VernacExtend",
            "1a1e28fecc40b77f0153335d65cc99499468e23a"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_Rsh: forall sh, rel Rsh sh = recompose (bot,sh).",
            "VernacStartTheoremProof",
            "e9fa26ce283d7c93c056e6acb100fd2f9b99c128"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct sh.",
            "VernacExtend",
            "33af23db925f05f4181a97d2c063549cdbd4e648"
        ],
        [
            "unfold Rsh.",
            "VernacExtend",
            "7f6c0277332c6ab18f24d668bb89c2f1dd05cfb1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite rel_top2.",
            "VernacExtend",
            "9f5067958669738360c6933421909eff444e54de"
        ],
        [
            "icase x;simpl.",
            "VernacExtend",
            "30a70991163ebff811284495e6dd81881141be58"
        ],
        [
            "icase b;simpl.",
            "VernacExtend",
            "1a1e28fecc40b77f0153335d65cc99499468e23a"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "compute.",
            "VernacExtend",
            "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply proof_irr.",
            "VernacExtend",
            "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lub_rel_recompose: forall sh1 sh2, lub (rel Lsh sh1) (rel Rsh sh2) = recompose (sh1,sh2).",
            "VernacStartTheoremProof",
            "897840f0622e420593b735a24c70448273e689c8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite rel_Lsh, rel_Rsh.",
            "VernacExtend",
            "9786dc99e9097f63575d90b921a6e1b17040812d"
        ],
        [
            "erewrite decompose_lub;eauto.",
            "VernacExtend",
            "48cf468b1413b7de002a5c097c057119f8ad9c68"
        ],
        [
            "rewrite decompose_recompose.",
            "VernacExtend",
            "eb8f3681817479056640c0d0db5b31fccfb6c012"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "rewrite decompose_recompose.",
            "VernacExtend",
            "eb8f3681817479056640c0d0db5b31fccfb6c012"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "rewrite decompose_recompose.",
            "VernacExtend",
            "eb8f3681817479056640c0d0db5b31fccfb6c012"
        ],
        [
            "rewrite lub_bot.",
            "VernacExtend",
            "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
        ],
        [
            "rewrite lub_commute.",
            "VernacExtend",
            "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
        ],
        [
            "rewrite lub_bot;trivial.",
            "VernacExtend",
            "4ebfdef3fa4fc0ff9dfed6651fcfd356f2ffd462"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Share.",
            "VernacEndSegment",
            "81c805f331f341edd3249773ff6e2045be9fdfb6"
        ]
    ],
    "proofs": [
        {
            "name": "nonEmpty_dec",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nonFull_dec",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "geTrueFull",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leFalseEmpty",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "emptyLeFalse",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullGeTrue",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "falseLeaf_bottom",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "induction x; auto.",
                        "VernacExtend",
                        "381968ec60b3c326b28cb5341d67ccedca24b7a1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trueLeaf_top",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "induction x; destruct_bool; auto.",
                        "VernacExtend",
                        "66156a69892e34c340dd6055416a7c8cd77bbff2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqFalseLeaf_empty",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqTrueLeaf_full",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "emptyTree_canonical_falseLeaf",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTree_canonical_trueLeaf",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeOrd_refl",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "5e802da379a896285ed380e9bd6ac7e832fc13d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeOrd_trans_leaf",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intro x1; induction x1; simpl; intros; invert_ord; destruct_bool; intuition.",
                        "VernacExtend",
                        "80a6c1be1afb8676f84a6d25dba059f717898a45"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; destruct_bool; intuition eauto.",
                        "VernacExtend",
                        "96bc984eb541e851ec6ed05a865544448731fe05"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; destruct_bool; intuition eauto.",
                        "VernacExtend",
                        "96bc984eb541e851ec6ed05a865544448731fe05"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeOrd_trans",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros x1 x2; revert x1; induction x2; simpl; intros.",
                        "VernacExtend",
                        "ad7c6d53ea31a40efdf6a12d79d13dc1febdd537"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans_leaf with b; auto.",
                        "VernacExtend",
                        "1f0f29ec58ccf7646cf83628d5b43082782ffab9"
                    ]
                },
                {
                    "command": [
                        "inv H; inv H0; invert_ord; eauto.",
                        "VernacExtend",
                        "e16a5c4e77fe65670f3bfd08b903c5ff6b9daabc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeEq_refl",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "df90cea83499d3a8245942cbe402d285ad89e7dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeEq_sym",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition.",
                        "VernacExtend",
                        "45ea87166cde0b3f46330d4987d4fa3ad52236ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTreeEq_trans",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply shareTreeOrd_trans with y; auto.",
                        "VernacExtend",
                        "d7192fa988922ef895acff4e59aa2909fd2555c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_correct",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; auto.",
                        "VernacExtend",
                        "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon x1); intros.",
                        "VernacExtend",
                        "3cc7391c2ff0c656aa1f0f8de3b315b903cea73b"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon x2); intros.",
                        "VernacExtend",
                        "0f2d7c7dcc8e67b7054ef5e870a0077668741fd9"
                    ]
                },
                {
                    "command": [
                        "case_eq (bool_dec b b0); intros; simpl; auto.",
                        "VernacExtend",
                        "d98ce090d257dd3af08ff7106495b91fdf40bf24"
                    ]
                },
                {
                    "command": [
                        "destruct_bool; intuition.",
                        "VernacExtend",
                        "ad3af98d0f1c688d39977fec1d10adbf7954afc8"
                    ]
                },
                {
                    "command": [
                        "elim n; auto.",
                        "VernacExtend",
                        "3a8caa8ad55d0caef05cad9a8edac9567ac3fef6"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in IHx2.",
                        "VernacExtend",
                        "b66f70506360386a034788d81f687a435dffe9e2"
                    ]
                },
                {
                    "command": [
                        "simpl in *; intuition.",
                        "VernacExtend",
                        "3c93b20e236893738d98aa108b6ab920773a5b5b"
                    ]
                },
                {
                    "command": [
                        "rewrite H in IHx1.",
                        "VernacExtend",
                        "be420b26dbed6be7b76b79abd2d1a2f28db30d25"
                    ]
                },
                {
                    "command": [
                        "simpl in *; intuition.",
                        "VernacExtend",
                        "3c93b20e236893738d98aa108b6ab920773a5b5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_eq",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; auto.",
                        "VernacExtend",
                        "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
                    ]
                },
                {
                    "command": [
                        "split; apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "5f039fb28c3e04f1b9bd342d56c07ac4d927885c"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon x1); intros; rewrite H in IHx1; destruct IHx1; case_eq (mkCanon x2); intros; rewrite H2 in IHx2; destruct IHx2; red.",
                        "VernacExtend",
                        "03577ad557558b4805bf8941f08149c5795ed195"
                    ]
                },
                {
                    "command": [
                        "destruct (bool_dec b b0); subst; intuition; repeat econstructor; eauto.",
                        "VernacExtend",
                        "91178f3332bedc96629311c10f08f46e0018d040"
                    ]
                },
                {
                    "command": [
                        "split; repeat econstructor; auto.",
                        "VernacExtend",
                        "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
                    ]
                },
                {
                    "command": [
                        "split; repeat econstructor; auto.",
                        "VernacExtend",
                        "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
                    ]
                },
                {
                    "command": [
                        "split; repeat econstructor; auto.",
                        "VernacExtend",
                        "f911c940f99e1653dba8bba85b76ce2bf9fcb1d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_test",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (mkCanon x).",
                        "VernacExtend",
                        "e41a037e5302d32e0d033d90e5d6fc8ec3dc6c8d"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_nonEmpty",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; auto.",
                        "VernacExtend",
                        "bca6351d60f8de7f1d1aea115f0377bfadfbb6c6"
                    ]
                },
                {
                    "command": [
                        "destruct H; [ apply IHx1 in H | apply IHx2 in H ]; clear IHx1 IHx2.",
                        "VernacExtend",
                        "6fd8a4204bb453172f508c295ed659a244a11d64"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon x1); destruct (mkCanon x2); simpl in *; auto.",
                        "VernacExtend",
                        "973baf27ebbbf7c9b843c455a481a9e3b003bc8a"
                    ]
                },
                {
                    "command": [
                        "destruct (bool_dec b b0); subst; intuition; repeat econstructor; eauto.",
                        "VernacExtend",
                        "91178f3332bedc96629311c10f08f46e0018d040"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon x1); destruct (mkCanon x2); simpl in *; auto.",
                        "VernacExtend",
                        "973baf27ebbbf7c9b843c455a481a9e3b003bc8a"
                    ]
                },
                {
                    "command": [
                        "destruct (bool_dec b b0); subst; intuition; simpl; auto.",
                        "VernacExtend",
                        "bd69917934a46d1c76f6b9c8d7da19893ddef0fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_commute",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; destruct y; simpl; intros; auto.",
                        "VernacExtend",
                        "1ea350e11ea133da03380410b676d649346e4886"
                    ]
                },
                {
                    "command": [
                        "destruct b; destruct b0; simpl; auto.",
                        "VernacExtend",
                        "4b70d3932539be5f09a9d95387cafdc181e42d05"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx1.",
                        "VernacExtend",
                        "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx2.",
                        "VernacExtend",
                        "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_commute",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; destruct y; simpl; intros; auto.",
                        "VernacExtend",
                        "1ea350e11ea133da03380410b676d649346e4886"
                    ]
                },
                {
                    "command": [
                        "destruct b; destruct b0; simpl; auto.",
                        "VernacExtend",
                        "4b70d3932539be5f09a9d95387cafdc181e42d05"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx1.",
                        "VernacExtend",
                        "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx2.",
                        "VernacExtend",
                        "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_upper_bound",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros.",
                        "VernacExtend",
                        "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "apply trueLeaf_top.",
                        "VernacExtend",
                        "98208c2bf056ed56a2352abca42104735244d9b8"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "destruct y; simpl.",
                        "VernacExtend",
                        "3ee7639a8cf990e8e14c61e05c7505a6bd7dbdcb"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "apply trueLeaf_top.",
                        "VernacExtend",
                        "98208c2bf056ed56a2352abca42104735244d9b8"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "59311386889bd5783efd51817785a54d1e894e50"
                    ]
                },
                {
                    "command": [
                        "apply Node_Ord; auto.",
                        "VernacExtend",
                        "9b71bb64d6750cc0b5ffbacf94448479ad71e373"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersection_lower_bound",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros.",
                        "VernacExtend",
                        "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "apply trueLeaf_top.",
                        "VernacExtend",
                        "98208c2bf056ed56a2352abca42104735244d9b8"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "destruct y; simpl.",
                        "VernacExtend",
                        "3ee7639a8cf990e8e14c61e05c7505a6bd7dbdcb"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "59311386889bd5783efd51817785a54d1e894e50"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply Node_Ord; auto.",
                        "VernacExtend",
                        "9b71bb64d6750cc0b5ffbacf94448479ad71e373"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_least_bound",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; try destruct_bool; auto.",
                        "VernacExtend",
                        "817ad4f8cfbf0386cbb469a6021c4307882e2338"
                    ]
                },
                {
                    "command": [
                        "destruct y; invert_ord; try destruct_bool; auto.",
                        "VernacExtend",
                        "c72d0d13611c0c053d85dd38b2f3a5df5f7a5a41"
                    ]
                },
                {
                    "command": [
                        "destruct z; invert_ord; try destruct_bool; repeat econstructor; auto.",
                        "VernacExtend",
                        "b5c5536d4c66160d3ccf6acda25958112760440a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersection_greatest_bound",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; invert_ord; destruct_bool; auto.",
                        "VernacExtend",
                        "cc5bf207e2f7950c125dda910157788a0fc7aa2d"
                    ]
                },
                {
                    "command": [
                        "destruct y; invert_ord; try destruct_bool; auto.",
                        "VernacExtend",
                        "c72d0d13611c0c053d85dd38b2f3a5df5f7a5a41"
                    ]
                },
                {
                    "command": [
                        "destruct z; invert_ord; try destruct_bool; repeat econstructor; auto.",
                        "VernacExtend",
                        "b5c5536d4c66160d3ccf6acda25958112760440a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_idem",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_idem",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_absorb",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros.",
                        "VernacExtend",
                        "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "destruct y; auto.",
                        "VernacExtend",
                        "8cabfab7335b853bd741abe0b23c4f6622438184"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- union_idem; auto.",
                        "VernacExtend",
                        "b0b3ef3c0c41992ef6a512d90675cf0b31a9e6cc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx1.",
                        "VernacExtend",
                        "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx2.",
                        "VernacExtend",
                        "0e75bff6904172238676ef3877d4e8e239b68643"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_absorb",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros.",
                        "VernacExtend",
                        "3dbf2a128ea126b2510d5998aa0ac95f54d3d90d"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "destruct y; auto.",
                        "VernacExtend",
                        "8cabfab7335b853bd741abe0b23c4f6622438184"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- intersect_idem; auto.",
                        "VernacExtend",
                        "b25209c608e2667850a7c879eb6265d2bb6061b9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx1.",
                        "VernacExtend",
                        "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx2.",
                        "VernacExtend",
                        "0e75bff6904172238676ef3877d4e8e239b68643"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_distrib",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; try destruct_bool; simpl; auto.",
                        "VernacExtend",
                        "dca173d81acd752d1f6dc1f3d643d3b91518950b"
                    ]
                },
                {
                    "command": [
                        "case_eq (union_tree y z); intros.",
                        "VernacExtend",
                        "2dd1692af691b98a5aaf4c9161e676d54920c266"
                    ]
                },
                {
                    "command": [
                        "destruct y; destruct z; destruct_bool; simpl in *; try discriminate; auto.",
                        "VernacExtend",
                        "2eb3724f462df725ee434fc5af1d513fb4c17855"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- union_idem; auto.",
                        "VernacExtend",
                        "b0b3ef3c0c41992ef6a512d90675cf0b31a9e6cc"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- union_absorb; auto.",
                        "VernacExtend",
                        "de91ab9db41b2912169e34de8a24176a7697fffb"
                    ]
                },
                {
                    "command": [
                        "repeat (rewrite union_commute; rewrite <- union_absorb); auto.",
                        "VernacExtend",
                        "d2af89ef6ff565182feca924dd4bea8094fa16d5"
                    ]
                },
                {
                    "command": [
                        "destruct y; destruct z; destruct_bool; try discriminate; simpl in *.",
                        "VernacExtend",
                        "884d7ddbe3fbb6f0d08249e1e8d04658aaaf9b19"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx1.",
                        "VernacExtend",
                        "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx2.",
                        "VernacExtend",
                        "0e75bff6904172238676ef3877d4e8e239b68643"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_distrib",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros; try destruct_bool; simpl; auto.",
                        "VernacExtend",
                        "dca173d81acd752d1f6dc1f3d643d3b91518950b"
                    ]
                },
                {
                    "command": [
                        "case_eq (intersect_tree y z); intros.",
                        "VernacExtend",
                        "871cb29eccacb9fa0edd83ec065b705d7824f34a"
                    ]
                },
                {
                    "command": [
                        "destruct y; destruct z; destruct_bool; simpl in *; try discriminate; auto.",
                        "VernacExtend",
                        "2eb3724f462df725ee434fc5af1d513fb4c17855"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- intersect_idem; auto.",
                        "VernacExtend",
                        "b25209c608e2667850a7c879eb6265d2bb6061b9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- intersect_absorb; auto.",
                        "VernacExtend",
                        "6253b93dfb7ecabe9ab51807431c83a2be605822"
                    ]
                },
                {
                    "command": [
                        "repeat (rewrite intersect_commute; rewrite <- intersect_absorb); auto.",
                        "VernacExtend",
                        "d2eceaa822e869c57cec77b30ded3e41d4b865c1"
                    ]
                },
                {
                    "command": [
                        "destruct y; destruct z; destruct_bool; try discriminate; simpl in *.",
                        "VernacExtend",
                        "884d7ddbe3fbb6f0d08249e1e8d04658aaaf9b19"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx1.",
                        "VernacExtend",
                        "7a802fc9b05b88d086157d1a6fd93dfdd3f27162"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHx2.",
                        "VernacExtend",
                        "0e75bff6904172238676ef3877d4e8e239b68643"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Node_Eq",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; econstructor; auto.",
                        "VernacExtend",
                        "61f3f380ef7391f8ebf52c5b4ae7f28bd437853c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_cong0",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "induction y; simpl; intros.",
                        "VernacExtend",
                        "7a2c95c7e79e2d1aa59c3e7f488e3033a97d85ae"
                    ]
                },
                {
                    "command": [
                        "rewrite (intersect_commute x (Leaf b)).",
                        "VernacExtend",
                        "1f944bc075a266196a4e3028a9d3505026450acb"
                    ]
                },
                {
                    "command": [
                        "rewrite (intersect_commute x' (Leaf b)).",
                        "VernacExtend",
                        "03daa74a5fb2f3aee20b346e246df9a33bdc74bd"
                    ]
                },
                {
                    "command": [
                        "revert b x' H; induction x; simpl; intros; destruct_bool; solve [ auto | apply falseLeaf_bottom ].",
                        "VernacExtend",
                        "cb88e55df5c7c1df9d2230aa1d454b18faae113e"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl in *; intros; destruct_bool; simpl in *; try discriminate; solve [ apply shareTreeOrd_refl | apply falseLeaf_bottom | invert_ord; repeat econstructor; auto ].",
                        "VernacExtend",
                        "d8a6e0ed22c6330de2aff6f2a66020a2798c6ad0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_cong0",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "induction y; simpl; intros.",
                        "VernacExtend",
                        "7a2c95c7e79e2d1aa59c3e7f488e3033a97d85ae"
                    ]
                },
                {
                    "command": [
                        "rewrite (union_commute x (Leaf b)).",
                        "VernacExtend",
                        "dc4072a91d643c17366d0c55a3f4007dd2ded1ec"
                    ]
                },
                {
                    "command": [
                        "rewrite (union_commute x' (Leaf b)).",
                        "VernacExtend",
                        "f2c66506000b5a2c3362d83fe931d0a86a475cfb"
                    ]
                },
                {
                    "command": [
                        "revert b x' H; induction x; simpl; intros; destruct_bool; solve [ auto | apply trueLeaf_top ].",
                        "VernacExtend",
                        "9568627e3b92386ed137acbea7690d578f22793a"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl in *; intros; destruct_bool; simpl in *; try discriminate; solve [ apply shareTreeOrd_refl | apply trueLeaf_top | invert_ord; repeat econstructor; auto ].",
                        "VernacExtend",
                        "2421527454194c741115a3d20b819ceca1b1633b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_cong1",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply intersect_cong0; auto.",
                        "VernacExtend",
                        "c829f693d9282ed6957a482db31970d634a64b6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_cong1",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply union_cong0; auto.",
                        "VernacExtend",
                        "8d0686a9505ac556c000be2c64586bd5bdf3f4a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intersect_cong",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (intersect_tree x' y).",
                        "VernacExtend",
                        "8ee9d044cd86f392d6a59a2b261270f4a09a0d52"
                    ]
                },
                {
                    "command": [
                        "apply intersect_cong1; auto.",
                        "VernacExtend",
                        "a9aaf557451a5831dd3e6376b46ab365bf756508"
                    ]
                },
                {
                    "command": [
                        "rewrite (intersect_commute x' y).",
                        "VernacExtend",
                        "0e2fed9047fb3b79d32c9c8569459196bcf13a3c"
                    ]
                },
                {
                    "command": [
                        "rewrite (intersect_commute x' y').",
                        "VernacExtend",
                        "c2af0cd7d921468b39f3a23ce5424a2555edac6b"
                    ]
                },
                {
                    "command": [
                        "apply intersect_cong1; auto.",
                        "VernacExtend",
                        "a9aaf557451a5831dd3e6376b46ab365bf756508"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_cong",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (union_tree x' y).",
                        "VernacExtend",
                        "61f1e560a063f633d5de2cc83d4a0d274bb05231"
                    ]
                },
                {
                    "command": [
                        "apply union_cong1; auto.",
                        "VernacExtend",
                        "87731b90b4e937972ba35d70ed02f48e9523269e"
                    ]
                },
                {
                    "command": [
                        "rewrite (union_commute x' y).",
                        "VernacExtend",
                        "2cb4ba6874aa46c8ec6a6a1472ba30e1d0617041"
                    ]
                },
                {
                    "command": [
                        "rewrite (union_commute x' y').",
                        "VernacExtend",
                        "5b0887bc8ede7e9f86ddb3e1057e7eaac4e8208e"
                    ]
                },
                {
                    "command": [
                        "apply union_cong1; auto.",
                        "VernacExtend",
                        "87731b90b4e937972ba35d70ed02f48e9523269e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_cong0",
            "line_nb": 266,
            "steps": [
                {
                    "command": [
                        "induction x; simpl.",
                        "VernacExtend",
                        "032ca6881eec9f6ca6ad619919b16fb530146db9"
                    ]
                },
                {
                    "command": [
                        "induction x'; simpl; intros; invert_ord; destruct_bool; repeat econstructor; solve [ auto ].",
                        "VernacExtend",
                        "4c835fd5f5829fa023b64f46f20905c93ce28567"
                    ]
                },
                {
                    "command": [
                        "simpl; intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "inversion H; clear H; subst; invert_ord; destruct_bool; simpl.",
                        "VernacExtend",
                        "1a2affceb0c78d5edbd98ec2d9b67317cc7a0874"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "repeat econstructor.",
                        "VernacExtend",
                        "8cc3573e6ffc5b9ad80e283e74c0ed99cf929f6c"
                    ]
                },
                {
                    "command": [
                        "apply (IHx1 (Leaf false)); auto.",
                        "VernacExtend",
                        "4324b869de02076879ef0bded23d99e7133fde7a"
                    ]
                },
                {
                    "command": [
                        "apply (IHx2 (Leaf false)); auto.",
                        "VernacExtend",
                        "7106acd51b6e6c7926a03557c15082d66df7bf2d"
                    ]
                },
                {
                    "command": [
                        "repeat econstructor.",
                        "VernacExtend",
                        "8cc3573e6ffc5b9ad80e283e74c0ed99cf929f6c"
                    ]
                },
                {
                    "command": [
                        "apply IHx1; auto.",
                        "VernacExtend",
                        "d7b5ff5f7665cd27e8524d1934c3de9c5abe9f3d"
                    ]
                },
                {
                    "command": [
                        "apply IHx2; auto.",
                        "VernacExtend",
                        "eb3d7eed0272625bfcb8f7060d72e699d61290ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_cong",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply comp_cong0; auto.",
                        "VernacExtend",
                        "c9f99102ff7340ff3d1d40eac04b149b4df67ae3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_comp1",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct b; apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "be3e6fcf0e4a807afcf8e63413f44ca90819d537"
                    ]
                },
                {
                    "command": [
                        "apply LeafNode_Ord; apply Node_Ord; auto.",
                        "VernacExtend",
                        "cacdc77d4a0e7f37531cb0f990028d4d3744be91"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_comp2",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct b; apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "be3e6fcf0e4a807afcf8e63413f44ca90819d537"
                    ]
                },
                {
                    "command": [
                        "apply NodeLeaf_Ord; apply Node_Ord; auto.",
                        "VernacExtend",
                        "9f7ce55317aab8a2eddc3fe45a89eade2e2488ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonicalUnique",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "intro c1; induction c1; simpl; intros; destruct H.",
                        "VernacExtend",
                        "225a37ddcad3d1f0b5b0a2058aff01b54079fd7d"
                    ]
                },
                {
                    "command": [
                        "destruct c2; invert_ord; destruct_bool; simpl in *; auto.",
                        "VernacExtend",
                        "1d104e43a1af64db90f8e2c38c5d5d813e953834"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "elim (geTrueFull c2_1); auto.",
                        "VernacExtend",
                        "541d14a59fcd1476fa27511fcbbdc4e321a846ed"
                    ]
                },
                {
                    "command": [
                        "elim (geTrueFull c2_1); auto.",
                        "VernacExtend",
                        "541d14a59fcd1476fa27511fcbbdc4e321a846ed"
                    ]
                },
                {
                    "command": [
                        "elim (geTrueFull c2_2); auto.",
                        "VernacExtend",
                        "22c27a407e422314cef04126ff94bcaabbe05c96"
                    ]
                },
                {
                    "command": [
                        "elim (geTrueFull c2_2); auto.",
                        "VernacExtend",
                        "22c27a407e422314cef04126ff94bcaabbe05c96"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "elim (leFalseEmpty c2_1); auto.",
                        "VernacExtend",
                        "c343bf657359266b939abcb00fdfc919abc2d78f"
                    ]
                },
                {
                    "command": [
                        "elim (leFalseEmpty c2_2); auto.",
                        "VernacExtend",
                        "62edcf312990dd644c0860f5223700a3e3f313f0"
                    ]
                },
                {
                    "command": [
                        "elim (leFalseEmpty c2_1); auto.",
                        "VernacExtend",
                        "c343bf657359266b939abcb00fdfc919abc2d78f"
                    ]
                },
                {
                    "command": [
                        "elim (leFalseEmpty c2_2); auto.",
                        "VernacExtend",
                        "62edcf312990dd644c0860f5223700a3e3f313f0"
                    ]
                },
                {
                    "command": [
                        "destruct c2; invert_ord; destruct_bool; simpl in *; auto.",
                        "VernacExtend",
                        "1d104e43a1af64db90f8e2c38c5d5d813e953834"
                    ]
                },
                {
                    "command": [
                        "replace c2_1 with c1_1.",
                        "VernacExtend",
                        "f4bfc80ad4f2f36a4b4c8c1e758f614ca3dcdd04"
                    ]
                },
                {
                    "command": [
                        "replace c2_2 with c1_2; auto.",
                        "VernacExtend",
                        "265931e0b59d9b4e2591323a7afbdf0caca51c4d"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_test2",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "intros; apply canonicalUnique; auto.",
                        "VernacExtend",
                        "065c018f25407cfa9df0f08d443b80d1e8fd0ae4"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with x; auto.",
                        "VernacExtend",
                        "98331a1581a9b1dede6726cb5989e6492d0146fc"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym; auto.",
                        "VernacExtend",
                        "6e948f494b6c4559f8b39f256b7653ba86d61870"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with y; auto.",
                        "VernacExtend",
                        "6ffd2c4b88bcc644012b60b38c3f12b108f4567b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_inv",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros.",
                        "VernacExtend",
                        "651d671a1d9148684b6a564fbcd0e8bdc7318584"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "invert_ord; auto; try discriminate.",
                        "VernacExtend",
                        "c86d47db530ebc160c9ada770deb80fa17f3f1bb"
                    ]
                },
                {
                    "command": [
                        "invert_ord; destruct H; auto.",
                        "VernacExtend",
                        "dc298365114aee0f6bcbb139528bfcf3ae420f81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_empty",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; destruct_bool; try discriminate; intuition.",
                        "VernacExtend",
                        "5663e3e39ebc5c8983e948da4177ad655a15aea3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_empty1",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; try discriminate; auto.",
                        "VernacExtend",
                        "62753743b1a0bc56c80908f0614a022ef3280cf2"
                    ]
                },
                {
                    "command": [
                        "intuition; eauto.",
                        "VernacExtend",
                        "fc07a008877a7fefaf8071071d531ca5f5163c56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_empty2",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl in *; auto.",
                        "VernacExtend",
                        "769f1856eb2e5aacd04742a52af64bbb77441c45"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "intuition; eauto.",
                        "VernacExtend",
                        "fc07a008877a7fefaf8071071d531ca5f5163c56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_full1",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; destruct_bool; try discriminate; intuition.",
                        "VernacExtend",
                        "5663e3e39ebc5c8983e948da4177ad655a15aea3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_full2",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; destruct_bool; try discriminate; simpl; intuition.",
                        "VernacExtend",
                        "2395647a28ebbc511e214c4919b304d29af3182b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_full",
            "line_nb": 343,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "rewrite IHa1; rewrite IHa2; auto.",
                        "VernacExtend",
                        "673660442d6ce3ed5ef6eb313ee4636279160672"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_almost_canon",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; destruct_bool; auto.",
                        "VernacExtend",
                        "fb6e5875d0ce38bc8baf864113d5d3bacde0fbf2"
                    ]
                },
                {
                    "command": [
                        "intuition auto.",
                        "VernacExtend",
                        "51e4da273bc2a464ad12897a5a8769bb8257393a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_cong",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; repeat econstructor; auto.",
                        "VernacExtend",
                        "3d120ff115bf2cf8aba7ebe8149af35fea9a4d64"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_intersect",
            "line_nb": 366,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "rewrite IHa1; rewrite IHa2; auto.",
                        "VernacExtend",
                        "673660442d6ce3ed5ef6eb313ee4636279160672"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_union",
            "line_nb": 371,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; auto.",
                        "VernacExtend",
                        "df08f693a2e674057e2042f75c0208da84f43573"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "rewrite IHa1; rewrite IHa2; auto.",
                        "VernacExtend",
                        "673660442d6ce3ed5ef6eb313ee4636279160672"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_assoc",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx1.",
                        "VernacExtend",
                        "f2fa323c902a3b8fdcf3a5ded04c1bd3b9307488"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx2.",
                        "VernacExtend",
                        "b73e492de40bc9fcd32f8bfe0c84c8f8d7f20948"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fill_app",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "induction c1; simpl; intros.",
                        "VernacExtend",
                        "a2b63e44a6c98449045bbc312371eee38702e2bc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHc1_1.",
                        "VernacExtend",
                        "357e6d3b1825771e2c91e20582eaf34e6174a552"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHc1_2.",
                        "VernacExtend",
                        "f5eaeaf51aceff67ceb1fd7688e48840b6de8f60"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "rewrite IHc1; auto.",
                        "VernacExtend",
                        "f4b694cb7b5363005ac44ee6fed8826a0b72e88e"
                    ]
                },
                {
                    "command": [
                        "rewrite IHc1; auto.",
                        "VernacExtend",
                        "f4b694cb7b5363005ac44ee6fed8826a0b72e88e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fill_id",
            "line_nb": 395,
            "steps": [
                {
                    "command": [
                        "induction x; simpl; intros.",
                        "VernacExtend",
                        "691cd388c95cc3e8c35c6d5a814b368270d6121e"
                    ]
                },
                {
                    "command": [
                        "destruct c; simpl in *; auto; discriminate.",
                        "VernacExtend",
                        "939016b5c3905be7cbfeaef41d8e0139a0604646"
                    ]
                },
                {
                    "command": [
                        "destruct c; auto; simpl in *.",
                        "VernacExtend",
                        "842482e05a9ff8558e1d29561c1234b270d46a66"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "replace (fill c1 (Node x1 x2)) with (fill (Sctx_app c1 (NodeL Hole x2)) x1) in H1.",
                        "VernacExtend",
                        "758561857db9395759b16c3f89e6b0afa649b4b3"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx1 _ H1).",
                        "VernacExtend",
                        "d31f60d5444c0ad35b7ec8bad9e0b2ceafb8ed73"
                    ]
                },
                {
                    "command": [
                        "destruct c1; simpl; intros; discriminate.",
                        "VernacExtend",
                        "d5eb986ef39e991a26c73ea9f25a6628981ed5d1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fill_app; simpl; auto.",
                        "VernacExtend",
                        "927544c3b77ca615c84f19f4b541a44ec33355c7"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "replace (fill c (Node x1 x2)) with (fill (Sctx_app c (NodeR x1 Hole)) x2) in H2.",
                        "VernacExtend",
                        "4112dd82a0b03abc0a2b98de6009e088d5440ef9"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx2 _ H2).",
                        "VernacExtend",
                        "34c32b0772e6c50d89806bb3211ae04b41ff21fe"
                    ]
                },
                {
                    "command": [
                        "destruct c; simpl; intros; discriminate.",
                        "VernacExtend",
                        "7598358ebf7a2eedf213bd0e806ba8b96729fffa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fill_app; simpl; auto.",
                        "VernacExtend",
                        "927544c3b77ca615c84f19f4b541a44ec33355c7"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "replace (fill c (Node x1 x2)) with (fill (Sctx_app c (NodeL Hole x2)) x1) in H1.",
                        "VernacExtend",
                        "2e47d419a554b6f621ecc0dce0ffdd260669d951"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx1 _ H1).",
                        "VernacExtend",
                        "d31f60d5444c0ad35b7ec8bad9e0b2ceafb8ed73"
                    ]
                },
                {
                    "command": [
                        "destruct c; simpl; intros; discriminate.",
                        "VernacExtend",
                        "7598358ebf7a2eedf213bd0e806ba8b96729fffa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fill_app; simpl; auto.",
                        "VernacExtend",
                        "927544c3b77ca615c84f19f4b541a44ec33355c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_Sctx",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "revert a.",
                        "VernacExtend",
                        "fca7ebc0dc4b29d6f26200e75bd08d5f5c664dc2"
                    ]
                },
                {
                    "command": [
                        "refine (fix f (a:ShareTree) {struct a} : nonEmptyTree a -> Sctx := match a as a' return nonEmptyTree a' -> Sctx with | Leaf true => fun H => Hole | Leaf false => fun H => False_rec _ _ | Node l r => fun H => match nonEmpty_dec l, nonEmpty_dec r with | left Hl, left Hr => NodeB (f l Hl) (f r Hr) | left Hl, right _ => NodeL (f l Hl) r | right _ , left Hr => NodeR l (f r Hr) | right Hl, right Hr => False_rec _ _ end end).",
                        "VernacExtend",
                        "980942db3c041814f89e86a9a48ce66fa1c62ba6"
                    ]
                },
                {
                    "command": [
                        "simpl in H; discriminate.",
                        "VernacExtend",
                        "e40837f5a952b53108ebf0b06936eed5990336f7"
                    ]
                },
                {
                    "command": [
                        "simpl in H; intuition.",
                        "VernacExtend",
                        "5ffe37021be37b02cc584ea27050e65e893e8fa1"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "relativ_to_Sctx",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "induction a; simpl.",
                        "VernacExtend",
                        "83046760be90957e25a4b343bcfdb8eb6df65d17"
                    ]
                },
                {
                    "command": [
                        "destruct b; intros; try discriminate.",
                        "VernacExtend",
                        "ad875af8c3ae8ed0aa4deb2409d11f597755be97"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (nonEmpty_dec a1); destruct (nonEmpty_dec a2); simpl.",
                        "VernacExtend",
                        "8989c06b582baa468fe3702763d4fe088441f839"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa1; rewrite <- IHa2; auto.",
                        "VernacExtend",
                        "bfca5705f789309fed00aaec0fa0d661ba641ddd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa1; auto.",
                        "VernacExtend",
                        "1b61b820bde90da634a4f53bd15f65d0c1e5f3a3"
                    ]
                },
                {
                    "command": [
                        "replace (relativ_tree a2 x) with a2; auto.",
                        "VernacExtend",
                        "fd4dc608f295ff291c7cee3569d456a443043a0b"
                    ]
                },
                {
                    "command": [
                        "clear -n0.",
                        "VernacExtend",
                        "2adf8a46316b43b808c2d8ef7869258368cc193e"
                    ]
                },
                {
                    "command": [
                        "induction a2; simpl.",
                        "VernacExtend",
                        "0643af016ede79181066b28c6e7882e0b8c4a270"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl in *; auto.",
                        "VernacExtend",
                        "769f1856eb2e5aacd04742a52af64bbb77441c45"
                    ]
                },
                {
                    "command": [
                        "elim n0; auto.",
                        "VernacExtend",
                        "50f0b26ed6b37ffb4a92b51ccee093e13841cd08"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa2_1.",
                        "VernacExtend",
                        "ab90a8b05f7df486bb7bd4f0ab5d8c65c4a9befc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa2_2; auto.",
                        "VernacExtend",
                        "03817c1128dce308bd018b4e96438457cb16669f"
                    ]
                },
                {
                    "command": [
                        "intro; apply n0; simpl; auto.",
                        "VernacExtend",
                        "cdc621b2d903781042940a3f14667194dc2258a7"
                    ]
                },
                {
                    "command": [
                        "intro; apply n0; simpl; auto.",
                        "VernacExtend",
                        "cdc621b2d903781042940a3f14667194dc2258a7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa2.",
                        "VernacExtend",
                        "93348a83dede8074f980f4a37010a14cf722b24d"
                    ]
                },
                {
                    "command": [
                        "replace (relativ_tree a1 x) with a1; auto.",
                        "VernacExtend",
                        "37306d1e377a9913f69a4525cb6628924f944030"
                    ]
                },
                {
                    "command": [
                        "clear -n.",
                        "VernacExtend",
                        "dba3a0d51422f97b7ce2c4622304c94095b6610d"
                    ]
                },
                {
                    "command": [
                        "induction a1; simpl.",
                        "VernacExtend",
                        "e271a9ab8d587688e84656b340c7920bde887cd7"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl in *; auto.",
                        "VernacExtend",
                        "769f1856eb2e5aacd04742a52af64bbb77441c45"
                    ]
                },
                {
                    "command": [
                        "elim n; auto.",
                        "VernacExtend",
                        "3a8caa8ad55d0caef05cad9a8edac9567ac3fef6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa1_1.",
                        "VernacExtend",
                        "07fc818a7c95d6697c300b670557a24a27713b6b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHa1_2; auto.",
                        "VernacExtend",
                        "61235703881176f5663536774c2bea574f576f4c"
                    ]
                },
                {
                    "command": [
                        "intro; apply n; simpl; auto.",
                        "VernacExtend",
                        "db16cfa4351407999974e64ea76b47c0f7666a30"
                    ]
                },
                {
                    "command": [
                        "intro; apply n; simpl; auto.",
                        "VernacExtend",
                        "db16cfa4351407999974e64ea76b47c0f7666a30"
                    ]
                },
                {
                    "command": [
                        "elimtype False; intuition.",
                        "VernacExtend",
                        "fcefeecff54e1c0b57363d5b3614012ad7396864"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_stupid1",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nonEmptyTree a).",
                        "VernacExtend",
                        "214a50cffa4d8b98e81f7e76649c601035e5f57a"
                    ]
                },
                {
                    "command": [
                        "apply relativ_empty1 with (Node x y).",
                        "VernacExtend",
                        "f010d73c625eb7f86dca37e44aee6ac570338a90"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; auto.",
                        "VernacExtend",
                        "075413acf92795f866dc4a2ff39c7d41ef0fda3f"
                    ]
                },
                {
                    "command": [
                        "rewrite (relativ_to_Sctx a (Node x y) H1) in H0.",
                        "VernacExtend",
                        "f69ef78fcd3a7183aca78460de1cc3168f5fe7fd"
                    ]
                },
                {
                    "command": [
                        "replace (fill (to_Sctx a H1) (Node x y)) with (fill (Sctx_app (to_Sctx a H1) (NodeL Hole y)) x) in H0.",
                        "VernacExtend",
                        "1f1a3f744f97e4d5d0d17bc66a4c7e12382f977d"
                    ]
                },
                {
                    "command": [
                        "symmetry in H0.",
                        "VernacExtend",
                        "6a4628a15502c5c72b4290e332e792b1559a4eae"
                    ]
                },
                {
                    "command": [
                        "generalize (fill_id _ _ H0).",
                        "VernacExtend",
                        "0f6db8203229d0f72d27eb37938503695cf29e8c"
                    ]
                },
                {
                    "command": [
                        "destruct (to_Sctx a H1); simpl; intros; discriminate.",
                        "VernacExtend",
                        "21d1e39d40a16ae666a0b40dd13349568404282e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fill_app; auto.",
                        "VernacExtend",
                        "d7de1cf1f20f81731ac2fcd04d265070b0041541"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_stupid2",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nonEmptyTree a).",
                        "VernacExtend",
                        "214a50cffa4d8b98e81f7e76649c601035e5f57a"
                    ]
                },
                {
                    "command": [
                        "apply relativ_empty1 with (Node x y).",
                        "VernacExtend",
                        "f010d73c625eb7f86dca37e44aee6ac570338a90"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; auto.",
                        "VernacExtend",
                        "075413acf92795f866dc4a2ff39c7d41ef0fda3f"
                    ]
                },
                {
                    "command": [
                        "rewrite (relativ_to_Sctx a (Node x y) H1) in H0.",
                        "VernacExtend",
                        "f69ef78fcd3a7183aca78460de1cc3168f5fe7fd"
                    ]
                },
                {
                    "command": [
                        "replace (fill (to_Sctx a H1) (Node x y)) with (fill (Sctx_app (to_Sctx a H1) (NodeR x Hole)) y) in H0.",
                        "VernacExtend",
                        "70306aec64a2b49bcd7fb9ddf3dd258fa9e49e18"
                    ]
                },
                {
                    "command": [
                        "symmetry in H0.",
                        "VernacExtend",
                        "6a4628a15502c5c72b4290e332e792b1559a4eae"
                    ]
                },
                {
                    "command": [
                        "generalize (fill_id _ _ H0).",
                        "VernacExtend",
                        "0f6db8203229d0f72d27eb37938503695cf29e8c"
                    ]
                },
                {
                    "command": [
                        "destruct (to_Sctx a H1); simpl; intros; discriminate.",
                        "VernacExtend",
                        "21d1e39d40a16ae666a0b40dd13349568404282e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fill_app; auto.",
                        "VernacExtend",
                        "d7de1cf1f20f81731ac2fcd04d265070b0041541"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_stupid3",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nonEmptyTree (Node a1 a2)).",
                        "VernacExtend",
                        "b08fe1964ce92aafe57f13bb6d1a4a092fc5248e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0 in H.",
                        "VernacExtend",
                        "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "left; apply relativ_empty1 with x; auto.",
                        "VernacExtend",
                        "488083d6a15fda9543eeb6ef7a4ce888d18d1605"
                    ]
                },
                {
                    "command": [
                        "right; apply relativ_empty1 with x; auto.",
                        "VernacExtend",
                        "ca94a20d262e7a911c1528faef69a0319d481a1c"
                    ]
                },
                {
                    "command": [
                        "rewrite (relativ_to_Sctx (Node a1 a2) x H1) in H0.",
                        "VernacExtend",
                        "7d41c7e16ac7a71623a686acd8481cbe06d1bd7b"
                    ]
                },
                {
                    "command": [
                        "generalize (fill_id _ _ H0).",
                        "VernacExtend",
                        "0f6db8203229d0f72d27eb37938503695cf29e8c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (nonEmpty_dec a1); destruct (nonEmpty_dec a2); intros; try discriminate.",
                        "VernacExtend",
                        "3f6efdbf6b752017d87d010e541e2497083b1e43"
                    ]
                },
                {
                    "command": [
                        "clear H0 H2.",
                        "VernacExtend",
                        "3e81cdc55a874282fd1819ec8763024804106b9f"
                    ]
                },
                {
                    "command": [
                        "simpl in H1; destruct H1; auto.",
                        "VernacExtend",
                        "a190281a735f8aa03a5584e63d8fd3a4067d1b72"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_inv2",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "induction a1; intros.",
                        "VernacExtend",
                        "e64f2f70d3812ad514fee8878901770828151a66"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl in *.",
                        "VernacExtend",
                        "a9cbaf83ab780427b6902f023e4ed930b7d2ec3c"
                    ]
                },
                {
                    "command": [
                        "revert a2 H0.",
                        "VernacExtend",
                        "214f9b76aba115100a9bbdee7a20672a5bd7535a"
                    ]
                },
                {
                    "command": [
                        "induction x; simpl in *.",
                        "VernacExtend",
                        "975724fbbdbe8b2c449f32e0c13ef4b066faaee4"
                    ]
                },
                {
                    "command": [
                        "subst b; simpl; intros.",
                        "VernacExtend",
                        "fa6b9e58bfb259bb23fda2c4384f61214f7536a3"
                    ]
                },
                {
                    "command": [
                        "destruct a2; simpl in *.",
                        "VernacExtend",
                        "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct a2; simpl in *.",
                        "VernacExtend",
                        "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "injection H0; intros.",
                        "VernacExtend",
                        "8c8542f86b66e8ddb2aa325769b955b474d42042"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "elim relativ_stupid1 with x1 x2 a2_1; auto.",
                        "VernacExtend",
                        "e34426ad7e93c2e9791185daad99e566a05db806"
                    ]
                },
                {
                    "command": [
                        "elim relativ_stupid2 with x1 x2 a2_2; auto.",
                        "VernacExtend",
                        "8586ffe38b1d709231ebc181ff1b52399d30b6fb"
                    ]
                },
                {
                    "command": [
                        "destruct a2; simpl in *.",
                        "VernacExtend",
                        "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "subst x; simpl in H; discriminate.",
                        "VernacExtend",
                        "ea00c883f16b5f7951274957372a5264ef6fcc11"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "destruct a2; simpl in *.",
                        "VernacExtend",
                        "7a7e15adb06e952d3f1b022e8f39edb7099ed4ab"
                    ]
                },
                {
                    "command": [
                        "destruct b; try discriminate.",
                        "VernacExtend",
                        "e59df6528a2cbe547c4838c8ebb828505d9c1c96"
                    ]
                },
                {
                    "command": [
                        "elimtype False; clear -H H0.",
                        "VernacExtend",
                        "6d216c5c12203dc117d3723cabf63e738a2ca48a"
                    ]
                },
                {
                    "command": [
                        "revert H0.",
                        "VernacExtend",
                        "de3e4fca453928a41c450906d5d5626d573cfb55"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply (relativ_stupid3 _ _ _ H H0).",
                        "VernacExtend",
                        "efa6aaf14bc68b614a2ed1536cbd0e44b92790da"
                    ]
                },
                {
                    "command": [
                        "injection H0; intros.",
                        "VernacExtend",
                        "8c8542f86b66e8ddb2aa325769b955b474d42042"
                    ]
                },
                {
                    "command": [
                        "rewrite IHa1_1 with a2_1 x; auto.",
                        "VernacExtend",
                        "e73987d1d73f3a343b5c38789fdec1d6e5937b93"
                    ]
                },
                {
                    "command": [
                        "rewrite IHa1_2 with a2_2 x; auto.",
                        "VernacExtend",
                        "44c26dd8fc0364c74f3b12d5884a507d7bd25083"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shareTree_dec_eq",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "decide equality; apply bool_dec.",
                        "VernacExtend",
                        "8617ec074f2c9d94d9e21ad528299c7ab3b06e62"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_eq",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x as [x Hx].",
                        "VernacExtend",
                        "ec3ff52cb5579022ab60d608e44d3ef315c32051"
                    ]
                },
                {
                    "command": [
                        "destruct y as [y Hy].",
                        "VernacExtend",
                        "a47221c03c35c055b3c95e06d58b746540a92e9b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "subst y.",
                        "VernacExtend",
                        "f056a00b852bc549d1b8bb21d500c90d8ff37bf8"
                    ]
                },
                {
                    "command": [
                        "replace Hy with Hx by apply proof_irr; auto.",
                        "VernacExtend",
                        "d14a108a592c919f134a4a4790c361b4d382b62c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_eq_dec",
            "line_nb": 533,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x as [x Hx].",
                        "VernacExtend",
                        "ec3ff52cb5579022ab60d608e44d3ef315c32051"
                    ]
                },
                {
                    "command": [
                        "destruct y as [y Hy].",
                        "VernacExtend",
                        "a47221c03c35c055b3c95e06d58b746540a92e9b"
                    ]
                },
                {
                    "command": [
                        "destruct (shareTree_dec_eq x y); [ left | right ].",
                        "VernacExtend",
                        "dae2514a24e1e23ede09c11500f3241a1b870b84"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "red; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "injection H.",
                        "VernacExtend",
                        "0b4168b75c87f7c322bfb81e661f04001b54052d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "comp_tree_inv",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "induction t; simpl; intros; try destruct_bool; auto.",
                        "VernacExtend",
                        "3d24a8e32cc8a3cfabab1141667a5751710c6676"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt1; rewrite IHt2; auto.",
                        "VernacExtend",
                        "257827d976e142de9a46d013987914bb3f6475ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_full_empty",
            "line_nb": 548,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros; destruct_bool; intuition.",
                        "VernacExtend",
                        "b6898cb27b48a416ee8f6d23970d2e644bde9a92"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_empty_full",
            "line_nb": 551,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros; destruct_bool; intuition.",
                        "VernacExtend",
                        "b6898cb27b48a416ee8f6d23970d2e644bde9a92"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_canonical",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "intro x; induction x; simpl; intros; intuition.",
                        "VernacExtend",
                        "e12970453ca0c64013870699c71cb843f50dba44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ord_refl",
            "line_nb": 566,
            "steps": [
                {
                    "command": [
                        "intros [x Hx]; unfold Ord; simpl.",
                        "VernacExtend",
                        "330bd3c5756e4b02ce4af6addf8e347a9c47d11d"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "59311386889bd5783efd51817785a54d1e894e50"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ord_trans",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "6082d07fb7671630c841a3b594569917e4d38802"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with y; auto.",
                        "VernacExtend",
                        "f0e5cdd38896baafbca02a25101393d12af09089"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ord_antisym",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; try split; auto.",
                        "VernacExtend",
                        "a821562f7fb6288e03e5f424edda157de237ca52"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lub_upper1",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (union_tree x y)).",
                        "VernacExtend",
                        "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree x y); auto.",
                        "VernacExtend",
                        "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lub_upper2",
            "line_nb": 585,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (union_tree x y)).",
                        "VernacExtend",
                        "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree x y); auto.",
                        "VernacExtend",
                        "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute.",
                        "VernacExtend",
                        "d885c24d3f94d08eb13f83b39d536446e5905fb9"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lub_least",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "6082d07fb7671630c841a3b594569917e4d38802"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (union_tree x y)).",
                        "VernacExtend",
                        "761fd5c1f62b066f17ba52c99bfac6723f1ccb42"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree x y); auto.",
                        "VernacExtend",
                        "9ae6fa8c082cda65926899fcd7275b1de44cafcf"
                    ]
                },
                {
                    "command": [
                        "apply union_least_bound; auto.",
                        "VernacExtend",
                        "c1a97d8b4d34ca91ae4bbcf25c7193ad58383f3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "glb_lower1",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (intersect_tree x y)).",
                        "VernacExtend",
                        "cc63c9d8e8cf26c06baca6ee932fade14319d134"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
                        "VernacExtend",
                        "6adbe975989989899a34749e279bfa4f9b2ff302"
                    ]
                },
                {
                    "command": [
                        "apply intersection_lower_bound.",
                        "VernacExtend",
                        "d70ff6da5fe9ed65e32a7aa167f6dcc8536ff011"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "glb_lower2",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "7a7628afc6bacefa21d220fdab576d59b03fcb1d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (intersect_tree x y)).",
                        "VernacExtend",
                        "cc63c9d8e8cf26c06baca6ee932fade14319d134"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
                        "VernacExtend",
                        "6adbe975989989899a34749e279bfa4f9b2ff302"
                    ]
                },
                {
                    "command": [
                        "rewrite intersect_commute.",
                        "VernacExtend",
                        "1c8be1142858e888bf6e427763320641dd139023"
                    ]
                },
                {
                    "command": [
                        "apply intersection_lower_bound.",
                        "VernacExtend",
                        "d70ff6da5fe9ed65e32a7aa167f6dcc8536ff011"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "glb_greatest",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "intros [x Hx] [y Hy] [z Hz]; unfold Ord; simpl; intros.",
                        "VernacExtend",
                        "6082d07fb7671630c841a3b594569917e4d38802"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_eq (intersect_tree x y)).",
                        "VernacExtend",
                        "cc63c9d8e8cf26c06baca6ee932fade14319d134"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (intersect_tree x y); auto.",
                        "VernacExtend",
                        "6adbe975989989899a34749e279bfa4f9b2ff302"
                    ]
                },
                {
                    "command": [
                        "apply intersection_greatest_bound; auto.",
                        "VernacExtend",
                        "3029091d54a9f21b8bf2b6ceca0b4a5812342388"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "top_correct",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "intros [x Hx]; unfold Ord; simpl; auto.",
                        "VernacExtend",
                        "0e1b44797f39b193edc04bf0210e0a5cafd2d49b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bot_correct",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "intros [x Hx]; unfold Ord; simpl; auto.",
                        "VernacExtend",
                        "0e1b44797f39b193edc04bf0210e0a5cafd2d49b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nontrivial",
            "line_nb": 643,
            "steps": [
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel",
            "line_nb": 670,
            "steps": [
                {
                    "command": [
                        "case_eq (proj1_sig x); intros.",
                        "VernacExtend",
                        "b060536d9539fa39b5a33c7dbddbcf8dffb2da7e"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "exact a.",
                        "VernacExtend",
                        "22ff3beb9eb73525898c3fe8426139b9069c03e7"
                    ]
                },
                {
                    "command": [
                        "exact (exist (fun t => canonicalTree t) (Leaf false) I).",
                        "VernacExtend",
                        "b6171ee214edc788fe5d3c97a6dc036647e9fe01"
                    ]
                },
                {
                    "command": [
                        "refine (exist _ (relativ_tree (proj1_sig a) (proj1_sig x)) _).",
                        "VernacExtend",
                        "73fc441472c527943ed71f1a06da7330b278f114"
                    ]
                },
                {
                    "command": [
                        "apply relativ_almost_canon.",
                        "VernacExtend",
                        "489c0c32dcfde3b7f4eae05657a702611f4a761d"
                    ]
                },
                {
                    "command": [
                        "apply (proj2_sig a).",
                        "VernacExtend",
                        "6c95188e6b1668fd521aa6f2a28b90647a352ad3"
                    ]
                },
                {
                    "command": [
                        "apply (proj2_sig x).",
                        "VernacExtend",
                        "1c2182c52877b31b0dabde06babedc0a9f1cae8d"
                    ]
                },
                {
                    "command": [
                        "destruct x; simpl in *; subst; simpl in *; intuition.",
                        "VernacExtend",
                        "03c9f71f065e5df43bfdd86e5829b2bba35b0375"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "relativ_tree_empty",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros.",
                        "VernacExtend",
                        "651d671a1d9148684b6a564fbcd0e8bdc7318584"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "intuition; eauto.",
                        "VernacExtend",
                        "fc07a008877a7fefaf8071071d531ca5f5163c56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relativ_tree_nonid",
            "line_nb": 686,
            "steps": [
                {
                    "command": [
                        "induction a; simpl; intros; try destruct_bool; try discriminate.",
                        "VernacExtend",
                        "d38617476f834350d9794dfa5087301f29cdc83b"
                    ]
                },
                {
                    "command": [
                        "injection H0; clear H0; intros.",
                        "VernacExtend",
                        "c784b8ede908323a0e86176f63b0719f5c8eec6d"
                    ]
                },
                {
                    "command": [
                        "intuition; eauto.",
                        "VernacExtend",
                        "fc07a008877a7fefaf8071071d531ca5f5163c56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_classification",
            "line_nb": 691,
            "steps": [
                {
                    "command": [
                        "intros [a ?] [x ?].",
                        "VernacExtend",
                        "7bbd17960873943efe31884c1f5a03b1a68003c7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct x; try destruct_bool; simpl.",
                        "VernacExtend",
                        "df8331bf187403413c8bccd6717849009b419a32"
                    ]
                },
                {
                    "command": [
                        "right; split.",
                        "VernacExtend",
                        "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
                    ]
                },
                {
                    "command": [
                        "red; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "discriminate H.",
                        "VernacExtend",
                        "f00d7179963a09be7462e0ca3723e1bc13cd6c39"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite relativ_full; auto.",
                        "VernacExtend",
                        "ce971bb8f28baab003937a035ba77f4174325255"
                    ]
                },
                {
                    "command": [
                        "split; intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "injection H; clear H; intros.",
                        "VernacExtend",
                        "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
                    ]
                },
                {
                    "command": [
                        "subst a.",
                        "VernacExtend",
                        "d7670e5f9c196bd417b16b29da3532f33d34884d"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "injection H; auto.",
                        "VernacExtend",
                        "98b10cc71270f203eeea844ff97dc3dbc3665ef4"
                    ]
                },
                {
                    "command": [
                        "left; split; auto.",
                        "VernacExtend",
                        "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; auto.",
                        "VernacExtend",
                        "0faa9968474d42ef4b1c30502cfd28c68610cd31"
                    ]
                },
                {
                    "command": [
                        "right; split.",
                        "VernacExtend",
                        "7f40e6faa2e8d6f2ee2a39b745aa28054e5d87de"
                    ]
                },
                {
                    "command": [
                        "red; intros; discriminate.",
                        "VernacExtend",
                        "3dc8cab2ad5f5b0f8cdd0c668624cfd3367c3237"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "split; intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "injection H; clear H; intros.",
                        "VernacExtend",
                        "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "injection H; clear H; intros.",
                        "VernacExtend",
                        "a679d5e74c45d7a5e8fd6b426e4fbe4a1b9561f7"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "destruct a; simpl in *; destruct_bool; auto; try discriminate.",
                        "VernacExtend",
                        "aae3d93c73a570aa9b5be7e546cdff61bc858d47"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "rel_inj_r",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a1 x); intuition.",
                        "VernacExtend",
                        "b1762716d1d8bc6871c18f82c6d68782db846ae9"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a2 x); intuition.",
                        "VernacExtend",
                        "dfe095e4a994c8c0901183f95026aadbd2779212"
                    ]
                },
                {
                    "command": [
                        "apply relativ_inv2 with (proj1_sig x); auto.",
                        "VernacExtend",
                        "0166361a4cbd3dfe763a86e98c0fc7c7963aba94"
                    ]
                },
                {
                    "command": [
                        "destruct x; simpl.",
                        "VernacExtend",
                        "b0c3c03e2d0a8fa13c533c8a79c2c6b3067d60db"
                    ]
                },
                {
                    "command": [
                        "destruct x; simpl.",
                        "VernacExtend",
                        "b0c3c03e2d0a8fa13c533c8a79c2c6b3067d60db"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "elim H; simpl.",
                        "VernacExtend",
                        "dfbf07a7200e42447d91e7ea96ed257d1ba45228"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; auto.",
                        "VernacExtend",
                        "0faa9968474d42ef4b1c30502cfd28c68610cd31"
                    ]
                },
                {
                    "command": [
                        "generalize c; simpl; intuition.",
                        "VernacExtend",
                        "d5d57ed420a7597fbc43b04174efb13a6b96ffa5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H7.",
                        "VernacExtend",
                        "15eb34513c3298e9d5b8731fdb6616cb0a4f6a80"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_inj_l",
            "line_nb": 736,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "destruct a as [a ?]; destruct x as [x ?]; destruct y as [y ?]; simpl.",
                        "VernacExtend",
                        "2d5cf70d0808fc3b378a7a505c34197a9c999231"
                    ]
                },
                {
                    "command": [
                        "assert (nonEmptyTree a).",
                        "VernacExtend",
                        "214a50cffa4d8b98e81f7e76649c601035e5f57a"
                    ]
                },
                {
                    "command": [
                        "destruct a; simpl in *.",
                        "VernacExtend",
                        "f16ce63ce10cf4add043d122c2aa557e3f699d02"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "elim H; apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "63084b74270f84394092c3da0614871bea6683b1"
                    ]
                },
                {
                    "command": [
                        "decompose [and] c; auto.",
                        "VernacExtend",
                        "886caa280b06b1b057e96447439ebff680472255"
                    ]
                },
                {
                    "command": [
                        "unfold rel in *; simpl in *.",
                        "VernacExtend",
                        "038fe3ed321a3e5598e9985c1d5f133f0d97db55"
                    ]
                },
                {
                    "command": [
                        "destruct x; destruct y; destruct_bool; auto; injection H0; clear H0; try congruence; intros.",
                        "VernacExtend",
                        "be54974c20c4f2fe742a7acef2e3c82194ac83c9"
                    ]
                },
                {
                    "command": [
                        "elim (relativ_tree_nonid a y1 y2); auto.",
                        "VernacExtend",
                        "ef0124215e8e0e50ba8919891a581bf3295a5c61"
                    ]
                },
                {
                    "command": [
                        "simpl in c1; decompose [and] c1.",
                        "VernacExtend",
                        "03f1bbc842fe33771f4470a1ed06bf247dbc2f08"
                    ]
                },
                {
                    "command": [
                        "generalize (relativ_tree_empty a (Node y1 y2) H1 H4).",
                        "VernacExtend",
                        "e04bcf7bd6a788ed139cebe8e7fe6aff84da3e3b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; simpl; intros; discriminate.",
                        "VernacExtend",
                        "8c75ba11f4444f5cd4c60eba91bedb5af8f7120f"
                    ]
                },
                {
                    "command": [
                        "elim (relativ_tree_nonid a x1 x2); auto.",
                        "VernacExtend",
                        "18eb42cbe7e219a78c5b3d49eb395d2e5d23e5e1"
                    ]
                },
                {
                    "command": [
                        "simpl in c0; decompose [and] c0.",
                        "VernacExtend",
                        "a8c133f698bc59241a976b2bae21cfbe50af9c40"
                    ]
                },
                {
                    "command": [
                        "generalize (relativ_tree_empty a (Node x1 x2) H1 H4).",
                        "VernacExtend",
                        "5cadfbf1a9df583571226e002de6b461ea6c8e94"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; simpl; intros; discriminate.",
                        "VernacExtend",
                        "79f43733c0888865e85160489ef6abf949542925"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "split; apply relativ_inv with a; auto; rewrite H0; apply shareTreeOrd_refl.",
                        "VernacExtend",
                        "aa0ef7578e3608f795242efaef6ab21fefae36e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_assoc",
            "line_nb": 758,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification x (rel y z)); intuition.",
                        "VernacExtend",
                        "e78bc5a96ffd7a3eb0d1605a27196000ce1737c9"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification (rel x y) z); intuition.",
                        "VernacExtend",
                        "ae318d866b44e234df7b4453ec5e25dfc2985acc"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification x y); intuition.",
                        "VernacExtend",
                        "20e9d4a034ed0204c31c5f9f2c057a0eb303fa41"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; auto.",
                        "VernacExtend",
                        "a4939b718312f015e111e05e9b001fd02d3063fd"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "rewrite H7.",
                        "VernacExtend",
                        "2b0de906e9dfacfe89c031c2266760d29b5450f6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- relativ_assoc.",
                        "VernacExtend",
                        "7c77002eafe473ac048de5bc46a73d40e1527870"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification y z); intuition.",
                        "VernacExtend",
                        "dd731f6942c46f5d74e3aa610a1c7ff0b613f04a"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification y z); intuition.",
                        "VernacExtend",
                        "dd731f6942c46f5d74e3aa610a1c7ff0b613f04a"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification (rel x y) z); intuition.",
                        "VernacExtend",
                        "ae318d866b44e234df7b4453ec5e25dfc2985acc"
                    ]
                },
                {
                    "command": [
                        "rewrite H9.",
                        "VernacExtend",
                        "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification x y); intuition.",
                        "VernacExtend",
                        "20e9d4a034ed0204c31c5f9f2c057a0eb303fa41"
                    ]
                },
                {
                    "command": [
                        "rewrite H13.",
                        "VernacExtend",
                        "bc2d32522e887645239b994008e234c058557cd9"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "apply relativ_assoc.",
                        "VernacExtend",
                        "be96e4c6165fd838ad055b1e9ba43f36c6d8ec2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_bot1",
            "line_nb": 781,
            "steps": [
                {
                    "command": [
                        "intros [a ?]; auto.",
                        "VernacExtend",
                        "86428ea795e5b7724498eed49ae40d4ae0adc83f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_bot2",
            "line_nb": 784,
            "steps": [
                {
                    "command": [
                        "intros e.",
                        "VernacExtend",
                        "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification bot e); intuition.",
                        "VernacExtend",
                        "cb4415526f793287cdbba64a8a82f99eb3293bf6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_top1",
            "line_nb": 788,
            "steps": [
                {
                    "command": [
                        "intros a.",
                        "VernacExtend",
                        "9fef235d1a71132a4c9de7f87ab95d540098d91d"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a top); intuition.",
                        "VernacExtend",
                        "f000c59eea5b2ada7d65f9f2a71597952d53b7c4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_top2",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "intro x.",
                        "VernacExtend",
                        "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification top x); intuition.",
                        "VernacExtend",
                        "6c20d169ea05ca024d9b5e46da56a7e9e8682bf8"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_preserves_glb",
            "line_nb": 800,
            "steps": [
                {
                    "command": [
                        "intros a x y.",
                        "VernacExtend",
                        "54c18a9ec1ae2ad7ded6b1c3c93da6947c7a7369"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a x); intuition.",
                        "VernacExtend",
                        "87e19c9cc76fc5b742376a6af27d72e7e4b4cb38"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_bot.",
                        "VernacExtend",
                        "38cb8b135187eca898aaebf9f330369f95b96cf4"
                    ]
                },
                {
                    "command": [
                        "rewrite rel_bot1.",
                        "VernacExtend",
                        "18bb18a652fee506842ba0a5e61c7d8344d0fb9f"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_bot.",
                        "VernacExtend",
                        "38cb8b135187eca898aaebf9f330369f95b96cf4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a y); intuition.",
                        "VernacExtend",
                        "e5c855cb769a6df5f5c450efe695699d2244c2b5"
                    ]
                },
                {
                    "command": [
                        "rewrite H4.",
                        "VernacExtend",
                        "fc5d011df68f7160e4669d129d2975825ac089bb"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_bot.",
                        "VernacExtend",
                        "38cb8b135187eca898aaebf9f330369f95b96cf4"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_bot.",
                        "VernacExtend",
                        "38cb8b135187eca898aaebf9f330369f95b96cf4"
                    ]
                },
                {
                    "command": [
                        "apply rel_bot1.",
                        "VernacExtend",
                        "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "rewrite <- relativ_intersect.",
                        "VernacExtend",
                        "497956f109e95a04ba225c51f8eb21e39b33db95"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a (glb x y)); intuition.",
                        "VernacExtend",
                        "0e272e7149c4585f470d349062dd79817dfee15b"
                    ]
                },
                {
                    "command": [
                        "rewrite H8.",
                        "VernacExtend",
                        "ef335154f8a1120928ddce71bc7a2456078d36bc"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "injection H6; intros.",
                        "VernacExtend",
                        "7becb392b34f9bb7c7f1d4d76b2b638b3f1f9aa4"
                    ]
                },
                {
                    "command": [
                        "apply (mkCanon_test2 (Leaf false)).",
                        "VernacExtend",
                        "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (relativ_tree (proj1_sig a) (Leaf false)).",
                        "VernacExtend",
                        "ba3d40e051acb5d38f24ca7511fdb2b222ea3707"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply emptyLeFalse.",
                        "VernacExtend",
                        "3939f158d07b4439b70583884e88cadf6d39f7d7"
                    ]
                },
                {
                    "command": [
                        "intro G.",
                        "VernacExtend",
                        "96942541382c43cade9bf717e8217e18207fb066"
                    ]
                },
                {
                    "command": [
                        "generalize (relativ_empty2 _ _ G); auto.",
                        "VernacExtend",
                        "cc070e9471d9db278344e8f4f76d638ab4016b40"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; discriminate.",
                        "VernacExtend",
                        "3d59504195c7deca6b10553f120fad45a6155eb6"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_test _ (Leaf false) H9).",
                        "VernacExtend",
                        "737b53e4100b9033d1ffed001d5e350b375b2c03"
                    ]
                },
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply relativ_cong; auto.",
                        "VernacExtend",
                        "5d134459eb23a49fb8dd103bd8d496d23e40c16b"
                    ]
                },
                {
                    "command": [
                        "rewrite H9.",
                        "VernacExtend",
                        "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite relativ_canon_commute; auto.",
                        "VernacExtend",
                        "d7c0eb122691415bf94fb0e79e0ec40c395b75eb"
                    ]
                },
                {
                    "command": [
                        "destruct a; auto.",
                        "VernacExtend",
                        "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
                    ]
                },
                {
                    "command": [
                        "destruct (nonEmpty_dec (intersect_tree (proj1_sig x) (proj1_sig y))); auto.",
                        "VernacExtend",
                        "6bb0533080c74eea9ae68dfd497c28e32781dba6"
                    ]
                },
                {
                    "command": [
                        "elim H6.",
                        "VernacExtend",
                        "37df90b4b62522e9f9376bbd0ca7d8f3c914a4a2"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply (mkCanon_test2 (Leaf false)).",
                        "VernacExtend",
                        "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply emptyLeFalse; auto.",
                        "VernacExtend",
                        "2c94baf2ddcd414eb7f992e5c1cb9a01c61e61d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_preserves_lub",
            "line_nb": 849,
            "steps": [
                {
                    "command": [
                        "intros a x y.",
                        "VernacExtend",
                        "54c18a9ec1ae2ad7ded6b1c3c93da6947c7a7369"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a x); intuition.",
                        "VernacExtend",
                        "87e19c9cc76fc5b742376a6af27d72e7e4b4cb38"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a y); intuition.",
                        "VernacExtend",
                        "e5c855cb769a6df5f5c450efe695699d2244c2b5"
                    ]
                },
                {
                    "command": [
                        "rewrite H4.",
                        "VernacExtend",
                        "fc5d011df68f7160e4669d129d2975825ac089bb"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq.",
                        "VernacExtend",
                        "b6814e490c9944e3365a134f606fa47d53c804aa"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "rewrite <- relativ_union.",
                        "VernacExtend",
                        "ba74dd068ce39173cf8b6a4ba9dce0d2131dd876"
                    ]
                },
                {
                    "command": [
                        "destruct (rel_classification a (lub x y)); intuition.",
                        "VernacExtend",
                        "ffcb7eeff1cd8351ac00a7a94e3154ffdd546051"
                    ]
                },
                {
                    "command": [
                        "rewrite H8.",
                        "VernacExtend",
                        "ef335154f8a1120928ddce71bc7a2456078d36bc"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "injection H6; intros.",
                        "VernacExtend",
                        "7becb392b34f9bb7c7f1d4d76b2b638b3f1f9aa4"
                    ]
                },
                {
                    "command": [
                        "apply (mkCanon_test2 (Leaf false)).",
                        "VernacExtend",
                        "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (relativ_tree (proj1_sig a) (Leaf false)).",
                        "VernacExtend",
                        "ba3d40e051acb5d38f24ca7511fdb2b222ea3707"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply emptyLeFalse.",
                        "VernacExtend",
                        "3939f158d07b4439b70583884e88cadf6d39f7d7"
                    ]
                },
                {
                    "command": [
                        "intro G.",
                        "VernacExtend",
                        "96942541382c43cade9bf717e8217e18207fb066"
                    ]
                },
                {
                    "command": [
                        "generalize (relativ_empty2 _ _ G).",
                        "VernacExtend",
                        "b0abe23bd38c86d7e24892658c946dbbef9814f1"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; discriminate.",
                        "VernacExtend",
                        "3d59504195c7deca6b10553f120fad45a6155eb6"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_test _ (Leaf false) H9).",
                        "VernacExtend",
                        "737b53e4100b9033d1ffed001d5e350b375b2c03"
                    ]
                },
                {
                    "command": [
                        "unfold shareTreeEq; intuition; apply relativ_cong; auto.",
                        "VernacExtend",
                        "5d134459eb23a49fb8dd103bd8d496d23e40c16b"
                    ]
                },
                {
                    "command": [
                        "rewrite H9.",
                        "VernacExtend",
                        "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite relativ_canon_commute; auto.",
                        "VernacExtend",
                        "d7c0eb122691415bf94fb0e79e0ec40c395b75eb"
                    ]
                },
                {
                    "command": [
                        "destruct a; auto.",
                        "VernacExtend",
                        "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
                    ]
                },
                {
                    "command": [
                        "destruct (nonEmpty_dec (union_tree (proj1_sig x) (proj1_sig y))); intros; auto.",
                        "VernacExtend",
                        "246b8177e7de1ffd8cee0471dc82bddfca70910e"
                    ]
                },
                {
                    "command": [
                        "elim H6.",
                        "VernacExtend",
                        "37df90b4b62522e9f9376bbd0ca7d8f3c914a4a2"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply (mkCanon_test2 (Leaf false)).",
                        "VernacExtend",
                        "059a3f4f470e711bdeaf7c52b2ca34f283a607f8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply emptyLeFalse; auto.",
                        "VernacExtend",
                        "2c94baf2ddcd414eb7f992e5c1cb9a01c61e61d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leftTree",
            "line_nb": 897,
            "steps": [
                {
                    "command": [
                        "exists (Node (Leaf true) (Leaf false)).",
                        "VernacExtend",
                        "3d8a9b1e04d95d04d189f56a954b7322c1798a5b"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "rightTree",
            "line_nb": 901,
            "steps": [
                {
                    "command": [
                        "exists (Node (Leaf false) (Leaf true)).",
                        "VernacExtend",
                        "72a204c88ae506b1af4ca34005eda9bec9256330"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "split_disjoint",
            "line_nb": 906,
            "steps": [
                {
                    "command": [
                        "unfold split; intros.",
                        "VernacExtend",
                        "06af64d30f020a11331d09c7e79022a9e0b283b1"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- rel_preserves_glb.",
                        "VernacExtend",
                        "eddb9edd936e3739293fd8481688a975ce2f2b50"
                    ]
                },
                {
                    "command": [
                        "replace (glb leftTree rightTree) with bot.",
                        "VernacExtend",
                        "f7ced8a6b54eac9819ebfeb73b86597b158b2ff2"
                    ]
                },
                {
                    "command": [
                        "apply rel_bot1.",
                        "VernacExtend",
                        "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_together",
            "line_nb": 914,
            "steps": [
                {
                    "command": [
                        "unfold split; intros.",
                        "VernacExtend",
                        "06af64d30f020a11331d09c7e79022a9e0b283b1"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- rel_preserves_lub.",
                        "VernacExtend",
                        "2d9d58b432b8aed395f77eac8a5fff659368c63a"
                    ]
                },
                {
                    "command": [
                        "replace (lub leftTree rightTree) with top.",
                        "VernacExtend",
                        "72bce4227a215d8b8072945ab04096802a45b3ce"
                    ]
                },
                {
                    "command": [
                        "apply rel_top1.",
                        "VernacExtend",
                        "dadd305c4c5c1219e538dd18efa75f4cb3292170"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_nontrivial",
            "line_nb": 922,
            "steps": [
                {
                    "command": [
                        "unfold split; intros.",
                        "VernacExtend",
                        "06af64d30f020a11331d09c7e79022a9e0b283b1"
                    ]
                },
                {
                    "command": [
                        "inv H; destruct H0.",
                        "VernacExtend",
                        "fb6efdadeb059b60ebc90f679424929174748d1c"
                    ]
                },
                {
                    "command": [
                        "destruct (canonTree_eq_dec x bot); auto.",
                        "VernacExtend",
                        "41be4c06a06e6c6ce2c30a26423151f4ed8c2629"
                    ]
                },
                {
                    "command": [
                        "replace bot with (rel x bot) in H.",
                        "VernacExtend",
                        "fe601383fbcecac4f63844e63eaeef302c672feb"
                    ]
                },
                {
                    "command": [
                        "apply rel_inj_l in H; auto.",
                        "VernacExtend",
                        "49be499fa365b8fb23bb722631c2363c1f9ac92a"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "apply rel_bot1.",
                        "VernacExtend",
                        "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
                    ]
                },
                {
                    "command": [
                        "destruct (canonTree_eq_dec x bot); auto.",
                        "VernacExtend",
                        "41be4c06a06e6c6ce2c30a26423151f4ed8c2629"
                    ]
                },
                {
                    "command": [
                        "replace bot with (rel x bot) in H.",
                        "VernacExtend",
                        "fe601383fbcecac4f63844e63eaeef302c672feb"
                    ]
                },
                {
                    "command": [
                        "apply rel_inj_l in H; auto.",
                        "VernacExtend",
                        "49be499fa365b8fb23bb722631c2363c1f9ac92a"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "apply rel_bot1.",
                        "VernacExtend",
                        "83fcc741bfb57dc74a6ceb4c45492e5510f3f3d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isTokenFactory_canon",
            "line_nb": 940,
            "steps": [
                {
                    "command": [
                        "intros n fac H; induction H; simpl; intuition.",
                        "VernacExtend",
                        "f2d3903f157933f2b058de81c8d059db3c544745"
                    ]
                },
                {
                    "command": [
                        "right; destruct t0; simpl in *; auto.",
                        "VernacExtend",
                        "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "right; destruct t0; simpl in *; auto.",
                        "VernacExtend",
                        "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
                    ]
                },
                {
                    "command": [
                        "inv H; auto.",
                        "VernacExtend",
                        "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isToken_canon",
            "line_nb": 949,
            "steps": [
                {
                    "command": [
                        "intros n tok H; induction H; simpl; intuition.",
                        "VernacExtend",
                        "9a521e85afa2ef049bbaa6bf2a88c11b8955ce69"
                    ]
                },
                {
                    "command": [
                        "right; destruct t0; simpl in *; auto.",
                        "VernacExtend",
                        "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
                    ]
                },
                {
                    "command": [
                        "inv H; auto.",
                        "VernacExtend",
                        "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "right; destruct t0; simpl in *; auto.",
                        "VernacExtend",
                        "f95a6bc14628355c59d177c4f9e82e7d446a3ce0"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_tok_lub",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "induction tok; simpl; intros.",
                        "VernacExtend",
                        "95e644559188a474ec863de6c249731c37158966"
                    ]
                },
                {
                    "command": [
                        "destruct b; auto.",
                        "VernacExtend",
                        "95533d5a0da46eaf4c778d77a0f89adc7cad4aff"
                    ]
                },
                {
                    "command": [
                        "destruct tok1; simpl.",
                        "VernacExtend",
                        "b18975a54d167ec216430f99a16845bcbde46985"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "destruct n; simpl; auto.",
                        "VernacExtend",
                        "1e3544c1db38cf9d3b82500db7d90f24bce9aeea"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_tok_glb",
            "line_nb": 976,
            "steps": [
                {
                    "command": [
                        "induction tok; simpl; intros; auto.",
                        "VernacExtend",
                        "f1c3ba883841e5873d7337c99eef4a7c32660474"
                    ]
                },
                {
                    "command": [
                        "destruct tok1; simpl; auto.",
                        "VernacExtend",
                        "3d404697c4ae68bb907bd6ba2ebc82d002dd762d"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "destruct n; simpl.",
                        "VernacExtend",
                        "6554f156164019d92e1907ce49ab9159d733a0bb"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_tok1_correct",
            "line_nb": 984,
            "steps": [
                {
                    "command": [
                        "intros tok n m H; revert n; induction H; intros.",
                        "VernacExtend",
                        "333d26651a469f9fef388437484de8735d037850"
                    ]
                },
                {
                    "command": [
                        "inv H; simpl.",
                        "VernacExtend",
                        "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct n0.",
                        "VernacExtend",
                        "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'.",
                        "VernacExtend",
                        "df5a9032000f08630ca833737733ea4ae025f5ec"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'.",
                        "VernacExtend",
                        "df5a9032000f08630ca833737733ea4ae025f5ec"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_tok2_correct",
            "line_nb": 1002,
            "steps": [
                {
                    "command": [
                        "intros tok n m H; revert n; induction H; intros.",
                        "VernacExtend",
                        "333d26651a469f9fef388437484de8735d037850"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct n0.",
                        "VernacExtend",
                        "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon t0) with t0.",
                        "VernacExtend",
                        "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
                    ]
                },
                {
                    "command": [
                        "inv H; simpl.",
                        "VernacExtend",
                        "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique.",
                        "VernacExtend",
                        "190434ded32bd8337d3648e0fac2f6ee88b019dd"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "apply isToken_canon with n; auto.",
                        "VernacExtend",
                        "fe9424e5502af052bb637def7c6e432c76584d54"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_correct.",
                        "VernacExtend",
                        "bd565ce231c7da85be042cb32a6ac9e7ebbe4850"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (split_tok2 n0 t0)); intros.",
                        "VernacExtend",
                        "a02e37c33d6eb59738ab964be66a39533b711d44"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "clear - H H1.",
                        "VernacExtend",
                        "23c492137dd039f7b534dbf72114fc4b965d8b28"
                    ]
                },
                {
                    "command": [
                        "revert n0 H H1.",
                        "VernacExtend",
                        "616d32ecb8cf93b36890679644ef5032913577c8"
                    ]
                },
                {
                    "command": [
                        "induction t0; simpl; intros.",
                        "VernacExtend",
                        "353d44e0ea933b0a5df56b5cde40190c52451d9c"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "destruct n0.",
                        "VernacExtend",
                        "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon t0_2); try discriminate.",
                        "VernacExtend",
                        "7f931261b1ee0b541bd329e66b5386b5d3a2d354"
                    ]
                },
                {
                    "command": [
                        "destruct b; discriminate.",
                        "VernacExtend",
                        "7afd4970724fa0504fb9d93e9f4994db0189ed38"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon (split_tok2 n0 t0_2)); try discriminate.",
                        "VernacExtend",
                        "c1ab69fb116f67715a236df6841b0bb22959d123"
                    ]
                },
                {
                    "command": [
                        "destruct b; discriminate.",
                        "VernacExtend",
                        "7afd4970724fa0504fb9d93e9f4994db0189ed38"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon (split_tok2 n0 t0_2)); try discriminate.",
                        "VernacExtend",
                        "c1ab69fb116f67715a236df6841b0bb22959d123"
                    ]
                },
                {
                    "command": [
                        "destruct b; discriminate.",
                        "VernacExtend",
                        "7afd4970724fa0504fb9d93e9f4994db0189ed38"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHisToken' n0).",
                        "VernacExtend",
                        "db0f0abf8c7e22b5747d8d2837512e7a54c16fa2"
                    ]
                },
                {
                    "command": [
                        "spec IHisToken'; [ omega | ].",
                        "VernacExtend",
                        "5f7ac0f5a7f0657318fe38670e2d5f897aa10241"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in IHisToken'.",
                        "VernacExtend",
                        "f2bc64d535891320a1fbe140f56674aea8fb49cc"
                    ]
                },
                {
                    "command": [
                        "inv IHisToken'.",
                        "VernacExtend",
                        "71bd4434b8e6775a704d5be1b24f3d6dc9acc247"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHisToken' n0).",
                        "VernacExtend",
                        "db0f0abf8c7e22b5747d8d2837512e7a54c16fa2"
                    ]
                },
                {
                    "command": [
                        "spec IHisToken'.",
                        "VernacExtend",
                        "b2be1601767aea6941d881632beac54b0f25da41"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in IHisToken'.",
                        "VernacExtend",
                        "f2bc64d535891320a1fbe140f56674aea8fb49cc"
                    ]
                },
                {
                    "command": [
                        "inversion IHisToken'.",
                        "VernacExtend",
                        "f7c54ae735369c5199dd9fb23f8d7faea2f682be"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; auto.",
                        "VernacExtend",
                        "b21071c2373ca254f86470b0d9b124cb25551839"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "subst; rewrite H5; auto.",
                        "VernacExtend",
                        "960856a292ae1af55b53f0dfe05142428b5f2f4b"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHisToken' n0 H0).",
                        "VernacExtend",
                        "45ae907d04d50fd1c1994e29683e9de1ded910e3"
                    ]
                },
                {
                    "command": [
                        "simpl split_tok2.",
                        "VernacExtend",
                        "6a1e3e61ec579de562c5ab75739367c90c4c9907"
                    ]
                },
                {
                    "command": [
                        "inversion IHisToken'.",
                        "VernacExtend",
                        "f7c54ae735369c5199dd9fb23f8d7faea2f682be"
                    ]
                },
                {
                    "command": [
                        "simpl minus.",
                        "VernacExtend",
                        "11a89d7124a246240a56b6051428b4d104562673"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Eq_Ord",
            "line_nb": 1079,
            "steps": [
                {
                    "command": [
                        "unfold shareTreeEq; intuition.",
                        "VernacExtend",
                        "45ea87166cde0b3f46330d4987d4fa3ad52236ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_token_correct",
            "line_nb": 1082,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct tok as [tok Ht0].",
                        "VernacExtend",
                        "26e7f57c29d42cb1fff9ceb3983052b88ed7c814"
                    ]
                },
                {
                    "command": [
                        "destruct tok1 as [tok1 Ht1].",
                        "VernacExtend",
                        "b8203c7c2cc4abef46209db3eac9063273dcf425"
                    ]
                },
                {
                    "command": [
                        "destruct tok2 as [tok2 Ht2].",
                        "VernacExtend",
                        "bbd3ef039187e59ce993c2b2e5a5594e49da5930"
                    ]
                },
                {
                    "command": [
                        "unfold isToken in *.",
                        "VernacExtend",
                        "c625cb8ba02989f1a2ed68a5de16f261569e323e"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "unfold split_token in H0.",
                        "VernacExtend",
                        "cb79effe0f2fe627f7f18820dea89b3aac8129c1"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "destruct n1; inv H0; simpl; intuition.",
                        "VernacExtend",
                        "18a9df01aadec5ce9f38301f31641a4cbe7147b2"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "hnf; split; simpl.",
                        "VernacExtend",
                        "4352e034e95e665b844071ce69b93d52ba2b465b"
                    ]
                },
                {
                    "command": [
                        "unfold glb; simpl.",
                        "VernacExtend",
                        "901d1ebafd1393d3f481950d8948e9474becae46"
                    ]
                },
                {
                    "command": [
                        "unfold BA.glb; simpl.",
                        "VernacExtend",
                        "c503d2679594490780b5338b9922346a0fbc147d"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "unfold lub; simpl.",
                        "VernacExtend",
                        "7f81292c55a040f11f90ed3e37984a02efc595c6"
                    ]
                },
                {
                    "command": [
                        "unfold BA.lub; simpl.",
                        "VernacExtend",
                        "1765fdc38957d68dc7dba3bb7bb5dd495fbb490c"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl; auto.",
                        "VernacExtend",
                        "d0540dd427c5ec8c7369c6603348a71c2ff47ecb"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply canonicalUnique; auto.",
                        "VernacExtend",
                        "79ea6d490690ed475739a5e90bb821da0d077a57"
                    ]
                },
                {
                    "command": [
                        "assert (isToken' (split_tok1 n1 tok) (S n1)).",
                        "VernacExtend",
                        "ead33c8366cbe4340dd8574187dffcf3d83d244c"
                    ]
                },
                {
                    "command": [
                        "eapply split_tok1_correct; eauto.",
                        "VernacExtend",
                        "4c24cf1680a30bd8493f64e77d87c4f4f4815022"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (split_tok1 n1 tok)) with (split_tok1 n1 tok); auto.",
                        "VernacExtend",
                        "8f0dc82ad588d43d28c2a629bb43607cd49d750b"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isToken_canon; eauto.",
                        "VernacExtend",
                        "860f375cd14a9b73367b9563caee29bd32f137e2"
                    ]
                },
                {
                    "command": [
                        "replace n2 with ((S n1 + n2) - S n1)%nat by omega.",
                        "VernacExtend",
                        "e81e5aea851f2a26a3e9f5b17d7c1252da726836"
                    ]
                },
                {
                    "command": [
                        "eapply split_tok2_correct; auto.",
                        "VernacExtend",
                        "aa492c696d847fbbb8d1f2f9c7c5e4a6e9d37241"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "hnf; simpl; split.",
                        "VernacExtend",
                        "e24aba0e1246c86619046e2301cbc7e2cefe8643"
                    ]
                },
                {
                    "command": [
                        "unfold glb; unfold BA.glb; simpl.",
                        "VernacExtend",
                        "4361b85671611496ee875ba0fe4c03ba5d88c664"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)).",
                        "VernacExtend",
                        "7dbe0ed82f85ee39ed2d431fbbb61a43f164e1a8"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2.",
                        "VernacExtend",
                        "adcadae0413fcbf97112669bccbe7c535701119d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (intersect_tree (split_tok1 n1 tok) (split_tok2 n1 tok)).",
                        "VernacExtend",
                        "07fc6257f45115084e1bdcc8708f44f3dfeb701d"
                    ]
                },
                {
                    "command": [
                        "apply Eq_Ord.",
                        "VernacExtend",
                        "18530ba08a35fdff8a7b32c01a1043d758923189"
                    ]
                },
                {
                    "command": [
                        "apply intersect_cong.",
                        "VernacExtend",
                        "4b77c5399dc4797ddbb16dbbd5a4a898200c672b"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "apply split_tok_glb.",
                        "VernacExtend",
                        "518c056c06d1aa0bea078b6b0f3caeca1a65a6ea"
                    ]
                },
                {
                    "command": [
                        "apply falseLeaf_bottom.",
                        "VernacExtend",
                        "b17e7267278367a8f760434f935f2cd8b9283613"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "pattern tok at 3.",
                        "VernacExtend",
                        "c860d9f00239c739e404133fcde40d26b94c123a"
                    ]
                },
                {
                    "command": [
                        "replace tok with (mkCanon tok).",
                        "VernacExtend",
                        "9a1fe1d1943dcb7b3232b4d3391f53ad31809511"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2.",
                        "VernacExtend",
                        "adcadae0413fcbf97112669bccbe7c535701119d"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (union_tree (split_tok1 n1 tok) (split_tok2 n1 tok)).",
                        "VernacExtend",
                        "0eb45603c8fd550b9ae6a52e9686d53967f683ea"
                    ]
                },
                {
                    "command": [
                        "apply union_cong.",
                        "VernacExtend",
                        "5e39797d567c8d4c7818f3252c434a7583a0aa43"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_eq.",
                        "VernacExtend",
                        "19e67c5c1d042ca7ea2f98d4dd5064ec4224dd03"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply split_tok_lub.",
                        "VernacExtend",
                        "f8089c5460549d98a1dbf28dde53062061825b24"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_tok1_correct",
            "line_nb": 1143,
            "steps": [
                {
                    "command": [
                        "induction fac; simpl; intros.",
                        "VernacExtend",
                        "1a986c8baed30770d7922113b890497fc8e0740f"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "induction m; simpl.",
                        "VernacExtend",
                        "8eeca9e02ca7b585e952baf1eea0278de04f5480"
                    ]
                },
                {
                    "command": [
                        "constructor; constructor.",
                        "VernacExtend",
                        "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "inv H; simpl.",
                        "VernacExtend",
                        "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
                    ]
                },
                {
                    "command": [
                        "destruct m.",
                        "VernacExtend",
                        "8d29a39ed817a734f6646f7b42c80e41363356d4"
                    ]
                },
                {
                    "command": [
                        "constructor; simpl; auto.",
                        "VernacExtend",
                        "f572462624348d3b5055d4778fd188bcf617fb94"
                    ]
                },
                {
                    "command": [
                        "constructor; simpl.",
                        "VernacExtend",
                        "dedfc8791248d9f0998b0bf2378e59b81a2e0146"
                    ]
                },
                {
                    "command": [
                        "apply (IHfac2 m) in H3; auto.",
                        "VernacExtend",
                        "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
                    ]
                },
                {
                    "command": [
                        "constructor; simpl.",
                        "VernacExtend",
                        "dedfc8791248d9f0998b0bf2378e59b81a2e0146"
                    ]
                },
                {
                    "command": [
                        "apply (IHfac2 m) in H3; auto.",
                        "VernacExtend",
                        "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
                    ]
                },
                {
                    "command": [
                        "replace (m + S n0)%nat with (S m + n0)%nat by omega; auto.",
                        "VernacExtend",
                        "7d7baf23dda5d3bf1da5af0891da0e106daf2fac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_tok2_correct",
            "line_nb": 1158,
            "steps": [
                {
                    "command": [
                        "induction fac; intros.",
                        "VernacExtend",
                        "3483bdac1458a4c8ffff13df121a5d5365938406"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction m; simpl; auto.",
                        "VernacExtend",
                        "fef957ed452ac0981dd5620d82fa8cb3b652f75b"
                    ]
                },
                {
                    "command": [
                        "constructor; constructor.",
                        "VernacExtend",
                        "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "inv H; simpl.",
                        "VernacExtend",
                        "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
                    ]
                },
                {
                    "command": [
                        "destruct m.",
                        "VernacExtend",
                        "8d29a39ed817a734f6646f7b42c80e41363356d4"
                    ]
                },
                {
                    "command": [
                        "constructor; constructor.",
                        "VernacExtend",
                        "972688013a1aca9db3fea43a5edc8228f5b8e1bd"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply (IHfac2 m) in H3; auto.",
                        "VernacExtend",
                        "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply (IHfac2 m) in H3; auto.",
                        "VernacExtend",
                        "f83b0ad1d51cb55d2635ad9d0cf1e4f79a8944c6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_tok_lub",
            "line_nb": 1173,
            "steps": [
                {
                    "command": [
                        "induction fac; simpl; intros; auto.",
                        "VernacExtend",
                        "f69dc3e1b47cb454a9c812313e9c81c0e1b754e0"
                    ]
                },
                {
                    "command": [
                        "induction n; simpl.",
                        "VernacExtend",
                        "1f285429454cbe9bad08c3e1d2fa969e99890bea"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)).",
                        "VernacExtend",
                        "b8d7b8d6cec9bf9d3c3b81f4be1fb67721b15a6c"
                    ]
                },
                {
                    "command": [
                        "split; do 3 constructor; auto.",
                        "VernacExtend",
                        "b308734eaa7d000c09471aa0407488989f09753f"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "destruct fac1; simpl.",
                        "VernacExtend",
                        "002c95641af493fe98ea69129866a3945ded0b01"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl.",
                        "VernacExtend",
                        "bc673f83b7fadb69a2678507bb22b8ff82ac3809"
                    ]
                },
                {
                    "command": [
                        "destruct n; simpl.",
                        "VernacExtend",
                        "6554f156164019d92e1907ce49ab9159d733a0bb"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute; simpl; auto.",
                        "VernacExtend",
                        "f018b66cd4a39d59c01b8f90c8b118d2bc233471"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_refl.",
                        "VernacExtend",
                        "257253fe9b06425e2382913bc17d450faf5d3889"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_tok_glb",
            "line_nb": 1191,
            "steps": [
                {
                    "command": [
                        "induction fac; simpl; intros; auto.",
                        "VernacExtend",
                        "f69dc3e1b47cb454a9c812313e9c81c0e1b754e0"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "induction n; simpl; auto.",
                        "VernacExtend",
                        "e97dceb16245749e91243b27d3fd5ddc89e99bdd"
                    ]
                },
                {
                    "command": [
                        "destruct fac1; simpl; auto.",
                        "VernacExtend",
                        "833e26c0b2c9e2d92026a74f31bfbefd6e880aff"
                    ]
                },
                {
                    "command": [
                        "destruct b; simpl; auto.",
                        "VernacExtend",
                        "1e97a3a68faccf3ab7e0dc204d798c19287fa21f"
                    ]
                },
                {
                    "command": [
                        "destruct n; simpl; auto.",
                        "VernacExtend",
                        "1e3544c1db38cf9d3b82500db7d90f24bce9aeea"
                    ]
                },
                {
                    "command": [
                        "do 2 constructor; auto.",
                        "VernacExtend",
                        "e183be6e1e0bceb5835a789a335800bfc25e6ac5"
                    ]
                },
                {
                    "command": [
                        "rewrite intersect_commute; simpl; auto.",
                        "VernacExtend",
                        "61888a9a57b2b322bc396e05d172991fe380e421"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_token_correct",
            "line_nb": 1202,
            "steps": [
                {
                    "command": [
                        "intros; destruct n; simpl in H; inv H; simpl; intuition.",
                        "VernacExtend",
                        "d5d8c67b2c1d3594f84df760c59adc318a04553a"
                    ]
                },
                {
                    "command": [
                        "hnf; constructor.",
                        "VernacExtend",
                        "e464a633469a29fff833e6be498ea642719ea08f"
                    ]
                },
                {
                    "command": [
                        "split; [ apply glb_bot | apply lub_bot ].",
                        "VernacExtend",
                        "d20864cee0a4d728a178bd72bd9e1900c78866f1"
                    ]
                },
                {
                    "command": [
                        "hnf; simpl.",
                        "VernacExtend",
                        "4267e796fe98780d5775d90b490e2b3e0222d364"
                    ]
                },
                {
                    "command": [
                        "destruct fac as [fac H]; simpl.",
                        "VernacExtend",
                        "6916f53547153d01d843f2c26f49dfbc5b2d201f"
                    ]
                },
                {
                    "command": [
                        "assert (isTokenFactory' (create_tok1 n fac) (S (n+x))).",
                        "VernacExtend",
                        "2beb9da4ff180c189d8e9fb62750ce67d1d81217"
                    ]
                },
                {
                    "command": [
                        "apply create_tok1_correct; auto.",
                        "VernacExtend",
                        "f01da68f780cb5c5e88ed8fa89d3d5735aae9526"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (create_tok1 n fac)) with (create_tok1 n fac); auto.",
                        "VernacExtend",
                        "3f6168d39f490ad9685d0ce1b7d1df740ccad5ce"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isTokenFactory_canon; eauto.",
                        "VernacExtend",
                        "8bf4a665f1919b66f912e2f1ccf34a7289858d72"
                    ]
                },
                {
                    "command": [
                        "hnf.",
                        "VernacExtend",
                        "93c9be61208bb2956fb47b51f12123e34260e667"
                    ]
                },
                {
                    "command": [
                        "destruct fac as [fac H]; simpl.",
                        "VernacExtend",
                        "6916f53547153d01d843f2c26f49dfbc5b2d201f"
                    ]
                },
                {
                    "command": [
                        "assert (isToken' (create_tok2 n fac) (S n)).",
                        "VernacExtend",
                        "e6b797ab0e63bfa2b41667893c439001535295b7"
                    ]
                },
                {
                    "command": [
                        "eapply create_tok2_correct; eauto.",
                        "VernacExtend",
                        "573bcbff45539b19e97ed65822bb02eba65fb683"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (create_tok2 n fac)) with (create_tok2 n fac); auto.",
                        "VernacExtend",
                        "a2e0e56f6fa6c04ce99925b615c8cbf8f73a7927"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isToken_canon; eauto.",
                        "VernacExtend",
                        "860f375cd14a9b73367b9563caee29bd32f137e2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)).",
                        "VernacExtend",
                        "7dbe0ed82f85ee39ed2d431fbbb61a43f164e1a8"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2.",
                        "VernacExtend",
                        "adcadae0413fcbf97112669bccbe7c535701119d"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (intersect_tree (create_tok1 n (proj1_sig fac)) (create_tok2 n (proj1_sig fac))).",
                        "VernacExtend",
                        "453eb6f4380655cd367d6ed0c19761f01b362a7c"
                    ]
                },
                {
                    "command": [
                        "apply Eq_Ord.",
                        "VernacExtend",
                        "18530ba08a35fdff8a7b32c01a1043d758923189"
                    ]
                },
                {
                    "command": [
                        "apply intersect_cong; apply shareTreeEq_sym; auto.",
                        "VernacExtend",
                        "fe09f6fa82cebb64a5f132e99f1e7d7ff39900d5"
                    ]
                },
                {
                    "command": [
                        "apply create_tok_glb.",
                        "VernacExtend",
                        "89135b103e4bda735cae0bcb193a59066e6a3d0d"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; simpl.",
                        "VernacExtend",
                        "04cf669704d2c6bc8465fbde983de3a1b877814d"
                    ]
                },
                {
                    "command": [
                        "destruct fac; simpl.",
                        "VernacExtend",
                        "aea9190d6552ec20d83d35e196cf955dc1d2d40e"
                    ]
                },
                {
                    "command": [
                        "pattern x0 at 3.",
                        "VernacExtend",
                        "82d9b28ee85f1c1b33cfb41c9e03fa7f2e5973bb"
                    ]
                },
                {
                    "command": [
                        "replace x0 with (mkCanon x0).",
                        "VernacExtend",
                        "1245302068399f95260d6878fa1e0b3df2274406"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2.",
                        "VernacExtend",
                        "adcadae0413fcbf97112669bccbe7c535701119d"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (union_tree (create_tok1 n x0) (create_tok2 n x0)).",
                        "VernacExtend",
                        "acfd95aedd271b5138fb6add9a8407511a3770d0"
                    ]
                },
                {
                    "command": [
                        "apply union_cong; apply shareTreeEq_sym; auto.",
                        "VernacExtend",
                        "fa0f51d450dcf4213d4e5e734fb15c7222ef2761"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_sym.",
                        "VernacExtend",
                        "745f6cb18b08ff5c26b0152bfd2e719571e7c738"
                    ]
                },
                {
                    "command": [
                        "apply create_tok_lub.",
                        "VernacExtend",
                        "5407397857b8342771df1f4718d9281c26f5152d"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fac_tok_classification",
            "line_nb": 1242,
            "steps": [
                {
                    "command": [
                        "intros fac n H; induction H; simpl; intuition.",
                        "VernacExtend",
                        "6c1d4507e694130ec56cfc428ebe49c67cdb2e69"
                    ]
                },
                {
                    "command": [
                        "subst m; inv H.",
                        "VernacExtend",
                        "0b38b0c84c21b73a03fec8fa18c51a33d852ac36"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "invert_ord; discriminate.",
                        "VernacExtend",
                        "862761780d4c1999372938ffed6dc7238f757546"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "clear -H2 H7.",
                        "VernacExtend",
                        "c5fa43f34a9b1ccfa10555cd5c9b9122ab16e67c"
                    ]
                },
                {
                    "command": [
                        "revert n H2 H7; induction t0; simpl; intros.",
                        "VernacExtend",
                        "dec0f56ba671c918d8e4276f809996ac7e50e5c9"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "invert_ord; discriminate.",
                        "VernacExtend",
                        "862761780d4c1999372938ffed6dc7238f757546"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "eapply IHt0_2; eauto.",
                        "VernacExtend",
                        "5f3ad2674a061da2f58a60f349d1e35562a0d125"
                    ]
                },
                {
                    "command": [
                        "subst m.",
                        "VernacExtend",
                        "9ba78b8037512180a4349842defa7f5fabdd6010"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "invert_ord; discriminate.",
                        "VernacExtend",
                        "862761780d4c1999372938ffed6dc7238f757546"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
                        "VernacExtend",
                        "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)); auto.",
                        "VernacExtend",
                        "19460eef0683f7855d6ac08762f78b29f8dc180a"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "invert_ord; discriminate.",
                        "VernacExtend",
                        "862761780d4c1999372938ffed6dc7238f757546"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H3 H8) as [? [? ?]].",
                        "VernacExtend",
                        "08a21abcb5fc8aeac2b29bf1d545b8f9b7023a95"
                    ]
                },
                {
                    "command": [
                        "apply H1; auto.",
                        "VernacExtend",
                        "57fc44af14fcaf3758941b68060efcbab0060c55"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute in H3.",
                        "VernacExtend",
                        "6cf9abedd7ac815379720be314f9ce9fe9043e35"
                    ]
                },
                {
                    "command": [
                        "simpl in H3.",
                        "VernacExtend",
                        "2a96f120ac764efacadc60b978d01343f60aafa0"
                    ]
                },
                {
                    "command": [
                        "destruct tok; try destruct b; invert_ord; try discriminate.",
                        "VernacExtend",
                        "95a7beca4f507bec707a1f50c5750a2256045c8d"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "clear -H H11.",
                        "VernacExtend",
                        "02f2a803b9bdb3f844562ed5e7a7006391c58a87"
                    ]
                },
                {
                    "command": [
                        "revert n H H11; induction t0; simpl; intros.",
                        "VernacExtend",
                        "c982150c2e28c7e8662b22b755abaae821c45056"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "inv H; invert_ord; eauto.",
                        "VernacExtend",
                        "0a1461ccabb45a36447c0c819683e3c7da4d3a2d"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; try discriminate.",
                        "VernacExtend",
                        "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H7 H10) as [? [? ?]].",
                        "VernacExtend",
                        "220b883907cb3fef38f23fff01c851a8c8e922a1"
                    ]
                },
                {
                    "command": [
                        "apply H6; auto.",
                        "VernacExtend",
                        "991b52fa2aa4a421e14189d20a004b7bf8b46321"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute; auto.",
                        "VernacExtend",
                        "85ab74937e237541cb98dba73d202a6899d76470"
                    ]
                },
                {
                    "command": [
                        "subst m.",
                        "VernacExtend",
                        "9ba78b8037512180a4349842defa7f5fabdd6010"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; try discriminate.",
                        "VernacExtend",
                        "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
                        "VernacExtend",
                        "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeEq_trans with (Node (Leaf true) (Leaf true)); auto.",
                        "VernacExtend",
                        "19460eef0683f7855d6ac08762f78b29f8dc180a"
                    ]
                },
                {
                    "command": [
                        "apply Node_Eq; auto.",
                        "VernacExtend",
                        "489a9278b7878eb4b3f62f2d28e3984d060261ad"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct(IHisTokenFactory' _ _ H4 H7) as [? [? ?]].",
                        "VernacExtend",
                        "1bb3e7d120a58ac6afc5db33ab9160ccc5d08154"
                    ]
                },
                {
                    "command": [
                        "elim H1; auto.",
                        "VernacExtend",
                        "d50026b5dc31929f05ffbd310861b147378ba238"
                    ]
                },
                {
                    "command": [
                        "destruct tok; try destruct b; invert_ord; try discriminate.",
                        "VernacExtend",
                        "95a7beca4f507bec707a1f50c5750a2256045c8d"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H6 H8) as [? [? ?]].",
                        "VernacExtend",
                        "947b4bff4fa0f3268356c6427ff1a43ffe6afdb4"
                    ]
                },
                {
                    "command": [
                        "elim H1; omega.",
                        "VernacExtend",
                        "756e83e787fe0905fefcf647f3461a0dedc88b29"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H6 H8) as [? [? ?]].",
                        "VernacExtend",
                        "947b4bff4fa0f3268356c6427ff1a43ffe6afdb4"
                    ]
                },
                {
                    "command": [
                        "elim H1; omega.",
                        "VernacExtend",
                        "756e83e787fe0905fefcf647f3461a0dedc88b29"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute in H3; simpl in H3.",
                        "VernacExtend",
                        "3080be42a9cc0e21d026fd2d67d95bac36ae76a9"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; try discriminate.",
                        "VernacExtend",
                        "51810ea0ff179f40e8933f1c0dbf3b3c995f05cd"
                    ]
                },
                {
                    "command": [
                        "destruct (IHisTokenFactory' _ _ H4 H10) as [? [? ?]].",
                        "VernacExtend",
                        "d06828edb97969ee82671f7f6067bdad230c5669"
                    ]
                },
                {
                    "command": [
                        "elim H7; [omega |].",
                        "VernacExtend",
                        "d08edb8022c85f0616551b9aa3f4614636684ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute; auto.",
                        "VernacExtend",
                        "85ab74937e237541cb98dba73d202a6899d76470"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "token_nonbot",
            "line_nb": 1309,
            "steps": [
                {
                    "command": [
                        "intros tok n H; induction H; intros; invert_ord; try discriminate; eauto.",
                        "VernacExtend",
                        "79617cf0813e97a0d2afcdfbfea4e7b531f06290"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tokens_nonfull",
            "line_nb": 1313,
            "steps": [
                {
                    "command": [
                        "intros tok1 n H; induction H; simpl; intros.",
                        "VernacExtend",
                        "eca834e7f61a45d674a552785539dc4ef0285e42"
                    ]
                },
                {
                    "command": [
                        "induction H; invert_ord; try discriminate; auto.",
                        "VernacExtend",
                        "64062be1409f7eab2976816391197d40ccd956ac"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; eauto.",
                        "VernacExtend",
                        "adbc5313583ee8f8bc51b8bced315a3a577ae0f9"
                    ]
                },
                {
                    "command": [
                        "clear -H H6.",
                        "VernacExtend",
                        "cb29de87fded7f7fe1985059438594c78a244009"
                    ]
                },
                {
                    "command": [
                        "induction H; invert_ord; try discriminate; auto.",
                        "VernacExtend",
                        "64062be1409f7eab2976816391197d40ccd956ac"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; eauto.",
                        "VernacExtend",
                        "adbc5313583ee8f8bc51b8bced315a3a577ae0f9"
                    ]
                },
                {
                    "command": [
                        "clear -H H6.",
                        "VernacExtend",
                        "cb29de87fded7f7fe1985059438594c78a244009"
                    ]
                },
                {
                    "command": [
                        "induction H; invert_ord; try discriminate; auto.",
                        "VernacExtend",
                        "64062be1409f7eab2976816391197d40ccd956ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tokenFactory_nonbot",
            "line_nb": 1323,
            "steps": [
                {
                    "command": [
                        "intros fac n H; induction H; intros; invert_ord; try discriminate; eauto.",
                        "VernacExtend",
                        "e714cebe2c7a5c2c6ae544fcb7f88c97a9bfc9e2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "absorbToken",
            "line_nb": 1326,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct fac as [fac ?].",
                        "VernacExtend",
                        "dddec3c99ac28662e5042f1544cee4dea229d1a7"
                    ]
                },
                {
                    "command": [
                        "destruct fac' as [fac' ?].",
                        "VernacExtend",
                        "6c654f805d119b40a45e414d6aa25d04845dcb23"
                    ]
                },
                {
                    "command": [
                        "destruct tok as [tok ?].",
                        "VernacExtend",
                        "1f5dd930b3516f6150f10eb515872cdf21586b71"
                    ]
                },
                {
                    "command": [
                        "unfold isToken, isTokenFactory in *.",
                        "VernacExtend",
                        "54340f2cb4bf23cdc4d72729f7e854d7ffca8200"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "destruct H1; simpl in *.",
                        "VernacExtend",
                        "9679f53c12e4c95366b0728d5241ac62d6234764"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "clear c c0 c1.",
                        "VernacExtend",
                        "6619b222dbc69416d635dccd08acd61c9afb9c75"
                    ]
                },
                {
                    "command": [
                        "assert (shareTreeOrd (intersect_tree fac' tok) (Leaf false)).",
                        "VernacExtend",
                        "1bfbab1d212dfdeec4791870be29bfcbc79633ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4.",
                        "VernacExtend",
                        "15801069338f53d2cf64b6951fc88c5758e631f8"
                    ]
                },
                {
                    "command": [
                        "apply Eq_Ord; auto.",
                        "VernacExtend",
                        "6d2d900d05a4993779ea41cefefaf36fba22b2f3"
                    ]
                },
                {
                    "command": [
                        "clear H4.",
                        "VernacExtend",
                        "b63698fbba7b38f68086944744e776a2fb5bc886"
                    ]
                },
                {
                    "command": [
                        "revert tok x n H H0 H1; induction fac'; simpl; intros.",
                        "VernacExtend",
                        "3676fa9ba03246ff7a72d9be2134a9465f9c4265"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "replace x with O by omega.",
                        "VernacExtend",
                        "21198e10f4ab3abec58dcb2ee795b4b17a1623bc"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (Node fac'1 fac'2)) with (Node fac'1 fac'2); auto.",
                        "VernacExtend",
                        "c1a8d22087cd644708aac513acb9483b6aa639cf"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isTokenFactory_canon; eauto.",
                        "VernacExtend",
                        "8bf4a665f1919b66f912e2f1ccf34a7289858d72"
                    ]
                },
                {
                    "command": [
                        "rewrite intersect_commute in H1.",
                        "VernacExtend",
                        "6022d0699df2c20f208b13f7e655167cc4e0b121"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "invert_ord; discriminate.",
                        "VernacExtend",
                        "862761780d4c1999372938ffed6dc7238f757546"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
                        "VernacExtend",
                        "2b244a42176933171301db368bd0273883d74c2d"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "destruct (fac_tok_classification fac'2 (n0+S x)) with t0 n0 as [? [? ?]]; auto.",
                        "VernacExtend",
                        "cad767290d9e1316e5282a6c323f48be86b041a0"
                    ]
                },
                {
                    "command": [
                        "elim H5; [omega|].",
                        "VernacExtend",
                        "89eb7ad3bd87b6c75d179773c498cc5c60cf452e"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test; simpl; auto.",
                        "VernacExtend",
                        "07a3287c188ae914d69a33d86d0ac5a2709e8de6"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute; auto.",
                        "VernacExtend",
                        "85ab74937e237541cb98dba73d202a6899d76470"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H.",
                        "VernacExtend",
                        "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H.",
                        "VernacExtend",
                        "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (shareTreeOrd fac'2 (Leaf false)).",
                        "VernacExtend",
                        "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
                        "VernacExtend",
                        "a9ac05f2c7a7867ab352b7930ee273f601abb517"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "elim (tokenFactory_nonbot fac'2 (n0+x)); auto.",
                        "VernacExtend",
                        "9ffc519a68141f04bb2d59cd3c128a24faed12e5"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "destruct (fac_tok_classification fac'2 (n0+0)) with t0 n0 as [? [? ?]]; auto.",
                        "VernacExtend",
                        "ebe129a57a5fa7ef3603ccba606bb21f1349cd7b"
                    ]
                },
                {
                    "command": [
                        "spec H0; [ omega |].",
                        "VernacExtend",
                        "49a5f196182784e8d969dd9e962c567f1ef57a18"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2 in H0.",
                        "VernacExtend",
                        "0fe44205c6bf05c60a7f9cba9a00650217914984"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute in H0.",
                        "VernacExtend",
                        "68ddb41d93876d0329dad42753820a56c5d3035e"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "eapply IHfac'2; eauto.",
                        "VernacExtend",
                        "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
                    ]
                },
                {
                    "command": [
                        "invert_ord; auto.",
                        "VernacExtend",
                        "e0f4bbd7c0e231287c9dbc20f6ff470269b6e650"
                    ]
                },
                {
                    "command": [
                        "rewrite intersect_commute in H1.",
                        "VernacExtend",
                        "6022d0699df2c20f208b13f7e655167cc4e0b121"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
                        "VernacExtend",
                        "2b244a42176933171301db368bd0273883d74c2d"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "destruct (fac_tok_classification fac'2 (S (n0+S x))) with t0 (S n0) as [? [? ?]]; auto.",
                        "VernacExtend",
                        "23fbbd7bce29f614a25861ec8346eb85f6386192"
                    ]
                },
                {
                    "command": [
                        "elim H5; [ omega |].",
                        "VernacExtend",
                        "89eb7ad3bd87b6c75d179773c498cc5c60cf452e"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test.",
                        "VernacExtend",
                        "5ac331f93277b882fd79a70772c9877cf7aa5c8b"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute.",
                        "VernacExtend",
                        "d885c24d3f94d08eb13f83b39d536446e5905fb9"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H.",
                        "VernacExtend",
                        "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H.",
                        "VernacExtend",
                        "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (shareTreeOrd fac'2 (Leaf false)).",
                        "VernacExtend",
                        "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
                        "VernacExtend",
                        "a9ac05f2c7a7867ab352b7930ee273f601abb517"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "elim (tokenFactory_nonbot fac'2 (S (n0+x))); auto.",
                        "VernacExtend",
                        "7cc9ddcda4c3a55a338c2402233640dab941c0ba"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "destruct (fac_tok_classification fac'2 (S (n0 + 0))) with t0 (S n0) as [? [? ?]]; auto.",
                        "VernacExtend",
                        "24584d7d02cad1b44429e06a1bd98795d7aa353e"
                    ]
                },
                {
                    "command": [
                        "spec H0; [ omega |].",
                        "VernacExtend",
                        "49a5f196182784e8d969dd9e962c567f1ef57a18"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test2 in H0.",
                        "VernacExtend",
                        "0fe44205c6bf05c60a7f9cba9a00650217914984"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute in H0; rewrite H in H0.",
                        "VernacExtend",
                        "c22fb80472be6f935930914f617ecc1e73138ae2"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "eapply IHfac'2; eauto.",
                        "VernacExtend",
                        "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
                    ]
                },
                {
                    "command": [
                        "invert_ord; auto.",
                        "VernacExtend",
                        "e0f4bbd7c0e231287c9dbc20f6ff470269b6e650"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "destruct (fac_tok_classification fac'2 (n0 + 0)) with t0 (S n0) as [? [? ?]]; auto.",
                        "VernacExtend",
                        "f51d58f76cea229265f13d3b9365195bfce792fa"
                    ]
                },
                {
                    "command": [
                        "elim H0; omega.",
                        "VernacExtend",
                        "d598a79f92799c147ed9a6808edf50e23adf797e"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree fac'2 t0)); intros.",
                        "VernacExtend",
                        "2b244a42176933171301db368bd0273883d74c2d"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "eapply IHfac'2; eauto.",
                        "VernacExtend",
                        "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
                    ]
                },
                {
                    "command": [
                        "replace (S n0 + x) with (n0 + S x) by omega; auto.",
                        "VernacExtend",
                        "5b7d37b09965a725e19bc432b06a4d3faf11bfe4"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H.",
                        "VernacExtend",
                        "cbb43b1d708137c0c8ed59562ca9cda53dbec344"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H.",
                        "VernacExtend",
                        "57cc05508cd2f563e31e97b02a9f718ff659a0f5"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (shareTreeOrd fac'2 (Leaf false)).",
                        "VernacExtend",
                        "1f6c0aeb7885606f97f4a9cb8ad57027ac98ae9e"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree fac'2 t0); auto.",
                        "VernacExtend",
                        "a9ac05f2c7a7867ab352b7930ee273f601abb517"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "elim (tokenFactory_nonbot fac'2 (n0 + S x)); auto.",
                        "VernacExtend",
                        "e96a684444a0e12ca87d2f92e3796acbf05df1e2"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "eapply IHfac'2; eauto.",
                        "VernacExtend",
                        "4df7f55fbf336b1514c3cd9c72a4d6479c9657f3"
                    ]
                },
                {
                    "command": [
                        "replace (S n0 + x) with (n0 + S x) by omega; auto.",
                        "VernacExtend",
                        "5b7d37b09965a725e19bc432b06a4d3faf11bfe4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mergeToken",
            "line_nb": 1439,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct tok1 as [tok1 ?].",
                        "VernacExtend",
                        "63b2518033b80865e24754f7c80d9c16f80c49c7"
                    ]
                },
                {
                    "command": [
                        "destruct tok2 as [tok2 ?].",
                        "VernacExtend",
                        "c2d06bc027f2148e324897c1cad251e2cb3909a1"
                    ]
                },
                {
                    "command": [
                        "destruct tok' as [tok' ?].",
                        "VernacExtend",
                        "1e103fd1d66b2f3eeba3b8521f15d979216c35f7"
                    ]
                },
                {
                    "command": [
                        "unfold isToken in *; simpl in *.",
                        "VernacExtend",
                        "47b08ea51bee2df228c7ee0713f626654adcb0da"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "inv H1; inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "clear c c0 c1.",
                        "VernacExtend",
                        "6619b222dbc69416d635dccd08acd61c9afb9c75"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H4.",
                        "VernacExtend",
                        "200184b27913a477e6875d610225e2eb71b01518"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H4.",
                        "VernacExtend",
                        "7360cbcd3ce0ca76089f089bb509bee2e1df01e8"
                    ]
                },
                {
                    "command": [
                        "destruct H4.",
                        "VernacExtend",
                        "9ae390e4b039d96b643e4c1e0cd28291b37e7b3e"
                    ]
                },
                {
                    "command": [
                        "clear H2.",
                        "VernacExtend",
                        "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
                    ]
                },
                {
                    "command": [
                        "revert tok2 n2 H0 H1.",
                        "VernacExtend",
                        "7e91aa2a1e966a76cc404854eecaeca1e5f02581"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; intros; invert_ord.",
                        "VernacExtend",
                        "c6c384c549501b939107c669fe480d5562dd4581"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon tok2) with tok2; auto.",
                        "VernacExtend",
                        "180971283d5c471c3988a392c169f5f3ed44b9e6"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isToken_canon; eauto.",
                        "VernacExtend",
                        "860f375cd14a9b73367b9563caee29bd32f137e2"
                    ]
                },
                {
                    "command": [
                        "induction H0; simpl; intros; invert_ord; try discriminate.",
                        "VernacExtend",
                        "5b905123f67dda126940c28f7d14a858b5be4d2c"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon t0) with t0.",
                        "VernacExtend",
                        "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
                    ]
                },
                {
                    "command": [
                        "inv H; simpl.",
                        "VernacExtend",
                        "2f18defd91bdfd53dd6f08bdf7063e0bb187b803"
                    ]
                },
                {
                    "command": [
                        "do 2 constructor.",
                        "VernacExtend",
                        "07211245421e12efccc5f1620fbfd6e44dd434a8"
                    ]
                },
                {
                    "command": [
                        "do 2 constructor.",
                        "VernacExtend",
                        "07211245421e12efccc5f1620fbfd6e44dd434a8"
                    ]
                },
                {
                    "command": [
                        "replace (n0+0) with n0 by omega; auto.",
                        "VernacExtend",
                        "100855d7c50746e11fce0e6f6dd006f98196bcc5"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "replace (n0+0) with n0 by omega; auto.",
                        "VernacExtend",
                        "100855d7c50746e11fce0e6f6dd006f98196bcc5"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isToken_canon; eauto.",
                        "VernacExtend",
                        "860f375cd14a9b73367b9563caee29bd32f137e2"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree t0 t1)); intros.",
                        "VernacExtend",
                        "71301f9c7489e29f6702d8b1672e02534f41dd2f"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "change (Leaf true) with (mkCanon (Leaf true)) in H1.",
                        "VernacExtend",
                        "56d48766e5628ea5507322f66d0d8653f0668294"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H1.",
                        "VernacExtend",
                        "72dcff2eab0b4e3ea0244a836d4eb9dae9cf5e7a"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "elim (tokens_nonfull _ _ H _ _ H0); auto.",
                        "VernacExtend",
                        "1fe6c1e05990dcb30d33bb94d0777ff24926dcfc"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H1.",
                        "VernacExtend",
                        "554dec5db62119bf64563a8fa5c579ca3897ddab"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H1.",
                        "VernacExtend",
                        "72dcff2eab0b4e3ea0244a836d4eb9dae9cf5e7a"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "assert (shareTreeOrd t1 (Leaf false)).",
                        "VernacExtend",
                        "de76d85cd69333b4bba9b6cb9735e1f6a7f89c88"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_trans with (union_tree t0 t1); auto.",
                        "VernacExtend",
                        "59286ad89a61b16e78564c39927d03dba5e9a4bf"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute.",
                        "VernacExtend",
                        "d885c24d3f94d08eb13f83b39d536446e5905fb9"
                    ]
                },
                {
                    "command": [
                        "apply union_upper_bound.",
                        "VernacExtend",
                        "c15cf2516a334d8e0e429ae7cd7535316adfae57"
                    ]
                },
                {
                    "command": [
                        "elim (token_nonbot t1 (S n0)); auto.",
                        "VernacExtend",
                        "8c0996931fa8d1966635db716a0f8d0828099b9f"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'; auto.",
                        "VernacExtend",
                        "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon t0) with t0.",
                        "VernacExtend",
                        "b8b12b51d0924e8338e8d53faf48fa6c48429ae7"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "do 2 constructor.",
                        "VernacExtend",
                        "07211245421e12efccc5f1620fbfd6e44dd434a8"
                    ]
                },
                {
                    "command": [
                        "replace (n+0) with n by omega; auto.",
                        "VernacExtend",
                        "fe4e771e08bf80fcb216f51ca1c32a682fe9c3a1"
                    ]
                },
                {
                    "command": [
                        "do 2 constructor.",
                        "VernacExtend",
                        "07211245421e12efccc5f1620fbfd6e44dd434a8"
                    ]
                },
                {
                    "command": [
                        "replace (n+0) with n by omega; auto.",
                        "VernacExtend",
                        "fe4e771e08bf80fcb216f51ca1c32a682fe9c3a1"
                    ]
                },
                {
                    "command": [
                        "apply canonicalUnique; auto.",
                        "VernacExtend",
                        "97719dc8085a147ee601ba66c995dcd76f6ae7dc"
                    ]
                },
                {
                    "command": [
                        "eapply isToken_canon; eauto.",
                        "VernacExtend",
                        "860f375cd14a9b73367b9563caee29bd32f137e2"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree t0 t1)); intros.",
                        "VernacExtend",
                        "71301f9c7489e29f6702d8b1672e02534f41dd2f"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "change (Leaf true) with (mkCanon (Leaf true)) in H0.",
                        "VernacExtend",
                        "899bd573cccbe31fd57ca1989fd71298ee73798c"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H0.",
                        "VernacExtend",
                        "7fabbbeac1deaa5472e366870fd0ec47c02f400c"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "elim (tokens_nonfull _ _ H _ _ H2); auto.",
                        "VernacExtend",
                        "f1bc5fd0d6919be6afd257c24895772873ef322e"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "replace (n + S n0) with (S n + n0) by omega.",
                        "VernacExtend",
                        "f6f7aecd8c254fd946d32d27abcbb4a57f6ea402"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'; auto.",
                        "VernacExtend",
                        "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "replace (n + S n0) with (S n + n0) by omega.",
                        "VernacExtend",
                        "f6f7aecd8c254fd946d32d27abcbb4a57f6ea402"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'; auto.",
                        "VernacExtend",
                        "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
                    ]
                },
                {
                    "command": [
                        "invert_ord.",
                        "VernacExtend",
                        "42fe6d4e4866cc4e34158c2c90438096392dbac4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case_eq (mkCanon (union_tree t0 t1)); intros.",
                        "VernacExtend",
                        "71301f9c7489e29f6702d8b1672e02534f41dd2f"
                    ]
                },
                {
                    "command": [
                        "destruct b.",
                        "VernacExtend",
                        "8903a74740ba2d4b9b293ac81ed015a01a553cd0"
                    ]
                },
                {
                    "command": [
                        "change (Leaf true) with (mkCanon (Leaf true)) in H0.",
                        "VernacExtend",
                        "899bd573cccbe31fd57ca1989fd71298ee73798c"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H0.",
                        "VernacExtend",
                        "7fabbbeac1deaa5472e366870fd0ec47c02f400c"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "elim (tokens_nonfull _ _ H _ _ H2); auto.",
                        "VernacExtend",
                        "f1bc5fd0d6919be6afd257c24895772873ef322e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'; auto.",
                        "VernacExtend",
                        "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "apply IHisToken'; auto.",
                        "VernacExtend",
                        "fe6dd6fccd9961644eb29bd4f9290b9e4858cffb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "factoryOverlap",
            "line_nb": 1526,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "destruct f1 as [f1 ?].",
                        "VernacExtend",
                        "b6c2bb714d457fb87d81e46b181a0870e1de5b77"
                    ]
                },
                {
                    "command": [
                        "destruct f2 as [f2 ?].",
                        "VernacExtend",
                        "269fd6c7fc8e521c49d86d5956a3910d19068974"
                    ]
                },
                {
                    "command": [
                        "inv H1; hnf in H, H0.",
                        "VernacExtend",
                        "02e17ceb91be0d738d5c7744a960c8979e564759"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "change (Leaf false) with (mkCanon (Leaf false)) in H3.",
                        "VernacExtend",
                        "2dd1ce488ded48478df08285a8d18b62518b5367"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_test in H3.",
                        "VernacExtend",
                        "d802de40b996eb944201c3ef9f45247d78a99e1d"
                    ]
                },
                {
                    "command": [
                        "destruct H3.",
                        "VernacExtend",
                        "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
                    ]
                },
                {
                    "command": [
                        "clear c c0 H2.",
                        "VernacExtend",
                        "29429a30f8c7a0c0c99c2ceeaa7b5e1443a7be8e"
                    ]
                },
                {
                    "command": [
                        "revert f2 n2 H0 H1.",
                        "VernacExtend",
                        "28e2f905ee9b3adec724368cfe382a009d4bd475"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; intros.",
                        "VernacExtend",
                        "b3d2fc5df2233b3d15b97f2e12d093021889751e"
                    ]
                },
                {
                    "command": [
                        "induction H0; simpl; invert_ord; try discriminate; auto.",
                        "VernacExtend",
                        "b604534c997be2e18db09b7c97a4dba6d71b0dd1"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; try discriminate; eauto.",
                        "VernacExtend",
                        "3836ae55d1b2a4339733bc8367283f0904446a8b"
                    ]
                },
                {
                    "command": [
                        "inv H0; invert_ord; try discriminate; eauto.",
                        "VernacExtend",
                        "3836ae55d1b2a4339733bc8367283f0904446a8b"
                    ]
                },
                {
                    "command": [
                        "clear -H H6.",
                        "VernacExtend",
                        "cb29de87fded7f7fe1985059438594c78a244009"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; invert_ord; try discriminate; auto.",
                        "VernacExtend",
                        "d405dd9a7ea9484bb35320741f53a5650346e211"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullFactory",
            "line_nb": 1544,
            "steps": [
                {
                    "command": [
                        "intros [x ?].",
                        "VernacExtend",
                        "123acfefdaed36c31f4a4f7516127a1cac006fa0"
                    ]
                },
                {
                    "command": [
                        "unfold isTokenFactory; simpl.",
                        "VernacExtend",
                        "6ac44472f0d5c5299808347a0e0852ad2c7841d6"
                    ]
                },
                {
                    "command": [
                        "split; intro H; inv H.",
                        "VernacExtend",
                        "cd54f1a935c0703fb85a555cccce118e17ff6709"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; auto.",
                        "VernacExtend",
                        "0faa9968474d42ef4b1c30502cfd28c68610cd31"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "identityToken",
            "line_nb": 1551,
            "steps": [
                {
                    "command": [
                        "intros [x ?].",
                        "VernacExtend",
                        "123acfefdaed36c31f4a4f7516127a1cac006fa0"
                    ]
                },
                {
                    "command": [
                        "unfold isToken; simpl.",
                        "VernacExtend",
                        "437f5ccab25c434bb3e076358c431f420e2b3f42"
                    ]
                },
                {
                    "command": [
                        "split; intro H; inv H.",
                        "VernacExtend",
                        "cd54f1a935c0703fb85a555cccce118e17ff6709"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_eq; auto.",
                        "VernacExtend",
                        "0faa9968474d42ef4b1c30502cfd28c68610cd31"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonidentityToken",
            "line_nb": 1558,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "destruct x as [x ?].",
                        "VernacExtend",
                        "1327cdedb67ae081bd2d594f645a5e49c7c57d24"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "hnf in H0; simpl in H0.",
                        "VernacExtend",
                        "931c77ddcd4a190d6f33d581cc5b1d83eb75110d"
                    ]
                },
                {
                    "command": [
                        "inv H0; inv H.",
                        "VernacExtend",
                        "8a3cb710c637bb0f4e4690225ff7f35d609d735b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonidentityFactory",
            "line_nb": 1565,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "destruct x as [x ?].",
                        "VernacExtend",
                        "1327cdedb67ae081bd2d594f645a5e49c7c57d24"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "hnf in H.",
                        "VernacExtend",
                        "b998e5ae98dd847416f4f194f30407c3597ea052"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_decompose_obligation_3",
            "line_nb": 1575,
            "steps": [
                {
                    "command": [
                        "destruct pf.",
                        "VernacExtend",
                        "ea3b43004696f63e8850c4fbcd23f1da87044dae"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "tree_decompose_obligation_4",
            "line_nb": 1579,
            "steps": [
                {
                    "command": [
                        "destruct pf.",
                        "VernacExtend",
                        "ea3b43004696f63e8850c4fbcd23f1da87044dae"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "tree_height_zero",
            "line_nb": 1586,
            "steps": [
                {
                    "command": [
                        "destruct t.",
                        "VernacExtend",
                        "03d3fc39431171b40684d8dff6748881af772fc7"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height.",
                        "VernacExtend",
                        "73bd0d7a2a8cb56f8a44aefd6a760678b02f4bf7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm in H.",
                        "VernacExtend",
                        "c98f948fd1624aa97b45ebb8d60598f2fec079ac"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_Leaf",
            "line_nb": 1621,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_identity",
            "line_nb": 1625,
            "steps": [
                {
                    "command": [
                        "induction t0;intros.",
                        "VernacExtend",
                        "d5b57f6e82495304d613378e5f8ec6391beeb195"
                    ]
                },
                {
                    "command": [
                        "compute;trivial.",
                        "VernacExtend",
                        "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? [? ?]]].",
                        "VernacExtend",
                        "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHt0_1 H1).",
                        "VernacExtend",
                        "e6d627104b03d07a7b6d0895001cf319fe34e32c"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHt0_2 H2).",
                        "VernacExtend",
                        "98e998223936cb02abcfa6dd0d7fcb7eb86ad0b8"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt0_1.",
                        "VernacExtend",
                        "acaba28ae65364f06336d4656525460e4453c188"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt0_2.",
                        "VernacExtend",
                        "0c740b8f6c418eabdc692590e8f6c2eb69223e09"
                    ]
                },
                {
                    "command": [
                        "icase t0_1;icase t0_2.",
                        "VernacExtend",
                        "86bfdec47df68038d04347caba0c1e3e644165c0"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0).",
                        "VernacExtend",
                        "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "icase b0;compute in H;compute in H0; firstorder.",
                        "VernacExtend",
                        "5e3f22a5bae3d6474eecad388a4b2a705c502a26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "identity_tree",
            "line_nb": 1641,
            "steps": [
                {
                    "command": [
                        "unfold identity,join,BAF.Join_ba.",
                        "VernacExtend",
                        "d6633772cda8174682e9d565e34acaccb68a1971"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub in H0.",
                        "VernacExtend",
                        "a0c724d0d25465e0b56ae51478e5ea3390226bb7"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_identity.",
                        "VernacExtend",
                        "50e1638254cb5c0364ae7e946f67b824fe968c15"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonEmpty_nonidentity",
            "line_nb": 1654,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "specialize ( H0 (exist (fun t0 => canonicalTree t0) (Leaf false) (canonTree_Leaf _)) (exist (fun t0 => canonicalTree t0) (Leaf true) (canonTree_Leaf _))).",
                        "VernacExtend",
                        "f71d591ea2f605da564d94a4d28fbd17cce7f90b"
                    ]
                },
                {
                    "command": [
                        "detach H0.",
                        "VernacExtend",
                        "fb1033d455428b41e9b90b2f6403a4498d1865bf"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "unfold join,BAF.Join_ba.",
                        "VernacExtend",
                        "59414273acdf11947ee88c302fe50e5102ce2cd5"
                    ]
                },
                {
                    "command": [
                        "split;apply exist_ext;compute;trivial.",
                        "VernacExtend",
                        "a2c1da90f37bbfb0b2c7f3b25ec829e5ae51ab02"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold identity in H0.",
                        "VernacExtend",
                        "cf05dce9a360a26f21ed54fc239680adb898736c"
                    ]
                },
                {
                    "command": [
                        "specialize ( H0 (exist (fun t0 => canonicalTree t0) (Leaf false) (canonTree_Leaf _)) (exist (fun t : ShareTree => canonicalTree t) (Node x1 x2) c)).",
                        "VernacExtend",
                        "bf8de902eb28305ba3873c8299970736c50b561d"
                    ]
                },
                {
                    "command": [
                        "detach H0.",
                        "VernacExtend",
                        "fb1033d455428b41e9b90b2f6403a4498d1865bf"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "apply join_comm.",
                        "VernacExtend",
                        "c355c563e0fb9ac01df8452aaaaf4009eeee22a7"
                    ]
                },
                {
                    "command": [
                        "unfold join.",
                        "VernacExtend",
                        "56d19727305f7ac52a9beb120f89f9b1e1b2cbfc"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.Join_ba,BAF.glb,BAF.lub.",
                        "VernacExtend",
                        "11aa08477be769fc823173305778d97e425d1fa6"
                    ]
                },
                {
                    "command": [
                        "split;apply exist_ext;simpl;trivial.",
                        "VernacExtend",
                        "25e197fe2295326827498d7795ee5af5078a2c2d"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_rel",
            "line_nb": 1677,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "induction x;intros.",
                        "VernacExtend",
                        "967005fa252895ab470aa9876d40c37f363bf6d6"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) c = top).",
                        "VernacExtend",
                        "1fb6d2272b3091502c15369a780fb2bfde96eeca"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply rel_top2.",
                        "VernacExtend",
                        "7c67cc3807e8c833415e7a9cdbfc5d6d78e15910"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) c = core (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) c)).",
                        "VernacExtend",
                        "0080d93a0829df2146d2cd78def773cc74832ce8"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.bot.",
                        "VernacExtend",
                        "2ea103cb8f3174c2438d4b7c8a203415930b5405"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;trivial.",
                        "VernacExtend",
                        "57a542efd5803f9f450ee003dbdb7ed63247566f"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply core_identity.",
                        "VernacExtend",
                        "5c1c5ff59150fe95f19be565f7f1c3a0225ed86c"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (exist _ (Node x1 x2) (conj n (conj n0 (conj c c0)))) = (exist (fun t0 : ShareTree => canonicalTree t0) x1 c, exist (fun t0 : ShareTree => canonicalTree t0) x2 c0)).",
                        "VernacExtend",
                        "f2cf7279fd161878218c1ff3e422616a0cd930d9"
                    ]
                },
                {
                    "command": [
                        "simpl;trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;clear H0.",
                        "VernacExtend",
                        "fabeca7858ebb717928a37dd7ab85d95711cf62f"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (rel (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh) = (rel (exist _ x1 c) sh, rel (exist _ x2 c0) sh)).",
                        "VernacExtend",
                        "cbed47da8f6c729f3e8066fe38e92a77ad38a6bf"
                    ]
                },
                {
                    "command": [
                        "generalize (rel_classification);intro.",
                        "VernacExtend",
                        "51c82dd296e46df457d516ed207ddb94863dfb6c"
                    ]
                },
                {
                    "command": [
                        "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh).",
                        "VernacExtend",
                        "518ac51f8262176fd143d4c088434713469bbc58"
                    ]
                },
                {
                    "command": [
                        "icase X.",
                        "VernacExtend",
                        "cb952cd283298e89cc9c88570eac9010e28a245f"
                    ]
                },
                {
                    "command": [
                        "destruct a;subst sh.",
                        "VernacExtend",
                        "7efbd38282074853a6b119da33a6f2089ae1f477"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;simpl;symmetry; apply rel_bot1.",
                        "VernacExtend",
                        "484f63874920d92480154d088e0a7408d2fe7cbb"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "unfold decompose.",
                        "VernacExtend",
                        "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
                    ]
                },
                {
                    "command": [
                        "remember (rel (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0)))) sh).",
                        "VernacExtend",
                        "279beb86f3cd7716c04d01c50765c89b978c78af"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "destruct c1 as [? [? [? ?]]].",
                        "VernacExtend",
                        "3c359adc74576190ab9948d54bc08fb4d001d6d7"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;simpl; destruct sh; icase x;unfold rel;simpl;try apply exist_ext;trivial.",
                        "VernacExtend",
                        "99db50f9580c61862ccb144c1636f04371d8f9f4"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "icase x2.",
                        "VernacExtend",
                        "bcd0f33732012369c5e1e3dcf6222f010fea2811"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;clear H0.",
                        "VernacExtend",
                        "fabeca7858ebb717928a37dd7ab85d95711cf62f"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "assert (exist _ (Leaf true) c = top).",
                        "VernacExtend",
                        "afb2cc1427982a32fdfe9065db7d2b814c08a61d"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply rel_top2.",
                        "VernacExtend",
                        "7c67cc3807e8c833415e7a9cdbfc5d6d78e15910"
                    ]
                },
                {
                    "command": [
                        "apply IHx2.",
                        "VernacExtend",
                        "ec8945e07d5ebb780621c8089467ca601f2d7a9a"
                    ]
                },
                {
                    "command": [
                        "apply nonEmpty_nonidentity.",
                        "VernacExtend",
                        "29ccbcc74393077052c937a588cfb5e086d19f1f"
                    ]
                },
                {
                    "command": [
                        "icase n0.",
                        "VernacExtend",
                        "fd2ba696caa99f0b129d4fbb5031b00bf463aa87"
                    ]
                },
                {
                    "command": [
                        "apply IHx1.",
                        "VernacExtend",
                        "aeaa4dbd5568f59b5997dbaf98e557368b24eb25"
                    ]
                },
                {
                    "command": [
                        "apply nonEmpty_nonidentity.",
                        "VernacExtend",
                        "29ccbcc74393077052c937a588cfb5e086d19f1f"
                    ]
                },
                {
                    "command": [
                        "clear - c.",
                        "VernacExtend",
                        "bba79bd49e8799be6ca06d4e9633c46212a67b51"
                    ]
                },
                {
                    "command": [
                        "destruct c as [_ [? _]].",
                        "VernacExtend",
                        "5978447c741f569d19ae609e44d315a1fe479d8b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_Leaf",
            "line_nb": 1749,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_double",
            "line_nb": 1753,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_correct t0);intro.",
                        "VernacExtend",
                        "515e214a36a1bb533bc84cc67f08f24bcee3cc15"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ H);intro.",
                        "VernacExtend",
                        "a4c407e4325e6feabf6903b6384263f316638d35"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_split",
            "line_nb": 1759,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t1);icase (mkCanon t2); try icase (bool_dec b b0);inversion H1;auto.",
                        "VernacExtend",
                        "eb02046a39c71bd55b6e1ff6409468169483573e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_Leaf_split",
            "line_nb": 1764,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t1);icase (mkCanon t2).",
                        "VernacExtend",
                        "bd811165e0811144726988c940e4a7a2b69f2333"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b0 b1);inversion H1;subst.",
                        "VernacExtend",
                        "f8b313ece6a5b4693948c1c2f8364ef5ed9f2a5f"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_union",
            "line_nb": 1771,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (exists n, n >= max (tree_heightP t1) (tree_heightP t2)).",
                        "VernacExtend",
                        "03dd3182aa4df662a2e4199d61fa6a33878c0469"
                    ]
                },
                {
                    "command": [
                        "exists (max (tree_heightP t1) (tree_heightP t2));omega.",
                        "VernacExtend",
                        "41f33d3a4287e710f99fe3054076749e921b5685"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "revert H.",
                        "VernacExtend",
                        "6842e040dd98a07b1eb54bbabc9c3f1076566a9a"
                    ]
                },
                {
                    "command": [
                        "revert t2 t1.",
                        "VernacExtend",
                        "8afc57ec65f3c5d54becc13f716c653ead5305ce"
                    ]
                },
                {
                    "command": [
                        "induction x;intros.",
                        "VernacExtend",
                        "967005fa252895ab470aa9876d40c37f363bf6d6"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "remember (tree_heightP (Node t2_1 t2_2)).",
                        "VernacExtend",
                        "166dddff85ff74575d4fada1110526ca654256cb"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "inversion Heqn.",
                        "VernacExtend",
                        "34f8462da0501cfa82647625d34ac4fea03cbd33"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t2_1) (tree_heightP t2_2));elimtype False ;omega.",
                        "VernacExtend",
                        "4326b25aa24f14010e3b3f1df18438007bacc365"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t1_1) (tree_heightP t1_2));inversion H1.",
                        "VernacExtend",
                        "a865c761ef46fb2cad373b60b1f8b330e6f65c47"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t1_1) (tree_heightP t1_2)); destruct (max (tree_heightP t2_1) (tree_heightP t2_2)); inversion H1.",
                        "VernacExtend",
                        "2b3e6cf8b854a6a163a0c70cb0207ed7efce2f41"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
                        "VernacExtend",
                        "92cf76fe631ac25a334e03d7f89456639e854f7b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "unfold union_tree.",
                        "VernacExtend",
                        "76531f4f278e593d44983af5816265df72eaebcd"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_double.",
                        "VernacExtend",
                        "bd673e0198e52abcf80665d4d80939f987ec580f"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
                        "VernacExtend",
                        "92cf76fe631ac25a334e03d7f89456639e854f7b"
                    ]
                },
                {
                    "command": [
                        "replace (union_tree (mkCanon (Node t1_1 t1_2)) (Leaf b)) with (union_tree(Leaf b)(mkCanon (Node t1_1 t1_2))) by apply union_commute.",
                        "VernacExtend",
                        "5a2cc647f2d20935367c3a28d0964c98c9c671f0"
                    ]
                },
                {
                    "command": [
                        "replace (union_tree ( (Node t1_1 t1_2)) (Leaf b)) with (union_tree(Leaf b)(Node t1_1 t1_2)) by apply union_commute.",
                        "VernacExtend",
                        "9fff4ac07146352c45c7937ebb60d5047796606e"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "unfold union_tree.",
                        "VernacExtend",
                        "76531f4f278e593d44983af5816265df72eaebcd"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_double.",
                        "VernacExtend",
                        "bd673e0198e52abcf80665d4d80939f987ec580f"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (tree_heightP t1_1) (tree_heightP t2_1)).",
                        "VernacExtend",
                        "720c78affc0bf92c3622eb27c1217f64e30bce1f"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
                        "VernacExtend",
                        "0d247f450c95bf07dd150ec25290349c3f9b041a"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
                        "VernacExtend",
                        "7a7f3b025a777711289bbfa545257b7f3219a629"
                    ]
                },
                {
                    "command": [
                        "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
                        "VernacExtend",
                        "ddace4781e469afa72530ffe9510e612fc0ce661"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0 in H;clear H0.",
                        "VernacExtend",
                        "c8d008f6a681b3aa396caf5a4a36d040353c5bea"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
                        "VernacExtend",
                        "0a9b828055b85307b530f0ff2561f8b7658f620c"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
                        "VernacExtend",
                        "4f697524f71507015df6555e5dfa93d3ad44fe72"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "99d591959b3419c73d118a5ab4f2e91b5accea25"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_1).",
                        "VernacExtend",
                        "bb6914e35f2f71e8f906a4bfa7c04d0ecea8c4b6"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_1).",
                        "VernacExtend",
                        "7fe06ca08d0477228f6b819f522c3f9b0b080a7b"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "apply max_lub;omega.",
                        "VernacExtend",
                        "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (tree_heightP t1_2) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "4bec309b3e71bd7e674fe6f91ae2fdad44168a58"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
                        "VernacExtend",
                        "0d247f450c95bf07dd150ec25290349c3f9b041a"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
                        "VernacExtend",
                        "7a7f3b025a777711289bbfa545257b7f3219a629"
                    ]
                },
                {
                    "command": [
                        "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
                        "VernacExtend",
                        "ddace4781e469afa72530ffe9510e612fc0ce661"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1 in H;clear H1.",
                        "VernacExtend",
                        "cd8b55612d8b1cd5dd22277bd74c76417adb6480"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
                        "VernacExtend",
                        "0a9b828055b85307b530f0ff2561f8b7658f620c"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
                        "VernacExtend",
                        "4f697524f71507015df6555e5dfa93d3ad44fe72"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "99d591959b3419c73d118a5ab4f2e91b5accea25"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_2).",
                        "VernacExtend",
                        "e081a61f6ab3ebea723cc8d004cbb8fd97b5c214"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_2).",
                        "VernacExtend",
                        "1bb473544ad68959f318df74d89b33b14dc5138a"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "apply max_lub;omega.",
                        "VernacExtend",
                        "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx _ _ H0);intro.",
                        "VernacExtend",
                        "c6356c640473cbc82c60133a7ad64bfb95e1385c"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx _ _ H1);intro.",
                        "VernacExtend",
                        "c534ce5587bba324b7e77225fe54d50bbe57b3c3"
                    ]
                },
                {
                    "command": [
                        "remember (mkCanon (Node t1_1 t1_2)); remember (mkCanon (Node t2_1 t2_2)).",
                        "VernacExtend",
                        "a3f2e0708a4e588e4bffade15f6c0142339eba6d"
                    ]
                },
                {
                    "command": [
                        "icase s;icase s0.",
                        "VernacExtend",
                        "161ab773bbd450aff668142fa775d0ee740c7c83"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "2913c7f415056c6f42826426c576ad14be131b68"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "a3cb58c11b5ba51941895458842055d394606df7"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H51 in *.",
                        "VernacExtend",
                        "b7d83e75ecef6ea410b4f382809360657e65e858"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite H52 in *.",
                        "VernacExtend",
                        "00b69e3806d8ddfd959bf1cb45a73f10a04902ef"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf b0);intro.",
                        "VernacExtend",
                        "c23b1909a67e14bfa7ffe0bbcf473089b2ed3d5d"
                    ]
                },
                {
                    "command": [
                        "rewrite H4.",
                        "VernacExtend",
                        "fc5d011df68f7160e4669d129d2975825ac089bb"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b0 b0);trivial.",
                        "VernacExtend",
                        "2a2808120933a7f28679ebc5ada94c799f582c3c"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "2913c7f415056c6f42826426c576ad14be131b68"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs0.",
                        "VernacExtend",
                        "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "d47cf62474b3562786f61978d6f5a242afc0c60c"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "a3cb58c11b5ba51941895458842055d394606df7"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs.",
                        "VernacExtend",
                        "9275975760708605add45ad78ef8579587cb34e0"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "replace (union_tree (Node (mkCanon t1_1) (mkCanon t1_2)) (Leaf b)) with (union_tree (Leaf b) (Node (mkCanon t1_1) (mkCanon t1_2))) by apply union_commute.",
                        "VernacExtend",
                        "4d2fc2b903069aabea852e810501b6e00554cef8"
                    ]
                },
                {
                    "command": [
                        "replace (union_tree (mkCanon t1_1) (Leaf b)) with (union_tree (Leaf b)(mkCanon t1_1)) in H2 by apply union_commute.",
                        "VernacExtend",
                        "459c3a2969ef2598d1673fcdbf62047656b2b7a9"
                    ]
                },
                {
                    "command": [
                        "replace (union_tree (mkCanon t1_2) (Leaf b)) with (union_tree (Leaf b)(mkCanon t1_2)) in H3 by apply union_commute.",
                        "VernacExtend",
                        "c930e24682a07840e1e08e1787b238746298e073"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs, Heqs0.",
                        "VernacExtend",
                        "3bf590587427358e6d96401a0d02b70be30779ba"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "d47cf62474b3562786f61978d6f5a242afc0c60c"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H41 in *.",
                        "VernacExtend",
                        "ffefabf6ca3b9c3c5f90c11b36828d0f0acf154f"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H42 in *.",
                        "VernacExtend",
                        "0c96bf4f5abff5d69b0c6d7f65737bd37baa6ee5"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splice_rewrite",
            "line_nb": 1896,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold splice.",
                        "VernacExtend",
                        "a3ee6f27fd03cdcfe4181d600a996a3113362f11"
                    ]
                },
                {
                    "command": [
                        "unfold lub,Lsh,Rsh.",
                        "VernacExtend",
                        "d07d2081fff2aae141c6bdc8bf4b93e1f6019671"
                    ]
                },
                {
                    "command": [
                        "unfold split,fst,snd.",
                        "VernacExtend",
                        "ef3eb6274d722b08ea01f87929ce0fbfe73d103c"
                    ]
                },
                {
                    "command": [
                        "assert (rel top leftTree = leftTree) by apply rel_top2.",
                        "VernacExtend",
                        "396f6901eba548ee77f6b47a600dfbeafb869b84"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "assert (rel top rightTree = rightTree) by apply rel_top2.",
                        "VernacExtend",
                        "12cd823035c144be731452c6d44ad4b9ef3b73f1"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "assert (proj1_sig (rel leftTree a) = mkCanon (Node (proj1_sig a) (Leaf false))).",
                        "VernacExtend",
                        "d41accd458faf1beeabd613cbb0bc4468ddbbda8"
                    ]
                },
                {
                    "command": [
                        "destruct a; unfold leftTree.",
                        "VernacExtend",
                        "f8059665eb381026cf4f2cde4867e52406caa5dd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (rel_classification);intro.",
                        "VernacExtend",
                        "51c82dd296e46df457d516ed207ddb94863dfb6c"
                    ]
                },
                {
                    "command": [
                        "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror (true = false) (Logic.eq_refl false)) (conj (or_introl (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) x c)).",
                        "VernacExtend",
                        "aef33fc52c362d686a02269b002e4c15f9b20510"
                    ]
                },
                {
                    "command": [
                        "icase X.",
                        "VernacExtend",
                        "cb952cd283298e89cc9c88570eac9010e28a245f"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "compute;trivial.",
                        "VernacExtend",
                        "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b0.",
                        "VernacExtend",
                        "ca2770c77260a1c6c7f0c777f72d945c8436f889"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "assert (proj1_sig (rel rightTree b) = mkCanon (Node (Leaf false) (proj1_sig b))).",
                        "VernacExtend",
                        "0f636328a5f8c5572ca06063ae10a0fc3ef62744"
                    ]
                },
                {
                    "command": [
                        "destruct b; unfold rightTree.",
                        "VernacExtend",
                        "184e757046d91f7e32d169b4a25193cd81791eeb"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (rel_classification);intro.",
                        "VernacExtend",
                        "51c82dd296e46df457d516ed207ddb94863dfb6c"
                    ]
                },
                {
                    "command": [
                        "specialize ( X (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) x c)).",
                        "VernacExtend",
                        "04d47172454a0fc22167b681a97bdb9dee3daff7"
                    ]
                },
                {
                    "command": [
                        "icase X.",
                        "VernacExtend",
                        "cb952cd283298e89cc9c88570eac9010e28a245f"
                    ]
                },
                {
                    "command": [
                        "destruct a0.",
                        "VernacExtend",
                        "a0487b579f70f8f2c661f4b75c8b4e6474630618"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "compute;trivial.",
                        "VernacExtend",
                        "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
                    ]
                },
                {
                    "command": [
                        "destruct a0.",
                        "VernacExtend",
                        "a0487b579f70f8f2c661f4b75c8b4e6474630618"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "rewrite mkCanon_union.",
                        "VernacExtend",
                        "b8afebc4fb124f16db47fd3a0aecd5911942fe62"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute.",
                        "VernacExtend",
                        "d885c24d3f94d08eb13f83b39d536446e5905fb9"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite union_commute.",
                        "VernacExtend",
                        "d885c24d3f94d08eb13f83b39d536446e5905fb9"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_check",
            "line_nb": 1952,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase y.",
                        "VernacExtend",
                        "39ee12dccf9b7c0cc8721df66556a7ad7898ff6d"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0.",
                        "VernacExtend",
                        "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
                    ]
                },
                {
                    "command": [
                        "left;exists true;auto.",
                        "VernacExtend",
                        "2ddaa07442f1e00bd2cf309ed9eb416427c493f7"
                    ]
                },
                {
                    "command": [
                        "right;compute;tauto.",
                        "VernacExtend",
                        "f79472d60e6d21f821812ddc2a6773e450c381dc"
                    ]
                },
                {
                    "command": [
                        "right;compute;tauto.",
                        "VernacExtend",
                        "f79472d60e6d21f821812ddc2a6773e450c381dc"
                    ]
                },
                {
                    "command": [
                        "left;exists false;auto.",
                        "VernacExtend",
                        "ed501193df873fd3ae4caf54ba87d6911a3c5f0b"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_splice_L",
            "line_nb": 1966,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (splice_rewrite a b);intro.",
                        "VernacExtend",
                        "0e83279f9c97175ea3b50457abc0999487b3df7d"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "unfold Lsh,fst,split.",
                        "VernacExtend",
                        "3d52cf754c79ee3b24fda11b0808e7657954926f"
                    ]
                },
                {
                    "command": [
                        "assert (rel top leftTree = leftTree) by apply rel_top2.",
                        "VernacExtend",
                        "396f6901eba548ee77f6b47a600dfbeafb869b84"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "unfold leftTree.",
                        "VernacExtend",
                        "e2c2f538aa2d26608b71a15c88f60f4ef97a8dcf"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror (true = false) (Logic.eq_refl false)) (conj (or_introl (false = true) (Logic.eq_refl true)) (conj I I))))= (top,bot)).",
                        "VernacExtend",
                        "c92f31e64994aa0040f77b70b15b7499b891acf3"
                    ]
                },
                {
                    "command": [
                        "compute;apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "9652fbf03255545df52a368599fbbd8e892e02fe"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "assert (decompose ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (proj1_sig a) (proj1_sig b))) (mkCanon_correct (Node (proj1_sig a) (proj1_sig b))))) = (a,b)).",
                        "VernacExtend",
                        "04aea51ba77eaf54ff6a9fea64e10fd5f33f6796"
                    ]
                },
                {
                    "command": [
                        "destruct a,b.",
                        "VernacExtend",
                        "0e658611d817547f372dbd093d84556cba787228"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig.",
                        "VernacExtend",
                        "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_check _ _ c c0);intro.",
                        "VernacExtend",
                        "ee811771ba979cfc2740911cca4c1ecbe41d33d1"
                    ]
                },
                {
                    "command": [
                        "icase H.",
                        "VernacExtend",
                        "4ce0bab02f31ebb323d7e036bc2a6b892fe6087f"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? ?]];subst.",
                        "VernacExtend",
                        "a3dbb07ccbfbbcb43f61c08922f4ceb8847c6440"
                    ]
                },
                {
                    "command": [
                        "icase x1;unfold decompose;apply injective_projections; simpl; apply exist_ext;simpl;trivial.",
                        "VernacExtend",
                        "76f9d918845ac0701eac4480e010f3ccf6f3664d"
                    ]
                },
                {
                    "command": [
                        "assert ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))) = exist (fun t0 => canonicalTree t0) (Node x x0) H).",
                        "VernacExtend",
                        "4b8646efab91c13610dfac1dd250455d9d07296c"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_identity.",
                        "VernacExtend",
                        "50e1638254cb5c0364ae7e946f67b824fe968c15"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "unfold decompose.",
                        "VernacExtend",
                        "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? [? ?]]].",
                        "VernacExtend",
                        "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;simpl;apply exist_ext;trivial.",
                        "VernacExtend",
                        "dd4c4e90bc556ef16824598d357116dea7807c33"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "unfold top;simpl.",
                        "VernacExtend",
                        "3134f9e28a34afc8076fa007deef1ac021f565d7"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_splice_R",
            "line_nb": 1999,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (splice_rewrite a b);intro.",
                        "VernacExtend",
                        "0e83279f9c97175ea3b50457abc0999487b3df7d"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "unfold Rsh,snd,split.",
                        "VernacExtend",
                        "a36ce32c38fbc3d7fc46f53df5bc583b2b19a5f0"
                    ]
                },
                {
                    "command": [
                        "assert (rel top rightTree = rightTree) by apply rel_top2.",
                        "VernacExtend",
                        "12cd823035c144be731452c6d44ad4b9ef3b73f1"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "unfold rightTree.",
                        "VernacExtend",
                        "388f003d57ee65b01f21317125df4004a5254f23"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) = (bot,top)).",
                        "VernacExtend",
                        "6f7c98194fb9d4b89a605b73066a8ea24403d6ca"
                    ]
                },
                {
                    "command": [
                        "compute;apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "9652fbf03255545df52a368599fbbd8e892e02fe"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H;clear H.",
                        "VernacExtend",
                        "a60de8fe6903e17bd74acece0951cbb10e6ef842"
                    ]
                },
                {
                    "command": [
                        "assert (decompose ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (proj1_sig a) (proj1_sig b))) (mkCanon_correct (Node (proj1_sig a) (proj1_sig b))))) = (a,b)).",
                        "VernacExtend",
                        "04aea51ba77eaf54ff6a9fea64e10fd5f33f6796"
                    ]
                },
                {
                    "command": [
                        "destruct a,b.",
                        "VernacExtend",
                        "0e658611d817547f372dbd093d84556cba787228"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig.",
                        "VernacExtend",
                        "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_check _ _ c c0);intro.",
                        "VernacExtend",
                        "ee811771ba979cfc2740911cca4c1ecbe41d33d1"
                    ]
                },
                {
                    "command": [
                        "icase H.",
                        "VernacExtend",
                        "4ce0bab02f31ebb323d7e036bc2a6b892fe6087f"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? ?]];subst.",
                        "VernacExtend",
                        "a3dbb07ccbfbbcb43f61c08922f4ceb8847c6440"
                    ]
                },
                {
                    "command": [
                        "icase x1;unfold decompose;apply injective_projections; simpl; apply exist_ext;simpl;trivial.",
                        "VernacExtend",
                        "76f9d918845ac0701eac4480e010f3ccf6f3664d"
                    ]
                },
                {
                    "command": [
                        "assert ((exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))) = exist (fun t0 => canonicalTree t0) (Node x x0) H).",
                        "VernacExtend",
                        "4b8646efab91c13610dfac1dd250455d9d07296c"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_identity.",
                        "VernacExtend",
                        "50e1638254cb5c0364ae7e946f67b824fe968c15"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "unfold decompose.",
                        "VernacExtend",
                        "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? [? ?]]].",
                        "VernacExtend",
                        "f7c830f4341e5acea7c0e14114c9964685e4dfb7"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;simpl;apply exist_ext;trivial.",
                        "VernacExtend",
                        "dd4c4e90bc556ef16824598d357116dea7807c33"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "unfold bot;simpl.",
                        "VernacExtend",
                        "d4dcd819461ce9f4efd16ab8aefa176d3aa89c8d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contains_Lsh_e",
            "line_nb": 2032,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "unfold Lsh,fst in *.",
                        "VernacExtend",
                        "2194722d30d4b6c7c2c5a6b4abef9325bd9b3e1b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "assert (rel top leftTree = leftTree) by apply rel_top2.",
                        "VernacExtend",
                        "396f6901eba548ee77f6b47a600dfbeafb869b84"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in *;clear H0.",
                        "VernacExtend",
                        "9a299ddcfa3f1ae3d6d642f1a77f90341d0457ad"
                    ]
                },
                {
                    "command": [
                        "unfold leftTree in *.",
                        "VernacExtend",
                        "30086b786015517702dda58f320396e76c59ec31"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "assert (CT: canonicalTree (Node (Leaf true) (Leaf false))).",
                        "VernacExtend",
                        "6fca6243260d1b4953c9d167b569e491a60d0659"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "left; reflexivity.",
                        "VernacExtend",
                        "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
                    ]
                },
                {
                    "command": [
                        "assert (@decompose t _ (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror eq_refl) (conj (or_introl eq_refl) (conj I I)))) = (top,bot)).",
                        "VernacExtend",
                        "77e178e726022c68f561852e9d5aa6d563336bb3"
                    ]
                },
                {
                    "command": [
                        "compute;apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "9652fbf03255545df52a368599fbbd8e892e02fe"
                    ]
                },
                {
                    "command": [
                        "simpl nonFullTree in H0; simpl nonEmptyTree in H0.",
                        "VernacExtend",
                        "56d36d3f1190c9ff5c97d7274dc65f0fa8539a0f"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "clear H0.",
                        "VernacExtend",
                        "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_correct (Node (Leaf true) (Leaf false))) as [? [? [? ?]]].",
                        "VernacExtend",
                        "f7c666e58a6db4bb36cc98e7099c276545d133a5"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;trivial.",
                        "VernacExtend",
                        "57a542efd5803f9f450ee003dbdb7ed63247566f"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (BAF.lub (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (conj (or_intror eq_refl) (conj (or_introl eq_refl) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0))))) = (top, exist (fun t0 : ShareTree => canonicalTree t0) x2 c0)).",
                        "VernacExtend",
                        "09189235e439c3111083b6dc25eb9f5baa0d1c6c"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig.",
                        "VernacExtend",
                        "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
                    ]
                },
                {
                    "command": [
                        "assert (union_tree (Node (Leaf true) (Leaf false)) (Node x1 x2) = Node (Leaf true) x2).",
                        "VernacExtend",
                        "bc9d5b25ec4cbf0007849560e6b98eb19c95c41c"
                    ]
                },
                {
                    "command": [
                        "unfold union_tree;trivial.",
                        "VernacExtend",
                        "139d3c974a670b458f18b50b443ad498cabb9e91"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;clear H0.",
                        "VernacExtend",
                        "fabeca7858ebb717928a37dd7ab85d95711cf62f"
                    ]
                },
                {
                    "command": [
                        "icase x2.",
                        "VernacExtend",
                        "bcd0f33732012369c5e1e3dcf6222f010fea2811"
                    ]
                },
                {
                    "command": [
                        "icase b; simpl.",
                        "VernacExtend",
                        "1a1e28fecc40b77f0153335d65cc99499468e23a"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_correct (Node (Leaf true) (Leaf false))) as [? [? [? ?]]].",
                        "VernacExtend",
                        "f7c666e58a6db4bb36cc98e7099c276545d133a5"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "assert (canonicalTree (Node (Leaf true) (Node x2_1 x2_2) )).",
                        "VernacExtend",
                        "503649f4b13a6944988f53b46d63111d01ca6f57"
                    ]
                },
                {
                    "command": [
                        "destruct c0 as [? [? [? ?]]]; firstorder.",
                        "VernacExtend",
                        "94f51043d42df58ca81c22c28fa3683459ecce40"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (Leaf true) (Node x2_1 x2_2))) (mkCanon_correct (Node (Leaf true) (Node x2_1 x2_2)))= (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Node x2_1 x2_2)) H0)).",
                        "VernacExtend",
                        "f84c9f364ebba75e179579551e09feb0b5384545"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct c0 as [? [? [? ?]]].",
                        "VernacExtend",
                        "f5a4c8267f800fd26ac898e46507f0511b361079"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity x2_1 c0);intro.",
                        "VernacExtend",
                        "d0011caf29c16440505c1783605aab718788c6ed"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity x2_2 c1);intro.",
                        "VernacExtend",
                        "8c2f5b35d5a9291fc29db3331f125210f378ee12"
                    ]
                },
                {
                    "command": [
                        "rewrite H1;rewrite H2.",
                        "VernacExtend",
                        "8d018a8547fa22724706a4da5d7a7d5d3ce49c8e"
                    ]
                },
                {
                    "command": [
                        "icase x2_1;icase x2_2.",
                        "VernacExtend",
                        "6f3e71770c4f993227a12af16c58cbf77e70b43b"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0; simpl; elimtype False;firstorder.",
                        "VernacExtend",
                        "a6891d29f3d4362c677878021b62b8396b28ff53"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? [? [? ?]]].",
                        "VernacExtend",
                        "8e14a1b2f90a3a031837528c5f64c0afdfecd86c"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "change BAF.lub with lub in H0.",
                        "VernacExtend",
                        "102ca50a2b334ff87832e47837fd4fc4e110bb91"
                    ]
                },
                {
                    "command": [
                        "simpl nonFullTree in H0|-*; simpl nonEmptyTree in H0|-*.",
                        "VernacExtend",
                        "c541804dc4c2d06fc528c22b9a55f7aa94c2d99e"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "unfold bot.",
                        "VernacExtend",
                        "219ba0db17a375ffc83549c360f7fdc6200b973f"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contains_Rsh_e",
            "line_nb": 2094,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "unfold Rsh,snd in *.",
                        "VernacExtend",
                        "27cf57024e2f379190654863e7b8de6f34e4893f"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "assert (rel top rightTree = rightTree) by apply rel_top2.",
                        "VernacExtend",
                        "12cd823035c144be731452c6d44ad4b9ef3b73f1"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in *;clear H0.",
                        "VernacExtend",
                        "9a299ddcfa3f1ae3d6d642f1a77f90341d0457ad"
                    ]
                },
                {
                    "command": [
                        "unfold rightTree in *.",
                        "VernacExtend",
                        "4add9440829d6f131233fdb06e39f0cb8b39ebd3"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) = (bot,top)).",
                        "VernacExtend",
                        "6f7c98194fb9d4b89a605b73066a8ea24403d6ca"
                    ]
                },
                {
                    "command": [
                        "compute;apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "9652fbf03255545df52a368599fbbd8e892e02fe"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;clear H0.",
                        "VernacExtend",
                        "fabeca7858ebb717928a37dd7ab85d95711cf62f"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_correct (Node (Leaf false) (Leaf true))) as [? [? [? ?]]].",
                        "VernacExtend",
                        "e416e6f14e2fc3af1b377d5b1a2984fb301fedda"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;trivial.",
                        "VernacExtend",
                        "57a542efd5803f9f450ee003dbdb7ed63247566f"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "assert (decompose (BAF.lub (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (conj (or_introl (true = false) (Logic.eq_refl false)) (conj (or_intror (false = true) (Logic.eq_refl true)) (conj I I)))) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) (conj n (conj n0 (conj c c0))))) = (exist (fun t0 : ShareTree => canonicalTree t0) x1 c, top)).",
                        "VernacExtend",
                        "d55db6da713efde6b2f2bb68e1e2824f3d317534"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig.",
                        "VernacExtend",
                        "d2595a1637601a7d6dfaa0a979998d47fad4f34b"
                    ]
                },
                {
                    "command": [
                        "assert (union_tree (Node (Leaf false) (Leaf true)) (Node x1 x2) = Node x1 (Leaf true)).",
                        "VernacExtend",
                        "493b3c09bbefe171c59fa757ff82bcab3cbd2fed"
                    ]
                },
                {
                    "command": [
                        "unfold union_tree;trivial.",
                        "VernacExtend",
                        "139d3c974a670b458f18b50b443ad498cabb9e91"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;clear H0.",
                        "VernacExtend",
                        "fabeca7858ebb717928a37dd7ab85d95711cf62f"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b; simpl.",
                        "VernacExtend",
                        "1a1e28fecc40b77f0153335d65cc99499468e23a"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "destruct (mkCanon_correct (Node (Leaf false) (Leaf true))) as [? [? [? ?]]].",
                        "VernacExtend",
                        "e416e6f14e2fc3af1b377d5b1a2984fb301fedda"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "assert (canonicalTree (Node (Node x1_1 x1_2) (Leaf true))).",
                        "VernacExtend",
                        "7fccac8d79ca4b4130269df049eebc835f9f5eca"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]]; firstorder.",
                        "VernacExtend",
                        "ffcc0180227c8605f6ceddf3b749661c61f1becd"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node (Node x1_1 x1_2) (Leaf true))) (mkCanon_correct (Node (Node x1_1 x1_2) (Leaf true))) = (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Node x1_1 x1_2) (Leaf true)) H0)).",
                        "VernacExtend",
                        "06fd3ddcf61fb13423c1906284a5c880e804d288"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity x1_1 c);intro.",
                        "VernacExtend",
                        "8cb65826a9048759da8d2bd1e591d31d01a147c6"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity x1_2 c1);intro.",
                        "VernacExtend",
                        "f940f9abd55f759f9d863c23fb06e6c7d27cad9c"
                    ]
                },
                {
                    "command": [
                        "rewrite H1;rewrite H2.",
                        "VernacExtend",
                        "8d018a8547fa22724706a4da5d7a7d5d3ce49c8e"
                    ]
                },
                {
                    "command": [
                        "icase x1_1;icase x1_2.",
                        "VernacExtend",
                        "7e65a7dc60a690af213c9f3742527f731172d53d"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0; simpl; elimtype False;firstorder.",
                        "VernacExtend",
                        "a6891d29f3d4362c677878021b62b8396b28ff53"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? [? [? ?]]].",
                        "VernacExtend",
                        "8e14a1b2f90a3a031837528c5f64c0afdfecd86c"
                    ]
                },
                {
                    "command": [
                        "apply injective_projections;apply exist_ext;trivial.",
                        "VernacExtend",
                        "ba221388fbd7c3cfcdbf9d6bd9a33bcf5e0ee985"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree in *.",
                        "VernacExtend",
                        "a6c524a23c383506f0e159b8f618ee9360587590"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "unfold bot.",
                        "VernacExtend",
                        "219ba0db17a375ffc83549c360f7fdc6200b973f"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compose_canon1",
            "line_nb": 2163,
            "steps": [
                {
                    "command": [
                        "intros; try icase b1;try icase b2;compute in *;tauto.",
                        "VernacExtend",
                        "4e28328848302e3ec36645177e06c185f52346db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compose_canon2",
            "line_nb": 2166,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl; firstorder.",
                        "VernacExtend",
                        "5569e2450a28f539c20b894ac76f01e7495507bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compose_canon3",
            "line_nb": 2170,
            "steps": [
                {
                    "command": [
                        "intros; simpl; firstorder.",
                        "VernacExtend",
                        "b938cb65215c2fcf232f3d8b0f024c5440a41e2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compose_canon4",
            "line_nb": 2173,
            "steps": [
                {
                    "command": [
                        "intros; simpl; firstorder.",
                        "VernacExtend",
                        "b938cb65215c2fcf232f3d8b0f024c5440a41e2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_height_diff",
            "line_nb": 2177,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intro H1;apply H.",
                        "VernacExtend",
                        "4fb6f967aeadb13b6734610be93a2631b261d70b"
                    ]
                },
                {
                    "command": [
                        "rewrite H1;trivial.",
                        "VernacExtend",
                        "898e530e8e03fcfe5f774f6e2b5b2f67998e5e5a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTreeP_subL",
            "line_nb": 2182,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ [? _]].",
                        "VernacExtend",
                        "66bb7ff9891c688c7a02273ef27b47e5048dbe9f"
                    ]
                },
                {
                    "command": [
                        "replace (n-0) with n in * by omega.",
                        "VernacExtend",
                        "e162c0ea377dfce1731dc86f98c33bd402666849"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTreeP_subR",
            "line_nb": 2189,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ [_ ?]].",
                        "VernacExtend",
                        "59de427df65ad789f1986ba3ee4953af0c632d32"
                    ]
                },
                {
                    "command": [
                        "replace (n-0) with n in * by omega.",
                        "VernacExtend",
                        "e162c0ea377dfce1731dc86f98c33bd402666849"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTreeP_height",
            "line_nb": 2196,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct t0;inversion H.",
                        "VernacExtend",
                        "f6601ad380e88950478849592307f3862e4181de"
                    ]
                },
                {
                    "command": [
                        "simpl;trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ [? ?]].",
                        "VernacExtend",
                        "59a28fd0dab9ea01996c71a819df927014cefc64"
                    ]
                },
                {
                    "command": [
                        "replace (n-0) with n in * by omega.",
                        "VernacExtend",
                        "e162c0ea377dfce1731dc86f98c33bd402666849"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_1 H);intro.",
                        "VernacExtend",
                        "ad49a2831c426463d6847a880555576662f9216c"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_2 H0);intro.",
                        "VernacExtend",
                        "bb83c1ea2be793ad5f432df1e49654880446a8f0"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite max_l; omega.",
                        "VernacExtend",
                        "101344384cc2e7a2b2f1e7d6d1a8d3ea172f4528"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTreeP_combine",
            "line_nb": 2213,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "split; replace (n-0) with n in * by omega; trivial.",
                        "VernacExtend",
                        "4fe64b1351c890be10703bdcdf8b810da5ccbf07"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTree_double",
            "line_nb": 2220,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold fullTree in *.",
                        "VernacExtend",
                        "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
                    ]
                },
                {
                    "command": [
                        "remember (tree_heightP (Node t0 t0)).",
                        "VernacExtend",
                        "7f6cf992de777037514e92123eab0a86dacefa19"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqn.",
                        "VernacExtend",
                        "17fed2902a2e0b05f608d15624a7081824b4a9a7"
                    ]
                },
                {
                    "command": [
                        "rewrite max_l in Heqn; trivial.",
                        "VernacExtend",
                        "1f1c8965f6e60151df9d1ca4bf21a458d5362e4c"
                    ]
                },
                {
                    "command": [
                        "destruct (tree_heightP t0); inversion Heqn.",
                        "VernacExtend",
                        "52a2912541cfca6ed75ed16432155c34c579c670"
                    ]
                },
                {
                    "command": [
                        "apply fullTreeP_combine; simpl in Heqn; rewrite max_l in Heqn;trivial; assert (n = tree_heightP t0) by omega; rewrite H0; trivial.",
                        "VernacExtend",
                        "5f43fe139928e8ed7553be4dcc272b79dc5ed1a8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fullTree_sub",
            "line_nb": 2230,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold fullTree in *.",
                        "VernacExtend",
                        "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
                    ]
                },
                {
                    "command": [
                        "remember (tree_heightP (Node t1 t2)).",
                        "VernacExtend",
                        "15c0b7a43bdfc9f673f1e9b8e995dbfc7f744c99"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqn.",
                        "VernacExtend",
                        "17fed2902a2e0b05f608d15624a7081824b4a9a7"
                    ]
                },
                {
                    "command": [
                        "destruct ( max (tree_heightP t1) (tree_heightP t2)); inversion Heqn.",
                        "VernacExtend",
                        "0432d44c2d42ee54c2a37b3cd5d7a673cb04990c"
                    ]
                },
                {
                    "command": [
                        "generalize (fullTreeP_subL n t1 t2 H);intro.",
                        "VernacExtend",
                        "765fbd249a31207b122be128cab437e94d227e0a"
                    ]
                },
                {
                    "command": [
                        "generalize (fullTreeP_subR n t1 t2 H);intro.",
                        "VernacExtend",
                        "a4a836432e515c0040382d8c5b3238cb7c3d79f9"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP t1 = n /\\ tree_heightP t2 = n).",
                        "VernacExtend",
                        "2337af4ea7e4ca144ac0ec94432e49fee96f9de2"
                    ]
                },
                {
                    "command": [
                        "generalize (fullTreeP_height n t1 H0);intro.",
                        "VernacExtend",
                        "c2aeb2de725263b1074c44385aedd7d581e9146a"
                    ]
                },
                {
                    "command": [
                        "generalize (fullTreeP_height n t2 H1);intro.",
                        "VernacExtend",
                        "bb0ffe3ae747d23463f4e985750f2396df8cf97d"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct H as [? [? ?]].",
                        "VernacExtend",
                        "7b80d34d0c991fb27b92313d17ea8675f1173807"
                    ]
                },
                {
                    "command": [
                        "unfold fullTree in *.",
                        "VernacExtend",
                        "9a0a9d7e6b802b44e1aa788fd3421f565dc80875"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in *.",
                        "VernacExtend",
                        "6efc0fda494639e9bce9f9de4bc64aa53e239e85"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t2) (tree_heightP t2));omega.",
                        "VernacExtend",
                        "18badb8d47cf1870472f62e3bf7973b1390300c1"
                    ]
                },
                {
                    "command": [
                        "rewrite max_l;trivial.",
                        "VernacExtend",
                        "29ea12136ffafd0a981512684744da0684f86222"
                    ]
                },
                {
                    "command": [
                        "replace (tree_heightP t2 + 1 - 1) with (tree_heightP t2) in * by omega.",
                        "VernacExtend",
                        "47e1831d2d260c85a16a6ee0b90dbff4f96edfd5"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_height",
            "line_nb": 2260,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "destruct t0;inversion H.",
                        "VernacExtend",
                        "f6601ad380e88950478849592307f3862e4181de"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct t0;inversion H.",
                        "VernacExtend",
                        "f6601ad380e88950478849592307f3862e4181de"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn (Leaf b) s Heqo).",
                        "VernacExtend",
                        "524ae8048da932b4e4300089a70d5349fdd7d21b"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite max_l;trivial.",
                        "VernacExtend",
                        "29ea12136ffafd0a981512684744da0684f86222"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n t0_1).",
                        "VernacExtend",
                        "4ac7291bc276182eda510a0c12e659d6283086b8"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n t0_2).",
                        "VernacExtend",
                        "eec2681173bb0db737703314eb90877f3c13e66c"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo0.",
                        "VernacExtend",
                        "68297959e7b7f7d51288f85870128a82c5b9160a"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_1 s Heqo);intro.",
                        "VernacExtend",
                        "089c8c7e05acb7afdef1b25b33adec2a74480e8d"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_2 s0 Heqo0);intro.",
                        "VernacExtend",
                        "2f6119033cd88ae30c7a1ad6870820b23350da78"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite max_l;trivial.",
                        "VernacExtend",
                        "29ea12136ffafd0a981512684744da0684f86222"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_correct",
            "line_nb": 2292,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct t0;inversion H.",
                        "VernacExtend",
                        "f6601ad380e88950478849592307f3862e4181de"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn (Leaf b) s Heqo).",
                        "VernacExtend",
                        "524ae8048da932b4e4300089a70d5349fdd7d21b"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "apply fullTree_double;trivial.",
                        "VernacExtend",
                        "d70e93b149375785ed777c8609a4e50bf21d68b0"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n t0_1).",
                        "VernacExtend",
                        "4ac7291bc276182eda510a0c12e659d6283086b8"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n t0_2).",
                        "VernacExtend",
                        "eec2681173bb0db737703314eb90877f3c13e66c"
                    ]
                },
                {
                    "command": [
                        "destruct o.",
                        "VernacExtend",
                        "7e45d273082b90e03f5f97cde65b5f989324a175"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo0.",
                        "VernacExtend",
                        "68297959e7b7f7d51288f85870128a82c5b9160a"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_1 s Heqo);intro.",
                        "VernacExtend",
                        "089c8c7e05acb7afdef1b25b33adec2a74480e8d"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn t0_2 s0 Heqo0);intro.",
                        "VernacExtend",
                        "2f6119033cd88ae30c7a1ad6870820b23350da78"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "generalize (fullTree_sub s s0);intro.",
                        "VernacExtend",
                        "a6a09c15c246cf372827a2f3450a3a0bbef61477"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_height n t0_1 s Heqo);intro.",
                        "VernacExtend",
                        "75f56f226b266b81c54d224b108f3a7aaf34d739"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_height n t0_2 s0 Heqo0);intro.",
                        "VernacExtend",
                        "5bf64b5a6ca9dda7b6d5a7f739a66c7167cfe022"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_mkCanon",
            "line_nb": 2327,
            "steps": [
                {
                    "command": [
                        "induction n;intros; icase t0;icase t'; inv H;trivial.",
                        "VernacExtend",
                        "d2ce13781ec0238b04474d6b13aca5f4f4ae815f"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "139412c3c235384eee87742c728752d11d38f05a"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "ba3469f670e3c2395a7a3e4a62f074fb3a7cceb1"
                    ]
                },
                {
                    "command": [
                        "icase o.",
                        "VernacExtend",
                        "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ Heqo);intro.",
                        "VernacExtend",
                        "3c5dc0b4af366adce56992347aefc82870e3a4f4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n t0_1); icase (mkFull n t0_2).",
                        "VernacExtend",
                        "e7dfc5b52c17f6ac62c2b6f7be63df8d4bfb3154"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n t0_1); remember (mkFull n t0_2).",
                        "VernacExtend",
                        "9ea04dd2a852b16a64f5e63e58c22e661fd0ea14"
                    ]
                },
                {
                    "command": [
                        "icase o;icase o0.",
                        "VernacExtend",
                        "efc863315bd6375d7e89a1c9d8ae1db5ed5244f6"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo, Heqo0.",
                        "VernacExtend",
                        "2306a47a0eb7714afe2eee703bc366e880159bad"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ Heqo);intro H1.",
                        "VernacExtend",
                        "ff53a1633f4b77a5c937e1edc9bd366d40d1fc2c"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ Heqo0);intro H2.",
                        "VernacExtend",
                        "ca54ddaefb43877475023594220195b4f7b586fd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_split",
            "line_nb": 2350,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split; remember (mkFull n t1); remember (mkFull n t2); icase o;icase o0;intros.",
                        "VernacExtend",
                        "d8adee10f12438fe651432ca0fbe1038b13fd0e7"
                    ]
                },
                {
                    "command": [
                        "inv H;tauto.",
                        "VernacExtend",
                        "c067a0d6463b36c3816a2db8b7d71ae906392923"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2];inv H1; inv H2;trivial.",
                        "VernacExtend",
                        "d150f515330d38ebb7fb3572a63e0370393064b7"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2];inv H1;inv H2.",
                        "VernacExtend",
                        "671e6752a5251b0217c4a690e660c91db08ed836"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2];inv H1;inv H2.",
                        "VernacExtend",
                        "671e6752a5251b0217c4a690e660c91db08ed836"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2];inv H1;inv H2.",
                        "VernacExtend",
                        "671e6752a5251b0217c4a690e660c91db08ed836"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_mkCanon_simpl",
            "line_nb": 2360,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t1);icase (mkCanon t2).",
                        "VernacExtend",
                        "bd811165e0811144726988c940e4a7a2b69f2333"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0);subst;trivial.",
                        "VernacExtend",
                        "5a1c117e7ceab212772596d504f35e9331e3755c"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b0)).",
                        "VernacExtend",
                        "172fc4dc9d2d67273b159200591867e9cc2c29c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_None",
            "line_nb": 2367,
            "steps": [
                {
                    "command": [
                        "induction n;intros; icase t0.",
                        "VernacExtend",
                        "db0ff5335e9b1ba61e5b9c663c76103afc6e6522"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (n < max (tree_heightP t0_1) (tree_heightP t0_2)) by omega.",
                        "VernacExtend",
                        "eb3a0d6b620cdb08c5fb498e852ee1d646ba9edd"
                    ]
                },
                {
                    "command": [
                        "generalize (Nat.max_lt_iff);intro.",
                        "VernacExtend",
                        "cb739092ddf4ffd5d4a3f7efb73570880fb78ea7"
                    ]
                },
                {
                    "command": [
                        "specialize ( H1 (tree_heightP t0_1) (tree_heightP t0_2) n).",
                        "VernacExtend",
                        "4d4d32742e0f75d5ae595bbbb76286cb43ca7557"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? _].",
                        "VernacExtend",
                        "5b34589a2b4f60317a6fa0bbb0fcc15c72e975c5"
                    ]
                },
                {
                    "command": [
                        "specialize ( H1 H0).",
                        "VernacExtend",
                        "c30535d0a736db8f5e79c68666236ba4942df923"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn t0_1 H1).",
                        "VernacExtend",
                        "b0b267339510032d0a6adabb257091354018c0d4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHn; trivial.",
                        "VernacExtend",
                        "4e962862d28a8f66550c88f4f83b0ddc4e5c2840"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn t0_2 H1).",
                        "VernacExtend",
                        "08ae425e2799018d6e9c435b49d81d09ed5c1916"
                    ]
                },
                {
                    "command": [
                        "simpl;rewrite IHn.",
                        "VernacExtend",
                        "0af9eeb901f7eb58c6970ee73e02aae201e6b905"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n t0_1);trivial.",
                        "VernacExtend",
                        "dbcc413e447e92ac955cc167dfc18ebe137fbdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFull_Some",
            "line_nb": 2385,
            "steps": [
                {
                    "command": [
                        "induction n;intros; icase t0.",
                        "VernacExtend",
                        "db0ff5335e9b1ba61e5b9c663c76103afc6e6522"
                    ]
                },
                {
                    "command": [
                        "exists (Leaf b).",
                        "VernacExtend",
                        "c2537af1a693c04da82fff1d7e0c25eb1ef512a7"
                    ]
                },
                {
                    "command": [
                        "compute;trivial.",
                        "VernacExtend",
                        "2842dad8a3e339eb2afbd8c0e0a35994ef6d4fa8"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "elimtype False;omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "assert (n >= tree_heightP (Leaf b)).",
                        "VernacExtend",
                        "e9ec835b917443b45e2fda1f0984229458acdffe"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn (Leaf b) H0).",
                        "VernacExtend",
                        "2e81cbceb83ee4dca85d279d49772eefcbeee306"
                    ]
                },
                {
                    "command": [
                        "destruct IHn.",
                        "VernacExtend",
                        "fbccbe66efd893d419c71173f3fec415f9a1a6e2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "exists (Node x x).",
                        "VernacExtend",
                        "16271e4391aa2389e1509d37d6f7ef54d65f568f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (n >= max (tree_heightP t0_1) (tree_heightP t0_2)) by omega.",
                        "VernacExtend",
                        "a800c24ca2248281671edd0d379858b3be763906"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP t0_1) (tree_heightP t0_2));intro.",
                        "VernacExtend",
                        "0ebefd99b6e18cd53aab4be3e068fd9795b4679a"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP t0_1) (tree_heightP t0_2));intro.",
                        "VernacExtend",
                        "7cd9174d682b535f64e4f235e59b0c0a743cee5a"
                    ]
                },
                {
                    "command": [
                        "assert (n >= tree_heightP t0_1) by omega.",
                        "VernacExtend",
                        "8ef5049a7d6fd0e2e51179b71a437f65d8b8c4d6"
                    ]
                },
                {
                    "command": [
                        "assert (n >= tree_heightP t0_2) by omega.",
                        "VernacExtend",
                        "9e94e6b2f56f2ff717cb5f7af6407c84e43663fd"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ H3);intro.",
                        "VernacExtend",
                        "9cbb34800a9b9f446a784fbe9b893fdd8168ed31"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ H4);intro.",
                        "VernacExtend",
                        "cb5427d35e5a2ace42cf9d3b9c38b0c90e708b86"
                    ]
                },
                {
                    "command": [
                        "destruct H5.",
                        "VernacExtend",
                        "ed9c2c1b0fd20c14ad03acc37362cc2c315199ed"
                    ]
                },
                {
                    "command": [
                        "destruct H6.",
                        "VernacExtend",
                        "bc461651d0c512c537c7e617c1056b84fca2b832"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "rewrite H6.",
                        "VernacExtend",
                        "ff6a429844c59cba51300abb872460dbdbab812d"
                    ]
                },
                {
                    "command": [
                        "exists (Node x x0);trivial.",
                        "VernacExtend",
                        "e856b68287684ecb577f6175b1f4c3a5af0f426d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_eq_split",
            "line_nb": 2414,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t1);icase (mkCanon t2); icase (mkCanon t1');icase (mkCanon t2'); try icase (bool_dec b b0);try icase (bool_dec b1 b2);inversion H;try subst;auto; try icase (bool_dec b0 b1).",
                        "VernacExtend",
                        "fb86cd6eb4db5661e7904707119c8bcbf0a0ff4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_simpl",
            "line_nb": 2419,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_double t1);intro.",
                        "VernacExtend",
                        "cd1a2d5cbfe1c709b18aa0b26dfd370ac006dee3"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_double t2);intro.",
                        "VernacExtend",
                        "0852dea08a0dd812346442de42b5bfaaafbb8eba"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t1);icase (mkCanon t2).",
                        "VernacExtend",
                        "bd811165e0811144726988c940e4a7a2b69f2333"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_height",
            "line_nb": 2428,
            "steps": [
                {
                    "command": [
                        "induction t0;intros.",
                        "VernacExtend",
                        "d5b57f6e82495304d613378e5f8ec6391beeb195"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf b);intro.",
                        "VernacExtend",
                        "09fc7ae890766f9f57b21006218e95f87b4b4707"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0.",
                        "VernacExtend",
                        "6f58b4b0368431f7b1e1aba2ba3fa37dd308e428"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase t'.",
                        "VernacExtend",
                        "42f85af8b2f3076293ad1936857e7cce5ddc0910"
                    ]
                },
                {
                    "command": [
                        "symmetry in H.",
                        "VernacExtend",
                        "5ef7cf40d6f1a8a9f9fae5220b667eef42ea5534"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ H);intro.",
                        "VernacExtend",
                        "3ec4815b89f66ca0633b02d96294b9b7911ee694"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ H);intro.",
                        "VernacExtend",
                        "170b5af38d77efa702040c24ee32fcb526e622e2"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? ?].",
                        "VernacExtend",
                        "0f697508c155a692f324e9ae2fc37c0385689df4"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHt0_1 t'1 H0).",
                        "VernacExtend",
                        "c78f55ef61c4ed0c72f447fcf3305b6ad8059ae2"
                    ]
                },
                {
                    "command": [
                        "specialize (IHt0_2 t'2 H1).",
                        "VernacExtend",
                        "56b35aa9529c12636d25c9ef8a0cc19ed7fe8d2b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t'1) (tree_heightP t'2) <= max (tree_heightP t0_1) (tree_heightP t0_2) ).",
                        "VernacExtend",
                        "27e9380fc8568dade0077e877521a3ef791f6990"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP t0_1) (tree_heightP t0_2));intro.",
                        "VernacExtend",
                        "0ebefd99b6e18cd53aab4be3e068fd9795b4679a"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP t0_1) (tree_heightP t0_2));intro.",
                        "VernacExtend",
                        "7cd9174d682b535f64e4f235e59b0c0a743cee5a"
                    ]
                },
                {
                    "command": [
                        "apply max_lub;omega.",
                        "VernacExtend",
                        "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_rewrite",
            "line_nb": 2450,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase t0.",
                        "VernacExtend",
                        "c910a652411f4e6c82c42760501e1073743b9ac9"
                    ]
                },
                {
                    "command": [
                        "exists (Leaf b); exists (Leaf b).",
                        "VernacExtend",
                        "8175f380e9219534b146fdcd5edca1671cf7b921"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "exists t0_1;exists t0_2;trivial.",
                        "VernacExtend",
                        "9650470257a17f3aa50cc75748e40f5f51c632e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_rewrite1",
            "line_nb": 2457,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t' as [x c].",
                        "VernacExtend",
                        "c74ee216e8b8d083a9fd97e616fcd5158286a54d"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "exists (Leaf b);exists (Leaf b).",
                        "VernacExtend",
                        "8175f380e9219534b146fdcd5edca1671cf7b921"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "exists x1; exists x2.",
                        "VernacExtend",
                        "80c3d14ed148688986cd04da55cd74a5f64df526"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_identity.",
                        "VernacExtend",
                        "50e1638254cb5c0364ae7e946f67b824fe968c15"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_rewrite2",
            "line_nb": 2470,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c].",
                        "VernacExtend",
                        "1bbd86825644f3222b59ad972d4c2be0ab656553"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;simpl;trivial.",
                        "VernacExtend",
                        "6ddef3cd6dd9c36fd22fd33fc4624e3d6805a0d4"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity x c);intro.",
                        "VernacExtend",
                        "1d5e7841d0bece6654b1791002d24960834700ff"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_height_split",
            "line_nb": 2477,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)).",
                        "VernacExtend",
                        "e406d54abc9ac7b1c5dfe8e6a4ab98e3a2748bb8"
                    ]
                },
                {
                    "command": [
                        "icase s;icase s0.",
                        "VernacExtend",
                        "161ab773bbd450aff668142fa775d0ee740c7c83"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "5623a56ef660641db9c08b1c976cdc082e775789"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "979bd7453c83386d4d2449de40c920f8b75e730f"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22.",
                        "VernacExtend",
                        "c46e6b7fb5bf86e104b60be539bc7bad83566590"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs0.",
                        "VernacExtend",
                        "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "de65540df45112df3dcacbba4b373e82189caf3b"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12].",
                        "VernacExtend",
                        "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "9875398f5504c3c30f8e5d09f2ed52249547376e"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22.",
                        "VernacExtend",
                        "c46e6b7fb5bf86e104b60be539bc7bad83566590"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP s0_1) (tree_heightP s0_2) < S n) by omega.",
                        "VernacExtend",
                        "2834a7e506759c5756567afe06286ea73caadaf6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP s0_1) (tree_heightP s0_2));intro H31.",
                        "VernacExtend",
                        "917a54c72c854a5f5ddb3cf841f13873828d85b9"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP s0_1) (tree_heightP s0_2));intro H32.",
                        "VernacExtend",
                        "0a2c8df7201017d6042deaf63a4ead322f5ae82d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs.",
                        "VernacExtend",
                        "9275975760708605add45ad78ef8579587cb34e0"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "190d066172ca6894f5bc4464e36cd3a66075d8b3"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "5623a56ef660641db9c08b1c976cdc082e775789"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12].",
                        "VernacExtend",
                        "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "9875398f5504c3c30f8e5d09f2ed52249547376e"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22.",
                        "VernacExtend",
                        "c46e6b7fb5bf86e104b60be539bc7bad83566590"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP (Node s1 s2)) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP (Node s1 s2)) ) in H by apply max_comm.",
                        "VernacExtend",
                        "f3a5cfa20cfcde53eb41a51e4c3450c2d40e79f4"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP s1) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP s1)) by apply max_comm.",
                        "VernacExtend",
                        "e469a81b0fa1b6e9b8712612d96c24c2d6855aba"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP s2) (tree_heightP (Leaf b))) with (max (tree_heightP (Leaf b)) (tree_heightP s2)) by apply max_comm.",
                        "VernacExtend",
                        "ca3cdf2dca3428fd79241a1e492d05f7f0f9dea4"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP s1) (tree_heightP s2) < S n) by omega.",
                        "VernacExtend",
                        "df298a6c0f9800cc6af610b65a47310fd30b2f7b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP s1) (tree_heightP s2));intro H31.",
                        "VernacExtend",
                        "f0c55a49e4c986fdc89f447c97abd5fb23aa1359"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP s1) (tree_heightP s2));intro H32.",
                        "VernacExtend",
                        "eb190a36c46ff37abe5f60704daa1e1df48e195d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs,Heqs0.",
                        "VernacExtend",
                        "3bf590587427358e6d96401a0d02b70be30779ba"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "190d066172ca6894f5bc4464e36cd3a66075d8b3"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "de65540df45112df3dcacbba4b373e82189caf3b"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12].",
                        "VernacExtend",
                        "82f77f81a5e2656de459b6b4b22ced6f05d745e5"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "9875398f5504c3c30f8e5d09f2ed52249547376e"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22.",
                        "VernacExtend",
                        "c46e6b7fb5bf86e104b60be539bc7bad83566590"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "generalize (plus_max_distr_r (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)) 1); intro H3.",
                        "VernacExtend",
                        "a30c21181f9aa7c38aba22bc765668d6f74c79cb"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H.",
                        "VernacExtend",
                        "0be418eec9aacd60a81dcbee150a519cdf3b54a0"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)) < S n) by omega.",
                        "VernacExtend",
                        "206e0f8e587904b70ab074d96228a533b7851462"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)));intro H4.",
                        "VernacExtend",
                        "3bd881cd0c3171446227794554aa2067ef598f70"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (max (tree_heightP s1) (tree_heightP s2)) (max (tree_heightP s0_1) (tree_heightP s0_2)));intro H5.",
                        "VernacExtend",
                        "5a88c738b32f0e58d56b049d95a2f6ed151d968b"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP s1) (tree_heightP s2));intro H6.",
                        "VernacExtend",
                        "8a046efe55321732861a94f310a4a3bf7ca37126"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP s1) (tree_heightP s2));intro H7.",
                        "VernacExtend",
                        "1ec1416c175ce1bf62c00f992aa2e722ad8b58fd"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP s0_1) (tree_heightP s0_2));intro H8.",
                        "VernacExtend",
                        "92b7eb055318714a2cff3f753bf82dbb5ef48fe2"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP s0_1) (tree_heightP s0_2));intro H9.",
                        "VernacExtend",
                        "ad836e7cdc771ed97701e83f3342dd1000ac89e4"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP s1 <= n) by omega.",
                        "VernacExtend",
                        "6016ce375afc2a4a799f7356c0109db6c78bb92e"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP s2 <= n) by omega.",
                        "VernacExtend",
                        "98f6b240aa2351049b5d687d6e277fab8a633fde"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP s0_1 <= n) by omega.",
                        "VernacExtend",
                        "0c98e439c27774010aec364b19bf7a7e77639a05"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP s0_2 <= n) by omega.",
                        "VernacExtend",
                        "ab9f46452ad30b753bfdef929d542905e66e637d"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H1 H10);intro H14.",
                        "VernacExtend",
                        "d3900f2c610dd18453494d0a94542cd2abb0ac6d"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H2 H13);intro H15.",
                        "VernacExtend",
                        "baefc5bda61ef2bedc5dea270715e89e8fdb595a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_diff",
            "line_nb": 2539,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (shareTree_dec_eq (mkCanon t11) (mkCanon t21));intro H1.",
                        "VernacExtend",
                        "6be9053d5e3ca19ed1b4cea407aeea0a349a5fe1"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "intro H1;apply H.",
                        "VernacExtend",
                        "4fb6f967aeadb13b6734610be93a2631b261d70b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite e,H1;trivial.",
                        "VernacExtend",
                        "d3a20fe8ede8a70d03859b081c6faa8636019abf"
                    ]
                },
                {
                    "command": [
                        "left;trivial.",
                        "VernacExtend",
                        "2f1efd67ff23560c270a9589d0d1b100a9c80732"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_proof_irr",
            "line_nb": 2549,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;trivial.",
                        "VernacExtend",
                        "57a542efd5803f9f450ee003dbdb7ed63247566f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonTree_combine",
            "line_nb": 2553,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (max_dec (tree_heightP t1) (tree_heightP t2));intro H2.",
                        "VernacExtend",
                        "af7f22be9a72320b6538a6e6dbd635aa9be29758"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "rewrite e in H1.",
                        "VernacExtend",
                        "a28d6916e25ed5087d44f185739fc8bbd69ba445"
                    ]
                },
                {
                    "command": [
                        "icase t1.",
                        "VernacExtend",
                        "e055cabe3107ded6bea02161ec5b25d83588817a"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "rewrite e in H1.",
                        "VernacExtend",
                        "a28d6916e25ed5087d44f185739fc8bbd69ba445"
                    ]
                },
                {
                    "command": [
                        "icase t2.",
                        "VernacExtend",
                        "2898deeb43a78b1839a90863fb466bca6fde01b3"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_intersect",
            "line_nb": 2568,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (exists n, n >= max (tree_heightP t1) (tree_heightP t2)).",
                        "VernacExtend",
                        "03dd3182aa4df662a2e4199d61fa6a33878c0469"
                    ]
                },
                {
                    "command": [
                        "exists (max (tree_heightP t1) (tree_heightP t2));omega.",
                        "VernacExtend",
                        "41f33d3a4287e710f99fe3054076749e921b5685"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "revert H.",
                        "VernacExtend",
                        "6842e040dd98a07b1eb54bbabc9c3f1076566a9a"
                    ]
                },
                {
                    "command": [
                        "revert t2 t1.",
                        "VernacExtend",
                        "8afc57ec65f3c5d54becc13f716c653ead5305ce"
                    ]
                },
                {
                    "command": [
                        "induction x;intros.",
                        "VernacExtend",
                        "967005fa252895ab470aa9876d40c37f363bf6d6"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "remember (tree_heightP (Node t2_1 t2_2)).",
                        "VernacExtend",
                        "166dddff85ff74575d4fada1110526ca654256cb"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "inversion Heqn.",
                        "VernacExtend",
                        "34f8462da0501cfa82647625d34ac4fea03cbd33"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t2_1) (tree_heightP t2_2));elimtype False ;omega.",
                        "VernacExtend",
                        "4326b25aa24f14010e3b3f1df18438007bacc365"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t1_1) (tree_heightP t1_2));inversion H1.",
                        "VernacExtend",
                        "a865c761ef46fb2cad373b60b1f8b330e6f65c47"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "destruct (max (tree_heightP t1_1) (tree_heightP t1_2)); destruct (max (tree_heightP t2_1) (tree_heightP t2_2)); inversion H1.",
                        "VernacExtend",
                        "2b3e6cf8b854a6a163a0c70cb0207ed7efce2f41"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
                        "VernacExtend",
                        "92cf76fe631ac25a334e03d7f89456639e854f7b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "unfold intersect_tree.",
                        "VernacExtend",
                        "62f0cbf672e9f0a3f2d40a543cda8b3977ac1681"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_double.",
                        "VernacExtend",
                        "bd673e0198e52abcf80665d4d80939f987ec580f"
                    ]
                },
                {
                    "command": [
                        "replace (mkCanon (Leaf b)) with (Leaf b) by apply mkCanon_Leaf.",
                        "VernacExtend",
                        "92cf76fe631ac25a334e03d7f89456639e854f7b"
                    ]
                },
                {
                    "command": [
                        "replace (intersect_tree (mkCanon (Node t1_1 t1_2)) (Leaf b)) with (intersect_tree(Leaf b)(mkCanon (Node t1_1 t1_2))) by apply intersect_commute.",
                        "VernacExtend",
                        "3d34e95dafe12f6b2c6e9bd3801a95c26585ad11"
                    ]
                },
                {
                    "command": [
                        "replace (intersect_tree ( (Node t1_1 t1_2)) (Leaf b)) with (intersect_tree(Leaf b)(Node t1_1 t1_2)) by apply intersect_commute.",
                        "VernacExtend",
                        "85444539e0dc181e3e5a44995de3df4a44ab61e0"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "unfold intersect_tree.",
                        "VernacExtend",
                        "62f0cbf672e9f0a3f2d40a543cda8b3977ac1681"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_double.",
                        "VernacExtend",
                        "bd673e0198e52abcf80665d4d80939f987ec580f"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (tree_heightP t1_1) (tree_heightP t2_1)).",
                        "VernacExtend",
                        "720c78affc0bf92c3622eb27c1217f64e30bce1f"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
                        "VernacExtend",
                        "0d247f450c95bf07dd150ec25290349c3f9b041a"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
                        "VernacExtend",
                        "7a7f3b025a777711289bbfa545257b7f3219a629"
                    ]
                },
                {
                    "command": [
                        "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
                        "VernacExtend",
                        "ddace4781e469afa72530ffe9510e612fc0ce661"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0 in H;clear H0.",
                        "VernacExtend",
                        "c8d008f6a681b3aa396caf5a4a36d040353c5bea"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
                        "VernacExtend",
                        "0a9b828055b85307b530f0ff2561f8b7658f620c"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
                        "VernacExtend",
                        "4f697524f71507015df6555e5dfa93d3ad44fe72"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "99d591959b3419c73d118a5ab4f2e91b5accea25"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_1).",
                        "VernacExtend",
                        "bb6914e35f2f71e8f906a4bfa7c04d0ecea8c4b6"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_1).",
                        "VernacExtend",
                        "7fe06ca08d0477228f6b819f522c3f9b0b080a7b"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "apply max_lub;omega.",
                        "VernacExtend",
                        "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (tree_heightP t1_2) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "4bec309b3e71bd7e674fe6f91ae2fdad44168a58"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t1_1) (tree_heightP t1_2) + 1) with (S (max (tree_heightP t1_1) (tree_heightP t1_2))) in H by omega.",
                        "VernacExtend",
                        "0d247f450c95bf07dd150ec25290349c3f9b041a"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP t2_1) (tree_heightP t2_2) + 1) with (S (max (tree_heightP t2_1) (tree_heightP t2_2))) in H by omega.",
                        "VernacExtend",
                        "7a7f3b025a777711289bbfa545257b7f3219a629"
                    ]
                },
                {
                    "command": [
                        "generalize (succ_max_distr ((max (tree_heightP t1_1) (tree_heightP t1_2))) ((max (tree_heightP t2_1) (tree_heightP t2_2))));intro.",
                        "VernacExtend",
                        "ddace4781e469afa72530ffe9510e612fc0ce661"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1 in H;clear H1.",
                        "VernacExtend",
                        "cd8b55612d8b1cd5dd22277bd74c76417adb6480"
                    ]
                },
                {
                    "command": [
                        "assert (x >= max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2))) by omega.",
                        "VernacExtend",
                        "0a9b828055b85307b530f0ff2561f8b7658f620c"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t1_1) (tree_heightP t1_2)).",
                        "VernacExtend",
                        "4f697524f71507015df6555e5dfa93d3ad44fe72"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assert (max (max (tree_heightP t1_1) (tree_heightP t1_2)) (max (tree_heightP t2_1) (tree_heightP t2_2)) >= max (tree_heightP t2_1) (tree_heightP t2_2)).",
                        "VernacExtend",
                        "99d591959b3419c73d118a5ab4f2e91b5accea25"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t1_1) (tree_heightP t1_2) >= tree_heightP t1_2).",
                        "VernacExtend",
                        "e081a61f6ab3ebea723cc8d004cbb8fd97b5c214"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP t2_1) (tree_heightP t2_2) >= tree_heightP t2_2).",
                        "VernacExtend",
                        "1bb473544ad68959f318df74d89b33b14dc5138a"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "apply max_lub;omega.",
                        "VernacExtend",
                        "5762a9ab6fa8bf30e3cf2b4f1e20e69832c767c4"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx _ _ H0);intro.",
                        "VernacExtend",
                        "c6356c640473cbc82c60133a7ad64bfb95e1385c"
                    ]
                },
                {
                    "command": [
                        "generalize (IHx _ _ H1);intro.",
                        "VernacExtend",
                        "c534ce5587bba324b7e77225fe54d50bbe57b3c3"
                    ]
                },
                {
                    "command": [
                        "remember (mkCanon (Node t1_1 t1_2)); remember (mkCanon (Node t2_1 t2_2)).",
                        "VernacExtend",
                        "a3f2e0708a4e588e4bffade15f6c0142339eba6d"
                    ]
                },
                {
                    "command": [
                        "icase s;icase s0.",
                        "VernacExtend",
                        "161ab773bbd450aff668142fa775d0ee740c7c83"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "2913c7f415056c6f42826426c576ad14be131b68"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "a3cb58c11b5ba51941895458842055d394606df7"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H51 in *.",
                        "VernacExtend",
                        "b7d83e75ecef6ea410b4f382809360657e65e858"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite H52 in *.",
                        "VernacExtend",
                        "00b69e3806d8ddfd959bf1cb45a73f10a04902ef"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf b0);intro.",
                        "VernacExtend",
                        "c23b1909a67e14bfa7ffe0bbcf473089b2ed3d5d"
                    ]
                },
                {
                    "command": [
                        "rewrite H4.",
                        "VernacExtend",
                        "fc5d011df68f7160e4669d129d2975825ac089bb"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b0 b0);trivial.",
                        "VernacExtend",
                        "2a2808120933a7f28679ebc5ada94c799f582c3c"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "2913c7f415056c6f42826426c576ad14be131b68"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs0.",
                        "VernacExtend",
                        "b1be2ab74d55ea6f43aa2f35b07f9e16e901138a"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "d47cf62474b3562786f61978d6f5a242afc0c60c"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "a3cb58c11b5ba51941895458842055d394606df7"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs.",
                        "VernacExtend",
                        "9275975760708605add45ad78ef8579587cb34e0"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite H41 in *.",
                        "VernacExtend",
                        "0303e636a875793fb155bb219f8ad53bd97c570c"
                    ]
                },
                {
                    "command": [
                        "rewrite H42 in *.",
                        "VernacExtend",
                        "120e85b63c3023d93138d115b0efe65c65fb3c11"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "replace (intersect_tree (Node (mkCanon t1_1) (mkCanon t1_2)) (Leaf b)) with (intersect_tree (Leaf b) (Node (mkCanon t1_1) (mkCanon t1_2))) by apply intersect_commute.",
                        "VernacExtend",
                        "046c6bafbf1f87549609546f9268ca3a75cea6c3"
                    ]
                },
                {
                    "command": [
                        "replace (intersect_tree (mkCanon t1_1) (Leaf b)) with (intersect_tree (Leaf b)(mkCanon t1_1)) in H2 by apply intersect_commute.",
                        "VernacExtend",
                        "c4c38e10660d4f2ac7cc02ba7497c74516a90fac"
                    ]
                },
                {
                    "command": [
                        "replace (intersect_tree (mkCanon t1_2) (Leaf b)) with (intersect_tree (Leaf b)(mkCanon t1_2)) in H3 by apply intersect_commute.",
                        "VernacExtend",
                        "b3d06bf9cab2df1a7201d100c004d2bc95182bf2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs, Heqs0.",
                        "VernacExtend",
                        "3bf590587427358e6d96401a0d02b70be30779ba"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro.",
                        "VernacExtend",
                        "8a3e0fbf3d2d38d0396321f3697eabdf7b3d85c7"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs0);intro.",
                        "VernacExtend",
                        "d47cf62474b3562786f61978d6f5a242afc0c60c"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42].",
                        "VernacExtend",
                        "217aceee8059cf8527a7842f56c35476f1cc853a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "f9068bc493859ce9e1999c4ac13f155c2521e036"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H41 in *.",
                        "VernacExtend",
                        "ffefabf6ca3b9c3c5f90c11b36828d0f0acf154f"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H42 in *.",
                        "VernacExtend",
                        "0c96bf4f5abff5d69b0c6d7f65737bd37baa6ee5"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H51 in *.",
                        "VernacExtend",
                        "f6cfc2d4cbe7a5f682c2499d93fa99038cfafb1d"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H52 in *.",
                        "VernacExtend",
                        "d325f8c34cfc3e71cfef755c2fb9c4f33468dd44"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_join_split",
            "line_nb": 2693,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "red in H.",
                        "VernacExtend",
                        "a4b4bf9e03eb87c8fa06c84cfda5cac7b43f2be8"
                    ]
                },
                {
                    "command": [
                        "hnf in H.",
                        "VernacExtend",
                        "b998e5ae98dd847416f4f194f30407c3597ea052"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "split; red; hnf; inversion H; inversion H0; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl.",
                        "VernacExtend",
                        "38efbdc34cc817b9822a5243489deea1cf24b9f4"
                    ]
                },
                {
                    "command": [
                        "clear - H2.",
                        "VernacExtend",
                        "df3dc56b8cb8ec54f9503844cf7d5b731417589e"
                    ]
                },
                {
                    "command": [
                        "assert (Leaf false = mkCanon (Node (Leaf false) (Leaf false))).",
                        "VernacExtend",
                        "343ded9ae1923b1d342d4c84da2abcbf31399f79"
                    ]
                },
                {
                    "command": [
                        "compute;auto.",
                        "VernacExtend",
                        "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H2.",
                        "VernacExtend",
                        "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect ((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H2.",
                        "VernacExtend",
                        "cd6e90473b6ddc3ec3eb78a9c40980b4c1f2a641"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H2);intro.",
                        "VernacExtend",
                        "981ce45811a241e5aee47b7cc05f013812b4697d"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? _].",
                        "VernacExtend",
                        "5b34589a2b4f60317a6fa0bbb0fcc15c72e975c5"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Leaf false) = Leaf false).",
                        "VernacExtend",
                        "7ebffe5c92ac65e6263aea357ffec84bdafc446e"
                    ]
                },
                {
                    "command": [
                        "compute;auto.",
                        "VernacExtend",
                        "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H1.",
                        "VernacExtend",
                        "8c5b5df9fad672e6e5e81d3d0efb0ec2ed09e9bf"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect t11 t21);intro.",
                        "VernacExtend",
                        "df0c61e9b7086d2345d498489d1f168ef2b2c434"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "clear - H3.",
                        "VernacExtend",
                        "1ca535424183962a58658c6a9f78c07e3db56ca5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "11c5a0f10c8f24632d42bf152123c583d0fecf90"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
                        "VernacExtend",
                        "d1902807081df5275f7f389da7feb6af630f8d5b"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? _].",
                        "VernacExtend",
                        "1e578e84e7a531f32f36c087bbd511d26e131ff7"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union t11 t21);intro.",
                        "VernacExtend",
                        "727f127f5f6f2dca4ee0690e783358cd657df374"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "clear - H2.",
                        "VernacExtend",
                        "df3dc56b8cb8ec54f9503844cf7d5b731417589e"
                    ]
                },
                {
                    "command": [
                        "assert (Leaf false = mkCanon (Node (Leaf false) (Leaf false))).",
                        "VernacExtend",
                        "343ded9ae1923b1d342d4c84da2abcbf31399f79"
                    ]
                },
                {
                    "command": [
                        "compute;auto.",
                        "VernacExtend",
                        "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H2.",
                        "VernacExtend",
                        "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect ((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H2.",
                        "VernacExtend",
                        "cd6e90473b6ddc3ec3eb78a9c40980b4c1f2a641"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H2);intro.",
                        "VernacExtend",
                        "981ce45811a241e5aee47b7cc05f013812b4697d"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [_ ?].",
                        "VernacExtend",
                        "7e68e8c2df0ca89c3c9a863d0f69060ddd22a3d3"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Leaf false) = Leaf false).",
                        "VernacExtend",
                        "7ebffe5c92ac65e6263aea357ffec84bdafc446e"
                    ]
                },
                {
                    "command": [
                        "compute;auto.",
                        "VernacExtend",
                        "1311beca6cdf16cb2f815d9c6adb8bab9eb2d9e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H1.",
                        "VernacExtend",
                        "8c5b5df9fad672e6e5e81d3d0efb0ec2ed09e9bf"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect t12 t22);intro.",
                        "VernacExtend",
                        "31387e1e4752cafec66e83748dee77972050c88b"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "clear - H3.",
                        "VernacExtend",
                        "1ca535424183962a58658c6a9f78c07e3db56ca5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "11c5a0f10c8f24632d42bf152123c583d0fecf90"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
                        "VernacExtend",
                        "d1902807081df5275f7f389da7feb6af630f8d5b"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [_ ?].",
                        "VernacExtend",
                        "be018d42e9727a921a4de9f46d22ec5ebbb37ee3"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union t12 t22);intro.",
                        "VernacExtend",
                        "4f33d5dd7a6e5c10f57aba43783d5ad1aa53c80d"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_join_combine",
            "line_nb": 2748,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "hnf in *.",
                        "VernacExtend",
                        "2b83f930e16edf1e74901190007d847b58b5d93a"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H11 H12].",
                        "VernacExtend",
                        "f75cc39a1fca34ba5004e9c7daf3fd7a95b7b4dd"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H21 H22].",
                        "VernacExtend",
                        "4bcbc5a2c4b81ff90365b213531f58172353f828"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.glb, BAF.lub in *.",
                        "VernacExtend",
                        "2fd42e3c30925cf7b1bba587b40d8c5d0379f1d3"
                    ]
                },
                {
                    "command": [
                        "inv H11;inv H12;inv H21;inv H22.",
                        "VernacExtend",
                        "a52d4d6248e3c1eace339644a51bbd314ac2cd7d"
                    ]
                },
                {
                    "command": [
                        "split; apply exist_ext.",
                        "VernacExtend",
                        "bcea74c656fe4749920b344ccb6197b6cdb61ada"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect t11 t21);intro H31.",
                        "VernacExtend",
                        "38763e90b1e06deb8d1da998a7d4c5f9eee5a072"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect t12 t22);intro H32.",
                        "VernacExtend",
                        "b507ff04ce4d5c5aa2446f012da6e312bbde3731"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect (Node t11 t12) (Node t21 t22));intro H33.",
                        "VernacExtend",
                        "2006ed6ea1949eb9f49005a24f24adc65dbc4c03"
                    ]
                },
                {
                    "command": [
                        "rewrite H31 in H0;clear H31.",
                        "VernacExtend",
                        "b3f018e4f14b27d76b68f736e366511619466e4f"
                    ]
                },
                {
                    "command": [
                        "rewrite H32 in H2;clear H32.",
                        "VernacExtend",
                        "88d9f05237ff43aae92dc614629011cf3a6215b4"
                    ]
                },
                {
                    "command": [
                        "simpl;simpl in H33; rewrite H33;clear H33.",
                        "VernacExtend",
                        "03484fe1e32a1e8ba823ce5eec972f500ec7e3bc"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec false false).",
                        "VernacExtend",
                        "3e4fd10c4bea458d6c35572f41e334ce947024f7"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union t11 t21);intro H31.",
                        "VernacExtend",
                        "dd2e86c55e393c778970d26d6c61abbbc6976cd6"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union t12 t22);intro H32.",
                        "VernacExtend",
                        "4655ae4056ee23d0ad7257b5a5bdba9526db2df8"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union (Node t11 t12) (Node t21 t22));intro H33.",
                        "VernacExtend",
                        "6cd835e92e6355932c8080ab46b688be6e3ffdda"
                    ]
                },
                {
                    "command": [
                        "rewrite H31 in H1;clear H31.",
                        "VernacExtend",
                        "af1c070aa16a7d7cd66d6652001c18a1bf8bbbfd"
                    ]
                },
                {
                    "command": [
                        "rewrite H32 in H3;clear H32.",
                        "VernacExtend",
                        "1f2d62bba76c226bd665a7d876c6e5494a414155"
                    ]
                },
                {
                    "command": [
                        "simpl;simpl in H33; rewrite H33;clear H33.",
                        "VernacExtend",
                        "03484fe1e32a1e8ba823ce5eec972f500ec7e3bc"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_mkFull_split",
            "line_nb": 2776,
            "steps": [
                {
                    "command": [
                        "intros; remember (mkCanon (Node t1 t2)); icase s.",
                        "VernacExtend",
                        "a64e6b970ac58858c192e1144c8f26c29b8f193f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 H2].",
                        "VernacExtend",
                        "352758143f119ffe1117850fdcea520fdbdaf126"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)); split;intro H;inv H;auto; inv H0;inv H3;auto.",
                        "VernacExtend",
                        "53b7dabcac1fdc57d1f704190c048c6d3b80baa9"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs.",
                        "VernacExtend",
                        "9275975760708605add45ad78ef8579587cb34e0"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_split _ _ _ _ Heqs);intro H.",
                        "VernacExtend",
                        "65090fccce55479988d549cb546b46cd27215a87"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "apply mkFull_split.",
                        "VernacExtend",
                        "9d323fd9e9f9b382e3f2f3a1e99cbf15e287a1c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_zero",
            "line_nb": 2789,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left.",
                        "VernacExtend",
                        "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull 0 (proj1_sig t0)).",
                        "VernacExtend",
                        "26c9725bfa4dd073d0a1929c6cab0e6b79f31dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_combine",
            "line_nb": 2795,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "intros ? ? ? ? ? H1 H2.",
                        "VernacExtend",
                        "0121d00d1517229ac55dbc2a218d5b1c6ac6069e"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left in *.",
                        "VernacExtend",
                        "aac2be472453863ab862f10589317e37d530b089"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n (mkCanon t1)) as o1; remember (mkFull n (mkCanon t2)) as o2.",
                        "VernacExtend",
                        "4e296e332f7f24549a4a7f6bd40f71967d354397"
                    ]
                },
                {
                    "command": [
                        "icase o1;icase o2.",
                        "VernacExtend",
                        "e112e2f93717ff9f0911ba3d038970d2ebc3deb4"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo1,Heqo2.",
                        "VernacExtend",
                        "22d356b5f755f3f4ea868d08c6a406c48018db55"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_mkFull_split n t1 t2 s s0);intro H.",
                        "VernacExtend",
                        "f2d12a768c7f0b1028e48ff5fdc2f5d1f4582254"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ H].",
                        "VernacExtend",
                        "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
                    ]
                },
                {
                    "command": [
                        "detach H;auto.",
                        "VernacExtend",
                        "ff4db3e26f80737b66847a6dc210f3d29548edd4"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "icase (tree_round_leftP (S n) s); icase (tree_round_leftP (S n) s0).",
                        "VernacExtend",
                        "9558da99f4b4748a20c0535080a4ff53bdd28031"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_split",
            "line_nb": 2816,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "intros ? ? ? ? ? H.",
                        "VernacExtend",
                        "7b77f8f7e8332748301f074944b6c5a46f84f2c8"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left in *.",
                        "VernacExtend",
                        "aac2be472453863ab862f10589317e37d530b089"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull (S (S n)) (mkCanon (Node t1 t2))) as o.",
                        "VernacExtend",
                        "6a3a87e2a4e9970eec9acf8d3a77270123a715ae"
                    ]
                },
                {
                    "command": [
                        "icase o.",
                        "VernacExtend",
                        "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "icase s; remember (S n) as nk.",
                        "VernacExtend",
                        "dcd95285b50d230b18d91f51df9301e28f51e071"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon (Node t1 t2)).",
                        "VernacExtend",
                        "832b44591438431e738e0943576516aded1e32d2"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqo; icase (mkFull nk (Leaf b0)).",
                        "VernacExtend",
                        "7274dd7acbd8316128bfc9da3872c11b12a4a492"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqo;icase (mkFull nk s1); icase (mkFull nk s2).",
                        "VernacExtend",
                        "7b3872e3fc256ec3cc9bc59d13060f7e84202308"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_mkFull_split nk t1 t2 s1 s2);intro H1.",
                        "VernacExtend",
                        "b4535eef2d81327c616ef3acb09840c59c4c1cdc"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 _].",
                        "VernacExtend",
                        "a6c834813ac9bc3eed37edeeefb0fa107dee2dac"
                    ]
                },
                {
                    "command": [
                        "detach H1;trivial.",
                        "VernacExtend",
                        "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 H2].",
                        "VernacExtend",
                        "352758143f119ffe1117850fdcea520fdbdaf126"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite Heqnk in *.",
                        "VernacExtend",
                        "04d7891f675fe588e9b41c4161d0566d3d1ecec6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_round_leftP (S n) s1); icase (tree_round_leftP (S n) s2).",
                        "VernacExtend",
                        "0a51707e9de9d03c1eafad9ed65ff69d317a85cd"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro H.",
                        "VernacExtend",
                        "b3c349e3d55f47284ef08c128f7c140b198703f8"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H4 H5].",
                        "VernacExtend",
                        "c2a7751626aa2695f686607313f4016af3556e06"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_Leaf",
            "line_nb": 2841,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left.",
                        "VernacExtend",
                        "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Leaf b)) (canonTree_Leaf _) (mkCanon_correct _)); intro H.",
                        "VernacExtend",
                        "6a5f3fb0980e3192ab0bd4da1327e326c630b360"
                    ]
                },
                {
                    "command": [
                        "detach H.",
                        "VernacExtend",
                        "7b1cbb27e97f4baf25473f44a1a47a398ac68156"
                    ]
                },
                {
                    "command": [
                        "rewrite H in IHn.",
                        "VernacExtend",
                        "f0732d6832759b144fe560e722696ffeacd14e6c"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_combine _ _ _ _ _ IHn IHn);intro H1.",
                        "VernacExtend",
                        "48fe50d4259adb6c92643f2919aaa089da1e40d4"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Node (Leaf b) (Leaf b))) (canonTree_Leaf _) (mkCanon_correct _)); intro H2.",
                        "VernacExtend",
                        "4ab5a88d346bda94c9f3f851ef3d55d5f4b388be"
                    ]
                },
                {
                    "command": [
                        "detach H2.",
                        "VernacExtend",
                        "37dcd8f355354d3a35c87e71d575ce2b99de98cf"
                    ]
                },
                {
                    "command": [
                        "rewrite H2;trivial.",
                        "VernacExtend",
                        "f4439e25b4e46b870f332cc9d16d49fe012ed96a"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_identity",
            "line_nb": 2859,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : n > height t0) by omega.",
                        "VernacExtend",
                        "8fe1f9cfe80052b03cdffa3a88a990ae03b506d8"
                    ]
                },
                {
                    "command": [
                        "clear H;rename H1 into H.",
                        "VernacExtend",
                        "089aeea23b40be75783bd40cfebd97d666c59f76"
                    ]
                },
                {
                    "command": [
                        "revert H;revert t0.",
                        "VernacExtend",
                        "f6572a4ca7b73d075300b981460c5a2021b2d55a"
                    ]
                },
                {
                    "command": [
                        "induction n;intros;unfold height;simpl in *; unfold tree_height in *.",
                        "VernacExtend",
                        "8abd4a47121940922b8529006ef4f2842c07379c"
                    ]
                },
                {
                    "command": [
                        "inversion H;icase t0.",
                        "VernacExtend",
                        "12cdd9ef7756b0905ebb39e6b043d5b6839f7056"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c].",
                        "VernacExtend",
                        "1bbd86825644f3222b59ad972d4c2be0ab656553"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (Leaf b) c (canonTree_Leaf _));intro H1.",
                        "VernacExtend",
                        "a3c7b86026256b43c66b0aef029be88359bd81ac"
                    ]
                },
                {
                    "command": [
                        "detach H1;trivial.",
                        "VernacExtend",
                        "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_Leaf.",
                        "VernacExtend",
                        "901ab73d91a38b46346b703f03c0dbba7bd652b9"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert ( n > tree_heightP x1 /\\ n > tree_heightP x2).",
                        "VernacExtend",
                        "32d630af072b6b048480a22aab2761549f481450"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP x1) (tree_heightP x2)).",
                        "VernacExtend",
                        "fa9b5de4c57b1b0088b378e3364a17f1fd2a6492"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP x1) (tree_heightP x2)).",
                        "VernacExtend",
                        "b7b12eb8a2c2081661944ce15392606baebaf783"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H1 H2].",
                        "VernacExtend",
                        "43c576a82ec84c07f51bc50e18269c6d09f20cef"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c.",
                        "VernacExtend",
                        "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
                    ]
                },
                {
                    "command": [
                        "destruct c as [H3 [H4 [H5 H6]]].",
                        "VernacExtend",
                        "acd3d5230a896ef5f935d1d1cd957c7409ac28a2"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H5) H1);intro.",
                        "VernacExtend",
                        "639d7659a3ce3a1086a4b4f398f8191f0ec58940"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H6) H2);intro.",
                        "VernacExtend",
                        "b837a2d1c9b898a16d37c7ec12a4ebd8bdfe0809"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr x1 (mkCanon x1) H5 (mkCanon_correct _));intro H8.",
                        "VernacExtend",
                        "99cd7c748251a51cb2563b9845b4112ca29bdd71"
                    ]
                },
                {
                    "command": [
                        "detach H8.",
                        "VernacExtend",
                        "5bf08f2a6d47fffecd56809c43f956d01c62ccb6"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr x2 (mkCanon x2) H6 (mkCanon_correct _));intro H9.",
                        "VernacExtend",
                        "2d151c3b14b6e62bc5b186b6ab72961c480323c0"
                    ]
                },
                {
                    "command": [
                        "detach H9.",
                        "VernacExtend",
                        "ba2310bb2943fbe934d85ab8814138a09aa10acc"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Node x1 x2) (mkCanon (Node x1 x2)) c0 (mkCanon_correct _));intro H10.",
                        "VernacExtend",
                        "14617d2dd3f24956d5ab3f313a83b80693948a83"
                    ]
                },
                {
                    "command": [
                        "detach H10.",
                        "VernacExtend",
                        "d973e442f828c667cc28310ca687622d2cbb7098"
                    ]
                },
                {
                    "command": [
                        "rewrite H8,H9,H10 in *.",
                        "VernacExtend",
                        "1373e5dec310a73733f29bf29718f4c15e1312be"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_combine;trivial.",
                        "VernacExtend",
                        "c956d01ee2e8d4d2a38a7d03db4daf0d373cc4de"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_one",
            "line_nb": 2897,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "exists b;exists b0.",
                        "VernacExtend",
                        "de67d4e18acd25db923c44b2a78056225f1db57e"
                    ]
                },
                {
                    "command": [
                        "compute in H.",
                        "VernacExtend",
                        "686103f70bd92c1e64ec2f78836e7444971cef09"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_join",
            "line_nb": 2909,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree.",
                        "VernacExtend",
                        "e8a5644d2260c860bf2458e9fa618a656c071313"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct t1.",
                        "VernacExtend",
                        "5690e26538feaaf47c16cb191a37ff746748469a"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left in H0.",
                        "VernacExtend",
                        "0553c7852a3745807a930d72128317088f56d941"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [t1 ?]; destruct t2 as [t2 ?]; destruct t3 as [t3 ?].",
                        "VernacExtend",
                        "c6618f03a54e7cd5b0d84e1e6300df20d9b8698b"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2;icase t3.",
                        "VernacExtend",
                        "c5c70d4ca66273d3e6d019b43f0fc8ba11279b31"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;icase b1; compute;split;apply exist_ext;trivial.",
                        "VernacExtend",
                        "5d1da5b025f02679ed5ce08967dc11b23c1d9da0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H2);intro H3.",
                        "VernacExtend",
                        "606317f1a123dd7263a64ff255964856dc9a88cb"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ H].",
                        "VernacExtend",
                        "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear-H.",
                        "VernacExtend",
                        "df101ff4b489cf904bd8e6159ba4f4fc0cc0036e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "a71f63f235c3f00d2df06527d305855c02229d86"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H3 H4].",
                        "VernacExtend",
                        "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear-H3 H4 c0.",
                        "VernacExtend",
                        "a72d5783c74f4fc399400d8d68ca133abc86562e"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c0);intro.",
                        "VernacExtend",
                        "672d1a1cfdc5ba5010faa95a67579d45610996d8"
                    ]
                },
                {
                    "command": [
                        "icase b; congruence.",
                        "VernacExtend",
                        "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "a71f63f235c3f00d2df06527d305855c02229d86"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H2);intro H4.",
                        "VernacExtend",
                        "82de9ff72f583c90b312f9c420e96aca497dadd8"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_Leaf b 0);intro H5.",
                        "VernacExtend",
                        "cfabcff5f44d4b3e7f216bd8d75a331136710050"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c) by apply proof_irr.",
                        "VernacExtend",
                        "c9324db94f5b27003c608301cef66a6a847b58d7"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H5;clear H3.",
                        "VernacExtend",
                        "18e16c85fb8636c6522ec69b7a026d1be664007b"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H0;clear H5.",
                        "VernacExtend",
                        "b846d4b7e33dee5b648f69c3b3a26b261cdfd1d0"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H3.",
                        "VernacExtend",
                        "3b504a53d263be900b9899af24cef6de5e0ec395"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b31 b32).",
                        "VernacExtend",
                        "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.glb.",
                        "VernacExtend",
                        "eb79f2d18106e6192f9b9503600828c1ee6038db"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H c.",
                        "VernacExtend",
                        "fa26bc2d4f035abe0cd3394b0e1d8d8a79f00f5e"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "icase b;congruence.",
                        "VernacExtend",
                        "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H2);intro H4.",
                        "VernacExtend",
                        "82de9ff72f583c90b312f9c420e96aca497dadd8"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_Leaf b 0);intro.",
                        "VernacExtend",
                        "06d8bce9438d890fc93c612eeb81d893cedfab65"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c0) by apply proof_irr.",
                        "VernacExtend",
                        "bb02bc20cc8cd7e56ddbda7d3175d7e4544aa8af"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H3;clear H4.",
                        "VernacExtend",
                        "4aa46440341dd396700f545892dabc0792b19379"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H1;clear H3.",
                        "VernacExtend",
                        "27cf446084dfa77d508991ea930536685b688fcf"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H3; inv H4.",
                        "VernacExtend",
                        "c036953c568aaa789f26c1b51a8c32023a3face5"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b31 b32).",
                        "VernacExtend",
                        "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.glb.",
                        "VernacExtend",
                        "eb79f2d18106e6192f9b9503600828c1ee6038db"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b41;trivial.",
                        "VernacExtend",
                        "4d5895a05181912e169601f8c52b061184cb0d25"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b41; trivial.",
                        "VernacExtend",
                        "4d5895a05181912e169601f8c52b061184cb0d25"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H1);intro H4.",
                        "VernacExtend",
                        "941589165ec112bf10d2584d2b9e90f9fac80136"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_Leaf b 0);intro.",
                        "VernacExtend",
                        "06d8bce9438d890fc93c612eeb81d893cedfab65"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c1) by apply proof_irr.",
                        "VernacExtend",
                        "45b1d455107f8b62b02821b8fc2339b3bf4bf80d"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H3;clear H4.",
                        "VernacExtend",
                        "4aa46440341dd396700f545892dabc0792b19379"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H2;clear H3.",
                        "VernacExtend",
                        "3b50dc6fcc42adce18b93f1836854e98b8b062ab"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
                        "VernacExtend",
                        "de032df4c6123f7c586596d4756db3bab2f88ffe"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "7841b30ee4d821cf704fdc3284ce9f2f20c610af"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H1);intro H4.",
                        "VernacExtend",
                        "941589165ec112bf10d2584d2b9e90f9fac80136"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_one _ _ _ _ H2);intro H5.",
                        "VernacExtend",
                        "a26ec5bce6c027322c36058c20ccedb308b23471"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [b51 [b52 [H51 [H52 H53]]]];subst.",
                        "VernacExtend",
                        "681ddd16039acc5a00eb922e148b6c1da74d3213"
                    ]
                },
                {
                    "command": [
                        "inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
                        "VernacExtend",
                        "b6415d6540a0b2a2201dbdd01fe60812cefe2e8a"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite1 t1);intro H3; generalize (canonTree_rewrite1 t2);intro H4; generalize (canonTree_rewrite1 t3);intro H5; generalize (canonTree_rewrite1 t1');intro H6; generalize (canonTree_rewrite1 t2');intro H7; generalize (canonTree_rewrite1 t3');intro H8; destruct H3 as [? [? ?]]; destruct H4 as [? [? ?]]; destruct H5 as [? [? ?]]; destruct H6 as [? [? ?]]; destruct H7 as [? [? ?]]; destruct H8 as [? [? ?]].",
                        "VernacExtend",
                        "d4e1694ed4661514ae37999bbdb0e80f892f49d9"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_split _ _ _ _ _ H0);intro H01.",
                        "VernacExtend",
                        "786a9bf8f9b5a159440035a29648457179cf1126"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_split _ _ _ _ _ H1);intro H11.",
                        "VernacExtend",
                        "cf49ccff86ec3a8672ec413846d929df9eec07ac"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_split _ _ _ _ _ H2);intro H21.",
                        "VernacExtend",
                        "0393874a1787765bc5548dfd0c60bd74b1221433"
                    ]
                },
                {
                    "command": [
                        "destruct H01 as [H01 H02].",
                        "VernacExtend",
                        "6918c478d33134759ac1b43027976d6ec219b8e3"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12].",
                        "VernacExtend",
                        "e1974e4ce31e9065c7b502c0d9f6dea598b78b6e"
                    ]
                },
                {
                    "command": [
                        "destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "5ac9d8330971075d82ab4bda04366276f754d263"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_join_split _ _ _ _ _ _ H);intro H3.",
                        "VernacExtend",
                        "538417e9a791189176e6b8477ee5a975b7ce418d"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ H31 H01 H11 H21);intro H41.",
                        "VernacExtend",
                        "bdedc8d7ba091cf5fe0aea6840ad6e1fccd43df1"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ H32 H02 H12 H22);intro H42.",
                        "VernacExtend",
                        "5b40ae4d025c765b87247ef37104be2f3e8d2d24"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_join_combine;trivial.",
                        "VernacExtend",
                        "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_None",
            "line_nb": 3023,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left.",
                        "VernacExtend",
                        "5469fcc69a0ba3397bbb4a3076e37983fd3e1e74"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_None _ _ H);intro.",
                        "VernacExtend",
                        "aac8975fe6b48d5d41c6e2a56388c30f93cdff96"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_decrease",
            "line_nb": 3031,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "induction n;intros; destruct t0; icase x.",
                        "VernacExtend",
                        "69dbc9a8c4afaec29b752a82601b4c571cd70ad9"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2;unfold tree_height in *;inversion H.",
                        "VernacExtend",
                        "7c671c853f416b61366875f539e3da4cc0454484"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t => canonicalTree t) (Leaf b) (canonTree_Leaf _)).",
                        "VernacExtend",
                        "890bc986c92886d6782ec448fe44f616fb7b4662"
                    ]
                },
                {
                    "command": [
                        "compute;split;try omega;try f_equal;try apply exist_ext;trivial.",
                        "VernacExtend",
                        "f69632261fed51f9918749ee9253bba65eb76f9e"
                    ]
                },
                {
                    "command": [
                        "elimtype False;omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H1.",
                        "VernacExtend",
                        "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
                    ]
                },
                {
                    "command": [
                        "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) 0) by omega; clear H1.",
                        "VernacExtend",
                        "4fd33d518b03948fcb07fc7ba91feb309632262d"
                    ]
                },
                {
                    "command": [
                        "generalize (max_0_r (max (tree_heightP x1_1) (tree_heightP x1_2) + 1));intro.",
                        "VernacExtend",
                        "d24b4be006df1d4185ad73d76fe106d7e14947dc"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H;clear H0.",
                        "VernacExtend",
                        "811f7a58e18c564af35c6b055d384792dac7a36c"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H1.",
                        "VernacExtend",
                        "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
                    ]
                },
                {
                    "command": [
                        "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) (max (tree_heightP x2_1) (tree_heightP x2_2) + 1)) by omega; clear H1.",
                        "VernacExtend",
                        "cf505960e4f54f0966856abc1b1824d4b26e33f8"
                    ]
                },
                {
                    "command": [
                        "generalize (plus_max_distr_r (max (tree_heightP x1_1) (tree_heightP x1_2)) (max (tree_heightP x2_1) (tree_heightP x2_2)) 1);intro.",
                        "VernacExtend",
                        "4e4e7862b543e5ccd848c5b9e7d815ca75e16ba3"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H;omega.",
                        "VernacExtend",
                        "d1e3daf704b10903d22ad1c79f649670fe7fb9cc"
                    ]
                },
                {
                    "command": [
                        "remember (S n) as nk.",
                        "VernacExtend",
                        "4c592adec846f68ed9a938cbef6bc7204726682e"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H.",
                        "VernacExtend",
                        "6f0a5994900d304b7e37570ee9395dd2367747c9"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (nk = max (tree_heightP x1) (tree_heightP x2)) by omega;clear H.",
                        "VernacExtend",
                        "db23fa6214c158b457bdc23a262fc246a3205116"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_dec (tree_heightP x1) (tree_heightP x2) );intro H.",
                        "VernacExtend",
                        "a155a027abb29ac4e6c6f24960bfe60d6eb4ec91"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (nk = tree_heightP x2).",
                        "VernacExtend",
                        "68433559f7b0cda2e65a4f17d63d13618c772ec6"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 <= tree_heightP x2 ) by omega.",
                        "VernacExtend",
                        "eb2f8bc29c5e8bbee98aef428847addc87432391"
                    ]
                },
                {
                    "command": [
                        "generalize (max_r _ _ H);intro.",
                        "VernacExtend",
                        "7fde9e9d627f1d0d002ef968f3f28cdf99adc387"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H in l.",
                        "VernacExtend",
                        "188bcc1877234a0721a024fadd0025c3d5f7ab25"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c;destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H21.",
                        "VernacExtend",
                        "0899e7e25e7aeea9ad36f8988e8e8891bda2b488"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_identity _ (exist (fun t => canonicalTree t) x1 H3) l);intro H11.",
                        "VernacExtend",
                        "d84228cdbe75021bc5f15773ce0325fc3e72d434"
                    ]
                },
                {
                    "command": [
                        "destruct H21 as [? [H21 H22]].",
                        "VernacExtend",
                        "863182f36b5b65c75271f960a285a4ada94ad0fc"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
                        "VernacExtend",
                        "fc0e4a9efeec2d3b349168a888719713334d8650"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "74b2a23f282f495a0824abd025a18140e261c6b3"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x1 H3 = exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _)).",
                        "VernacExtend",
                        "5ff3c2605e57f37e4bc4297c0476d9c213a88adc"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "47694f81ebb96e3a708b58680091b1968fe53680"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "6f394d9a4f132ebf9e17619cc84ff12171db2432"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
                        "VernacExtend",
                        "0c2ac849152d7084484a63976cea914ea9156413"
                    ]
                },
                {
                    "command": [
                        "rewrite H5;clear H5.",
                        "VernacExtend",
                        "8368d9536fb39e6bf32a42676999c5775eb8bbef"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "a29434467b799a068844e03a9c8c2c45cbe4c12b"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H5;clear H5.",
                        "VernacExtend",
                        "8368d9536fb39e6bf32a42676999c5775eb8bbef"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x1 x)) (mkCanon_correct (Node x1 x))).",
                        "VernacExtend",
                        "86a50a4b559a4c6d87cd578468933f85f8b46e73"
                    ]
                },
                {
                    "command": [
                        "split;trivial;subst nk.",
                        "VernacExtend",
                        "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
                    ]
                },
                {
                    "command": [
                        "clear -H22 l.",
                        "VernacExtend",
                        "6dff2c9f35f0c3ea21666e41d0989738a50b3eb9"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 <= n) by omega;clear l.",
                        "VernacExtend",
                        "d4b03797ba75046d33fbc828640b62d689ac5de5"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x1 x) <= S n).",
                        "VernacExtend",
                        "9d6836a56c250cc63eee9f97b9924e3edcb2dbc2"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H H22);intro.",
                        "VernacExtend",
                        "bf713280fd8f4f18d36eaad423c0426a480ee5f3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x1 x) = mkCanon (Node x1 x)) by trivial.",
                        "VernacExtend",
                        "38b1b219945f3261c05521cd136482f89219dd60"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H1);intro.",
                        "VernacExtend",
                        "e31cc829c1db47ff565100f4e139051e1865cd7f"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 = tree_heightP x2 \\/ tree_heightP x1 > tree_heightP x2).",
                        "VernacExtend",
                        "d2d3353cd2a55151624ff73042d5be257094f1de"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H in H0.",
                        "VernacExtend",
                        "044ef0a64c068347d38112a9feb1635f78270f85"
                    ]
                },
                {
                    "command": [
                        "generalize (max_idempotent (tree_heightP x1));intro.",
                        "VernacExtend",
                        "08528438d659923e0cfb51765c23ef296f788eaa"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H0.",
                        "VernacExtend",
                        "4421ff2cd84dca8f3db1b9c68d58f4e168d6194d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0 in H.",
                        "VernacExtend",
                        "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
                    ]
                },
                {
                    "command": [
                        "clear n0 H1.",
                        "VernacExtend",
                        "80a5472a37a3a3c4d483230f2795562ea002e7bd"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left (S nk) (exist (fun t => canonicalTree t) (Node x1 x2) c) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "3c9cdd24429bc4e1fbf8bd6d1a3c345158c7ae6a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H1;clear H1.",
                        "VernacExtend",
                        "00d5f4aac5a8b3519e323a55e4be18868171cc4f"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c.",
                        "VernacExtend",
                        "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H3) H0);intro H5.",
                        "VernacExtend",
                        "d93cf3c16dbc6a1d15f53abe7b0c6cef122675d1"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H6.",
                        "VernacExtend",
                        "b7df9067a10056e032c9ba02af8c2c707f7350c0"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [? [H11 H12]].",
                        "VernacExtend",
                        "87c046024cd12ef2f64306f6bf37b4ac056208b6"
                    ]
                },
                {
                    "command": [
                        "destruct H6 as [? [H21 H22]].",
                        "VernacExtend",
                        "90b5c5f2f0449c8023e919c2ffaf8a27e48edcd4"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x1 H3)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
                        "VernacExtend",
                        "d7aa4a1d84e30ec048136d6d6678f9866384583b"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "47694f81ebb96e3a708b58680091b1968fe53680"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
                        "VernacExtend",
                        "fc0e4a9efeec2d3b349168a888719713334d8650"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "9fd67603844fba7eec0b68149c7265617496c3da"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "destruct x0.",
                        "VernacExtend",
                        "080771fa4796a8f8a5b665c53a861793a726da17"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x0 c1 = exist (fun t => canonicalTree t) (mkCanon x0) (mkCanon_correct _)).",
                        "VernacExtend",
                        "ac63707e6f2bf3a654b47126e58a54e66a2839c0"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c1);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "8b4de42d6de6f110efa08949d97a3b4dc329def7"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "a29434467b799a068844e03a9c8c2c45cbe4c12b"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))).",
                        "VernacExtend",
                        "ccc8b3d7acbd07f2282f17d3f1ec885cfb8b955f"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "clear - H12 H22 Heqnk.",
                        "VernacExtend",
                        "7cb7075c692935b8cbfb9f5c0646ffaed1c06907"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *.",
                        "VernacExtend",
                        "6cf808b018092d3a5afb1f060467b3dce93bc24b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "subst nk.",
                        "VernacExtend",
                        "1a30101555f48d7c79b686bb3adc7038c4511f82"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x x0) <= S n).",
                        "VernacExtend",
                        "027d20ee8f150b8b2f2e256b9c177b0fb0de7282"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H12 H22);intro.",
                        "VernacExtend",
                        "f58ed39dd0930b424b4a711b67dc32ce37c224bb"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x x0) = mkCanon (Node x x0)) by trivial.",
                        "VernacExtend",
                        "bed616be7b312d7ce1b56c7bb1e04e36cc219a2c"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H0);intro.",
                        "VernacExtend",
                        "a8f8c94392579a0dde84863c9ee5a2dfd7ef059a"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (nk = tree_heightP x1).",
                        "VernacExtend",
                        "bdc8051231fdc6e8aecc1472d524250acb39ac6f"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x2 <= tree_heightP x1 ) by omega.",
                        "VernacExtend",
                        "6e674527ce79cbac56414ae55383ae08e65d4edd"
                    ]
                },
                {
                    "command": [
                        "generalize (max_l _ _ H1);intro.",
                        "VernacExtend",
                        "40694c751ddd0b3900054841b0e96671e5d7a466"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1 in H.",
                        "VernacExtend",
                        "e11682041b56405a4c951bbc5e0f5120244b17e2"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c;destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H4) H1);intro H11.",
                        "VernacExtend",
                        "1f1df06f22dc8ddc87be614c094e6ece44551238"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_identity _ (exist (fun t => canonicalTree t) x2 H5) H);intro H21.",
                        "VernacExtend",
                        "9fee5dc7075267dd058b07a72aca7fcde0f26874"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [? [H11 H12]].",
                        "VernacExtend",
                        "a8f98c1fc768df646018e3d27ac053d6a39015a9"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left nk (exist (fun t : ShareTree => canonicalTree t) x1 H4)= tree_round_left nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
                        "VernacExtend",
                        "4f02379099a40e563316b25ddb52569a13ef0360"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "41760b235d413eb6f4ee57a31b2e518ac5f49202"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11;clear H6.",
                        "VernacExtend",
                        "5675c1d11de624f1f779780ad005c55c9336a6fd"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "9fd67603844fba7eec0b68149c7265617496c3da"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11;clear H6.",
                        "VernacExtend",
                        "5675c1d11de624f1f779780ad005c55c9336a6fd"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x2 H5 = exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _)).",
                        "VernacExtend",
                        "44bd8b4c4e9485df552e969ad80c4c37daacced4"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H5);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "389618fca8f8d5ba6ed28856975d616d4a8ca446"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H21;clear H6.",
                        "VernacExtend",
                        "5c031d266d81511bbdfacb431036df70fbd1a67e"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_left (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_left (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "6f394d9a4f132ebf9e17619cc84ff12171db2432"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
                        "VernacExtend",
                        "0c2ac849152d7084484a63976cea914ea9156413"
                    ]
                },
                {
                    "command": [
                        "rewrite H6;clear H6.",
                        "VernacExtend",
                        "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "a29434467b799a068844e03a9c8c2c45cbe4c12b"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H6;clear H6.",
                        "VernacExtend",
                        "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x2)) (mkCanon_correct (Node x x2))).",
                        "VernacExtend",
                        "c7c97404fd37d8eb83017a77b45797494244f91b"
                    ]
                },
                {
                    "command": [
                        "split;trivial;subst nk.",
                        "VernacExtend",
                        "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
                    ]
                },
                {
                    "command": [
                        "clear -H12 H.",
                        "VernacExtend",
                        "bd0428404d6026523e35f613781c3476df0b3275"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x2 <= n) by omega;clear H.",
                        "VernacExtend",
                        "4a49a2bba09808d76f190cd63a0b5a1aaf9f55e1"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x x2) <= S n).",
                        "VernacExtend",
                        "8aab27d2aeabf89928e8f4733095d3ce758b6fa0"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H12 H0);intro.",
                        "VernacExtend",
                        "e6d7ae1707b429e7f3d806fd43e0acb450196317"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x x2) = mkCanon (Node x x2)) by trivial.",
                        "VernacExtend",
                        "b944b305c6ef015230ea598404d1cc08cf633cba"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H1);intro.",
                        "VernacExtend",
                        "e31cc829c1db47ff565100f4e139051e1865cd7f"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_Some",
            "line_nb": 3188,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "symmetry in H1.",
                        "VernacExtend",
                        "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
                    ]
                },
                {
                    "command": [
                        "copy H1.",
                        "VernacExtend",
                        "ab6a2ace31991f8c906c1f88199789977b1583e2"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_decrease in H1.",
                        "VernacExtend",
                        "8c4b3447d110e65ff48b9031ef577b2224ff5b55"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? [? ?]].",
                        "VernacExtend",
                        "787dbc926803499e9a09503c86fee4ac1727e31b"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : tree_height t0 < S n) by omega.",
                        "VernacExtend",
                        "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_identity in H2.",
                        "VernacExtend",
                        "667806aceb8dfb1dfa554b880d1b752e3bfbfde1"
                    ]
                },
                {
                    "command": [
                        "exists t0.",
                        "VernacExtend",
                        "6d50368891babea086e8c2d39fddce76180a7059"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_left_height_compare",
            "line_nb": 3205,
            "steps": [
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct n.",
                        "VernacExtend",
                        "1582bf847770c098bee882393a48b146dcc37a8c"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "compute in H.",
                        "VernacExtend",
                        "686103f70bd92c1e64ec2f78836e7444971cef09"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := le_lt_dec (tree_height t0) (S n)).",
                        "VernacExtend",
                        "c9258a6e28421f5b26c4d9cf2c1dd43aaacba791"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "inv l.",
                        "VernacExtend",
                        "bc13524cfd3b1d903ce15a10499e722312e03c8d"
                    ]
                },
                {
                    "command": [
                        "symmetry in H1.",
                        "VernacExtend",
                        "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
                    ]
                },
                {
                    "command": [
                        "copy H1.",
                        "VernacExtend",
                        "ab6a2ace31991f8c906c1f88199789977b1583e2"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_decrease in H1.",
                        "VernacExtend",
                        "8c4b3447d110e65ff48b9031ef577b2224ff5b55"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? [? ?]].",
                        "VernacExtend",
                        "787dbc926803499e9a09503c86fee4ac1727e31b"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H1.",
                        "VernacExtend",
                        "72668ea55992bff4c6a64774b37a8290e2ed12ee"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : tree_height t0 < S n) by omega.",
                        "VernacExtend",
                        "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_identity in H2.",
                        "VernacExtend",
                        "667806aceb8dfb1dfa554b880d1b752e3bfbfde1"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H2.",
                        "VernacExtend",
                        "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_None in l.",
                        "VernacExtend",
                        "16a939dbce0d6964d79deb99c394ddd6a65890cb"
                    ]
                },
                {
                    "command": [
                        "unfold roundL,roundableL_tree in *.",
                        "VernacExtend",
                        "3c5f97d3a44406750bfb14c9b423efb2cedd8890"
                    ]
                },
                {
                    "command": [
                        "rewrite H in l.",
                        "VernacExtend",
                        "2fd827005c795fc7de50e461a47e50acb651d334"
                    ]
                },
                {
                    "command": [
                        "inv l.",
                        "VernacExtend",
                        "bc13524cfd3b1d903ce15a10499e722312e03c8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_combine",
            "line_nb": 3236,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "intros ? ? ? ? ? H1 H2.",
                        "VernacExtend",
                        "0121d00d1517229ac55dbc2a218d5b1c6ac6069e"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right in *.",
                        "VernacExtend",
                        "a386295242b828a35fa2b1ee1c5b5d339fb17daf"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull n (mkCanon t1)) as o1; remember (mkFull n (mkCanon t2)) as o2.",
                        "VernacExtend",
                        "4e296e332f7f24549a4a7f6bd40f71967d354397"
                    ]
                },
                {
                    "command": [
                        "icase o1;icase o2.",
                        "VernacExtend",
                        "e112e2f93717ff9f0911ba3d038970d2ebc3deb4"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo1,Heqo2.",
                        "VernacExtend",
                        "22d356b5f755f3f4ea868d08c6a406c48018db55"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_mkFull_split n t1 t2 s s0);intro H.",
                        "VernacExtend",
                        "f2d12a768c7f0b1028e48ff5fdc2f5d1f4582254"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ H].",
                        "VernacExtend",
                        "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
                    ]
                },
                {
                    "command": [
                        "detach H;auto.",
                        "VernacExtend",
                        "ff4db3e26f80737b66847a6dc210f3d29548edd4"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "icase (tree_round_rightP (S n) s); icase (tree_round_rightP (S n) s0).",
                        "VernacExtend",
                        "7109815a088048b3310337e98d163a00a9e1669c"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_split",
            "line_nb": 3257,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "intros ? ? ? ? ? H.",
                        "VernacExtend",
                        "7b77f8f7e8332748301f074944b6c5a46f84f2c8"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right in *.",
                        "VernacExtend",
                        "a386295242b828a35fa2b1ee1c5b5d339fb17daf"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "remember (mkFull (S (S n)) (mkCanon (Node t1 t2))) as o.",
                        "VernacExtend",
                        "6a3a87e2a4e9970eec9acf8d3a77270123a715ae"
                    ]
                },
                {
                    "command": [
                        "icase o.",
                        "VernacExtend",
                        "b486dbd7a64aa49c1b0b142be3547d500333e5fb"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqo.",
                        "VernacExtend",
                        "7c9e17471ef37417b4efe25396a55ff7e2458b50"
                    ]
                },
                {
                    "command": [
                        "icase s; remember (S n) as nk.",
                        "VernacExtend",
                        "dcd95285b50d230b18d91f51df9301e28f51e071"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon (Node t1 t2)).",
                        "VernacExtend",
                        "832b44591438431e738e0943576516aded1e32d2"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqo; icase (mkFull nk (Leaf b0)).",
                        "VernacExtend",
                        "7274dd7acbd8316128bfc9da3872c11b12a4a492"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqo;icase (mkFull nk s1); icase (mkFull nk s2).",
                        "VernacExtend",
                        "7b3872e3fc256ec3cc9bc59d13060f7e84202308"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_mkFull_split nk t1 t2 s1 s2);intro H1.",
                        "VernacExtend",
                        "b4535eef2d81327c616ef3acb09840c59c4c1cdc"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 _].",
                        "VernacExtend",
                        "a6c834813ac9bc3eed37edeeefb0fa107dee2dac"
                    ]
                },
                {
                    "command": [
                        "detach H1;trivial.",
                        "VernacExtend",
                        "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 H2].",
                        "VernacExtend",
                        "352758143f119ffe1117850fdcea520fdbdaf126"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite Heqnk in *.",
                        "VernacExtend",
                        "04d7891f675fe588e9b41c4161d0566d3d1ecec6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_round_rightP (S n) s1); icase (tree_round_rightP (S n) s2).",
                        "VernacExtend",
                        "660e5e1e13e9772246f0d404a50123faa4a6c2ff"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro H.",
                        "VernacExtend",
                        "b3c349e3d55f47284ef08c128f7c140b198703f8"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H4 H5].",
                        "VernacExtend",
                        "c2a7751626aa2695f686607313f4016af3556e06"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_Leaf",
            "line_nb": 3282,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right.",
                        "VernacExtend",
                        "7048b8a02f110268d457cb9011c1c51ea90c6e74"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Leaf b)) (canonTree_Leaf _) (mkCanon_correct _)); intro H.",
                        "VernacExtend",
                        "6a5f3fb0980e3192ab0bd4da1327e326c630b360"
                    ]
                },
                {
                    "command": [
                        "detach H.",
                        "VernacExtend",
                        "7b1cbb27e97f4baf25473f44a1a47a398ac68156"
                    ]
                },
                {
                    "command": [
                        "rewrite H in IHn.",
                        "VernacExtend",
                        "f0732d6832759b144fe560e722696ffeacd14e6c"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_combine _ _ _ _ _ IHn IHn);intro H1.",
                        "VernacExtend",
                        "b4cb36a1bcab90768bc834f34ddb05a2cf45bdac"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (mkCanon (Node (Leaf b) (Leaf b))) (canonTree_Leaf _) (mkCanon_correct _)); intro H2.",
                        "VernacExtend",
                        "4ab5a88d346bda94c9f3f851ef3d55d5f4b388be"
                    ]
                },
                {
                    "command": [
                        "detach H2.",
                        "VernacExtend",
                        "37dcd8f355354d3a35c87e71d575ce2b99de98cf"
                    ]
                },
                {
                    "command": [
                        "rewrite H2;trivial.",
                        "VernacExtend",
                        "f4439e25b4e46b870f332cc9d16d49fe012ed96a"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_identity",
            "line_nb": 3300,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ( H1 : n > tree_height t0) by omega.",
                        "VernacExtend",
                        "0f298e50454e3a4e76605a6ddd241c28a3d2bf71"
                    ]
                },
                {
                    "command": [
                        "clear H;rename H1 into H.",
                        "VernacExtend",
                        "089aeea23b40be75783bd40cfebd97d666c59f76"
                    ]
                },
                {
                    "command": [
                        "revert H;revert t0.",
                        "VernacExtend",
                        "f6572a4ca7b73d075300b981460c5a2021b2d55a"
                    ]
                },
                {
                    "command": [
                        "induction n;intros;unfold tree_height in *.",
                        "VernacExtend",
                        "b556b09d0fdbc9100762ec41a97a3430461f5226"
                    ]
                },
                {
                    "command": [
                        "inversion H;icase t0.",
                        "VernacExtend",
                        "12cdd9ef7756b0905ebb39e6b043d5b6839f7056"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c].",
                        "VernacExtend",
                        "1bbd86825644f3222b59ad972d4c2be0ab656553"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Leaf b) (Leaf b) c (canonTree_Leaf _));intro H1.",
                        "VernacExtend",
                        "a3c7b86026256b43c66b0aef029be88359bd81ac"
                    ]
                },
                {
                    "command": [
                        "detach H1;trivial.",
                        "VernacExtend",
                        "ab8ed881f239328f3b1fa1318c00d8a4ea4496e9"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_Leaf.",
                        "VernacExtend",
                        "f9c8ba98646fcacec3206aaccfe3047d0691c1e6"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert ( n > tree_heightP x1 /\\ n > tree_heightP x2).",
                        "VernacExtend",
                        "32d630af072b6b048480a22aab2761549f481450"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP x1) (tree_heightP x2)).",
                        "VernacExtend",
                        "fa9b5de4c57b1b0088b378e3364a17f1fd2a6492"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP x1) (tree_heightP x2)).",
                        "VernacExtend",
                        "b7b12eb8a2c2081661944ce15392606baebaf783"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H1 H2].",
                        "VernacExtend",
                        "43c576a82ec84c07f51bc50e18269c6d09f20cef"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c.",
                        "VernacExtend",
                        "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
                    ]
                },
                {
                    "command": [
                        "destruct c as [H3 [H4 [H5 H6]]].",
                        "VernacExtend",
                        "acd3d5230a896ef5f935d1d1cd957c7409ac28a2"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H5) H1);intro.",
                        "VernacExtend",
                        "639d7659a3ce3a1086a4b4f398f8191f0ec58940"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H6) H2);intro.",
                        "VernacExtend",
                        "b837a2d1c9b898a16d37c7ec12a4ebd8bdfe0809"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr x1 (mkCanon x1) H5 (mkCanon_correct _));intro H8.",
                        "VernacExtend",
                        "99cd7c748251a51cb2563b9845b4112ca29bdd71"
                    ]
                },
                {
                    "command": [
                        "detach H8.",
                        "VernacExtend",
                        "5bf08f2a6d47fffecd56809c43f956d01c62ccb6"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr x2 (mkCanon x2) H6 (mkCanon_correct _));intro H9.",
                        "VernacExtend",
                        "2d151c3b14b6e62bc5b186b6ab72961c480323c0"
                    ]
                },
                {
                    "command": [
                        "detach H9.",
                        "VernacExtend",
                        "ba2310bb2943fbe934d85ab8814138a09aa10acc"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr (Node x1 x2) (mkCanon (Node x1 x2)) c0 (mkCanon_correct _));intro H10.",
                        "VernacExtend",
                        "14617d2dd3f24956d5ab3f313a83b80693948a83"
                    ]
                },
                {
                    "command": [
                        "detach H10.",
                        "VernacExtend",
                        "d973e442f828c667cc28310ca687622d2cbb7098"
                    ]
                },
                {
                    "command": [
                        "rewrite H8,H9,H10 in *.",
                        "VernacExtend",
                        "1373e5dec310a73733f29bf29718f4c15e1312be"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_combine;trivial.",
                        "VernacExtend",
                        "73435348908ed79ff71e12f9967dff048e5e1d59"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply mkCanon_identity;trivial.",
                        "VernacExtend",
                        "0e555111f7cd02568f5f0754a785aeb9847ff37d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_one",
            "line_nb": 3339,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2.",
                        "VernacExtend",
                        "15a3568284d2cd175af8b5611f56214888d4a2ae"
                    ]
                },
                {
                    "command": [
                        "exists b;exists b0.",
                        "VernacExtend",
                        "de67d4e18acd25db923c44b2a78056225f1db57e"
                    ]
                },
                {
                    "command": [
                        "compute in H.",
                        "VernacExtend",
                        "686103f70bd92c1e64ec2f78836e7444971cef09"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_join",
            "line_nb": 3351,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct t1.",
                        "VernacExtend",
                        "5690e26538feaaf47c16cb191a37ff746748469a"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right in H0.",
                        "VernacExtend",
                        "283fa8d0f4f737bce47abdd9929a028d3a06e7a7"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [t1 ?]; destruct t2 as [t2 ?]; destruct t3 as [t3 ?].",
                        "VernacExtend",
                        "c6618f03a54e7cd5b0d84e1e6300df20d9b8698b"
                    ]
                },
                {
                    "command": [
                        "icase t1;icase t2;icase t3.",
                        "VernacExtend",
                        "c5c70d4ca66273d3e6d019b43f0fc8ba11279b31"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;icase b1; compute;split;apply exist_ext;trivial.",
                        "VernacExtend",
                        "5d1da5b025f02679ed5ce08967dc11b23c1d9da0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H2);intro H3.",
                        "VernacExtend",
                        "128f449e8e8487c189a2bb1ef66c2f542b83e6af"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "destruct H as [_ H].",
                        "VernacExtend",
                        "252bb582ef85061b7cc9b43d386eb9a1c312e1ba"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear-H.",
                        "VernacExtend",
                        "df101ff4b489cf904bd8e6159ba4f4fc0cc0036e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "5a788672512092066a41f529974e085c08206738"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H3 H4].",
                        "VernacExtend",
                        "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear-H3 H4 c0.",
                        "VernacExtend",
                        "a72d5783c74f4fc399400d8d68ca133abc86562e"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c0);intro.",
                        "VernacExtend",
                        "672d1a1cfdc5ba5010faa95a67579d45610996d8"
                    ]
                },
                {
                    "command": [
                        "icase b; congruence.",
                        "VernacExtend",
                        "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "5a788672512092066a41f529974e085c08206738"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H2);intro H4.",
                        "VernacExtend",
                        "8ee077b45930f491d38a27c3225c70e1260a8018"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_Leaf b 0);intro H5.",
                        "VernacExtend",
                        "560f84c9141f4433b357c0ba11169c7fe7be5cfc"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c) by apply proof_irr.",
                        "VernacExtend",
                        "c9324db94f5b27003c608301cef66a6a847b58d7"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H5;clear H3.",
                        "VernacExtend",
                        "18e16c85fb8636c6522ec69b7a026d1be664007b"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H0;clear H5.",
                        "VernacExtend",
                        "b846d4b7e33dee5b648f69c3b3a26b261cdfd1d0"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H3.",
                        "VernacExtend",
                        "3b504a53d263be900b9899af24cef6de5e0ec395"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b31 b32).",
                        "VernacExtend",
                        "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
                    ]
                },
                {
                    "command": [
                        "inv H4.",
                        "VernacExtend",
                        "901a2034cad394e040195b9b10020bf0a16b908e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.glb.",
                        "VernacExtend",
                        "eb79f2d18106e6192f9b9503600828c1ee6038db"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "df352eabe36fe83480e7bdedfa49696274abff70"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H c.",
                        "VernacExtend",
                        "fa26bc2d4f035abe0cd3394b0e1d8d8a79f00f5e"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "icase b;congruence.",
                        "VernacExtend",
                        "30692d8ed746ca04f8894fa25f409bfa7e6f8f30"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "df352eabe36fe83480e7bdedfa49696274abff70"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H2);intro H4.",
                        "VernacExtend",
                        "8ee077b45930f491d38a27c3225c70e1260a8018"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_Leaf b 0);intro.",
                        "VernacExtend",
                        "35fa49a1b0c3b4c27e6ba840cbb74842b3d32fa1"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c0) by apply proof_irr.",
                        "VernacExtend",
                        "bb02bc20cc8cd7e56ddbda7d3175d7e4544aa8af"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H3;clear H4.",
                        "VernacExtend",
                        "4aa46440341dd396700f545892dabc0792b19379"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H1;clear H3.",
                        "VernacExtend",
                        "27cf446084dfa77d508991ea930536685b688fcf"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H3; inv H4.",
                        "VernacExtend",
                        "c036953c568aaa789f26c1b51a8c32023a3face5"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b31 b32).",
                        "VernacExtend",
                        "e4c57d515f8d9596e03caa9c89e286e7e7588a69"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "cfd5de51d4e25939e681ebd61032b9713860d1ca"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.glb.",
                        "VernacExtend",
                        "eb79f2d18106e6192f9b9503600828c1ee6038db"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b42.",
                        "VernacExtend",
                        "f1312c574ebdb0bcc8ee214ec32bd58c9d029ed2"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b42.",
                        "VernacExtend",
                        "f1312c574ebdb0bcc8ee214ec32bd58c9d029ed2"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "df352eabe36fe83480e7bdedfa49696274abff70"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H1);intro H4.",
                        "VernacExtend",
                        "cb7d8d8048b0c0871b8cd6f5e65a99dbd2e846ce"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_Leaf b 0);intro.",
                        "VernacExtend",
                        "35fa49a1b0c3b4c27e6ba840cbb74842b3d32fa1"
                    ]
                },
                {
                    "command": [
                        "assert (canonTree_Leaf b = c1) by apply proof_irr.",
                        "VernacExtend",
                        "45b1d455107f8b62b02821b8fc2339b3bf4bf80d"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H3;clear H4.",
                        "VernacExtend",
                        "4aa46440341dd396700f545892dabc0792b19379"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H2;clear H3.",
                        "VernacExtend",
                        "3b50dc6fcc42adce18b93f1836854e98b8b062ab"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "icase b; inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
                        "VernacExtend",
                        "de032df4c6123f7c586596d4756db3bab2f88ffe"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H0);intro H3.",
                        "VernacExtend",
                        "df352eabe36fe83480e7bdedfa49696274abff70"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [b31 [b32 [H31 [H32 H33]]]];subst.",
                        "VernacExtend",
                        "f418afa63b1bebbc4b7cc285f1ead45179b071d0"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H1);intro H4.",
                        "VernacExtend",
                        "cb7d8d8048b0c0871b8cd6f5e65a99dbd2e846ce"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [b41 [b42 [H41 [H42 H43]]]];subst.",
                        "VernacExtend",
                        "22fe172a243362d822ac59920f21a9d994151567"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_one _ _ _ _ H2);intro H5.",
                        "VernacExtend",
                        "8d1fd776c98c1f7cf7a3b96df529e6a4cd48564a"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [b51 [b52 [H51 [H52 H53]]]];subst.",
                        "VernacExtend",
                        "681ddd16039acc5a00eb922e148b6c1da74d3213"
                    ]
                },
                {
                    "command": [
                        "inv H; inv H2;inv H3; icase b31;icase b41;icase b32;icase b42;inv H4;inv H2; split; unfold BAF.glb, BAF.lub; apply exist_ext; simpl;trivial.",
                        "VernacExtend",
                        "b6415d6540a0b2a2201dbdd01fe60812cefe2e8a"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite1 t1);intro H3; generalize (canonTree_rewrite1 t2);intro H4; generalize (canonTree_rewrite1 t3);intro H5; generalize (canonTree_rewrite1 t1');intro H6; generalize (canonTree_rewrite1 t2');intro H7; generalize (canonTree_rewrite1 t3');intro H8; destruct H3 as [? [? ?]]; destruct H4 as [? [? ?]]; destruct H5 as [? [? ?]]; destruct H6 as [? [? ?]]; destruct H7 as [? [? ?]]; destruct H8 as [? [? ?]].",
                        "VernacExtend",
                        "d4e1694ed4661514ae37999bbdb0e80f892f49d9"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_split _ _ _ _ _ H0);intro H01.",
                        "VernacExtend",
                        "dd388da1c8f0e8dd17c2d439b727c2ae61fa37d9"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_split _ _ _ _ _ H1);intro H11.",
                        "VernacExtend",
                        "8fd5b18660eb8f48f2959df79e943136ef9a56db"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_split _ _ _ _ _ H2);intro H21.",
                        "VernacExtend",
                        "6c730065ad147441e46052ad36f88589bc92c3ab"
                    ]
                },
                {
                    "command": [
                        "destruct H01 as [H01 H02].",
                        "VernacExtend",
                        "6918c478d33134759ac1b43027976d6ec219b8e3"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12].",
                        "VernacExtend",
                        "e1974e4ce31e9065c7b502c0d9f6dea598b78b6e"
                    ]
                },
                {
                    "command": [
                        "destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "5ac9d8330971075d82ab4bda04366276f754d263"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_join_split _ _ _ _ _ _ H);intro H3.",
                        "VernacExtend",
                        "538417e9a791189176e6b8477ee5a975b7ce418d"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ H31 H01 H11 H21);intro H41.",
                        "VernacExtend",
                        "bdedc8d7ba091cf5fe0aea6840ad6e1fccd43df1"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ H32 H02 H12 H22);intro H42.",
                        "VernacExtend",
                        "5b40ae4d025c765b87247ef37104be2f3e8d2d24"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_join_combine;trivial.",
                        "VernacExtend",
                        "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_None",
            "line_nb": 3465,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right.",
                        "VernacExtend",
                        "7048b8a02f110268d457cb9011c1c51ea90c6e74"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_None _ _ H);intro.",
                        "VernacExtend",
                        "aac8975fe6b48d5d41c6e2a56388c30f93cdff96"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_decrease",
            "line_nb": 3474,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros; destruct t0; icase x.",
                        "VernacExtend",
                        "69dbc9a8c4afaec29b752a82601b4c571cd70ad9"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2;unfold tree_height in *;inversion H.",
                        "VernacExtend",
                        "7c671c853f416b61366875f539e3da4cc0454484"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t => canonicalTree t) (Leaf b0) (canonTree_Leaf _)).",
                        "VernacExtend",
                        "58fa6d53472551a681396517a6983d1bc7b1f0db"
                    ]
                },
                {
                    "command": [
                        "compute;split;try omega;try f_equal;try apply exist_ext;trivial.",
                        "VernacExtend",
                        "f69632261fed51f9918749ee9253bba65eb76f9e"
                    ]
                },
                {
                    "command": [
                        "elimtype False;omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H1.",
                        "VernacExtend",
                        "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
                    ]
                },
                {
                    "command": [
                        "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) 0) by omega; clear H1.",
                        "VernacExtend",
                        "4fd33d518b03948fcb07fc7ba91feb309632262d"
                    ]
                },
                {
                    "command": [
                        "generalize (max_0_r (max (tree_heightP x1_1) (tree_heightP x1_2) + 1));intro.",
                        "VernacExtend",
                        "d24b4be006df1d4185ad73d76fe106d7e14947dc"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H;clear H0.",
                        "VernacExtend",
                        "811f7a58e18c564af35c6b055d384792dac7a36c"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "elimtype False;clear -H1.",
                        "VernacExtend",
                        "151f1cefdc398d51014b1045fb63ec8e9df5b16a"
                    ]
                },
                {
                    "command": [
                        "assert (0 = max (max (tree_heightP x1_1) (tree_heightP x1_2) + 1) (max (tree_heightP x2_1) (tree_heightP x2_2) + 1)) by omega; clear H1.",
                        "VernacExtend",
                        "cf505960e4f54f0966856abc1b1824d4b26e33f8"
                    ]
                },
                {
                    "command": [
                        "generalize (plus_max_distr_r (max (tree_heightP x1_1) (tree_heightP x1_2)) (max (tree_heightP x2_1) (tree_heightP x2_2)) 1);intro.",
                        "VernacExtend",
                        "4e4e7862b543e5ccd848c5b9e7d815ca75e16ba3"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H;omega.",
                        "VernacExtend",
                        "d1e3daf704b10903d22ad1c79f649670fe7fb9cc"
                    ]
                },
                {
                    "command": [
                        "remember (S n) as nk.",
                        "VernacExtend",
                        "4c592adec846f68ed9a938cbef6bc7204726682e"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H.",
                        "VernacExtend",
                        "6f0a5994900d304b7e37570ee9395dd2367747c9"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (nk = max (tree_heightP x1) (tree_heightP x2)) by omega;clear H.",
                        "VernacExtend",
                        "db23fa6214c158b457bdc23a262fc246a3205116"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_dec (tree_heightP x1) (tree_heightP x2) );intro H.",
                        "VernacExtend",
                        "a155a027abb29ac4e6c6f24960bfe60d6eb4ec91"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (nk = tree_heightP x2).",
                        "VernacExtend",
                        "68433559f7b0cda2e65a4f17d63d13618c772ec6"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 <= tree_heightP x2 ) by omega.",
                        "VernacExtend",
                        "eb2f8bc29c5e8bbee98aef428847addc87432391"
                    ]
                },
                {
                    "command": [
                        "generalize (max_r _ _ H);intro.",
                        "VernacExtend",
                        "7fde9e9d627f1d0d002ef968f3f28cdf99adc387"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H in l.",
                        "VernacExtend",
                        "188bcc1877234a0721a024fadd0025c3d5f7ab25"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c;destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H21.",
                        "VernacExtend",
                        "0899e7e25e7aeea9ad36f8988e8e8891bda2b488"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_identity _ (exist (fun t => canonicalTree t) x1 H3) l);intro H11.",
                        "VernacExtend",
                        "1b079366ca0f894351f70fc90e2580f5525212ef"
                    ]
                },
                {
                    "command": [
                        "destruct H21 as [? [H21 H22]].",
                        "VernacExtend",
                        "863182f36b5b65c75271f960a285a4ada94ad0fc"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
                        "VernacExtend",
                        "97fe348686849a178d2d8bb3c5a751af77ba7abb"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "74b2a23f282f495a0824abd025a18140e261c6b3"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x1 H3 = exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _)).",
                        "VernacExtend",
                        "5ff3c2605e57f37e4bc4297c0476d9c213a88adc"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "47694f81ebb96e3a708b58680091b1968fe53680"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "526e7f07917c602f94e3481dd32a2b3105c1dc28"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
                        "VernacExtend",
                        "0c2ac849152d7084484a63976cea914ea9156413"
                    ]
                },
                {
                    "command": [
                        "rewrite H5;clear H5.",
                        "VernacExtend",
                        "8368d9536fb39e6bf32a42676999c5775eb8bbef"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "2d22fdb979f422a76de9bebf1933606724605c62"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H5;clear H5.",
                        "VernacExtend",
                        "8368d9536fb39e6bf32a42676999c5775eb8bbef"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x1 x)) (mkCanon_correct (Node x1 x))).",
                        "VernacExtend",
                        "86a50a4b559a4c6d87cd578468933f85f8b46e73"
                    ]
                },
                {
                    "command": [
                        "split;trivial;subst nk.",
                        "VernacExtend",
                        "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
                    ]
                },
                {
                    "command": [
                        "clear -H22 l.",
                        "VernacExtend",
                        "6dff2c9f35f0c3ea21666e41d0989738a50b3eb9"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 <= n) by omega;clear l.",
                        "VernacExtend",
                        "d4b03797ba75046d33fbc828640b62d689ac5de5"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x1 x) <= S n).",
                        "VernacExtend",
                        "9d6836a56c250cc63eee9f97b9924e3edcb2dbc2"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H H22);intro.",
                        "VernacExtend",
                        "bf713280fd8f4f18d36eaad423c0426a480ee5f3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x1 x) = mkCanon (Node x1 x)) by trivial.",
                        "VernacExtend",
                        "38b1b219945f3261c05521cd136482f89219dd60"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H1);intro.",
                        "VernacExtend",
                        "e31cc829c1db47ff565100f4e139051e1865cd7f"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 = tree_heightP x2 \\/ tree_heightP x1 > tree_heightP x2).",
                        "VernacExtend",
                        "d2d3353cd2a55151624ff73042d5be257094f1de"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H in H0.",
                        "VernacExtend",
                        "044ef0a64c068347d38112a9feb1635f78270f85"
                    ]
                },
                {
                    "command": [
                        "generalize (max_idempotent (tree_heightP x1));intro.",
                        "VernacExtend",
                        "08528438d659923e0cfb51765c23ef296f788eaa"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H0.",
                        "VernacExtend",
                        "4421ff2cd84dca8f3db1b9c68d58f4e168d6194d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0 in H.",
                        "VernacExtend",
                        "a6c391ea2ef389fc353ff5fa2171f50bd2b9da41"
                    ]
                },
                {
                    "command": [
                        "clear n0 H1.",
                        "VernacExtend",
                        "80a5472a37a3a3c4d483230f2795562ea002e7bd"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right (S nk) (exist (fun t => canonicalTree t) (Node x1 x2) c) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "59b818719948c1bd2134b19a255b80e2af607467"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c);intro.",
                        "VernacExtend",
                        "ce54830f7f47c654f72c0099b268bc2412a8a9e1"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H1;clear H1.",
                        "VernacExtend",
                        "00d5f4aac5a8b3519e323a55e4be18868171cc4f"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c.",
                        "VernacExtend",
                        "919b1dff5d06ce54c46e67c404169cbb7ab0e044"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H3) H0);intro H5.",
                        "VernacExtend",
                        "d93cf3c16dbc6a1d15f53abe7b0c6cef122675d1"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 H4) H);intro H6.",
                        "VernacExtend",
                        "b7df9067a10056e032c9ba02af8c2c707f7350c0"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [? [H11 H12]].",
                        "VernacExtend",
                        "87c046024cd12ef2f64306f6bf37b4ac056208b6"
                    ]
                },
                {
                    "command": [
                        "destruct H6 as [? [H21 H22]].",
                        "VernacExtend",
                        "90b5c5f2f0449c8023e919c2ffaf8a27e48edcd4"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x1 H3)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
                        "VernacExtend",
                        "b656c1ec12759ed9f42aac4445aeb6f670f45cdd"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H3);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "47694f81ebb96e3a708b58680091b1968fe53680"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x2 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _))).",
                        "VernacExtend",
                        "97fe348686849a178d2d8bb3c5a751af77ba7abb"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "ffaae91a29ec3a52650f53f5008a1a53a21bee05"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "9fd67603844fba7eec0b68149c7265617496c3da"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H11;clear H5.",
                        "VernacExtend",
                        "b46a8398f5363348f44ee6bebe9ba98189e9bdf7"
                    ]
                },
                {
                    "command": [
                        "destruct x0.",
                        "VernacExtend",
                        "080771fa4796a8f8a5b665c53a861793a726da17"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x0 c1 = exist (fun t => canonicalTree t) (mkCanon x0) (mkCanon_correct _)).",
                        "VernacExtend",
                        "ac63707e6f2bf3a654b47126e58a54e66a2839c0"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c1);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "8b4de42d6de6f110efa08949d97a3b4dc329def7"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H21;clear H5.",
                        "VernacExtend",
                        "9ec9011253a5a88eca5fdab77078cbda36696aa5"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "2d22fdb979f422a76de9bebf1933606724605c62"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H5.",
                        "VernacExtend",
                        "d39eba0f5559f57239c887c68680638084d28197"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x0)) (mkCanon_correct (Node x x0))).",
                        "VernacExtend",
                        "ccc8b3d7acbd07f2282f17d3f1ec885cfb8b955f"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "clear - H12 H22 Heqnk.",
                        "VernacExtend",
                        "7cb7075c692935b8cbfb9f5c0646ffaed1c06907"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *.",
                        "VernacExtend",
                        "6cf808b018092d3a5afb1f060467b3dce93bc24b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "subst nk.",
                        "VernacExtend",
                        "1a30101555f48d7c79b686bb3adc7038c4511f82"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x x0) <= S n).",
                        "VernacExtend",
                        "027d20ee8f150b8b2f2e256b9c177b0fb0de7282"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H12 H22);intro.",
                        "VernacExtend",
                        "f58ed39dd0930b424b4a711b67dc32ce37c224bb"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x x0) = mkCanon (Node x x0)) by trivial.",
                        "VernacExtend",
                        "bed616be7b312d7ce1b56c7bb1e04e36cc219a2c"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H0);intro.",
                        "VernacExtend",
                        "a8f8c94392579a0dde84863c9ee5a2dfd7ef059a"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (nk = tree_heightP x1).",
                        "VernacExtend",
                        "bdc8051231fdc6e8aecc1472d524250acb39ac6f"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x2 <= tree_heightP x1 ) by omega.",
                        "VernacExtend",
                        "6e674527ce79cbac56414ae55383ae08e65d4edd"
                    ]
                },
                {
                    "command": [
                        "generalize (max_l _ _ H1);intro.",
                        "VernacExtend",
                        "40694c751ddd0b3900054841b0e96671e5d7a466"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1 in H.",
                        "VernacExtend",
                        "e11682041b56405a4c951bbc5e0f5120244b17e2"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c;destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "759e7ee9339b1c1a23fe2c583405e5e301aca6ea"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 H4) H1);intro H11.",
                        "VernacExtend",
                        "1f1df06f22dc8ddc87be614c094e6ece44551238"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_identity _ (exist (fun t => canonicalTree t) x2 H5) H);intro H21.",
                        "VernacExtend",
                        "272e424af7bff608377b936b820fedb242658372"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [? [H11 H12]].",
                        "VernacExtend",
                        "a8f98c1fc768df646018e3d27ac053d6a39015a9"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right nk (exist (fun t : ShareTree => canonicalTree t) x1 H4)= tree_round_right nk (exist (fun t => canonicalTree t) (mkCanon x1) (mkCanon_correct _))).",
                        "VernacExtend",
                        "2189c5c331eba578c08191f252be1dc3f3fbfe0b"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H4);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "41760b235d413eb6f4ee57a31b2e518ac5f49202"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11;clear H6.",
                        "VernacExtend",
                        "5675c1d11de624f1f779780ad005c55c9336a6fd"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x c = exist (fun t => canonicalTree t) (mkCanon x) (mkCanon_correct _)).",
                        "VernacExtend",
                        "4fcde668493fb6331b9dbd0629c5e49d3b65f46f"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c);intro H13; rewrite H13; trivial.",
                        "VernacExtend",
                        "9fd67603844fba7eec0b68149c7265617496c3da"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11;clear H6.",
                        "VernacExtend",
                        "5675c1d11de624f1f779780ad005c55c9336a6fd"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) x2 H5 = exist (fun t => canonicalTree t) (mkCanon x2) (mkCanon_correct _)).",
                        "VernacExtend",
                        "44bd8b4c4e9485df552e969ad80c4c37daacced4"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ H5);intro H23; rewrite H23; trivial.",
                        "VernacExtend",
                        "389618fca8f8d5ba6ed28856975d616d4a8ca446"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H21;clear H6.",
                        "VernacExtend",
                        "5c031d266d81511bbdfacb431036df70fbd1a67e"
                    ]
                },
                {
                    "command": [
                        "assert (tree_round_right (S nk) (exist (fun t0 : ShareTree => canonicalTree t0) (Node x1 x2) c0) = tree_round_right (S nk) (exist (fun t => canonicalTree t) (mkCanon (Node x1 x2)) (mkCanon_correct _))).",
                        "VernacExtend",
                        "526e7f07917c602f94e3481dd32a2b3105c1dc28"
                    ]
                },
                {
                    "command": [
                        "simpl; f_equal; apply exist_ext; generalize (mkCanon_identity _ c0);intro H33; simpl in H33; rewrite H33; trivial.",
                        "VernacExtend",
                        "0c2ac849152d7084484a63976cea914ea9156413"
                    ]
                },
                {
                    "command": [
                        "rewrite H6;clear H6.",
                        "VernacExtend",
                        "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_combine _ _ _ _ _ H11 H21);intro.",
                        "VernacExtend",
                        "2d22fdb979f422a76de9bebf1933606724605c62"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H6;clear H6.",
                        "VernacExtend",
                        "99deb028998bf653d4a89cdd1db19e9196b4cbcd"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (mkCanon (Node x x2)) (mkCanon_correct (Node x x2))).",
                        "VernacExtend",
                        "c7c97404fd37d8eb83017a77b45797494244f91b"
                    ]
                },
                {
                    "command": [
                        "split;trivial;subst nk.",
                        "VernacExtend",
                        "b32bcf7de8c09c6e4be3d38090841e77f75d2fca"
                    ]
                },
                {
                    "command": [
                        "clear -H12 H.",
                        "VernacExtend",
                        "bd0428404d6026523e35f613781c3476df0b3275"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x2 <= n) by omega;clear H.",
                        "VernacExtend",
                        "4a49a2bba09808d76f190cd63a0b5a1aaf9f55e1"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (Node x x2) <= S n).",
                        "VernacExtend",
                        "8aab27d2aeabf89928e8f4733095d3ce758b6fa0"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub _ _ _ H12 H0);intro.",
                        "VernacExtend",
                        "e6d7ae1707b429e7f3d806fd43e0acb450196317"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x x2) = mkCanon (Node x x2)) by trivial.",
                        "VernacExtend",
                        "b944b305c6ef015230ea598404d1cc08cf633cba"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height _ _ H1);intro.",
                        "VernacExtend",
                        "e31cc829c1db47ff565100f4e139051e1865cd7f"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_Some",
            "line_nb": 3630,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "symmetry in H1.",
                        "VernacExtend",
                        "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
                    ]
                },
                {
                    "command": [
                        "copy H1.",
                        "VernacExtend",
                        "ab6a2ace31991f8c906c1f88199789977b1583e2"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_decrease in H1.",
                        "VernacExtend",
                        "22b7a94fdc5c6d1b6a2431281dce81bffa1c35ff"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? [? ?]].",
                        "VernacExtend",
                        "787dbc926803499e9a09503c86fee4ac1727e31b"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : tree_height t0 < S n) by omega.",
                        "VernacExtend",
                        "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_identity in H2.",
                        "VernacExtend",
                        "f25bcf24d827411433114258b744892258d0f0e0"
                    ]
                },
                {
                    "command": [
                        "exists t0.",
                        "VernacExtend",
                        "6d50368891babea086e8c2d39fddce76180a7059"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_height_compare",
            "line_nb": 3647,
            "steps": [
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct n.",
                        "VernacExtend",
                        "1582bf847770c098bee882393a48b146dcc37a8c"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "compute in H.",
                        "VernacExtend",
                        "686103f70bd92c1e64ec2f78836e7444971cef09"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := le_lt_dec (tree_height t0) (S n)).",
                        "VernacExtend",
                        "c9258a6e28421f5b26c4d9cf2c1dd43aaacba791"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "inv l.",
                        "VernacExtend",
                        "bc13524cfd3b1d903ce15a10499e722312e03c8d"
                    ]
                },
                {
                    "command": [
                        "symmetry in H1.",
                        "VernacExtend",
                        "f7b1eec3579cf9c7bc576c77a03265fe014ab9a1"
                    ]
                },
                {
                    "command": [
                        "copy H1.",
                        "VernacExtend",
                        "ab6a2ace31991f8c906c1f88199789977b1583e2"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_decrease in H1.",
                        "VernacExtend",
                        "22b7a94fdc5c6d1b6a2431281dce81bffa1c35ff"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [? [? ?]].",
                        "VernacExtend",
                        "787dbc926803499e9a09503c86fee4ac1727e31b"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H1.",
                        "VernacExtend",
                        "72668ea55992bff4c6a64774b37a8290e2ed12ee"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : tree_height t0 < S n) by omega.",
                        "VernacExtend",
                        "f8bdfcc60dcb6d29b2f3d0f47bd0088165e4aa9c"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_identity in H2.",
                        "VernacExtend",
                        "f25bcf24d827411433114258b744892258d0f0e0"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H2.",
                        "VernacExtend",
                        "9dbd07a8bd40939a7d0ef8bbc9948df99e8dead8"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_None in l.",
                        "VernacExtend",
                        "5613c60a24b1ce4a792cb90a72eb959ff1c9c6f8"
                    ]
                },
                {
                    "command": [
                        "unfold roundR,roundableR_tree in *.",
                        "VernacExtend",
                        "f6698e34a98f9e07f2337cc37b21fb81fc9be987"
                    ]
                },
                {
                    "command": [
                        "rewrite H in l.",
                        "VernacExtend",
                        "2fd827005c795fc7de50e461a47e50acb651d334"
                    ]
                },
                {
                    "command": [
                        "inv l.",
                        "VernacExtend",
                        "bc13524cfd3b1d903ce15a10499e722312e03c8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_round_right_zero",
            "line_nb": 3678,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_right.",
                        "VernacExtend",
                        "7048b8a02f110268d457cb9011c1c51ea90c6e74"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull 0 (proj1_sig t0)).",
                        "VernacExtend",
                        "26c9725bfa4dd073d0a1929c6cab0e6b79f31dd5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_Leaf",
            "line_nb": 3684,
            "steps": [
                {
                    "command": [
                        "unfold avg,avgable_tree in *.",
                        "VernacExtend",
                        "b627129ffff7d4e26a5120cb69eafbb114222625"
                    ]
                },
                {
                    "command": [
                        "induction n ;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn b c).",
                        "VernacExtend",
                        "70e37eb8b7102cd8268a14b3d55de21994cf1baa"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "139412c3c235384eee87742c728752d11d38f05a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s).",
                        "VernacExtend",
                        "33dd8891a1053ab35c628fcfe6fb64419316756b"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "inv IHn.",
                        "VernacExtend",
                        "1bc818ce5aa84ea48cccd1a86181bc19d9db8bcc"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_identity",
            "line_nb": 3701,
            "steps": [
                {
                    "command": [
                        "unfold avg,avgable_tree in *.",
                        "VernacExtend",
                        "b627129ffff7d4e26a5120cb69eafbb114222625"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros; destruct t0; unfold tree_height in *.",
                        "VernacExtend",
                        "0f6b6a97594a3252bc43df8ff8b85e8a55a1f79e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_Leaf.",
                        "VernacExtend",
                        "a248e0c207190f4f10c7fc87290a3a9ccb16c9dd"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 < n /\\ tree_heightP x2 < n).",
                        "VernacExtend",
                        "412ef4f80a659f1d154e45a2e6c39ae25a1a791a"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP x1) (tree_heightP x2) < n) by omega.",
                        "VernacExtend",
                        "ebfef53ddc9a58c495fc768968996c5e5a008669"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP x1) (tree_heightP x2));intro.",
                        "VernacExtend",
                        "59d3878fd2062adf1e820ae6f354efe6473532fc"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP x1) (tree_heightP x2));intro.",
                        "VernacExtend",
                        "f6a59f494a0cbe081b5521cc95f76e4e3e91884b"
                    ]
                },
                {
                    "command": [
                        "split;omega.",
                        "VernacExtend",
                        "df637d3a8961211fcf05d779d2cb4ddd6ba80684"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? ?].",
                        "VernacExtend",
                        "0f697508c155a692f324e9ae2fc37c0385689df4"
                    ]
                },
                {
                    "command": [
                        "copy c.",
                        "VernacExtend",
                        "b1ab59689c3789bff0fc02983fcb52c799c8e3aa"
                    ]
                },
                {
                    "command": [
                        "simpl in c0.",
                        "VernacExtend",
                        "72ef962efe870f10b593d4b396bcff6020716681"
                    ]
                },
                {
                    "command": [
                        "destruct c0 as [? [? [? ?]]].",
                        "VernacExtend",
                        "f5a4c8267f800fd26ac898e46507f0511b361079"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x1 c0) H0);intro.",
                        "VernacExtend",
                        "5c9f146c9883048cd60513a971a97b5460831193"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn (exist (fun t => canonicalTree t) x2 c1) H1);intro.",
                        "VernacExtend",
                        "6aa3d80b870c6459acde7af1859464ecaaa96e8d"
                    ]
                },
                {
                    "command": [
                        "clear - H2 H3.",
                        "VernacExtend",
                        "4e8f4ded31fadc8965664652d1eb78a93c7ac505"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl in H2,H3;simpl.",
                        "VernacExtend",
                        "97ce50ca7c2c4255cc7ac8bdde93740d553f7235"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n x1); icase (mkFull n x2).",
                        "VernacExtend",
                        "12d0dd0b2de38c48d14e2a3af7e451b11fc7aa3a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s); icase (tree_avgP s0 s0).",
                        "VernacExtend",
                        "0707e6f6f8dff86c8cb5f06236101cad0c38bf19"
                    ]
                },
                {
                    "command": [
                        "inv H2;inv H3.",
                        "VernacExtend",
                        "b0459147af7aebdc3ce0896fd581e1f236254fcd"
                    ]
                },
                {
                    "command": [
                        "apply f_equal.",
                        "VernacExtend",
                        "ba856cbef3c8e84dcef77c91c8515b497874875b"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon s1); icase (mkCanon s2).",
                        "VernacExtend",
                        "93e9c4b2c0fd7b522c60f9e3ff3b3785f60efef1"
                    ]
                },
                {
                    "command": [
                        "icase b; icase b0;simpl in *.",
                        "VernacExtend",
                        "c54d895896203fc5123ebd53170aa2bacfbfb426"
                    ]
                },
                {
                    "command": [
                        "elimtype False; firstorder.",
                        "VernacExtend",
                        "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
                    ]
                },
                {
                    "command": [
                        "elimtype False; firstorder.",
                        "VernacExtend",
                        "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_None",
            "line_nb": 3735,
            "steps": [
                {
                    "command": [
                        "unfold avg,avgable_tree in *.",
                        "VernacExtend",
                        "b627129ffff7d4e26a5120cb69eafbb114222625"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "assert (n < tree_height t1 \\/n < tree_height t2).",
                        "VernacExtend",
                        "d235c009a31e1d215e2c19187cb037758a549d76"
                    ]
                },
                {
                    "command": [
                        "assert (n < max (tree_height t1) (tree_height t2)) by omega.",
                        "VernacExtend",
                        "1f82ee44a8c34b4cd1f20ac7ce327685837a5986"
                    ]
                },
                {
                    "command": [
                        "apply Nat.max_lt_iff.",
                        "VernacExtend",
                        "e00c44c3360b976f806d65f0539ab4cd37d5bfe4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct t1;destruct t2; simpl;destruct H0; unfold tree_height in *; simpl in *.",
                        "VernacExtend",
                        "a800f211474e5332b1e3ab40022fd3da9143c1d5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_None _ _ H0);intro.",
                        "VernacExtend",
                        "85d19c29e509b419b0e6f6e60fefdd9dba95a765"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkFull_None _ _ H0);intro.",
                        "VernacExtend",
                        "85d19c29e509b419b0e6f6e60fefdd9dba95a765"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n x).",
                        "VernacExtend",
                        "4c141d1e809b8b9579644cf3cf3e28cc2715ed7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_split",
            "line_nb": 3752,
            "steps": [
                {
                    "command": [
                        "unfold avg,avgable_tree in *.",
                        "VernacExtend",
                        "b627129ffff7d4e26a5120cb69eafbb114222625"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)); simpl in Heqs,Heqs0; rewrite<- Heqs in H; rewrite<-Heqs0 in H; icase s;icase s0.",
                        "VernacExtend",
                        "c9ee4c071d7e487b3beebc1f25f88ee80413ae98"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1.",
                        "VernacExtend",
                        "c142edc958ef63379dbb31f4995bbecab8ae7dd4"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "5623a56ef660641db9c08b1c976cdc082e775789"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12]; destruct H2 as [H21 H22]; rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "f471a111b6457cd93714bf5cf27282c713d712ec"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)); icase (mkFull n (Leaf b0)).",
                        "VernacExtend",
                        "376fdcc9dc30beab9c1a61651d28e275d6f2b87c"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s0).",
                        "VernacExtend",
                        "bc3f6bb12ceb5cdb5d71632cafa32500ee7da58f"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs0; generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H1; generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "34548d62d577b50f5f94005094b71fde4bfeaa69"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "979bd7453c83386d4d2449de40c920f8b75e730f"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)); icase (mkFull n s0_1); icase (mkFull n s0_2).",
                        "VernacExtend",
                        "7ec1269cedd4b6b21bccb96d85d3f7f1e8b8f064"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s0); icase (tree_avgP s s1).",
                        "VernacExtend",
                        "53fa47332ddcea3c527d8e9dd488c2a4923893b1"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs; generalize (mkCanon_split _ _ _ _ Heqs);intro H1; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "b61d4d249d819e257671e8d5b0a841f85eba358c"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "979bd7453c83386d4d2449de40c920f8b75e730f"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "b2172c37ef977b7ea32c7861624ccdaf215caed5"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s3); icase (tree_avgP s0 s3).",
                        "VernacExtend",
                        "23c7289a65e03e8e38db66e646639af6b57de84f"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs,Heqs0; generalize (mkCanon_split _ _ _ _ Heqs);intro H1; generalize (mkCanon_split _ _ _ _ Heqs0);intro H2.",
                        "VernacExtend",
                        "de8ba9d2db71fec692784793945909f48a9576e0"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H11 H12]; destruct H2 as [H21 H22].",
                        "VernacExtend",
                        "979bd7453c83386d4d2449de40c920f8b75e730f"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n s0_1); icase (mkFull n s0_2).",
                        "VernacExtend",
                        "18268c1e972cdf517f471bde2decfdbafa2d3ac1"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s3); icase (tree_avgP s0 s4).",
                        "VernacExtend",
                        "e569d5fa753898566b15e403e8221ea3e3705ee1"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H1);intro H3.",
                        "VernacExtend",
                        "26c964337332bf7ed2dfa20efd6cb34cde6da43b"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H31 H32].",
                        "VernacExtend",
                        "b19fe2f9a37c81a01039417b377bdf68fc674dec"
                    ]
                },
                {
                    "command": [
                        "split;f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "cca94aa2ffc05713ba47869af490d366820795d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_combine",
            "line_nb": 3798,
            "steps": [
                {
                    "command": [
                        "unfold avg,avgable_tree in *.",
                        "VernacExtend",
                        "b627129ffff7d4e26a5120cb69eafbb114222625"
                    ]
                },
                {
                    "command": [
                        "intros ? ? ? ? ? ? ? H1 H2.",
                        "VernacExtend",
                        "c99940cf9f29e9c9face4ff67e894adf76d2bc21"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "remember (mkCanon (Node t11 t12)); remember (mkCanon (Node t21 t22)); simpl in Heqs,Heqs0; rewrite<- Heqs; rewrite<- Heqs0; icase s;icase s0.",
                        "VernacExtend",
                        "a949326bc4cf26fc907a807ca498b82f02643721"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H11; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H21.",
                        "VernacExtend",
                        "0a9ec392216387f233dde3eb25af2613b9f00a8f"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)); icase (mkFull n (Leaf b0)).",
                        "VernacExtend",
                        "376fdcc9dc30beab9c1a61651d28e275d6f2b87c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s0).",
                        "VernacExtend",
                        "bc3f6bb12ceb5cdb5d71632cafa32500ee7da58f"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H0;rewrite<-H1;trivial.",
                        "VernacExtend",
                        "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs0; generalize (mkCanon_Leaf_split _ _ _ Heqs);intro H11; generalize (mkCanon_split _ _ _ _ Heqs0);intro H21.",
                        "VernacExtend",
                        "45e6683e52814a842da1297cb766ed313f05e867"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n (Leaf b)); icase (mkFull n s0_1); icase (mkFull n s0_2).",
                        "VernacExtend",
                        "7ec1269cedd4b6b21bccb96d85d3f7f1e8b8f064"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s0); icase (tree_avgP s s1).",
                        "VernacExtend",
                        "53fa47332ddcea3c527d8e9dd488c2a4923893b1"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H0;rewrite<-H1;trivial.",
                        "VernacExtend",
                        "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs; generalize (mkCanon_split _ _ _ _ Heqs);intro H11; generalize (mkCanon_Leaf_split _ _ _ Heqs0);intro H21.",
                        "VernacExtend",
                        "d52d86b8c0aa1811445ee23c5c21d892776cbaa0"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n (Leaf b)).",
                        "VernacExtend",
                        "b2172c37ef977b7ea32c7861624ccdaf215caed5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s3); icase (tree_avgP s0 s3).",
                        "VernacExtend",
                        "23c7289a65e03e8e38db66e646639af6b57de84f"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0;rewrite<- H1;trivial.",
                        "VernacExtend",
                        "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqs,Heqs0; generalize (mkCanon_split _ _ _ _ Heqs);intro H11; generalize (mkCanon_split _ _ _ _ Heqs0);intro H21.",
                        "VernacExtend",
                        "db67009f916497fab53589b46e56467596a428bd"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 H12]; destruct H21 as [H21 H22].",
                        "VernacExtend",
                        "0697fdd1dc4a17ed26a8f02d29a863c974bb52bd"
                    ]
                },
                {
                    "command": [
                        "rewrite H11,H12,H21,H22 in *.",
                        "VernacExtend",
                        "d3288713d9673c705079d02ed4a3726fbd1ce442"
                    ]
                },
                {
                    "command": [
                        "icase (mkFull n s1); icase (mkFull n s2); icase (mkFull n s0_1); icase (mkFull n s0_2).",
                        "VernacExtend",
                        "18268c1e972cdf517f471bde2decfdbafa2d3ac1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (tree_avgP s s3); icase (tree_avgP s0 s4).",
                        "VernacExtend",
                        "e569d5fa753898566b15e403e8221ea3e3705ee1"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext.",
                        "VernacExtend",
                        "1a39b166afbd1e7c230e4db2f2249cec8156e8c1"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0;rewrite<- H1;trivial.",
                        "VernacExtend",
                        "4e5d1f48f8718cba6a5b6e474462515ca4540d9c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_round2avg",
            "line_nb": 3842,
            "steps": [
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "induction n;intros ? ? ? H1 H2.",
                        "VernacExtend",
                        "b4ee214cafa7501bfbb6aa3d62232cbcf6191297"
                    ]
                },
                {
                    "command": [
                        "destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
                    ]
                },
                {
                    "command": [
                        "icase x3.",
                        "VernacExtend",
                        "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "195068c20e4ffcf8d76286499ee2886c68b06bfa"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "icase x3.",
                        "VernacExtend",
                        "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply f_equal;apply exist_ext.",
                        "VernacExtend",
                        "473463cbeb33b5e37ec27a65adf9f8a1ea57eb23"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "icase x3_1;icase x3_2.",
                        "VernacExtend",
                        "daaf859edbffd749ae655ea23afae6d709346c12"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2.",
                        "VernacExtend",
                        "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2.",
                        "VernacExtend",
                        "475fe94295b345ec587611d2f4b7c6525a02d1ea"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply f_equal;apply exist_ext.",
                        "VernacExtend",
                        "473463cbeb33b5e37ec27a65adf9f8a1ea57eb23"
                    ]
                },
                {
                    "command": [
                        "icase b1;icase b2;compute in c3.",
                        "VernacExtend",
                        "c3f2e7efc732f10cc47975ebfdd484cbc7298344"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "destruct c3 as [c3 ?].",
                        "VernacExtend",
                        "75029210cf3603847db185e536c56a2b4ee7d286"
                    ]
                },
                {
                    "command": [
                        "destruct c3; inv H0.",
                        "VernacExtend",
                        "01a624a9142829b4c11b9617cb8334b0a3ed3134"
                    ]
                },
                {
                    "command": [
                        "destruct c3 as [? [c3 ?]].",
                        "VernacExtend",
                        "c5224d3eeec154fbee5f32a46653befe6d94b6bd"
                    ]
                },
                {
                    "command": [
                        "destruct c3; inv H1.",
                        "VernacExtend",
                        "c6c61bd578df03d44b0435cde48dc14e7b9b9f52"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c3);intro H31.",
                        "VernacExtend",
                        "606c698af9fca68e02e0afd19ac42b0c582606ad"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x3);intro H32.",
                        "VernacExtend",
                        "64413d8ea13463bc01ca6e38d0e9978aa7ea5fdf"
                    ]
                },
                {
                    "command": [
                        "destruct H32 as [x31 [x32 H32]].",
                        "VernacExtend",
                        "adff58517ab6b3d275e261c74d2f834b5dcfa5d8"
                    ]
                },
                {
                    "command": [
                        "rewrite H32 in H31.",
                        "VernacExtend",
                        "afbe5b9bb1512142f88157612815f3891029f948"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c3 H31);intro H33.",
                        "VernacExtend",
                        "05f2f0a435ed842adf32188769a3b74988145090"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c1);intro H11.",
                        "VernacExtend",
                        "b68dfe726af18b90b87284586c6d51807b36334d"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x1);intro H12.",
                        "VernacExtend",
                        "d1fcda947c72d8650cd5fd1f639618d0ee38ee8d"
                    ]
                },
                {
                    "command": [
                        "destruct H12 as [x11 [x12 H12]].",
                        "VernacExtend",
                        "01d357698ab3be36775553b38eaa0d4614351eb3"
                    ]
                },
                {
                    "command": [
                        "rewrite H12 in H11.",
                        "VernacExtend",
                        "4bef6c6c4fd0a010878915d10fc3950ae8905d1e"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c1 H11);intro H13.",
                        "VernacExtend",
                        "dcb38f25e89e76685eef1131a79194043fb069ee"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c2);intro H21.",
                        "VernacExtend",
                        "bff7c1cab24590ec88a3e68161f69341a7329849"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x2);intro H22.",
                        "VernacExtend",
                        "e36fccf8aa62eea74245df963ac0c133e3a8a7ee"
                    ]
                },
                {
                    "command": [
                        "destruct H22 as [x21 [x22 H22]].",
                        "VernacExtend",
                        "9a3286c3191fc3e5af51c55335a4b62adb1ca5f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H22 in H21.",
                        "VernacExtend",
                        "e4e7181268db44e124005d5b112f2c32c5264c02"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c2 H21);intro H23.",
                        "VernacExtend",
                        "f037072d5cba9922bb4d20fcfde1651f247c7634"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H33 in H1,H2.",
                        "VernacExtend",
                        "6e97d9af209b0396cf3f8b762475867d40776aba"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H13 in H1.",
                        "VernacExtend",
                        "64509c701ca8f856ebf39fb23d847991ce219bba"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H23 in H2.",
                        "VernacExtend",
                        "2e243a8332f6ac8374ed9e88e9d0105114ac1e82"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_left_split _ _ _ _ _ H1);intro H14.",
                        "VernacExtend",
                        "a3efca16b458a1ff6e33db58864eea659eb5ada7"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_round_right_split _ _ _ _ _ H2);intro H24.",
                        "VernacExtend",
                        "91c21c1bde71668e63c093c345fef17fd18363b7"
                    ]
                },
                {
                    "command": [
                        "destruct H14 as [H14 H15]; destruct H24 as [H24 H25].",
                        "VernacExtend",
                        "12b121894bbb42aeecd1bcc3b5c166ea15ae9fc2"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ H14 H24);intro H34.",
                        "VernacExtend",
                        "b47a143b9ac7cee7e6ada71866b837f4391d8bdc"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ H15 H25);intro H35.",
                        "VernacExtend",
                        "4ba3b5cc930f364344281c68ada239d05bfd8962"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_combine _ _ _ _ _ _ _ H34 H35);intro H36.",
                        "VernacExtend",
                        "6cc989c70a96a972ef88dc19536bd1c894d07772"
                    ]
                },
                {
                    "command": [
                        "rewrite H13 in H36.",
                        "VernacExtend",
                        "c4fcf3f7f09aa4ef002a8579a7dd9084a0f1617d"
                    ]
                },
                {
                    "command": [
                        "rewrite H23 in H36.",
                        "VernacExtend",
                        "59d62063690163db02e86e7c5575265b26cabf7e"
                    ]
                },
                {
                    "command": [
                        "rewrite H33 in H36.",
                        "VernacExtend",
                        "a8a4c063e338a91e8cc9689f5780368a6a6df85f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_avg2round",
            "line_nb": 3894,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "195068c20e4ffcf8d76286499ee2886c68b06bfa"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "icase x1; icase x2; icase x3.",
                        "VernacExtend",
                        "e7f506ee38d3e0e5e6e17b73d02de1e3940c65a2"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0).",
                        "VernacExtend",
                        "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left; unfold tree_round_right; simpl.",
                        "VernacExtend",
                        "8055317468065f773f3fb4e3be9d9b7905f0a7a9"
                    ]
                },
                {
                    "command": [
                        "try subst.",
                        "VernacExtend",
                        "e5e31f092f515cdb7cde379b327cd358da0036ac"
                    ]
                },
                {
                    "command": [
                        "split;apply f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "7c5464ffae546e3dd21622e7d85a9bf8dbd277dc"
                    ]
                },
                {
                    "command": [
                        "unfold tree_avg in H.",
                        "VernacExtend",
                        "74e05ef636f45788f81c5b9df7702ccbdce6d706"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0).",
                        "VernacExtend",
                        "12ed9cb6843dd3450d3b827d24e7a9e4562cc80e"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "unfold tree_round_left; unfold tree_round_right; simpl.",
                        "VernacExtend",
                        "8055317468065f773f3fb4e3be9d9b7905f0a7a9"
                    ]
                },
                {
                    "command": [
                        "split;apply f_equal;apply exist_ext;trivial.",
                        "VernacExtend",
                        "7c5464ffae546e3dd21622e7d85a9bf8dbd277dc"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c1);intro H11; generalize (mkCanon_identity _ c2);intro H21.",
                        "VernacExtend",
                        "b8806e5b4f7e0058593239bcc550ffe373de69bb"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c3);intro H31.",
                        "VernacExtend",
                        "606c698af9fca68e02e0afd19ac42b0c582606ad"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x1);intro H12.",
                        "VernacExtend",
                        "d1fcda947c72d8650cd5fd1f639618d0ee38ee8d"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x2);intro H22.",
                        "VernacExtend",
                        "e36fccf8aa62eea74245df963ac0c133e3a8a7ee"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x3);intro H32.",
                        "VernacExtend",
                        "64413d8ea13463bc01ca6e38d0e9978aa7ea5fdf"
                    ]
                },
                {
                    "command": [
                        "destruct H12 as [x11 [x12 H12]].",
                        "VernacExtend",
                        "01d357698ab3be36775553b38eaa0d4614351eb3"
                    ]
                },
                {
                    "command": [
                        "destruct H22 as [x21 [x22 H22]].",
                        "VernacExtend",
                        "9a3286c3191fc3e5af51c55335a4b62adb1ca5f2"
                    ]
                },
                {
                    "command": [
                        "destruct H32 as [x31 [x32 H32]].",
                        "VernacExtend",
                        "adff58517ab6b3d275e261c74d2f834b5dcfa5d8"
                    ]
                },
                {
                    "command": [
                        "rewrite H12 in H11.",
                        "VernacExtend",
                        "4bef6c6c4fd0a010878915d10fc3950ae8905d1e"
                    ]
                },
                {
                    "command": [
                        "rewrite H22 in H21.",
                        "VernacExtend",
                        "e4e7181268db44e124005d5b112f2c32c5264c02"
                    ]
                },
                {
                    "command": [
                        "rewrite H32 in H31.",
                        "VernacExtend",
                        "afbe5b9bb1512142f88157612815f3891029f948"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c1 H11);intro H13.",
                        "VernacExtend",
                        "dcb38f25e89e76685eef1131a79194043fb069ee"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c2 H21);intro H23.",
                        "VernacExtend",
                        "f037072d5cba9922bb4d20fcfde1651f247c7634"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c3 H31);intro H33.",
                        "VernacExtend",
                        "05f2f0a435ed842adf32188769a3b74988145090"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H13 in *.",
                        "VernacExtend",
                        "7d485d361ffd3e5b3b42de9f2918f5dcb6d7ae1c"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H23 in *.",
                        "VernacExtend",
                        "f7bdd75994b8b971532eb0be483ffae4aa516bae"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H33 in *.",
                        "VernacExtend",
                        "87d260a6d1d4378dfddd90d7d47030f1e3e9f9d9"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_split _ _ _ _ _ _ _ H);intro H34.",
                        "VernacExtend",
                        "768da67f141f4dc82bc9742ad01993c886e9d40a"
                    ]
                },
                {
                    "command": [
                        "destruct H34 as [H34 H35].",
                        "VernacExtend",
                        "5713e417e9d800ed085ed6c102854c19a74d6323"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ H34);intro H36.",
                        "VernacExtend",
                        "bb0e015a643150078b3f5de3b4c09eb819dc5256"
                    ]
                },
                {
                    "command": [
                        "destruct H36 as [H36 H37].",
                        "VernacExtend",
                        "9e427eb752084baa39e604635cd7488e89244a1e"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ H35);intro H38.",
                        "VernacExtend",
                        "64bf975aa0184175c86deb7816e3a77c3aeeda2f"
                    ]
                },
                {
                    "command": [
                        "destruct H38 as [H38 H39].",
                        "VernacExtend",
                        "29d722306409b5ceb4220a1f2ef53591eb03470e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_combine;trivial.",
                        "VernacExtend",
                        "c956d01ee2e8d4d2a38a7d03db4daf0d373cc4de"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_combine;trivial.",
                        "VernacExtend",
                        "73435348908ed79ff71e12f9967dff048e5e1d59"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_join",
            "line_nb": 3941,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction n; intros ? ? ? ? ? ? ? ? ? H1 H2 H3 H4 H5.",
                        "VernacExtend",
                        "0669c72337e4bf504dadea7db51ff3f1c3721934"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "destruct t11 as [x11 c11]; destruct t12 as [x12 c12]; destruct t13 as [x13 c13]; destruct t21 as [x21 c21]; destruct t22 as [x22 c22]; destruct t23 as [x23 c23]; destruct t31 as [x31 c31]; destruct t32 as [x32 c32]; destruct t33 as [x33 c33].",
                        "VernacExtend",
                        "aa288b8cb933c6e477cc03a5e97366e276ce06da"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "icase x11;icase x12; icase x21;icase x22; icase x31;icase x32.",
                        "VernacExtend",
                        "0a34dc496549c127fdbc7a16733c9575fe6a4992"
                    ]
                },
                {
                    "command": [
                        "unfold tree_avg in *;simpl in *.",
                        "VernacExtend",
                        "974888171616a89f1ea4a363e5e072ff558932d9"
                    ]
                },
                {
                    "command": [
                        "inv H1;inv H2;inv H3.",
                        "VernacExtend",
                        "5846b5951d70091dd509db348db0a4b7264e2a24"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [H41 H42]; destruct H5 as [H51 H52].",
                        "VernacExtend",
                        "95bdf36800ee3bc5bdaea40f50b100d353a4e865"
                    ]
                },
                {
                    "command": [
                        "split; unfold BAF.glb, BAF.lub in *;simpl in *; inv H41;inv H42;inv H51;inv H52; apply exist_ext.",
                        "VernacExtend",
                        "149d135b420b1df26dbfc974c91d116c2b5d9b1c"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;icase b1;icase b2.",
                        "VernacExtend",
                        "c358f2f0abd5b5e9ca206d9f7f14488cd004c299"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;icase b1;icase b2;icase b3;icase b4.",
                        "VernacExtend",
                        "213e3d25c7054aad5e763a05ec78992b9ddb0b0b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c11);intro H11.",
                        "VernacExtend",
                        "196fef3893405d40d12f95f03be7c1d91e947126"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c12);intro H12.",
                        "VernacExtend",
                        "0b46a19ce658318d223dc2d78efc666c822a6263"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c13);intro H13.",
                        "VernacExtend",
                        "c9d83a4c268aec4b9898b893da13b3b31bedfe74"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c21);intro H21.",
                        "VernacExtend",
                        "eaebbb2a428c39aeb85d60cc5058f026cf36714b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c22);intro H22.",
                        "VernacExtend",
                        "6a8f53936266d7b2274fab31409ab422aa16d4f9"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c23);intro H23.",
                        "VernacExtend",
                        "07c659618b947b56f9f0c40680a0a51aa328b6a5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c31);intro H31.",
                        "VernacExtend",
                        "011b34c939cb4c40744c2519d2ec64535c6b0955"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c32);intro H32.",
                        "VernacExtend",
                        "d2bd28881374254ef0b363798db61841e8261504"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c33);intro H33.",
                        "VernacExtend",
                        "03a8f586d363386737f9db38cded92fcfc78ba2b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x11);intro H14; destruct H14 as [x111 [x112 H14]].",
                        "VernacExtend",
                        "089791b455d9a448cede55b7935e1a75af42296b"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x12);intro H15; destruct H15 as [x121 [x122 H15]].",
                        "VernacExtend",
                        "6439398d4f11e66673e406e1b19d3c601ef2997c"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x13);intro H16; destruct H16 as [x131 [x132 H16]].",
                        "VernacExtend",
                        "3c9d7335f78a6722f4850615e9aab978517ec3d1"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x21);intro H24; destruct H24 as [x211 [x212 H24]].",
                        "VernacExtend",
                        "dc526a3a22bc2808d494e77307a3187ad44b37b5"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x22);intro H25; destruct H25 as [x221 [x222 H25]].",
                        "VernacExtend",
                        "524eccf67aa3abdc4ab47e2aec51c226d8670d6f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x23);intro H26; destruct H26 as [x231 [x232 H26]].",
                        "VernacExtend",
                        "5d40c8d640419cd2886952b54485b8fa1492654d"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x31);intro H34; destruct H34 as [x311 [x312 H34]].",
                        "VernacExtend",
                        "c630ac053829d3fd8eb173b301d567366fccdd70"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x32);intro H35; destruct H35 as [x321 [x322 H35]].",
                        "VernacExtend",
                        "8b360197588636076a67af4391bf332aa28514de"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_rewrite x33);intro H36; destruct H36 as [x331 [x332 H36]].",
                        "VernacExtend",
                        "000b3313fa137d0c17f49f0cf689164d7c826d5e"
                    ]
                },
                {
                    "command": [
                        "rewrite H14 in H11.",
                        "VernacExtend",
                        "79cb30fa9e15ce00cbe0d635f54c3152f74e42dc"
                    ]
                },
                {
                    "command": [
                        "rewrite H15 in H12.",
                        "VernacExtend",
                        "36423dc65af3d4dab6883ee40beeddb8e6f18a4d"
                    ]
                },
                {
                    "command": [
                        "rewrite H16 in H13.",
                        "VernacExtend",
                        "eebf458ab702b54802f4f9f72c6e97f80cfe307c"
                    ]
                },
                {
                    "command": [
                        "rewrite H24 in H21.",
                        "VernacExtend",
                        "ea5c8901708848c6f1fb597f348c0cb4893cd5b0"
                    ]
                },
                {
                    "command": [
                        "rewrite H25 in H22.",
                        "VernacExtend",
                        "26c582ce2a8e78ec14251998b961e85e71e137af"
                    ]
                },
                {
                    "command": [
                        "rewrite H26 in H23.",
                        "VernacExtend",
                        "11352d604b6e6646389daf9332c4250b2b3dbf08"
                    ]
                },
                {
                    "command": [
                        "rewrite H34 in H31.",
                        "VernacExtend",
                        "a32ebfcc34bf2db03c3d45a087403a9cc36ea678"
                    ]
                },
                {
                    "command": [
                        "rewrite H35 in H32.",
                        "VernacExtend",
                        "a9750ffdffa0bfcbfd5f50fa3210daf130d9b5a3"
                    ]
                },
                {
                    "command": [
                        "rewrite H36 in H33.",
                        "VernacExtend",
                        "6811f84bbb6847a5569002c1198e8702f2e432b4"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c11 H11);intro H111.",
                        "VernacExtend",
                        "84172cf0228bd6fc0454c289fc395b510dee310b"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c12 H12);intro H121.",
                        "VernacExtend",
                        "1b77105a7bd3f52b89e523d04af2422447524158"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c13 H13);intro H131.",
                        "VernacExtend",
                        "405c3590f09ffc1911b00576cd0061a60d9c88e3"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c21 H21);intro H211.",
                        "VernacExtend",
                        "d748d4aed438f406b1229f3bcdd6c57c6cb52351"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c22 H22);intro H221.",
                        "VernacExtend",
                        "45f856d91f48f863cdc4a37f371368bb5279d47c"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c23 H23);intro H231.",
                        "VernacExtend",
                        "1de6ed0748cf51319df2a9acd7c9081a158b5398"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c31 H31);intro H311.",
                        "VernacExtend",
                        "b350e8d0c6296eed595fcb553592d135b66cf451"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c32 H32);intro H321.",
                        "VernacExtend",
                        "315b8dd1497789eff4fed02b60d12ab6141618f6"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_proof_irr _ _ (mkCanon_correct _) c33 H33);intro H331.",
                        "VernacExtend",
                        "59fee03d7a019c56c800664aca98bb2ae4a06030"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H111 in *.",
                        "VernacExtend",
                        "ab35bff15c0420de0ce2ab1491902cfe7328d2da"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H121 in *.",
                        "VernacExtend",
                        "e3aa3f448592ccde06438f092f8181ed22b87270"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H131 in *.",
                        "VernacExtend",
                        "680b1058f024bcea1ef302da7ffb7ec701a7d56c"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H211 in *.",
                        "VernacExtend",
                        "9afec5bdb2013833595b45d78c24492d07b14855"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H221 in *.",
                        "VernacExtend",
                        "a356a636c89bcefcaffba81f7fd0fefef70d3962"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H231 in *.",
                        "VernacExtend",
                        "eee5ddeb4eda64ad7ec2d31538c84c5e47e5b1ed"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H311 in *.",
                        "VernacExtend",
                        "44e80c63fb04d891c2d753bdf89385708b55f431"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H321 in *.",
                        "VernacExtend",
                        "f2ca4a323e8a61e11f78dc75735961bf8502c84f"
                    ]
                },
                {
                    "command": [
                        "rewrite<-H331 in *.",
                        "VernacExtend",
                        "878cf3a667352fb6f66fd8c3f3e16f0658cc0cae"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_split _ _ _ _ _ _ _ H1);intro H6.",
                        "VernacExtend",
                        "ad4a6a1f2c569122d816342dcf1bd8f57b790d9c"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_split _ _ _ _ _ _ _ H2);intro H7.",
                        "VernacExtend",
                        "36b7c88a2a010fd2a37f63399331c32456351894"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_split _ _ _ _ _ _ _ H3);intro H8.",
                        "VernacExtend",
                        "a0de6f06697d14e3a430b4fe8c893ced81291ccf"
                    ]
                },
                {
                    "command": [
                        "destruct H6 as [H61 H62].",
                        "VernacExtend",
                        "517d059d58e4da431a5439670e1153646b56db4b"
                    ]
                },
                {
                    "command": [
                        "destruct H7 as [H71 H72].",
                        "VernacExtend",
                        "a2e6421acb64b052b60bde87c34fa9027c3f5f3f"
                    ]
                },
                {
                    "command": [
                        "destruct H8 as [H81 H82].",
                        "VernacExtend",
                        "c807bd90c9888128060cc1d39ae3937bb6ab3184"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_join_split _ _ _ _ _ _ H4);intro H9.",
                        "VernacExtend",
                        "7e68ddbb12c742a7c0d412d7bcbc3e38312d2b7a"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_join_split _ _ _ _ _ _ H5);intro H10.",
                        "VernacExtend",
                        "6214796c5c315ab04091b4f1d52969d6341bf6d0"
                    ]
                },
                {
                    "command": [
                        "destruct H9 as [H91 H92].",
                        "VernacExtend",
                        "e648716d3030bd4c0eddc534781ca26d3131a6bb"
                    ]
                },
                {
                    "command": [
                        "destruct H10 as [H101 H102].",
                        "VernacExtend",
                        "af1239e49d099269cb2f147880b268f765b798a5"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ _ _ _ H61 H71 H81 H91 H101);intro Hr1.",
                        "VernacExtend",
                        "be0cd30e01cac81fa742c7356900e1bab93842ed"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ _ _ _ _ _ _ _ H62 H72 H82 H92 H102);intro Hr2.",
                        "VernacExtend",
                        "5770dd35478dafc975d48a81e0e58c11ae858f19"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_join_combine;trivial.",
                        "VernacExtend",
                        "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_increase",
            "line_nb": 4013,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H0.",
                        "VernacExtend",
                        "0151399de7231e3831e74607bfc3ee4ddd03dca7"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
                        "VernacExtend",
                        "5e10407307800b7bfc94c3096675d80ad69d1e56"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP x1) (tree_heightP x2) = 0) by omega.",
                        "VernacExtend",
                        "1555eb18d12f70aa19b3f0c21e934e3cd0825ad6"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP x1) (tree_heightP x2));intro H2.",
                        "VernacExtend",
                        "debe00727bf1b501ef7b5060a6362d653c1de7a6"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP x1) (tree_heightP x2));intro H3.",
                        "VernacExtend",
                        "df3b99ad09fee6815a6647bcf9d4007523ad805f"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x1 = 0) by omega.",
                        "VernacExtend",
                        "6a1d3199a9b1431aaca9671b05dfec9e4ae66301"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP x2 = 0) by omega.",
                        "VernacExtend",
                        "b15ce3df293474941ec94387eb02dd0aebe554af"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2.",
                        "VernacExtend",
                        "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (b<> b0).",
                        "VernacExtend",
                        "34eb206c823c21159af20295639f79480ed5cab6"
                    ]
                },
                {
                    "command": [
                        "intro;apply H.",
                        "VernacExtend",
                        "2155aadd67abfad07bb52771af5eefbf7e2e6097"
                    ]
                },
                {
                    "command": [
                        "rewrite H6;apply exist_ext;trivial.",
                        "VernacExtend",
                        "202f2a8845025616d73b82d0ee646a9761932240"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;simpl.",
                        "VernacExtend",
                        "c689c5f12d1a31c924449f49695c7741480b65fc"
                    ]
                },
                {
                    "command": [
                        "try (elimtype False; tauto).",
                        "VernacExtend",
                        "b28fd6c3df32de104d6867f168f4aa96ae9f59bd"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf true) (Leaf false)) (mkCanon_correct (Node (Leaf true) (Leaf false)))).",
                        "VernacExtend",
                        "7b837c5311a493bb8d440e9a0fa06daf9be13415"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t0 : ShareTree => canonicalTree t0) (Node (Leaf false) (Leaf true)) (mkCanon_correct (Node (Leaf false) (Leaf true)))).",
                        "VernacExtend",
                        "791c8635154628dec0dda674a249236fa887b139"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "try (elimtype False; tauto).",
                        "VernacExtend",
                        "b28fd6c3df32de104d6867f168f4aa96ae9f59bd"
                    ]
                },
                {
                    "command": [
                        "inv H5;inv H4;elimtype False;omega.",
                        "VernacExtend",
                        "d4dd784668bd28305366671469ba8a31bc81562d"
                    ]
                },
                {
                    "command": [
                        "inv H5;inv H4;elimtype False;omega.",
                        "VernacExtend",
                        "d4dd784668bd28305366671469ba8a31bc81562d"
                    ]
                },
                {
                    "command": [
                        "inv H5;inv H4;elimtype False;omega.",
                        "VernacExtend",
                        "d4dd784668bd28305366671469ba8a31bc81562d"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite1 t1);intro H3.",
                        "VernacExtend",
                        "1ae57efeec672c4ac4d634e179df47bf6742402f"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite1 t2);intro H4.",
                        "VernacExtend",
                        "548951661a1a648641a7e1306b6d6ee6f32f41d6"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [t11 [t12 H3]].",
                        "VernacExtend",
                        "5f141973f5444f4eb9fe2101d5c7a3d18db0e368"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as [t21 [t22 H4]].",
                        "VernacExtend",
                        "bcb775412bf35841eac6bd1c3b666f0e31105237"
                    ]
                },
                {
                    "command": [
                        "rewrite H3,H4 in *.",
                        "VernacExtend",
                        "396115a6b9c62f7e07a2fac7d3be0c9267f1e202"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_height_split _ _ _ _ _ H0);intro H5.",
                        "VernacExtend",
                        "4373a9ebbd073f45df9d47d79142672d62caba81"
                    ]
                },
                {
                    "command": [
                        "destruct H5 as [H5 H6].",
                        "VernacExtend",
                        "cf322e957a0a17c4f0129b9b5ab195ffd549b719"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node t11 t12) <> mkCanon (Node t21 t22)).",
                        "VernacExtend",
                        "e5ebda88dcf7252d02fe790742ca5186433f1924"
                    ]
                },
                {
                    "command": [
                        "intro;apply H.",
                        "VernacExtend",
                        "2155aadd67abfad07bb52771af5eefbf7e2e6097"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext;trivial.",
                        "VernacExtend",
                        "57a542efd5803f9f450ee003dbdb7ed63247566f"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_diff _ _ _ _ H1);intro H7.",
                        "VernacExtend",
                        "202e39e0b3e0864a0df4635a218bbef8e66790fb"
                    ]
                },
                {
                    "command": [
                        "generalize (shareTree_dec_eq (mkCanon t11) (mkCanon t21));intro H8.",
                        "VernacExtend",
                        "eb479b5baf234f5a361ab3a77ce7064b1b58706b"
                    ]
                },
                {
                    "command": [
                        "destruct H8.",
                        "VernacExtend",
                        "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon t12 <> mkCanon t22).",
                        "VernacExtend",
                        "d5530f0dcac3c9be8952682b076c753553a9ed4e"
                    ]
                },
                {
                    "command": [
                        "destruct H7.",
                        "VernacExtend",
                        "f6b4c745a19e0b13add33f75bb62e394f2c83618"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (mkCanon t11) < S n).",
                        "VernacExtend",
                        "e9a851b22893a180ea42e50e59a5e11c02f84a0d"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_l (tree_heightP (mkCanon t11)) (tree_heightP (mkCanon t21)));intro.",
                        "VernacExtend",
                        "e27a045e394324b484d34afac5cf9a439723bd86"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_identity (S n) (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _)) H8); intro H9.",
                        "VernacExtend",
                        "1f04daa34a11f1089617bce5f3df905a20edfba9"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)).",
                        "VernacExtend",
                        "676566ccd12df063ba567387fcc06935e88ae89d"
                    ]
                },
                {
                    "command": [
                        "intro H10;apply H2;inv H10;trivial.",
                        "VernacExtend",
                        "81f4ad1f23e3228996a395a6e9955b3ab248cbea"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ H10 H6);intro H11.",
                        "VernacExtend",
                        "65e2ef160bdfd9930535086630cd75a54c921423"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [ t3 [H11 H12]].",
                        "VernacExtend",
                        "e338dc21fcbc0d9218f24c39a5f9de30e18cb8b5"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t3);intro H13.",
                        "VernacExtend",
                        "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
                    ]
                },
                {
                    "command": [
                        "rewrite H13 in H11.",
                        "VernacExtend",
                        "127222eef41ce89095b0ee60c2cc77e194b3c54e"
                    ]
                },
                {
                    "command": [
                        "assert ((exist (fun t : ShareTree => canonicalTree t) (mkCanon t11) (mkCanon_correct t11)) = (exist (fun t : ShareTree => canonicalTree t) (mkCanon t21) (mkCanon_correct t21))).",
                        "VernacExtend",
                        "16db315bbd3d9f1a7fc38ee3b02b31e91a239c84"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_proof_irr.",
                        "VernacExtend",
                        "c1839a326dcd3dbab0610d41a14ef9dfb15a467f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite H14 in H9 at 2.",
                        "VernacExtend",
                        "1d85736438994c1d74ea8c5ea5665af0e19601bb"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_combine _ _ _ _ _ _ _ H9 H11);intro H15.",
                        "VernacExtend",
                        "9fcc62f2b9596c3d693b5463d92fb40a26fedb57"
                    ]
                },
                {
                    "command": [
                        "unfold avg, avgable_tree in H15.",
                        "VernacExtend",
                        "20a34cc88867e9063f5293996536454274cfd253"
                    ]
                },
                {
                    "command": [
                        "rewrite H15.",
                        "VernacExtend",
                        "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t4 : ShareTree => canonicalTree t4) (mkCanon (Node t11 (proj1_sig t3))) (mkCanon_correct (Node t11 (proj1_sig t3)))).",
                        "VernacExtend",
                        "eebeec09dc2f2bce787ca5387580b09774d7bace"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node t11 x3) = Node (mkCanon t11) x3).",
                        "VernacExtend",
                        "15c8c1a6d5a02ef1a006c5d9a7fc8c919571fe0c"
                    ]
                },
                {
                    "command": [
                        "clear - c3 H12.",
                        "VernacExtend",
                        "6aee0757338f7e1d3cd6deef211bf6753dac11e7"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H12;simpl in H12.",
                        "VernacExtend",
                        "efa1be8339da6067853a95a093c0c0d6a5788d76"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c3);intro.",
                        "VernacExtend",
                        "1ce1f27d257533af76a6c0c62b63d08d302c3b26"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon t11).",
                        "VernacExtend",
                        "52531f891fcfd7acc3aba32fc6a720ec558edd14"
                    ]
                },
                {
                    "command": [
                        "icase x3.",
                        "VernacExtend",
                        "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
                    ]
                },
                {
                    "command": [
                        "clear -H8 H12 H16.",
                        "VernacExtend",
                        "b233188f915adc672baa461b483025ecbbc6fcd1"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,proj1_sig in *.",
                        "VernacExtend",
                        "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
                    ]
                },
                {
                    "command": [
                        "rewrite H16.",
                        "VernacExtend",
                        "d46611b9926d3411ed586aec14fbb4de59848bae"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (max (tree_heightP (mkCanon t11)) (tree_heightP x3) + 1) with (S (max (tree_heightP (mkCanon t11)) (tree_heightP x3))) by omega.",
                        "VernacExtend",
                        "06042e6d6917ccaf5e1342556da88f279a035c00"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (mkCanon t11) <= tree_heightP x3 ) by omega.",
                        "VernacExtend",
                        "a2c93fd667b952c2f1c1627d5d047943395eb525"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H12.",
                        "VernacExtend",
                        "535d97bd150861302e54cffeb5719d00d6f597bb"
                    ]
                },
                {
                    "command": [
                        "apply max_r;trivial.",
                        "VernacExtend",
                        "4a66b5f0b6a3156113a20c5bd47ea461c6373594"
                    ]
                },
                {
                    "command": [
                        "generalize (shareTree_dec_eq (mkCanon t12) (mkCanon t22));intro H8.",
                        "VernacExtend",
                        "f1022e3a105562de544f28ad632cdf86e849f55c"
                    ]
                },
                {
                    "command": [
                        "unfold proj1_sig in *.",
                        "VernacExtend",
                        "daea89653bff3583b56747d0a593691b68c1a196"
                    ]
                },
                {
                    "command": [
                        "destruct H8.",
                        "VernacExtend",
                        "9fb2c61f93ea55d054a69439c04b3c885f0137a6"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)).",
                        "VernacExtend",
                        "af5aae2994568e21a49337ad5b82f9739202f56c"
                    ]
                },
                {
                    "command": [
                        "intro H8;apply n0;inv H8;trivial.",
                        "VernacExtend",
                        "a81c2bfad8182f9377d55de51438a34c660eb236"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ H2 H5);intro H8.",
                        "VernacExtend",
                        "1d443924a0a9f13bd0fef5317d6e28a25c0d6f89"
                    ]
                },
                {
                    "command": [
                        "destruct H8 as [t3 [H8 H9]].",
                        "VernacExtend",
                        "b40b675ab8e18f8e02bec26c231a6f8dcd9632bd"
                    ]
                },
                {
                    "command": [
                        "rewrite e in H6.",
                        "VernacExtend",
                        "5a1cf64e61e309ed4ae42b687a7569b82b534ba5"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (mkCanon t22) < S n).",
                        "VernacExtend",
                        "c9d20a221acafbca1bcbddadafea087dbc915391"
                    ]
                },
                {
                    "command": [
                        "generalize (le_max_r (tree_heightP (mkCanon t22)) (tree_heightP (mkCanon t22)));intro.",
                        "VernacExtend",
                        "551995a2c06f4171bd1175c7bc0d1e574ec939d3"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_identity (S n) (exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)) H10);intro H11.",
                        "VernacExtend",
                        "4c6fc7f751c6dbd7b283b0f604f8928eec6d1191"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) (mkCanon t12) (mkCanon_correct t12) = exist (fun t : ShareTree => canonicalTree t) (mkCanon t22) (mkCanon_correct t22)).",
                        "VernacExtend",
                        "fe49197fdba92364d9c5a53c16191011f48ed7b2"
                    ]
                },
                {
                    "command": [
                        "apply canonTree_proof_irr;trivial.",
                        "VernacExtend",
                        "db71edd8a3e48d3dbe9671c50722b3f2dbee46a8"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H12 in H11 at 1.",
                        "VernacExtend",
                        "f3471472ab8d1e70f076e3f8dca1beb4f9959bf4"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t3);intro H13.",
                        "VernacExtend",
                        "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
                    ]
                },
                {
                    "command": [
                        "rewrite H13 in H8.",
                        "VernacExtend",
                        "e1c0b725aa0c5da577baecfb3fcbc21d84610608"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_combine _ _ _ _ _ _ _ H8 H11);intro H14.",
                        "VernacExtend",
                        "9183ea174afe7e6ba89bd1e26bd84c8340e5b90b"
                    ]
                },
                {
                    "command": [
                        "unfold avg,avgable_tree in H14.",
                        "VernacExtend",
                        "a1acbacd6fcf5aa813d7734f2295fa72baaebc50"
                    ]
                },
                {
                    "command": [
                        "rewrite H14.",
                        "VernacExtend",
                        "b53d81c05d6007e728db7abfa7c98c200268f9e7"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t4 : ShareTree => canonicalTree t4) (mkCanon (Node (proj1_sig t3) t22)) (mkCanon_correct (Node (proj1_sig t3) t22))).",
                        "VernacExtend",
                        "37e32e4dba1fe44763aa8f0f2a21f3c9067442e4"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "49556f817df3c7ae9a87ff32ae57e9f568c1b28c"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,proj1_sig in *.",
                        "VernacExtend",
                        "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
                    ]
                },
                {
                    "command": [
                        "clear - H9 H10 c3.",
                        "VernacExtend",
                        "9a8cfc6a58564be8329e6b25d76f970790fa42a5"
                    ]
                },
                {
                    "command": [
                        "assert (mkCanon (Node x3 t22) = Node x3 (mkCanon t22)).",
                        "VernacExtend",
                        "f96aaa42366c7a3527cb476998984cb3efdecc95"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c3);intro H.",
                        "VernacExtend",
                        "121ad7fc9098bcc6ed761e0e237c5d4ad7bb112e"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "icase x3.",
                        "VernacExtend",
                        "cf7d52cf602e6a488a2c0fb8d93fd03b7233d31d"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP x3) (tree_heightP (mkCanon t22)) + 1 = S (max (tree_heightP x3) (tree_heightP (mkCanon t22)))) by omega.",
                        "VernacExtend",
                        "04cf84081b41f3990410b7fabf42fd46bf1dc7d1"
                    ]
                },
                {
                    "command": [
                        "rewrite H0;f_equal.",
                        "VernacExtend",
                        "4daa109ecd0f81b681893d8417577008c878b091"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H9 in *.",
                        "VernacExtend",
                        "1b3d1842b608dfb7e9786682bbef87efa740f9a0"
                    ]
                },
                {
                    "command": [
                        "assert (tree_heightP (mkCanon t22) <= tree_heightP x3) by omega.",
                        "VernacExtend",
                        "d4399341c069e547c4594a4772cf42af2f0b40b2"
                    ]
                },
                {
                    "command": [
                        "apply max_l;trivial.",
                        "VernacExtend",
                        "357b43e1489a082e768815cb343917c66d5af9a7"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t => canonicalTree t) (mkCanon t11) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t21) (mkCanon_correct _)).",
                        "VernacExtend",
                        "af5aae2994568e21a49337ad5b82f9739202f56c"
                    ]
                },
                {
                    "command": [
                        "intro H8;apply n0;inv H8;trivial.",
                        "VernacExtend",
                        "a81c2bfad8182f9377d55de51438a34c660eb236"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t => canonicalTree t) (mkCanon t12) (mkCanon_correct _) <> exist (fun t => canonicalTree t) (mkCanon t22) (mkCanon_correct _)).",
                        "VernacExtend",
                        "676566ccd12df063ba567387fcc06935e88ae89d"
                    ]
                },
                {
                    "command": [
                        "intro H8;apply n1;inv H8;trivial.",
                        "VernacExtend",
                        "725cf99f21a01269787bb3dd13dfd3c96287dd50"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ H2 H5);intro H9.",
                        "VernacExtend",
                        "2ae01891d7e9b77334e03fde9791ce51537eb0fd"
                    ]
                },
                {
                    "command": [
                        "destruct H9 as [t3 [H9 H10]].",
                        "VernacExtend",
                        "2ce64c7bbbd49024f0ae65c3a23c3c9ce501ebd9"
                    ]
                },
                {
                    "command": [
                        "generalize (IHn _ _ H8 H6);intro H11.",
                        "VernacExtend",
                        "5e4323710cd00e2576f60ec8daecc73ace0e67fa"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [t4 [H11 H12]].",
                        "VernacExtend",
                        "591f9c0d5ecc6891cfe0f355ba9037dea98a50a2"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t3);intro H13.",
                        "VernacExtend",
                        "2c94a1dcace2a8f122297b41b08c57e07ffff47c"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t4);intro H14.",
                        "VernacExtend",
                        "50242437fcfe9c47e34cd91eda7644cdf8ce275a"
                    ]
                },
                {
                    "command": [
                        "rewrite H13 in H9.",
                        "VernacExtend",
                        "20fe868c83b682fc53998a197449d05316cea45d"
                    ]
                },
                {
                    "command": [
                        "rewrite H14 in H11.",
                        "VernacExtend",
                        "79cb30fa9e15ce00cbe0d635f54c3152f74e42dc"
                    ]
                },
                {
                    "command": [
                        "generalize (tree_avg_combine _ _ _ _ _ _ _ H9 H11);intro H15.",
                        "VernacExtend",
                        "9fcc62f2b9596c3d693b5463d92fb40a26fedb57"
                    ]
                },
                {
                    "command": [
                        "unfold avg,avgable_tree in H15.",
                        "VernacExtend",
                        "20a34cc88867e9063f5293996536454274cfd253"
                    ]
                },
                {
                    "command": [
                        "rewrite H15.",
                        "VernacExtend",
                        "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun t5 : ShareTree => canonicalTree t5) (mkCanon (Node (proj1_sig t3) (proj1_sig t4))) (mkCanon_correct (Node (proj1_sig t3) (proj1_sig t4)))).",
                        "VernacExtend",
                        "c100613b1e8836df641d86b3193bc5dabf722eff"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "destruct t3 as [x3 c3]; destruct t4 as [x4 c4].",
                        "VernacExtend",
                        "c7505403ed5c10598f36f50169ae57fe5ddbd928"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,proj1_sig in *.",
                        "VernacExtend",
                        "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
                    ]
                },
                {
                    "command": [
                        "clear -c3 c4 H10 H12.",
                        "VernacExtend",
                        "6adcb5a69922267151552e9f5cc94552e10611c1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c3);intro H1.",
                        "VernacExtend",
                        "8e972f584831f1fda5a340544a94cd6d4fbf1c14"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_identity _ c4);intro H2.",
                        "VernacExtend",
                        "a14b5d15918b8d92db288fe160476947a255ac20"
                    ]
                },
                {
                    "command": [
                        "rewrite H1,H2.",
                        "VernacExtend",
                        "0ce0ee884f848b2a2759f8abce9a0e685be27984"
                    ]
                },
                {
                    "command": [
                        "icase x3;icase x4.",
                        "VernacExtend",
                        "3b6468c47f1d95b8484c439733b9d3306cc0a6c2"
                    ]
                },
                {
                    "command": [
                        "simpl in *;clear -H10 H12.",
                        "VernacExtend",
                        "ff48b9cbae2ec2d64a301fd0d33040298e98b5d9"
                    ]
                },
                {
                    "command": [
                        "rewrite H10,H12.",
                        "VernacExtend",
                        "095b838a18d0117772841cf234b0b3374db0eb6d"
                    ]
                },
                {
                    "command": [
                        "generalize (max_idempotent (S n));intro H.",
                        "VernacExtend",
                        "3a8fb906a8e84f29510dd1d0e812dad1c2027ed0"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_ex",
            "line_nb": 4164,
            "steps": [
                {
                    "command": [
                        "simpl;intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := eq_dec t1 t2).",
                        "VernacExtend",
                        "cf0043a25a6c40c2663344df5ba6d6bbc364261b"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1|H1].",
                        "VernacExtend",
                        "3d64b5d5257c32cb97db1118ac8095f035e8c53f"
                    ]
                },
                {
                    "command": [
                        "subst t2.",
                        "VernacExtend",
                        "e4dd57e9b9492f7f098f4c9b9f0931631f282df4"
                    ]
                },
                {
                    "command": [
                        "exists t1.",
                        "VernacExtend",
                        "3e549779dc8ddd0d5b9c600a078ba0eb9d6c2a5e"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_identity.",
                        "VernacExtend",
                        "56ba71456a5e467a8bb56c6f0a0b2f9ef9f771da"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : max (height t1) (height t2) < n).",
                        "VernacExtend",
                        "d9b71b643447be69e24f04f6388a88ff64fd719a"
                    ]
                },
                {
                    "command": [
                        "apply Nat.max_lub_lt;trivial.",
                        "VernacExtend",
                        "604b3e01c990ad6991675e87f51b031303844609"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := tree_avg_increase _ _ _ H1 H2).",
                        "VernacExtend",
                        "0a694ee4371953f86b1b72dd26b22f09d47953b4"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [t3 [H3 H4]].",
                        "VernacExtend",
                        "98a2af6d1d6f4f1957d83318da58e590d1132764"
                    ]
                },
                {
                    "command": [
                        "exists t3.",
                        "VernacExtend",
                        "9d40ffa34956812a2dad4a892467376ff2712db0"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "avg_share_correct",
            "line_nb": 4179,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "copy H.",
                        "VernacExtend",
                        "3c4af1b59cd5812a53406fa43cc959406b13503f"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_left_Some in H.",
                        "VernacExtend",
                        "c512dd7b7220b8b2b7a06772d22533111caa59e8"
                    ]
                },
                {
                    "command": [
                        "apply tree_round_right_Some in H0.",
                        "VernacExtend",
                        "a9abb84037ba92e60798a0eab80945217a1cce8f"
                    ]
                },
                {
                    "command": [
                        "destruct H as [t1 H].",
                        "VernacExtend",
                        "1356fbf966b7e0d5200b8fab788d144750bd4e64"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [t2 H0].",
                        "VernacExtend",
                        "c4aca7d2b72117426358fd5eff47d1add26b0671"
                    ]
                },
                {
                    "command": [
                        "exists t1.",
                        "VernacExtend",
                        "3e549779dc8ddd0d5b9c600a078ba0eb9d6c2a5e"
                    ]
                },
                {
                    "command": [
                        "exists t2.",
                        "VernacExtend",
                        "aebad7a61dd4b815a87f5f1fcf62e7ad254044e2"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "split;trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_round2avg;trivial.",
                        "VernacExtend",
                        "72df0a799c9bb0b5a96969446b11672aa47e6263"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_recompose",
            "line_nb": 4192,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [t1 t2].",
                        "VernacExtend",
                        "05205e12573d5312b7424d571553b8cf2ed6d1a0"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
                        "VernacExtend",
                        "5e10407307800b7bfc94c3096675d80ad69d1e56"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2; simpl.",
                        "VernacExtend",
                        "3bf100d2ed402e45d65cdea1e4d291d97c665b86"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0); try subst b0; unfold decompose; simpl.",
                        "VernacExtend",
                        "4c3036e7374f60592c3a9e36b8e6841e02d24f95"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply exist_ext; trivial.",
                        "VernacExtend",
                        "d14cd8b10fd6412dd0c5172f7d61f3c556912e06"
                    ]
                },
                {
                    "command": [
                        "destruct (compose_canon1 b b0 n c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext; trivial.",
                        "VernacExtend",
                        "392ce7b3d5cd7b0e0caa919db422421f52d5fcc5"
                    ]
                },
                {
                    "command": [
                        "destruct (compose_canon2 b x2_1 x2_2 c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
                        "VernacExtend",
                        "7b8a5c982e1868c20c700681a7df4ee14c4f2e75"
                    ]
                },
                {
                    "command": [
                        "destruct (compose_canon3 x1_1 x1_2 b c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
                        "VernacExtend",
                        "54f11e23e9eae144a96e5f70901a1f2de99bd96c"
                    ]
                },
                {
                    "command": [
                        "destruct (compose_canon4 x1_1 x1_2 x2_1 x2_2 c1 c2) as [? [? [? ?]]]; f_equal; apply exist_ext;trivial.",
                        "VernacExtend",
                        "7078a9fb2b522201185ba9dbc974f6bb3cad2532"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "recompose_decompose",
            "line_nb": 4204,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c].",
                        "VernacExtend",
                        "1bbd86825644f3222b59ad972d4c2be0ab656553"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "unfold recompose.",
                        "VernacExtend",
                        "895ba2a52e167cf060d9737130d43d999cf601dd"
                    ]
                },
                {
                    "command": [
                        "icase x1; icase x2.",
                        "VernacExtend",
                        "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
                    ]
                },
                {
                    "command": [
                        "icase (bool_dec b b0);try subst b0; simpl; apply exist_ext;trivial.",
                        "VernacExtend",
                        "e0096e35bfbac1bd41a0f3000b023686eda9bba1"
                    ]
                },
                {
                    "command": [
                        "icase b;elimtype False;firstorder.",
                        "VernacExtend",
                        "85de6e2c5edb9442a827d607b20e4f3189f9dd3a"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply proof_irr.",
                        "VernacExtend",
                        "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply proof_irr.",
                        "VernacExtend",
                        "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply proof_irr.",
                        "VernacExtend",
                        "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_rewrite",
            "line_nb": 4220,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c]; destruct t1 as [x1 c1]; destruct t2 as [x2 c2].",
                        "VernacExtend",
                        "e0e8bd0a9fe6210c94302282986ab860574d448e"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split;intros; inv H; generalize (mkCanon_identity _ c1);intro; generalize (mkCanon_identity _ c2);intro.",
                        "VernacExtend",
                        "2badd030c1f2b5af3aa4b3e058ee3c9539b3d9ea"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply exist_ext; rewrite H in H1;rewrite H0 in H1; icase x1;icase x2; icase b0;icase b1.",
                        "VernacExtend",
                        "4ac8b02da52804aa7c7ba5a29528cc0af7565e15"
                    ]
                },
                {
                    "command": [
                        "split;intro; try apply exist_ext; simpl in H,c; destruct c as [? [? [? ?]]]; inv H; simpl; generalize (mkCanon_identity _ c1);intro; generalize (mkCanon_identity _ c2);intro.",
                        "VernacExtend",
                        "6f9ae9f24317ee3340e410fa2b4450036479e51b"
                    ]
                },
                {
                    "command": [
                        "rewrite H;rewrite H0.",
                        "VernacExtend",
                        "cadacb31556a02adbe2c6bc962279414f9ba19d0"
                    ]
                },
                {
                    "command": [
                        "icase x1;icase x2.",
                        "VernacExtend",
                        "8a6a1fa2255ac096c1bc9cb2513a53787de6439e"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0.",
                        "VernacExtend",
                        "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
                    ]
                },
                {
                    "command": [
                        "elimtype False;firstorder.",
                        "VernacExtend",
                        "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
                    ]
                },
                {
                    "command": [
                        "elimtype False;firstorder.",
                        "VernacExtend",
                        "14f7e8b876c441d14ab48aa286e98e76fbd10de9"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply exist_ext; rewrite H in H1;rewrite H0 in H1; icase x1;icase x2;try icase b;try icase b0;inv H1;auto.",
                        "VernacExtend",
                        "e1edc738f85fe7b6c9dddd84b82737ae76d44701"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_height",
            "line_nb": 4238,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t1 as [x1 c1]; destruct t2 as [x2 c2]; destruct t3 as [x3 c3].",
                        "VernacExtend",
                        "195068c20e4ffcf8d76286499ee2886c68b06bfa"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "destruct c1 as [? [? [? ?]]].",
                        "VernacExtend",
                        "3c359adc74576190ab9948d54bc08fb4d001d6d7"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP x2) (tree_heightP x3) <= n) by omega.",
                        "VernacExtend",
                        "c71d458ca8d3c9f6fec9aad54244abc87779b914"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub_l _ _ _ H0);intro.",
                        "VernacExtend",
                        "b16694f4ea1ec3ab3edce1db0209132569d976b0"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub_r _ _ _ H0);intro.",
                        "VernacExtend",
                        "f3975fc857fa662e512ff8546610937fa11f7c5c"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_join",
            "line_nb": 4252,
            "steps": [
                {
                    "command": [
                        "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
                        "VernacExtend",
                        "812b79a562ea96af4db197fa2a08592a266df50c"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t1 t11 t12);intro H11.",
                        "VernacExtend",
                        "b087360e9b5c442b60b0622598cfb41904f1c7ef"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t2 t21 t22);intro H21.",
                        "VernacExtend",
                        "01102d5c313419994f35f053eea35468b1d6ccb3"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t3 t31 t32);intro H31.",
                        "VernacExtend",
                        "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
                        "VernacExtend",
                        "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
                    ]
                },
                {
                    "command": [
                        "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
                        "VernacExtend",
                        "c437650f09b7a627ae31c68a8d4edf52c12738db"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
                        "VernacExtend",
                        "9657b220c6a032f534b1b435e912c267137e1c93"
                    ]
                },
                {
                    "command": [
                        "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
                        "VernacExtend",
                        "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "split;intro.",
                        "VernacExtend",
                        "966a6edea9c2088caf0e546be884ea531f6207b3"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_join_split;trivial.",
                        "VernacExtend",
                        "90d55308a40d7d26ba8fb9a9f45528ca94759b1c"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_join_combine;trivial.",
                        "VernacExtend",
                        "27f22a80d0af624d72ec164c26bb10d0371c2f5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_height_zero",
            "line_nb": 4267,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0 as [x c].",
                        "VernacExtend",
                        "1bbd86825644f3222b59ad972d4c2be0ab656553"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *.",
                        "VernacExtend",
                        "6cf808b018092d3a5afb1f060467b3dce93bc24b"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "decompose_height_le",
            "line_nb": 4279,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct s as [s pf]; destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "1aacb5359bf929aead81dd2383de96224637ad60"
                    ]
                },
                {
                    "command": [
                        "icase s; simpl in H; destruct pf; inv H; unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "b0159cb3e3bb4c75ceb577509b85b5bc2c153ed7"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (max (tree_heightP s1) (tree_heightP s2) <= n) by omega.",
                        "VernacExtend",
                        "709994c57036434f40541854a0fb6586b53ad368"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub_l _ _ _ H);intro.",
                        "VernacExtend",
                        "84feca1efcf58b1a7592f5717d76fe03a4ffeb1e"
                    ]
                },
                {
                    "command": [
                        "generalize (max_lub_r _ _ _ H);intro.",
                        "VernacExtend",
                        "0836df7c002260d87c9bd0e3ce60510e052f64a5"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_le",
            "line_nb": 4290,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "4c0182061f61259973f8c4484e860129b29d196e"
                    ]
                },
                {
                    "command": [
                        "unfold Ord in H;simpl in H.",
                        "VernacExtend",
                        "f94e68108c7289650f7efba89bcf78152ba8bdc8"
                    ]
                },
                {
                    "command": [
                        "icase s1;icase s2;inv H0;inv H1;unfold Ord; simpl in pf1,pf2; destruct pf1; destruct pf2;simpl.",
                        "VernacExtend",
                        "517a06b13bbdf0f01ba3135e3087e4a43f276824"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;inv H.",
                        "VernacExtend",
                        "bdcbbc9cf4b9e01d8c4edb70aeda38458966e76a"
                    ]
                },
                {
                    "command": [
                        "inversion H;subst.",
                        "VernacExtend",
                        "123ebc73101dcac5781200440a60232218464ea1"
                    ]
                },
                {
                    "command": [
                        "inversion H2;subst.",
                        "VernacExtend",
                        "cbe105a5addb129fa1e578ba8ef36c4763179006"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "inversion H;subst.",
                        "VernacExtend",
                        "123ebc73101dcac5781200440a60232218464ea1"
                    ]
                },
                {
                    "command": [
                        "inversion H1;subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "inversion H;subst.",
                        "VernacExtend",
                        "123ebc73101dcac5781200440a60232218464ea1"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_diff",
            "line_nb": 4305,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := canonTree_eq_dec s11 s21).",
                        "VernacExtend",
                        "f1de325dd188bb9d4b8166bfdc193bb069990eff"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|H2].",
                        "VernacExtend",
                        "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
                    ]
                },
                {
                    "command": [
                        "subst s11.",
                        "VernacExtend",
                        "97aac360c08de454a9e244310eaeb7535778922c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := canonTree_eq_dec s12 s22).",
                        "VernacExtend",
                        "ff24f291ffc773884ba2e397a8cf4bf328951409"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|H2].",
                        "VernacExtend",
                        "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
                    ]
                },
                {
                    "command": [
                        "subst s12.",
                        "VernacExtend",
                        "6a5af557f014438a87bc57db907de2749ff24da1"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H1 in H0.",
                        "VernacExtend",
                        "42d08cd43ac5900fc8cb5b0f113d48246a828cad"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : recompose (decompose s1) = recompose (decompose s2)).",
                        "VernacExtend",
                        "40de953af7bedd1778f0f1463d53136c07f77259"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite recompose_decompose in H2.",
                        "VernacExtend",
                        "71c34f239f9a0e93f1d269c7f080bfa8f5d04da2"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "right;trivial.",
                        "VernacExtend",
                        "0340ad4c708a2ae89a0d63d55c2e24a5dd555b53"
                    ]
                },
                {
                    "command": [
                        "left;trivial.",
                        "VernacExtend",
                        "2f1efd67ff23560c270a9589d0d1b100a9c80732"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_decompose",
            "line_nb": 4324,
            "steps": [
                {
                    "command": [
                        "destruct s as [s pf].",
                        "VernacExtend",
                        "481a787c654b6520d8b63e35856076f4cc563116"
                    ]
                },
                {
                    "command": [
                        "icase s;intros.",
                        "VernacExtend",
                        "73216b67704b9caf147358105b593fabebe15859"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold countBLeafCT;simpl.",
                        "VernacExtend",
                        "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "icase n;compute;omega.",
                        "VernacExtend",
                        "e64f84c1aa2c335c3c6aa7f10d228ca4f7a23491"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "simpl in pf.",
                        "VernacExtend",
                        "d8660beef72b9fca98b73ea7a37cc4e035d4b28d"
                    ]
                },
                {
                    "command": [
                        "destruct pf as [H1 [H2 [H3 H4]]].",
                        "VernacExtend",
                        "82d72a3aebf28dfe2853dcfb04027d2108fdc703"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold countBLeafCT;simpl.",
                        "VernacExtend",
                        "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_le",
            "line_nb": 4339,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "4c0182061f61259973f8c4484e860129b29d196e"
                    ]
                },
                {
                    "command": [
                        "unfold countBLeafCT;simpl.",
                        "VernacExtend",
                        "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
                    ]
                },
                {
                    "command": [
                        "icase s1;icase s2; try icase b;try icase b0;inv H.",
                        "VernacExtend",
                        "08e78bd868a2d1c88b11ca11794a986d984ac5b3"
                    ]
                },
                {
                    "command": [
                        "compute in H2.",
                        "VernacExtend",
                        "7211b392316dd70a6982bd2611971f542f675139"
                    ]
                },
                {
                    "command": [
                        "inversion H2.",
                        "VernacExtend",
                        "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "simpl in pf2.",
                        "VernacExtend",
                        "ed413fcad6238bbd7b3c654dedb31d51fbfb46a9"
                    ]
                },
                {
                    "command": [
                        "destruct pf2 as [H6 [H7 [H8 H9]]].",
                        "VernacExtend",
                        "d5ec27bde7a7643290cfc7e3b58c35cf865660b4"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := top_correct (exist (fun t => canonicalTree t) s2_1 H8)).",
                        "VernacExtend",
                        "f5251d67a1c25ab6550e7f361166ae99cdcfb724"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : (top <= exist (fun t => canonicalTree t) s2_1 H8)%ba) by auto.",
                        "VernacExtend",
                        "e11d75389a80abbda7349ac53f4448b82da041e6"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := ord_antisym _ _ H10 H11).",
                        "VernacExtend",
                        "a85e4d80adf89b142c47218b27ed9f581ec22313"
                    ]
                },
                {
                    "command": [
                        "unfold top in H12;inv H12.",
                        "VernacExtend",
                        "958818aef5f06563874574720a81688654f12e65"
                    ]
                },
                {
                    "command": [
                        "assert (H13 := top_correct (exist (fun t => canonicalTree t) s2_2 H9)).",
                        "VernacExtend",
                        "e774c102ba1ed62834a83b1931422259e4f8e19c"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : (top <= exist (fun t => canonicalTree t) s2_2 H9)%ba) by auto.",
                        "VernacExtend",
                        "563ef7edf68d4e8a0175cd6cdc8d50f5251c0aff"
                    ]
                },
                {
                    "command": [
                        "assert (H15 := ord_antisym _ _ H13 H14).",
                        "VernacExtend",
                        "6c904e757469ed7a99ecadb8c38ce5578cf3de87"
                    ]
                },
                {
                    "command": [
                        "unfold top in H15;inv H15.",
                        "VernacExtend",
                        "6d58631dee88387f98ccf3d8a27d08afd788fdc4"
                    ]
                },
                {
                    "command": [
                        "destruct H6 as [H6|H6];inv H6.",
                        "VernacExtend",
                        "48706d2927a4c04d0ae4a58828e64c0a54b9cd58"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s1) as ds1; remember (decompose s2) as ds2; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; symmetry in Heqds1, Heqds2.",
                        "VernacExtend",
                        "5153417822dd84c035e2d00a0e6033955e87f081"
                    ]
                },
                {
                    "command": [
                        "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H;trivial.",
                        "VernacExtend",
                        "665f20cf671bc6f9665db03dd058f2e6cb1ea075"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := IHn _ _ H1).",
                        "VernacExtend",
                        "ce596b7d42026630525d3ef9fb216a528a52edce"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := IHn _ _ H2).",
                        "VernacExtend",
                        "a299085c13f188ed613b7726f172f5301407124d"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_lt",
            "line_nb": 4367,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2]; unfold countBLeafCT;simpl.",
                        "VernacExtend",
                        "404c99b9e27f0e029411159bf7433256805034fd"
                    ]
                },
                {
                    "command": [
                        "icase s1.",
                        "VernacExtend",
                        "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply ord_antisym.",
                        "VernacExtend",
                        "73580188c8bc86e36a3f0a42a2ae63f021ef4184"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply top_correct.",
                        "VernacExtend",
                        "61ae8bf070472f85f6360bbcdbcc40ef9c963293"
                    ]
                },
                {
                    "command": [
                        "icase s2.",
                        "VernacExtend",
                        "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H1.",
                        "VernacExtend",
                        "082517f1d81f95fb630f736216639ebc81fcf197"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase s2.",
                        "VernacExtend",
                        "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "assert (exist (fun t : ShareTree => canonicalTree t) (Node s1_1 s1_2) pf1 = bot).",
                        "VernacExtend",
                        "41c181254ae7594f3c2379a82d6cbaca17909987"
                    ]
                },
                {
                    "command": [
                        "apply ord_antisym.",
                        "VernacExtend",
                        "73580188c8bc86e36a3f0a42a2ae63f021ef4184"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply bot_correct.",
                        "VernacExtend",
                        "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
                    ]
                },
                {
                    "command": [
                        "inv H2.",
                        "VernacExtend",
                        "e11edf85dc09e31a8a2ba9dcf84be4035731ae99"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H1.",
                        "VernacExtend",
                        "082517f1d81f95fb630f736216639ebc81fcf197"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s1) as ds1; remember (decompose s2) as ds2; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; symmetry in Heqds1,Heqds2.",
                        "VernacExtend",
                        "5153417822dd84c035e2d00a0e6033955e87f081"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "apply decompose_height_le with (s1:=s21) (s2:=s22) in H1;trivial.",
                        "VernacExtend",
                        "515fa2f272317be24c3c26c23c4772cc416aff78"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1 H2].",
                        "VernacExtend",
                        "352758143f119ffe1117850fdcea520fdbdaf126"
                    ]
                },
                {
                    "command": [
                        "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H;trivial.",
                        "VernacExtend",
                        "665f20cf671bc6f9665db03dd058f2e6cb1ea075"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H3 H4].",
                        "VernacExtend",
                        "6c9ef2e2f6b024f895557345533a59ee5a1499e4"
                    ]
                },
                {
                    "command": [
                        "apply decompose_diff with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H0;trivial.",
                        "VernacExtend",
                        "fe2de9c5ebdc189516ce4f467d10d76b336eb592"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H0|H0].",
                        "VernacExtend",
                        "cda8f01400e79ae6a2001885abfe4004cf77fbc0"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn s11 s21 H3 H0 H1).",
                        "VernacExtend",
                        "2d7477d5acb60560cdeef0dbaf6c9002b3a534c9"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := countBLeafCT_le n _ _ H4).",
                        "VernacExtend",
                        "3ddad8195f65100918426f340d26fdacba66c99a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn s12 s22 H4 H0 H2).",
                        "VernacExtend",
                        "5ce3b3469de20f54a4ea82d56e9e98545d431ded"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := countBLeafCT_le n _ _ H3).",
                        "VernacExtend",
                        "15837b16671cedc67a9d0323042b1a0155955e1c"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_limit",
            "line_nb": 4416,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct s as [s pf];unfold countBLeafCT;simpl; icase s.",
                        "VernacExtend",
                        "948b44d98bfe20c14d700582dd7184197b05db4c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s) as ds; destruct ds as [s1 s2]; symmetry in Heqds.",
                        "VernacExtend",
                        "d03f67f4ce1c29ad93b0c09213066b0983cdb716"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s1) (s2:=s2);trivial.",
                        "VernacExtend",
                        "26e782cf053dbe0678f78875139ccc2d85bc1d5f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := IHn s1).",
                        "VernacExtend",
                        "d5308020e1a52b7085f6d59fd173f157a6a3d11a"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := IHn s2).",
                        "VernacExtend",
                        "b870fe84b782a54c6ab856813d275e04a7122f05"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_bot",
            "line_nb": 4427,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := countBLeafCT_lt 0 bot top).",
                        "VernacExtend",
                        "e376f891c3c4ce702314b43f0306bbbdd1a818b0"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "apply bot_correct.",
                        "VernacExtend",
                        "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := countBLeafCT_limit 0 top).",
                        "VernacExtend",
                        "79630dcf7cf22ed12330f89d0ffd05721e6fe9de"
                    ]
                },
                {
                    "command": [
                        "simpl in H2.",
                        "VernacExtend",
                        "b1e247c43b6623097ab13813b4de664287dd4249"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (decompose bot = (bot,bot)).",
                        "VernacExtend",
                        "b1040d0962eb848db71e1c176b5b43d640df1630"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_decompose with (n := n) in H .",
                        "VernacExtend",
                        "c366895b567389aba20eb3cc0b30314d1279862c"
                    ]
                },
                {
                    "command": [
                        "rewrite IHn in H.",
                        "VernacExtend",
                        "0d83c198d9247034a938c227ea1e8118c2389808"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_positive",
            "line_nb": 4467,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "replace 0 with (countBLeafCT n bot) by apply countBLeafCT_bot.",
                        "VernacExtend",
                        "b7141ba4522c44abcf646a53d3c3bd84bbb6c6f8"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_lt.",
                        "VernacExtend",
                        "7023b9124e8b2a300298dad5b6b17722452c0dc7"
                    ]
                },
                {
                    "command": [
                        "apply bot_correct.",
                        "VernacExtend",
                        "6ab8dbf4c3b7f22412d027cb468e577ad6d3e1eb"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_mono_le",
            "line_nb": 4475,
            "steps": [
                {
                    "command": [
                        "induction n1.",
                        "VernacExtend",
                        "cd0aa0880ea68526e051c76c121a77fe7deaafe4"
                    ]
                },
                {
                    "command": [
                        "destruct s as [s pf];intros.",
                        "VernacExtend",
                        "a2c5cace68f57e42e1fd0f049929ddfb80c66498"
                    ]
                },
                {
                    "command": [
                        "destruct s.",
                        "VernacExtend",
                        "25b900e268e7851d959aa45edce33af62b3fca65"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf) with top.",
                        "VernacExtend",
                        "edbf958a81cc44d60ec786c2c798cb9e4dc6b66c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite countBLeafCT_top.",
                        "VernacExtend",
                        "d04fb5afb247b849c83742b10a962ba42400b888"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction n2.",
                        "VernacExtend",
                        "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
                    ]
                },
                {
                    "command": [
                        "simpl;omega.",
                        "VernacExtend",
                        "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "spec IHn2.",
                        "VernacExtend",
                        "815406f942fd35c65266e07479bd5aea60456d4d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "f_equal;apply proof_irr.",
                        "VernacExtend",
                        "6645667c8eb88627dd9c1b14a310a927f61ac2ad"
                    ]
                },
                {
                    "command": [
                        "icase n2;compute.",
                        "VernacExtend",
                        "3f261b1679f8004faf6160947048d374cd827fd5"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n2.",
                        "VernacExtend",
                        "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : n1 <= n2) by omega.",
                        "VernacExtend",
                        "7803aa2dea9b14af2b80b4f015d261622da8385f"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s) as ds.",
                        "VernacExtend",
                        "653940f7be98529671b5db634538e301081551d8"
                    ]
                },
                {
                    "command": [
                        "destruct ds as [s1 s2].",
                        "VernacExtend",
                        "2a805b644fb3c0fab755a20fa8e4fcc6d2f25661"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqds.",
                        "VernacExtend",
                        "27d9246a0cbde54e6434e2a97d7a342c5eb97bb8"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := countBLeafCT_decompose n1 _ _ _ Heqds).",
                        "VernacExtend",
                        "2085e95ea632f882af79efd519c0dcf8dd9b650e"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := countBLeafCT_decompose n2 _ _ _ Heqds).",
                        "VernacExtend",
                        "4636c8dfe909d56c0bd72d7c9f28b83541733c05"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := IHn1 n2 s1).",
                        "VernacExtend",
                        "c3e5c93be092039e5f960787d56decc9dfc060f4"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := IHn1 n2 s2).",
                        "VernacExtend",
                        "d538bbf67283f7520fe0e3225525ea3439e86e37"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_mono_diff",
            "line_nb": 4506,
            "steps": [
                {
                    "command": [
                        "induction n1;intros.",
                        "VernacExtend",
                        "110e1e640061b819fca7654c467aea3c129c1de5"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "4c0182061f61259973f8c4484e860129b29d196e"
                    ]
                },
                {
                    "command": [
                        "icase s1;icase s2.",
                        "VernacExtend",
                        "e137b456e73bd248aa1b59eee16313d4afbcfc51"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0.",
                        "VernacExtend",
                        "4ca0a3937f0efe8d65ce9254c28920d0f77cb1c4"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf1) with top.",
                        "VernacExtend",
                        "1012c0daa94a6a7386dc01e6fceab87ed3b0b67d"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
                        "VernacExtend",
                        "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf2) with bot.",
                        "VernacExtend",
                        "48d49b81b124391bbd58041fffed31b02e0e8670"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite countBLeafCT_bot.",
                        "VernacExtend",
                        "022e5e17997d54e85533cb46bbd305b2878cd5b5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
                        "VernacExtend",
                        "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf1) with bot.",
                        "VernacExtend",
                        "2fc5e22c89183905bec59a75f5bddd1a86c2058c"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_bot.",
                        "VernacExtend",
                        "0b9214fbb7f56e2bbd6bc14e053345b438fc7d5d"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_top.",
                        "VernacExtend",
                        "729e40a1fb9aa710573d85c9e45171b3936847d3"
                    ]
                },
                {
                    "command": [
                        "induction n2.",
                        "VernacExtend",
                        "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
                    ]
                },
                {
                    "command": [
                        "simpl;omega.",
                        "VernacExtend",
                        "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
                    ]
                },
                {
                    "command": [
                        "spec IHn2.",
                        "VernacExtend",
                        "815406f942fd35c65266e07479bd5aea60456d4d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl;omega.",
                        "VernacExtend",
                        "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
                        "VernacExtend",
                        "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : countBLeafCT n2 (exist (fun t0 : ShareTree => canonicalTree t0) (Node s1_1 s1_2) pf1) < countBLeafCT n2 top).",
                        "VernacExtend",
                        "68239b36e559c40ee1e2f093fee578629c58462a"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_lt.",
                        "VernacExtend",
                        "7023b9124e8b2a300298dad5b6b17722452c0dc7"
                    ]
                },
                {
                    "command": [
                        "apply top_correct.",
                        "VernacExtend",
                        "61ae8bf070472f85f6360bbcdbcc40ef9c963293"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "remember (countBLeafCT n2 (exist (fun t0 : ShareTree => canonicalTree t0) (Node s1_1 s1_2) pf1)) as n0.",
                        "VernacExtend",
                        "8678d87d8d80abbf46f948845bc8b200cfa0bdff"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase n2.",
                        "VernacExtend",
                        "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : n1 <= n2).",
                        "VernacExtend",
                        "64f5ef4593d5a7a467e3b272c7a124c44184bca5"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s1) as ds1.",
                        "VernacExtend",
                        "888832096e972876e2a448cb98bc752c4776097c"
                    ]
                },
                {
                    "command": [
                        "destruct ds1 as [s11 s12].",
                        "VernacExtend",
                        "37584c42d191f3f0e1380f77ffda4a20cfec9804"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqds1.",
                        "VernacExtend",
                        "0a8d5009e306d9fd12694c017bc2fb66bffa3622"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s2) as ds2.",
                        "VernacExtend",
                        "153988e88c0f61353467ad81cee0099fbf4f451d"
                    ]
                },
                {
                    "command": [
                        "destruct ds2 as [s21 s22].",
                        "VernacExtend",
                        "cbf77139c7712445b4d76b43ecae8660d55b1e39"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqds2.",
                        "VernacExtend",
                        "ff5b4f1192a712fdf30d4dd0945ab6e8d37d0ca2"
                    ]
                },
                {
                    "command": [
                        "apply decompose_le with (s11:=s11) (s12:=s12) (s21:=s21) (s22:=s22) in H0;trivial.",
                        "VernacExtend",
                        "e3ee9c1b75ba7d973658abe0bbd5adbb9273c8e4"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H2 H3].",
                        "VernacExtend",
                        "0d3efc95e2da5ca56f472e195f04f2c8e2aaf84b"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := IHn1 n2 s11 s21 H1 H2).",
                        "VernacExtend",
                        "cbcbd9dda29362e3203bf19be524155857532186"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := IHn1 n2 s12 s22 H1 H3).",
                        "VernacExtend",
                        "f0937341b7ddd8a6b2d449efd88b3fd77d2cde4f"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := countBLeafCT_le n2 _ _ H2).",
                        "VernacExtend",
                        "efa40cecedbda79efa0377a2f84b1c366d907eb3"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := countBLeafCT_le n2 _ _ H3).",
                        "VernacExtend",
                        "cd7d6dcaf74e6e86e8be0529166637f6120e2c52"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_mono_lt",
            "line_nb": 4578,
            "steps": [
                {
                    "command": [
                        "induction n1;intros.",
                        "VernacExtend",
                        "110e1e640061b819fca7654c467aea3c129c1de5"
                    ]
                },
                {
                    "command": [
                        "icase n2.",
                        "VernacExtend",
                        "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "destruct s as [s pf].",
                        "VernacExtend",
                        "481a787c654b6520d8b63e35856076f4cc563116"
                    ]
                },
                {
                    "command": [
                        "icase s.",
                        "VernacExtend",
                        "95bd8eb817fb0ad1529803d20290e40de7fdad6b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf) with top.",
                        "VernacExtend",
                        "edbf958a81cc44d60ec786c2c798cb9e4dc6b66c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite countBLeafCT_top.",
                        "VernacExtend",
                        "d04fb5afb247b849c83742b10a962ba42400b888"
                    ]
                },
                {
                    "command": [
                        "induction n2.",
                        "VernacExtend",
                        "7eb52ee06f5e5d001da4c1d73d443c8cf17257d8"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "spec IHn2.",
                        "VernacExtend",
                        "815406f942fd35c65266e07479bd5aea60456d4d"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in *;omega.",
                        "VernacExtend",
                        "2e505872d892cb5022bef5b246ceb26cdd84b133"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "icase n2.",
                        "VernacExtend",
                        "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "assert ( H1 : n1 < n2) by omega.",
                        "VernacExtend",
                        "b8a8bc17a9670cde62bbe57336266184faa8f00a"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s) as ds; destruct ds as [s1 s2]; symmetry in Heqds.",
                        "VernacExtend",
                        "d03f67f4ce1c29ad93b0c09213066b0983cdb716"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite countBLeafCT_decompose with (s1:=s1)(s2:=s2);trivial.",
                        "VernacExtend",
                        "a6d21a719e4daa2bfa29d817b1c6251d489888f9"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : 0 < countBLeafCT n1 s1 \\/ 0 < countBLeafCT n1 s2).",
                        "VernacExtend",
                        "7890630a0361459c2a23535d35ccd421fa199d97"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_decompose with (n:=n1) in Heqds.",
                        "VernacExtend",
                        "edf211ee3520a510c8864f2bca02eb7ee7d7ec98"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|H2].",
                        "VernacExtend",
                        "6f1e78397f882b8d61d2633fdaef03e5fd2de71f"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn1 n2 s1 H1 H2).",
                        "VernacExtend",
                        "0c2d6b8bd1467ac1b8187d12f91b699e1e4e7150"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : n1 <= n2) by omega.",
                        "VernacExtend",
                        "fc6a739ee450b19334581bf28311ce04bc3a2246"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_mono_le with (s:=s2) in H3.",
                        "VernacExtend",
                        "2be5a5c4874c097f30162f2d46f3c0f5275b68fe"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHn1 n2 s2 H1 H2).",
                        "VernacExtend",
                        "6eba08cca4890c3c99eebf3ea6ad478d2bb56571"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : n1 <= n2) by omega.",
                        "VernacExtend",
                        "fc6a739ee450b19334581bf28311ce04bc3a2246"
                    ]
                },
                {
                    "command": [
                        "apply countBLeafCT_mono_le with (s:=s1) in H3.",
                        "VernacExtend",
                        "a31650a758a8443d8bae450aacc674f57f357843"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bot_join",
            "line_nb": 4612,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute in H0.",
                        "VernacExtend",
                        "9c8f9ff816d8a89fcb05ade96e3c1ab92bfc449b"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot in H0.",
                        "VernacExtend",
                        "a733d8b51bbe7a6a894b11160891b2ef4c21c408"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "join_top",
            "line_nb": 4619,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute, glb_top in H.",
                        "VernacExtend",
                        "e3b677de40f23c6ea1d7674e9403fc7840cd036b"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute, lub_top in H0.",
                        "VernacExtend",
                        "d11fef80fb3294fe6260c95dd34aa8ea3e0e7541"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_height_0",
            "line_nb": 4626,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct s as [s pf].",
                        "VernacExtend",
                        "481a787c654b6520d8b63e35856076f4cc563116"
                    ]
                },
                {
                    "command": [
                        "icase s.",
                        "VernacExtend",
                        "95bd8eb817fb0ad1529803d20290e40de7fdad6b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "left;unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "e9161670c4fc6367f5102a284f569523daca359d"
                    ]
                },
                {
                    "command": [
                        "right;unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "a527e7191d2dfd3cc55eeb05e2b91f17bd51f1c7"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H.",
                        "VernacExtend",
                        "6f0a5994900d304b7e37570ee9395dd2367747c9"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "elimtype False;omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_height_glb_limit",
            "line_nb": 4638,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inv H;inv H0.",
                        "VernacExtend",
                        "a68a921d6be7f316f7f04b942586a57884cf2fe6"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_0 in H1.",
                        "VernacExtend",
                        "eb660c6256ce7656e69bf0c26769a9ddfef2276a"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_0 in H2.",
                        "VernacExtend",
                        "8fdf12e2f42413813e876f11e01be7fbe5865afb"
                    ]
                },
                {
                    "command": [
                        "destruct H1;destruct H2;subst;compute;omega.",
                        "VernacExtend",
                        "9fe0faf7d0d8acd8d8c3c2bca72cb6862f76004e"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1].",
                        "VernacExtend",
                        "1167e6a7e9db374781590c0e54391f8f14eab001"
                    ]
                },
                {
                    "command": [
                        "icase s1.",
                        "VernacExtend",
                        "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf1) with top.",
                        "VernacExtend",
                        "1012c0daa94a6a7386dc01e6fceab87ed3b0b67d"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top.",
                        "VernacExtend",
                        "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "ad067e598cfeae6f7538fcb420f4a37750080ba6"
                    ]
                },
                {
                    "command": [
                        "icase s2.",
                        "VernacExtend",
                        "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf true) pf2) with top.",
                        "VernacExtend",
                        "f0baee5aaea3fe4b61ca02a0985d66e3973d360d"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top.",
                        "VernacExtend",
                        "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,glb,proj1_sig.",
                        "VernacExtend",
                        "c2df6f747ef84f2684e6d0644341b62c4a1d754b"
                    ]
                },
                {
                    "command": [
                        "simpl in pf1,pf2.",
                        "VernacExtend",
                        "d69d5c77affe201d4427140813c499f887334168"
                    ]
                },
                {
                    "command": [
                        "destruct pf1 as [? [? [? ?]]].",
                        "VernacExtend",
                        "8a56391efa967d9acd5732b00f4f643c174aa7fc"
                    ]
                },
                {
                    "command": [
                        "destruct pf2 as [? [? [? ?]]].",
                        "VernacExtend",
                        "ae5e955c991beaa0fc65174029a0df608d4cdbca"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := IHn (exist (fun t => canonicalTree t) s1_1 c)(exist (fun t => canonicalTree t) s2_1 c1)).",
                        "VernacExtend",
                        "39b2ba93dd6b9901ae4af7976dab0d8b2b0e403e"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := IHn (exist (fun t => canonicalTree t) s1_2 c0)(exist (fun t => canonicalTree t) s2_2 c2)).",
                        "VernacExtend",
                        "b2251edd69b9e4cbc49009fc18fd11357b8d545c"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,proj1_sig in *.",
                        "VernacExtend",
                        "8d47e53d8cebc18ebea6c9f8b15e0ad9ed6c6a79"
                    ]
                },
                {
                    "command": [
                        "simpl in H,H0,H1,H2.",
                        "VernacExtend",
                        "c33df49656e152371b54f4fb312897594cbb0bcf"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_l (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
                        "VernacExtend",
                        "268171eff33a0228d90601686fa7e808d897e673"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_l (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
                        "VernacExtend",
                        "3b78ec64a2b295cfa81665df930925e318c414a1"
                    ]
                },
                {
                    "command": [
                        "spec H2.",
                        "VernacExtend",
                        "ccbc913e682d1020971c7fd5f1b9a88216edea30"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_r (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
                        "VernacExtend",
                        "14f664e9bf22e9e3733f407db75ad75361475986"
                    ]
                },
                {
                    "command": [
                        "spec H2.",
                        "VernacExtend",
                        "ccbc913e682d1020971c7fd5f1b9a88216edea30"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_r (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
                        "VernacExtend",
                        "ab6bfe1dae1b566b75d9ef69423d8f2f7ff4ac8f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon (intersect_tree s1_1 s2_1)); icase (mkCanon (intersect_tree s1_2 s2_2)).",
                        "VernacExtend",
                        "829f87879c96c33200ce807dc418e2cdb0e4c9a6"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;compute;omega.",
                        "VernacExtend",
                        "f1cdb8b97d0314a1c79f0dbc0cd9aa2f804f92ca"
                    ]
                },
                {
                    "command": [
                        "simpl in *;omega.",
                        "VernacExtend",
                        "2e505872d892cb5022bef5b246ceb26cdd84b133"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite max_0_r.",
                        "VernacExtend",
                        "3362d2c16e9cd1d151f6901fb81ca36c644e6bb0"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := max_lub _ _ _ H1 H2).",
                        "VernacExtend",
                        "7b1509535176f701348d718bf63b29f39b3b51c9"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_glb1",
            "line_nb": 4688,
            "steps": [
                {
                    "command": [
                        "unfold tree_height;simpl.",
                        "VernacExtend",
                        "bedca101ebaee15d2c33e8b9ac15e7a228ec7dbf"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_glb_limit.",
                        "VernacExtend",
                        "4f2acbdb8ae59cd5d0d2fb6e2f0f1962004970e0"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_height_lub_limit",
            "line_nb": 4696,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inv H;inv H0.",
                        "VernacExtend",
                        "a68a921d6be7f316f7f04b942586a57884cf2fe6"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_0 in H1.",
                        "VernacExtend",
                        "eb660c6256ce7656e69bf0c26769a9ddfef2276a"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_0 in H2.",
                        "VernacExtend",
                        "8fdf12e2f42413813e876f11e01be7fbe5865afb"
                    ]
                },
                {
                    "command": [
                        "destruct H1;destruct H2;subst;compute;omega.",
                        "VernacExtend",
                        "9fe0faf7d0d8acd8d8c3c2bca72cb6862f76004e"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1].",
                        "VernacExtend",
                        "1167e6a7e9db374781590c0e54391f8f14eab001"
                    ]
                },
                {
                    "command": [
                        "icase s1.",
                        "VernacExtend",
                        "e0d2edc62a0c90631dbc0d0cc809e1bdd46b5d78"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf1) with bot.",
                        "VernacExtend",
                        "2fc5e22c89183905bec59a75f5bddd1a86c2058c"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "destruct s2 as [s2 pf2].",
                        "VernacExtend",
                        "ad067e598cfeae6f7538fcb420f4a37750080ba6"
                    ]
                },
                {
                    "command": [
                        "icase s2.",
                        "VernacExtend",
                        "af98b5c34e38e4e39e2110cb65ce813b815cf26d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t0 : ShareTree => canonicalTree t0) (Leaf false) pf2) with bot.",
                        "VernacExtend",
                        "48d49b81b124391bbd58041fffed31b02e0e8670"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "simpl in pf1,pf2.",
                        "VernacExtend",
                        "d69d5c77affe201d4427140813c499f887334168"
                    ]
                },
                {
                    "command": [
                        "destruct pf1 as [? [? [? ?]]].",
                        "VernacExtend",
                        "8a56391efa967d9acd5732b00f4f643c174aa7fc"
                    ]
                },
                {
                    "command": [
                        "destruct pf2 as [? [? [? ?]]].",
                        "VernacExtend",
                        "ae5e955c991beaa0fc65174029a0df608d4cdbca"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := IHn (exist (fun t => canonicalTree t) s1_1 c)(exist (fun t => canonicalTree t) s2_1 c1)).",
                        "VernacExtend",
                        "39b2ba93dd6b9901ae4af7976dab0d8b2b0e403e"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := IHn (exist (fun t => canonicalTree t) s1_2 c0)(exist (fun t => canonicalTree t) s2_2 c2)).",
                        "VernacExtend",
                        "b2251edd69b9e4cbc49009fc18fd11357b8d545c"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height,proj1_sig in *;simpl in *.",
                        "VernacExtend",
                        "114dae78efd2e3c5b7f6f41c225713222f8fb915"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_l (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
                        "VernacExtend",
                        "268171eff33a0228d90601686fa7e808d897e673"
                    ]
                },
                {
                    "command": [
                        "spec H1.",
                        "VernacExtend",
                        "e11e12eab76cc75fc716f1edc243e1320c6e1a33"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_l (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
                        "VernacExtend",
                        "3b78ec64a2b295cfa81665df930925e318c414a1"
                    ]
                },
                {
                    "command": [
                        "spec H2.",
                        "VernacExtend",
                        "ccbc913e682d1020971c7fd5f1b9a88216edea30"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_r (tree_heightP s1_1) (tree_heightP s1_2));clear -H Help;omega.",
                        "VernacExtend",
                        "14f664e9bf22e9e3733f407db75ad75361475986"
                    ]
                },
                {
                    "command": [
                        "spec H2.",
                        "VernacExtend",
                        "ccbc913e682d1020971c7fd5f1b9a88216edea30"
                    ]
                },
                {
                    "command": [
                        "assert (Help := le_max_r (tree_heightP s2_1) (tree_heightP s2_2));clear -H0 Help;omega.",
                        "VernacExtend",
                        "ab6bfe1dae1b566b75d9ef69423d8f2f7ff4ac8f"
                    ]
                },
                {
                    "command": [
                        "icase (mkCanon (union_tree s1_1 s2_1)); icase (mkCanon (union_tree s1_2 s2_2)).",
                        "VernacExtend",
                        "950da7d22246556d02b1cf8ba4019adc866ed60f"
                    ]
                },
                {
                    "command": [
                        "icase b;icase b0;compute;omega.",
                        "VernacExtend",
                        "f1cdb8b97d0314a1c79f0dbc0cd9aa2f804f92ca"
                    ]
                },
                {
                    "command": [
                        "simpl in *;omega.",
                        "VernacExtend",
                        "2e505872d892cb5022bef5b246ceb26cdd84b133"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite max_0_r.",
                        "VernacExtend",
                        "3362d2c16e9cd1d151f6901fb81ca36c644e6bb0"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := max_lub _ _ _ H1 H2).",
                        "VernacExtend",
                        "7b1509535176f701348d718bf63b29f39b3b51c9"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_lub1",
            "line_nb": 4742,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_lub_limit.",
                        "VernacExtend",
                        "d0ce1d5195798333adc718ca60c6b922ac10a568"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_comp",
            "line_nb": 4750,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "intro s.",
                        "VernacExtend",
                        "8f016ced1ae59837b7d879a76d5f880ff6397ebe"
                    ]
                },
                {
                    "command": [
                        "destruct s as [s pf].",
                        "VernacExtend",
                        "481a787c654b6520d8b63e35856076f4cc563116"
                    ]
                },
                {
                    "command": [
                        "induction s;unfold tree_height;simpl.",
                        "VernacExtend",
                        "002aeeb395cf99dc750267e33d3cea88a2fe2029"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "simpl in pf.",
                        "VernacExtend",
                        "d8660beef72b9fca98b73ea7a37cc4e035d4b28d"
                    ]
                },
                {
                    "command": [
                        "destruct pf as [? [? [? ?]]].",
                        "VernacExtend",
                        "c005f3e0a34f37377546d9ec3f9cc56a0cc16f90"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHs1 H1).",
                        "VernacExtend",
                        "143dfb53f25252e382fc42ea9ee0acdf30c22a77"
                    ]
                },
                {
                    "command": [
                        "specialize ( IHs2 H2).",
                        "VernacExtend",
                        "947cf913186151cc778935a614c73434e3679cb7"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in *;simpl in *.",
                        "VernacExtend",
                        "bb26c99fbfbc97f0ec2d13c8a56a5a0a908a4913"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_join_le",
            "line_nb": 4764,
            "steps": [
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "destruct s1 as [s1 pf1]; destruct s2 as [s2 pf2]; destruct s3 as [s3 pf3].",
                        "VernacExtend",
                        "f5b7fbc5165c3efdebd21024d0b1812d8af34b9b"
                    ]
                },
                {
                    "command": [
                        "icase s1;icase s2;icase s3.",
                        "VernacExtend",
                        "290b544c2d9cf26da1dff483638091794bb038e6"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
                        "VernacExtend",
                        "bc9215a423d068a7996cd12d68c6e27356fcac96"
                    ]
                },
                {
                    "command": [
                        "apply join_top in H.",
                        "VernacExtend",
                        "2a48981e5b9a1535acef17ff8571433a720714ba"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite H;rewrite H0.",
                        "VernacExtend",
                        "cadacb31556a02adbe2c6bc962279414f9ba19d0"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf false) pf1) with bot in H.",
                        "VernacExtend",
                        "b733f8d88fd89f2582246ad5b2cdf4f9b5e61ce2"
                    ]
                },
                {
                    "command": [
                        "apply bot_join in H.",
                        "VernacExtend",
                        "a6aaec72c8e74900278a5a037b1eeaec7cce4058"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "assert (tree_height (exist (fun t : ShareTree => canonicalTree t) (Leaf b) pf1) <= 0) by (compute;omega).",
                        "VernacExtend",
                        "453b43f61e779e44bea845ca41084c23770ca072"
                    ]
                },
                {
                    "command": [
                        "assert (tree_height (exist (fun t : ShareTree => canonicalTree t) (Leaf b0) pf2) <= 0) by (compute;omega).",
                        "VernacExtend",
                        "24ef04357cc7b626132d8642f2107d467514d3fa"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := tree_height_lub_limit _ _ _ H H0).",
                        "VernacExtend",
                        "2d6ad010425489fd232e54464490c117305a19b7"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in H3.",
                        "VernacExtend",
                        "009aed681b5bf7878390422291392aff7e71e42a"
                    ]
                },
                {
                    "command": [
                        "clear - H3.",
                        "VernacExtend",
                        "1ca535424183962a58658c6a9f78c07e3db56ca5"
                    ]
                },
                {
                    "command": [
                        "unfold height in H3;simpl in H3;unfold tree_height,proj1_sig in H3.",
                        "VernacExtend",
                        "18c086c7778220f45f2d84617c7d54e951983ec6"
                    ]
                },
                {
                    "command": [
                        "simpl in H3.",
                        "VernacExtend",
                        "2a96f120ac764efacadc60b978d01343f60aafa0"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold countBLeafCT;simpl.",
                        "VernacExtend",
                        "74c414d898ec8207dc63e9f0dd0f8d1f5a9c88df"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
                        "VernacExtend",
                        "bc9215a423d068a7996cd12d68c6e27356fcac96"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H.",
                        "VernacExtend",
                        "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H.",
                        "VernacExtend",
                        "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf1) with top in H.",
                        "VernacExtend",
                        "bc9215a423d068a7996cd12d68c6e27356fcac96"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H.",
                        "VernacExtend",
                        "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H.",
                        "VernacExtend",
                        "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "apply join_comm in H.",
                        "VernacExtend",
                        "6430d4c65b40e6875fb2470579dbfa1c0a109213"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf2) with top in H.",
                        "VernacExtend",
                        "617b45bfdd3a93a578dd51c5ef632fe8ab6a62ea"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H.",
                        "VernacExtend",
                        "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H.",
                        "VernacExtend",
                        "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf false) pf2) with bot in H.",
                        "VernacExtend",
                        "af7c4daf2f362992d1bbe48003a3a0cc28e275da"
                    ]
                },
                {
                    "command": [
                        "apply bot_join in H.",
                        "VernacExtend",
                        "a6aaec72c8e74900278a5a037b1eeaec7cce4058"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "unfold countBLeafCT,proj1_sig;simpl.",
                        "VernacExtend",
                        "de3e2c0145898ec24a7c3ef70739feb5f084b2fb"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold bot;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "776e7c9934c6c2c973d5382d035a1df1ff33726c"
                    ]
                },
                {
                    "command": [
                        "apply join_comm in H.",
                        "VernacExtend",
                        "6430d4c65b40e6875fb2470579dbfa1c0a109213"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "replace (exist (fun t : ShareTree => canonicalTree t) (Leaf true) pf2) with top in H.",
                        "VernacExtend",
                        "617b45bfdd3a93a578dd51c5ef632fe8ab6a62ea"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H.",
                        "VernacExtend",
                        "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H.",
                        "VernacExtend",
                        "0b5aca679bc5e2d6c942112bb89496dc6da0da36"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "unfold top;f_equal;apply proof_irr.",
                        "VernacExtend",
                        "b3293e1052e563035d6fe43c01c96fc7dd88679f"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s1) as ds1; remember (decompose s2) as ds2; remember (decompose s3) as ds3; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; destruct ds3 as [s31 s32]; symmetry in Heqds1,Heqds2,Heqds3.",
                        "VernacExtend",
                        "3167bdc32b50069eac32c8099259d592dd476f4e"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s31) (s2:=s32);trivial.",
                        "VernacExtend",
                        "c812835e2bf655ed2a669da2234b9861bf79fc85"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_join with (t11:=s11) (t12:=s12) (t21:=s21) (t22:=s22) (t31:=s31) (t32:=s32)in H;trivial.",
                        "VernacExtend",
                        "1c749a171933987cac5fa1ad0748caeca12c36c2"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H1 H2].",
                        "VernacExtend",
                        "c7474c5d52e048046b184a41b5748899e80e4e65"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := IHn _ _ _ H1).",
                        "VernacExtend",
                        "f8c602422104c2e72cd407b0ed210dacaeac3e77"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := IHn _ _ _ H2).",
                        "VernacExtend",
                        "b67f3afa8ed5a27fcbae989c6f2511c88b2fdbe6"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "countBLeafCT_join_eq",
            "line_nb": 4842,
            "steps": [
                {
                    "command": [
                        "unfold height;simpl.",
                        "VernacExtend",
                        "e23d389d1c77a219343ba58844b37a2178bd1331"
                    ]
                },
                {
                    "command": [
                        "induction n;intros.",
                        "VernacExtend",
                        "e8b82b855d5905dc30933ce159f82ecc1428bcaa"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "apply tree_height_0 in H3.",
                        "VernacExtend",
                        "5ec33cfde2ccdab1ffa8b8f2f193928ec70b364e"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as [H3|H3];subst.",
                        "VernacExtend",
                        "46f0b8663fca9427902a3e369ec023aa836c4450"
                    ]
                },
                {
                    "command": [
                        "apply join_top in H.",
                        "VernacExtend",
                        "2a48981e5b9a1535acef17ff8571433a720714ba"
                    ]
                },
                {
                    "command": [
                        "destruct H;subst.",
                        "VernacExtend",
                        "cfced62c1f73763fa32f2f64f12dc4faf51d1289"
                    ]
                },
                {
                    "command": [
                        "compute;omega.",
                        "VernacExtend",
                        "438e8ca39271be0e1d89e8942dbfa12dd63962b9"
                    ]
                },
                {
                    "command": [
                        "apply bot_join in H;subst.",
                        "VernacExtend",
                        "f90d1d3deb1e20588a52a3204a19a548231f05f7"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "remember (decompose s1) as ds1; remember (decompose s2) as ds2; remember (decompose s3) as ds3; destruct ds1 as [s11 s12]; destruct ds2 as [s21 s22]; destruct ds3 as [s31 s32]; symmetry in Heqds1,Heqds2,Heqds3.",
                        "VernacExtend",
                        "3167bdc32b50069eac32c8099259d592dd476f4e"
                    ]
                },
                {
                    "command": [
                        "apply decompose_height_le with (s1:= s11) (s2:=s12)in H0;trivial.",
                        "VernacExtend",
                        "ff72bc766cc625928a40b8d89913eff4e1bb3052"
                    ]
                },
                {
                    "command": [
                        "apply decompose_height_le with (s1:= s21) (s2:=s22)in H1;trivial.",
                        "VernacExtend",
                        "515fa2f272317be24c3c26c23c4772cc416aff78"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [H2 H3]; destruct H1 as [H4 H5].",
                        "VernacExtend",
                        "d5cc623ea241f2c22de8fe554b5f4f2070fc8b86"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s11) (s2:=s12);trivial.",
                        "VernacExtend",
                        "177480b482f25e4361e2ee914ac13f40542052f0"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s21) (s2:=s22);trivial.",
                        "VernacExtend",
                        "3c67631d40e169cf2ec7b9fdcaa9a681c687f04e"
                    ]
                },
                {
                    "command": [
                        "rewrite countBLeafCT_decompose with (s1:=s31) (s2:=s32);trivial.",
                        "VernacExtend",
                        "c812835e2bf655ed2a669da2234b9861bf79fc85"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_join with (t11:=s11) (t12:=s12) (t21:=s21) (t22:=s22) (t31:=s31) (t32:=s32)in H;trivial.",
                        "VernacExtend",
                        "1c749a171933987cac5fa1ad0748caeca12c36c2"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H6 H7].",
                        "VernacExtend",
                        "2785cd644304d2d2dfcca4f33714fc9d2efce840"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := IHn _ _ _ H6 H2 H4).",
                        "VernacExtend",
                        "81168f0056ff3fd3588d2ed34508d0f7e60d9dac"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := IHn _ _ _ H7 H3 H5).",
                        "VernacExtend",
                        "15447c2fb343f169e94d272b58797be6c9e90fbb"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_nerr",
            "line_nb": 4870,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s) n).",
                        "VernacExtend",
                        "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold height in H;simpl in H.",
                        "VernacExtend",
                        "8b5c882e669027a49f1cb4f51d179e3c8f43c068"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_err",
            "line_nb": 4880,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s) n).",
                        "VernacExtend",
                        "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
                    ]
                },
                {
                    "command": [
                        "unfold height in H;simpl in H.",
                        "VernacExtend",
                        "8b5c882e669027a49f1cb4f51d179e3c8f43c068"
                    ]
                },
                {
                    "command": [
                        "elimtype False;omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_height_monotonic",
            "line_nb": 4888,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n1.",
                        "VernacExtend",
                        "c3143fb15f4e22691029772031c7e992281d98db"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "icase n2.",
                        "VernacExtend",
                        "ccd5cf6f8ecf62bed184ff80df1ebf78e13ae2b6"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : n1 <= n2) by omega.",
                        "VernacExtend",
                        "7803aa2dea9b14af2b80b4f015d261622da8385f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s) n1); icase (le_dec (tree_height s) n2).",
                        "VernacExtend",
                        "3958477e018e970b99281f7f6b131bcb295440af"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := countBLeafCT_mono_le _ _ s H1).",
                        "VernacExtend",
                        "72220c7b1cc2524123980cf3162a86bb133b44ea"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_lub",
            "line_nb": 4903,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s) n); icase (le_dec (tree_height (lub s s')) n).",
                        "VernacExtend",
                        "9cbe8e3c592a07202349fc61c2d89fdc6729978a"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := lub_upper1 s s').",
                        "VernacExtend",
                        "0965971e70e504b512a9b8f8bb1e702c1909c03f"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : s <> lub s s').",
                        "VernacExtend",
                        "08b5de68fd8dd9587695777cb5fa4847fc289862"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "apply lub_upper2.",
                        "VernacExtend",
                        "719c134a5ab6901ae588bda202544d5c526c245a"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := countBLeafCT_lt _ _ _ H2 H3 l0).",
                        "VernacExtend",
                        "30f71c99e727fd7f299d43a50ac4c9e7e8470b0e"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in H1.",
                        "VernacExtend",
                        "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
                    ]
                },
                {
                    "command": [
                        "revert H1.",
                        "VernacExtend",
                        "f960614533a2a55b448cbf376832532eaf449c34"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height (lub s s')) n);intro.",
                        "VernacExtend",
                        "e9d9a637244221798c6ed6ae6182218f265f2687"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_glb",
            "line_nb": 4921,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height (glb s s')) n); icase (le_dec (tree_height s) n).",
                        "VernacExtend",
                        "0492245c0b002706b3d70dcf18844b5ad0b39031"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := glb_lower1 s s').",
                        "VernacExtend",
                        "b369b4e782fe08d900b6d5aa8ecdc77222ab351d"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : glb s s' <> s).",
                        "VernacExtend",
                        "724712ba43b16cfb6e072bf9a9b9beba1bd50bdc"
                    ]
                },
                {
                    "command": [
                        "intro H3.",
                        "VernacExtend",
                        "c6ea07328dd3b3e09514a6b250aa3ceeb1e62693"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "apply glb_lower2.",
                        "VernacExtend",
                        "eec43869733b6bd6c1147d7619eaeac64edb95a2"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := countBLeafCT_lt _ _ _ H2 H3 l0).",
                        "VernacExtend",
                        "30f71c99e727fd7f299d43a50ac4c9e7e8470b0e"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in H0.",
                        "VernacExtend",
                        "a4a6a8421870dbf7255f8d031744eec32f12a941"
                    ]
                },
                {
                    "command": [
                        "revert H0.",
                        "VernacExtend",
                        "de3e4fca453928a41c450906d5d5626d573cfb55"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s) n).",
                        "VernacExtend",
                        "61c8fe57f7ed3c90c1c38c59c0ac20ef34a750ca"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "share_metric_dif_monotonic",
            "line_nb": 4940,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "7549fbb600c3af6072a6d21bdcba999a253a2e01"
                    ]
                },
                {
                    "command": [
                        "icase n0.",
                        "VernacExtend",
                        "fd2ba696caa99f0b129d4fbb5031b00bf463aa87"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : n <= n0) by omega.",
                        "VernacExtend",
                        "80fa88207e41b67eacc6f1caeb2d820413541f6d"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "icase (le_dec (tree_height s1) n); icase (le_dec (tree_height s2) n); icase (le_dec (tree_height s1) n0); icase (le_dec (tree_height s2) n0); simpl;try omega.",
                        "VernacExtend",
                        "fceec9e8f7c87500e4d34d179cac9a18bb79b0b7"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := countBLeafCT_mono_diff _ _ _ _ H3 H).",
                        "VernacExtend",
                        "83e0943d5f83afc1f98d4281951c3c07bd9f7dac"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold height in *;simpl in *.",
                        "VernacExtend",
                        "7a27ed62dd8e8cc5f4ee667ec76fb7d0665486aa"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold height in *;simpl in *.",
                        "VernacExtend",
                        "7a27ed62dd8e8cc5f4ee667ec76fb7d0665486aa"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_dec",
            "line_nb": 5007,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Ord.",
                        "VernacExtend",
                        "d6887636da3c91a386eaa0b75899507ccb70d265"
                    ]
                },
                {
                    "command": [
                        "apply shareTreeOrd_dec.",
                        "VernacExtend",
                        "9267490a111117c8be2794a13eea46858b1b8e48"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "height_top",
            "line_nb": 5012,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_bot",
            "line_nb": 5015,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_zero_eq",
            "line_nb": 5018,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "unfold bot.",
                        "VernacExtend",
                        "219ba0db17a375ffc83549c360f7fdc6200b973f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "unfold tree_height in H.",
                        "VernacExtend",
                        "6f0a5994900d304b7e37570ee9395dd2367747c9"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "elimtype False.",
                        "VernacExtend",
                        "193053c8983316978aeded05598d605cc4f35bde"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "add_join",
            "line_nb": 5038,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold add.",
                        "VernacExtend",
                        "11cf98bf231f22df486b46b3b6a1c38a94e859dd"
                    ]
                },
                {
                    "command": [
                        "icase (eq_dec (glb t1 t2) bot).",
                        "VernacExtend",
                        "911420e4d5c574ff50111a780b946712f722ecd1"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "split;auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "inv H;auto.",
                        "VernacExtend",
                        "e9bd05ad37c0a003cf8fcd49196ec009bd4adb97"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "destruct H;auto.",
                        "VernacExtend",
                        "95ae427bd4e09a5f31c59184b718811a23ecb36f"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "destruct H;tauto.",
                        "VernacExtend",
                        "2f14e8f2289aea21e930aa694b4171f63873e2e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_join",
            "line_nb": 5052,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold sub.",
                        "VernacExtend",
                        "09a336a2b822859bc335120602ae265ad23b7a0d"
                    ]
                },
                {
                    "command": [
                        "icase (eq_dec (glb t1 t2) t2).",
                        "VernacExtend",
                        "338efb03d1daae3b8b0a43196f176d6d22c9de01"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_assoc.",
                        "VernacExtend",
                        "3fde6022003f4830c8b8e15e693e56f6695285d9"
                    ]
                },
                {
                    "command": [
                        "replace (glb (comp t2) t2) with (glb t2 (comp t2)) by apply glb_commute.",
                        "VernacExtend",
                        "4b63e419253c2809f122d024b611c3b8ab99815c"
                    ]
                },
                {
                    "command": [
                        "rewrite comp2.",
                        "VernacExtend",
                        "741d8836b219ce289bee8338157ec007849bd04b"
                    ]
                },
                {
                    "command": [
                        "apply glb_bot.",
                        "VernacExtend",
                        "31e2e44b361dd8473cac239d0f57fd225a11b491"
                    ]
                },
                {
                    "command": [
                        "rewrite distrib2.",
                        "VernacExtend",
                        "32b45b89e4b12cf930149f7e51442efa1995b8c0"
                    ]
                },
                {
                    "command": [
                        "replace (lub (comp t2) t2) with (lub t2 (comp t2)) by apply lub_commute.",
                        "VernacExtend",
                        "0f72a3653ef6563bb602fd09dfe41ead65c486d5"
                    ]
                },
                {
                    "command": [
                        "rewrite comp1.",
                        "VernacExtend",
                        "038c4a07dd8a463e3722946a32d6bd565239a68b"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top.",
                        "VernacExtend",
                        "eeb42f4a6bdfd228c4be9a2cc654359c7339a28b"
                    ]
                },
                {
                    "command": [
                        "rewrite<- e.",
                        "VernacExtend",
                        "038d705295bc042ea4f7eab695069943e9f585f2"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "apply lub_absorb.",
                        "VernacExtend",
                        "e4ca310df7a3e1b9c597a23b3914d4684cfab770"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite distrib1.",
                        "VernacExtend",
                        "7725acef05a9aeeb4ab7f3b008905f729a4a5660"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite comp2.",
                        "VernacExtend",
                        "741d8836b219ce289bee8338157ec007849bd04b"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H.",
                        "VernacExtend",
                        "1a7bcd5a7b6933618ccd6a1faffd335a73c3263c"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : lub (glb t3 t2) (glb t3 (comp t2)) = glb t3 (comp t2)).",
                        "VernacExtend",
                        "ff2fde1b54ec0b531b700693ddc239d602f2328f"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute.",
                        "VernacExtend",
                        "0a05d65a403f58c7c4a10bc9f8a3fd339cc1cfbc"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite<- distrib1 in H1.",
                        "VernacExtend",
                        "232caf17124276f8d269a43c39132280e89f5470"
                    ]
                },
                {
                    "command": [
                        "rewrite comp1 in H1.",
                        "VernacExtend",
                        "8ad16b9da8e0f9a08330ee866d73b00ab4156f44"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H1.",
                        "VernacExtend",
                        "dffa833967f4d5bf1b63339c95725abd30b73f69"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 at 2.",
                        "VernacExtend",
                        "5862269d34c11d2c45e997646dc2ea020eaa5028"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "elimtype False;apply n.",
                        "VernacExtend",
                        "a6ad8a193aa618eeda1e78640c920d02cc8c8335"
                    ]
                },
                {
                    "command": [
                        "rewrite<- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute.",
                        "VernacExtend",
                        "bb4c622c49b9220b28be788a8847088215d049dd"
                    ]
                },
                {
                    "command": [
                        "rewrite distrib1.",
                        "VernacExtend",
                        "7725acef05a9aeeb4ab7f3b008905f729a4a5660"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot.",
                        "VernacExtend",
                        "c8786c53dcf7aa6e5e4d5e6cc1c0f4b981f990f4"
                    ]
                },
                {
                    "command": [
                        "apply glb_idem.",
                        "VernacExtend",
                        "610524aa6de79feb1245a782c1dfd3078b5c5101"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_share_height_no_increase",
            "line_nb": 5103,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "remember (tree_height sh) as n.",
                        "VernacExtend",
                        "e3b810ed8fc10ef0dd51dc3ced1c179480be2489"
                    ]
                },
                {
                    "command": [
                        "icase n.",
                        "VernacExtend",
                        "a82a505bbc5aa2491a6c2d7ecf87eb80b5a9bd4e"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqn.",
                        "VernacExtend",
                        "c79e4e7f9c935eaf7e6fd943ab765bcfccf5f6ea"
                    ]
                },
                {
                    "command": [
                        "apply height_zero_eq in Heqn.",
                        "VernacExtend",
                        "f2a66be693b71718a370b37ca91927c3943583b6"
                    ]
                },
                {
                    "command": [
                        "icase Heqn;subst; inv H;compute;omega.",
                        "VernacExtend",
                        "e89a628b8940f538a2c2884f16cfa76d221bda19"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqn.",
                        "VernacExtend",
                        "c79e4e7f9c935eaf7e6fd943ab765bcfccf5f6ea"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := decompose_height _ _ _ _ Heqn H).",
                        "VernacExtend",
                        "0532d2fd43a588d5a3091180f1f519d7a35c8fa4"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_top_rewrite",
            "line_nb": 5116,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_bot_rewrite",
            "line_nb": 5122,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bot.",
                        "VernacExtend",
                        "219ba0db17a375ffc83549c360f7fdc6200b973f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_basic_rewrite",
            "line_nb": 5128,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "left;apply tree_top_rewrite.",
                        "VernacExtend",
                        "e2c44085820d7ca7c9c599a3b61e9f66e0160fba"
                    ]
                },
                {
                    "command": [
                        "right;apply tree_bot_rewrite.",
                        "VernacExtend",
                        "273a16833de4e2d4cd4dd256170864088d5db0e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_case_rewrite",
            "line_nb": 5134,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct t0.",
                        "VernacExtend",
                        "487a81e74508747c56186a8fe1f20da05a726010"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "left;apply tree_basic_rewrite.",
                        "VernacExtend",
                        "aca28b3405628a8181b82e0fc39d4d868a840147"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "exists x1.",
                        "VernacExtend",
                        "41149f92e5f2a0109418d3e02971541f67fbd3df"
                    ]
                },
                {
                    "command": [
                        "exists x2.",
                        "VernacExtend",
                        "c66cfc490b972d4e27c8ead94cd5deb052231b69"
                    ]
                },
                {
                    "command": [
                        "exists c.",
                        "VernacExtend",
                        "683d4593ad0b3c7125e420e0670d5a4b0d3c38bc"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_basic",
            "line_nb": 5145,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold decompose,decompose_tree.",
                        "VernacExtend",
                        "dc4ee8bd3ea4dba818622466bb6791d2a0013ea6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_top",
            "line_nb": 5155,
            "steps": [
                {
                    "command": [
                        "apply decompose_basic.",
                        "VernacExtend",
                        "f12e9cad9fde1e3ae705b13ce0bc59e4c7b2b06c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_bot",
            "line_nb": 5158,
            "steps": [
                {
                    "command": [
                        "apply decompose_basic.",
                        "VernacExtend",
                        "f12e9cad9fde1e3ae705b13ce0bc59e4c7b2b06c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_Node",
            "line_nb": 5161,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold decompose.",
                        "VernacExtend",
                        "2db95cf2d92879209f3c332b6ab96b25ac4fda5f"
                    ]
                },
                {
                    "command": [
                        "unfold decompose_tree.",
                        "VernacExtend",
                        "2d95efd928797f66424a9b08e1f8f7a763a49c8e"
                    ]
                },
                {
                    "command": [
                        "unfold tree_decompose.",
                        "VernacExtend",
                        "2fb82aadd4d80809cef1d46f6649a97e7e43f0ce"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "identity_bot",
            "line_nb": 5173,
            "steps": [
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "specialize ( H bot s).",
                        "VernacExtend",
                        "c4375517b2f0071074cd79b16355c562a855adfc"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply glb_bot.",
                        "VernacExtend",
                        "31e2e44b361dd8473cac239d0f57fd225a11b491"
                    ]
                },
                {
                    "command": [
                        "apply lub_bot.",
                        "VernacExtend",
                        "9143ce4f15da365c263100b45b1f0543e2cb2003"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_commute in H0.",
                        "VernacExtend",
                        "9c8f9ff816d8a89fcb05ade96e3c1ab92bfc449b"
                    ]
                },
                {
                    "command": [
                        "rewrite lub_bot in H0.",
                        "VernacExtend",
                        "a733d8b51bbe7a6a894b11160891b2ef4c21c408"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_proof_replace",
            "line_nb": 5189,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "top_unrel",
            "line_nb": 5194,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold top.",
                        "VernacExtend",
                        "cefa5e7ba1e59fa59203bb2e084597f70a7db71f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bot_unrel",
            "line_nb": 5200,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold bot.",
                        "VernacExtend",
                        "219ba0db17a375ffc83549c360f7fdc6200b973f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_lub",
            "line_nb": 5206,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "11c5a0f10c8f24632d42bf152123c583d0fecf90"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
                        "VernacExtend",
                        "d1902807081df5275f7f389da7feb6af630f8d5b"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [? ?].",
                        "VernacExtend",
                        "2c09fffa3a23f0a9a50fd3d7d3264f34f5f4936e"
                    ]
                },
                {
                    "command": [
                        "split;apply exist_ext;rewrite mkCanon_union;congruence.",
                        "VernacExtend",
                        "825b2304970a722da25e44ffa503a643792799de"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_union (Node t11 t12) (Node t21 t22));intro.",
                        "VernacExtend",
                        "11c5a0f10c8f24632d42bf152123c583d0fecf90"
                    ]
                },
                {
                    "command": [
                        "rewrite mkCanon_union in H2.",
                        "VernacExtend",
                        "dedcb98adc093cb3d85f256e6aa103ce92d9c99e"
                    ]
                },
                {
                    "command": [
                        "rewrite mkCanon_union in H3.",
                        "VernacExtend",
                        "cb3e1bae4a3073531326e0a6fc11c2a7cef82122"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in H1;rewrite H1.",
                        "VernacExtend",
                        "0244cd355678d557b83a3ff1f1d854d52775c68b"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkCanon_glb",
            "line_nb": 5231,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold BAF.lub.",
                        "VernacExtend",
                        "72222c35d399d093dcddc6c9238bac9d2efa49f3"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect((Node t11 t12)) ((Node t21 t22)));intro.",
                        "VernacExtend",
                        "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H3.",
                        "VernacExtend",
                        "1a5bd25c47245138a7a03e032524fd4066f525ce"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_eq_split _ _ _ _ H3);intro.",
                        "VernacExtend",
                        "d1902807081df5275f7f389da7feb6af630f8d5b"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [? ?].",
                        "VernacExtend",
                        "2c09fffa3a23f0a9a50fd3d7d3264f34f5f4936e"
                    ]
                },
                {
                    "command": [
                        "split;apply exist_ext; simpl; rewrite mkCanon_intersect;congruence.",
                        "VernacExtend",
                        "df72f376d71fd339143e1c105b105571ba4da671"
                    ]
                },
                {
                    "command": [
                        "apply exist_ext.",
                        "VernacExtend",
                        "04869c9def673870f0220158e4e6618faccfd279"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "generalize (mkCanon_intersect (Node t11 t12) (Node t21 t22));intro.",
                        "VernacExtend",
                        "963f3be1b39c057a5218bd213dfca7564b5fe7c6"
                    ]
                },
                {
                    "command": [
                        "rewrite mkCanon_intersect in H2.",
                        "VernacExtend",
                        "d5f3c47169eaaa6b664b25b047d3abb8dd9cdc05"
                    ]
                },
                {
                    "command": [
                        "rewrite mkCanon_intersect in H3.",
                        "VernacExtend",
                        "9471788beabfa58dd63199a0466ff7310bceddf9"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in H1;rewrite H1.",
                        "VernacExtend",
                        "0244cd355678d557b83a3ff1f1d854d52775c68b"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_lub",
            "line_nb": 5256,
            "steps": [
                {
                    "command": [
                        "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
                        "VernacExtend",
                        "812b79a562ea96af4db197fa2a08592a266df50c"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t1 t11 t12);intro H11.",
                        "VernacExtend",
                        "b087360e9b5c442b60b0622598cfb41904f1c7ef"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t2 t21 t22);intro H21.",
                        "VernacExtend",
                        "01102d5c313419994f35f053eea35468b1d6ccb3"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t3 t31 t32);intro H31.",
                        "VernacExtend",
                        "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
                        "VernacExtend",
                        "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
                    ]
                },
                {
                    "command": [
                        "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
                        "VernacExtend",
                        "c437650f09b7a627ae31c68a8d4edf52c12738db"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
                        "VernacExtend",
                        "9657b220c6a032f534b1b435e912c267137e1c93"
                    ]
                },
                {
                    "command": [
                        "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
                        "VernacExtend",
                        "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_lub.",
                        "VernacExtend",
                        "8fdf013fdc6715b6584dca111846b548043e5f31"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_glb",
            "line_nb": 5267,
            "steps": [
                {
                    "command": [
                        "intros ? ? ? ? ? ? ? ? ? H1 H2 H3.",
                        "VernacExtend",
                        "812b79a562ea96af4db197fa2a08592a266df50c"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t1 t11 t12);intro H11.",
                        "VernacExtend",
                        "b087360e9b5c442b60b0622598cfb41904f1c7ef"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t2 t21 t22);intro H21.",
                        "VernacExtend",
                        "01102d5c313419994f35f053eea35468b1d6ccb3"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_rewrite t3 t31 t32);intro H31.",
                        "VernacExtend",
                        "edb59a41d613c7edfc6c6c0897e5b621855be0b6"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11 _]; destruct H21 as [H21 _]; destruct H31 as [H31 _].",
                        "VernacExtend",
                        "934a390f6d3e8a45bbf2d1ae2a0efe882fb54712"
                    ]
                },
                {
                    "command": [
                        "specialize ( H11 H1); specialize ( H21 H2); specialize ( H31 H3).",
                        "VernacExtend",
                        "c437650f09b7a627ae31c68a8d4edf52c12738db"
                    ]
                },
                {
                    "command": [
                        "generalize (canonTree_rewrite2 t11);intro H12; generalize (canonTree_rewrite2 t12);intro H13; generalize (canonTree_rewrite2 t21);intro H22; generalize (canonTree_rewrite2 t22);intro H23; generalize (canonTree_rewrite2 t31);intro H32; generalize (canonTree_rewrite2 t32);intro H33.",
                        "VernacExtend",
                        "9657b220c6a032f534b1b435e912c267137e1c93"
                    ]
                },
                {
                    "command": [
                        "rewrite H12,H13,H22,H23,H32,H33,H11,H21,H31.",
                        "VernacExtend",
                        "c4a9c0eccb49326ef801b74329b00e0980ce65cc"
                    ]
                },
                {
                    "command": [
                        "apply mkCanon_glb.",
                        "VernacExtend",
                        "cf41e875b0383f7ac95f4d9130e5fca3fa6a917b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_right_obmit",
            "line_nb": 5278,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "replace (tree_decompose a) with (decompose a) by trivial.",
                        "VernacExtend",
                        "75b1abf71424702bfad4ce90ad75d7a726fbe06b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "icase t1.",
                        "VernacExtend",
                        "e055cabe3107ded6bea02161ec5b25d83588817a"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "try tauto.",
                        "VernacExtend",
                        "0cc92a52db239479be3b46183fa1f5fb3e6cfd5f"
                    ]
                },
                {
                    "command": [
                        "repeat f_equal.",
                        "VernacExtend",
                        "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_left_obmit",
            "line_nb": 5291,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "replace (tree_decompose a) with (decompose a) by trivial.",
                        "VernacExtend",
                        "75b1abf71424702bfad4ce90ad75d7a726fbe06b"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "repeat f_equal.",
                        "VernacExtend",
                        "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_bot",
            "line_nb": 5379,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "induction x.",
                        "VernacExtend",
                        "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_Node with (c1:=c) (c2:=c0).",
                        "VernacExtend",
                        "f40521421cf998d31d844da3a33942ae0e755298"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_bot.",
                        "VernacExtend",
                        "c836a17c3b8722d7b4aa95667ad2521c13f9502f"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_top",
            "line_nb": 5391,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "induction x.",
                        "VernacExtend",
                        "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_Node with (c1:=c) (c2:=c0).",
                        "VernacExtend",
                        "f40521421cf998d31d844da3a33942ae0e755298"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_top.",
                        "VernacExtend",
                        "a577e3bc652b1ce5dbf2924e6742a4305f6ade9c"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_join",
            "line_nb": 5403,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite<- unrel_glb.",
                        "VernacExtend",
                        "fe404b831ebf01fd74d5f0d779acd0ab8155877d"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply unrel_bot.",
                        "VernacExtend",
                        "cd927bbd0bbb863d07327a1ca15cf47be2a6f245"
                    ]
                },
                {
                    "command": [
                        "rewrite<- unrel_lub.",
                        "VernacExtend",
                        "1e76d58d1eb6964bf2e70afed65d9c92fe200968"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrel_disjoint",
            "line_nb": 5414,
            "steps": [
                {
                    "command": [
                        "intro a.",
                        "VernacExtend",
                        "14896994838b4c124c1f1123678e1f3468f5e2ea"
                    ]
                },
                {
                    "command": [
                        "destruct a.",
                        "VernacExtend",
                        "3f53f61a7882a1bcc65ff705b5afc6c02a0dddf5"
                    ]
                },
                {
                    "command": [
                        "induction x;intros.",
                        "VernacExtend",
                        "967005fa252895ab470aa9876d40c37f363bf6d6"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "rewrite tree_top_rewrite in *.",
                        "VernacExtend",
                        "4a607d1b4afbb0b85fcb26fc652d13bbface47aa"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H0.",
                        "VernacExtend",
                        "249b2132b0b20fa96781ad372d3bd49cf3c7d454"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H0.",
                        "VernacExtend",
                        "8ce54f8d163db1304b12a67317567be4baeb6c4d"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply top_unrel.",
                        "VernacExtend",
                        "ed78aace6e6efe0707bd91fc58fb57c0ec2b8e0a"
                    ]
                },
                {
                    "command": [
                        "rewrite tree_bot_rewrite in *.",
                        "VernacExtend",
                        "d12131325551185255f327de42bb65b460fb8c8f"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_Node with (c1:=c)(c2:=c0).",
                        "VernacExtend",
                        "f40521421cf998d31d844da3a33942ae0e755298"
                    ]
                },
                {
                    "command": [
                        "remember (decompose a').",
                        "VernacExtend",
                        "7d4988648eed92cae7853a3ce2f55b1854b6bcc4"
                    ]
                },
                {
                    "command": [
                        "icase p.",
                        "VernacExtend",
                        "7265928ecd1563dd7e0cd295bd319b31056c8578"
                    ]
                },
                {
                    "command": [
                        "symmetry in Heqp.",
                        "VernacExtend",
                        "672a829a182c5fd0cceb35b039fef560742f36d3"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_Node x1 x2 (conj n (conj n0 (conj c c0))) c c0);intro.",
                        "VernacExtend",
                        "550c1a96a140c710b8b24ce69a7cbe5d0b0cead7"
                    ]
                },
                {
                    "command": [
                        "generalize decompose_bot;intro.",
                        "VernacExtend",
                        "fff45f109faa88e325e55d4c583f9f8dec882535"
                    ]
                },
                {
                    "command": [
                        "generalize (decompose_glb _ _ _ _ _ _ _ _ _ H1 Heqp H2);intro.",
                        "VernacExtend",
                        "4a6686103ec755b7949ec1713099d709ff0f1b56"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H0.",
                        "VernacExtend",
                        "dbae769fea2529c982ec8b4da339407464bc3cb4"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "icase x1.",
                        "VernacExtend",
                        "b8b4e1cbe4608005ab4d47831383899c8d46547c"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "rewrite tree_top_rewrite in H0.",
                        "VernacExtend",
                        "0eb6e1e44328e328dab76e52d4882661e6ce3cc7"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_commute in H0.",
                        "VernacExtend",
                        "249b2132b0b20fa96781ad372d3bd49cf3c7d454"
                    ]
                },
                {
                    "command": [
                        "rewrite glb_top in H0.",
                        "VernacExtend",
                        "8ce54f8d163db1304b12a67317567be4baeb6c4d"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply IHx2;trivial.",
                        "VernacExtend",
                        "2a4efcac64c68833936c7183b983c71c55212ac9"
                    ]
                },
                {
                    "command": [
                        "destruct n0.",
                        "VernacExtend",
                        "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
                    ]
                },
                {
                    "command": [
                        "inversion n0.",
                        "VernacExtend",
                        "1066af8025aa041fa75888620f1cce5ad6b8e853"
                    ]
                },
                {
                    "command": [
                        "icase x2.",
                        "VernacExtend",
                        "bcd0f33732012369c5e1e3dcf6222f010fea2811"
                    ]
                },
                {
                    "command": [
                        "icase b.",
                        "VernacExtend",
                        "7c9eb13f1d12495a8bc56f17c5d29b17a5985dca"
                    ]
                },
                {
                    "command": [
                        "apply IHx1;trivial.",
                        "VernacExtend",
                        "ec3cfcdf2bd2b884099a84f0546dc79862c99e23"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "inversion H5.",
                        "VernacExtend",
                        "c72c29a0eff26255c8a4846e1794fb6f7559049a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_nonzero",
            "line_nb": 5478,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct s.",
                        "VernacExtend",
                        "25b900e268e7851d959aa45edce33af62b3fca65"
                    ]
                },
                {
                    "command": [
                        "icase x.",
                        "VernacExtend",
                        "a3a02324b64cdcca858e774328c9995e2746731d"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_basic with (c1:=c) (c2:=c)in H.",
                        "VernacExtend",
                        "0b530beef2562672f678e04f23f758920493c91f"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "icase b;tauto.",
                        "VernacExtend",
                        "f309280eb78688da10827c001fc271dcc7657e8f"
                    ]
                },
                {
                    "command": [
                        "destruct c as [? [? [? ?]]].",
                        "VernacExtend",
                        "91b35c9e9e89936f86e31eb47804a072d7d5134f"
                    ]
                },
                {
                    "command": [
                        "rewrite decompose_Node with (c1 :=c) (c2:=c0)in H.",
                        "VernacExtend",
                        "35df2e5e666a06d0963276e1d61c8db1150f67ed"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "b84516fdc68c352f174305f1c391bddd57650d6f"
                    ]
                },
                {
                    "command": [
                        "split;intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "destruct n0.",
                        "VernacExtend",
                        "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv n0.",
                        "VernacExtend",
                        "fbd48752f13728de175cb8a5ee3f2ccc12e57d08"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "repeat intro.",
                        "VernacExtend",
                        "b1b5d9b3004bf4634299c208df98406e88278608"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "inv n0.",
                        "VernacExtend",
                        "fbd48752f13728de175cb8a5ee3f2ccc12e57d08"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "2721274aada33cbec3c1f62204a14a93dcf297fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_equal",
            "line_nb": 5501,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_avg2round in H.",
                        "VernacExtend",
                        "2003d72aa62da7b837ea8906df994aac871efd28"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_avg2round in H0.",
                        "VernacExtend",
                        "1cf3ca52ec5232eb5fe157cfb3811a4069679f9f"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "split;congruence.",
                        "VernacExtend",
                        "7f007b5ce3732856c1deed66b0edcc61cdb7f2d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_avg_bot",
            "line_nb": 5509,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply tree_avg_identity.",
                        "VernacExtend",
                        "56ba71456a5e467a8bb56c6f0a0b2f9ef9f771da"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Lsh_recompose",
            "line_nb": 5549,
            "steps": [
                {
                    "command": [
                        "compute;f_equal.",
                        "VernacExtend",
                        "b504d13f2142036db3b4e17dcafa76217ca63617"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsh_recompose",
            "line_nb": 5553,
            "steps": [
                {
                    "command": [
                        "compute;f_equal.",
                        "VernacExtend",
                        "b504d13f2142036db3b4e17dcafa76217ca63617"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_Rsh",
            "line_nb": 5557,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Rsh.",
                        "VernacExtend",
                        "7f6c0277332c6ab18f24d668bb89c2f1dd05cfb1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold rel;simpl.",
                        "VernacExtend",
                        "a82ad96569cac257fa36582a5a68a1e6d7cfefef"
                    ]
                },
                {
                    "command": [
                        "destruct (tree_decompose sh);simpl.",
                        "VernacExtend",
                        "aa0b1765241d6b6b9bf06243e50f20fe4a0fb8cd"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decompose_Lsh",
            "line_nb": 5567,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Lsh.",
                        "VernacExtend",
                        "3ea1762a790399f392b6d525cb4f28da8a3003f4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite unrel_equation.",
                        "VernacExtend",
                        "9970753558687ba8cc48e2c9612ef87c0b448c30"
                    ]
                },
                {
                    "command": [
                        "unfold rel;simpl.",
                        "VernacExtend",
                        "a82ad96569cac257fa36582a5a68a1e6d7cfefef"
                    ]
                },
                {
                    "command": [
                        "destruct (tree_decompose sh);simpl.",
                        "VernacExtend",
                        "aa0b1765241d6b6b9bf06243e50f20fe4a0fb8cd"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_Lsh",
            "line_nb": 5576,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct sh.",
                        "VernacExtend",
                        "33af23db925f05f4181a97d2c063549cdbd4e648"
                    ]
                },
                {
                    "command": [
                        "unfold Lsh.",
                        "VernacExtend",
                        "3ea1762a790399f392b6d525cb4f28da8a3003f4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite rel_top2.",
                        "VernacExtend",
                        "9f5067958669738360c6933421909eff444e54de"
                    ]
                },
                {
                    "command": [
                        "icase x;simpl.",
                        "VernacExtend",
                        "30a70991163ebff811284495e6dd81881141be58"
                    ]
                },
                {
                    "command": [
                        "icase b;simpl.",
                        "VernacExtend",
                        "1a1e28fecc40b77f0153335d65cc99499468e23a"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_Rsh",
            "line_nb": 5594,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct sh.",
                        "VernacExtend",
                        "33af23db925f05f4181a97d2c063549cdbd4e648"
                    ]
                },
                {
                    "command": [
                        "unfold Rsh.",
                        "VernacExtend",
                        "7f6c0277332c6ab18f24d668bb89c2f1dd05cfb1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite rel_top2.",
                        "VernacExtend",
                        "9f5067958669738360c6933421909eff444e54de"
                    ]
                },
                {
                    "command": [
                        "icase x;simpl.",
                        "VernacExtend",
                        "30a70991163ebff811284495e6dd81881141be58"
                    ]
                },
                {
                    "command": [
                        "icase b;simpl.",
                        "VernacExtend",
                        "1a1e28fecc40b77f0153335d65cc99499468e23a"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "compute.",
                        "VernacExtend",
                        "7a532ab38e33f38a5daf661f4883cc26dfdfdef7"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply proof_irr.",
                        "VernacExtend",
                        "10d46e46974f89c2b3a9463c04a06ee6c39cd171"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}