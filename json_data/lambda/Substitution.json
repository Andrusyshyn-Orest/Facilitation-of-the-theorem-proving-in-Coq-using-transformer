{
    "filename": "Substitution.v",
    "coq_project": "lambda",
    "vernac_cmds": [
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import Terms.",
            "VernacRequire",
            "84a2699be631f67e3ce8456022a355bf1cfc7856"
        ],
        [
            "Require Import Reduction.",
            "VernacRequire",
            "b4f31534e0a3ec0c7960d4eda541335d22352b95"
        ],
        [
            "Require Import Redexes.",
            "VernacRequire",
            "64724c7a420c41e5e7652fe4ce5703399964b229"
        ],
        [
            "Require Import Test.",
            "VernacRequire",
            "5d9a9d7838cb3bc0d54a1d604cb6990cc3adaa06"
        ],
        [
            "Fixpoint lift_rec_r (L : redexes) : nat -> nat -> redexes := fun k n : nat => match L with | Var i => Var (relocate i k n) | Fun M => Fun (lift_rec_r M (S k) n) | Ap b M N => Ap b (lift_rec_r M k n) (lift_rec_r N k n) end.",
            "VernacFixpoint",
            "dbd6611da250ae622af33bfd8c23966d5a10a2e8"
        ],
        [
            "Definition lift_r (n : nat) (N : redexes) := lift_rec_r N 0 n.",
            "VernacDefinition",
            "fda63743f5bbf427af9805d0dcb369d709f12225"
        ],
        [
            "Definition insert_Var (N : redexes) (i k : nat) := match compare k i with | inleft (left _) => Var (pred i) | inleft _ => lift_r k N | _ => Var i end.",
            "VernacDefinition",
            "df6c693fa44510eb96938f56ce046e120933cfab"
        ],
        [
            "Fixpoint subst_rec_r (L : redexes) : redexes -> nat -> redexes := fun (N : redexes) (k : nat) => match L with | Var i => insert_Var N i k | Fun M => Fun (subst_rec_r M N (S k)) | Ap b M M' => Ap b (subst_rec_r M N k) (subst_rec_r M' N k) end.",
            "VernacFixpoint",
            "53cdb34741c234d8b18123e3d2226818cf06e87d"
        ],
        [
            "Definition subst_r (N M : redexes) := subst_rec_r M N 0.",
            "VernacDefinition",
            "414251975556d16aad8e445b71039f816f2289fc"
        ],
        [
            "Lemma lift_le : forall n i k : nat, k <= i -> lift_rec_r (Var i) k n = Var (n + i).",
            "VernacStartTheoremProof",
            "887d18df650ba77bf103319680d76769288c60a9"
        ],
        [
            "simpl in |- *; unfold relocate in |- *.",
            "VernacExtend",
            "ee4a14dfe154122c7df3a593e9cd1a8e464fd041"
        ],
        [
            "intros; elim (test k i); intro P; trivial with arith.",
            "VernacExtend",
            "3d731a52362aa5fd726dffc5d86306261fbb2d8e"
        ],
        [
            "absurd (k > i); trivial with arith.",
            "VernacExtend",
            "6d744002658de6fd1eafee26728fc3930396af36"
        ],
        [
            "apply le_not_gt; trivial with arith.",
            "VernacExtend",
            "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_gt : forall n i k : nat, k > i -> lift_rec_r (Var i) k n = Var i.",
            "VernacStartTheoremProof",
            "d2afacd79deaefc515e1b9154b12733b34624dae"
        ],
        [
            "simpl in |- *; unfold relocate in |- *.",
            "VernacExtend",
            "ee4a14dfe154122c7df3a593e9cd1a8e464fd041"
        ],
        [
            "intros; elim (test k i); intro P; trivial with arith.",
            "VernacExtend",
            "3d731a52362aa5fd726dffc5d86306261fbb2d8e"
        ],
        [
            "absurd (k > i); trivial with arith.",
            "VernacExtend",
            "6d744002658de6fd1eafee26728fc3930396af36"
        ],
        [
            "apply le_not_gt; trivial with arith.",
            "VernacExtend",
            "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift1 : forall (U : redexes) (j i k : nat), lift_rec_r (lift_rec_r U i j) (j + i) k = lift_rec_r U i (j + k).",
            "VernacStartTheoremProof",
            "f1fd12f612f19398274740d405342e69458ab11c"
        ],
        [
            "simple induction U; simpl in |- *; intros.",
            "VernacExtend",
            "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
        ],
        [
            "unfold relocate in |- *; elim (test i n); simpl in |- *.",
            "VernacExtend",
            "b2bdbb8fb6703f77448a21cfd5bcb8f59ba09a41"
        ],
        [
            "elim (test (j + i) (j + n)); simpl in |- *; intros.",
            "VernacExtend",
            "d22886e51e10041ceec4a12b44fdff482fd9311a"
        ],
        [
            "elim plus_permute; elim plus_assoc; trivial with arith.",
            "VernacExtend",
            "7ccfe9670fdf4719619aec5e712f947cb3259156"
        ],
        [
            "absurd (i > n); auto with arith.",
            "VernacExtend",
            "2ae3f5f40c613a7b77d407513571442ea65d0a9b"
        ],
        [
            "apply plus_gt_reg_l with j; trivial with arith.",
            "VernacExtend",
            "61fe14e9eb4965ae472e40a5c69f62f37d4f740f"
        ],
        [
            "elim (test (j + i) n); simpl in |- *; intros; trivial with arith.",
            "VernacExtend",
            "bcad307500518fe5bc56e0436b8bcd5af1a34776"
        ],
        [
            "absurd (i <= n); auto with arith.",
            "VernacExtend",
            "15b9d1dfbf09e5011617c05cb112168363bc1abc"
        ],
        [
            "apply le_trans with (j + i); trivial with arith.",
            "VernacExtend",
            "666ea9e4b127ea3378888949bf3d8c7e87e4f9ac"
        ],
        [
            "rewrite (plus_n_Sm j i); elim H; trivial with arith.",
            "VernacExtend",
            "5cd05404a8c72f9dcf06eaaebe3e2933094e1732"
        ],
        [
            "elim H; elim H0; trivial with arith.",
            "VernacExtend",
            "a2e63bec18fe6bdb0f08196d1c2f31afad4760b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_lift_rec : forall (U : redexes) (k p n i : nat), i <= n -> lift_rec_r (lift_rec_r U i p) (p + n) k = lift_rec_r (lift_rec_r U n k) i p.",
            "VernacStartTheoremProof",
            "01a2d9bfbe78d355f14c36574169483eb955a24a"
        ],
        [
            "simple induction U; simpl in |- *; intros.",
            "VernacExtend",
            "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
        ],
        [
            "unfold relocate in |- *.",
            "VernacExtend",
            "02aa863e01ce95c379560dadd716fdc3a77e9e26"
        ],
        [
            "elim (test n0 n); elim (test i n); simpl in |- *.",
            "VernacExtend",
            "8d22ed3285ff189900b5f9de9ff7ef16130f57f8"
        ],
        [
            "elim (test (p + n0) (p + n)); elim (test i (k + n)); simpl in |- *; intros.",
            "VernacExtend",
            "986e7863e25313c5110d9a2b5c4d070318589b73"
        ],
        [
            "rewrite plus_permute; trivial with arith.",
            "VernacExtend",
            "5854b38ba756333b682d6ccf59d07999aa14fa69"
        ],
        [
            "absurd (i > n); auto with arith.",
            "VernacExtend",
            "2ae3f5f40c613a7b77d407513571442ea65d0a9b"
        ],
        [
            "apply gt_le_trans with (k + n); trivial with arith.",
            "VernacExtend",
            "64ca8f0fe46524f8bac444a288fa2f07c55fee5d"
        ],
        [
            "absurd (n0 > n); auto with arith.",
            "VernacExtend",
            "21d548019e9dc3f409b91f3fd2580c8a71ac3c74"
        ],
        [
            "apply plus_gt_reg_l with p; trivial with arith.",
            "VernacExtend",
            "8392dac88e32df8c21931defc82861af5c110674"
        ],
        [
            "absurd (n0 > n); auto with arith.",
            "VernacExtend",
            "21d548019e9dc3f409b91f3fd2580c8a71ac3c74"
        ],
        [
            "apply plus_gt_reg_l with p; trivial with arith.",
            "VernacExtend",
            "8392dac88e32df8c21931defc82861af5c110674"
        ],
        [
            "intros; absurd (i > n); trivial with arith.",
            "VernacExtend",
            "3397c3136ed86e0e81fd71b566b76d2b79285639"
        ],
        [
            "apply le_not_gt; apply le_trans with n0; trivial with arith.",
            "VernacExtend",
            "c8364f89d88fb9815ddf78a94d84839d98169310"
        ],
        [
            "intros; elim (test (p + n0) (p + n)); simpl in |- *; intros; trivial with arith.",
            "VernacExtend",
            "4d89c61b9a89c2d94b4088316a0b5e4240108547"
        ],
        [
            "absurd (n0 > n); trivial with arith.",
            "VernacExtend",
            "bb566ac8b1012555e926002f3a706e5ededdb048"
        ],
        [
            "apply le_not_gt; apply (fun p n m : nat => plus_le_reg_l n m p) with p; trivial with arith.",
            "VernacExtend",
            "72bfb650b9931fdae882695c235f692861fac0ae"
        ],
        [
            "intros; elim (test (p + n0) n); simpl in |- *; intros; trivial with arith.",
            "VernacExtend",
            "b61a34c922a21c7d10e41d4436502eec448223f9"
        ],
        [
            "absurd (n0 > n); trivial with arith.",
            "VernacExtend",
            "bb566ac8b1012555e926002f3a706e5ededdb048"
        ],
        [
            "apply le_not_gt; apply le_trans with (p + n0); trivial with arith.",
            "VernacExtend",
            "14bd29dc40bf7cb2fb6ebcf22c54397d044fe756"
        ],
        [
            "rewrite (plus_n_Sm p n); rewrite H; trivial with arith.",
            "VernacExtend",
            "04f9cf46561913106feb3de214a1dd9ad22ac066"
        ],
        [
            "elim (plus_n_Sm k n); auto with arith.",
            "VernacExtend",
            "3de7d058d7ef70bdcb99cfe5462d717e3cb8ac3e"
        ],
        [
            "rewrite H; trivial with arith.",
            "VernacExtend",
            "728119c818ab9bd23a5493cd1fcd2ca7353bb06c"
        ],
        [
            "rewrite H0; trivial with arith.",
            "VernacExtend",
            "ee7645a941b74ddeff5545529ed90e359c3c887b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_lift : forall (U : redexes) (k p n : nat), lift_rec_r (lift_r p U) (p + n) k = lift_r p (lift_rec_r U n k).",
            "VernacStartTheoremProof",
            "48dbf121ba9d3772d087d3ece6235b7ade86031f"
        ],
        [
            "unfold lift_r in |- *; intros; apply lift_lift_rec; trivial with arith.",
            "VernacExtend",
            "0809b739101c5c32648942acd4f952d68ed609e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma liftrecO : forall (U : redexes) (n : nat), lift_rec_r U n 0 = U.",
            "VernacStartTheoremProof",
            "245cf4a2ceeac58606c67adb640ab2485b2ab51f"
        ],
        [
            "simple induction U; simpl in |- *; intros.",
            "VernacExtend",
            "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
        ],
        [
            "unfold relocate in |- *; elim (test n0 n); trivial with arith.",
            "VernacExtend",
            "be9349c9027b748eb7854119545c71461e1e651b"
        ],
        [
            "rewrite H; trivial with arith.",
            "VernacExtend",
            "728119c818ab9bd23a5493cd1fcd2ca7353bb06c"
        ],
        [
            "rewrite H; rewrite H0; trivial with arith.",
            "VernacExtend",
            "08205941dd5cf3bc5b91c86853d1c7a6b9537304"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma liftO : forall U : redexes, lift_r 0 U = U.",
            "VernacStartTheoremProof",
            "1527660a3fa2ee2842c6b8ad53851b73b5f1f55f"
        ],
        [
            "unfold lift_r in |- *; intro U; apply liftrecO.",
            "VernacExtend",
            "bd25eecc00bcc330480905a26fef8c0be571f525"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_rec_lift_rec : forall (U : redexes) (n p k i : nat), k <= i + n -> i <= k -> lift_rec_r (lift_rec_r U i n) k p = lift_rec_r U i (p + n).",
            "VernacStartTheoremProof",
            "c7b5ef535f566f5f9cad60a470214cbfe93f5fd9"
        ],
        [
            "simple induction U; simpl in |- *; intros.",
            "VernacExtend",
            "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
        ],
        [
            "unfold relocate in |- *; elim (test i n); intro P.",
            "VernacExtend",
            "82b55623a00bbc438e674762012288712f0b6864"
        ],
        [
            "elim (test k (n0 + n)); intro Q.",
            "VernacExtend",
            "0d92b8af9406c9c61d1a1e0e0224da8c3b6e323c"
        ],
        [
            "rewrite plus_assoc_reverse; trivial with arith.",
            "VernacExtend",
            "f76df8e3e4962643da35a7d2fc18deb93b675d96"
        ],
        [
            "absurd (k > n0 + n); trivial with arith.",
            "VernacExtend",
            "2dcb364ad72e38c4ddffb4969bbfc08e2524eea3"
        ],
        [
            "apply le_not_gt; apply le_trans with (i + n0); trivial with arith.",
            "VernacExtend",
            "9f93109e384e4f0f7e12d67defc0416a5439857d"
        ],
        [
            "replace (i + n0) with (n0 + i); auto with arith; apply plus_le_compat_l; trivial with arith.",
            "VernacExtend",
            "2877c58b0f61a5f2523465ab9af75fcd599298a2"
        ],
        [
            "elim (test k n); intro Q; trivial with arith.",
            "VernacExtend",
            "790aade14b4df33d4e83743bfa539c1f2bb8eccf"
        ],
        [
            "absurd (i > k).",
            "VernacExtend",
            "2dc01ade2fc9810cf7e1c880fe785721d495925e"
        ],
        [
            "apply le_not_gt; trivial with arith.",
            "VernacExtend",
            "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
        ],
        [
            "apply gt_le_trans with n; trivial with arith.",
            "VernacExtend",
            "83cd4b15aaa073d2344a7288e398146236406b66"
        ],
        [
            "rewrite H; trivial with arith; simpl in |- *; apply le_n_S; trivial with arith.",
            "VernacExtend",
            "cf307168160805bf215edcfbfbeb28569fddfbb4"
        ],
        [
            "rewrite H; trivial with arith; rewrite H0; trivial with arith.",
            "VernacExtend",
            "91dc7a2a5f74665e9bf087f067bed9d1947dc135"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_rec_lift : forall (U : redexes) (n p k i : nat), k <= n -> lift_rec_r (lift_r n U) k p = lift_r (p + n) U.",
            "VernacStartTheoremProof",
            "0e0390b3c14fc5bd3841f97bd5254e2d9137add5"
        ],
        [
            "unfold lift_r in |- *; intros; rewrite lift_rec_lift_rec; trivial with arith.",
            "VernacExtend",
            "a04cbf552c1b80f74794fef30cf36fa8994644ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_eq : forall (U : redexes) (n : nat), subst_rec_r (Var n) U n = lift_r n U.",
            "VernacStartTheoremProof",
            "4385927064cd791dc79714430cbe85dedff89566"
        ],
        [
            "simpl in |- *; unfold insert_Var in |- *.",
            "VernacExtend",
            "77351aedbc170c489d7f1aee642ed4b9a15746b1"
        ],
        [
            "intros; elim (compare n n); intro P.",
            "VernacExtend",
            "6b15d048eef466f7e3aaff4ea5c558accf33ea28"
        ],
        [
            "elim P; intro Q; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "bfe3b8210e6c3a063558654465210605086aea11"
        ],
        [
            "absurd (n > n); trivial with arith.",
            "VernacExtend",
            "4ce392f6e144218a48e3553ace38467d02f99262"
        ],
        [
            "absurd (n > n); trivial with arith.",
            "VernacExtend",
            "4ce392f6e144218a48e3553ace38467d02f99262"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_gt : forall (U : redexes) (n p : nat), n > p -> subst_rec_r (Var n) U p = Var (pred n).",
            "VernacStartTheoremProof",
            "273ab5cff89642c3819905567da30a2f270a429d"
        ],
        [
            "simpl in |- *; unfold insert_Var in |- *.",
            "VernacExtend",
            "77351aedbc170c489d7f1aee642ed4b9a15746b1"
        ],
        [
            "intros; elim (compare p n); intro P.",
            "VernacExtend",
            "50d7cf733f3b2065515bde6da42147bab2369bf9"
        ],
        [
            "elim P; intro Q; trivial with arith.",
            "VernacExtend",
            "8e2cc4eba4897d81b3f59dab81ff8fa9ffb16305"
        ],
        [
            "absurd (n > p); trivial with arith; rewrite Q; trivial with arith.",
            "VernacExtend",
            "cb494a9d5d668f9d171376d814dca0ab86fc1646"
        ],
        [
            "absurd (n > p); auto with arith.",
            "VernacExtend",
            "d63e4f4c2a4d73886795323b1cd21d98d5d8f132"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_lt : forall (U : redexes) (n p : nat), p > n -> subst_rec_r (Var n) U p = Var n.",
            "VernacStartTheoremProof",
            "d996a1a529a06c2e3caa355857331adacee29ac3"
        ],
        [
            "simpl in |- *; unfold insert_Var in |- *.",
            "VernacExtend",
            "77351aedbc170c489d7f1aee642ed4b9a15746b1"
        ],
        [
            "intros; elim (compare p n); intro P; trivial with arith.",
            "VernacExtend",
            "a8f74219cd4b06838f75823f66a271049f82d723"
        ],
        [
            "absurd (p > n); trivial with arith; elim P; intro Q; auto with arith.",
            "VernacExtend",
            "c090abf4df9cf179f06ffcf1ff81b001e9977afe"
        ],
        [
            "rewrite Q; trivial with arith.",
            "VernacExtend",
            "36c5997549fe47106bf3512d7c31c8c486b3983b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_rec_subst_rec : forall (U V : redexes) (k p n : nat), lift_rec_r (subst_rec_r V U p) (p + n) k = subst_rec_r (lift_rec_r V (S (p + n)) k) (lift_rec_r U n k) p.",
            "VernacStartTheoremProof",
            "dafd7d9204d0bb169c775d11b09a4ede293ad6fc"
        ],
        [
            "simple induction V.",
            "VernacExtend",
            "5bd6005b892f0db422f0d1b11f3b1522f82d4667"
        ],
        [
            "2: simpl in |- *; intros; replace (S (p + n)) with (S p + n); trivial with arith.",
            "VernacExtend",
            "8d6326cb48efbdca62bc094f4a9290d1917b9e60"
        ],
        [
            "2: elim H; trivial with arith.",
            "VernacExtend",
            "67f51ea402fd215a6dfc4d608b8ad5c80b02e7a8"
        ],
        [
            "2: simpl in |- *; intros; elim H; elim H0; trivial with arith.",
            "VernacExtend",
            "a6016d5c169be2fffa1923025e1fa376a480a885"
        ],
        [
            "intros; simpl in |- *.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold insert_Var, relocate in |- *.",
            "VernacExtend",
            "69daa214db96c3bbe2cc6c0f8cdecf90487165e3"
        ],
        [
            "elim (compare p n); intro P.",
            "VernacExtend",
            "bf71e30a945b4b87955fef84c0cd8085e2aaf61d"
        ],
        [
            "elim P; intro P1.",
            "VernacExtend",
            "561a183605b34515717ec33551af4868b912302f"
        ],
        [
            "cut (n = S (pred n)).",
            "VernacExtend",
            "0e87e55e7bd445ae7a757ac8a6e70f60f2791cb3"
        ],
        [
            "2: apply S_pred with p; trivial with arith.",
            "VernacExtend",
            "76fbcf8dae0eec34ee4f916f363259b6a727c97d"
        ],
        [
            "intro E; elim (test (S (p + n0)) n); intro Q.",
            "VernacExtend",
            "6fa4baf09a88c0850b96d0bfa425e8ecbac1a910"
        ],
        [
            "elim (compare p (k + n)); intro R.",
            "VernacExtend",
            "229d795bd0e8497513cf8da69fca2f976f59dc67"
        ],
        [
            "elim R; intro R1; simpl in |- *.",
            "VernacExtend",
            "627aae68dbd34bb0f777495067257eba05bfe901"
        ],
        [
            "unfold relocate in |- *.",
            "VernacExtend",
            "02aa863e01ce95c379560dadd716fdc3a77e9e26"
        ],
        [
            "rewrite E; simpl in |- *.",
            "VernacExtend",
            "b0c85b9de4331f0f4070ad90d4492369b54d1fab"
        ],
        [
            "elim (test (p + n0) (pred n)); intro S.",
            "VernacExtend",
            "177904a0a474d3a08a0b7907d6e1adf8c7905391"
        ],
        [
            "elim (plus_n_Sm k (pred n)); simpl in |- *; trivial with arith.",
            "VernacExtend",
            "715d4a91a09c6e717f391605600ea19b35e9738d"
        ],
        [
            "absurd (p + n0 > pred n); trivial with arith.",
            "VernacExtend",
            "0a55eeb5159a0735cc5df1ef8fba112e9a39bc2c"
        ],
        [
            "apply le_not_gt; apply le_S_n; elim E; trivial with arith.",
            "VernacExtend",
            "b53d2d4b294a7455e1b5a70e17f4f76cb5616b04"
        ],
        [
            "absurd (n > p); trivial with arith.",
            "VernacExtend",
            "f599c6a7468e29367222924d38a0c11f145c2af9"
        ],
        [
            "apply le_not_gt; rewrite R1; trivial with arith.",
            "VernacExtend",
            "667be749242c7fe54e136e039c06fa65e4401721"
        ],
        [
            "absurd (p > n); auto with arith.",
            "VernacExtend",
            "5a9efe45b1c4a9766fdeadc1819bdc83b814c235"
        ],
        [
            "apply gt_le_trans with (k + n); trivial with arith.",
            "VernacExtend",
            "64ca8f0fe46524f8bac444a288fa2f07c55fee5d"
        ],
        [
            "simpl in |- *; unfold relocate in |- *.",
            "VernacExtend",
            "ee4a14dfe154122c7df3a593e9cd1a8e464fd041"
        ],
        [
            "elim (compare p n); intro R.",
            "VernacExtend",
            "afceb5bf24d84412da82b7b1b2e79a7956ef2639"
        ],
        [
            "elim R; intro R1.",
            "VernacExtend",
            "f430716b83c14de007713ba145c10b065901982b"
        ],
        [
            "elim (test (p + n0) (pred n)); intro C.",
            "VernacExtend",
            "afe3f8a9305f143d5be9f5ec75ae4f3e99b54b8d"
        ],
        [
            "absurd (S (p + n0) > n); trivial with arith.",
            "VernacExtend",
            "2f8e9bf6cb20b7fa178b2aabd5c1230513ed0a79"
        ],
        [
            "apply le_not_gt; rewrite E; auto with arith.",
            "VernacExtend",
            "70f186c76929b9cf9f65ed1c3d5ef17e213e93d3"
        ],
        [
            "trivial with arith.",
            "VernacExtend",
            "3ab1b3d9f928fee056024c7b7fb73d779e628dff"
        ],
        [
            "absurd (n > p); trivial with arith.",
            "VernacExtend",
            "f599c6a7468e29367222924d38a0c11f145c2af9"
        ],
        [
            "rewrite R1; trivial with arith.",
            "VernacExtend",
            "51fe44f5d3a47f6aa815ff801839eca67cb5b88b"
        ],
        [
            "absurd (n > p); auto with arith.",
            "VernacExtend",
            "d63e4f4c2a4d73886795323b1cd21d98d5d8f132"
        ],
        [
            "rewrite P1.",
            "VernacExtend",
            "3ee0ca492e994dedb2d0aac1e018c744414cbdb7"
        ],
        [
            "elim (test (S (n + n0)) n); intro Q.",
            "VernacExtend",
            "fad140f88d457861cb8c8f07337fd28e8081a6bd"
        ],
        [
            "absurd (S (n + n0) <= n); auto with arith.",
            "VernacExtend",
            "526cdaba20b77c57897b50218de35d59c3cc6cef"
        ],
        [
            "elim (compare n n); intro R.",
            "VernacExtend",
            "604999adbd6e276f7487e3e8645ee675403c2dac"
        ],
        [
            "elim R; intro R1.",
            "VernacExtend",
            "f430716b83c14de007713ba145c10b065901982b"
        ],
        [
            "absurd (n < n); trivial with arith.",
            "VernacExtend",
            "6f25c34d1ae831d15f9fe76e81016817d8d6bdc8"
        ],
        [
            "apply lift_lift; trivial with arith.",
            "VernacExtend",
            "30655767471b813726cfb9957fc04f8e9bf62563"
        ],
        [
            "absurd (n > n); trivial with arith.",
            "VernacExtend",
            "4ce392f6e144218a48e3553ace38467d02f99262"
        ],
        [
            "elim (test (S (p + n0)) n); intro Q.",
            "VernacExtend",
            "cbdfa6ddb2e912264dd6bd0387ea1aef9647d7f4"
        ],
        [
            "absurd (n > p); auto with arith.",
            "VernacExtend",
            "d63e4f4c2a4d73886795323b1cd21d98d5d8f132"
        ],
        [
            "apply gt_le_trans with (p + n0); auto with arith.",
            "VernacExtend",
            "7a10da346364bf337dab51a79e05d83030b365e7"
        ],
        [
            "elim (compare p n); intro R.",
            "VernacExtend",
            "afceb5bf24d84412da82b7b1b2e79a7956ef2639"
        ],
        [
            "elim R; intro R1.",
            "VernacExtend",
            "f430716b83c14de007713ba145c10b065901982b"
        ],
        [
            "absurd (p > n); auto with arith.",
            "VernacExtend",
            "5a9efe45b1c4a9766fdeadc1819bdc83b814c235"
        ],
        [
            "absurd (p > n); trivial with arith.",
            "VernacExtend",
            "b1858bc72d8d93643959f85ee8912b26c42fd8be"
        ],
        [
            "rewrite R1; trivial with arith.",
            "VernacExtend",
            "51fe44f5d3a47f6aa815ff801839eca67cb5b88b"
        ],
        [
            "apply lift_gt.",
            "VernacExtend",
            "01910f54bedcdc730559a6e4f21e7f19fe6aa1e7"
        ],
        [
            "apply le_gt_trans with p; trivial with arith.",
            "VernacExtend",
            "15ceca211651cfb0bb2546d622db28487e45d6d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_subst : forall (U V : redexes) (k n : nat), lift_rec_r (subst_r U V) n k = subst_r (lift_rec_r U n k) (lift_rec_r V (S n) k).",
            "VernacStartTheoremProof",
            "4a08d04c92ab0b28af1de8bf3d38b33821b09525"
        ],
        [
            "unfold subst_r in |- *; intros.",
            "VernacExtend",
            "1a1da8417a3fd173c113fb996cb7f58487290c7a"
        ],
        [
            "replace (S n) with (S (0 + n)).",
            "VernacExtend",
            "de86e14d4c7dee58fae141d55ae635ae7a214238"
        ],
        [
            "elim lift_rec_subst_rec; trivial with arith.",
            "VernacExtend",
            "5d74e17b43641be2d7c009c336df0b8f2ab4fa7f"
        ],
        [
            "simpl in |- *; trivial with arith.",
            "VernacExtend",
            "b4ae9832542dabc64882f33a73e091bafd36734a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_lift_rec1 : forall (U V : redexes) (n p k : nat), k <= n -> subst_rec_r (lift_rec_r U k p) V (p + n) = lift_rec_r (subst_rec_r U V n) k p.",
            "VernacStartTheoremProof",
            "e67e38ec42fe21f1e81252bc7a34b071386c4556"
        ],
        [
            "simple induction U; intros; simpl in |- *.",
            "VernacExtend",
            "bdc0e7bc7b8361d22d6431c5007ec57068bfa9e8"
        ],
        [
            "2: rewrite plus_n_Sm; rewrite H; trivial with arith.",
            "VernacExtend",
            "42cfc168f2eca1e5201ccbbf82c46200d60cd68c"
        ],
        [
            "2: apply le_n_S; trivial with arith.",
            "VernacExtend",
            "810edb5663d4596af867341dd176724c70c557c5"
        ],
        [
            "2: rewrite H; trivial with arith; rewrite H0; trivial with arith.",
            "VernacExtend",
            "f86221abf242c1e589a8d6d064f9ca4d81226409"
        ],
        [
            "unfold relocate, insert_Var in |- *; elim (test k n); intro P.",
            "VernacExtend",
            "ae0d2ac00db0f59ac41aebb40e0b0e923e5f4eb8"
        ],
        [
            "elim (compare n0 n); elim (compare (p + n0) (p + n)); intros Q R.",
            "VernacExtend",
            "32c6de5a818c40f059e12b593547dc95b34a069d"
        ],
        [
            "elim Q; elim R; intros R1 Q1.",
            "VernacExtend",
            "9cda82d7a2ead3d031842aa8b51737a2c7b3fa5b"
        ],
        [
            "cut (n = S (pred n)).",
            "VernacExtend",
            "0e87e55e7bd445ae7a757ac8a6e70f60f2791cb3"
        ],
        [
            "2: apply S_pred with n0; trivial with arith.",
            "VernacExtend",
            "22333714e7f7ca178e638a7fc813b98727f92afe"
        ],
        [
            "intro E; rewrite lift_le.",
            "VernacExtend",
            "7df56f5e273b30bffecf673ddbaeec25de06c5b0"
        ],
        [
            "rewrite E; elim plus_n_Sm; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "b886908986fc33319c88494e9eca9e55dc71fe23"
        ],
        [
            "apply le_trans with n0; trivial with arith.",
            "VernacExtend",
            "c675289b17e7815d287ca865c7db66b78c4addea"
        ],
        [
            "apply gt_S_le; elim E; trivial with arith.",
            "VernacExtend",
            "58446585f2d0abbbf7fb5641a8504f1fdba81a89"
        ],
        [
            "absurd (n > n0).",
            "VernacExtend",
            "dd6b512ec2de69fc0cdf038b101233d92ca6dad4"
        ],
        [
            "rewrite R1; trivial with arith.",
            "VernacExtend",
            "51fe44f5d3a47f6aa815ff801839eca67cb5b88b"
        ],
        [
            "apply plus_gt_reg_l with p; trivial with arith.",
            "VernacExtend",
            "8392dac88e32df8c21931defc82861af5c110674"
        ],
        [
            "absurd (p + n > p + n0); auto with arith.",
            "VernacExtend",
            "1a7930a2c861a6e5d18702996f22b7eed2694234"
        ],
        [
            "apply le_not_gt; rewrite Q1; trivial with arith.",
            "VernacExtend",
            "eb9c842b76ca956c0f42bda440f5c67ae10a0768"
        ],
        [
            "rewrite lift_rec_lift; trivial with arith.",
            "VernacExtend",
            "2b77dc6c1358afc82360a237849c0d34826e5db9"
        ],
        [
            "absurd (n0 > n).",
            "VernacExtend",
            "7fb382e39910eb5cc8c37f702eafb89ff2faf004"
        ],
        [
            "apply le_not_gt; elim R; intro S.",
            "VernacExtend",
            "b6f8fdd26c29060916ee8a92b35d8b61b73960ff"
        ],
        [
            "apply gt_S_le; apply gt_trans with n; trivial with arith.",
            "VernacExtend",
            "6eac3540a52ee04cd5eebb45cfad9e12caf020e5"
        ],
        [
            "rewrite S; trivial with arith.",
            "VernacExtend",
            "34a217fe8e90877e84bdf2ab7e015323d1d02798"
        ],
        [
            "apply plus_gt_reg_l with p; trivial with arith.",
            "VernacExtend",
            "8392dac88e32df8c21931defc82861af5c110674"
        ],
        [
            "elim Q; intro S.",
            "VernacExtend",
            "f8619ac2bd9581a69822f930a16507830da9197f"
        ],
        [
            "absurd (n0 > n); trivial with arith.",
            "VernacExtend",
            "bb566ac8b1012555e926002f3a706e5ededdb048"
        ],
        [
            "apply gt_asym; apply plus_gt_reg_l with p; trivial with arith.",
            "VernacExtend",
            "7ec37d4ee063ce7eed2127b9f85bd8922b29caf7"
        ],
        [
            "absurd (n0 > n); trivial with arith.",
            "VernacExtend",
            "bb566ac8b1012555e926002f3a706e5ededdb048"
        ],
        [
            "apply le_not_gt; replace n0 with n; trivial with arith.",
            "VernacExtend",
            "1316f29b70b573582f32f52f92385bad179351fd"
        ],
        [
            "apply plus_reg_l with p; auto with arith.",
            "VernacExtend",
            "44cd2aa66ef107dafbd08b3b21ffbdb8bdcf4d85"
        ],
        [
            "rewrite lift_le; trivial with arith.",
            "VernacExtend",
            "6f7489f036d4795d1b67155b14a8b6c8ee5fb456"
        ],
        [
            "elim (compare n0 n); intro Q.",
            "VernacExtend",
            "56832918dbea414fbf4709638b1d25146ed5b87d"
        ],
        [
            "absurd (n0 > n).",
            "VernacExtend",
            "7fb382e39910eb5cc8c37f702eafb89ff2faf004"
        ],
        [
            "apply le_not_gt; elim Q; intro R.",
            "VernacExtend",
            "2c0ccc6366cf83e4a1dfc5e9d6c5e44f310a327e"
        ],
        [
            "apply gt_S_le; apply gt_trans with n; trivial with arith.",
            "VernacExtend",
            "6eac3540a52ee04cd5eebb45cfad9e12caf020e5"
        ],
        [
            "rewrite R; trivial with arith.",
            "VernacExtend",
            "795950078c7e2369fb3b6f09eec003c4440fbe6d"
        ],
        [
            "apply le_gt_trans with k; trivial with arith.",
            "VernacExtend",
            "454c7c5f6b21da0728533976bf0b5e3486f29d8b"
        ],
        [
            "elim (compare (p + n0) n); intro R.",
            "VernacExtend",
            "3405973cf0bf39aa696b128e5d96a292872802d1"
        ],
        [
            "absurd (n0 > n); trivial with arith.",
            "VernacExtend",
            "bb566ac8b1012555e926002f3a706e5ededdb048"
        ],
        [
            "apply le_not_gt; elim R; intro S.",
            "VernacExtend",
            "b6f8fdd26c29060916ee8a92b35d8b61b73960ff"
        ],
        [
            "apply le_trans with (p + n0); trivial with arith.",
            "VernacExtend",
            "c5b763d69a650457c4a0fb4410074bd2f85364a1"
        ],
        [
            "apply gt_S_le; apply gt_trans with n; trivial with arith.",
            "VernacExtend",
            "6eac3540a52ee04cd5eebb45cfad9e12caf020e5"
        ],
        [
            "elim S; trivial with arith.",
            "VernacExtend",
            "aa132c374d443ee07a68c12de649bef2de580ab4"
        ],
        [
            "rewrite lift_gt; trivial with arith.",
            "VernacExtend",
            "48e4f9f9c4ea2ce14d5ba12b27a99225c5824702"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_lift1 : forall (U V : redexes) (n p : nat), subst_rec_r (lift_r p U) V (p + n) = lift_r p (subst_rec_r U V n).",
            "VernacStartTheoremProof",
            "72d6c7f9e80c2584cd2f6ef2fb15a87ab988b0ef"
        ],
        [
            "unfold lift_r in |- *; intros; rewrite subst_rec_lift_rec1; trivial with arith.",
            "VernacExtend",
            "5a284655405c6a357ba7deb0a3345f680505fdd2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_lift_rec : forall (U V : redexes) (p q n : nat), q <= p + n -> n <= q -> subst_rec_r (lift_rec_r U n (S p)) V q = lift_rec_r U n p.",
            "VernacStartTheoremProof",
            "2a534668bd838f7893a197a0a853d251099777d7"
        ],
        [
            "simple induction U; intros; simpl in |- *.",
            "VernacExtend",
            "bdc0e7bc7b8361d22d6431c5007ec57068bfa9e8"
        ],
        [
            "2: rewrite H; trivial with arith.",
            "VernacExtend",
            "70edca82bff32feff748ec16b320c99ea896eb83"
        ],
        [
            "2: elim plus_n_Sm; simpl in |- *; apply le_n_S; trivial with arith.",
            "VernacExtend",
            "8b2948c9837cac50b0aea07ee534bcf994334e2b"
        ],
        [
            "2: apply le_n_S; trivial with arith.",
            "VernacExtend",
            "810edb5663d4596af867341dd176724c70c557c5"
        ],
        [
            "2: rewrite H; trivial with arith; rewrite H0; trivial with arith.",
            "VernacExtend",
            "f86221abf242c1e589a8d6d064f9ca4d81226409"
        ],
        [
            "unfold insert_Var, relocate in |- *; simpl in |- *.",
            "VernacExtend",
            "c65b2f2e35f7cb358132c6ea4c502082a48f29d7"
        ],
        [
            "elim (test n0 n); intro P.",
            "VernacExtend",
            "9bc87ebe5467230dde9c550e0ee0bbf861f7591a"
        ],
        [
            "elim (compare q (S (p + n))); intro Q.",
            "VernacExtend",
            "6fa67a528b2fda66520373c2d427d88fdd6a3449"
        ],
        [
            "elim Q; intro Q1; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "3fd59422d9fb02ee5765239fb18fc4005ccad904"
        ],
        [
            "absurd (q <= p + n0); trivial with arith; rewrite Q1; auto with arith.",
            "VernacExtend",
            "5a3766f88c4e6624858c7861d8c77fa8aba4b1b3"
        ],
        [
            "absurd (q > S (p + n)); trivial with arith.",
            "VernacExtend",
            "22b930f824bac5b6c55e74f0e907b36dac35276e"
        ],
        [
            "apply le_not_gt; apply le_trans with (p + n); trivial with arith.",
            "VernacExtend",
            "283da09b06e2b7e742ee4c0ca910d3fe5034178c"
        ],
        [
            "apply le_trans with (p + n0); auto with arith.",
            "VernacExtend",
            "415bdeec0260244efa4d1ae40308d809d9adb93b"
        ],
        [
            "elim (compare q n); intro Q; trivial with arith.",
            "VernacExtend",
            "f1702c37776c89fd0e085df03a2dffb449fae77c"
        ],
        [
            "elim Q; intro Q1; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "3fd59422d9fb02ee5765239fb18fc4005ccad904"
        ],
        [
            "absurd (n0 > q); auto with arith.",
            "VernacExtend",
            "05c194ba4c6725cfb2b85cca35c9eec50aa953f0"
        ],
        [
            "apply gt_trans with n; trivial with arith.",
            "VernacExtend",
            "3b75b10751513280d0383904e17f62c2f47cd364"
        ],
        [
            "absurd (n0 > q); auto with arith.",
            "VernacExtend",
            "05c194ba4c6725cfb2b85cca35c9eec50aa953f0"
        ],
        [
            "rewrite Q1; trivial with arith.",
            "VernacExtend",
            "b03d3c25f4f77f5692db4f6dc8153546ea967063"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_lift : forall (U V : redexes) (p q : nat), q <= p -> subst_rec_r (lift_r (S p) U) V q = lift_r p U.",
            "VernacStartTheoremProof",
            "765841323588c81f6bcf060a399ad57881a0a4a2"
        ],
        [
            "unfold lift_r in |- *; intros; rewrite subst_rec_lift_rec; trivial with arith.",
            "VernacExtend",
            "1e10d2d210f45fbb20546c44d0d4d7e5ce7143a5"
        ],
        [
            "elim plus_n_O; trivial with arith.",
            "VernacExtend",
            "f9f0394b8c4c4c8444ccae434c9301c5b25c2c7e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_subst_rec : forall (U V W : redexes) (n p : nat), subst_rec_r (subst_rec_r V U p) W (p + n) = subst_rec_r (subst_rec_r V W (S (p + n))) (subst_rec_r U W n) p.",
            "VernacStartTheoremProof",
            "75b4edf66066dba02879f9363bd69ab1fbfdc3c4"
        ],
        [
            "simple induction V.",
            "VernacExtend",
            "5bd6005b892f0db422f0d1b11f3b1522f82d4667"
        ],
        [
            "2: simpl in |- *; intros; replace (S (p + n)) with (S p + n); trivial with arith.",
            "VernacExtend",
            "8d6326cb48efbdca62bc094f4a9290d1917b9e60"
        ],
        [
            "2: elim H; trivial with arith.",
            "VernacExtend",
            "67f51ea402fd215a6dfc4d608b8ad5c80b02e7a8"
        ],
        [
            "2: simpl in |- *; intros; elim H; elim H0; trivial with arith.",
            "VernacExtend",
            "a6016d5c169be2fffa1923025e1fa376a480a885"
        ],
        [
            "unfold subst_rec_r at 2 4 in |- *; unfold insert_Var in |- *.",
            "VernacExtend",
            "84e4539683d832c673f5cadf175c28b22e0eb78d"
        ],
        [
            "intros n W i p; elim (compare p n); intro C.",
            "VernacExtend",
            "9b90cff3545c68a1839bf60719355a392bf7836c"
        ],
        [
            "elim C; intro D.",
            "VernacExtend",
            "cf7eb8dfaf705314c45b864ec72b0b388edb737b"
        ],
        [
            "elim (compare (S (p + i)) n); intro P.",
            "VernacExtend",
            "cf5eff4eb8de47e02ca6b4d41cd775994fb7a027"
        ],
        [
            "elim P; intro P1.",
            "VernacExtend",
            "561a183605b34515717ec33551af4868b912302f"
        ],
        [
            "rewrite subst_gt; auto with arith.",
            "VernacExtend",
            "945311fc389c15048f3eec9b520389a9496162a3"
        ],
        [
            "rewrite subst_gt; auto with arith.",
            "VernacExtend",
            "945311fc389c15048f3eec9b520389a9496162a3"
        ],
        [
            "apply gt_pred; apply gt_le_trans with (S (p + i)); auto with arith.",
            "VernacExtend",
            "ff8cba75e61f6865b763778f7f8dd81c84706f8e"
        ],
        [
            "rewrite (subst_rec_lift W (subst_rec_r U W i) (p + i) p (le_plus_l p i)).",
            "VernacExtend",
            "38826fe9a7ea2826341e5cad68fc38d1f68afe37"
        ],
        [
            "replace (pred n) with (p + i).",
            "VernacExtend",
            "960015ec629a2e2a04ca94ca9661c524ed5ea350"
        ],
        [
            "apply subst_eq.",
            "VernacExtend",
            "5518f6f2cc4bd5f59e37426e1a07ccd25d89ff78"
        ],
        [
            "elim P1; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "208db30070a4d107480e1f4599e8279aecab9710"
        ],
        [
            "rewrite subst_lt; trivial with arith.",
            "VernacExtend",
            "cd1ef6494ed60d39702c1d1b3d46cf9a7c761d94"
        ],
        [
            "rewrite subst_gt; trivial with arith.",
            "VernacExtend",
            "de7d2d6af684ea4fde1cd4200b0ff435760e8c2b"
        ],
        [
            "apply gt_S_n; replace (S (pred n)) with n; trivial with arith.",
            "VernacExtend",
            "5bb978eba4b3daba471e6a146a96d2faa3a87430"
        ],
        [
            "apply S_pred with p; trivial with arith.",
            "VernacExtend",
            "73c3d138b6a84f33b8dd60885965fb65a5a86f5b"
        ],
        [
            "rewrite D; elim (compare (S (n + i)) n); intro P.",
            "VernacExtend",
            "4ad1ca0b5174ccfc2108cfe240f930634ed7df0d"
        ],
        [
            "absurd (n + i < n); auto with arith.",
            "VernacExtend",
            "d0dd86ad551850baf08433bf37e1eb42804a1918"
        ],
        [
            "elim P; intro Q.",
            "VernacExtend",
            "ca9439de09e1e2093db5a395055a4abc5b06d02c"
        ],
        [
            "apply lt_trans with (S (n + i)); trivial with arith.",
            "VernacExtend",
            "a30ed5afe83b40ec64782dd181dcf72ca6a0441e"
        ],
        [
            "apply lt_S_n; rewrite Q; trivial with arith.",
            "VernacExtend",
            "e2ca6bd185b7a643e9189aff9483e560b3b327b7"
        ],
        [
            "rewrite subst_eq.",
            "VernacExtend",
            "edf82e40fb6d21a8943ca0b2838d2745d14ce823"
        ],
        [
            "apply subst_rec_lift1.",
            "VernacExtend",
            "2d22c376a2f4935886ba53c74b00d730dad26b1c"
        ],
        [
            "rewrite subst_lt.",
            "VernacExtend",
            "d670c571446d98fcfe8379eafb5b7a604e3cecd9"
        ],
        [
            "elim (compare (S (p + i)) n); intro P.",
            "VernacExtend",
            "cf5eff4eb8de47e02ca6b4d41cd775994fb7a027"
        ],
        [
            "absurd (n < p); trivial with arith.",
            "VernacExtend",
            "632f0302c7f1e4ec3033c332c5c265ee4df6857d"
        ],
        [
            "apply lt_asym; elim P; intro Q.",
            "VernacExtend",
            "a13a28dcfa6f5a6e2d364b5fd719ab9be2623bab"
        ],
        [
            "apply lt_trans with (S (p + i)); auto with arith.",
            "VernacExtend",
            "27893970498bfdacbe9514f5659ea73befe2d12e"
        ],
        [
            "elim Q.",
            "VernacExtend",
            "4084c3c3c9ea6d4a2a3e81040e58db18ad1b35d1"
        ],
        [
            "apply le_lt_n_Sm; apply le_plus_l.",
            "VernacExtend",
            "227fd22785e04ef1c9cc217f5f430e5cff045bb1"
        ],
        [
            "rewrite subst_lt; trivial with arith.",
            "VernacExtend",
            "cd1ef6494ed60d39702c1d1b3d46cf9a7c761d94"
        ],
        [
            "apply le_gt_trans with p; trivial with arith.",
            "VernacExtend",
            "15ceca211651cfb0bb2546d622db28487e45d6d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_subst_0 : forall (U V W : redexes) (n : nat), subst_rec_r (subst_rec_r V U 0) W n = subst_rec_r (subst_rec_r V W (S n)) (subst_rec_r U W n) 0.",
            "VernacStartTheoremProof",
            "41e08c94f7fc9986efca7c8f807877bd66ffa723"
        ],
        [
            "intros; pattern n at 1 3 in |- *.",
            "VernacExtend",
            "41cc6231f6f92cba65a7e11b82805040c4d1d8c3"
        ],
        [
            "replace n with (0 + n).",
            "VernacExtend",
            "1eaf18c2dd955aa0a2a9e0f1a070b9078dac901e"
        ],
        [
            "rewrite (subst_rec_subst_rec U V W n 0); trivial with arith.",
            "VernacExtend",
            "5d0ba662f6df0f9c98ba2dc141e6b01389b55236"
        ],
        [
            "simpl in |- *; trivial with arith.",
            "VernacExtend",
            "b4ae9832542dabc64882f33a73e091bafd36734a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma substitution : forall (U V W : redexes) (n : nat), subst_rec_r (subst_r U V) W n = subst_r (subst_rec_r U W n) (subst_rec_r V W (S n)).",
            "VernacStartTheoremProof",
            "ee2be144a67cdeab7bee9108fdfc806e8e6ddb66"
        ],
        [
            "unfold subst_r in |- *; intros; apply subst_rec_subst_0; trivial with arith.",
            "VernacExtend",
            "49003a13cfe32769dc809a7ab31c9315897880d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_rec_preserve_comp : forall U1 V1 : redexes, comp U1 V1 -> forall n m : nat, comp (lift_rec_r U1 m n) (lift_rec_r V1 m n).",
            "VernacStartTheoremProof",
            "a8da621b5bd30d0635811e708bf2f937733b7ebe"
        ],
        [
            "simple induction 1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "ab09bdbd8b06eae8bda6512fe1790f3cca2a8ec6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_preserve_comp : forall U1 V1 U2 V2 : redexes, comp U1 V1 -> comp U2 V2 -> forall n : nat, comp (subst_rec_r U1 U2 n) (subst_rec_r V1 V2 n).",
            "VernacStartTheoremProof",
            "41933a528a09c2e3e0fbcd3c0020b3c2a69c63e0"
        ],
        [
            "simple induction 1; simpl in |- *; auto with arith.",
            "VernacExtend",
            "ab09bdbd8b06eae8bda6512fe1790f3cca2a8ec6"
        ],
        [
            "intros n C n0; unfold insert_Var in |- *; elim (compare n0 n); trivial with arith.",
            "VernacExtend",
            "7900e3a8d1ad910929836cbf92ee405106cee62c"
        ],
        [
            "simple induction a; trivial with arith.",
            "VernacExtend",
            "2a7365089fb22168d1abd1576eb9748fabbfc547"
        ],
        [
            "intro; unfold lift_r in |- *; apply lift_rec_preserve_comp; trivial with arith.",
            "VernacExtend",
            "6f345a9028aaf2fd545fe67bab57f422273ebe6d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_preserve_comp : forall U1 V1 U2 V2 : redexes, comp U1 V1 -> comp U2 V2 -> comp (subst_r U2 U1) (subst_r V2 V1).",
            "VernacStartTheoremProof",
            "09a4c42e1d89e0e735b9a604822720d31e399099"
        ],
        [
            "intros; unfold subst_r in |- *; apply subst_rec_preserve_comp; trivial with arith.",
            "VernacExtend",
            "51360a5ce277e137ec2e4be724168f12405aa713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_rec_preserve_regular : forall U : redexes, regular U -> forall n m : nat, regular (lift_rec_r U m n).",
            "VernacStartTheoremProof",
            "123d27cf259b89a3c586eb9cdc5eda2070513749"
        ],
        [
            "simple induction U; simpl in |- *; auto with arith.",
            "VernacExtend",
            "069ed03869e3a7d40b7062ee967c695321ed2f7c"
        ],
        [
            "simple induction b; simple induction r; try contradiction.",
            "VernacExtend",
            "2f57137c09526dfde7e75b7c59d149868d68f76b"
        ],
        [
            "simpl in |- *; intros; elim H2; auto with arith.",
            "VernacExtend",
            "32120d798ab0fd19526acb7482b9b5505ea1a7f9"
        ],
        [
            "intros; elim H1; auto with arith.",
            "VernacExtend",
            "a98821684863cafb652994c15b2016a4bf55a542"
        ],
        [
            "intros; elim H2; auto with arith.",
            "VernacExtend",
            "47b0cbd75d7cc1268cfa9f5c1e152e36fa2b2132"
        ],
        [
            "intros; elim H3; auto with arith.",
            "VernacExtend",
            "708357af255047c96c3d106eb8d3e4824bad007c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_rec_preserve_regular : forall U V : redexes, regular U -> regular V -> forall n : nat, regular (subst_rec_r U V n).",
            "VernacStartTheoremProof",
            "c094d3e06cb5d74f3c5d310527d3a50d349e97dc"
        ],
        [
            "intros U V; elim U; simpl in |- *; auto with arith.",
            "VernacExtend",
            "0f153a4dfb17fe4fb4ce9f74af985ea6df69be9d"
        ],
        [
            "intros; unfold insert_Var in |- *; elim (compare n0 n).",
            "VernacExtend",
            "c7b6562023fa8a4bffe0082eebfa1950c744dee4"
        ],
        [
            "simple induction a; simpl in |- *; trivial with arith.",
            "VernacExtend",
            "297349eab9719780b5f0eca1c936c2c200202189"
        ],
        [
            "intro; unfold lift_r in |- *; apply lift_rec_preserve_regular; trivial with arith.",
            "VernacExtend",
            "d309236d2e9b67b14e437507d62a29105a4365bb"
        ],
        [
            "simpl in |- *; trivial with arith.",
            "VernacExtend",
            "b4ae9832542dabc64882f33a73e091bafd36734a"
        ],
        [
            "simple induction b; simple induction r; try contradiction.",
            "VernacExtend",
            "2f57137c09526dfde7e75b7c59d149868d68f76b"
        ],
        [
            "simpl in |- *; intros; elim H2; auto with arith.",
            "VernacExtend",
            "32120d798ab0fd19526acb7482b9b5505ea1a7f9"
        ],
        [
            "intros; elim H1; auto with arith.",
            "VernacExtend",
            "a98821684863cafb652994c15b2016a4bf55a542"
        ],
        [
            "intros; elim H2; auto with arith.",
            "VernacExtend",
            "47b0cbd75d7cc1268cfa9f5c1e152e36fa2b2132"
        ],
        [
            "intros; elim H3; auto with arith.",
            "VernacExtend",
            "708357af255047c96c3d106eb8d3e4824bad007c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subst_preserve_regular : forall U V : redexes, regular U -> regular V -> regular (subst_r U V).",
            "VernacStartTheoremProof",
            "c6e4e70f42db1caf8c500492bcb397bfc0113457"
        ],
        [
            "unfold subst_r in |- *; intros; apply subst_rec_preserve_regular; trivial with arith.",
            "VernacExtend",
            "fdb7f69e705fc1f5c7c4ebf21fce1d0b9f57dd13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "lift_le",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold relocate in |- *.",
                        "VernacExtend",
                        "ee4a14dfe154122c7df3a593e9cd1a8e464fd041"
                    ]
                },
                {
                    "command": [
                        "intros; elim (test k i); intro P; trivial with arith.",
                        "VernacExtend",
                        "3d731a52362aa5fd726dffc5d86306261fbb2d8e"
                    ]
                },
                {
                    "command": [
                        "absurd (k > i); trivial with arith.",
                        "VernacExtend",
                        "6d744002658de6fd1eafee26728fc3930396af36"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; trivial with arith.",
                        "VernacExtend",
                        "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_gt",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold relocate in |- *.",
                        "VernacExtend",
                        "ee4a14dfe154122c7df3a593e9cd1a8e464fd041"
                    ]
                },
                {
                    "command": [
                        "intros; elim (test k i); intro P; trivial with arith.",
                        "VernacExtend",
                        "3d731a52362aa5fd726dffc5d86306261fbb2d8e"
                    ]
                },
                {
                    "command": [
                        "absurd (k > i); trivial with arith.",
                        "VernacExtend",
                        "6d744002658de6fd1eafee26728fc3930396af36"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; trivial with arith.",
                        "VernacExtend",
                        "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift1",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "simple induction U; simpl in |- *; intros.",
                        "VernacExtend",
                        "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
                    ]
                },
                {
                    "command": [
                        "unfold relocate in |- *; elim (test i n); simpl in |- *.",
                        "VernacExtend",
                        "b2bdbb8fb6703f77448a21cfd5bcb8f59ba09a41"
                    ]
                },
                {
                    "command": [
                        "elim (test (j + i) (j + n)); simpl in |- *; intros.",
                        "VernacExtend",
                        "d22886e51e10041ceec4a12b44fdff482fd9311a"
                    ]
                },
                {
                    "command": [
                        "elim plus_permute; elim plus_assoc; trivial with arith.",
                        "VernacExtend",
                        "7ccfe9670fdf4719619aec5e712f947cb3259156"
                    ]
                },
                {
                    "command": [
                        "absurd (i > n); auto with arith.",
                        "VernacExtend",
                        "2ae3f5f40c613a7b77d407513571442ea65d0a9b"
                    ]
                },
                {
                    "command": [
                        "apply plus_gt_reg_l with j; trivial with arith.",
                        "VernacExtend",
                        "61fe14e9eb4965ae472e40a5c69f62f37d4f740f"
                    ]
                },
                {
                    "command": [
                        "elim (test (j + i) n); simpl in |- *; intros; trivial with arith.",
                        "VernacExtend",
                        "bcad307500518fe5bc56e0436b8bcd5af1a34776"
                    ]
                },
                {
                    "command": [
                        "absurd (i <= n); auto with arith.",
                        "VernacExtend",
                        "15b9d1dfbf09e5011617c05cb112168363bc1abc"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (j + i); trivial with arith.",
                        "VernacExtend",
                        "666ea9e4b127ea3378888949bf3d8c7e87e4f9ac"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_n_Sm j i); elim H; trivial with arith.",
                        "VernacExtend",
                        "5cd05404a8c72f9dcf06eaaebe3e2933094e1732"
                    ]
                },
                {
                    "command": [
                        "elim H; elim H0; trivial with arith.",
                        "VernacExtend",
                        "a2e63bec18fe6bdb0f08196d1c2f31afad4760b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_lift_rec",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "simple induction U; simpl in |- *; intros.",
                        "VernacExtend",
                        "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
                    ]
                },
                {
                    "command": [
                        "unfold relocate in |- *.",
                        "VernacExtend",
                        "02aa863e01ce95c379560dadd716fdc3a77e9e26"
                    ]
                },
                {
                    "command": [
                        "elim (test n0 n); elim (test i n); simpl in |- *.",
                        "VernacExtend",
                        "8d22ed3285ff189900b5f9de9ff7ef16130f57f8"
                    ]
                },
                {
                    "command": [
                        "elim (test (p + n0) (p + n)); elim (test i (k + n)); simpl in |- *; intros.",
                        "VernacExtend",
                        "986e7863e25313c5110d9a2b5c4d070318589b73"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_permute; trivial with arith.",
                        "VernacExtend",
                        "5854b38ba756333b682d6ccf59d07999aa14fa69"
                    ]
                },
                {
                    "command": [
                        "absurd (i > n); auto with arith.",
                        "VernacExtend",
                        "2ae3f5f40c613a7b77d407513571442ea65d0a9b"
                    ]
                },
                {
                    "command": [
                        "apply gt_le_trans with (k + n); trivial with arith.",
                        "VernacExtend",
                        "64ca8f0fe46524f8bac444a288fa2f07c55fee5d"
                    ]
                },
                {
                    "command": [
                        "absurd (n0 > n); auto with arith.",
                        "VernacExtend",
                        "21d548019e9dc3f409b91f3fd2580c8a71ac3c74"
                    ]
                },
                {
                    "command": [
                        "apply plus_gt_reg_l with p; trivial with arith.",
                        "VernacExtend",
                        "8392dac88e32df8c21931defc82861af5c110674"
                    ]
                },
                {
                    "command": [
                        "absurd (n0 > n); auto with arith.",
                        "VernacExtend",
                        "21d548019e9dc3f409b91f3fd2580c8a71ac3c74"
                    ]
                },
                {
                    "command": [
                        "apply plus_gt_reg_l with p; trivial with arith.",
                        "VernacExtend",
                        "8392dac88e32df8c21931defc82861af5c110674"
                    ]
                },
                {
                    "command": [
                        "intros; absurd (i > n); trivial with arith.",
                        "VernacExtend",
                        "3397c3136ed86e0e81fd71b566b76d2b79285639"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; apply le_trans with n0; trivial with arith.",
                        "VernacExtend",
                        "c8364f89d88fb9815ddf78a94d84839d98169310"
                    ]
                },
                {
                    "command": [
                        "intros; elim (test (p + n0) (p + n)); simpl in |- *; intros; trivial with arith.",
                        "VernacExtend",
                        "4d89c61b9a89c2d94b4088316a0b5e4240108547"
                    ]
                },
                {
                    "command": [
                        "absurd (n0 > n); trivial with arith.",
                        "VernacExtend",
                        "bb566ac8b1012555e926002f3a706e5ededdb048"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; apply (fun p n m : nat => plus_le_reg_l n m p) with p; trivial with arith.",
                        "VernacExtend",
                        "72bfb650b9931fdae882695c235f692861fac0ae"
                    ]
                },
                {
                    "command": [
                        "intros; elim (test (p + n0) n); simpl in |- *; intros; trivial with arith.",
                        "VernacExtend",
                        "b61a34c922a21c7d10e41d4436502eec448223f9"
                    ]
                },
                {
                    "command": [
                        "absurd (n0 > n); trivial with arith.",
                        "VernacExtend",
                        "bb566ac8b1012555e926002f3a706e5ededdb048"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; apply le_trans with (p + n0); trivial with arith.",
                        "VernacExtend",
                        "14bd29dc40bf7cb2fb6ebcf22c54397d044fe756"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_n_Sm p n); rewrite H; trivial with arith.",
                        "VernacExtend",
                        "04f9cf46561913106feb3de214a1dd9ad22ac066"
                    ]
                },
                {
                    "command": [
                        "elim (plus_n_Sm k n); auto with arith.",
                        "VernacExtend",
                        "3de7d058d7ef70bdcb99cfe5462d717e3cb8ac3e"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial with arith.",
                        "VernacExtend",
                        "728119c818ab9bd23a5493cd1fcd2ca7353bb06c"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; trivial with arith.",
                        "VernacExtend",
                        "ee7645a941b74ddeff5545529ed90e359c3c887b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_lift",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "unfold lift_r in |- *; intros; apply lift_lift_rec; trivial with arith.",
                        "VernacExtend",
                        "0809b739101c5c32648942acd4f952d68ed609e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "liftrecO",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "simple induction U; simpl in |- *; intros.",
                        "VernacExtend",
                        "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
                    ]
                },
                {
                    "command": [
                        "unfold relocate in |- *; elim (test n0 n); trivial with arith.",
                        "VernacExtend",
                        "be9349c9027b748eb7854119545c71461e1e651b"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial with arith.",
                        "VernacExtend",
                        "728119c818ab9bd23a5493cd1fcd2ca7353bb06c"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; trivial with arith.",
                        "VernacExtend",
                        "08205941dd5cf3bc5b91c86853d1c7a6b9537304"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "liftO",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "unfold lift_r in |- *; intro U; apply liftrecO.",
                        "VernacExtend",
                        "bd25eecc00bcc330480905a26fef8c0be571f525"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_rec_lift_rec",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "simple induction U; simpl in |- *; intros.",
                        "VernacExtend",
                        "78aff8b193f1c426d83c1e5754d95e4cfc545a8c"
                    ]
                },
                {
                    "command": [
                        "unfold relocate in |- *; elim (test i n); intro P.",
                        "VernacExtend",
                        "82b55623a00bbc438e674762012288712f0b6864"
                    ]
                },
                {
                    "command": [
                        "elim (test k (n0 + n)); intro Q.",
                        "VernacExtend",
                        "0d92b8af9406c9c61d1a1e0e0224da8c3b6e323c"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_assoc_reverse; trivial with arith.",
                        "VernacExtend",
                        "f76df8e3e4962643da35a7d2fc18deb93b675d96"
                    ]
                },
                {
                    "command": [
                        "absurd (k > n0 + n); trivial with arith.",
                        "VernacExtend",
                        "2dcb364ad72e38c4ddffb4969bbfc08e2524eea3"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; apply le_trans with (i + n0); trivial with arith.",
                        "VernacExtend",
                        "9f93109e384e4f0f7e12d67defc0416a5439857d"
                    ]
                },
                {
                    "command": [
                        "replace (i + n0) with (n0 + i); auto with arith; apply plus_le_compat_l; trivial with arith.",
                        "VernacExtend",
                        "2877c58b0f61a5f2523465ab9af75fcd599298a2"
                    ]
                },
                {
                    "command": [
                        "elim (test k n); intro Q; trivial with arith.",
                        "VernacExtend",
                        "790aade14b4df33d4e83743bfa539c1f2bb8eccf"
                    ]
                },
                {
                    "command": [
                        "absurd (i > k).",
                        "VernacExtend",
                        "2dc01ade2fc9810cf7e1c880fe785721d495925e"
                    ]
                },
                {
                    "command": [
                        "apply le_not_gt; trivial with arith.",
                        "VernacExtend",
                        "b4c3834fc1f5bcbc04fe3672d6acdcf9e2766ead"
                    ]
                },
                {
                    "command": [
                        "apply gt_le_trans with n; trivial with arith.",
                        "VernacExtend",
                        "83cd4b15aaa073d2344a7288e398146236406b66"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial with arith; simpl in |- *; apply le_n_S; trivial with arith.",
                        "VernacExtend",
                        "cf307168160805bf215edcfbfbeb28569fddfbb4"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial with arith; rewrite H0; trivial with arith.",
                        "VernacExtend",
                        "91dc7a2a5f74665e9bf087f067bed9d1947dc135"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_rec_lift",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "unfold lift_r in |- *; intros; rewrite lift_rec_lift_rec; trivial with arith.",
                        "VernacExtend",
                        "a04cbf552c1b80f74794fef30cf36fa8994644ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_eq",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold insert_Var in |- *.",
                        "VernacExtend",
                        "77351aedbc170c489d7f1aee642ed4b9a15746b1"
                    ]
                },
                {
                    "command": [
                        "intros; elim (compare n n); intro P.",
                        "VernacExtend",
                        "6b15d048eef466f7e3aaff4ea5c558accf33ea28"
                    ]
                },
                {
                    "command": [
                        "elim P; intro Q; simpl in |- *; trivial with arith.",
                        "VernacExtend",
                        "bfe3b8210e6c3a063558654465210605086aea11"
                    ]
                },
                {
                    "command": [
                        "absurd (n > n); trivial with arith.",
                        "VernacExtend",
                        "4ce392f6e144218a48e3553ace38467d02f99262"
                    ]
                },
                {
                    "command": [
                        "absurd (n > n); trivial with arith.",
                        "VernacExtend",
                        "4ce392f6e144218a48e3553ace38467d02f99262"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_gt",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold insert_Var in |- *.",
                        "VernacExtend",
                        "77351aedbc170c489d7f1aee642ed4b9a15746b1"
                    ]
                },
                {
                    "command": [
                        "intros; elim (compare p n); intro P.",
                        "VernacExtend",
                        "50d7cf733f3b2065515bde6da42147bab2369bf9"
                    ]
                },
                {
                    "command": [
                        "elim P; intro Q; trivial with arith.",
                        "VernacExtend",
                        "8e2cc4eba4897d81b3f59dab81ff8fa9ffb16305"
                    ]
                },
                {
                    "command": [
                        "absurd (n > p); trivial with arith; rewrite Q; trivial with arith.",
                        "VernacExtend",
                        "cb494a9d5d668f9d171376d814dca0ab86fc1646"
                    ]
                },
                {
                    "command": [
                        "absurd (n > p); auto with arith.",
                        "VernacExtend",
                        "d63e4f4c2a4d73886795323b1cd21d98d5d8f132"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_lt",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold insert_Var in |- *.",
                        "VernacExtend",
                        "77351aedbc170c489d7f1aee642ed4b9a15746b1"
                    ]
                },
                {
                    "command": [
                        "intros; elim (compare p n); intro P; trivial with arith.",
                        "VernacExtend",
                        "a8f74219cd4b06838f75823f66a271049f82d723"
                    ]
                },
                {
                    "command": [
                        "absurd (p > n); trivial with arith; elim P; intro Q; auto with arith.",
                        "VernacExtend",
                        "c090abf4df9cf179f06ffcf1ff81b001e9977afe"
                    ]
                },
                {
                    "command": [
                        "rewrite Q; trivial with arith.",
                        "VernacExtend",
                        "36c5997549fe47106bf3512d7c31c8c486b3983b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_subst",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "unfold subst_r in |- *; intros.",
                        "VernacExtend",
                        "1a1da8417a3fd173c113fb996cb7f58487290c7a"
                    ]
                },
                {
                    "command": [
                        "replace (S n) with (S (0 + n)).",
                        "VernacExtend",
                        "de86e14d4c7dee58fae141d55ae635ae7a214238"
                    ]
                },
                {
                    "command": [
                        "elim lift_rec_subst_rec; trivial with arith.",
                        "VernacExtend",
                        "5d74e17b43641be2d7c009c336df0b8f2ab4fa7f"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; trivial with arith.",
                        "VernacExtend",
                        "b4ae9832542dabc64882f33a73e091bafd36734a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_rec_lift1",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "unfold lift_r in |- *; intros; rewrite subst_rec_lift_rec1; trivial with arith.",
                        "VernacExtend",
                        "5a284655405c6a357ba7deb0a3345f680505fdd2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_rec_lift",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "unfold lift_r in |- *; intros; rewrite subst_rec_lift_rec; trivial with arith.",
                        "VernacExtend",
                        "1e10d2d210f45fbb20546c44d0d4d7e5ce7143a5"
                    ]
                },
                {
                    "command": [
                        "elim plus_n_O; trivial with arith.",
                        "VernacExtend",
                        "f9f0394b8c4c4c8444ccae434c9301c5b25c2c7e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_rec_subst_0",
            "line_nb": 281,
            "steps": [
                {
                    "command": [
                        "intros; pattern n at 1 3 in |- *.",
                        "VernacExtend",
                        "41cc6231f6f92cba65a7e11b82805040c4d1d8c3"
                    ]
                },
                {
                    "command": [
                        "replace n with (0 + n).",
                        "VernacExtend",
                        "1eaf18c2dd955aa0a2a9e0f1a070b9078dac901e"
                    ]
                },
                {
                    "command": [
                        "rewrite (subst_rec_subst_rec U V W n 0); trivial with arith.",
                        "VernacExtend",
                        "5d0ba662f6df0f9c98ba2dc141e6b01389b55236"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; trivial with arith.",
                        "VernacExtend",
                        "b4ae9832542dabc64882f33a73e091bafd36734a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "substitution",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "unfold subst_r in |- *; intros; apply subst_rec_subst_0; trivial with arith.",
                        "VernacExtend",
                        "49003a13cfe32769dc809a7ab31c9315897880d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_rec_preserve_comp",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "simple induction 1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "ab09bdbd8b06eae8bda6512fe1790f3cca2a8ec6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_rec_preserve_comp",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "simple induction 1; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "ab09bdbd8b06eae8bda6512fe1790f3cca2a8ec6"
                    ]
                },
                {
                    "command": [
                        "intros n C n0; unfold insert_Var in |- *; elim (compare n0 n); trivial with arith.",
                        "VernacExtend",
                        "7900e3a8d1ad910929836cbf92ee405106cee62c"
                    ]
                },
                {
                    "command": [
                        "simple induction a; trivial with arith.",
                        "VernacExtend",
                        "2a7365089fb22168d1abd1576eb9748fabbfc547"
                    ]
                },
                {
                    "command": [
                        "intro; unfold lift_r in |- *; apply lift_rec_preserve_comp; trivial with arith.",
                        "VernacExtend",
                        "6f345a9028aaf2fd545fe67bab57f422273ebe6d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_preserve_comp",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "intros; unfold subst_r in |- *; apply subst_rec_preserve_comp; trivial with arith.",
                        "VernacExtend",
                        "51360a5ce277e137ec2e4be724168f12405aa713"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_rec_preserve_regular",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "simple induction U; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "069ed03869e3a7d40b7062ee967c695321ed2f7c"
                    ]
                },
                {
                    "command": [
                        "simple induction b; simple induction r; try contradiction.",
                        "VernacExtend",
                        "2f57137c09526dfde7e75b7c59d149868d68f76b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros; elim H2; auto with arith.",
                        "VernacExtend",
                        "32120d798ab0fd19526acb7482b9b5505ea1a7f9"
                    ]
                },
                {
                    "command": [
                        "intros; elim H1; auto with arith.",
                        "VernacExtend",
                        "a98821684863cafb652994c15b2016a4bf55a542"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; auto with arith.",
                        "VernacExtend",
                        "47b0cbd75d7cc1268cfa9f5c1e152e36fa2b2132"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; auto with arith.",
                        "VernacExtend",
                        "708357af255047c96c3d106eb8d3e4824bad007c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_rec_preserve_regular",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "intros U V; elim U; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "0f153a4dfb17fe4fb4ce9f74af985ea6df69be9d"
                    ]
                },
                {
                    "command": [
                        "intros; unfold insert_Var in |- *; elim (compare n0 n).",
                        "VernacExtend",
                        "c7b6562023fa8a4bffe0082eebfa1950c744dee4"
                    ]
                },
                {
                    "command": [
                        "simple induction a; simpl in |- *; trivial with arith.",
                        "VernacExtend",
                        "297349eab9719780b5f0eca1c936c2c200202189"
                    ]
                },
                {
                    "command": [
                        "intro; unfold lift_r in |- *; apply lift_rec_preserve_regular; trivial with arith.",
                        "VernacExtend",
                        "d309236d2e9b67b14e437507d62a29105a4365bb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; trivial with arith.",
                        "VernacExtend",
                        "b4ae9832542dabc64882f33a73e091bafd36734a"
                    ]
                },
                {
                    "command": [
                        "simple induction b; simple induction r; try contradiction.",
                        "VernacExtend",
                        "2f57137c09526dfde7e75b7c59d149868d68f76b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros; elim H2; auto with arith.",
                        "VernacExtend",
                        "32120d798ab0fd19526acb7482b9b5505ea1a7f9"
                    ]
                },
                {
                    "command": [
                        "intros; elim H1; auto with arith.",
                        "VernacExtend",
                        "a98821684863cafb652994c15b2016a4bf55a542"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; auto with arith.",
                        "VernacExtend",
                        "47b0cbd75d7cc1268cfa9f5c1e152e36fa2b2132"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; auto with arith.",
                        "VernacExtend",
                        "708357af255047c96c3d106eb8d3e4824bad007c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subst_preserve_regular",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "unfold subst_r in |- *; intros; apply subst_rec_preserve_regular; trivial with arith.",
                        "VernacExtend",
                        "fdb7f69e705fc1f5c7c4ebf21fce1d0b9f57dd13"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}