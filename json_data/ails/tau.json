{
    "filename": "tau.v",
    "coq_project": "ails",
    "vernac_cmds": [
        [
            "Require Import Reals.",
            "VernacRequire",
            "45681fd6487015ca7aa8c8e9b408e40e3103ca14"
        ],
        [
            "Require Import ails_def.",
            "VernacRequire",
            "955f7cd4d9fdc9484fbe4a19c07226c42f4a0d43"
        ],
        [
            "Require Import trajectory_const.",
            "VernacRequire",
            "2389ee65efa36a9e54251476c2bb8cdd2f692ae5"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Definition dx (intruder evader : State) (t : R) : R := (xt intruder + t * intruderSpeed * cosd (heading intruder) - (xt evader + t * evaderSpeed))%R.",
            "VernacDefinition",
            "c09666d5a81e32e7aad8cab838b0640172f9a985"
        ],
        [
            "Definition dy (intruder evader : State) (t : R) : R := (yt intruder + t * intruderSpeed * sind (heading intruder) - yt evader)%R.",
            "VernacDefinition",
            "4bae89f0eb8ad27516a51f99a8bf61cbef147e10"
        ],
        [
            "Definition dxdt (intruder : State) : R := (intruderSpeed * cosd (heading intruder) - evaderSpeed)%R.",
            "VernacDefinition",
            "1180a46dc65b50ae76832251bff334385dbe94e0"
        ],
        [
            "Definition dydt (intruder : State) : R := (intruderSpeed * sind (heading intruder))%R.",
            "VernacDefinition",
            "894e621bf363e33f41eaedd3e2cf66ad7389d726"
        ],
        [
            "Definition RR (intruder evader : State) (t : R) : R := sqrt (Rsqr (dx intruder evader t) + Rsqr (dy intruder evader t)).",
            "VernacDefinition",
            "8b214ca97d9adebc8705b5bd1f457ad1ed7a3783"
        ],
        [
            "Definition div_tau (intruder evader : State) : R := (Rsqr (dxdt intruder) + Rsqr (dydt intruder))%R.",
            "VernacDefinition",
            "6a0be75e3ac69a5f5bedf593955e249003824a64"
        ],
        [
            "Lemma Req_EM_var : forall r1 r2 : R, {r1 = r2} + {r1 <> r2}.",
            "VernacStartTheoremProof",
            "69cb87e690c46ba1dbdc71889fac94db091b5890"
        ],
        [
            "intros; elim (total_order_T r1 r2); intros.",
            "VernacExtend",
            "88f7209a054068de7d1476443d33e83fdf5256e1"
        ],
        [
            "elim a; intro.",
            "VernacExtend",
            "063bbbd64cbdc7c6b7d4ec572823dbd9eca7c24a"
        ],
        [
            "right; red in |- *; intro; rewrite H in a0; elim (Rlt_irrefl r2 a0).",
            "VernacExtend",
            "991f694528300162396562b60eebd4b612486798"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; red in |- *; intro.",
            "VernacExtend",
            "78941758c4a1f041e58c485c593b5d261991cc32"
        ],
        [
            "rewrite H in b; elim (Rlt_irrefl r2 b).",
            "VernacExtend",
            "b52afcacecf3bc9c3689d647b7798bca420d27bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tau (intruder evader : State) (t : R) : R := match Req_EM_var (div_tau intruder evader) 0 with | left _ => 0%R | right _ => (- (dx intruder evader t * dxdt intruder + dy intruder evader t * dydt intruder) / div_tau intruder evader)%R end.",
            "VernacDefinition",
            "8016b414993ddb5bb2ef373315c2808bf1ae5fe3"
        ],
        [
            "Definition tmin (intruder evader : State) : R := match Req_EM_var (div_tau intruder evader) 0 with | left _ => 0%R | right _ => (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) / div_tau intruder evader)%R end.",
            "VernacDefinition",
            "2fa1bbb1cc785ba555b313c33115a5b52f2b59b9"
        ],
        [
            "Lemma tau_tmin : forall (intruder evader : State) (t : R), div_tau intruder evader <> 0%R -> tau intruder evader t = (tmin intruder evader - t)%R.",
            "VernacStartTheoremProof",
            "3ae04eeb8138388a722f72dea2ba015768bb1f03"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (tau intruder evader t = (- (dx intruder evader t * dxdt intruder + dy intruder evader t * dydt intruder) / div_tau intruder evader)%R).",
            "VernacExtend",
            "6dc3c6977f5b76f6995a821d51110193fe0cb04e"
        ],
        [
            "cut (tmin intruder evader = (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) / div_tau intruder evader)%R).",
            "VernacExtend",
            "dc3a554112e0b2f2c923418fca0daf6341fdd9da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H0; rewrite H1.",
            "VernacExtend",
            "85e84d2667b53456606ab747d4b84d4de959182c"
        ],
        [
            "unfold Rdiv in |- *.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "replace (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader - t)%R with (- (dxdt intruder * (xt intruder - xt evader + t * dxdt intruder) + dydt intruder * (yt intruder - yt evader + t * dydt intruder)) / div_tau intruder evader)%R.",
            "VernacExtend",
            "bfd3d843209299881e001baa22b05fddcbb59d16"
        ],
        [
            "cut ((xt intruder - xt evader + t * dxdt intruder)%R = dx intruder evader t).",
            "VernacExtend",
            "2dd8f599d2fb711494f0bfdb17da03343e813dab"
        ],
        [
            "cut ((yt intruder - yt evader + t * dydt intruder)%R = dy intruder evader t).",
            "VernacExtend",
            "9312dcb08eaf6ffc66f3420a0725a82da7969e57"
        ],
        [
            "intros; rewrite H2; rewrite H3; unfold Rdiv in |- *; rewrite (Rmult_comm (dx intruder evader t)); rewrite (Rmult_comm (dy intruder evader t)); reflexivity.",
            "VernacExtend",
            "e7e96c8bac5864143762e729620bb9ac74fb7885"
        ],
        [
            "unfold dydt, dy in |- *; ring.",
            "VernacExtend",
            "405cd3991f73d2d8fe6f25077e0e2e816e48c05b"
        ],
        [
            "unfold dxdt, dx in |- *; ring.",
            "VernacExtend",
            "80fea933f14143189ee45e2bf7575ed513231710"
        ],
        [
            "unfold Rdiv in |- *; apply (Rmult_eq_reg_l (div_tau intruder evader)).",
            "VernacExtend",
            "3581330e6ec88592489f97a4cf49bddf681d520c"
        ],
        [
            "rewrite (Rmult_comm (div_tau intruder evader)); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "b4cacda239d100e41205c862f017f4fa1c875f74"
        ],
        [
            "rewrite Rmult_1_r; rewrite (Rmult_comm (div_tau intruder evader)); replace ((- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader - t) * div_tau intruder evader)%R with (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader * div_tau intruder evader - t * div_tau intruder evader)%R.",
            "VernacExtend",
            "e9181d3a2090ea6545b237b0afb7dc30fb45032e"
        ],
        [
            "repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "0f4bb007eb96bbced433cf0b5f61451a3af2510c"
        ],
        [
            "rewrite Rmult_1_r; unfold div_tau in |- *; unfold Rsqr in |- *; ring.",
            "VernacExtend",
            "2ea49344f24f6aed540b4130ec6d9191bd094a77"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "symmetry in |- *; unfold Rminus in |- *; replace (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader + - t)%R with (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader + - t)%R.",
            "VernacExtend",
            "795211f06e53766c686facf78fc7622136c19e01"
        ],
        [
            "replace (- (t * div_tau intruder evader))%R with (- t * div_tau intruder evader)%R.",
            "VernacExtend",
            "e2a6714a800510e0dc137a9cf7195cbf59bef524"
        ],
        [
            "replace (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader * div_tau intruder evader)%R with (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader * div_tau intruder evader)%R.",
            "VernacExtend",
            "9c221ebd0ced739ffdc0390a56a383cd79113bd6"
        ],
        [
            "apply Rmult_plus_distr_r.",
            "VernacExtend",
            "8c98c57567f4d25a67548755db4192ed5127ca43"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold tmin in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "25a39c20a3a3dc8977217eff151c65f9c15e7a60"
        ],
        [
            "rewrite e in H; elim H; reflexivity.",
            "VernacExtend",
            "d52c21f86da9f53fcba6929bea579a9d72e7c915"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold tau in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "0a15235aaf70e2f83680762c5eefbec049a95157"
        ],
        [
            "rewrite e in H; elim H; reflexivity.",
            "VernacExtend",
            "d52c21f86da9f53fcba6929bea579a9d72e7c915"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Ax2_R (intruder : State) : R := (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed))%R.",
            "VernacDefinition",
            "eb7c14ee487af341a393f75bc47c653ff2aab4e8"
        ],
        [
            "Lemma Ax2_R_pos : forall intruder : State, (0 <= Ax2_R intruder)%R.",
            "VernacStartTheoremProof",
            "cc87753d25115c001d4c521efc3572aebc7b9b83"
        ],
        [
            "intro; unfold Ax2_R in |- *; apply Rplus_le_le_0_compat; apply Rle_0_sqr.",
            "VernacExtend",
            "8b85296d04a24f954f9df7eec97fa605604e36d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Bx_R (intruder evader : State) : R := (-2 * (yt evader * sind (heading intruder) * intruderSpeed) + 2 * (yt intruder * sind (heading intruder) * intruderSpeed) - 2 * (cosd (heading intruder) * xt evader * intruderSpeed) + 2 * (cosd (heading intruder) * xt intruder * intruderSpeed) + 2 * (xt evader * evaderSpeed) - 2 * (xt intruder * evaderSpeed))%R.",
            "VernacDefinition",
            "2609ab9e624d2db45fa55bf98cd2d463ac9c7d7b"
        ],
        [
            "Definition C_R (intruder evader : State) : R := (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader))%R.",
            "VernacDefinition",
            "1222a92fd5cf19e6c9f63d1127598f3040f367c5"
        ],
        [
            "Lemma Rsqr_R : forall (intruder evader : State) (t : R), Rsqr (RR intruder evader t) = (Ax2_R intruder * Rsqr t + Bx_R intruder evader * t + C_R intruder evader)%R.",
            "VernacStartTheoremProof",
            "d95d286366dfc6a8fa612a61739a7da050ab7096"
        ],
        [
            "intros; unfold RR in |- *; unfold dx, dy in |- *; rewrite Rsqr_sqrt; [ replace (xt intruder + t * intruderSpeed * cosd (heading intruder) - (xt evader + t * evaderSpeed))%R with ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t + (xt intruder - xt evader))%R; [ replace (yt intruder + t * intruderSpeed * sind (heading intruder) - yt evader)%R with (sind (heading intruder) * intruderSpeed * t + (yt intruder - yt evader))%R; [ repeat rewrite Rsqr_plus; repeat rewrite Rsqr_mult; unfold Ax2_R in |- *; apply Rplus_eq_reg_l with (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t)%R; replace (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + (Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed) * Rsqr t + Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + (Rsqr (sind (heading intruder)) * Rsqr intruderSpeed * Rsqr t + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))))%R with (Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))%R; [ replace (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + ((Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + Bx_R intruder evader * t + C_R intruder evader))%R with (Bx_R intruder evader * t + C_R intruder evader)%R; [ unfold C_R in |- *; apply Rplus_eq_reg_l with (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)))%R; replace (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)) + (Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader)))%R with (2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))%R; [ replace (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)) + (Bx_R intruder evader * t + (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader))))%R with (Bx_R intruder evader * t)%R; [ unfold Bx_R in |- *; ring | ring ] | ring ] | ring ] | rewrite (Rsqr_mult (sind (heading intruder)) intruderSpeed); ring ] | ring ] | ring ] | apply Rplus_le_le_0_compat; apply Rle_0_sqr ].",
            "VernacExtend",
            "7b57fa60ca0bcb7d16019650459442250da84de4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rsqr_Rmin (intruder evader : State) : R := match Req_EM_var (Ax2_R intruder) 0 with | left _ => 0%R | right _ => ((4 * Ax2_R intruder * C_R intruder evader - Rsqr (Bx_R intruder evader)) / (4 * Ax2_R intruder))%R end.",
            "VernacDefinition",
            "a836204fe724871ca56a496f752d83e4ac8085e9"
        ],
        [
            "Lemma tmin_0 : forall intruder evader : State, div_tau intruder evader <> 0%R -> tmin intruder evader = (- Bx_R intruder evader / (2 * Ax2_R intruder))%R.",
            "VernacStartTheoremProof",
            "565c20fb1b436888c8563989cf90efc7d0b0f65b"
        ],
        [
            "intros; unfold tmin in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "97026d3ea895d5b103229fc29a11f6dd9b3e7b2e"
        ],
        [
            "elim H; assumption.",
            "VernacExtend",
            "208cbae6d4c505591733cd429d302ea8fd9c235a"
        ],
        [
            "unfold div_tau, Bx_R, Ax2_R in |- *; unfold dxdt, dydt in |- *; unfold Rdiv in |- *; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "6dbf4e0bb8b5315cb512728afbed32a310a4f5bf"
        ],
        [
            "replace (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed))%R with (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))%R.",
            "VernacExtend",
            "1e8e6d64197827b03789e73721a068df2a5abcf4"
        ],
        [
            "apply Rmult_eq_reg_l with (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))%R.",
            "VernacExtend",
            "0a3f9d1854559ef1e0c993c439f7f66415377afa"
        ],
        [
            "rewrite (Rmult_comm (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) ; repeat rewrite Rmult_assoc; rewrite <- (Rinv_l_sym (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) .",
            "VernacExtend",
            "908ff2eed4c79c2347441f1d9044cfcc8679b362"
        ],
        [
            "rewrite Rmult_1_r; rewrite (Rmult_comm (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) ; repeat rewrite Rmult_assoc; rewrite <- (Rinv_l_sym (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) .",
            "VernacExtend",
            "eec6e6b76543f2e9f4a1234e0d28f625f6b84cab"
        ],
        [
            "rewrite Rmult_1_r; replace (- (-2 * (yt evader * (sind (heading intruder) * intruderSpeed)) + 2 * (yt intruder * (sind (heading intruder) * intruderSpeed)) - 2 * (cosd (heading intruder) * (xt evader * intruderSpeed)) + 2 * (cosd (heading intruder) * (xt intruder * intruderSpeed)) + 2 * (xt evader * evaderSpeed) - 2 * (xt intruder * evaderSpeed)))%R with ((yt evader * (sind (heading intruder) * intruderSpeed) - yt intruder * (sind (heading intruder) * intruderSpeed) + cosd (heading intruder) * (xt evader * intruderSpeed) - cosd (heading intruder) * (xt intruder * intruderSpeed) - xt evader * evaderSpeed + xt intruder * evaderSpeed) * 2)%R.",
            "VernacExtend",
            "e6a3b10cfb0cc87cb3fdf3fdd683c07b318bb9ad"
        ],
        [
            "repeat rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "0b65281e7d32463ce5a57ea87b8773ce73c38349"
        ],
        [
            "rewrite Rmult_1_r; ring.",
            "VernacExtend",
            "d72f7b56cfc25cf0acb41025c9e309909283a3a4"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold div_tau in H; unfold dxdt, dydt in H; assumption.",
            "VernacExtend",
            "69e15720ff25b429cdfb6801eebdc5e1c2f42de0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut ((intruderSpeed * cosd (heading intruder) - evaderSpeed)%R = (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R).",
            "VernacExtend",
            "486260531df398a2f618faa3296a7bb8a083424f"
        ],
        [
            "cut ((intruderSpeed * sind (heading intruder))%R = (sind (heading intruder) * intruderSpeed)%R).",
            "VernacExtend",
            "0a979c3703b5082a29b3d75f00afc879cc116b33"
        ],
        [
            "intros; rewrite H0; rewrite H1; rewrite Rplus_comm; reflexivity.",
            "VernacExtend",
            "e493e722e416105915d751a7c31ddcdd2d0aa0c7"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "cut ((intruderSpeed * cosd (heading intruder) - evaderSpeed)%R = (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R).",
            "VernacExtend",
            "486260531df398a2f618faa3296a7bb8a083424f"
        ],
        [
            "cut ((intruderSpeed * sind (heading intruder))%R = (sind (heading intruder) * intruderSpeed)%R).",
            "VernacExtend",
            "0a979c3703b5082a29b3d75f00afc879cc116b33"
        ],
        [
            "intros; rewrite <- H0; rewrite <- H1; rewrite Rplus_comm; assumption.",
            "VernacExtend",
            "c4048c86b1e23ae8b381a13733cdabe128d606bc"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ax2_R_0_div_tau : forall intruder evader : State, div_tau intruder evader = 0%R -> Ax2_R intruder = 0%R.",
            "VernacStartTheoremProof",
            "f404cb26b90fb9aa3499cca02b422ac92a0b50b3"
        ],
        [
            "unfold div_tau, Ax2_R in |- *; intros; unfold dxdt, dydt in H; rewrite Rplus_comm; replace (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R with (intruderSpeed * cosd (heading intruder) - evaderSpeed)%R; [ rewrite (Rmult_comm (sind (heading intruder))); assumption | ring ].",
            "VernacExtend",
            "ddae43fae3ef0726004d5956c196df6e9e68d29d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma div_tau_0_Ax2_R : forall intruder evader : State, Ax2_R intruder = 0%R -> div_tau intruder evader = 0%R.",
            "VernacStartTheoremProof",
            "3988e99a2d9cb0373b0ad1795e30785c0c608465"
        ],
        [
            "unfold div_tau, Ax2_R in |- *; intros; unfold dxdt, dydt in |- *; replace (intruderSpeed * cosd (heading intruder) - evaderSpeed)%R with (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R; [ rewrite <- (Rmult_comm (sind (heading intruder))); rewrite Rplus_comm; assumption | ring ].",
            "VernacExtend",
            "3b4eba8db247e146b089eb76741c224f1da0fefd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma R_Rmin : forall (intruder evader : State) (t : R), div_tau intruder evader <> 0%R -> Rsqr (RR intruder evader t) = (Ax2_R intruder * Rsqr (t - tmin intruder evader) + Rsqr_Rmin intruder evader)%R.",
            "VernacStartTheoremProof",
            "130d2ac2a4671331928f86aaedaed2923dabb4b3"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros; unfold Rsqr_Rmin in |- *; case (Req_EM_var (Ax2_R intruder) 0); intro...",
            "VernacExtend",
            "cbddd07b7c1244f0483d0d38af81449036f6c4ad"
        ],
        [
            "elim H; apply div_tau_0_Ax2_R...",
            "VernacExtend",
            "95353f512cfd8547b44d80272ae805e0753f5080"
        ],
        [
            "rewrite Rsqr_minus; rewrite (tmin_0 intruder evader H); rewrite Rsqr_div...",
            "VernacExtend",
            "58b3d26e7d2c706fedcf59d65c9d099628730930"
        ],
        [
            "unfold Rdiv in |- *; rewrite Rsqr_R; rewrite <- Rsqr_neg; rewrite Rsqr_mult; replace (Rsqr 2) with 4%R...",
            "VernacExtend",
            "d5ca076c3ae4c23b5e04c18ffee8c5cb286e7338"
        ],
        [
            "rewrite (Rinv_mult_distr 2 (Ax2_R intruder))...",
            "VernacExtend",
            "035b1c3b13b2c10a574709f56dec98c6ec32a803"
        ],
        [
            "rewrite (Rinv_mult_distr 4 (Ax2_R intruder))...",
            "VernacExtend",
            "4b8f8a2c3ac4fd62e3c8570aec7b0cfe670df455"
        ],
        [
            "rewrite Rinv_mult_distr...",
            "VernacExtend",
            "efcf3b82ef84f23b5847c65e45f9eb8ee54611c0"
        ],
        [
            "unfold Rminus in |- *; do 2 rewrite Rmult_plus_distr_l...",
            "VernacExtend",
            "76ed9f67618a439ae251ddccb8826eeecf2e64c4"
        ],
        [
            "rewrite <- (Rmult_comm (Rsqr (Bx_R intruder evader) * (/ 4 * / Rsqr (Ax2_R intruder)))) ; unfold Rsqr in |- *; rewrite (Rinv_mult_distr (Ax2_R intruder) (Ax2_R intruder))...",
            "VernacExtend",
            "869a80b450cd5089e4020a2304614ae7251cec27"
        ],
        [
            "repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym...",
            "VernacExtend",
            "070f9e3363ebfc7af0c26051fe1bb2780ece1f57"
        ],
        [
            "rewrite Rmult_1_r...",
            "VernacExtend",
            "17fd1490c5e2edefabe8b930fb30af7bc935653f"
        ],
        [
            "repeat rewrite Rplus_assoc; apply Rplus_eq_compat_l...",
            "VernacExtend",
            "45cd9cfe52a8c2dcbd7a2d76ad3e238b96dd1f84"
        ],
        [
            "rewrite (Rmult_plus_distr_r (4 * (Ax2_R intruder * C_R intruder evader)) (- (Bx_R intruder evader * Bx_R intruder evader)) (/ 4 * / Ax2_R intruder))...",
            "VernacExtend",
            "3952d3c7fb43ecfdb47c584e4b92c7e7950dc852"
        ],
        [
            "replace (Ax2_R intruder * - (2 * (t * (- Bx_R intruder evader * (/ 2 * / Ax2_R intruder)))))%R with (Bx_R intruder evader * t)%R...",
            "VernacExtend",
            "d1b68223b27b2ed078a4da5acd24b3cf273365ad"
        ],
        [
            "replace (4 * (Ax2_R intruder * C_R intruder evader) * (/ 4 * / Ax2_R intruder))%R with (C_R intruder evader)...",
            "VernacExtend",
            "f651d8355d03e1137f69a4f6f02be3b9cdc10381"
        ],
        [
            "ring...",
            "VernacExtend",
            "1ba409b27e9f97c74f4dc663370ed436d64ac388"
        ],
        [
            "rewrite (Rmult_comm (/ 4))...",
            "VernacExtend",
            "1923722e61a154ae86cb017c5e98d8f9a68d8ddc"
        ],
        [
            "repeat rewrite Rmult_assoc...",
            "VernacExtend",
            "191e10806c4540c1074006c53bb0fdf0e8b14a07"
        ],
        [
            "rewrite (Rmult_comm 4)...",
            "VernacExtend",
            "49828d9b3877dd77623fe065508c700e16dee428"
        ],
        [
            "repeat rewrite Rmult_assoc...",
            "VernacExtend",
            "191e10806c4540c1074006c53bb0fdf0e8b14a07"
        ],
        [
            "rewrite <- Rinv_l_sym...",
            "VernacExtend",
            "0610b94938fd4afb928a0d61f6351b9306e074be"
        ],
        [
            "rewrite Rmult_1_r; rewrite (Rmult_comm (C_R intruder evader)); repeat rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym...",
            "VernacExtend",
            "64bde32503371a705078cb2587fcf7d669366fb4"
        ],
        [
            "symmetry in |- *; apply Rmult_1_l...",
            "VernacExtend",
            "e752df5d07be0b3d2444c16fec2b23c87b22da4c"
        ],
        [
            "discrR...",
            "VernacExtend",
            "1d84d56ab750a265209e2ba036b3c6b486c246ee"
        ],
        [
            "rewrite (Rmult_comm (Ax2_R intruder)); replace (- (2 * (t * (- Bx_R intruder evader * (/ 2 * / Ax2_R intruder)))))%R with (-2 * t * - Bx_R intruder evader * / 2 * / Ax2_R intruder)%R...",
            "VernacExtend",
            "e6a87d3bbc351b049f47168387e2097273be9cb7"
        ],
        [
            "repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym...",
            "VernacExtend",
            "070f9e3363ebfc7af0c26051fe1bb2780ece1f57"
        ],
        [
            "rewrite Rmult_1_r; repeat rewrite <- Rmult_assoc; replace (-2 * t * - Bx_R intruder evader)%R with (t * Bx_R intruder evader * 2)%R...",
            "VernacExtend",
            "4f433fde86ccc9d2100db298bf67b4f55e29e75a"
        ],
        [
            "repeat rewrite Rmult_assoc; rewrite <- Rinv_r_sym...",
            "VernacExtend",
            "33405e897fcc04b8f210daf7e6723f5625606cb7"
        ],
        [
            "ring...",
            "VernacExtend",
            "1ba409b27e9f97c74f4dc663370ed436d64ac388"
        ],
        [
            "discrR...",
            "VernacExtend",
            "1d84d56ab750a265209e2ba036b3c6b486c246ee"
        ],
        [
            "ring...",
            "VernacExtend",
            "1ba409b27e9f97c74f4dc663370ed436d64ac388"
        ],
        [
            "ring...",
            "VernacExtend",
            "1ba409b27e9f97c74f4dc663370ed436d64ac388"
        ],
        [
            "discrR...",
            "VernacExtend",
            "1d84d56ab750a265209e2ba036b3c6b486c246ee"
        ],
        [
            "unfold Rsqr in |- *; apply prod_neq_R0...",
            "VernacExtend",
            "4358a08adb6dc40a3230c768c1a54c928c371188"
        ],
        [
            "discrR...",
            "VernacExtend",
            "1d84d56ab750a265209e2ba036b3c6b486c246ee"
        ],
        [
            "discrR...",
            "VernacExtend",
            "1d84d56ab750a265209e2ba036b3c6b486c246ee"
        ],
        [
            "apply prod_neq_R0...",
            "VernacExtend",
            "1e08fe61cc8e71f4cb957a1496ea18547de488cf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dx_dxdt : forall (intruder evader : State) (t : R), (xt intruder - xt evader + t * dxdt intruder)%R = dx intruder evader t.",
            "VernacStartTheoremProof",
            "ca5611134375a8483331cee999f8a7da8368e43e"
        ],
        [
            "intros; unfold dxdt, dx in |- *; ring.",
            "VernacExtend",
            "52e7357024ae6798ad7fee46fa08a8fa84a90075"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dy_dydt : forall (intruder evader : State) (t : R), (yt intruder - yt evader + t * dydt intruder)%R = dy intruder evader t.",
            "VernacStartTheoremProof",
            "f657ca889b23ce958d519a98e03dc76285cdb596"
        ],
        [
            "intros; unfold dydt, dy in |- *; ring.",
            "VernacExtend",
            "26b2140acc1c2d1ffa7b948377c37c54d563a6d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma R_equal_when_zero : forall (intruder evader : State) (t1 t2 : R), div_tau intruder evader = 0%R -> RR intruder evader t1 = RR intruder evader t2.",
            "VernacStartTheoremProof",
            "0b4f35cbec54e79a74d67ee4dadc629a1830c041"
        ],
        [
            "intros; unfold RR in |- *; unfold div_tau in H; generalize (Rplus_eq_R0 (Rsqr (dxdt intruder)) (Rsqr (dydt intruder)) (Rle_0_sqr (dxdt intruder)) (Rle_0_sqr (dydt intruder)) H); intro; elim H0; intros; generalize (Rsqr_eq_0 (dxdt intruder) H1); intro; generalize (Rsqr_eq_0 (dydt intruder) H2); intro; rewrite <- (dx_dxdt intruder evader t1); rewrite <- (dx_dxdt intruder evader t2); rewrite <- (dy_dydt intruder evader t1); rewrite <- (dy_dydt intruder evader t2); rewrite H3; rewrite H4; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; reflexivity.",
            "VernacExtend",
            "74cb8155d74092f2a2da590e5dff8eb2534a5783"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RR_pos : forall (intruder evader : State) (t : R), (0 <= RR intruder evader t)%R.",
            "VernacStartTheoremProof",
            "1b4d752d5f7853033b7ec810a2da491710b0b42d"
        ],
        [
            "intros; unfold RR in |- *; apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr.",
            "VernacExtend",
            "8ff06c11b45efa03104637dd369f0b3befce3af4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivative_eq_zero_tmin : forall (intruder evader : State) (t : R), (RR intruder evader (tmin intruder evader) <= RR intruder evader t)%R.",
            "VernacStartTheoremProof",
            "1a7c73fdeab08d4319c776f8f136878302bef72b"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
        ],
        [
            "right; apply (R_equal_when_zero intruder evader (tmin intruder evader) t e).",
            "VernacExtend",
            "81f00c6090b6abdc40558c8dfcbcf7fbb5e5debf"
        ],
        [
            "apply Rsqr_incr_0.",
            "VernacExtend",
            "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
        ],
        [
            "repeat rewrite R_Rmin.",
            "VernacExtend",
            "ee833e42eb4418399a5f792a3eed796e745a558d"
        ],
        [
            "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
            "VernacExtend",
            "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
        ],
        [
            "apply Ax2_R_pos.",
            "VernacExtend",
            "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
        ],
        [
            "unfold Rminus in |- *; rewrite Rplus_opp_r; rewrite Rsqr_0; apply Rle_0_sqr.",
            "VernacExtend",
            "d2375a4d8d377429763b2e7731de7706052d05c7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivative_eq_zero_min : forall (intruder evader : State) (t1 t2 : R), (RR intruder evader (t1 + tau intruder evader t1) <= RR intruder evader (t1 + t2))%R.",
            "VernacStartTheoremProof",
            "5e46b1f448165a501b385bb3a3d22b79c4af3ed1"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t1 n); replace (t1 + (tmin intruder evader - t1))%R with (tmin intruder evader); [ apply derivative_eq_zero_tmin | ring ] ].",
            "VernacExtend",
            "98ccb034ece07ae95b0f2701d2e4359c8365d2b8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asymptotic_decrease_tmin : forall (intruder evader : State) (t1 t2 : R), (t2 <= tmin intruder evader)%R -> (t1 <= t2)%R -> (RR intruder evader t2 <= RR intruder evader t1)%R.",
            "VernacStartTheoremProof",
            "54dba1c5deffd78494581fc02cecc697022b3aed"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
        ],
        [
            "right; apply (R_equal_when_zero intruder evader t2 t1 e).",
            "VernacExtend",
            "447c40068e071586def14bdf71dfe04b3ccf1459"
        ],
        [
            "apply Rsqr_incr_0.",
            "VernacExtend",
            "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
        ],
        [
            "repeat rewrite R_Rmin.",
            "VernacExtend",
            "ee833e42eb4418399a5f792a3eed796e745a558d"
        ],
        [
            "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
            "VernacExtend",
            "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
        ],
        [
            "apply Ax2_R_pos.",
            "VernacExtend",
            "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
        ],
        [
            "case (Rtotal_order (tmin intruder evader) t1); intro.",
            "VernacExtend",
            "34bba0861b42b62d4b132e8f7feca77ff1835972"
        ],
        [
            "generalize (Rle_lt_trans t2 (tmin intruder evader) t1 H H1); intro; elim (Rlt_irrefl t1 (Rle_lt_trans t1 t2 t1 H0 H2)).",
            "VernacExtend",
            "c33e8bc70e9fa03147dbe64d9496e9b35136ef50"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite H2 in H; generalize (Rle_antisym t1 t2 H0 H); intro; rewrite H3; right; reflexivity.",
            "VernacExtend",
            "84c410c67c96545543366d88f08894bd49c297de"
        ],
        [
            "rewrite Rsqr_neg; rewrite (Rsqr_neg (t1 - tmin intruder evader)); replace (- (t2 - tmin intruder evader))%R with (tmin intruder evader - t2)%R.",
            "VernacExtend",
            "3a064f28b4c347c175dbc4426489ae2fe59b3522"
        ],
        [
            "replace (- (t1 - tmin intruder evader))%R with (tmin intruder evader - t1)%R.",
            "VernacExtend",
            "9e06995dd19df568b5e85264231804e008f9c3d6"
        ],
        [
            "apply Rsqr_incr_1.",
            "VernacExtend",
            "64ae3af2603c81607c9a07cf7aa8ad1285eefc50"
        ],
        [
            "unfold Rminus in |- *; apply Rplus_le_compat_l; apply Ropp_ge_le_contravar; apply Rle_ge; assumption.",
            "VernacExtend",
            "f2f4be4c760adcae5bd14c8f8d4367fe47973690"
        ],
        [
            "apply Rplus_le_reg_l with t2; rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "01651afab4b801e3ec3f8d8072f8c3371d085d61"
        ],
        [
            "apply Rplus_le_reg_l with t1; rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; apply Rle_trans with t2; assumption.",
            "VernacExtend",
            "e682a573c81df7542ad0ae7360270ea74575d0e1"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asymptotic_decrease_tau : forall (intruder evader : State) (t t1 t2 : R), (t2 <= tau intruder evader t)%R -> (t1 <= t2)%R -> (RR intruder evader (t + t2) <= RR intruder evader (t + t1))%R.",
            "VernacStartTheoremProof",
            "69697cd24e1ce1a054634ea3d182c9c5127deb71"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t n) in H; apply asymptotic_decrease_tmin; [ apply Rplus_le_reg_l with (- t)%R; repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; rewrite Rplus_comm; assumption | apply (Rplus_le_compat_l t t1 t2 H0) ] ].",
            "VernacExtend",
            "d96ba703b29c1398401e9d6397672f33f65d4b95"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asymptotic_increase_tmin : forall (intruder evader : State) (t1 t2 : R), (tmin intruder evader <= t1)%R -> (t1 <= t2)%R -> (RR intruder evader t1 <= RR intruder evader t2)%R.",
            "VernacStartTheoremProof",
            "780bc77aeef55d3c0105a404354b57466ce2ba24"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
        ],
        [
            "right; apply (R_equal_when_zero intruder evader t1 t2 e).",
            "VernacExtend",
            "84bf247adc6b539f475fd37ea80ca428a7317f59"
        ],
        [
            "apply Rsqr_incr_0.",
            "VernacExtend",
            "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
        ],
        [
            "repeat rewrite R_Rmin.",
            "VernacExtend",
            "ee833e42eb4418399a5f792a3eed796e745a558d"
        ],
        [
            "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
            "VernacExtend",
            "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
        ],
        [
            "apply Ax2_R_pos.",
            "VernacExtend",
            "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
        ],
        [
            "apply Rsqr_incr_1.",
            "VernacExtend",
            "64ae3af2603c81607c9a07cf7aa8ad1285eefc50"
        ],
        [
            "unfold Rminus in |- *; apply Rplus_le_compat_r; assumption.",
            "VernacExtend",
            "e02e22a056915eda98266b784dc6055206bb8fe2"
        ],
        [
            "apply Rplus_le_reg_l with (tmin intruder evader); rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "ab48869f393ad4a70dea485125d899f19b77e31f"
        ],
        [
            "apply Rplus_le_reg_l with (tmin intruder evader); rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; apply Rle_trans with t1; assumption.",
            "VernacExtend",
            "d6c9a1cbb80b5bbe6d9733b4aca006850dba18d0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "apply RR_pos.",
            "VernacExtend",
            "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asymptotic_increase_tau : forall (intruder evader : State) (t t1 t2 : R), (tau intruder evader t <= t1)%R -> (t1 <= t2)%R -> (RR intruder evader (t + t1) <= RR intruder evader (t + t2))%R.",
            "VernacStartTheoremProof",
            "a3388951027714305254f66841b8c8d491a04f53"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t n) in H; apply asymptotic_increase_tmin; [ apply Rplus_le_reg_l with (- t)%R; repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; rewrite Rplus_comm; assumption | apply (Rplus_le_compat_l t t1 t2 H0) ] ].",
            "VernacExtend",
            "b2197e0375a42418c1ca652edacf2dd481ddf0fc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tau_equal_when_zero : forall (intruder evader : State) (t : R), div_tau intruder evader = 0%R -> tau intruder evader t = 0%R.",
            "VernacStartTheoremProof",
            "071d0a150e19967ea88979b456218caac2c705b4"
        ],
        [
            "intros; unfold tau in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro; [ reflexivity | elim n; exact H ].",
            "VernacExtend",
            "cc5d2542715f59f7d4288e7786a8b1cdb731be7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asymptotic_tau_gt : forall (intruder evader : State) (t dt : R), (0 <= dt)%R -> (RR intruder evader (t + dt) < RR intruder evader t)%R -> (0 < tau intruder evader t)%R.",
            "VernacStartTheoremProof",
            "8c2109dcf92b6078418e20d159cef263a7707b80"
        ],
        [
            "intros; case (Rtotal_order 0 (tau intruder evader t)); intro; [ assumption | cut (tau intruder evader t <= 0)%R; [ intro; elim H1; intro; generalize (asymptotic_increase_tau intruder evader t 0 dt H2 H); rewrite Rplus_0_r; intro; elim (Rlt_irrefl (RR intruder evader t) (Rle_lt_trans (RR intruder evader t) (RR intruder evader (t + dt)) (RR intruder evader t) H4 H0)) | elim H1; intro; [ right; symmetry in |- *; assumption | left; assumption ] ] ].",
            "VernacExtend",
            "f545e7a9dfe38c108b37dc92fd0b1f50252fac72"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tau_is_uniform : forall (intruder evader : State) (t1 t2 : R), div_tau intruder evader <> 0%R -> tau intruder evader (t1 + t2) = (tau intruder evader t1 - t2)%R.",
            "VernacStartTheoremProof",
            "6e0ff18722c4fdf9b117dd9c209a443e7203bf72"
        ],
        [
            "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ elim H; exact e | repeat rewrite tau_tmin; [ ring | exact H | exact H ] ].",
            "VernacExtend",
            "d9b1c16e9c5631ab9b84f0555f03c3c1ae955f51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tau_gt_time : forall (intruder evader : State) (t1 t2 t : R), (t < tau intruder evader t2)%R -> (t1 <= t2)%R -> (t < tau intruder evader t1)%R.",
            "VernacStartTheoremProof",
            "b28002ccdd2d4c4e519a46e39d9ebf067dcdcb76"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "f2b8f7cc265b10c6f505c98e2cc48e79543a3a2f"
        ],
        [
            "rewrite (tau_equal_when_zero intruder evader t1 e).",
            "VernacExtend",
            "321947a5608e36c94116d8a49a5cf7aa484ba332"
        ],
        [
            "rewrite (tau_equal_when_zero intruder evader t2 e) in H.",
            "VernacExtend",
            "17d5efa2e502831cec15dbfb370f9da60202fedb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (t1 = (t2 + (t1 - t2))%R).",
            "VernacExtend",
            "4a8f6b57adf6f1c21073e523b684529f301ea6b2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite (tau_is_uniform intruder evader t2 (t1 - t2) n).",
            "VernacExtend",
            "9937185bd72846332ec6a42d44f53dac4eb8fb9e"
        ],
        [
            "unfold Rminus in |- *.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "cut (0 <= - (t1 - t2))%R.",
            "VernacExtend",
            "493f7cbf3381c1ecd1ba636127b79f05ee219ecf"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (Rplus_lt_le_compat t (tau intruder evader t2) 0 (- (t1 - t2)) H H2).",
            "VernacExtend",
            "78df6726f33ec742e34dbf7b96981b3585a08a24"
        ],
        [
            "rewrite Rplus_0_r.",
            "VernacExtend",
            "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "rewrite <- Ropp_0.",
            "VernacExtend",
            "9b57276282263b89d6671472ad672c5763b57b55"
        ],
        [
            "apply Ropp_ge_le_contravar.",
            "VernacExtend",
            "2445c11f217e81db53e7f4c9cd6785fe138d34b0"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "apply Rplus_le_reg_l with t2.",
            "VernacExtend",
            "4bf1833ffda09d6bf9b8518686bef248938ec6b2"
        ],
        [
            "rewrite <- H1; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "77b9fd7b8414cfc7ed43a910fcdbbc21c38091bc"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tau_ge_time : forall (intruder evader : State) (t1 t2 t : R), (t <= tau intruder evader t2)%R -> (t1 <= t2)%R -> (t <= tau intruder evader t1)%R.",
            "VernacStartTheoremProof",
            "3a6ce3b4181f0f3abfce340a305a916b8ca6764c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (Req_EM_var (div_tau intruder evader) 0); intro.",
            "VernacExtend",
            "f2b8f7cc265b10c6f505c98e2cc48e79543a3a2f"
        ],
        [
            "rewrite (tau_equal_when_zero intruder evader t1 e).",
            "VernacExtend",
            "321947a5608e36c94116d8a49a5cf7aa484ba332"
        ],
        [
            "rewrite (tau_equal_when_zero intruder evader t2 e) in H.",
            "VernacExtend",
            "17d5efa2e502831cec15dbfb370f9da60202fedb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (t1 = (t2 + (t1 - t2))%R).",
            "VernacExtend",
            "4a8f6b57adf6f1c21073e523b684529f301ea6b2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite (tau_is_uniform intruder evader t2 (t1 - t2) n).",
            "VernacExtend",
            "9937185bd72846332ec6a42d44f53dac4eb8fb9e"
        ],
        [
            "unfold Rminus in |- *.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "cut (0 <= - (t1 - t2))%R.",
            "VernacExtend",
            "493f7cbf3381c1ecd1ba636127b79f05ee219ecf"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (Rplus_le_compat t (tau intruder evader t2) 0 (- (t1 - t2)) H H2).",
            "VernacExtend",
            "082ea6ec11d63b0fe3e2fa0e0f919be8c5aad3f7"
        ],
        [
            "rewrite Rplus_0_r.",
            "VernacExtend",
            "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "rewrite <- Ropp_0.",
            "VernacExtend",
            "9b57276282263b89d6671472ad672c5763b57b55"
        ],
        [
            "apply Ropp_ge_le_contravar.",
            "VernacExtend",
            "2445c11f217e81db53e7f4c9cd6785fe138d34b0"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "apply Rplus_le_reg_l with t2.",
            "VernacExtend",
            "4bf1833ffda09d6bf9b8518686bef248938ec6b2"
        ],
        [
            "rewrite <- H1; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "77b9fd7b8414cfc7ed43a910fcdbbc21c38091bc"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Req_EM_var",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; elim (total_order_T r1 r2); intros.",
                        "VernacExtend",
                        "88f7209a054068de7d1476443d33e83fdf5256e1"
                    ]
                },
                {
                    "command": [
                        "elim a; intro.",
                        "VernacExtend",
                        "063bbbd64cbdc7c6b7d4ec572823dbd9eca7c24a"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intro; rewrite H in a0; elim (Rlt_irrefl r2 a0).",
                        "VernacExtend",
                        "991f694528300162396562b60eebd4b612486798"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intro.",
                        "VernacExtend",
                        "78941758c4a1f041e58c485c593b5d261991cc32"
                    ]
                },
                {
                    "command": [
                        "rewrite H in b; elim (Rlt_irrefl r2 b).",
                        "VernacExtend",
                        "b52afcacecf3bc9c3689d647b7798bca420d27bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tau_tmin",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (tau intruder evader t = (- (dx intruder evader t * dxdt intruder + dy intruder evader t * dydt intruder) / div_tau intruder evader)%R).",
                        "VernacExtend",
                        "6dc3c6977f5b76f6995a821d51110193fe0cb04e"
                    ]
                },
                {
                    "command": [
                        "cut (tmin intruder evader = (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) / div_tau intruder evader)%R).",
                        "VernacExtend",
                        "dc3a554112e0b2f2c923418fca0daf6341fdd9da"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1.",
                        "VernacExtend",
                        "85e84d2667b53456606ab747d4b84d4de959182c"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in |- *.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "replace (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader - t)%R with (- (dxdt intruder * (xt intruder - xt evader + t * dxdt intruder) + dydt intruder * (yt intruder - yt evader + t * dydt intruder)) / div_tau intruder evader)%R.",
                        "VernacExtend",
                        "bfd3d843209299881e001baa22b05fddcbb59d16"
                    ]
                },
                {
                    "command": [
                        "cut ((xt intruder - xt evader + t * dxdt intruder)%R = dx intruder evader t).",
                        "VernacExtend",
                        "2dd8f599d2fb711494f0bfdb17da03343e813dab"
                    ]
                },
                {
                    "command": [
                        "cut ((yt intruder - yt evader + t * dydt intruder)%R = dy intruder evader t).",
                        "VernacExtend",
                        "9312dcb08eaf6ffc66f3420a0725a82da7969e57"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H2; rewrite H3; unfold Rdiv in |- *; rewrite (Rmult_comm (dx intruder evader t)); rewrite (Rmult_comm (dy intruder evader t)); reflexivity.",
                        "VernacExtend",
                        "e7e96c8bac5864143762e729620bb9ac74fb7885"
                    ]
                },
                {
                    "command": [
                        "unfold dydt, dy in |- *; ring.",
                        "VernacExtend",
                        "405cd3991f73d2d8fe6f25077e0e2e816e48c05b"
                    ]
                },
                {
                    "command": [
                        "unfold dxdt, dx in |- *; ring.",
                        "VernacExtend",
                        "80fea933f14143189ee45e2bf7575ed513231710"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in |- *; apply (Rmult_eq_reg_l (div_tau intruder evader)).",
                        "VernacExtend",
                        "3581330e6ec88592489f97a4cf49bddf681d520c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (div_tau intruder evader)); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "b4cacda239d100e41205c862f017f4fa1c875f74"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite (Rmult_comm (div_tau intruder evader)); replace ((- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader - t) * div_tau intruder evader)%R with (- (dxdt intruder * (xt intruder - xt evader) + dydt intruder * (yt intruder - yt evader)) * / div_tau intruder evader * div_tau intruder evader - t * div_tau intruder evader)%R.",
                        "VernacExtend",
                        "e9181d3a2090ea6545b237b0afb7dc30fb45032e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "0f4bb007eb96bbced433cf0b5f61451a3af2510c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; unfold div_tau in |- *; unfold Rsqr in |- *; ring.",
                        "VernacExtend",
                        "2ea49344f24f6aed540b4130ec6d9191bd094a77"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "symmetry in |- *; unfold Rminus in |- *; replace (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader + - t)%R with (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader + - t)%R.",
                        "VernacExtend",
                        "795211f06e53766c686facf78fc7622136c19e01"
                    ]
                },
                {
                    "command": [
                        "replace (- (t * div_tau intruder evader))%R with (- t * div_tau intruder evader)%R.",
                        "VernacExtend",
                        "e2a6714a800510e0dc137a9cf7195cbf59bef524"
                    ]
                },
                {
                    "command": [
                        "replace (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader * div_tau intruder evader)%R with (- (dxdt intruder * (xt intruder + - xt evader) + dydt intruder * (yt intruder + - yt evader)) * / div_tau intruder evader * div_tau intruder evader)%R.",
                        "VernacExtend",
                        "9c221ebd0ced739ffdc0390a56a383cd79113bd6"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_plus_distr_r.",
                        "VernacExtend",
                        "8c98c57567f4d25a67548755db4192ed5127ca43"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold tmin in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "25a39c20a3a3dc8977217eff151c65f9c15e7a60"
                    ]
                },
                {
                    "command": [
                        "rewrite e in H; elim H; reflexivity.",
                        "VernacExtend",
                        "d52c21f86da9f53fcba6929bea579a9d72e7c915"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold tau in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "0a15235aaf70e2f83680762c5eefbec049a95157"
                    ]
                },
                {
                    "command": [
                        "rewrite e in H; elim H; reflexivity.",
                        "VernacExtend",
                        "d52c21f86da9f53fcba6929bea579a9d72e7c915"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ax2_R_pos",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intro; unfold Ax2_R in |- *; apply Rplus_le_le_0_compat; apply Rle_0_sqr.",
                        "VernacExtend",
                        "8b85296d04a24f954f9df7eec97fa605604e36d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_R",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "intros; unfold RR in |- *; unfold dx, dy in |- *; rewrite Rsqr_sqrt; [ replace (xt intruder + t * intruderSpeed * cosd (heading intruder) - (xt evader + t * evaderSpeed))%R with ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t + (xt intruder - xt evader))%R; [ replace (yt intruder + t * intruderSpeed * sind (heading intruder) - yt evader)%R with (sind (heading intruder) * intruderSpeed * t + (yt intruder - yt evader))%R; [ repeat rewrite Rsqr_plus; repeat rewrite Rsqr_mult; unfold Ax2_R in |- *; apply Rplus_eq_reg_l with (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t)%R; replace (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + (Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed) * Rsqr t + Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + (Rsqr (sind (heading intruder)) * Rsqr intruderSpeed * Rsqr t + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))))%R with (Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))%R; [ replace (- (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + ((Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed)) * Rsqr t + Bx_R intruder evader * t + C_R intruder evader))%R with (Bx_R intruder evader * t + C_R intruder evader)%R; [ unfold C_R in |- *; apply Rplus_eq_reg_l with (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)))%R; replace (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)) + (Rsqr (xt intruder - xt evader) + 2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + Rsqr (yt intruder - yt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader)))%R with (2 * ((- evaderSpeed + cosd (heading intruder) * intruderSpeed) * t) * (xt intruder - xt evader) + 2 * (sind (heading intruder) * intruderSpeed * t) * (yt intruder - yt evader))%R; [ replace (- (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader)) + (Bx_R intruder evader * t + (Rsqr (yt intruder - yt evader) + Rsqr (xt intruder - xt evader))))%R with (Bx_R intruder evader * t)%R; [ unfold Bx_R in |- *; ring | ring ] | ring ] | ring ] | rewrite (Rsqr_mult (sind (heading intruder)) intruderSpeed); ring ] | ring ] | ring ] | apply Rplus_le_le_0_compat; apply Rle_0_sqr ].",
                        "VernacExtend",
                        "7b57fa60ca0bcb7d16019650459442250da84de4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tmin_0",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros; unfold tmin in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "97026d3ea895d5b103229fc29a11f6dd9b3e7b2e"
                    ]
                },
                {
                    "command": [
                        "elim H; assumption.",
                        "VernacExtend",
                        "208cbae6d4c505591733cd429d302ea8fd9c235a"
                    ]
                },
                {
                    "command": [
                        "unfold div_tau, Bx_R, Ax2_R in |- *; unfold dxdt, dydt in |- *; unfold Rdiv in |- *; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "6dbf4e0bb8b5315cb512728afbed32a310a4f5bf"
                    ]
                },
                {
                    "command": [
                        "replace (Rsqr (sind (heading intruder) * intruderSpeed) + Rsqr (- evaderSpeed + cosd (heading intruder) * intruderSpeed))%R with (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))%R.",
                        "VernacExtend",
                        "1e8e6d64197827b03789e73721a068df2a5abcf4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))%R.",
                        "VernacExtend",
                        "0a3f9d1854559ef1e0c993c439f7f66415377afa"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) ; repeat rewrite Rmult_assoc; rewrite <- (Rinv_l_sym (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) .",
                        "VernacExtend",
                        "908ff2eed4c79c2347441f1d9044cfcc8679b362"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite (Rmult_comm (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) ; repeat rewrite Rmult_assoc; rewrite <- (Rinv_l_sym (Rsqr (intruderSpeed * cosd (heading intruder) - evaderSpeed) + Rsqr (intruderSpeed * sind (heading intruder)))) .",
                        "VernacExtend",
                        "eec6e6b76543f2e9f4a1234e0d28f625f6b84cab"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; replace (- (-2 * (yt evader * (sind (heading intruder) * intruderSpeed)) + 2 * (yt intruder * (sind (heading intruder) * intruderSpeed)) - 2 * (cosd (heading intruder) * (xt evader * intruderSpeed)) + 2 * (cosd (heading intruder) * (xt intruder * intruderSpeed)) + 2 * (xt evader * evaderSpeed) - 2 * (xt intruder * evaderSpeed)))%R with ((yt evader * (sind (heading intruder) * intruderSpeed) - yt intruder * (sind (heading intruder) * intruderSpeed) + cosd (heading intruder) * (xt evader * intruderSpeed) - cosd (heading intruder) * (xt intruder * intruderSpeed) - xt evader * evaderSpeed + xt intruder * evaderSpeed) * 2)%R.",
                        "VernacExtend",
                        "e6a3b10cfb0cc87cb3fdf3fdd683c07b318bb9ad"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "0b65281e7d32463ce5a57ea87b8773ce73c38349"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; ring.",
                        "VernacExtend",
                        "d72f7b56cfc25cf0acb41025c9e309909283a3a4"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold div_tau in H; unfold dxdt, dydt in H; assumption.",
                        "VernacExtend",
                        "69e15720ff25b429cdfb6801eebdc5e1c2f42de0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut ((intruderSpeed * cosd (heading intruder) - evaderSpeed)%R = (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R).",
                        "VernacExtend",
                        "486260531df398a2f618faa3296a7bb8a083424f"
                    ]
                },
                {
                    "command": [
                        "cut ((intruderSpeed * sind (heading intruder))%R = (sind (heading intruder) * intruderSpeed)%R).",
                        "VernacExtend",
                        "0a979c3703b5082a29b3d75f00afc879cc116b33"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H0; rewrite H1; rewrite Rplus_comm; reflexivity.",
                        "VernacExtend",
                        "e493e722e416105915d751a7c31ddcdd2d0aa0c7"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "cut ((intruderSpeed * cosd (heading intruder) - evaderSpeed)%R = (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R).",
                        "VernacExtend",
                        "486260531df398a2f618faa3296a7bb8a083424f"
                    ]
                },
                {
                    "command": [
                        "cut ((intruderSpeed * sind (heading intruder))%R = (sind (heading intruder) * intruderSpeed)%R).",
                        "VernacExtend",
                        "0a979c3703b5082a29b3d75f00afc879cc116b33"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite <- H0; rewrite <- H1; rewrite Rplus_comm; assumption.",
                        "VernacExtend",
                        "c4048c86b1e23ae8b381a13733cdabe128d606bc"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ax2_R_0_div_tau",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "unfold div_tau, Ax2_R in |- *; intros; unfold dxdt, dydt in H; rewrite Rplus_comm; replace (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R with (intruderSpeed * cosd (heading intruder) - evaderSpeed)%R; [ rewrite (Rmult_comm (sind (heading intruder))); assumption | ring ].",
                        "VernacExtend",
                        "ddae43fae3ef0726004d5956c196df6e9e68d29d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "div_tau_0_Ax2_R",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "unfold div_tau, Ax2_R in |- *; intros; unfold dxdt, dydt in |- *; replace (intruderSpeed * cosd (heading intruder) - evaderSpeed)%R with (- evaderSpeed + cosd (heading intruder) * intruderSpeed)%R; [ rewrite <- (Rmult_comm (sind (heading intruder))); rewrite Rplus_comm; assumption | ring ].",
                        "VernacExtend",
                        "3b4eba8db247e146b089eb76741c224f1da0fefd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dx_dxdt",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros; unfold dxdt, dx in |- *; ring.",
                        "VernacExtend",
                        "52e7357024ae6798ad7fee46fa08a8fa84a90075"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dy_dydt",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros; unfold dydt, dy in |- *; ring.",
                        "VernacExtend",
                        "26b2140acc1c2d1ffa7b948377c37c54d563a6d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R_equal_when_zero",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros; unfold RR in |- *; unfold div_tau in H; generalize (Rplus_eq_R0 (Rsqr (dxdt intruder)) (Rsqr (dydt intruder)) (Rle_0_sqr (dxdt intruder)) (Rle_0_sqr (dydt intruder)) H); intro; elim H0; intros; generalize (Rsqr_eq_0 (dxdt intruder) H1); intro; generalize (Rsqr_eq_0 (dydt intruder) H2); intro; rewrite <- (dx_dxdt intruder evader t1); rewrite <- (dx_dxdt intruder evader t2); rewrite <- (dy_dydt intruder evader t1); rewrite <- (dy_dydt intruder evader t2); rewrite H3; rewrite H4; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; reflexivity.",
                        "VernacExtend",
                        "74cb8155d74092f2a2da590e5dff8eb2534a5783"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RR_pos",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "intros; unfold RR in |- *; apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr.",
                        "VernacExtend",
                        "8ff06c11b45efa03104637dd369f0b3befce3af4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivative_eq_zero_tmin",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
                    ]
                },
                {
                    "command": [
                        "right; apply (R_equal_when_zero intruder evader (tmin intruder evader) t e).",
                        "VernacExtend",
                        "81f00c6090b6abdc40558c8dfcbcf7fbb5e5debf"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_0.",
                        "VernacExtend",
                        "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite R_Rmin.",
                        "VernacExtend",
                        "ee833e42eb4418399a5f792a3eed796e745a558d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
                    ]
                },
                {
                    "command": [
                        "apply Ax2_R_pos.",
                        "VernacExtend",
                        "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; rewrite Rplus_opp_r; rewrite Rsqr_0; apply Rle_0_sqr.",
                        "VernacExtend",
                        "d2375a4d8d377429763b2e7731de7706052d05c7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivative_eq_zero_min",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t1 n); replace (t1 + (tmin intruder evader - t1))%R with (tmin intruder evader); [ apply derivative_eq_zero_tmin | ring ] ].",
                        "VernacExtend",
                        "98ccb034ece07ae95b0f2701d2e4359c8365d2b8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asymptotic_decrease_tmin",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
                    ]
                },
                {
                    "command": [
                        "right; apply (R_equal_when_zero intruder evader t2 t1 e).",
                        "VernacExtend",
                        "447c40068e071586def14bdf71dfe04b3ccf1459"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_0.",
                        "VernacExtend",
                        "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite R_Rmin.",
                        "VernacExtend",
                        "ee833e42eb4418399a5f792a3eed796e745a558d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
                    ]
                },
                {
                    "command": [
                        "apply Ax2_R_pos.",
                        "VernacExtend",
                        "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order (tmin intruder evader) t1); intro.",
                        "VernacExtend",
                        "34bba0861b42b62d4b132e8f7feca77ff1835972"
                    ]
                },
                {
                    "command": [
                        "generalize (Rle_lt_trans t2 (tmin intruder evader) t1 H H1); intro; elim (Rlt_irrefl t1 (Rle_lt_trans t1 t2 t1 H0 H2)).",
                        "VernacExtend",
                        "c33e8bc70e9fa03147dbe64d9496e9b35136ef50"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in H; generalize (Rle_antisym t1 t2 H0 H); intro; rewrite H3; right; reflexivity.",
                        "VernacExtend",
                        "84c410c67c96545543366d88f08894bd49c297de"
                    ]
                },
                {
                    "command": [
                        "rewrite Rsqr_neg; rewrite (Rsqr_neg (t1 - tmin intruder evader)); replace (- (t2 - tmin intruder evader))%R with (tmin intruder evader - t2)%R.",
                        "VernacExtend",
                        "3a064f28b4c347c175dbc4426489ae2fe59b3522"
                    ]
                },
                {
                    "command": [
                        "replace (- (t1 - tmin intruder evader))%R with (tmin intruder evader - t1)%R.",
                        "VernacExtend",
                        "9e06995dd19df568b5e85264231804e008f9c3d6"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_1.",
                        "VernacExtend",
                        "64ae3af2603c81607c9a07cf7aa8ad1285eefc50"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; apply Rplus_le_compat_l; apply Ropp_ge_le_contravar; apply Rle_ge; assumption.",
                        "VernacExtend",
                        "f2f4be4c760adcae5bd14c8f8d4367fe47973690"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with t2; rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "01651afab4b801e3ec3f8d8072f8c3371d085d61"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with t1; rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; apply Rle_trans with t2; assumption.",
                        "VernacExtend",
                        "e682a573c81df7542ad0ae7360270ea74575d0e1"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asymptotic_decrease_tau",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t n) in H; apply asymptotic_decrease_tmin; [ apply Rplus_le_reg_l with (- t)%R; repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; rewrite Rplus_comm; assumption | apply (Rplus_le_compat_l t t1 t2 H0) ] ].",
                        "VernacExtend",
                        "d96ba703b29c1398401e9d6397672f33f65d4b95"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asymptotic_increase_tmin",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "80145a87fcc16f2fdfdf4fb59037c224d132ba30"
                    ]
                },
                {
                    "command": [
                        "right; apply (R_equal_when_zero intruder evader t1 t2 e).",
                        "VernacExtend",
                        "84bf247adc6b539f475fd37ea80ca428a7317f59"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_0.",
                        "VernacExtend",
                        "fc52d69ec92a05266d7ef9c55d704e8ea9362c07"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite R_Rmin.",
                        "VernacExtend",
                        "ee833e42eb4418399a5f792a3eed796e745a558d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "c56114d66c4dc2b686f130e3250a16dc2ff4ea2b"
                    ]
                },
                {
                    "command": [
                        "apply Ax2_R_pos.",
                        "VernacExtend",
                        "6ee1c5bdb70465a239f70b22bdd04a9e7c31f51b"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_1.",
                        "VernacExtend",
                        "64ae3af2603c81607c9a07cf7aa8ad1285eefc50"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *; apply Rplus_le_compat_r; assumption.",
                        "VernacExtend",
                        "e02e22a056915eda98266b784dc6055206bb8fe2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (tmin intruder evader); rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "ab48869f393ad4a70dea485125d899f19b77e31f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (tmin intruder evader); rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus in |- *; repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; apply Rle_trans with t1; assumption.",
                        "VernacExtend",
                        "d6c9a1cbb80b5bbe6d9733b4aca006850dba18d0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "apply RR_pos.",
                        "VernacExtend",
                        "a5973527dcff4f44d3b0be3802a54bf86d35f3f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asymptotic_increase_tau",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ right; apply R_equal_when_zero; assumption | rewrite (tau_tmin intruder evader t n) in H; apply asymptotic_increase_tmin; [ apply Rplus_le_reg_l with (- t)%R; repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; rewrite Rplus_comm; assumption | apply (Rplus_le_compat_l t t1 t2 H0) ] ].",
                        "VernacExtend",
                        "b2197e0375a42418c1ca652edacf2dd481ddf0fc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tau_equal_when_zero",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "intros; unfold tau in |- *; case (Req_EM_var (div_tau intruder evader) 0); intro; [ reflexivity | elim n; exact H ].",
                        "VernacExtend",
                        "cc5d2542715f59f7d4288e7786a8b1cdb731be7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asymptotic_tau_gt",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "intros; case (Rtotal_order 0 (tau intruder evader t)); intro; [ assumption | cut (tau intruder evader t <= 0)%R; [ intro; elim H1; intro; generalize (asymptotic_increase_tau intruder evader t 0 dt H2 H); rewrite Rplus_0_r; intro; elim (Rlt_irrefl (RR intruder evader t) (Rle_lt_trans (RR intruder evader t) (RR intruder evader (t + dt)) (RR intruder evader t) H4 H0)) | elim H1; intro; [ right; symmetry in |- *; assumption | left; assumption ] ] ].",
                        "VernacExtend",
                        "f545e7a9dfe38c108b37dc92fd0b1f50252fac72"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tau_is_uniform",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "intros; case (Req_EM_var (div_tau intruder evader) 0); intro; [ elim H; exact e | repeat rewrite tau_tmin; [ ring | exact H | exact H ] ].",
                        "VernacExtend",
                        "d9b1c16e9c5631ab9b84f0555f03c3c1ae955f51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tau_gt_time",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "f2b8f7cc265b10c6f505c98e2cc48e79543a3a2f"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_equal_when_zero intruder evader t1 e).",
                        "VernacExtend",
                        "321947a5608e36c94116d8a49a5cf7aa484ba332"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_equal_when_zero intruder evader t2 e) in H.",
                        "VernacExtend",
                        "17d5efa2e502831cec15dbfb370f9da60202fedb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (t1 = (t2 + (t1 - t2))%R).",
                        "VernacExtend",
                        "4a8f6b57adf6f1c21073e523b684529f301ea6b2"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_is_uniform intruder evader t2 (t1 - t2) n).",
                        "VernacExtend",
                        "9937185bd72846332ec6a42d44f53dac4eb8fb9e"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *.",
                        "VernacExtend",
                        "be913ef3bb9103a3081d46d811769f83edb6f7a5"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= - (t1 - t2))%R.",
                        "VernacExtend",
                        "493f7cbf3381c1ecd1ba636127b79f05ee219ecf"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_lt_le_compat t (tau intruder evader t2) 0 (- (t1 - t2)) H H2).",
                        "VernacExtend",
                        "78df6726f33ec742e34dbf7b96981b3585a08a24"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r.",
                        "VernacExtend",
                        "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0.",
                        "VernacExtend",
                        "9b57276282263b89d6671472ad672c5763b57b55"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_ge_le_contravar.",
                        "VernacExtend",
                        "2445c11f217e81db53e7f4c9cd6785fe138d34b0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge.",
                        "VernacExtend",
                        "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with t2.",
                        "VernacExtend",
                        "4bf1833ffda09d6bf9b8518686bef248938ec6b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "77b9fd7b8414cfc7ed43a910fcdbbc21c38091bc"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tau_ge_time",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (Req_EM_var (div_tau intruder evader) 0); intro.",
                        "VernacExtend",
                        "f2b8f7cc265b10c6f505c98e2cc48e79543a3a2f"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_equal_when_zero intruder evader t1 e).",
                        "VernacExtend",
                        "321947a5608e36c94116d8a49a5cf7aa484ba332"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_equal_when_zero intruder evader t2 e) in H.",
                        "VernacExtend",
                        "17d5efa2e502831cec15dbfb370f9da60202fedb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (t1 = (t2 + (t1 - t2))%R).",
                        "VernacExtend",
                        "4a8f6b57adf6f1c21073e523b684529f301ea6b2"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite H1.",
                        "VernacExtend",
                        "91099f93f9346d13e3fc00550ba094ceac5333db"
                    ]
                },
                {
                    "command": [
                        "rewrite (tau_is_uniform intruder evader t2 (t1 - t2) n).",
                        "VernacExtend",
                        "9937185bd72846332ec6a42d44f53dac4eb8fb9e"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in |- *.",
                        "VernacExtend",
                        "be913ef3bb9103a3081d46d811769f83edb6f7a5"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= - (t1 - t2))%R.",
                        "VernacExtend",
                        "493f7cbf3381c1ecd1ba636127b79f05ee219ecf"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_le_compat t (tau intruder evader t2) 0 (- (t1 - t2)) H H2).",
                        "VernacExtend",
                        "082ea6ec11d63b0fe3e2fa0e0f919be8c5aad3f7"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r.",
                        "VernacExtend",
                        "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0.",
                        "VernacExtend",
                        "9b57276282263b89d6671472ad672c5763b57b55"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_ge_le_contravar.",
                        "VernacExtend",
                        "2445c11f217e81db53e7f4c9cd6785fe138d34b0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge.",
                        "VernacExtend",
                        "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with t2.",
                        "VernacExtend",
                        "4bf1833ffda09d6bf9b8518686bef248938ec6b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "77b9fd7b8414cfc7ed43a910fcdbbc21c38091bc"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}