{
    "filename": "alarm.v",
    "coq_project": "ails",
    "vernac_cmds": [
        [
            "Require Import Bool.",
            "VernacRequire",
            "a27d9a6c92262b970381301472e9a1100c206680"
        ],
        [
            "Require Import Reals.",
            "VernacRequire",
            "45681fd6487015ca7aa8c8e9b408e40e3103ca14"
        ],
        [
            "Require Import trajectory_const.",
            "VernacRequire",
            "2389ee65efa36a9e54251476c2bb8cdd2f692ae5"
        ],
        [
            "Require Import trajectory_def.",
            "VernacRequire",
            "2f188c3fa3e05ac565f1158a91cd827c10440d01"
        ],
        [
            "Require Import constants.",
            "VernacRequire",
            "7f70a36de744c5c16b3a666ff694ba115b3a3696"
        ],
        [
            "Require Import ycngftys.",
            "VernacRequire",
            "1bec4ead62a78494a948261b142be1f49bc369ea"
        ],
        [
            "Require Import ycngstys.",
            "VernacRequire",
            "b498bcc5e21208cb446cbbf22f0ca81b85091889"
        ],
        [
            "Require Import ails_def.",
            "VernacRequire",
            "955f7cd4d9fdc9484fbe4a19c07226c42f4a0d43"
        ],
        [
            "Require Import math_prop.",
            "VernacRequire",
            "1bffa6fd54b7a58e02745600390ca662137a0112"
        ],
        [
            "Require Import tau.",
            "VernacRequire",
            "27f60ee9c981bec92dac644933cb406c744a2532"
        ],
        [
            "Require Import ails.",
            "VernacRequire",
            "068eb39fb029394075d69e2b6be7771294c9bbfe"
        ],
        [
            "Require Import trajectory.",
            "VernacRequire",
            "52eee78f519fea827107a599076715ea3bc4e747"
        ],
        [
            "Require Import measure2state.",
            "VernacRequire",
            "c8bd7882be7b360ffcf23869c190d5746cc2dc8a"
        ],
        [
            "Require Import ails_trajectory.",
            "VernacRequire",
            "e27935bd5c42484a83d924e336eba7f227051041"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Lemma AlertRange_pos : (0 < AlertRange)%R.",
            "VernacStartTheoremProof",
            "736b4804fb411e5442020246d3c066c73bf7bddf"
        ],
        [
            "unfold AlertRange in |- *; prove_sup.",
            "VernacExtend",
            "b5187b53cb03d8b29331d806a7a2067da2501734"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma conflict_beta_theta : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> conflict intr evad T = true -> (beta intr evad T + thetat intr 0 <= MinBeta)%R \\/ (2 * PI - MinBeta < beta intr evad T + thetat intr 0)%R.",
            "VernacStartTheoremProof",
            "58db71025de1fcce917e619afbde8283d697069e"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr; intros; set (beta_p := beta intr evad T) in H1; set (thetat_p := thetat intr) in H1; set (l_p := l intr evad T) in H, H0; set (conflict_p := conflict intr evad) in H2; assert (hyp1 : r_V = r_vi intr)...",
            "VernacExtend",
            "294d5bf694d2acc344c12196466ed46753f67c70"
        ],
        [
            "unfold r_V, r_vi in |- *; unfold vi in |- *; rewrite hyp_intr...",
            "VernacExtend",
            "98d6a82a1704e518e4540b15c3017220453f477d"
        ],
        [
            "assert (hyp2 : rho_V = rho_vi intr)...",
            "VernacExtend",
            "bffbea6e08b01e8bc20b0d81834d8ff87c246c35"
        ],
        [
            "unfold rho_V, rho_vi in |- *; unfold vi in |- *; rewrite hyp_intr...",
            "VernacExtend",
            "6733a4076adf5acfb4f1d56d1cc8df1c9e02c467"
        ],
        [
            "case (Rtotal_order (beta_p + thetat_p 0%R) MinBeta); intro...",
            "VernacExtend",
            "8a1816462eb7ddcd828eb7db4ee0f70ab4d64479"
        ],
        [
            "left; left...",
            "VernacExtend",
            "f350c82fcf44bed9bd1673913f736a6bfd622890"
        ],
        [
            "elim H3; intro...",
            "VernacExtend",
            "9bf9dab2048cc05839789a1829b3cfaa128273a3"
        ],
        [
            "left; right...",
            "VernacExtend",
            "641c78aa631b3315c8f451bffe3eb470dec323bc"
        ],
        [
            "case (Rlt_le_dec (2 * PI - MinBeta) (beta_p + thetat_p 0%R)); intro...",
            "VernacExtend",
            "bca53851fec00f15799542a0034464d7f9b9a06a"
        ],
        [
            "right...",
            "VernacExtend",
            "812b278b3530fdc8b155b846f3e666d427661a31"
        ],
        [
            "assert (H5 := conflict_T_e_0 intr evad T H2)...",
            "VernacExtend",
            "95a5769abd6b4a3fe1e53ed1e6039d9a3e139850"
        ],
        [
            "cut (0 <= e intr evad T T)%R...",
            "VernacExtend",
            "9d3ff143a72e563748f427fdf875521da73a14b9"
        ],
        [
            "cut (0 <= ConflictRange)%R...",
            "VernacExtend",
            "37cc0378495a0250ef4b0c4139cdec947b1d2534"
        ],
        [
            "intros; assert (H8 := Rsqr_incr_1 (e intr evad T T) ConflictRange H5 H7 H6); unfold e in H8; rewrite isometric_evader in H8; rewrite Rsqr_sqrt in H8...",
            "VernacExtend",
            "9b04005a102393925c0e292e9dcd788c8c1cf7d6"
        ],
        [
            "change (MinBeta < beta_p + thetat_p 0)%R in H4; cut ((beta_p + thetat_p 0 < PI / 2)%R \\/ (3 * (PI / 2) < beta_p + thetat_p 0)%R)...",
            "VernacExtend",
            "3bd1e3ab198682f16697ff3d0c43698c98ba6e26"
        ],
        [
            "intro; elim H9; intro...",
            "VernacExtend",
            "b9175116e4ce792f957449b2434bc4f7be280d69"
        ],
        [
            "cut (l_p * sin (beta_p + thetat_p 0) + r_V * (cos (rho_V * T) - 1) <= yp intr evad T T)%R...",
            "VernacExtend",
            "fbf84eaa0412249d444ef078bd715ae072e4bece"
        ],
        [
            "cut (r_V * sin (rho_V * T) - l_p * cos (beta_p + thetat_p 0) <= xp intr evad T T)%R...",
            "VernacExtend",
            "8fe8385759917d005a7e9d65c56c14127727bbae"
        ],
        [
            "intros; generalize (Math_prop_no_conflict_1 (beta_p + thetat_p 0%R) l_p (xp intr evad T T) (yp intr evad T T) T H H0 (Rlt_le MinBeta (beta_p + thetat_p 0%R) H4) (Rlt_le (beta_p + thetat_p 0%R) (PI / 2) H10) H12 H11); intro; generalize (Rlt_le_trans (Rsqr ConflictRange) (Rsqr (xp intr evad T T) + Rsqr (yp intr evad T T)) (Rsqr ConflictRange) H13 H8); intro; elim (Rlt_irrefl (Rsqr ConflictRange) H14)...",
            "VernacExtend",
            "5eb26b1ddf15ac22f577cd51eb67208227538abf"
        ],
        [
            "rewrite hyp1; rewrite hyp2...",
            "VernacExtend",
            "d996000aaba021c10c745bf110d35ac2fe980188"
        ],
        [
            "apply (xpt_PI intr evad T)...",
            "VernacExtend",
            "188f7f0774cbd74edf04cbac365b2790095c5b23"
        ],
        [
            "left; apply Rlt_le_trans with MinT; [ apply MinT_is_pos | apply (cond_1 T) ]...",
            "VernacExtend",
            "331f2dce75826d4ec6676fe70f5078a1a7821512"
        ],
        [
            "rewrite <- hyp2; left; apply Rlt_trans with (PI / 2)%R...",
            "VernacExtend",
            "821f660f6eb083aab16ff090bd70c5973a55afe1"
        ],
        [
            "apply rho_t_PI2...",
            "VernacExtend",
            "94210fef8e80235c1b170300c82903ee2d1c087a"
        ],
        [
            "apply PI2_Rlt_PI...",
            "VernacExtend",
            "704d55a00838a63122fba50bd87e9a0a349940ed"
        ],
        [
            "rewrite hyp1; rewrite hyp2; cut (0 <= T)%R...",
            "VernacExtend",
            "2c50bcfc17a0724085ae980c97d57027cfdc337e"
        ],
        [
            "cut (rho_vi intr * T <= PI / 2)%R...",
            "VernacExtend",
            "a5b5850ac1ef6ebe1a37dba7b00f9f51bfdb748c"
        ],
        [
            "intros; generalize (ypt_PI2 intr evad T T H12 H11); intro...",
            "VernacExtend",
            "39a5a8d2cd417dd2320f2e6ca69ece774df2997e"
        ],
        [
            "elim H13; intros...",
            "VernacExtend",
            "2ddbecdfb26b9157688f6c53e296f518e2432283"
        ],
        [
            "rewrite <- hyp2; left; apply rho_t_PI2...",
            "VernacExtend",
            "5543056b7c436b94d153720fd0ccf7116679dc74"
        ],
        [
            "left; apply Rlt_le_trans with MinT; [ apply MinT_is_pos | apply (cond_1 T) ]...",
            "VernacExtend",
            "331f2dce75826d4ec6676fe70f5078a1a7821512"
        ],
        [
            "cut (yp intr evad T T <= l_p * sin (beta_p + thetat_p 0) - r_V * (cos (rho_V * T) - 1))%R...",
            "VernacExtend",
            "c5ecd6d2b8262b294168dfc94bf3a93d41537b8a"
        ],
        [
            "cut (r_V * sin (rho_V * T) - l_p * cos (beta_p + thetat_p 0) <= xp intr evad T T)%R...",
            "VernacExtend",
            "8fe8385759917d005a7e9d65c56c14127727bbae"
        ],
        [
            "intros; generalize (Math_prop_no_conflict_2 (beta_p + thetat_p 0%R) l_p (xp intr evad T T) (yp intr evad T T) T H H0 (Rlt_le (3 * (PI / 2)) (beta_p + thetat_p 0%R) H10) r H12 H11); intro...",
            "VernacExtend",
            "2863fedff0b01b8286201a180ecf2608e3857685"
        ],
        [
            "elim (Rlt_irrefl (Rsqr ConflictRange) (Rlt_le_trans (Rsqr ConflictRange) (Rsqr (xp intr evad T T) + Rsqr (yp intr evad T T)) (Rsqr ConflictRange) H13 H8))...",
            "VernacExtend",
            "e21f2050ba585e58309f1446dfd341b12bbd5ee5"
        ],
        [
            "rewrite hyp1; rewrite hyp2; apply (xpt_PI intr evad T)...",
            "VernacExtend",
            "10017524730bff0076a4df34d123b3045751bb11"
        ],
        [
            "left; apply Rlt_le_trans with MinT; [ apply MinT_is_pos | apply (cond_1 T) ]...",
            "VernacExtend",
            "331f2dce75826d4ec6676fe70f5078a1a7821512"
        ],
        [
            "rewrite <- hyp2; left; apply Rlt_trans with (PI / 2)%R...",
            "VernacExtend",
            "821f660f6eb083aab16ff090bd70c5973a55afe1"
        ],
        [
            "apply rho_t_PI2...",
            "VernacExtend",
            "94210fef8e80235c1b170300c82903ee2d1c087a"
        ],
        [
            "apply PI2_Rlt_PI...",
            "VernacExtend",
            "704d55a00838a63122fba50bd87e9a0a349940ed"
        ],
        [
            "rewrite hyp1; rewrite hyp2; cut (0 <= T)%R...",
            "VernacExtend",
            "2c50bcfc17a0724085ae980c97d57027cfdc337e"
        ],
        [
            "cut (rho_vi intr * T <= PI / 2)%R...",
            "VernacExtend",
            "a5b5850ac1ef6ebe1a37dba7b00f9f51bfdb748c"
        ],
        [
            "intros; generalize (ypt_PI2 intr evad T T H12 H11); intro; elim H13; intros...",
            "VernacExtend",
            "6fc4836ce15f6544b293b2b942279251265c59c5"
        ],
        [
            "rewrite <- hyp2; left; apply rho_t_PI2...",
            "VernacExtend",
            "5543056b7c436b94d153720fd0ccf7116679dc74"
        ],
        [
            "left; apply Rlt_le_trans with MinT; [ apply MinT_is_pos | apply (cond_1 T) ]...",
            "VernacExtend",
            "331f2dce75826d4ec6676fe70f5078a1a7821512"
        ],
        [
            "cut (Omega (beta_p + thetat_p 0%R) = false)...",
            "VernacExtend",
            "c127fffea49edc4b14d1be84436c0f2027f3a93b"
        ],
        [
            "unfold Omega in |- *; case (Rle_dec (PI / 2) (beta_p + thetat_p 0%R)); intro...",
            "VernacExtend",
            "62eea91c67a99597c7a8e1561263ba5009fafbc0"
        ],
        [
            "case (Rle_dec (beta_p + thetat_p 0%R) (3 * (PI / 2))); intros...",
            "VernacExtend",
            "76e3fc1008b726d9ddd01c69d01c48ad4fbda7c7"
        ],
        [
            "elim diff_true_false...",
            "VernacExtend",
            "17067be540544ed1ecd3cd6855864aa26b2c265e"
        ],
        [
            "right; auto with real...",
            "VernacExtend",
            "e226684f3e364a842b06b22f38b87e9a7c07c077"
        ],
        [
            "intro; left; auto with real...",
            "VernacExtend",
            "d9dae476525284612a18084255108f4aabe43267"
        ],
        [
            "apply Rplus_le_le_0_compat; apply Rle_0_sqr...",
            "VernacExtend",
            "05aa911b7554891dd86db88a1216732ac719fe56"
        ],
        [
            "unfold ConflictRange in |- *; left; prove_sup...",
            "VernacExtend",
            "cdc2d72f3321c82b87a1c2d0d8949de415cdff16"
        ],
        [
            "unfold e in |- *; apply sqrt_positivity; apply Rsqr_evader_distance_pos...",
            "VernacExtend",
            "0c5e660540101e28dc3e31b88654ec1d4062700c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alarm_NOT_Omega_T : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> h (tr evad) = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> conflict intr evad T = true -> (RR (measure2state intr 0) (measure2state (tr evad) 0) T <= AlertRange)%R.",
            "VernacStartTheoremProof",
            "ebc7a77f0c3c1c546153e77f939747ddc897fa2b"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr hyp_evad; intros; apply Rsqr_incr_0_var...",
            "VernacExtend",
            "94656627d32f343a77e8032990b58999cffcf67b"
        ],
        [
            "rewrite R_T...",
            "VernacExtend",
            "993dec334cdcd795e9d5b78198189aa6e020b4ad"
        ],
        [
            "generalize (conflict_beta_theta intr evad T hyp_intr H H0 H1 H2); intro; elim H3; intro...",
            "VernacExtend",
            "32720f9ad935100bc5b5eb4124b4d50f0285c06e"
        ],
        [
            "cut (0 <= beta intr evad T + thetat intr 0)%R...",
            "VernacExtend",
            "cff33e500fd21337916887cd4a8264f0c5931db9"
        ],
        [
            "intro; apply (Math_prop_alarm_1 (beta intr evad T + thetat intr 0) (l intr evad T) T H H0 H5 H4)...",
            "VernacExtend",
            "5211ffd169b8caaf288d96f86782c1dd58c4c314"
        ],
        [
            "generalize (beta_def intr evad T); intro; decompose [and] H5; intros...",
            "VernacExtend",
            "339769df2be15ed2df214a7babbbdae7307f95c0"
        ],
        [
            "cut (beta intr evad T + thetat intr 0 <= 2 * PI)%R...",
            "VernacExtend",
            "4b40d21627ee0c294ba277c0deb5b06bd8e99d21"
        ],
        [
            "intro; apply (Math_prop_alarm_2 (beta intr evad T + thetat intr 0) (l intr evad T) T H H0 (Rlt_le (2 * PI - MinBeta) (beta intr evad T + thetat intr 0) H4))...",
            "VernacExtend",
            "c8abb9b31541ce74506d34961f0357d34e3bf712"
        ],
        [
            "generalize (beta_def intr evad T); intro; decompose [and] H5; intros; left...",
            "VernacExtend",
            "c116cf22745a2afd754700f8eb44fa4a80c0ba9b"
        ],
        [
            "left; apply AlertRange_pos...",
            "VernacExtend",
            "faf17cb2f297d336ae5cf8320cd9b0eb882bdb86"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alarm_NOT_Omega_tau : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> h (tr evad) = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> conflict intr evad T = true -> (0 < tau (measure2state intr 0) (measure2state (tr evad) 0) 0)%R -> (RR (measure2state intr 0) (measure2state (tr evad) 0) (tau (measure2state intr 0) (measure2state (tr evad) 0) 0) <= AlertRange)%R.",
            "VernacStartTheoremProof",
            "0a1bf0f5ad73c2a7f1643d9e28e465cba1b67cc7"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr hyp_evad; intros; apply Rle_trans with (RR (measure2state intr 0) (measure2state (tr evad) 0) T)...",
            "VernacExtend",
            "a0553bc5bfa303a01e34183e508a93599ae30c2e"
        ],
        [
            "generalize (derivative_eq_zero_min (measure2state intr 0) (measure2state (tr evad) 0) 0 T); repeat rewrite Rplus_0_l; intro...",
            "VernacExtend",
            "5a16e27c727cdeb714dd203d685afded1ddfc4d1"
        ],
        [
            "apply (alarm_NOT_Omega_T intr evad T hyp_intr hyp_evad H H0 H1 H2)...",
            "VernacExtend",
            "de599591305f0a3b4ce8b51401552c4fc774ab59"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alarm_NOT_Omega_AlertTime : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> h (tr evad) = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> conflict intr evad T = true -> (AlertTime < tau (measure2state intr 0) (measure2state (tr evad) 0) 0)%R -> (RR (measure2state intr 0) (measure2state (tr evad) 0) AlertTime <= AlertRange)%R.",
            "VernacStartTheoremProof",
            "79c9f178541819733d0f14c15d46d77b90c224a9"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr hyp_evad; intros; apply Rle_trans with (RR (measure2state intr 0) (measure2state (tr evad) 0) T)...",
            "VernacExtend",
            "a0553bc5bfa303a01e34183e508a93599ae30c2e"
        ],
        [
            "rewrite <- (Rplus_0_l AlertTime); rewrite <- (Rplus_0_l T); apply asymptotic_decrease_tau...",
            "VernacExtend",
            "544a5c69bcd5b3287fae472678ad14d8891e9329"
        ],
        [
            "left...",
            "VernacExtend",
            "bf4fd72477fff45e0940a41f06078165174dbd25"
        ],
        [
            "unfold AlertTime in |- *; apply Rle_trans with MaxT...",
            "VernacExtend",
            "1fc413a064665439cfb2986c895956e78b6f1732"
        ],
        [
            "apply (cond_2 T)...",
            "VernacExtend",
            "76e07de8d5b01366026855ea9571e3f5e5131e2a"
        ],
        [
            "unfold MaxT in |- *; left; prove_sup...",
            "VernacExtend",
            "957f3e9f9ad148e85a326c6f55dc72a91c49c17b"
        ],
        [
            "apply (alarm_NOT_Omega_T _ _ _ hyp_intr hyp_evad H H0 H1 H2)...",
            "VernacExtend",
            "2b4a41e035afbcf6983997e827cadaff6bdad1e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chktrack_NOT_Omega_trkrate_eq_0 : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> h (tr evad) = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> conflict intr evad T = true -> (0 < tau (measure2state intr 0) (measure2state (tr evad) 0) 0)%R -> chktrack (measure2state intr 0) (measure2state (tr evad) 0) 0.",
            "VernacStartTheoremProof",
            "01b2e5384a5f9bf0f79829b0bd0ecbf51fe6c36d"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr hyp_evad; intros; unfold chktrack in |- *; case (Rle_dec (tau (measure2state intr 0) (measure2state (tr evad) 0) 0) 0); intro...",
            "VernacExtend",
            "c0512d2571422517cfec3946c92fde6d939790fd"
        ],
        [
            "elim (Rlt_irrefl 0 (Rlt_le_trans 0 (tau (measure2state intr 0) (measure2state (tr evad) 0) 0) 0 H3 r))...",
            "VernacExtend",
            "121dce38282500028a7fe1664a89b750d39f3aa6"
        ],
        [
            "rewrite Rplus_0_l; case (Rlt_dec AlertTime (tau (measure2state intr 0) (measure2state (tr evad) 0) 0)); intro...",
            "VernacExtend",
            "16b41f7ea9669106c9e1252d192e8c6b2b231b30"
        ],
        [
            "apply (alarm_NOT_Omega_AlertTime intr evad T)...",
            "VernacExtend",
            "dac65a77cdf4df072cb662a0454ee35238366d5c"
        ],
        [
            "apply (alarm_NOT_Omega_tau intr evad T)...",
            "VernacExtend",
            "cee72c7f5c7a621d24a14e0f19be972ea7176e04"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ails_alarm_tau_gt0 : forall (intr : Trajectory) (evad : EvaderTrajectory) (T : TimeT), h intr = V -> h (tr evad) = V -> (MinDistance T <= l intr evad T)%R -> (l intr evad T <= MaxDistance T)%R -> Omega (beta intr evad T + thetat intr 0) = false -> (0 < tau (measure2state intr 0) (measure2state (tr evad) 0) 0)%R -> conflict intr evad T = true -> ails_alert (measure2state intr 0) (measure2state (tr evad) 0).",
            "VernacStartTheoremProof",
            "68bb1296bb49ae2c17f1f7252ea095edb5ecefce"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros intr evad T hyp_intr hyp_evad; intros; unfold ails_alert in |- *; case (Req_EM_var (trkrate (bank (measure2state intr 0))) 0); intro...",
            "VernacExtend",
            "4cebc61156f79c4926205908e9986aaae91a209d"
        ],
        [
            "apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "aa7eef25a12ece18a1d6d9044f3dc1b5c80be2ce"
        ],
        [
            "case (Rle_dec 3 (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "e37a784c0b62f90654ced3c7eb2876000490d8d9"
        ],
        [
            "unfold arc_loop in |- *; rewrite mod_eq_0...",
            "VernacExtend",
            "c64f5c5eedfb7740ef6e4de2c86a105823e47cf0"
        ],
        [
            "case (Rlt_le_dec 0 (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "a9781d2d9255fbedb0f061ee4402d99a2b90fb8a"
        ],
        [
            "unfold INR in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold intruderSpeed in |- *; replace (v V) with 250%R...",
            "VernacExtend",
            "80f50dacd5a0de24d5c434d436b5f5aed533c5f9"
        ],
        [
            "cut (let z := 250%R in mkState (xt (measure2state intr 0) + Rsqr z / (g * tand (bank (measure2state intr 0))) * (sind (heading (measure2state intr 0)) - sind (heading (measure2state intr 0)))) (yt (measure2state intr 0) + Rsqr z / (g * tand (bank (measure2state intr 0))) * (cosd (heading (measure2state intr 0)) - cosd (heading (measure2state intr 0)))) (heading (measure2state intr 0)) (bank (measure2state intr 0)) = measure2state intr 0)...",
            "VernacExtend",
            "e9c5d38474fe2728382797a411cb547a6b668697"
        ],
        [
            "intro; rewrite H4...",
            "VernacExtend",
            "0f90ba6eca930220f3c6ab132eabde4371fcd76c"
        ],
        [
            "cut (mkState (xt (measure2state (tr evad) 0)) (yt (measure2state (tr evad) 0)) (heading (measure2state (tr evad) 0)) (bank (measure2state (tr evad) 0)) = measure2state (tr evad) 0)...",
            "VernacExtend",
            "9c751c72dc18788772402af42f7b3f21c85e0832"
        ],
        [
            "intro; rewrite H5...",
            "VernacExtend",
            "72e35d44291cf2ab4262f660ac2fc2336256c081"
        ],
        [
            "apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "aa7eef25a12ece18a1d6d9044f3dc1b5c80be2ce"
        ],
        [
            "unfold Rminus in |- *; repeat rewrite Rplus_opp_r; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "b3171b746c7457ae3919d1d8862aab2ece721d93"
        ],
        [
            "unfold INR in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "227b4331c6d204e7838a7ce17ba6001f77eddf3b"
        ],
        [
            "case (Rle_dec (3 / 2) (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "07fc9e7c9d7945f5df44ed630d5d3205d232f921"
        ],
        [
            "unfold arc_loop in |- *; rewrite mod_eq_0; case (Rlt_le_dec 0 (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "f9adcef2daae96fd112eaea64a08d843a51001d4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "case (Rle_dec (3 / 4) (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "4c8ddcef93e94c5e4e1dde4c37afd25cb1536eab"
        ],
        [
            "unfold arc_loop in |- *; rewrite mod_eq_0; case (Rlt_le_dec 0 (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "f9adcef2daae96fd112eaea64a08d843a51001d4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "unfold arc_loop in |- *; rewrite mod_eq_0; case (Rlt_le_dec 0 (trkrate (bank (measure2state intr 0)))); intro...",
            "VernacExtend",
            "f9adcef2daae96fd112eaea64a08d843a51001d4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; unfold Rdiv in |- *; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; apply (chktrack_NOT_Omega_trkrate_eq_0 intr evad T)...",
            "VernacExtend",
            "05bfee83703dc59631a29f1426812a6afbfe62c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "AlertRange_pos",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "unfold AlertRange in |- *; prove_sup.",
                        "VernacExtend",
                        "b5187b53cb03d8b29331d806a7a2067da2501734"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}