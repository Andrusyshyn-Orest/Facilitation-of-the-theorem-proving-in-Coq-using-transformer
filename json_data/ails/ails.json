{
    "filename": "ails.v",
    "coq_project": "ails",
    "vernac_cmds": [
        [
            "Require Import Reals.",
            "VernacRequire",
            "45681fd6487015ca7aa8c8e9b408e40e3103ca14"
        ],
        [
            "Require Import trajectory_const.",
            "VernacRequire",
            "2389ee65efa36a9e54251476c2bb8cdd2f692ae5"
        ],
        [
            "Require Import constants.",
            "VernacRequire",
            "7f70a36de744c5c16b3a666ff694ba115b3a3696"
        ],
        [
            "Require Import ails_def.",
            "VernacRequire",
            "955f7cd4d9fdc9484fbe4a19c07226c42f4a0d43"
        ],
        [
            "Require Import tau.",
            "VernacRequire",
            "27f60ee9c981bec92dac644933cb406c744a2532"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Fixpoint rest (p r s n : nat) {struct n} : nat := match n with | O => r | S n' => match s with | O => 0 | S O => rest p 0 p n' | S s' => rest p (S r) s' n' end end.",
            "VernacFixpoint",
            "fd513c91e53670690d86e6a2034e16c991cd2857"
        ],
        [
            "Definition mod_ (m n : nat) : nat := rest n 0 n m.",
            "VernacDefinition",
            "04e94b324eaf67ccf675aa5fce440fc2e701636e"
        ],
        [
            "Lemma mod_eq_0 : forall m : nat, mod_ 0 m = 0.",
            "VernacStartTheoremProof",
            "0e855188882a9505bf60e2716913abd96d2f7db8"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intro m; unfold mod_ in |- *; unfold rest in |- *...",
            "VernacExtend",
            "6cb796b690a27553965e274ab55f113d13e6e275"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition trkrate (phi : Bank) : R := toDeg (g * (tand phi / v intruderSpeed)).",
            "VernacDefinition",
            "8f568534fefe2d40167ff9246c4cfd478ff2d322"
        ],
        [
            "Lemma cond1_0 : (- toDeg MaxBank <= 0)%R.",
            "VernacStartTheoremProof",
            "a255c99299a35532948a116e595cc7c0aecadcfb"
        ],
        [
            "left; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold toDeg in |- *; repeat simple apply Rmult_lt_0_compat.",
            "VernacExtend",
            "fca707fcd5279f2e837d679e3ab0ac936e898e6d"
        ],
        [
            "unfold MaxBank in |- *; unfold Rdiv in |- *; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "35fbc1b3cf52032c3828adf0e1eb9067e5c9414e"
        ],
        [
            "prove_sup.",
            "VernacExtend",
            "57e294f00a65db3fc7f5dddeca8e78f99f4a4330"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup.",
            "VernacExtend",
            "f8cbca7f45a499249620f085b2ee2851cca7de7f"
        ],
        [
            "unfold plat in |- *; prove_sup.",
            "VernacExtend",
            "de0b73fd9052205ee591780d6c31f26f802e80f7"
        ],
        [
            "apply Rinv_0_lt_compat; apply PI_RGT_0.",
            "VernacExtend",
            "aa3616593dde0fb22305d4421f4ee44097006e01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cond2_0 : (0 <= toDeg MaxBank)%R.",
            "VernacStartTheoremProof",
            "1fbf6ac3f9846d8c94bcea6c1cc3bb4c8e411043"
        ],
        [
            "left; unfold toDeg in |- *; repeat simple apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c6f93254196230889f757aa678d04bd5216d36e8"
        ],
        [
            "unfold MaxBank in |- *; unfold Rdiv in |- *; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "35fbc1b3cf52032c3828adf0e1eb9067e5c9414e"
        ],
        [
            "prove_sup.",
            "VernacExtend",
            "57e294f00a65db3fc7f5dddeca8e78f99f4a4330"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup.",
            "VernacExtend",
            "f8cbca7f45a499249620f085b2ee2851cca7de7f"
        ],
        [
            "unfold plat in |- *; prove_sup.",
            "VernacExtend",
            "de0b73fd9052205ee591780d6c31f26f802e80f7"
        ],
        [
            "apply Rinv_0_lt_compat; apply PI_RGT_0.",
            "VernacExtend",
            "aa3616593dde0fb22305d4421f4ee44097006e01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trkrate0 : trkrate (mkBank 0 cond1_0 cond2_0) = 0%R.",
            "VernacStartTheoremProof",
            "af9e5b3285056080e6a2c2cd431d82ca41860685"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "unfold trkrate in |- *; replace (r (mkBank 0 cond1_0 cond2_0)) with 0%R...",
            "VernacExtend",
            "81c1383bc99d910a5c517c43065608c1143c4aff"
        ],
        [
            "unfold toDeg, tand in |- *; unfold toRad in |- *; repeat rewrite Rmult_0_l; rewrite tan_0; unfold Rdiv in |- *; repeat rewrite Rmult_assoc; repeat rewrite Rmult_0_l; apply Rmult_0_r...",
            "VernacExtend",
            "cade266988de570c74eec53831745a98be359104"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition distance (s1 s2 : State) : R := sqrt (Rsqr (xt s2 - xt s1) + Rsqr (yt s2 - yt s1)).",
            "VernacDefinition",
            "d7678f95f47bf9e04de42661c1a7e5a9f4aaf9f3"
        ],
        [
            "Lemma distance_sym : forall s1 s2 : State, distance s1 s2 = distance s2 s1.",
            "VernacStartTheoremProof",
            "d36fe9c43994a8c9bd4a9e9235b3ff070797a2b9"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros; unfold distance in |- *; rewrite (Rsqr_neg (xt s2 - xt s1)); rewrite (Rsqr_neg (yt s2 - yt s1)); repeat rewrite Ropp_minus_distr...",
            "VernacExtend",
            "4b3b6c2b2f72a0b5ab904a07dfd3cb54fad4ecfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition alerting_distance (s1 s2 : State) : Prop := (distance s1 s2 <= AlertRange)%R.",
            "VernacDefinition",
            "ca979fa6aed9a55f60fb9a50a12f23f96a592aa4"
        ],
        [
            "Definition conflict_distance (s1 s2 : State) : Prop := (distance s1 s2 <= ConflictRange)%R.",
            "VernacDefinition",
            "2f81a1bb700cbe7d08b38fcb5eca6c47661326f0"
        ],
        [
            "Definition chkrange (range tpred : R) : Prop := (range <= AlertRange)%R /\\ (tpred <= AlertTime)%R.",
            "VernacDefinition",
            "6c594c8e7c2700c43c500b1411fe444f26558140"
        ],
        [
            "Definition chktrack (intruder evader : State) (tpred : R) : Prop := let tau := tau intruder evader 0 in match Rle_dec tau 0 with | left _ => chkrange (RR intruder evader 0) tpred | right _ => match Rlt_dec AlertTime (tpred + tau) with | left _ => (RR intruder evader AlertTime <= AlertRange)%R | right _ => (RR intruder evader tau <= AlertRange)%R end end.",
            "VernacDefinition",
            "e83b53b69c407ffaf6622964991b873482a19986"
        ],
        [
            "Definition arc_loop (intruder evader : State) (arcrad trkrate : R) (idtrk iarc : nat) : Prop := match iarc with | S p => False | O => let tpred := (INR iarc * tstep)%R in let xloc := (xt evader + v evaderSpeed * tpred)%R in let yloc := yt evader in let xtrk := match Rlt_le_dec 0 trkrate with | left _ => (xt intruder + arcrad * (sind (heading intruder + trkrate * tpred) - sind (heading intruder)))%R | right _ => (xt intruder + arcrad * (sind (heading intruder) - sind (heading intruder) + trkrate * tpred))%R end in let ytrk := match Rlt_le_dec 0 trkrate with | left _ => (yt intruder + arcrad * (cosd (heading intruder) - cosd (heading intruder + trkrate * tpred)))%R | right _ => (yt intruder + arcrad * (cosd (heading intruder + trkrate * tpred) - cosd (heading intruder)))%R end in match mod_ iarc idtrk with | O => let tantrk := (heading intruder + tpred * trkrate)%R in let int := mkState xtrk ytrk tantrk (bank intruder) in let eva := mkState xloc yloc (heading evader) (bank evader) in chktrack int eva tpred | _ => let range := sqrt (Rsqr (xtrk - xloc) + Rsqr (ytrk - yloc)) in chkrange range tpred end end.",
            "VernacDefinition",
            "dfe369856248db2e548921a082a5058c8450010d"
        ],
        [
            "Definition ails_alert (intruder evader : State) : Prop := let phi := bank intruder in let trkrate := trkrate phi in match Req_EM_var trkrate 0 with | left _ => chktrack intruder evader 0 | right _ => let arcrad := (Rsqr (v intruderSpeed) / (g * tand (r phi)))%R in let idtrk := match Rle_dec 3 trkrate with | left _ => 1 | right _ => match Rle_dec (3 / 2) trkrate with | left _ => 2 | right _ => match Rle_dec (3 / 4) trkrate with | left _ => 4 | right _ => 8 end end end in arc_loop intruder evader arcrad trkrate idtrk 0 end.",
            "VernacDefinition",
            "42c2e2ee92f5a04d8cbec59a7eb654d0918e5a49"
        ],
        [
            "Lemma R_distance : forall intruder evader : State, RR intruder evader 0 = distance intruder evader.",
            "VernacStartTheoremProof",
            "66dd742988dff4ec62024e346cc7cf83c153a8be"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros; unfold RR, distance in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r; rewrite (Rsqr_neg (xt intruder - xt evader)); rewrite (Rsqr_neg (yt intruder - yt evader)); repeat rewrite Ropp_minus_distr...",
            "VernacExtend",
            "90742f1c3b8da2853173201371cbabb536f0ce16"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma step1 : forall evader intruder : State, alerting_distance evader intruder -> chktrack intruder evader 0.",
            "VernacStartTheoremProof",
            "599bf22b36bfd541f38f4aacb798295f2983fce6"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros; unfold alerting_distance in H; unfold chktrack in |- *; case (Rle_dec (tau intruder evader 0) 0); intro...",
            "VernacExtend",
            "0016bc862e9fc29a7e2fad17377467826fe52a67"
        ],
        [
            "unfold chkrange in |- *; split...",
            "VernacExtend",
            "f62b835fb9a2ad62acc342f7fa39365eb19c9217"
        ],
        [
            "rewrite R_distance; rewrite distance_sym...",
            "VernacExtend",
            "ce250a0be696f3423dd275ff87221f72b2e7d88f"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "case (Rlt_dec AlertTime (0 + tau intruder evader 0)); intro...",
            "VernacExtend",
            "97b464c5669ce28a3596f424d40543165d9034f9"
        ],
        [
            "rewrite Rplus_0_l in r; cut (0 <= AlertTime)%R...",
            "VernacExtend",
            "5697354ac5f85db25f33ba434a8d532d0ed156e3"
        ],
        [
            "intro; assert (H1 := asymptotic_decrease_tau intruder evader 0 0 AlertTime (Rlt_le AlertTime (tau intruder evader 0) r) H0); repeat rewrite Rplus_0_l in H1; rewrite R_distance in H1; rewrite distance_sym in H1; apply Rle_trans with (distance evader intruder)...",
            "VernacExtend",
            "9be5a1f974bd341b6b75d90048e1842c7ff2427e"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "assert (H0 := derivative_eq_zero_min intruder evader 0 0); repeat rewrite Rplus_0_l in H0; rewrite R_distance in H0; rewrite distance_sym in H0; apply Rle_trans with (distance evader intruder)...",
            "VernacExtend",
            "9f5192693e695166b2dcd4197025d1334b2f0bc3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma step2 : forall (evader intruder : State) (x : nat), (distance evader intruder <= AlertRange)%R -> trkrate (bank intruder) <> 0%R -> arc_loop intruder evader (Rsqr intruderSpeed / (g * tand (bank intruder))) (trkrate (bank intruder)) x 0.",
            "VernacStartTheoremProof",
            "bfd244660dc45e85780ce48bfd1d089b39dbc1e6"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros evader intruder x H n; unfold arc_loop in |- *; rewrite mod_eq_0; case (Rlt_le_dec 0 (trkrate (bank intruder)))...",
            "VernacExtend",
            "9473a5cdb96bdbb5070221ef8d34831f4a7228c6"
        ],
        [
            "cut (INR 0 = 0%R)...",
            "VernacExtend",
            "2478e6ef8b824dde9c18c088b511dce71f998347"
        ],
        [
            "intros; rewrite H0; repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; cut (mkState (xt intruder + Rsqr intruderSpeed / (g * tand (bank intruder)) * (sind (heading intruder) - sind (heading intruder))) (yt intruder + Rsqr intruderSpeed / (g * tand (bank intruder)) * (cosd (heading intruder) - cosd (heading intruder))) (heading intruder) (bank intruder) = intruder)...",
            "VernacExtend",
            "3d7ccb598364919b8e05c95b964faaa618255311"
        ],
        [
            "cut (mkState (xt evader) (yt evader) (heading evader) (bank evader) = evader)...",
            "VernacExtend",
            "a696ffacf7bdc5c98e750a081cf7388dded3d18e"
        ],
        [
            "intros; rewrite H1; rewrite H2; unfold chktrack in |- *; case (Rle_dec (tau intruder evader 0) 0); intro...",
            "VernacExtend",
            "0f379a1886a05afa63a45937c5344b2615641398"
        ],
        [
            "unfold chkrange in |- *; split...",
            "VernacExtend",
            "f62b835fb9a2ad62acc342f7fa39365eb19c9217"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r; unfold distance in H...",
            "VernacExtend",
            "b0a7910537f8c919fee1de5f90717c81689bcdc7"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "rewrite Rplus_0_l; case (Rlt_dec AlertTime (tau intruder evader 0)); intro...",
            "VernacExtend",
            "d880d5f4cbe690eb5f09fbf83f73ea71355d3949"
        ],
        [
            "cut (0 <= AlertTime)%R...",
            "VernacExtend",
            "bb08364eab08782f6b6f06a713da414908b1f82b"
        ],
        [
            "intro; assert (H4 := asymptotic_decrease_tau intruder evader 0 0 AlertTime (Rlt_le _ _ r0) H3); repeat rewrite Rplus_0_l in H4; apply Rle_trans with (RR intruder evader 0)...",
            "VernacExtend",
            "862ca09ea2d603c9552c43f666cdbc2ba3d1eeac"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "8d75f9cd47146904538b3c1035ce7a32ddb7f690"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "assert (H3 := derivative_eq_zero_min intruder evader 0 0); repeat rewrite Rplus_0_l in H3; apply Rle_trans with (RR intruder evader 0)...",
            "VernacExtend",
            "c1e6d8f57b5cb89d5ef9deb4e0c1b7827a17394b"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "8d75f9cd47146904538b3c1035ce7a32ddb7f690"
        ],
        [
            "unfold xt, yt in |- *; case evader...",
            "VernacExtend",
            "437f66d2193bcda244283c8c18ea83ce87132d78"
        ],
        [
            "unfold xt, yt in |- *; case intruder; intros; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "b8bf9e879fd5a942692d018d555c51dce0044cb0"
        ],
        [
            "cut (INR 0 = 0%R)...",
            "VernacExtend",
            "2478e6ef8b824dde9c18c088b511dce71f998347"
        ],
        [
            "intros; rewrite H0; repeat rewrite Rmult_0_l; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r; cut (mkState (xt intruder + Rsqr intruderSpeed / (g * tand (bank intruder)) * (sind (heading intruder) - sind (heading intruder))) (yt intruder + Rsqr intruderSpeed / (g * tand (bank intruder)) * (cosd (heading intruder) - cosd (heading intruder))) (heading intruder) (bank intruder) = intruder)...",
            "VernacExtend",
            "3d7ccb598364919b8e05c95b964faaa618255311"
        ],
        [
            "cut (mkState (xt evader) (yt evader) (heading evader) (bank evader) = evader)...",
            "VernacExtend",
            "a696ffacf7bdc5c98e750a081cf7388dded3d18e"
        ],
        [
            "intros; rewrite H1; rewrite H2; unfold chktrack in |- *; case (Rle_dec (tau intruder evader 0) 0); intro...",
            "VernacExtend",
            "0f379a1886a05afa63a45937c5344b2615641398"
        ],
        [
            "unfold chkrange in |- *; split...",
            "VernacExtend",
            "f62b835fb9a2ad62acc342f7fa39365eb19c9217"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r; unfold distance in H...",
            "VernacExtend",
            "b0a7910537f8c919fee1de5f90717c81689bcdc7"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "rewrite Rplus_0_l; case (Rlt_dec AlertTime (tau intruder evader 0)); intro...",
            "VernacExtend",
            "d880d5f4cbe690eb5f09fbf83f73ea71355d3949"
        ],
        [
            "cut (0 <= AlertTime)%R...",
            "VernacExtend",
            "bb08364eab08782f6b6f06a713da414908b1f82b"
        ],
        [
            "intro; assert (H4 := asymptotic_decrease_tau intruder evader 0 0 AlertTime (Rlt_le _ _ r0) H3); repeat rewrite Rplus_0_l in H4; apply Rle_trans with (RR intruder evader 0)...",
            "VernacExtend",
            "862ca09ea2d603c9552c43f666cdbc2ba3d1eeac"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "8d75f9cd47146904538b3c1035ce7a32ddb7f690"
        ],
        [
            "unfold AlertTime in |- *; left; prove_sup...",
            "VernacExtend",
            "4dc98f44afa93e8bb36ee76b9f9291ac8a157348"
        ],
        [
            "assert (H3 := derivative_eq_zero_min intruder evader 0 0); repeat rewrite Rplus_0_l in H3; apply Rle_trans with (RR intruder evader 0)...",
            "VernacExtend",
            "c1e6d8f57b5cb89d5ef9deb4e0c1b7827a17394b"
        ],
        [
            "unfold RR in |- *; unfold dx, dy in |- *; repeat rewrite Rmult_0_l; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "8d75f9cd47146904538b3c1035ce7a32ddb7f690"
        ],
        [
            "unfold xt, yt in |- *; case evader...",
            "VernacExtend",
            "437f66d2193bcda244283c8c18ea83ce87132d78"
        ],
        [
            "unfold xt, yt in |- *; case intruder; intros; unfold Rminus in |- *; repeat rewrite Rplus_opp_r; repeat rewrite Rmult_0_r; repeat rewrite Rplus_0_r...",
            "VernacExtend",
            "b8bf9e879fd5a942692d018d555c51dce0044cb0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem alarm_at_alerting_distance : forall evader intruder : State, alerting_distance evader intruder -> ails_alert intruder evader.",
            "VernacStartTheoremProof",
            "6fb673ff5246d0067de8f09bf17e9e450d8f7973"
        ],
        [
            "Proof with trivial.",
            "VernacProof",
            "9268eeb221b2345d40e3f4fe2ce96e852cc5a7fc"
        ],
        [
            "intros; unfold ails_alert in |- *; case (Req_EM_var (trkrate (bank intruder)) 0); intro...",
            "VernacExtend",
            "ad6b84fb589e7551faf20fb1c4f1906f75ff1841"
        ],
        [
            "apply (step1 _ _ H)...",
            "VernacExtend",
            "1d8bad4911333586006b88a693e4d4c34587b16f"
        ],
        [
            "unfold alerting_distance in H; case (Rle_dec 3 (trkrate (bank intruder))); intro...",
            "VernacExtend",
            "0a383ff07cac0b61a6cc4e48319dda9a777b63b9"
        ],
        [
            "apply step2...",
            "VernacExtend",
            "01f76a7d87b89e9bd59f212cd1912860ca4b95e0"
        ],
        [
            "case (Rle_dec (3 / 2) (trkrate (bank intruder))); intro...",
            "VernacExtend",
            "bd82b4bc45e1fba6dcbf2d8f82904f2394cccfc1"
        ],
        [
            "apply step2...",
            "VernacExtend",
            "01f76a7d87b89e9bd59f212cd1912860ca4b95e0"
        ],
        [
            "case (Rle_dec (3 / 4) (trkrate (bank intruder))); intro; apply step2...",
            "VernacExtend",
            "fd0a4c96f70860f483755fd8d8150b2b489962b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "cond1_0",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "left; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold toDeg in |- *; repeat simple apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "fca707fcd5279f2e837d679e3ab0ac936e898e6d"
                    ]
                },
                {
                    "command": [
                        "unfold MaxBank in |- *; unfold Rdiv in |- *; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "35fbc1b3cf52032c3828adf0e1eb9067e5c9414e"
                    ]
                },
                {
                    "command": [
                        "prove_sup.",
                        "VernacExtend",
                        "57e294f00a65db3fc7f5dddeca8e78f99f4a4330"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup.",
                        "VernacExtend",
                        "f8cbca7f45a499249620f085b2ee2851cca7de7f"
                    ]
                },
                {
                    "command": [
                        "unfold plat in |- *; prove_sup.",
                        "VernacExtend",
                        "de0b73fd9052205ee591780d6c31f26f802e80f7"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply PI_RGT_0.",
                        "VernacExtend",
                        "aa3616593dde0fb22305d4421f4ee44097006e01"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cond2_0",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "left; unfold toDeg in |- *; repeat simple apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c6f93254196230889f757aa678d04bd5216d36e8"
                    ]
                },
                {
                    "command": [
                        "unfold MaxBank in |- *; unfold Rdiv in |- *; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "35fbc1b3cf52032c3828adf0e1eb9067e5c9414e"
                    ]
                },
                {
                    "command": [
                        "prove_sup.",
                        "VernacExtend",
                        "57e294f00a65db3fc7f5dddeca8e78f99f4a4330"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup.",
                        "VernacExtend",
                        "f8cbca7f45a499249620f085b2ee2851cca7de7f"
                    ]
                },
                {
                    "command": [
                        "unfold plat in |- *; prove_sup.",
                        "VernacExtend",
                        "de0b73fd9052205ee591780d6c31f26f802e80f7"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply PI_RGT_0.",
                        "VernacExtend",
                        "aa3616593dde0fb22305d4421f4ee44097006e01"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}