{
    "filename": "tree.v",
    "coq_project": "higman-s",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export Arith.",
            "VernacRequire",
            "70e550b9603a7aa23f63274fffcc443ce7c8f433"
        ],
        [
            "Require Export List.",
            "VernacRequire",
            "d626cb98fe764077098989d26509c9f7407e0464"
        ],
        [
            "Section Wrap.",
            "VernacBeginSection",
            "ae5b3d2bac1d262d5b9e47495afeaa2b35866e20"
        ],
        [
            "Unset Elimination Schemes.",
            "VernacUnsetOption",
            "4d234cd3b6f71aa059ae1f499612aad67477dab3"
        ],
        [
            "Variable A : Set.",
            "VernacAssumption",
            "913b2bc4093d15ed267c28d55b4536b83f6168df"
        ],
        [
            "Variable leA : A -> A -> Prop.",
            "VernacAssumption",
            "a3a167d12c7b87905bc3dfcee3cf1dfd437c8c25"
        ],
        [
            "Inductive tree : Set := | node : A -> list tree -> tree.",
            "VernacInductive",
            "0af627e1da787d9ad86f23e1162d5e99bea4500f"
        ],
        [
            "Section definitions.",
            "VernacBeginSection",
            "fdfd379719da878c92b736fc79cf86ad05197e48"
        ],
        [
            "Fixpoint tree_size (t : tree) : nat := match t with | node _ l => S ((fix l_size (l : list tree) : nat := match l with | nil => 0 | t' :: l' => (tree_size t') + (l_size l') end) l) end.",
            "VernacFixpoint",
            "38f1369663749d79a7fd9f0af00f7dda98a5da78"
        ],
        [
            "Definition root (t : tree) : A := match t with | node a l => a end.",
            "VernacDefinition",
            "14ee5a7ba9d5f73ecf51f58248fb98605fa3212c"
        ],
        [
            "Definition subtrees (t : tree) : list tree := match t with | node _ l => l end.",
            "VernacDefinition",
            "cb7b7478bf7088ce1369270901089c67679074b7"
        ],
        [
            "Inductive tree_in_forest : tree -> list tree -> Prop := | tif0 : forall t t' l, In t' l -> subtree t t' -> tree_in_forest t l with subtree : tree -> tree -> Prop := | sub0 : forall t, subtree t t | sub1 : forall t l ts, tree_in_forest t ts -> subtree t (node l ts).",
            "VernacInductive",
            "ac564815303f12251d373735ad56cff4e29f5779"
        ],
        [
            "End definitions.",
            "VernacEndSegment",
            "5fb3137667be6315275ff521d58fdbace0980737"
        ],
        [
            "Section tree_rect.",
            "VernacBeginSection",
            "ddca01b2034d08c18f78327dfddd392446d79a47"
        ],
        [
            "Variables (P : tree -> Type) (Q : list tree -> Type).",
            "VernacAssumption",
            "c5b99fd54ac2d31c69103c11422a67555ad0ae91"
        ],
        [
            "Hypotheses (H1 : forall x, P (node x nil)) (H2 : forall f v, Q v -> P (node f v)) (H3 : Q nil) (H4 : forall t v, P t -> Q v -> Q (t :: v)).",
            "VernacAssumption",
            "6db6ed1884516cca706c62eaa71db49f34294112"
        ],
        [
            "Fixpoint tree_rect_aux t : P t := match t as t return P t with | node f v => H2 f ((fix vt_rect (v : list tree) : Q v := match v as v return Q v with | nil => H3 | cons t' v' => H4 (tree_rect_aux t') (vt_rect v') end) v) end.",
            "VernacFixpoint",
            "9d6463d8056ae9dc0b900a7087ea669f43b7bbff"
        ],
        [
            "End tree_rect.",
            "VernacEndSegment",
            "ee86088a29079d5b28c402206056fd8208c9d0b9"
        ],
        [
            "Set Elimination Schemes.",
            "VernacSetOption",
            "9b6e063f1120f1f70865635a7510d0d8704e68a4"
        ],
        [
            "Inductive lforall (P : tree -> Type) : list tree -> Type := | lforall_nil : lforall P nil | lforall_cons : forall a l, lforall P l -> P a -> lforall P (a::l).",
            "VernacInductive",
            "a412aebd8cc053bd621c464631f1380573e97e37"
        ],
        [
            "Lemma tree_rect : forall P : tree -> Type, (forall x, P (node x nil)) -> (forall f v, lforall P v -> P (node f v)) -> forall t, P t.",
            "VernacStartTheoremProof",
            "f98238a2f9c6f1e9c8250ac8e5e0a89323db4a43"
        ],
        [
            "intros P H1 H2.",
            "VernacExtend",
            "880dd6de7d689fdb33a1a0445d783ba923c04bba"
        ],
        [
            "apply tree_rect_aux with (Q := fun l => lforall P l); trivial.",
            "VernacExtend",
            "4c9a2434be3dd0e787484b3827dd13c0d1e62a00"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros; constructor; trivial.",
            "VernacExtend",
            "ec3c6ca82504c9c029d31bb9dad39bbf56a5623e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tree_ind : forall P : tree -> Prop, (forall x, P (node x nil)) -> (forall f v, (forall u, In u v -> P u) -> P (node f v)) -> forall t, P t.",
            "VernacStartTheoremProof",
            "6a722b63ae9355e77cc69c9c1e93ad956a736c4c"
        ],
        [
            "intros P H1 H2.",
            "VernacExtend",
            "880dd6de7d689fdb33a1a0445d783ba923c04bba"
        ],
        [
            "apply tree_rect; trivial.",
            "VernacExtend",
            "a8aed8c3fbcc22f64657bc0f9fb226cb1a438535"
        ],
        [
            "intros f v H; apply H2.",
            "VernacExtend",
            "967953cd8148608ce35c631ab305de17afc46637"
        ],
        [
            "induction H; intros u Hu.",
            "VernacExtend",
            "7f2456db70f565373b57752a8320dadfd5b6ab9d"
        ],
        [
            "inversion Hu.",
            "VernacExtend",
            "80b2292d3faf56f832776e0ebd50013b319f1370"
        ],
        [
            "elim Hu; clear Hu; intro Hu.",
            "VernacExtend",
            "4a472e73e94474574a1234f976c96c2809455540"
        ],
        [
            "subst; trivial.",
            "VernacExtend",
            "5e01514cf2c2ef4c0cbcbb78bcc4307f62cee790"
        ],
        [
            "apply IHlforall; trivial.",
            "VernacExtend",
            "e880d5c997b6e4983c6dadc1bf1a35b81f4a11ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact im_sub_tree_size : forall a l t, In t l -> (tree_size t) < (tree_size (node a l)).",
            "VernacStartTheoremProof",
            "2cadcc3d003760c75a5f424d828120ecda360108"
        ],
        [
            "intros a l; induction l as [| u l IHl]; intros t Hin.",
            "VernacExtend",
            "5b997181bd3eb906aba89b0536d59f71abd5118a"
        ],
        [
            "inversion Hin.",
            "VernacExtend",
            "12565892893f67d572b7c636dc1deea94b8b309f"
        ],
        [
            "elim Hin; clear Hin; intro Hin.",
            "VernacExtend",
            "440830d4185d1d4dd15dc70bb31ac5a405b38eec"
        ],
        [
            "subst; simpl in |- *.",
            "VernacExtend",
            "0ba47b98fdcbcd9b3da22c2158302ddadc6f1aea"
        ],
        [
            "apply lt_le_trans with (S (tree_size t)); auto with arith.",
            "VernacExtend",
            "bea511afe0c762358abfc11856fb9ef7d4710c6d"
        ],
        [
            "apply lt_le_trans with (tree_size (node a l)); auto with arith.",
            "VernacExtend",
            "7a3a5ce497aa59b9f96ce0a21e89989af2f5a008"
        ],
        [
            "simpl; auto with arith.",
            "VernacExtend",
            "ab3fa8d215cdc73141fcf1a11781cfe38de440ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact subtree_trans : forall t t' t'', subtree t t' -> subtree t' t'' -> subtree t t''.",
            "VernacStartTheoremProof",
            "9496684e0d8f6234459a5a8f2c7ea14e0a1a46da"
        ],
        [
            "assert (H : forall t'' t', subtree t' t'' -> forall t, subtree t t' -> subtree t t'').",
            "VernacExtend",
            "4446830fc9b3cc8e9511150934d0ec6ac94f8127"
        ],
        [
            "intro t; induction t as [a | a f IHt]; intros t' H1 t'' H2.",
            "VernacExtend",
            "156a17aa30d9416ec1c05888af5a6fe0dea61747"
        ],
        [
            "inversion H1; subst; trivial.",
            "VernacExtend",
            "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
        ],
        [
            "inversion H3; subst; trivial.",
            "VernacExtend",
            "92f57ea364198f7350fe0a2a82c6a56a09258aa4"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion H1; subst; trivial.",
            "VernacExtend",
            "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "inversion H3; subst.",
            "VernacExtend",
            "a12e3012374b4f52063356c543280e1f1d8af320"
        ],
        [
            "constructor 1 with t'0; trivial.",
            "VernacExtend",
            "5508d7134541661b9f4a8c0499253f9c7b6bd71e"
        ],
        [
            "apply IHt with t'; trivial.",
            "VernacExtend",
            "ed9d21740e7033a227e058329b5aee5f5fd63044"
        ],
        [
            "intros t t' t'' H1 H2; apply H with t'; trivial.",
            "VernacExtend",
            "53c31d9373756e1257bf7f24d62ca87edee57377"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact eq_tree_dec : (forall (a a' : A), {a = a'} + {a <> a'}) -> forall (t t' : tree), {t = t'} + {t <> t'}.",
            "VernacStartTheoremProof",
            "f67a5838ee03f4ffa0fd5ae5345860ed2a8cee79"
        ],
        [
            "intro eq_A_dec; apply (tree_rect (P:=fun t => forall (t' : tree), {t = t'} + {t <> t'})).",
            "VernacExtend",
            "78906af9d69261501c257805df3332dcd4c56319"
        ],
        [
            "intros a t'; destruct t' as [a' ts'].",
            "VernacExtend",
            "36bc5e62968a271cda508ae8e5df02610d1c3fd1"
        ],
        [
            "destruct ts'; [idtac | right; intro HF; inversion HF].",
            "VernacExtend",
            "99d998d46a9f2d3b90b0b80555ec1f44036d059f"
        ],
        [
            "elim (eq_A_dec a a'); intro case_a_a'; [left | right; intro HF; apply case_a_a']; subst; trivial.",
            "VernacExtend",
            "51d7e3e3e6011bdf65f6f218053bfee4a2225575"
        ],
        [
            "inversion HF; trivial.",
            "VernacExtend",
            "2186d38581d8dd0652bca05fac8d33832fda45c5"
        ],
        [
            "intros a ts IHt t'; destruct t' as [a' ts'].",
            "VernacExtend",
            "a99dc02ea237208d724addd6dcc3823dbf9f1c98"
        ],
        [
            "elim (eq_A_dec a a'); intro case_a_a'; [subst a'|right;intro HF;inversion HF;apply case_a_a'; trivial].",
            "VernacExtend",
            "42cbd5728671fdc00273cd69cbbf58cd0ae94d9d"
        ],
        [
            "assert (H : {ts = ts'} + {ts <> ts'}).",
            "VernacExtend",
            "629026facc267547d70f0b488072269d5c064584"
        ],
        [
            "generalize ts'; clear ts'; induction IHt; intro ts'.",
            "VernacExtend",
            "33b047342795149f2435b604e9f467fc9cac7e72"
        ],
        [
            "destruct ts' as [| t' ts']; [left | right]; trivial.",
            "VernacExtend",
            "aa9a5cf6b35eb96d14203003876009416141980f"
        ],
        [
            "intro HF; inversion HF.",
            "VernacExtend",
            "470b0c76f6c793837a376a7dcc2af88d19364432"
        ],
        [
            "destruct ts' as [| t' ts']; [right | idtac]; trivial.",
            "VernacExtend",
            "7ed207582e5ea87688f233cf7d7b29b4d8e24adc"
        ],
        [
            "intro HF; inversion HF.",
            "VernacExtend",
            "470b0c76f6c793837a376a7dcc2af88d19364432"
        ],
        [
            "elim (IHIHt ts'); intro case_ts'.",
            "VernacExtend",
            "17fde34977e1b7a70454937f908f0c074a45df2e"
        ],
        [
            "subst; elim (p t'); intro case_t'; subst; [left | right]; trivial.",
            "VernacExtend",
            "f463c2b716a5b006eb1d6da7191472ccbcdb627a"
        ],
        [
            "intro HF; inversion HF; apply case_t'; trivial.",
            "VernacExtend",
            "d6facfba9d809b60e5926a833598a23ee9317555"
        ],
        [
            "right; intro HF; inversion HF; apply case_ts'; trivial.",
            "VernacExtend",
            "f9bf78211e23f26e54c06a457f9d5bece6075159"
        ],
        [
            "elim H; clear H; intro H; [left; subst | right]; trivial.",
            "VernacExtend",
            "04362533efc0ba421f52ca8a732da9b657c3e3f5"
        ],
        [
            "intro HF; inversion HF; apply H; trivial.",
            "VernacExtend",
            "a1531fe5d59de45998be89d60f4011f9a7d0a9f7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Wrap.",
            "VernacEndSegment",
            "45072512e7531c101735e7202374b0460df823b8"
        ]
    ],
    "proofs": [
        {
            "name": "tree_rect",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros P H1 H2.",
                        "VernacExtend",
                        "880dd6de7d689fdb33a1a0445d783ba923c04bba"
                    ]
                },
                {
                    "command": [
                        "apply tree_rect_aux with (Q := fun l => lforall P l); trivial.",
                        "VernacExtend",
                        "4c9a2434be3dd0e787484b3827dd13c0d1e62a00"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros; constructor; trivial.",
                        "VernacExtend",
                        "ec3c6ca82504c9c029d31bb9dad39bbf56a5623e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tree_ind",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros P H1 H2.",
                        "VernacExtend",
                        "880dd6de7d689fdb33a1a0445d783ba923c04bba"
                    ]
                },
                {
                    "command": [
                        "apply tree_rect; trivial.",
                        "VernacExtend",
                        "a8aed8c3fbcc22f64657bc0f9fb226cb1a438535"
                    ]
                },
                {
                    "command": [
                        "intros f v H; apply H2.",
                        "VernacExtend",
                        "967953cd8148608ce35c631ab305de17afc46637"
                    ]
                },
                {
                    "command": [
                        "induction H; intros u Hu.",
                        "VernacExtend",
                        "7f2456db70f565373b57752a8320dadfd5b6ab9d"
                    ]
                },
                {
                    "command": [
                        "inversion Hu.",
                        "VernacExtend",
                        "80b2292d3faf56f832776e0ebd50013b319f1370"
                    ]
                },
                {
                    "command": [
                        "elim Hu; clear Hu; intro Hu.",
                        "VernacExtend",
                        "4a472e73e94474574a1234f976c96c2809455540"
                    ]
                },
                {
                    "command": [
                        "subst; trivial.",
                        "VernacExtend",
                        "5e01514cf2c2ef4c0cbcbb78bcc4307f62cee790"
                    ]
                },
                {
                    "command": [
                        "apply IHlforall; trivial.",
                        "VernacExtend",
                        "e880d5c997b6e4983c6dadc1bf1a35b81f4a11ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "im_sub_tree_size",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros a l; induction l as [| u l IHl]; intros t Hin.",
                        "VernacExtend",
                        "5b997181bd3eb906aba89b0536d59f71abd5118a"
                    ]
                },
                {
                    "command": [
                        "inversion Hin.",
                        "VernacExtend",
                        "12565892893f67d572b7c636dc1deea94b8b309f"
                    ]
                },
                {
                    "command": [
                        "elim Hin; clear Hin; intro Hin.",
                        "VernacExtend",
                        "440830d4185d1d4dd15dc70bb31ac5a405b38eec"
                    ]
                },
                {
                    "command": [
                        "subst; simpl in |- *.",
                        "VernacExtend",
                        "0ba47b98fdcbcd9b3da22c2158302ddadc6f1aea"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with (S (tree_size t)); auto with arith.",
                        "VernacExtend",
                        "bea511afe0c762358abfc11856fb9ef7d4710c6d"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with (tree_size (node a l)); auto with arith.",
                        "VernacExtend",
                        "7a3a5ce497aa59b9f96ce0a21e89989af2f5a008"
                    ]
                },
                {
                    "command": [
                        "simpl; auto with arith.",
                        "VernacExtend",
                        "ab3fa8d215cdc73141fcf1a11781cfe38de440ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subtree_trans",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "assert (H : forall t'' t', subtree t' t'' -> forall t, subtree t t' -> subtree t t'').",
                        "VernacExtend",
                        "4446830fc9b3cc8e9511150934d0ec6ac94f8127"
                    ]
                },
                {
                    "command": [
                        "intro t; induction t as [a | a f IHt]; intros t' H1 t'' H2.",
                        "VernacExtend",
                        "156a17aa30d9416ec1c05888af5a6fe0dea61747"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst; trivial.",
                        "VernacExtend",
                        "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
                    ]
                },
                {
                    "command": [
                        "inversion H3; subst; trivial.",
                        "VernacExtend",
                        "92f57ea364198f7350fe0a2a82c6a56a09258aa4"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst; trivial.",
                        "VernacExtend",
                        "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "inversion H3; subst.",
                        "VernacExtend",
                        "a12e3012374b4f52063356c543280e1f1d8af320"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'0; trivial.",
                        "VernacExtend",
                        "5508d7134541661b9f4a8c0499253f9c7b6bd71e"
                    ]
                },
                {
                    "command": [
                        "apply IHt with t'; trivial.",
                        "VernacExtend",
                        "ed9d21740e7033a227e058329b5aee5f5fd63044"
                    ]
                },
                {
                    "command": [
                        "intros t t' t'' H1 H2; apply H with t'; trivial.",
                        "VernacExtend",
                        "53c31d9373756e1257bf7f24d62ca87edee57377"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_tree_dec",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intro eq_A_dec; apply (tree_rect (P:=fun t => forall (t' : tree), {t = t'} + {t <> t'})).",
                        "VernacExtend",
                        "78906af9d69261501c257805df3332dcd4c56319"
                    ]
                },
                {
                    "command": [
                        "intros a t'; destruct t' as [a' ts'].",
                        "VernacExtend",
                        "36bc5e62968a271cda508ae8e5df02610d1c3fd1"
                    ]
                },
                {
                    "command": [
                        "destruct ts'; [idtac | right; intro HF; inversion HF].",
                        "VernacExtend",
                        "99d998d46a9f2d3b90b0b80555ec1f44036d059f"
                    ]
                },
                {
                    "command": [
                        "elim (eq_A_dec a a'); intro case_a_a'; [left | right; intro HF; apply case_a_a']; subst; trivial.",
                        "VernacExtend",
                        "51d7e3e3e6011bdf65f6f218053bfee4a2225575"
                    ]
                },
                {
                    "command": [
                        "inversion HF; trivial.",
                        "VernacExtend",
                        "2186d38581d8dd0652bca05fac8d33832fda45c5"
                    ]
                },
                {
                    "command": [
                        "intros a ts IHt t'; destruct t' as [a' ts'].",
                        "VernacExtend",
                        "a99dc02ea237208d724addd6dcc3823dbf9f1c98"
                    ]
                },
                {
                    "command": [
                        "elim (eq_A_dec a a'); intro case_a_a'; [subst a'|right;intro HF;inversion HF;apply case_a_a'; trivial].",
                        "VernacExtend",
                        "42cbd5728671fdc00273cd69cbbf58cd0ae94d9d"
                    ]
                },
                {
                    "command": [
                        "assert (H : {ts = ts'} + {ts <> ts'}).",
                        "VernacExtend",
                        "629026facc267547d70f0b488072269d5c064584"
                    ]
                },
                {
                    "command": [
                        "generalize ts'; clear ts'; induction IHt; intro ts'.",
                        "VernacExtend",
                        "33b047342795149f2435b604e9f467fc9cac7e72"
                    ]
                },
                {
                    "command": [
                        "destruct ts' as [| t' ts']; [left | right]; trivial.",
                        "VernacExtend",
                        "aa9a5cf6b35eb96d14203003876009416141980f"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF.",
                        "VernacExtend",
                        "470b0c76f6c793837a376a7dcc2af88d19364432"
                    ]
                },
                {
                    "command": [
                        "destruct ts' as [| t' ts']; [right | idtac]; trivial.",
                        "VernacExtend",
                        "7ed207582e5ea87688f233cf7d7b29b4d8e24adc"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF.",
                        "VernacExtend",
                        "470b0c76f6c793837a376a7dcc2af88d19364432"
                    ]
                },
                {
                    "command": [
                        "elim (IHIHt ts'); intro case_ts'.",
                        "VernacExtend",
                        "17fde34977e1b7a70454937f908f0c074a45df2e"
                    ]
                },
                {
                    "command": [
                        "subst; elim (p t'); intro case_t'; subst; [left | right]; trivial.",
                        "VernacExtend",
                        "f463c2b716a5b006eb1d6da7191472ccbcdb627a"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; apply case_t'; trivial.",
                        "VernacExtend",
                        "d6facfba9d809b60e5926a833598a23ee9317555"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF; apply case_ts'; trivial.",
                        "VernacExtend",
                        "f9bf78211e23f26e54c06a457f9d5bece6075159"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H; [left; subst | right]; trivial.",
                        "VernacExtend",
                        "04362533efc0ba421f52ca8a732da9b657c3e3f5"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; apply H; trivial.",
                        "VernacExtend",
                        "a1531fe5d59de45998be89d60f4011f9a7d0a9f7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}