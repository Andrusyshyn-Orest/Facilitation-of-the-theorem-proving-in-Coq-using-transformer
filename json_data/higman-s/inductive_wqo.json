{
    "filename": "inductive_wqo.v",
    "coq_project": "higman-s",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export List.",
            "VernacRequire",
            "d626cb98fe764077098989d26509c9f7407e0464"
        ],
        [
            "Section Wrap.",
            "VernacBeginSection",
            "ae5b3d2bac1d262d5b9e47495afeaa2b35866e20"
        ],
        [
            "Variable A : Set.",
            "VernacAssumption",
            "913b2bc4093d15ed267c28d55b4536b83f6168df"
        ],
        [
            "Variable leA : A -> A -> Prop.",
            "VernacAssumption",
            "a3a167d12c7b87905bc3dfcee3cf1dfd437c8c25"
        ],
        [
            "Variable leA_dec : forall a a', {leA a a'} + {~ leA a a'}.",
            "VernacAssumption",
            "6fa6962c537102cd5da85216f350ded84b439e35"
        ],
        [
            "Inductive greater : A -> list A -> Prop := | Gr0 : forall a a' w, leA a' a -> greater a (a'::w) | Gr1 : forall a a' w, greater a w -> greater a (a'::w).",
            "VernacInductive",
            "800929b66e1fd38d8fc460cda79fe972cc714136"
        ],
        [
            "Inductive good : list A -> Prop := | Gd0 : forall a w, greater a w -> good (a::w) | Gd1 : forall a w, good w -> good (a::w).",
            "VernacInductive",
            "6f72eb24d78ae53192502869859427de99a75c01"
        ],
        [
            "Definition bad (l : list A) : Prop := ~ good l.",
            "VernacDefinition",
            "b75073a75a41014d9a448cded49f60b41f438419"
        ],
        [
            "Lemma greater_dec : forall a l, {greater a l} + {~ greater a l}.",
            "VernacStartTheoremProof",
            "93add901fd79515937c5d0350191405becc9393e"
        ],
        [
            "intros a l; induction l as [|a' l IHl].",
            "VernacExtend",
            "cf4a15c6e8b0622bb12ba3a49fd05bc339cec4db"
        ],
        [
            "right; intro HF; inversion HF.",
            "VernacExtend",
            "a3fd169a156a5271eed777b515bacbd14917a531"
        ],
        [
            "elim (leA_dec a' a); intro case_a_a'.",
            "VernacExtend",
            "10525e3194120d0e635b65ae304ddec1d66cdc03"
        ],
        [
            "left; constructor 1; trivial.",
            "VernacExtend",
            "d54ac48e5a97051ab91ee728b4dfaf792eaa5b3f"
        ],
        [
            "elim IHl; intro case_l.",
            "VernacExtend",
            "d145c76d7872f1d75a1c71d4f5dd4079c47003de"
        ],
        [
            "left; constructor 2; trivial.",
            "VernacExtend",
            "a71c76d89b690aa505474a5f384cb1d27cb2fd10"
        ],
        [
            "right; intro HF; inversion HF; subst.",
            "VernacExtend",
            "2a1eafa6c9bbf2e33a5309677302e351d1bea6e7"
        ],
        [
            "apply case_a_a'; trivial.",
            "VernacExtend",
            "deeac997974b818333d95774d4cb158b5c2f81a7"
        ],
        [
            "apply case_l; trivial.",
            "VernacExtend",
            "95db35e17292598f070206eb23351b47fab013ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma good_dec : forall l, {good l} + {bad l}.",
            "VernacStartTheoremProof",
            "5f45279783de489a56444ecdf7aa9f89130ea58b"
        ],
        [
            "intro l; induction l as [|a l IHl].",
            "VernacExtend",
            "33f9ec491366750e1996f3e0a7da36df4c48b4bd"
        ],
        [
            "right; intro HF; inversion HF.",
            "VernacExtend",
            "a3fd169a156a5271eed777b515bacbd14917a531"
        ],
        [
            "elim IHl; intro case_l.",
            "VernacExtend",
            "d145c76d7872f1d75a1c71d4f5dd4079c47003de"
        ],
        [
            "left; constructor 2; trivial.",
            "VernacExtend",
            "a71c76d89b690aa505474a5f384cb1d27cb2fd10"
        ],
        [
            "elim (greater_dec a l); intro case_a_l.",
            "VernacExtend",
            "5bbc12505c04d824152259fe805416c0bf2bea81"
        ],
        [
            "left; constructor 1; trivial.",
            "VernacExtend",
            "d54ac48e5a97051ab91ee728b4dfaf792eaa5b3f"
        ],
        [
            "right; intro HF; inversion HF; subst.",
            "VernacExtend",
            "2a1eafa6c9bbf2e33a5309677302e351d1bea6e7"
        ],
        [
            "apply case_a_l; trivial.",
            "VernacExtend",
            "211ba63c454959a8881c9c8413fd9beb1b9322d4"
        ],
        [
            "apply case_l; trivial.",
            "VernacExtend",
            "95db35e17292598f070206eb23351b47fab013ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint bad_subsequence (l : list A) : list A := match l with | nil => nil | a :: l' => let bl := bad_subsequence l' in match (greater_dec a bl) with | left _ => bl | right _ => a :: bl end end.",
            "VernacFixpoint",
            "f2f55603fb73990b5cc4320952e8088eb3f7ce7b"
        ],
        [
            "Lemma bad_subsequence_is_bad : forall l, bad (bad_subsequence l).",
            "VernacStartTheoremProof",
            "b5354239f191117d78e11a65e798342af63763a5"
        ],
        [
            "intro l; induction l as [|a l IHl].",
            "VernacExtend",
            "33f9ec491366750e1996f3e0a7da36df4c48b4bd"
        ],
        [
            "simpl; intro HF; inversion HF.",
            "VernacExtend",
            "70c0c798965aabfd0300185ca607c0bbb4bcf7bb"
        ],
        [
            "simpl; elim (greater_dec a (bad_subsequence l)); intro case_a_bl.",
            "VernacExtend",
            "25541be906c26a605f1347258a2c82db521debe0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply case_a_bl; trivial.",
            "VernacExtend",
            "9ea1af7872e92f3da856b6418f914559fc921b1f"
        ],
        [
            "apply IHl; trivial.",
            "VernacExtend",
            "7f299a9fd1f3e1e6d1f7d5810a28753ef5e39442"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive continues : list A -> list A -> Prop := | Ct0 : forall a l, ~ greater a l -> continues (a::l) l.",
            "VernacInductive",
            "29b6b4bfe823b120e951c614410fde3b3b951a17"
        ],
        [
            "Definition wqo_acc : Prop := forall l, bad l -> Acc continues l.",
            "VernacDefinition",
            "3f05d656a89df6c3c743a53f67bb3aba58fb2b87"
        ],
        [
            "End Wrap.",
            "VernacEndSegment",
            "45072512e7531c101735e7202374b0460df823b8"
        ]
    ],
    "proofs": [
        {
            "name": "greater_dec",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros a l; induction l as [|a' l IHl].",
                        "VernacExtend",
                        "cf4a15c6e8b0622bb12ba3a49fd05bc339cec4db"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF.",
                        "VernacExtend",
                        "a3fd169a156a5271eed777b515bacbd14917a531"
                    ]
                },
                {
                    "command": [
                        "elim (leA_dec a' a); intro case_a_a'.",
                        "VernacExtend",
                        "10525e3194120d0e635b65ae304ddec1d66cdc03"
                    ]
                },
                {
                    "command": [
                        "left; constructor 1; trivial.",
                        "VernacExtend",
                        "d54ac48e5a97051ab91ee728b4dfaf792eaa5b3f"
                    ]
                },
                {
                    "command": [
                        "elim IHl; intro case_l.",
                        "VernacExtend",
                        "d145c76d7872f1d75a1c71d4f5dd4079c47003de"
                    ]
                },
                {
                    "command": [
                        "left; constructor 2; trivial.",
                        "VernacExtend",
                        "a71c76d89b690aa505474a5f384cb1d27cb2fd10"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "2a1eafa6c9bbf2e33a5309677302e351d1bea6e7"
                    ]
                },
                {
                    "command": [
                        "apply case_a_a'; trivial.",
                        "VernacExtend",
                        "deeac997974b818333d95774d4cb158b5c2f81a7"
                    ]
                },
                {
                    "command": [
                        "apply case_l; trivial.",
                        "VernacExtend",
                        "95db35e17292598f070206eb23351b47fab013ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "good_dec",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intro l; induction l as [|a l IHl].",
                        "VernacExtend",
                        "33f9ec491366750e1996f3e0a7da36df4c48b4bd"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF.",
                        "VernacExtend",
                        "a3fd169a156a5271eed777b515bacbd14917a531"
                    ]
                },
                {
                    "command": [
                        "elim IHl; intro case_l.",
                        "VernacExtend",
                        "d145c76d7872f1d75a1c71d4f5dd4079c47003de"
                    ]
                },
                {
                    "command": [
                        "left; constructor 2; trivial.",
                        "VernacExtend",
                        "a71c76d89b690aa505474a5f384cb1d27cb2fd10"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec a l); intro case_a_l.",
                        "VernacExtend",
                        "5bbc12505c04d824152259fe805416c0bf2bea81"
                    ]
                },
                {
                    "command": [
                        "left; constructor 1; trivial.",
                        "VernacExtend",
                        "d54ac48e5a97051ab91ee728b4dfaf792eaa5b3f"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "2a1eafa6c9bbf2e33a5309677302e351d1bea6e7"
                    ]
                },
                {
                    "command": [
                        "apply case_a_l; trivial.",
                        "VernacExtend",
                        "211ba63c454959a8881c9c8413fd9beb1b9322d4"
                    ]
                },
                {
                    "command": [
                        "apply case_l; trivial.",
                        "VernacExtend",
                        "95db35e17292598f070206eb23351b47fab013ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bad_subsequence_is_bad",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intro l; induction l as [|a l IHl].",
                        "VernacExtend",
                        "33f9ec491366750e1996f3e0a7da36df4c48b4bd"
                    ]
                },
                {
                    "command": [
                        "simpl; intro HF; inversion HF.",
                        "VernacExtend",
                        "70c0c798965aabfd0300185ca607c0bbb4bcf7bb"
                    ]
                },
                {
                    "command": [
                        "simpl; elim (greater_dec a (bad_subsequence l)); intro case_a_bl.",
                        "VernacExtend",
                        "25541be906c26a605f1347258a2c82db521debe0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "apply case_a_bl; trivial.",
                        "VernacExtend",
                        "9ea1af7872e92f3da856b6418f914559fc921b1f"
                    ]
                },
                {
                    "command": [
                        "apply IHl; trivial.",
                        "VernacExtend",
                        "7f299a9fd1f3e1e6d1f7d5810a28753ef5e39442"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}