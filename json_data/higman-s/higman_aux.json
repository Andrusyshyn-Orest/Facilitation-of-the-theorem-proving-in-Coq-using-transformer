{
    "filename": "higman_aux.v",
    "coq_project": "higman-s",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export inductive_wqo.",
            "VernacRequire",
            "56696d339f654f4eb4071fb402dda5a999398ec3"
        ],
        [
            "Require Export tree.",
            "VernacRequire",
            "d7bbae5f01c8591faaa0f1ff90d3e39ca79d9220"
        ],
        [
            "Require Export list_embeding.",
            "VernacRequire",
            "7af0ac32780ccc11204c1bbb62deb189abf79ab6"
        ],
        [
            "Section higman_aux.",
            "VernacBeginSection",
            "9ed5bbb8ff893640460ba7681733e93463622c4b"
        ],
        [
            "Variable A : Set.",
            "VernacAssumption",
            "913b2bc4093d15ed267c28d55b4536b83f6168df"
        ],
        [
            "Variable leA : A -> A -> Prop.",
            "VernacAssumption",
            "a3a167d12c7b87905bc3dfcee3cf1dfd437c8c25"
        ],
        [
            "Hypothesis eqA_dec : forall a a' : A, {a = a'} + {a <> a'}.",
            "VernacAssumption",
            "605df6fbd75b4cc369c3edbbe794f34d194fcec0"
        ],
        [
            "Hypothesis leA_dec : forall a a', {leA a a'} + {~ leA a a'}.",
            "VernacAssumption",
            "e43e24055466dec2d4672cf8d55c10c6451a9cd8"
        ],
        [
            "Hypothesis leA_trans : forall a a' a'', leA a a' -> leA a' a'' -> leA a a''.",
            "VernacAssumption",
            "b68231ad52702f8b073c6b5b6159d1491e9650cd"
        ],
        [
            "Definition embeds : list A -> list A -> Prop := Embeds leA.",
            "VernacDefinition",
            "40da3ec50e25ca2ad602354701526653d90f7dc3"
        ],
        [
            "Definition sublist : list (list A) -> list (list A) -> Prop := Embeds (eq (A:= list A)).",
            "VernacDefinition",
            "ce0e6406d1b7c067b689f487a76e8948b1991ba4"
        ],
        [
            "Fixpoint firsts (l : list (list A)) : list A := match l with | nil => nil | w::ws => match w with | nil => nil | a::w' => a :: (firsts ws) end end.",
            "VernacFixpoint",
            "e919735dfdd545f0e79e58d28c372f125dd80d80"
        ],
        [
            "Definition Tree := tree (list (list A) * (list A)).",
            "VernacDefinition",
            "d19dd3bae44fbd055f583e91157d892fee9cac08"
        ],
        [
            "Fact eq_Tree_dec : forall t t' : Tree, {t = t'} + {t <> t'}.",
            "VernacStartTheoremProof",
            "0f79fe359fb6fb6d9e01290a5e17232dfea22c7d"
        ],
        [
            "assert (H : forall l l' : (list (list A) * (list A)), {l = l'} + {l <> l'}).",
            "VernacExtend",
            "bd942155c9b02c28d7e721eae510afd225b405c0"
        ],
        [
            "intros l l'; destruct l as [vs l]; destruct l' as [vs' l'].",
            "VernacExtend",
            "fdb43d2403c4800dcb8115b258788b1b7c4e1e55"
        ],
        [
            "elim (list_eq_dec eqA_dec l l'); intro case_l.",
            "VernacExtend",
            "46abaac5bd708c2d5f658b97e600b120e98f347b"
        ],
        [
            "subst; elim (list_eq_dec (list_eq_dec eqA_dec) vs vs'); intro case_vs.",
            "VernacExtend",
            "af9b91ef6eb595b83f5c25dfecd0fb48ccaca987"
        ],
        [
            "subst; left; trivial.",
            "VernacExtend",
            "e75963e6a008b97432dc6e5689c74a1c4efb429b"
        ],
        [
            "right; intro HF; inversion HF; subst; apply case_vs; trivial.",
            "VernacExtend",
            "150bc6726e41ba8d0b03684b1f83692916af6cbc"
        ],
        [
            "right; intro HF; inversion HF; subst; apply case_l; trivial.",
            "VernacExtend",
            "3bf5c281761ca2951465be42c198c68cfa9ac227"
        ],
        [
            "intros t t'; apply (eq_tree_dec H).",
            "VernacExtend",
            "7846b48bae16609155b2ca1f2c2449c99ea848c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition root_label (t : Tree) : option A := match (root t) with | (l,r) => head r end.",
            "VernacDefinition",
            "34edbb8eddfd1d6b297acf368cef6035fe7b26a6"
        ],
        [
            "Fixpoint roots_labels (ts : list Tree) : option (list A) := match ts with | nil => Some nil | t :: ts' => match (root_label t) with | None => None | Some a => match (roots_labels ts') with | Some ts'' => Some (a :: ts'') | None => None end end end.",
            "VernacFixpoint",
            "d70e8b966e25c1f07469ebe8800eb3d6a92b16c9"
        ],
        [
            "Inductive is_insert_forest : list Tree -> list A -> A -> list Tree -> Prop := | is_if0 : forall w a, is_insert_forest nil w a nil | is_if2 : forall vs a' ts f w a f' l, is_insert_forest f w a f' -> ~(leA a' a) -> is_insert_forest ((node (vs,a'::l) ts) :: f) w a ((node (vs,a'::l) ts) :: f') | is_if4 : forall vs a' ts f w a t' l, leA a' a -> is_insert_tree (node (vs,a'::l) ts) w a t' -> is_insert_forest ((node (vs,a'::l) ts):: f) w a (t' :: f) with is_insert_tree : Tree -> list A -> A -> Tree -> Prop := | is_it1 : forall vs l ts w a rrts, roots_labels ts = Some rrts -> ~ greater leA a rrts -> is_insert_tree (node (vs,l) ts) w a (node (vs,l) ((node (w::vs, a::l) ts) :: ts)) | is_it2 : forall l ts w a rrts f', roots_labels ts = Some rrts -> greater leA a rrts -> is_insert_forest ts w a f' -> is_insert_tree (node l ts) w a (node l f').",
            "VernacInductive",
            "66ece6c78664824cb1e98f02cc04cee4da2f7fcb"
        ],
        [
            "Inductive is_forest : list (list A) -> list Tree -> Prop := | is_f0 : is_forest nil nil | is_f1 : forall a w ws f f', is_forest ws f -> greater leA a (bad_subsequence leA leA_dec (firsts ws)) -> is_insert_forest f w a f' -> is_forest ((a::w)::ws) f' | is_f2 : forall a w ws f, is_forest ws f -> ~ greater leA a (bad_subsequence leA leA_dec (firsts ws)) -> is_forest ((a::w)::ws) ((node (w::ws, a::nil) f)::f).",
            "VernacInductive",
            "1eafcbe0660d5d9da77008cff44b0a517cc68923"
        ],
        [
            "Section through_is_insert.",
            "VernacBeginSection",
            "e580dd1bceb70fe32e601cd977527d1dd9d37311"
        ],
        [
            "Variable P : list (list A) -> Tree -> Prop.",
            "VernacAssumption",
            "512f0f5f963a8d5a50ef29a7fd8f51d53ab630de"
        ],
        [
            "Definition P_on_tree (ws : list (list A)) (t : Tree) : Prop := forall t', subtree t' t -> P ws t'.",
            "VernacDefinition",
            "032c8fd17f4b36c9b05f7bdbe951294527f605f8"
        ],
        [
            "Definition P_on_forest (ws : list (list A)) (f : list Tree) : Prop := forall t, tree_in_forest t f -> P ws t.",
            "VernacDefinition",
            "f3e006a5a0d52ceb594031e68836b80a0b495011"
        ],
        [
            "Fact P_on_node : forall a ts ws, P_on_tree ws (node a ts) -> forall t, In t ts -> P_on_tree ws t.",
            "VernacStartTheoremProof",
            "1ce55eebcab7a11b0a21fce570814248a51ae047"
        ],
        [
            "intros a ts ws Hats t Ht t' Ht'.",
            "VernacExtend",
            "0ce5bdbb0a0871a98a4640cbdf55a34f4361f30e"
        ],
        [
            "apply Hats.",
            "VernacExtend",
            "716fecbaedd4817b3093d02ed01fa761c2cb5213"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "constructor 1 with t; trivial.",
            "VernacExtend",
            "2f6654825d09b947c84222c05f531ba36e5a8879"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition from_insert_forest (t : Tree) (a : A) : Prop := forall a' l vs ts, t = node (vs, a'::l) ts -> leA a' a.",
            "VernacDefinition",
            "b7e12855bf63d93246bdece12aefa325b55df467"
        ],
        [
            "Hypothesis P_added_node : forall ws w vs a l ts, from_insert_forest (node (vs,l) ts) a -> P ws (node (vs,l) ts) -> P ((a::w)::ws) (node (w::vs, a::l) ts).",
            "VernacAssumption",
            "b9311a4ffb917f3892540dbeeaaa583e484a5d40"
        ],
        [
            "Hypothesis P_added_node_base : forall ws w a f, P_on_forest ws f -> P ((a::w)::ws) (node (w::ws,a::nil) f).",
            "VernacAssumption",
            "4cf213db3283d721bf63ed222e46c0344d7858ed"
        ],
        [
            "Hypothesis P_split : forall ws a t f, P ws (node a (t::f)) -> P ws t -> P ws (node a f).",
            "VernacAssumption",
            "70410ba64d0fff37640a19e9640eccae8d53101b"
        ],
        [
            "Hypothesis P_merge : forall ws a t f, P ws (node a f) -> P ws t -> P ws (node a (t::f)).",
            "VernacAssumption",
            "345b4fb12676fb80dcf5808e2146b20efd40a6be"
        ],
        [
            "Hypothesis P_add : forall w ws t, P ws t -> P (w::ws) t.",
            "VernacAssumption",
            "3669c53ae8f3a2a686917cf855fe9c9e2c0ddb0b"
        ],
        [
            "Lemma P_on_split : forall ws a t f, P_on_tree ws (node a (t::f)) -> P_on_tree ws t -> P_on_tree ws (node a f).",
            "VernacStartTheoremProof",
            "6fb742c20aee5bfce9197f051beb9060e7a16b0a"
        ],
        [
            "intros ws a t f Hatf Ht t' Ht'.",
            "VernacExtend",
            "f66960c0b102d005ed333abaeedffee76ac6aa3e"
        ],
        [
            "inversion Ht'; subst.",
            "VernacExtend",
            "4205327192eae5b0a719b2b5d8cde3bd7568386f"
        ],
        [
            "apply P_split with t.",
            "VernacExtend",
            "90b02f455714f77d8793f7e3f533fd7b6868d95c"
        ],
        [
            "apply (Hatf (node a (t::f))); constructor; trivial.",
            "VernacExtend",
            "f72abd6a865ff84f90b41b0d9eb856045d8bf76b"
        ],
        [
            "apply (Ht t); constructor; trivial.",
            "VernacExtend",
            "d218db74d2d4efed33cb5ad969ae02284f2f1c30"
        ],
        [
            "apply (Hatf t').",
            "VernacExtend",
            "00b36a40b7c55b497e3b6d598e0969bc6647a0eb"
        ],
        [
            "constructor 2; inversion H1; subst.",
            "VernacExtend",
            "8cbd8b7058d1676f9769520cc778ad72a3884ea7"
        ],
        [
            "constructor 1 with t'0; try right; trivial.",
            "VernacExtend",
            "6feb85fc21ca8bd57b3c0d3de8be2e31e811dffd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma P_on_merge : forall ws a t f, P_on_tree ws (node a f) -> P_on_tree ws t -> P_on_tree ws (node a (t::f)).",
            "VernacStartTheoremProof",
            "409c26569ec538b95bb7a491a6be1f42b1afcfad"
        ],
        [
            "intros ws a t f Haf Ht t' Ht'.",
            "VernacExtend",
            "8ed1aff91142616a1422af86dbd2142550f08f1e"
        ],
        [
            "inversion Ht'; subst.",
            "VernacExtend",
            "4205327192eae5b0a719b2b5d8cde3bd7568386f"
        ],
        [
            "apply P_merge.",
            "VernacExtend",
            "5924c8a7687b4151b7b8ff916183263af79d7eb4"
        ],
        [
            "apply (Haf (node a f)); constructor; trivial.",
            "VernacExtend",
            "f902f18e86997f44d4e76f28a5af3313f03a9da4"
        ],
        [
            "apply (Ht t); constructor; trivial.",
            "VernacExtend",
            "d218db74d2d4efed33cb5ad969ae02284f2f1c30"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply (Ht t'); trivial.",
            "VernacExtend",
            "038e55a6077ee5607dc1f4721f7be63d79f93ef9"
        ],
        [
            "apply (Haf t'); constructor 2; trivial.",
            "VernacExtend",
            "b21dd8fbff8ca29db21f1bfd272d7b88814f85fd"
        ],
        [
            "constructor 1 with t'0; trivial.",
            "VernacExtend",
            "5508d7134541661b9f4a8c0499253f9c7b6bd71e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma P_on_add : forall w ws t, P_on_tree ws t -> P_on_tree (w::ws) t.",
            "VernacStartTheoremProof",
            "f8610fcaddb006847f273ca2f4ec8d68f470afca"
        ],
        [
            "intros w ws t Ht t' Ht'; inversion Ht'; subst.",
            "VernacExtend",
            "d6d5d2687cf184dc3e44581870f5bf3788a27634"
        ],
        [
            "apply P_add; apply (Ht t); trivial.",
            "VernacExtend",
            "6e2629e6ee6f43151423a5db681bbf5e874f2aed"
        ],
        [
            "apply P_add; apply (Ht t'); trivial.",
            "VernacExtend",
            "faabdda3c2822e3d5163d46b4aba950da4e90e8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_insert_tree_invariant : forall ws t w a t', from_insert_forest t a -> is_insert_tree t w a t' -> P_on_tree ws t -> P_on_tree ((a::w)::ws) t'.",
            "VernacStartTheoremProof",
            "0a0812b681322fb657264d2919eb861ac371a053"
        ],
        [
            "intros ws t; induction t as [a | a ts IHt]; intros w a' t' Hfrom Hinsert Ht.",
            "VernacExtend",
            "1d3c1eeceaebb72c5cdee89ed77f0e27213bca0e"
        ],
        [
            "inversion Hinsert; subst.",
            "VernacExtend",
            "8189568eba98d2e82129a058e1fb7413491b2e20"
        ],
        [
            "Focus 2.",
            "VernacFocus",
            "485d4f15aaf5c71ed130bd270976f9fc4e12a61f"
        ],
        [
            "simpl in H1; inversion H1; subst.",
            "VernacExtend",
            "b58f4644823f19676426702741882911f70ef33e"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "apply P_on_merge; trivial.",
            "VernacExtend",
            "3a55e1f85c4710a89b4691503370dcbae78d2b5a"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "intros t'' Ht''; inversion Ht''; subst; trivial.",
            "VernacExtend",
            "670385324373b6728c2c2ef0f41fdbaaa71721e0"
        ],
        [
            "apply P_added_node; trivial.",
            "VernacExtend",
            "6a258ec3612a28d263ee9af9743ca63e5b2d91bf"
        ],
        [
            "apply (Ht (node (vs, l) nil)); constructor.",
            "VernacExtend",
            "46119d379bb249f643ef4dc29c9fdddeeae21f65"
        ],
        [
            "inversion H2; subst.",
            "VernacExtend",
            "cbe105a5addb129fa1e578ba8ef36c4763179006"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "inversion Hinsert; subst.",
            "VernacExtend",
            "8189568eba98d2e82129a058e1fb7413491b2e20"
        ],
        [
            "apply P_on_merge; trivial.",
            "VernacExtend",
            "3a55e1f85c4710a89b4691503370dcbae78d2b5a"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "intros t'' Ht''; inversion Ht''; subst; trivial.",
            "VernacExtend",
            "670385324373b6728c2c2ef0f41fdbaaa71721e0"
        ],
        [
            "apply P_added_node; trivial.",
            "VernacExtend",
            "6a258ec3612a28d263ee9af9743ca63e5b2d91bf"
        ],
        [
            "apply (Ht (node (vs, l) ts)); constructor.",
            "VernacExtend",
            "e699406c916ebccb7edf587f144f8c6252d699d8"
        ],
        [
            "inversion H2; subst.",
            "VernacExtend",
            "cbe105a5addb129fa1e578ba8ef36c4763179006"
        ],
        [
            "apply P_add.",
            "VernacExtend",
            "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
        ],
        [
            "apply (Ht).",
            "VernacExtend",
            "3d48a1d94ba28df584299891c553d27a6a6c227e"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "constructor 1 with t';trivial.",
            "VernacExtend",
            "c988918b790c83741e960e94112fae343fa9892d"
        ],
        [
            "clear Hinsert H1 H2.",
            "VernacExtend",
            "4237e167b0a3b5ca551d778354521f0d9cee0c2d"
        ],
        [
            "induction H6.",
            "VernacExtend",
            "d952b6a4752e23dd01aab6ed4b924826224b8867"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "assert (H7 : P_on_tree ws (node (vs, a' :: l) ts)).",
            "VernacExtend",
            "1936d16eacdf128e4136c282b859784b07594a2c"
        ],
        [
            "apply (P_on_node Ht); left; trivial.",
            "VernacExtend",
            "333a7ecbe736f4890ffda4c1e4d36d18b6d4edec"
        ],
        [
            "assert (IHinsert_forest_simpl : P_on_tree ((a0::w)::ws) (node a f')).",
            "VernacExtend",
            "7f8927095b3ea2fc303d618bd1ba186202b5e1b8"
        ],
        [
            "apply IHis_insert_forest; trivial.",
            "VernacExtend",
            "6a4b6b9bb1f2f9cd4174c24a44b731d86f6bdbca"
        ],
        [
            "intros u Hu; apply IHt; right; trivial.",
            "VernacExtend",
            "47ab6440970b41cab15dd6bc63b707733c486b76"
        ],
        [
            "intros a'' l' vs' ts' Heq.",
            "VernacExtend",
            "e65560b04952c4995e1444bbe3f1265f6600f4a5"
        ],
        [
            "inversion Heq; subst.",
            "VernacExtend",
            "f8c3fba869460a79d6645c44de800bf5bcc32305"
        ],
        [
            "apply (Hfrom a'' l' vs' (node (vs, a' :: l) ts :: ts')); trivial.",
            "VernacExtend",
            "584c2882790c9a59685be707cc1a7a02107ad1a5"
        ],
        [
            "apply P_on_split with (node (vs,a'::l) ts); trivial.",
            "VernacExtend",
            "9b1f2cd423ce00d435a10690a7c50f9b3431d857"
        ],
        [
            "apply P_on_merge; trivial.",
            "VernacExtend",
            "3a55e1f85c4710a89b4691503370dcbae78d2b5a"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "assert (Hon : P_on_tree ws (node (vs, a' :: l) ts)).",
            "VernacExtend",
            "01249238393497c7e67f9574b70a9b085c0bf0fb"
        ],
        [
            "apply (P_on_node Ht); left; trivial.",
            "VernacExtend",
            "333a7ecbe736f4890ffda4c1e4d36d18b6d4edec"
        ],
        [
            "apply P_on_merge; trivial.",
            "VernacExtend",
            "3a55e1f85c4710a89b4691503370dcbae78d2b5a"
        ],
        [
            "apply P_on_split with (node (vs, a' :: l) ts); trivial.",
            "VernacExtend",
            "9b1f2cd423ce00d435a10690a7c50f9b3431d857"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "apply P_on_add; trivial.",
            "VernacExtend",
            "180f4c362a4109f95c0ea381ea8955ed5d894801"
        ],
        [
            "apply IHt with (node (vs, a' :: l) ts); try left; trivial.",
            "VernacExtend",
            "259f5ac54a65ad9539476e24d24e8d8cd4c8c857"
        ],
        [
            "intros a'' l' vs' ts' Heq.",
            "VernacExtend",
            "e65560b04952c4995e1444bbe3f1265f6600f4a5"
        ],
        [
            "inversion Heq; subst.",
            "VernacExtend",
            "f8c3fba869460a79d6645c44de800bf5bcc32305"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_insert_forest_invariant : forall ws f w a f', is_insert_forest f w a f' -> P_on_forest ws f -> P_on_forest ((a::w)::ws) f'.",
            "VernacStartTheoremProof",
            "1303087f729a59b05b4dce8a84eb22d4e33998f6"
        ],
        [
            "intros ws f w a f' H; induction H; intros Hf t'' Ht''.",
            "VernacExtend",
            "4bd5182006c881ebb0a7fc4e3e35bb81a81dc17a"
        ],
        [
            "apply P_add; apply (Hf t''); trivial.",
            "VernacExtend",
            "407dd5ae6b612263c59301616eca4c4699ea79d6"
        ],
        [
            "inversion Ht''; subst.",
            "VernacExtend",
            "f4f81f4a3a29ec514403acb4b52dd12a1551b631"
        ],
        [
            "elim H1; clear H1; intro H1.",
            "VernacExtend",
            "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply P_add; apply (Hf t''); trivial.",
            "VernacExtend",
            "407dd5ae6b612263c59301616eca4c4699ea79d6"
        ],
        [
            "constructor 1 with (node (vs, a' :: l) ts); try left; trivial.",
            "VernacExtend",
            "e026c5a3e9133b6332f5736c96eac819b7702a8d"
        ],
        [
            "assert (H' : P_on_forest ((a::w)::ws) f').",
            "VernacExtend",
            "1787529482fd787079fce1a18383cef9219d33bd"
        ],
        [
            "apply IHis_insert_forest; intros t'0 Ht'0.",
            "VernacExtend",
            "83eb5f2a07df8019b2c72a8fa307aec1e7450116"
        ],
        [
            "apply (Hf t'0).",
            "VernacExtend",
            "b93f4e084991aa0485e7d9aacadeed867e611e37"
        ],
        [
            "inversion Ht'0; subst.",
            "VernacExtend",
            "791a2beaf26c68e05e991e8acb29c7b8057e15eb"
        ],
        [
            "constructor 1 with t'1; try right; trivial.",
            "VernacExtend",
            "a728a85e4ed8d7c1230b74475977a21e02f77a6c"
        ],
        [
            "apply (H' t''); constructor 1 with t'; trivial.",
            "VernacExtend",
            "998e370a7ce4103cc486175a32df233833ce7c9f"
        ],
        [
            "inversion Ht''; subst.",
            "VernacExtend",
            "f4f81f4a3a29ec514403acb4b52dd12a1551b631"
        ],
        [
            "elim H1; clear H1; intro H1.",
            "VernacExtend",
            "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (Hfrom : from_insert_forest (node (vs, a' :: l) ts) a).",
            "VernacExtend",
            "6026a2aea24743032195191ea7e48fb3ca91ecff"
        ],
        [
            "intros a'' l' vs' ts' Heq.",
            "VernacExtend",
            "e65560b04952c4995e1444bbe3f1265f6600f4a5"
        ],
        [
            "inversion Heq; subst; trivial.",
            "VernacExtend",
            "e3720646aa10b23b66256c0a21238f2a75786ae9"
        ],
        [
            "generalize t'' H2; fold P_on_tree; apply (is_insert_tree_invariant (ws:=ws) Hfrom H0).",
            "VernacExtend",
            "df572ea2938df01d0d6cf1b620a886d23f76c032"
        ],
        [
            "intros t'1 Ht'1; apply (Hf t'1).",
            "VernacExtend",
            "d1139fdc8be19f076e74a3e1bbf7c756f044888a"
        ],
        [
            "constructor 1 with (node (vs, a' :: l) ts); try left; trivial.",
            "VernacExtend",
            "e026c5a3e9133b6332f5736c96eac819b7702a8d"
        ],
        [
            "apply P_add.",
            "VernacExtend",
            "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
        ],
        [
            "apply (Hf t'').",
            "VernacExtend",
            "fe53307bd7ec194330d9c221044522e0efa67fa2"
        ],
        [
            "constructor 1 with t'0; try right; trivial.",
            "VernacExtend",
            "6feb85fc21ca8bd57b3c0d3de8be2e31e811dffd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma P_on_is_forest : forall f ws, is_forest ws f -> P_on_forest ws f.",
            "VernacStartTheoremProof",
            "1d1de95f757c9fd2a55e8a27086410be2adfbd0d"
        ],
        [
            "intros f ws H; induction H; intros t Ht.",
            "VernacExtend",
            "fafd5b7e04ad3124df691a7eac0fca2c2253340e"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "apply (is_insert_forest_invariant (ws:=ws) H1); trivial.",
            "VernacExtend",
            "883d3a2d6e37da0192178022a0f27d84981db094"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "elim H1; clear H1; intro H1; subst.",
            "VernacExtend",
            "760e237354af7c3a81a9d255b76bfa6ca1c0f694"
        ],
        [
            "inversion H2; subst.",
            "VernacExtend",
            "cbe105a5addb129fa1e578ba8ef36c4763179006"
        ],
        [
            "apply P_added_node_base; trivial.",
            "VernacExtend",
            "f3cac61caa8e996c24bca6c827e046bc57c9a3ac"
        ],
        [
            "apply P_add.",
            "VernacExtend",
            "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
        ],
        [
            "apply IHis_forest.",
            "VernacExtend",
            "9e8399d1f43996f7ce3faac1c4db7fad96b79c5b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply P_add.",
            "VernacExtend",
            "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
        ],
        [
            "apply IHis_forest.",
            "VernacExtend",
            "9e8399d1f43996f7ce3faac1c4db7fad96b79c5b"
        ],
        [
            "constructor 1 with t'; trivial.",
            "VernacExtend",
            "c988918b790c83741e960e94112fae343fa9892d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End through_is_insert.",
            "VernacEndSegment",
            "1696f99436bef609070c53244a5c334b98b0a476"
        ],
        [
            "Definition no_nil (t : Tree) : Prop := forall vs l ts, t = node (vs,l) ts -> l <> nil.",
            "VernacDefinition",
            "d37df0acbf28d117290dbc182e8dbba18222ea49"
        ],
        [
            "Fact in_is_forest_no_nil : forall f ws, is_forest ws f -> forall t, tree_in_forest t f -> no_nil t.",
            "VernacStartTheoremProof",
            "25accec409b1a14000bf54980166251439489e93"
        ],
        [
            "intros f ws Hf; assert (H : P_on_forest (fun (_ : list (list A)) => no_nil) ws f).",
            "VernacExtend",
            "0baf85ea108d1ea5715c0917205d2af5a08867cd"
        ],
        [
            "apply P_on_is_forest; trivial; intros; intros ws' l' ts' H'; subst.",
            "VernacExtend",
            "05d2374e7dd0521927843a757c68131db9649614"
        ],
        [
            "inversion H'; subst; intro HF.",
            "VernacExtend",
            "a670674cc4852e7ef27cff733f95e3e5e241e988"
        ],
        [
            "inversion HF.",
            "VernacExtend",
            "0266fcf360b097cb98ff023ea4fe706fa1059b68"
        ],
        [
            "inversion H'; subst; intro HF.",
            "VernacExtend",
            "a670674cc4852e7ef27cff733f95e3e5e241e988"
        ],
        [
            "inversion HF.",
            "VernacExtend",
            "0266fcf360b097cb98ff023ea4fe706fa1059b68"
        ],
        [
            "inversion H'; subst.",
            "VernacExtend",
            "cc7763e4a41dab38916aab2b8b8e44fa201ad351"
        ],
        [
            "apply (H ws' l' (t::ts')); trivial.",
            "VernacExtend",
            "f3aaa8d0803547bb4e42bde73eb942ead73233bf"
        ],
        [
            "inversion H'; subst.",
            "VernacExtend",
            "cc7763e4a41dab38916aab2b8b8e44fa201ad351"
        ],
        [
            "apply (H ws' l' f0); trivial.",
            "VernacExtend",
            "5130953ac3512c70ff0b8d0ed360d7a661fa14ec"
        ],
        [
            "intros t Ht; apply (H t); trivial.",
            "VernacExtend",
            "7de0da1b3e26e02e4f63e8daee634f5bb049b34f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact is_insert_tree_same_root : forall t t' w a, is_insert_tree t w a t' -> root_label t = root_label t'.",
            "VernacStartTheoremProof",
            "7eb74820db25c1a2ed11df36c064deb627730152"
        ],
        [
            "intros t t' w a H; induction H; simpl; destruct l; simpl; trivial.",
            "VernacExtend",
            "23bfd3682bc2ac8b5dbf29dd3c8fa2bed0ee0dcc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact is_insert_forest_same_roots : forall f f' w a, is_insert_forest f w a f' -> roots_labels f = roots_labels f'.",
            "VernacStartTheoremProof",
            "b305df11f3d7c6e6031d99a12d16a7549e8be196"
        ],
        [
            "intros f f' w a H; induction H; simpl; trivial.",
            "VernacExtend",
            "4c5e2b5c09d4142ceaed80f89d03455e2036ab10"
        ],
        [
            "rewrite IHis_insert_forest; trivial.",
            "VernacExtend",
            "a57eba0f2049ea9044671fd2d1b0babf92629e65"
        ],
        [
            "destruct (roots_labels f); simpl.",
            "VernacExtend",
            "25ef55fe45d3c2cd23d123d03d0e329e24a3d90b"
        ],
        [
            "2 : destruct (root_label t'); trivial.",
            "VernacExtend",
            "028bef8067d16e66bd3fed30562fa69b1c012054"
        ],
        [
            "rewrite <- (is_insert_tree_same_root H0); simpl; trivial.",
            "VernacExtend",
            "26cff9905c47067e65a54e5ae162a3c31be56091"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact roots_labels_exist : forall ts, (forall t, In t ts -> no_nil t) -> exists rrts, roots_labels ts = Some rrts.",
            "VernacStartTheoremProof",
            "6e8161b1475726e1e5361d27148fb2b49adaa76a"
        ],
        [
            "intro ts; induction ts as [|t ts IHts]; intro Hts; simpl.",
            "VernacExtend",
            "9fb54b280ead763325a5a0ad8510e7277b6b565f"
        ],
        [
            "exists (nil (A:=A)); trivial.",
            "VernacExtend",
            "973448f6deea42450efa0e5b516ec5611f663e45"
        ],
        [
            "elim IHts.",
            "VernacExtend",
            "e56f9a66c5864d3b662da0320d7d6401f9570efa"
        ],
        [
            "2: intros t0 Ht0; apply Hts; right; trivial.",
            "VernacExtend",
            "42be6cb9a3c855f888f72bd613eb14be64d2cce8"
        ],
        [
            "intros rrts Hrrts.",
            "VernacExtend",
            "55a7e1b8dc6e559bc5547037dfcfa4d79df64990"
        ],
        [
            "rewrite Hrrts; simpl.",
            "VernacExtend",
            "2cd98df529364ac951730dd6ac979657781710ab"
        ],
        [
            "destruct t as [l tf]; destruct l as [ws bs].",
            "VernacExtend",
            "91dbb381b5e03e5cdab67a80148105c31bf347ee"
        ],
        [
            "assert (Hts' : no_nil (node (ws, bs) tf)).",
            "VernacExtend",
            "41e604cf3711c620e095be070aa9fd001bfb41b2"
        ],
        [
            "apply Hts; try left; trivial.",
            "VernacExtend",
            "59c94d46c90318e7102a6377d61cbc0b152ad7c4"
        ],
        [
            "destruct bs as [ | b bs]; simpl.",
            "VernacExtend",
            "4f0e1e4ff35096bca836a87f1a51c3805c98f59b"
        ],
        [
            "elim (Hts' ws nil tf); trivial.",
            "VernacExtend",
            "72a75c551f19c8953ae6ccf4357eb1874c4e58cd"
        ],
        [
            "exists (b::rrts); trivial.",
            "VernacExtend",
            "aa0260b15f3511704f32fcb3cacc74e21c320e73"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact insert_forest_aux_get : forall f a w, (forall t, In t f -> no_nil t /\\ exists t', is_insert_tree t w a t') -> exists f', is_insert_forest f w a f'.",
            "VernacStartTheoremProof",
            "31586a16460c6939386bf2d41952492a01d37d2b"
        ],
        [
            "intro f; induction f as [|t f IHf]; intros a w Hf.",
            "VernacExtend",
            "97fd949b5c11557e39feff411164494e4976e6f8"
        ],
        [
            "exists (nil (A:=Tree)); constructor.",
            "VernacExtend",
            "93747d58cebeb2f0e9efcec0785f03bb95b84f5a"
        ],
        [
            "assert (H: exists f' : list Tree, is_insert_forest f w a f').",
            "VernacExtend",
            "8f2e82f2411797c05ff883ee5321446940f9d678"
        ],
        [
            "apply IHf; intros t' Ht'; apply Hf; try right; trivial.",
            "VernacExtend",
            "8954bc4b986a11373d5c4f2c8ed5e63228abbee5"
        ],
        [
            "clear IHf; destruct t as [l ts].",
            "VernacExtend",
            "eb58211e63a56dbb13961efdbf85a055f497c4bc"
        ],
        [
            "destruct l as [ws bs]; destruct bs as [|b bs].",
            "VernacExtend",
            "dfcac8b4b936c431a00fbde2fee192d7af720155"
        ],
        [
            "assert (H' : In (node (ws, nil) ts) (node (ws, nil) ts :: f)).",
            "VernacExtend",
            "fb7939b74557412d097f9b8137fef1bfbf6b7860"
        ],
        [
            "left; trivial.",
            "VernacExtend",
            "2f1efd67ff23560c270a9589d0d1b100a9c80732"
        ],
        [
            "elim (Hf (node (ws, nil) ts) H'); intros HF dd; elim HF with ws (nil (A:=A)) ts; trivial.",
            "VernacExtend",
            "818648982d404d7027ad99d1f3e862b0a20dfd71"
        ],
        [
            "elim (leA_dec b a); intro case_b_a.",
            "VernacExtend",
            "1c679329fd40d1c3e08ca73dd90f34e93257b841"
        ],
        [
            "assert (H' : In (node (ws, b::bs) ts) (node (ws, b::bs) ts :: f)).",
            "VernacExtend",
            "41cc4bd2eefdabd817c6fbd17b91b6716718535c"
        ],
        [
            "left; trivial.",
            "VernacExtend",
            "2f1efd67ff23560c270a9589d0d1b100a9c80732"
        ],
        [
            "elim (Hf (node (ws, b::bs) ts) H'); intros H1 H2.",
            "VernacExtend",
            "5cca5d8282983d143944a6862e9d5ed9ebaa2afb"
        ],
        [
            "elim H2; clear H2; intros t' Ht'.",
            "VernacExtend",
            "cbe290a9034497f1d79d2f9be2d56ebc0ac602f0"
        ],
        [
            "exists (t'::f); constructor 3; trivial.",
            "VernacExtend",
            "43910e94fd94db56deee9a0d718c1497b8f5b35d"
        ],
        [
            "elim H; clear H; intros f' Hf'.",
            "VernacExtend",
            "ea00499ab4be18d14b0a510a295a556090d2b972"
        ],
        [
            "exists ((node (ws, b :: bs) ts)::f'); constructor 2; trivial.",
            "VernacExtend",
            "963756ff8e43e238c7fcf653752711c9cd973775"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact insert_tree_get : forall t w a, (forall t', subtree t' t -> no_nil t') -> exists t', is_insert_tree t w a t'.",
            "VernacStartTheoremProof",
            "4c633791d08b47118d0a59eaf328fb1e805f1d9f"
        ],
        [
            "intro t; induction t as [l | l ts IHt]; intros w a Ht.",
            "VernacExtend",
            "68e52b7e380c360e29609a48ba489848af907ae7"
        ],
        [
            "destruct l as [ws bs].",
            "VernacExtend",
            "9bcfc6c621e1f6da52737b8fe76f6aa1f1c96f78"
        ],
        [
            "exists (node (ws, bs) (node (w::ws, a::bs) nil :: nil)); constructor 1 with (nil (A := A)); trivial.",
            "VernacExtend",
            "007b4cfc494d5c29081c221c947c3cdcdf473653"
        ],
        [
            "intro H; inversion H; subst.",
            "VernacExtend",
            "973232febcb257c3e49074178389eb3901d0838b"
        ],
        [
            "destruct l as [ws bs].",
            "VernacExtend",
            "9bcfc6c621e1f6da52737b8fe76f6aa1f1c96f78"
        ],
        [
            "destruct bs as [|b bs].",
            "VernacExtend",
            "041ed1cb335c3849785bedb29514b28da069a1f1"
        ],
        [
            "assert (Hnn : no_nil (node (ws, nil) ts)).",
            "VernacExtend",
            "b30fa4ccf8c9396aa9834eda039949c4eec88f71"
        ],
        [
            "assert (Hd : subtree (node (ws,nil) ts) (node (ws,nil) ts)).",
            "VernacExtend",
            "c3059754719d1956ff18a6bff838d2b65eb7476f"
        ],
        [
            "constructor 1; trivial.",
            "VernacExtend",
            "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
        ],
        [
            "apply (Ht (node (ws,nil) ts) Hd).",
            "VernacExtend",
            "650af09099cce717c900df0ea4edbcb9908b8dfe"
        ],
        [
            "elim (Hnn ws nil ts); trivial.",
            "VernacExtend",
            "184f43057020a6341c6339066bbfd75b70ded40b"
        ],
        [
            "assert (H' : forall t, In t ts -> no_nil t /\\ exists t', is_insert_tree t w a t').",
            "VernacExtend",
            "9f7936d54b8fe357426c2665632c9d1a898ba1b5"
        ],
        [
            "intros u Hu.",
            "VernacExtend",
            "a26ee17805b1be6754886b68c7de9213f8c779e3"
        ],
        [
            "assert (H'' : subtree u (node (ws, b :: bs) ts)).",
            "VernacExtend",
            "b0e263de8a7df66f47b70addbf45150e657a1181"
        ],
        [
            "constructor 2; trivial.",
            "VernacExtend",
            "8e5a2f26e56df77c8c8c937900bf09ae229272d8"
        ],
        [
            "constructor 1 with u; trivial.",
            "VernacExtend",
            "636add42a5c798068af1f3a388174b5a9a9f79a0"
        ],
        [
            "constructor 1; trivial.",
            "VernacExtend",
            "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (Ht u H'').",
            "VernacExtend",
            "e9d42f6ae466ca9e0254ba7d430229af1d5283cf"
        ],
        [
            "apply IHt; trivial.",
            "VernacExtend",
            "2f3d72aa7de58cf8947ff068edea889d34c237da"
        ],
        [
            "intros t' Ht' ; assert (H' : subtree t' (node (ws, b :: bs) ts)).",
            "VernacExtend",
            "bccdccc80456bd1d52418ac19ba13ca6ca901616"
        ],
        [
            "apply subtree_trans with u; trivial.",
            "VernacExtend",
            "526c1293d8f69f1630b188952ea8958de9edb063"
        ],
        [
            "apply (Ht t' H' ).",
            "VernacExtend",
            "deae63bbef0646ca2af138a43c1ec83e75ccd415"
        ],
        [
            "assert (H : forall t, In t ts -> no_nil t).",
            "VernacExtend",
            "003ed89d4e075f8756569a9c7cb2fce027ab54b1"
        ],
        [
            "intros u Hu; elim (H' u Hu); trivial.",
            "VernacExtend",
            "8d57fb98abc30def35552ff134e1c424b61f0460"
        ],
        [
            "elim (roots_labels_exist ts H); intros rrts Hrrts.",
            "VernacExtend",
            "085065a089e4dfab71c35900870847b8f077fbc1"
        ],
        [
            "elim (greater_dec leA leA_dec a rrts); intro case_greater.",
            "VernacExtend",
            "83de06eb9867402123b31d21fbe80a1adfc42380"
        ],
        [
            "elim (insert_forest_aux_get ts H'); intros f' Hf'.",
            "VernacExtend",
            "22ce37985643cf4758f6413c0ffc9dd73fdc3ea7"
        ],
        [
            "exists (node (ws, b::bs) f'); constructor 2 with rrts; trivial.",
            "VernacExtend",
            "a41375b52505ab55b319417976e4968033ba7b22"
        ],
        [
            "exists (node (ws, b :: bs) (node (w::ws, a::b::bs) ts :: ts)); constructor 1 with rrts; trivial.",
            "VernacExtend",
            "720b7447ba30452a5c6645825d7ff1dd76dffcc6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact insert_forest_get : forall f a w ws, is_forest ws f -> exists f', is_insert_forest f w a f'.",
            "VernacStartTheoremProof",
            "e518f816b2f68208af1b66388a09467d1591f556"
        ],
        [
            "intros f a w ws Hisf; generalize (in_is_forest_no_nil Hisf); clear Hisf ws.",
            "VernacExtend",
            "582271b0b23fdfc11a7329eefa70821459a14ad1"
        ],
        [
            "induction f as [|t f IHf]; intro Hf.",
            "VernacExtend",
            "6e146f9169c953d2511c09d44a7b40799db4c38d"
        ],
        [
            "exists (nil (A:=Tree)); constructor.",
            "VernacExtend",
            "93747d58cebeb2f0e9efcec0785f03bb95b84f5a"
        ],
        [
            "assert (H : forall t', subtree t' t -> no_nil t').",
            "VernacExtend",
            "10970ec261af69a2dd16bcc8699b1fac3985ea87"
        ],
        [
            "intros t' Ht'.",
            "VernacExtend",
            "4549ecc5fe7ec8d979b53528ed3492cd571fcf6a"
        ],
        [
            "assert (H' : tree_in_forest t' (t :: f)).",
            "VernacExtend",
            "eba9df7cfa06294e71c39c571a9e140cde6a9c96"
        ],
        [
            "constructor 1 with t; try left; trivial.",
            "VernacExtend",
            "720ccb60944c2e75b5e00c2aff06f42cd4b7793b"
        ],
        [
            "apply Hf; trivial.",
            "VernacExtend",
            "9a49fe6b8b2bd1c31b8c1721f0440360571f000a"
        ],
        [
            "destruct t as [l ts].",
            "VernacExtend",
            "1b4997acec2ea705545cda055d98c98e173249ce"
        ],
        [
            "destruct l as [ws bs]; destruct bs as [|b bs].",
            "VernacExtend",
            "dfcac8b4b936c431a00fbde2fee192d7af720155"
        ],
        [
            "assert (Ht : subtree (node (ws, nil) ts) (node (ws, nil) ts)).",
            "VernacExtend",
            "cc994cef090bd400b3d4e5249e391d7dcc660725"
        ],
        [
            "constructor 1; trivial.",
            "VernacExtend",
            "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
        ],
        [
            "elim (H (node (ws,nil) ts) Ht ws nil ts); trivial.",
            "VernacExtend",
            "930f2f15408cea1b62def1e04a3cbe29d612976b"
        ],
        [
            "assert (H' : exists f', is_insert_forest f w a f').",
            "VernacExtend",
            "e2cf0bc44383c8256b78c724da6ec148a3728832"
        ],
        [
            "apply IHf.",
            "VernacExtend",
            "fe3d7ac69dd6703a2e59aeecadffa74709431f5f"
        ],
        [
            "intros t Ht; apply Hf.",
            "VernacExtend",
            "3cb9f61aad2246cc28670f59998eca0e036a2a41"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "constructor 1 with t'; try right; trivial.",
            "VernacExtend",
            "6b84058ffe24bd2bc8fecc2e17212136021481ea"
        ],
        [
            "elim H'; clear H'; intros f' Hf'.",
            "VernacExtend",
            "76911db67c27c46abb5d18c895de464b76b64070"
        ],
        [
            "elim (leA_dec b a); intro case_b_a.",
            "VernacExtend",
            "1c679329fd40d1c3e08ca73dd90f34e93257b841"
        ],
        [
            "elim (insert_tree_get w a H); intros t' Ht'.",
            "VernacExtend",
            "f48b9cd879ebd2e51d7e21e27aaba0434e844bac"
        ],
        [
            "exists (t'::f); constructor 3; trivial.",
            "VernacExtend",
            "43910e94fd94db56deee9a0d718c1497b8f5b35d"
        ],
        [
            "exists (node (ws, b :: bs) ts :: f'); constructor 2; trivial.",
            "VernacExtend",
            "963756ff8e43e238c7fcf653752711c9cd973775"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact nil_forest : forall ws, is_forest ws nil -> ws = nil.",
            "VernacStartTheoremProof",
            "b4aeef60d240e337686a86510ee1d9f08bc3725a"
        ],
        [
            "intro ws; induction ws as [| w ws IHw]; intros H1; trivial.",
            "VernacExtend",
            "fb1d71422ef3e6a43ba1c4613cd97b741ff2c66c"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "inversion H5; subst.",
            "VernacExtend",
            "cc8de5115dd254171f0c6ae8d0753a2f561087f5"
        ],
        [
            "generalize (IHw H2); intro; subst.",
            "VernacExtend",
            "c2222b338fd1df36658aafe5b971aea2a6150e36"
        ],
        [
            "simpl in H3; inversion H3.",
            "VernacExtend",
            "830e4c01b37a0dbd3d5292f6a3ba7937f47cdc9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact roots_labels_greater_get_tree : forall ts rrts, roots_labels ts = Some rrts -> forall a, greater leA a rrts -> exists vs, exists b, exists bs, exists ts', leA b a /\\ In (node (vs, b::bs) ts') ts.",
            "VernacStartTheoremProof",
            "1464969df061685c559b1d73f7b417978de5424e"
        ],
        [
            "intro ts; induction ts as [|t ts IHts]; intros rrts Hrrts a Ha.",
            "VernacExtend",
            "b366cb2d4f9e4e7a68d45dd9dd2f2a8e965eaed4"
        ],
        [
            "simpl in Hrrts; inversion Hrrts; subst.",
            "VernacExtend",
            "28005b9f19a61998bf383aaf8f05aa1652fb1bc6"
        ],
        [
            "inversion Ha.",
            "VernacExtend",
            "7addafd94f99373edc2f2990f1880ef5996e8be0"
        ],
        [
            "generalize Hrrts; simpl.",
            "VernacExtend",
            "3794467ff6e1e4a37e5c1b16045132e51fae91b6"
        ],
        [
            "destruct t as [l ts']; destruct l as [vs bs]; unfold root_label; simpl.",
            "VernacExtend",
            "02cd58aa2c15b0c2905efb5362909eeea31eea98"
        ],
        [
            "destruct bs as [|b bs]; simpl.",
            "VernacExtend",
            "4f0e1e4ff35096bca836a87f1a51c3805c98f59b"
        ],
        [
            "intro HF; inversion HF.",
            "VernacExtend",
            "470b0c76f6c793837a376a7dcc2af88d19364432"
        ],
        [
            "generalize (refl_equal (roots_labels ts)); pattern (roots_labels ts) at -1; case (roots_labels ts).",
            "VernacExtend",
            "c2aef5dfe45eed935190461bd09f7e34d201fd75"
        ],
        [
            "intros rrts' H1 H2; inversion H2; subst.",
            "VernacExtend",
            "674f46cab26e4064f882cfa27a45270004122868"
        ],
        [
            "inversion Ha; subst.",
            "VernacExtend",
            "b323f4d6ee9c0b73f29b4cf5c219abe637973707"
        ],
        [
            "exists vs; exists b; exists bs; exists ts'; split; try left; trivial.",
            "VernacExtend",
            "120231d9ea4dc486db268855daf4a6f4e56a3985"
        ],
        [
            "elim (IHts rrts') with a; trivial.",
            "VernacExtend",
            "864f8da5db05e62e5efffeed5827e298eff7843d"
        ],
        [
            "intros vs' H; elim H; clear H; intros b' H; elim H; clear H; intros bs' H.",
            "VernacExtend",
            "061445ed177e247ab62f670157bd130398557cd2"
        ],
        [
            "elim H; clear H; intros ts'' H; elim H; clear H; intros H H'.",
            "VernacExtend",
            "b3e768653a46459bc90a3e81e62576da67914e6c"
        ],
        [
            "exists vs'; exists b'; exists bs'; exists ts''; split; try right; trivial.",
            "VernacExtend",
            "4c5c23eecdbba40bff09a9ad1ee6baa29c894643"
        ],
        [
            "intros dd HF; inversion HF.",
            "VernacExtend",
            "f44d2323b1a52944b9edec3e1bd1753d4b0ba84c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact is_insert_tree_neq : forall t, forall w a t', is_insert_tree t w a t' -> t <> t'.",
            "VernacStartTheoremProof",
            "1c3dc34fc25fd84edc935674d0d632c4cd0706b3"
        ],
        [
            "intro t; induction t as [l | l ts IHl]; intros w a t' Ht.",
            "VernacExtend",
            "906c919be76efe26af00a98199b6261599f2b5f3"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "intro HF; inversion HF.",
            "VernacExtend",
            "470b0c76f6c793837a376a7dcc2af88d19364432"
        ],
        [
            "generalize (node (w :: vs, a :: l0) ts) H0; clear H1 Ht HF IHl H0.",
            "VernacExtend",
            "33c8f3d17afacaf22ed4fa37e7747a0e9db060f7"
        ],
        [
            "induction ts as [|t ts IHts]; intros t' Ht; inversion Ht.",
            "VernacExtend",
            "0804fb765c02659bbea5b97d061dcdec765524c2"
        ],
        [
            "apply IHts with t'; trivial.",
            "VernacExtend",
            "259ee650b5d97f7b8149799e4f7a82e3a58d44e3"
        ],
        [
            "elim (roots_labels_greater_get_tree ts H1 H2); intros vs H'.",
            "VernacExtend",
            "999ff8279e77024c34d1c1c0670a146fc94a0abf"
        ],
        [
            "elim H'; clear H'; intros b H'; elim H'; clear H'; intros bs H'.",
            "VernacExtend",
            "96383a28d9129800ff157e39c38909cdfb8f387d"
        ],
        [
            "elim H'; clear H'; intros ts' H'; elim H'; clear H'; intros H3 H4.",
            "VernacExtend",
            "aea6ea1137053e28f0e66c63e6a42fa1162daf85"
        ],
        [
            "generalize (IHl (node (vs, b :: bs) ts') H4); intro IHl'.",
            "VernacExtend",
            "1a78c3726debef2f64d59556abc9f529d34e2cda"
        ],
        [
            "assert (IHl'' : forall u, In u ts -> forall (w : list A) (a : A) (t' : Tree), is_insert_tree u w a t' -> u <> t').",
            "VernacExtend",
            "a7bb2e59f1bcfff032222262e2e2d4a9f3e544dc"
        ],
        [
            "intros u Hu; apply IHl; trivial.",
            "VernacExtend",
            "5c512181031b09adaceba3017e9af88c2b4c1451"
        ],
        [
            "clear Ht H2 H1 IHl.",
            "VernacExtend",
            "411f6e9d919e744b69b0e8d6bbd3960e501bac0d"
        ],
        [
            "induction H6.",
            "VernacExtend",
            "d952b6a4752e23dd01aab6ed4b924826224b8867"
        ],
        [
            "inversion H4.",
            "VernacExtend",
            "184e412874313f14014d688ef3b69568302d00ff"
        ],
        [
            "elim H4; clear H4; intro H4.",
            "VernacExtend",
            "14b088687192634720c3664ec40f8e439bc7675a"
        ],
        [
            "inversion H4; subst.",
            "VernacExtend",
            "92ad52d95af4dae86dd1521283469fe7dcf249ec"
        ],
        [
            "elim H; trivial.",
            "VernacExtend",
            "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply (IHis_insert_forest); trivial.",
            "VernacExtend",
            "6a4b6b9bb1f2f9cd4174c24a44b731d86f6bdbca"
        ],
        [
            "intros u Hu; apply IHl''; try right; trivial.",
            "VernacExtend",
            "b87a14dd871665f63a4bf8c6a7ef04101d577017"
        ],
        [
            "elim H4; clear H4; intro H4.",
            "VernacExtend",
            "14b088687192634720c3664ec40f8e439bc7675a"
        ],
        [
            "inversion H4; subst.",
            "VernacExtend",
            "92ad52d95af4dae86dd1521283469fe7dcf249ec"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply (IHl' w a (node (vs, b :: bs) ts')); trivial.",
            "VernacExtend",
            "ad967e054008c2f9fb7249d6504c1635c25e1a78"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "assert (Hin : In (node (vs0, a' :: l0) ts) (node (vs0, a' :: l0) ts :: f)).",
            "VernacExtend",
            "26af450296ac309d8a9c07d5e5c68df8c184fd61"
        ],
        [
            "left; trivial.",
            "VernacExtend",
            "2f1efd67ff23560c270a9589d0d1b100a9c80732"
        ],
        [
            "apply (IHl'' (node (vs0, a' :: l0) ts) Hin w a (node (vs0, a' :: l0) ts)); trivial.",
            "VernacExtend",
            "43846c6e32737c2b44ddd748d13ffa8f6c80dc10"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_insert_forest_neq_aux : forall f a w f', (exists vs, exists a', exists l, exists ts, In (node (vs,a'::l) ts) f /\\ leA a' a) -> is_insert_forest f w a f' -> f <> f'.",
            "VernacStartTheoremProof",
            "ff32310777f85dcc031aa1905c640e9fe2cabbfe"
        ],
        [
            "intro f; induction f as [|t f IHf]; intros a w f' Hf Hf'.",
            "VernacExtend",
            "814d076fc575420a1c6dd22d7d10c27ef07a41db"
        ],
        [
            "elim Hf; clear Hf; intros vs Hf; elim Hf; clear Hf; intros a' Hf.",
            "VernacExtend",
            "c0da9aef8df2374e72b4bc83071027b642cfc5d7"
        ],
        [
            "elim Hf; clear Hf; intros l Hf; elim Hf; clear Hf; intros ts Hf; elim Hf; clear Hf; intros Hf1 Hf2.",
            "VernacExtend",
            "5a333611984dff960cf472ace811b2c4d8c31267"
        ],
        [
            "inversion Hf1.",
            "VernacExtend",
            "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
        ],
        [
            "elim Hf; clear Hf; intros vs Hf; elim Hf; clear Hf; intros a' Hf.",
            "VernacExtend",
            "c0da9aef8df2374e72b4bc83071027b642cfc5d7"
        ],
        [
            "elim Hf; clear Hf; intros l Hf; elim Hf; clear Hf; intros ts Hf; elim Hf; clear Hf; intros Hf1 Hf2.",
            "VernacExtend",
            "5a333611984dff960cf472ace811b2c4d8c31267"
        ],
        [
            "elim Hf1; clear Hf1; intro Hf1.",
            "VernacExtend",
            "826953cfdb73a49c011a2e1ea5db13203fb3ec10"
        ],
        [
            "subst t; inversion Hf'; subst.",
            "VernacExtend",
            "e6445540dac0f1428e406812bb73d566aee25447"
        ],
        [
            "elim H8; trivial.",
            "VernacExtend",
            "4cc3fbfaf30e2368b9e2aab0fb4fe50b596b4c97"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "generalize H8 (refl_equal (node (vs, a' :: l) ts)); apply is_insert_tree_neq.",
            "VernacExtend",
            "e007f15a018b511327156b5a8f833d7b2d11af31"
        ],
        [
            "inversion Hf'; subst.",
            "VernacExtend",
            "e6e34d7fc42d2a2a1c988bd642ca670033a663cf"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "generalize H1 (refl_equal f'0); apply IHf.",
            "VernacExtend",
            "58881dc5c9923a24e06c85cfc8cf3b5722929a00"
        ],
        [
            "exists vs; exists a'; exists l; exists ts; split; trivial.",
            "VernacExtend",
            "1fb2583649dfa14ef490b10f5e9c105922138c3e"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "generalize H5 (refl_equal (node (vs0, a'0 :: l0) ts0)); apply is_insert_tree_neq.",
            "VernacExtend",
            "e965818dc0242f62b733e5a59855da3a85bbbb1a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact is_insert_forest_neq : forall f ws, is_forest ws f -> forall a w f', greater leA a (bad_subsequence leA leA_dec (firsts ws)) -> is_insert_forest f w a f' -> f <> f'.",
            "VernacStartTheoremProof",
            "ffe2f6b77a484c769572215e7b1a20267952c9c9"
        ],
        [
            "intros f ws Hws a w f' Hg; apply is_insert_forest_neq_aux; trivial.",
            "VernacExtend",
            "c21e8e5697db144daa554be40fe0caa9d1ad18bd"
        ],
        [
            "clear w f'.",
            "VernacExtend",
            "a8091c9e4bd4fd5036b1f491ceb6bbbe8c10f5d3"
        ],
        [
            "generalize a Hg; clear a Hg.",
            "VernacExtend",
            "38c02fb49fad6050b2789f457bdd78fa062488dd"
        ],
        [
            "induction Hws; intros a' Hg.",
            "VernacExtend",
            "861ee73a47b5749c4d0936d61efdbed3f98bbb19"
        ],
        [
            "inversion Hg.",
            "VernacExtend",
            "2b3e87be6e02711c01a4bc85ceceef3d8e17acc4"
        ],
        [
            "generalize Hg; clear Hg; simpl in |- *.",
            "VernacExtend",
            "11f3d5a42bc52a2a91dd37a8b465b3e5d22f9aea"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intros case_ws Hg.",
            "VernacExtend",
            "73c3bcd377233531917894d95b460b010d2dab79"
        ],
        [
            "elim (IHHws a' Hg); intros vs H'.",
            "VernacExtend",
            "8a6d5449142c6409b603148bf696275b8a161cb3"
        ],
        [
            "elim H'; clear H'; intros a'' H'.",
            "VernacExtend",
            "f27e493fd7cf0ac98107a70b202d966f9eee0d25"
        ],
        [
            "elim H'; clear H'; intros l H'.",
            "VernacExtend",
            "2ea6189e87c74e49e60e9d20c5aeca1712e2f5de"
        ],
        [
            "elim H'; clear H'; intros ts H'.",
            "VernacExtend",
            "093c9c621837bf1f84885c6c94c178469371ecde"
        ],
        [
            "elim H'; clear H'; intros H1 H2.",
            "VernacExtend",
            "1bc0cf9e0b7c4dc6fec229b6a8b201b73f5c5dbf"
        ],
        [
            "clear IHHws Hws case_ws Hg.",
            "VernacExtend",
            "012b420f2c4ba5d763bfb07dc40f256e2bf00144"
        ],
        [
            "induction H0.",
            "VernacExtend",
            "f7088b4eda47862769d27dcb01ed8193ca5ffe6c"
        ],
        [
            "inversion H1.",
            "VernacExtend",
            "58dee2cce9b13b50b065ba894c1b533413715754"
        ],
        [
            "elim H1; clear H1; intro H1.",
            "VernacExtend",
            "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "exists vs; exists a''; exists l; exists ts; split; try left; trivial.",
            "VernacExtend",
            "d8aa9e8783c7c0e4f25e02ff7716dd9cc020afae"
        ],
        [
            "elim (IHis_insert_forest H H1); intros vs' H4.",
            "VernacExtend",
            "1cd2af86823d7ea98b29c862f83a8928c795ade2"
        ],
        [
            "elim H4; clear H4; intros a''' H4.",
            "VernacExtend",
            "743f2d5d4d5d6c1dcc3a4a9b91b314dcf867cdac"
        ],
        [
            "elim H4; clear H4; intros l' H4.",
            "VernacExtend",
            "fbd22bb02713e6b14dd9272669e8a571c350d2d5"
        ],
        [
            "elim H4; clear H4; intros ts' H4.",
            "VernacExtend",
            "976d82d718b9a0f38fec953c96a58295615dfdba"
        ],
        [
            "elim H4; clear H4; intros H4 H5.",
            "VernacExtend",
            "ef934d3f0390895437a06021bbce9a9e845f2fd0"
        ],
        [
            "exists vs'; exists a'''; exists l'; exists ts'.",
            "VernacExtend",
            "6b961dfd0c3c61fbf18e1f2ac27646a7ea1fe630"
        ],
        [
            "split; try right; trivial.",
            "VernacExtend",
            "91fd8431be9c4da0d0b1cdfe9d521e147d4665bb"
        ],
        [
            "elim H1; clear H1; intro H1.",
            "VernacExtend",
            "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "generalize (is_insert_tree_same_root H3).",
            "VernacExtend",
            "1d1fb6fb582a6af6e7e66c9c6f901a2ead8335ad"
        ],
        [
            "unfold root_label; simpl; intro H5.",
            "VernacExtend",
            "4f0403740585ca9b373ea693f9700a7e389ca0f1"
        ],
        [
            "destruct t' as [lbl t'ts].",
            "VernacExtend",
            "686e2ff6bbd2e09db117b9adb1ec9e14b4e39100"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "destruct lbl as [t'vs t'l].",
            "VernacExtend",
            "0e7989cc5da398e9f955b81edd0fd03d7247aaab"
        ],
        [
            "destruct t'l; inversion H5; subst.",
            "VernacExtend",
            "ab2010207471cf158f8359002857b4cee4dce099"
        ],
        [
            "exists t'vs; exists a0; exists t'l; exists t'ts; split; try left; trivial.",
            "VernacExtend",
            "b6cc02d923906a2984f1de3bb3defc9217941651"
        ],
        [
            "exists vs; exists a''; exists l; exists ts; split; try right; trivial.",
            "VernacExtend",
            "7ef245b586539d775321d4d28d8d649fe2bca7a4"
        ],
        [
            "elim case_ws; trivial.",
            "VernacExtend",
            "124629547e6f8b0a82655cf000c3f64bd6d64be7"
        ],
        [
            "generalize Hg; clear Hg; simpl.",
            "VernacExtend",
            "11f3d5a42bc52a2a91dd37a8b465b3e5d22f9aea"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intros case_ws Hg.",
            "VernacExtend",
            "73c3bcd377233531917894d95b460b010d2dab79"
        ],
        [
            "elim H; trivial.",
            "VernacExtend",
            "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
        ],
        [
            "inversion Hg; subst.",
            "VernacExtend",
            "cff8dc706b49bd16b7357e2db2cbd42f904b1e33"
        ],
        [
            "exists (w::ws); exists a; exists (nil (A:=A)); exists f; split; try left; trivial.",
            "VernacExtend",
            "9e01d2e826c6bb73f82fd5e4f832011e649e6f26"
        ],
        [
            "elim (IHHws a' H2); intros vs' H3.",
            "VernacExtend",
            "6f6f1cff1a73f74de2bab236f9f537cbbac6632a"
        ],
        [
            "elim H3; clear H3; intros a'' H3; elim H3; clear H3; intros l' H3.",
            "VernacExtend",
            "75dc584ded8a25dfaad6cbd18b7c1ec7ce220862"
        ],
        [
            "elim H3; clear H3; intros ts' H3; elim H3; clear H3; intros H3 H4.",
            "VernacExtend",
            "f6c084af2077ce138d427a6e55e5770f54187d78"
        ],
        [
            "exists vs'; exists a''; exists l'; exists ts'; split; try right; trivial.",
            "VernacExtend",
            "8b3ef65018f437889746d88dc040ae801883057d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End higman_aux.",
            "VernacEndSegment",
            "695673c6ec242e9534ae22b9ba45148ba120f45b"
        ]
    ],
    "proofs": [
        {
            "name": "eq_Tree_dec",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "assert (H : forall l l' : (list (list A) * (list A)), {l = l'} + {l <> l'}).",
                        "VernacExtend",
                        "bd942155c9b02c28d7e721eae510afd225b405c0"
                    ]
                },
                {
                    "command": [
                        "intros l l'; destruct l as [vs l]; destruct l' as [vs' l'].",
                        "VernacExtend",
                        "fdb43d2403c4800dcb8115b258788b1b7c4e1e55"
                    ]
                },
                {
                    "command": [
                        "elim (list_eq_dec eqA_dec l l'); intro case_l.",
                        "VernacExtend",
                        "46abaac5bd708c2d5f658b97e600b120e98f347b"
                    ]
                },
                {
                    "command": [
                        "subst; elim (list_eq_dec (list_eq_dec eqA_dec) vs vs'); intro case_vs.",
                        "VernacExtend",
                        "af9b91ef6eb595b83f5c25dfecd0fb48ccaca987"
                    ]
                },
                {
                    "command": [
                        "subst; left; trivial.",
                        "VernacExtend",
                        "e75963e6a008b97432dc6e5689c74a1c4efb429b"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF; subst; apply case_vs; trivial.",
                        "VernacExtend",
                        "150bc6726e41ba8d0b03684b1f83692916af6cbc"
                    ]
                },
                {
                    "command": [
                        "right; intro HF; inversion HF; subst; apply case_l; trivial.",
                        "VernacExtend",
                        "3bf5c281761ca2951465be42c198c68cfa9ac227"
                    ]
                },
                {
                    "command": [
                        "intros t t'; apply (eq_tree_dec H).",
                        "VernacExtend",
                        "7846b48bae16609155b2ca1f2c2449c99ea848c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_on_node",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros a ts ws Hats t Ht t' Ht'.",
                        "VernacExtend",
                        "0ce5bdbb0a0871a98a4640cbdf55a34f4361f30e"
                    ]
                },
                {
                    "command": [
                        "apply Hats.",
                        "VernacExtend",
                        "716fecbaedd4817b3093d02ed01fa761c2cb5213"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t; trivial.",
                        "VernacExtend",
                        "2f6654825d09b947c84222c05f531ba36e5a8879"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_on_split",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros ws a t f Hatf Ht t' Ht'.",
                        "VernacExtend",
                        "f66960c0b102d005ed333abaeedffee76ac6aa3e"
                    ]
                },
                {
                    "command": [
                        "inversion Ht'; subst.",
                        "VernacExtend",
                        "4205327192eae5b0a719b2b5d8cde3bd7568386f"
                    ]
                },
                {
                    "command": [
                        "apply P_split with t.",
                        "VernacExtend",
                        "90b02f455714f77d8793f7e3f533fd7b6868d95c"
                    ]
                },
                {
                    "command": [
                        "apply (Hatf (node a (t::f))); constructor; trivial.",
                        "VernacExtend",
                        "f72abd6a865ff84f90b41b0d9eb856045d8bf76b"
                    ]
                },
                {
                    "command": [
                        "apply (Ht t); constructor; trivial.",
                        "VernacExtend",
                        "d218db74d2d4efed33cb5ad969ae02284f2f1c30"
                    ]
                },
                {
                    "command": [
                        "apply (Hatf t').",
                        "VernacExtend",
                        "00b36a40b7c55b497e3b6d598e0969bc6647a0eb"
                    ]
                },
                {
                    "command": [
                        "constructor 2; inversion H1; subst.",
                        "VernacExtend",
                        "8cbd8b7058d1676f9769520cc778ad72a3884ea7"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'0; try right; trivial.",
                        "VernacExtend",
                        "6feb85fc21ca8bd57b3c0d3de8be2e31e811dffd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_on_merge",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros ws a t f Haf Ht t' Ht'.",
                        "VernacExtend",
                        "8ed1aff91142616a1422af86dbd2142550f08f1e"
                    ]
                },
                {
                    "command": [
                        "inversion Ht'; subst.",
                        "VernacExtend",
                        "4205327192eae5b0a719b2b5d8cde3bd7568386f"
                    ]
                },
                {
                    "command": [
                        "apply P_merge.",
                        "VernacExtend",
                        "5924c8a7687b4151b7b8ff916183263af79d7eb4"
                    ]
                },
                {
                    "command": [
                        "apply (Haf (node a f)); constructor; trivial.",
                        "VernacExtend",
                        "f902f18e86997f44d4e76f28a5af3313f03a9da4"
                    ]
                },
                {
                    "command": [
                        "apply (Ht t); constructor; trivial.",
                        "VernacExtend",
                        "d218db74d2d4efed33cb5ad969ae02284f2f1c30"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply (Ht t'); trivial.",
                        "VernacExtend",
                        "038e55a6077ee5607dc1f4721f7be63d79f93ef9"
                    ]
                },
                {
                    "command": [
                        "apply (Haf t'); constructor 2; trivial.",
                        "VernacExtend",
                        "b21dd8fbff8ca29db21f1bfd272d7b88814f85fd"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'0; trivial.",
                        "VernacExtend",
                        "5508d7134541661b9f4a8c0499253f9c7b6bd71e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_on_add",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros w ws t Ht t' Ht'; inversion Ht'; subst.",
                        "VernacExtend",
                        "d6d5d2687cf184dc3e44581870f5bf3788a27634"
                    ]
                },
                {
                    "command": [
                        "apply P_add; apply (Ht t); trivial.",
                        "VernacExtend",
                        "6e2629e6ee6f43151423a5db681bbf5e874f2aed"
                    ]
                },
                {
                    "command": [
                        "apply P_add; apply (Ht t'); trivial.",
                        "VernacExtend",
                        "faabdda3c2822e3d5163d46b4aba950da4e90e8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_insert_forest_invariant",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "intros ws f w a f' H; induction H; intros Hf t'' Ht''.",
                        "VernacExtend",
                        "4bd5182006c881ebb0a7fc4e3e35bb81a81dc17a"
                    ]
                },
                {
                    "command": [
                        "apply P_add; apply (Hf t''); trivial.",
                        "VernacExtend",
                        "407dd5ae6b612263c59301616eca4c4699ea79d6"
                    ]
                },
                {
                    "command": [
                        "inversion Ht''; subst.",
                        "VernacExtend",
                        "f4f81f4a3a29ec514403acb4b52dd12a1551b631"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intro H1.",
                        "VernacExtend",
                        "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply P_add; apply (Hf t''); trivial.",
                        "VernacExtend",
                        "407dd5ae6b612263c59301616eca4c4699ea79d6"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with (node (vs, a' :: l) ts); try left; trivial.",
                        "VernacExtend",
                        "e026c5a3e9133b6332f5736c96eac819b7702a8d"
                    ]
                },
                {
                    "command": [
                        "assert (H' : P_on_forest ((a::w)::ws) f').",
                        "VernacExtend",
                        "1787529482fd787079fce1a18383cef9219d33bd"
                    ]
                },
                {
                    "command": [
                        "apply IHis_insert_forest; intros t'0 Ht'0.",
                        "VernacExtend",
                        "83eb5f2a07df8019b2c72a8fa307aec1e7450116"
                    ]
                },
                {
                    "command": [
                        "apply (Hf t'0).",
                        "VernacExtend",
                        "b93f4e084991aa0485e7d9aacadeed867e611e37"
                    ]
                },
                {
                    "command": [
                        "inversion Ht'0; subst.",
                        "VernacExtend",
                        "791a2beaf26c68e05e991e8acb29c7b8057e15eb"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'1; try right; trivial.",
                        "VernacExtend",
                        "a728a85e4ed8d7c1230b74475977a21e02f77a6c"
                    ]
                },
                {
                    "command": [
                        "apply (H' t''); constructor 1 with t'; trivial.",
                        "VernacExtend",
                        "998e370a7ce4103cc486175a32df233833ce7c9f"
                    ]
                },
                {
                    "command": [
                        "inversion Ht''; subst.",
                        "VernacExtend",
                        "f4f81f4a3a29ec514403acb4b52dd12a1551b631"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intro H1.",
                        "VernacExtend",
                        "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (Hfrom : from_insert_forest (node (vs, a' :: l) ts) a).",
                        "VernacExtend",
                        "6026a2aea24743032195191ea7e48fb3ca91ecff"
                    ]
                },
                {
                    "command": [
                        "intros a'' l' vs' ts' Heq.",
                        "VernacExtend",
                        "e65560b04952c4995e1444bbe3f1265f6600f4a5"
                    ]
                },
                {
                    "command": [
                        "inversion Heq; subst; trivial.",
                        "VernacExtend",
                        "e3720646aa10b23b66256c0a21238f2a75786ae9"
                    ]
                },
                {
                    "command": [
                        "generalize t'' H2; fold P_on_tree; apply (is_insert_tree_invariant (ws:=ws) Hfrom H0).",
                        "VernacExtend",
                        "df572ea2938df01d0d6cf1b620a886d23f76c032"
                    ]
                },
                {
                    "command": [
                        "intros t'1 Ht'1; apply (Hf t'1).",
                        "VernacExtend",
                        "d1139fdc8be19f076e74a3e1bbf7c756f044888a"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with (node (vs, a' :: l) ts); try left; trivial.",
                        "VernacExtend",
                        "e026c5a3e9133b6332f5736c96eac819b7702a8d"
                    ]
                },
                {
                    "command": [
                        "apply P_add.",
                        "VernacExtend",
                        "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
                    ]
                },
                {
                    "command": [
                        "apply (Hf t'').",
                        "VernacExtend",
                        "fe53307bd7ec194330d9c221044522e0efa67fa2"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'0; try right; trivial.",
                        "VernacExtend",
                        "6feb85fc21ca8bd57b3c0d3de8be2e31e811dffd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_on_is_forest",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "intros f ws H; induction H; intros t Ht.",
                        "VernacExtend",
                        "fafd5b7e04ad3124df691a7eac0fca2c2253340e"
                    ]
                },
                {
                    "command": [
                        "inversion Ht; subst.",
                        "VernacExtend",
                        "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "apply (is_insert_forest_invariant (ws:=ws) H1); trivial.",
                        "VernacExtend",
                        "883d3a2d6e37da0192178022a0f27d84981db094"
                    ]
                },
                {
                    "command": [
                        "inversion Ht; subst.",
                        "VernacExtend",
                        "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intro H1; subst.",
                        "VernacExtend",
                        "760e237354af7c3a81a9d255b76bfa6ca1c0f694"
                    ]
                },
                {
                    "command": [
                        "inversion H2; subst.",
                        "VernacExtend",
                        "cbe105a5addb129fa1e578ba8ef36c4763179006"
                    ]
                },
                {
                    "command": [
                        "apply P_added_node_base; trivial.",
                        "VernacExtend",
                        "f3cac61caa8e996c24bca6c827e046bc57c9a3ac"
                    ]
                },
                {
                    "command": [
                        "apply P_add.",
                        "VernacExtend",
                        "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
                    ]
                },
                {
                    "command": [
                        "apply IHis_forest.",
                        "VernacExtend",
                        "9e8399d1f43996f7ce3faac1c4db7fad96b79c5b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply P_add.",
                        "VernacExtend",
                        "878d1d0cb19e337017cd18f6cdb047fc9a1a5730"
                    ]
                },
                {
                    "command": [
                        "apply IHis_forest.",
                        "VernacExtend",
                        "9e8399d1f43996f7ce3faac1c4db7fad96b79c5b"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'; trivial.",
                        "VernacExtend",
                        "c988918b790c83741e960e94112fae343fa9892d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_is_forest_no_nil",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "intros f ws Hf; assert (H : P_on_forest (fun (_ : list (list A)) => no_nil) ws f).",
                        "VernacExtend",
                        "0baf85ea108d1ea5715c0917205d2af5a08867cd"
                    ]
                },
                {
                    "command": [
                        "apply P_on_is_forest; trivial; intros; intros ws' l' ts' H'; subst.",
                        "VernacExtend",
                        "05d2374e7dd0521927843a757c68131db9649614"
                    ]
                },
                {
                    "command": [
                        "inversion H'; subst; intro HF.",
                        "VernacExtend",
                        "a670674cc4852e7ef27cff733f95e3e5e241e988"
                    ]
                },
                {
                    "command": [
                        "inversion HF.",
                        "VernacExtend",
                        "0266fcf360b097cb98ff023ea4fe706fa1059b68"
                    ]
                },
                {
                    "command": [
                        "inversion H'; subst; intro HF.",
                        "VernacExtend",
                        "a670674cc4852e7ef27cff733f95e3e5e241e988"
                    ]
                },
                {
                    "command": [
                        "inversion HF.",
                        "VernacExtend",
                        "0266fcf360b097cb98ff023ea4fe706fa1059b68"
                    ]
                },
                {
                    "command": [
                        "inversion H'; subst.",
                        "VernacExtend",
                        "cc7763e4a41dab38916aab2b8b8e44fa201ad351"
                    ]
                },
                {
                    "command": [
                        "apply (H ws' l' (t::ts')); trivial.",
                        "VernacExtend",
                        "f3aaa8d0803547bb4e42bde73eb942ead73233bf"
                    ]
                },
                {
                    "command": [
                        "inversion H'; subst.",
                        "VernacExtend",
                        "cc7763e4a41dab38916aab2b8b8e44fa201ad351"
                    ]
                },
                {
                    "command": [
                        "apply (H ws' l' f0); trivial.",
                        "VernacExtend",
                        "5130953ac3512c70ff0b8d0ed360d7a661fa14ec"
                    ]
                },
                {
                    "command": [
                        "intros t Ht; apply (H t); trivial.",
                        "VernacExtend",
                        "7de0da1b3e26e02e4f63e8daee634f5bb049b34f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_insert_tree_same_root",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intros t t' w a H; induction H; simpl; destruct l; simpl; trivial.",
                        "VernacExtend",
                        "23bfd3682bc2ac8b5dbf29dd3c8fa2bed0ee0dcc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insert_forest_aux_get",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "intro f; induction f as [|t f IHf]; intros a w Hf.",
                        "VernacExtend",
                        "97fd949b5c11557e39feff411164494e4976e6f8"
                    ]
                },
                {
                    "command": [
                        "exists (nil (A:=Tree)); constructor.",
                        "VernacExtend",
                        "93747d58cebeb2f0e9efcec0785f03bb95b84f5a"
                    ]
                },
                {
                    "command": [
                        "assert (H: exists f' : list Tree, is_insert_forest f w a f').",
                        "VernacExtend",
                        "8f2e82f2411797c05ff883ee5321446940f9d678"
                    ]
                },
                {
                    "command": [
                        "apply IHf; intros t' Ht'; apply Hf; try right; trivial.",
                        "VernacExtend",
                        "8954bc4b986a11373d5c4f2c8ed5e63228abbee5"
                    ]
                },
                {
                    "command": [
                        "clear IHf; destruct t as [l ts].",
                        "VernacExtend",
                        "eb58211e63a56dbb13961efdbf85a055f497c4bc"
                    ]
                },
                {
                    "command": [
                        "destruct l as [ws bs]; destruct bs as [|b bs].",
                        "VernacExtend",
                        "dfcac8b4b936c431a00fbde2fee192d7af720155"
                    ]
                },
                {
                    "command": [
                        "assert (H' : In (node (ws, nil) ts) (node (ws, nil) ts :: f)).",
                        "VernacExtend",
                        "fb7939b74557412d097f9b8137fef1bfbf6b7860"
                    ]
                },
                {
                    "command": [
                        "left; trivial.",
                        "VernacExtend",
                        "2f1efd67ff23560c270a9589d0d1b100a9c80732"
                    ]
                },
                {
                    "command": [
                        "elim (Hf (node (ws, nil) ts) H'); intros HF dd; elim HF with ws (nil (A:=A)) ts; trivial.",
                        "VernacExtend",
                        "818648982d404d7027ad99d1f3e862b0a20dfd71"
                    ]
                },
                {
                    "command": [
                        "elim (leA_dec b a); intro case_b_a.",
                        "VernacExtend",
                        "1c679329fd40d1c3e08ca73dd90f34e93257b841"
                    ]
                },
                {
                    "command": [
                        "assert (H' : In (node (ws, b::bs) ts) (node (ws, b::bs) ts :: f)).",
                        "VernacExtend",
                        "41cc4bd2eefdabd817c6fbd17b91b6716718535c"
                    ]
                },
                {
                    "command": [
                        "left; trivial.",
                        "VernacExtend",
                        "2f1efd67ff23560c270a9589d0d1b100a9c80732"
                    ]
                },
                {
                    "command": [
                        "elim (Hf (node (ws, b::bs) ts) H'); intros H1 H2.",
                        "VernacExtend",
                        "5cca5d8282983d143944a6862e9d5ed9ebaa2afb"
                    ]
                },
                {
                    "command": [
                        "elim H2; clear H2; intros t' Ht'.",
                        "VernacExtend",
                        "cbe290a9034497f1d79d2f9be2d56ebc0ac602f0"
                    ]
                },
                {
                    "command": [
                        "exists (t'::f); constructor 3; trivial.",
                        "VernacExtend",
                        "43910e94fd94db56deee9a0d718c1497b8f5b35d"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros f' Hf'.",
                        "VernacExtend",
                        "ea00499ab4be18d14b0a510a295a556090d2b972"
                    ]
                },
                {
                    "command": [
                        "exists ((node (ws, b :: bs) ts)::f'); constructor 2; trivial.",
                        "VernacExtend",
                        "963756ff8e43e238c7fcf653752711c9cd973775"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insert_tree_get",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "intro t; induction t as [l | l ts IHt]; intros w a Ht.",
                        "VernacExtend",
                        "68e52b7e380c360e29609a48ba489848af907ae7"
                    ]
                },
                {
                    "command": [
                        "destruct l as [ws bs].",
                        "VernacExtend",
                        "9bcfc6c621e1f6da52737b8fe76f6aa1f1c96f78"
                    ]
                },
                {
                    "command": [
                        "exists (node (ws, bs) (node (w::ws, a::bs) nil :: nil)); constructor 1 with (nil (A := A)); trivial.",
                        "VernacExtend",
                        "007b4cfc494d5c29081c221c947c3cdcdf473653"
                    ]
                },
                {
                    "command": [
                        "intro H; inversion H; subst.",
                        "VernacExtend",
                        "973232febcb257c3e49074178389eb3901d0838b"
                    ]
                },
                {
                    "command": [
                        "destruct l as [ws bs].",
                        "VernacExtend",
                        "9bcfc6c621e1f6da52737b8fe76f6aa1f1c96f78"
                    ]
                },
                {
                    "command": [
                        "destruct bs as [|b bs].",
                        "VernacExtend",
                        "041ed1cb335c3849785bedb29514b28da069a1f1"
                    ]
                },
                {
                    "command": [
                        "assert (Hnn : no_nil (node (ws, nil) ts)).",
                        "VernacExtend",
                        "b30fa4ccf8c9396aa9834eda039949c4eec88f71"
                    ]
                },
                {
                    "command": [
                        "assert (Hd : subtree (node (ws,nil) ts) (node (ws,nil) ts)).",
                        "VernacExtend",
                        "c3059754719d1956ff18a6bff838d2b65eb7476f"
                    ]
                },
                {
                    "command": [
                        "constructor 1; trivial.",
                        "VernacExtend",
                        "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
                    ]
                },
                {
                    "command": [
                        "apply (Ht (node (ws,nil) ts) Hd).",
                        "VernacExtend",
                        "650af09099cce717c900df0ea4edbcb9908b8dfe"
                    ]
                },
                {
                    "command": [
                        "elim (Hnn ws nil ts); trivial.",
                        "VernacExtend",
                        "184f43057020a6341c6339066bbfd75b70ded40b"
                    ]
                },
                {
                    "command": [
                        "assert (H' : forall t, In t ts -> no_nil t /\\ exists t', is_insert_tree t w a t').",
                        "VernacExtend",
                        "9f7936d54b8fe357426c2665632c9d1a898ba1b5"
                    ]
                },
                {
                    "command": [
                        "intros u Hu.",
                        "VernacExtend",
                        "a26ee17805b1be6754886b68c7de9213f8c779e3"
                    ]
                },
                {
                    "command": [
                        "assert (H'' : subtree u (node (ws, b :: bs) ts)).",
                        "VernacExtend",
                        "b0e263de8a7df66f47b70addbf45150e657a1181"
                    ]
                },
                {
                    "command": [
                        "constructor 2; trivial.",
                        "VernacExtend",
                        "8e5a2f26e56df77c8c8c937900bf09ae229272d8"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with u; trivial.",
                        "VernacExtend",
                        "636add42a5c798068af1f3a388174b5a9a9f79a0"
                    ]
                },
                {
                    "command": [
                        "constructor 1; trivial.",
                        "VernacExtend",
                        "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (Ht u H'').",
                        "VernacExtend",
                        "e9d42f6ae466ca9e0254ba7d430229af1d5283cf"
                    ]
                },
                {
                    "command": [
                        "apply IHt; trivial.",
                        "VernacExtend",
                        "2f3d72aa7de58cf8947ff068edea889d34c237da"
                    ]
                },
                {
                    "command": [
                        "intros t' Ht' ; assert (H' : subtree t' (node (ws, b :: bs) ts)).",
                        "VernacExtend",
                        "bccdccc80456bd1d52418ac19ba13ca6ca901616"
                    ]
                },
                {
                    "command": [
                        "apply subtree_trans with u; trivial.",
                        "VernacExtend",
                        "526c1293d8f69f1630b188952ea8958de9edb063"
                    ]
                },
                {
                    "command": [
                        "apply (Ht t' H' ).",
                        "VernacExtend",
                        "deae63bbef0646ca2af138a43c1ec83e75ccd415"
                    ]
                },
                {
                    "command": [
                        "assert (H : forall t, In t ts -> no_nil t).",
                        "VernacExtend",
                        "003ed89d4e075f8756569a9c7cb2fce027ab54b1"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; elim (H' u Hu); trivial.",
                        "VernacExtend",
                        "8d57fb98abc30def35552ff134e1c424b61f0460"
                    ]
                },
                {
                    "command": [
                        "elim (roots_labels_exist ts H); intros rrts Hrrts.",
                        "VernacExtend",
                        "085065a089e4dfab71c35900870847b8f077fbc1"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec leA leA_dec a rrts); intro case_greater.",
                        "VernacExtend",
                        "83de06eb9867402123b31d21fbe80a1adfc42380"
                    ]
                },
                {
                    "command": [
                        "elim (insert_forest_aux_get ts H'); intros f' Hf'.",
                        "VernacExtend",
                        "22ce37985643cf4758f6413c0ffc9dd73fdc3ea7"
                    ]
                },
                {
                    "command": [
                        "exists (node (ws, b::bs) f'); constructor 2 with rrts; trivial.",
                        "VernacExtend",
                        "a41375b52505ab55b319417976e4968033ba7b22"
                    ]
                },
                {
                    "command": [
                        "exists (node (ws, b :: bs) (node (w::ws, a::b::bs) ts :: ts)); constructor 1 with rrts; trivial.",
                        "VernacExtend",
                        "720b7447ba30452a5c6645825d7ff1dd76dffcc6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insert_forest_get",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "intros f a w ws Hisf; generalize (in_is_forest_no_nil Hisf); clear Hisf ws.",
                        "VernacExtend",
                        "582271b0b23fdfc11a7329eefa70821459a14ad1"
                    ]
                },
                {
                    "command": [
                        "induction f as [|t f IHf]; intro Hf.",
                        "VernacExtend",
                        "6e146f9169c953d2511c09d44a7b40799db4c38d"
                    ]
                },
                {
                    "command": [
                        "exists (nil (A:=Tree)); constructor.",
                        "VernacExtend",
                        "93747d58cebeb2f0e9efcec0785f03bb95b84f5a"
                    ]
                },
                {
                    "command": [
                        "assert (H : forall t', subtree t' t -> no_nil t').",
                        "VernacExtend",
                        "10970ec261af69a2dd16bcc8699b1fac3985ea87"
                    ]
                },
                {
                    "command": [
                        "intros t' Ht'.",
                        "VernacExtend",
                        "4549ecc5fe7ec8d979b53528ed3492cd571fcf6a"
                    ]
                },
                {
                    "command": [
                        "assert (H' : tree_in_forest t' (t :: f)).",
                        "VernacExtend",
                        "eba9df7cfa06294e71c39c571a9e140cde6a9c96"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t; try left; trivial.",
                        "VernacExtend",
                        "720ccb60944c2e75b5e00c2aff06f42cd4b7793b"
                    ]
                },
                {
                    "command": [
                        "apply Hf; trivial.",
                        "VernacExtend",
                        "9a49fe6b8b2bd1c31b8c1721f0440360571f000a"
                    ]
                },
                {
                    "command": [
                        "destruct t as [l ts].",
                        "VernacExtend",
                        "1b4997acec2ea705545cda055d98c98e173249ce"
                    ]
                },
                {
                    "command": [
                        "destruct l as [ws bs]; destruct bs as [|b bs].",
                        "VernacExtend",
                        "dfcac8b4b936c431a00fbde2fee192d7af720155"
                    ]
                },
                {
                    "command": [
                        "assert (Ht : subtree (node (ws, nil) ts) (node (ws, nil) ts)).",
                        "VernacExtend",
                        "cc994cef090bd400b3d4e5249e391d7dcc660725"
                    ]
                },
                {
                    "command": [
                        "constructor 1; trivial.",
                        "VernacExtend",
                        "25eaec67a0f652a15d0ce483cbe8830c4fe52d78"
                    ]
                },
                {
                    "command": [
                        "elim (H (node (ws,nil) ts) Ht ws nil ts); trivial.",
                        "VernacExtend",
                        "930f2f15408cea1b62def1e04a3cbe29d612976b"
                    ]
                },
                {
                    "command": [
                        "assert (H' : exists f', is_insert_forest f w a f').",
                        "VernacExtend",
                        "e2cf0bc44383c8256b78c724da6ec148a3728832"
                    ]
                },
                {
                    "command": [
                        "apply IHf.",
                        "VernacExtend",
                        "fe3d7ac69dd6703a2e59aeecadffa74709431f5f"
                    ]
                },
                {
                    "command": [
                        "intros t Ht; apply Hf.",
                        "VernacExtend",
                        "3cb9f61aad2246cc28670f59998eca0e036a2a41"
                    ]
                },
                {
                    "command": [
                        "inversion Ht; subst.",
                        "VernacExtend",
                        "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'; try right; trivial.",
                        "VernacExtend",
                        "6b84058ffe24bd2bc8fecc2e17212136021481ea"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros f' Hf'.",
                        "VernacExtend",
                        "76911db67c27c46abb5d18c895de464b76b64070"
                    ]
                },
                {
                    "command": [
                        "elim (leA_dec b a); intro case_b_a.",
                        "VernacExtend",
                        "1c679329fd40d1c3e08ca73dd90f34e93257b841"
                    ]
                },
                {
                    "command": [
                        "elim (insert_tree_get w a H); intros t' Ht'.",
                        "VernacExtend",
                        "f48b9cd879ebd2e51d7e21e27aaba0434e844bac"
                    ]
                },
                {
                    "command": [
                        "exists (t'::f); constructor 3; trivial.",
                        "VernacExtend",
                        "43910e94fd94db56deee9a0d718c1497b8f5b35d"
                    ]
                },
                {
                    "command": [
                        "exists (node (ws, b :: bs) ts :: f'); constructor 2; trivial.",
                        "VernacExtend",
                        "963756ff8e43e238c7fcf653752711c9cd973775"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nil_forest",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "intro ws; induction ws as [| w ws IHw]; intros H1; trivial.",
                        "VernacExtend",
                        "fb1d71422ef3e6a43ba1c4613cd97b741ff2c66c"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "inversion H5; subst.",
                        "VernacExtend",
                        "cc8de5115dd254171f0c6ae8d0753a2f561087f5"
                    ]
                },
                {
                    "command": [
                        "generalize (IHw H2); intro; subst.",
                        "VernacExtend",
                        "c2222b338fd1df36658aafe5b971aea2a6150e36"
                    ]
                },
                {
                    "command": [
                        "simpl in H3; inversion H3.",
                        "VernacExtend",
                        "830e4c01b37a0dbd3d5292f6a3ba7937f47cdc9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "roots_labels_greater_get_tree",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "intro ts; induction ts as [|t ts IHts]; intros rrts Hrrts a Ha.",
                        "VernacExtend",
                        "b366cb2d4f9e4e7a68d45dd9dd2f2a8e965eaed4"
                    ]
                },
                {
                    "command": [
                        "simpl in Hrrts; inversion Hrrts; subst.",
                        "VernacExtend",
                        "28005b9f19a61998bf383aaf8f05aa1652fb1bc6"
                    ]
                },
                {
                    "command": [
                        "inversion Ha.",
                        "VernacExtend",
                        "7addafd94f99373edc2f2990f1880ef5996e8be0"
                    ]
                },
                {
                    "command": [
                        "generalize Hrrts; simpl.",
                        "VernacExtend",
                        "3794467ff6e1e4a37e5c1b16045132e51fae91b6"
                    ]
                },
                {
                    "command": [
                        "destruct t as [l ts']; destruct l as [vs bs]; unfold root_label; simpl.",
                        "VernacExtend",
                        "02cd58aa2c15b0c2905efb5362909eeea31eea98"
                    ]
                },
                {
                    "command": [
                        "destruct bs as [|b bs]; simpl.",
                        "VernacExtend",
                        "4f0e1e4ff35096bca836a87f1a51c3805c98f59b"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF.",
                        "VernacExtend",
                        "470b0c76f6c793837a376a7dcc2af88d19364432"
                    ]
                },
                {
                    "command": [
                        "generalize (refl_equal (roots_labels ts)); pattern (roots_labels ts) at -1; case (roots_labels ts).",
                        "VernacExtend",
                        "c2aef5dfe45eed935190461bd09f7e34d201fd75"
                    ]
                },
                {
                    "command": [
                        "intros rrts' H1 H2; inversion H2; subst.",
                        "VernacExtend",
                        "674f46cab26e4064f882cfa27a45270004122868"
                    ]
                },
                {
                    "command": [
                        "inversion Ha; subst.",
                        "VernacExtend",
                        "b323f4d6ee9c0b73f29b4cf5c219abe637973707"
                    ]
                },
                {
                    "command": [
                        "exists vs; exists b; exists bs; exists ts'; split; try left; trivial.",
                        "VernacExtend",
                        "120231d9ea4dc486db268855daf4a6f4e56a3985"
                    ]
                },
                {
                    "command": [
                        "elim (IHts rrts') with a; trivial.",
                        "VernacExtend",
                        "864f8da5db05e62e5efffeed5827e298eff7843d"
                    ]
                },
                {
                    "command": [
                        "intros vs' H; elim H; clear H; intros b' H; elim H; clear H; intros bs' H.",
                        "VernacExtend",
                        "061445ed177e247ab62f670157bd130398557cd2"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros ts'' H; elim H; clear H; intros H H'.",
                        "VernacExtend",
                        "b3e768653a46459bc90a3e81e62576da67914e6c"
                    ]
                },
                {
                    "command": [
                        "exists vs'; exists b'; exists bs'; exists ts''; split; try right; trivial.",
                        "VernacExtend",
                        "4c5c23eecdbba40bff09a9ad1ee6baa29c894643"
                    ]
                },
                {
                    "command": [
                        "intros dd HF; inversion HF.",
                        "VernacExtend",
                        "f44d2323b1a52944b9edec3e1bd1753d4b0ba84c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_insert_tree_neq",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "intro t; induction t as [l | l ts IHl]; intros w a t' Ht.",
                        "VernacExtend",
                        "906c919be76efe26af00a98199b6261599f2b5f3"
                    ]
                },
                {
                    "command": [
                        "inversion Ht; subst.",
                        "VernacExtend",
                        "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "inversion H2.",
                        "VernacExtend",
                        "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
                    ]
                },
                {
                    "command": [
                        "inversion Ht; subst.",
                        "VernacExtend",
                        "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF.",
                        "VernacExtend",
                        "470b0c76f6c793837a376a7dcc2af88d19364432"
                    ]
                },
                {
                    "command": [
                        "generalize (node (w :: vs, a :: l0) ts) H0; clear H1 Ht HF IHl H0.",
                        "VernacExtend",
                        "33c8f3d17afacaf22ed4fa37e7747a0e9db060f7"
                    ]
                },
                {
                    "command": [
                        "induction ts as [|t ts IHts]; intros t' Ht; inversion Ht.",
                        "VernacExtend",
                        "0804fb765c02659bbea5b97d061dcdec765524c2"
                    ]
                },
                {
                    "command": [
                        "apply IHts with t'; trivial.",
                        "VernacExtend",
                        "259ee650b5d97f7b8149799e4f7a82e3a58d44e3"
                    ]
                },
                {
                    "command": [
                        "elim (roots_labels_greater_get_tree ts H1 H2); intros vs H'.",
                        "VernacExtend",
                        "999ff8279e77024c34d1c1c0670a146fc94a0abf"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros b H'; elim H'; clear H'; intros bs H'.",
                        "VernacExtend",
                        "96383a28d9129800ff157e39c38909cdfb8f387d"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros ts' H'; elim H'; clear H'; intros H3 H4.",
                        "VernacExtend",
                        "aea6ea1137053e28f0e66c63e6a42fa1162daf85"
                    ]
                },
                {
                    "command": [
                        "generalize (IHl (node (vs, b :: bs) ts') H4); intro IHl'.",
                        "VernacExtend",
                        "1a78c3726debef2f64d59556abc9f529d34e2cda"
                    ]
                },
                {
                    "command": [
                        "assert (IHl'' : forall u, In u ts -> forall (w : list A) (a : A) (t' : Tree), is_insert_tree u w a t' -> u <> t').",
                        "VernacExtend",
                        "a7bb2e59f1bcfff032222262e2e2d4a9f3e544dc"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; apply IHl; trivial.",
                        "VernacExtend",
                        "5c512181031b09adaceba3017e9af88c2b4c1451"
                    ]
                },
                {
                    "command": [
                        "clear Ht H2 H1 IHl.",
                        "VernacExtend",
                        "411f6e9d919e744b69b0e8d6bbd3960e501bac0d"
                    ]
                },
                {
                    "command": [
                        "induction H6.",
                        "VernacExtend",
                        "d952b6a4752e23dd01aab6ed4b924826224b8867"
                    ]
                },
                {
                    "command": [
                        "inversion H4.",
                        "VernacExtend",
                        "184e412874313f14014d688ef3b69568302d00ff"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intro H4.",
                        "VernacExtend",
                        "14b088687192634720c3664ec40f8e439bc7675a"
                    ]
                },
                {
                    "command": [
                        "inversion H4; subst.",
                        "VernacExtend",
                        "92ad52d95af4dae86dd1521283469fe7dcf249ec"
                    ]
                },
                {
                    "command": [
                        "elim H; trivial.",
                        "VernacExtend",
                        "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "apply (IHis_insert_forest); trivial.",
                        "VernacExtend",
                        "6a4b6b9bb1f2f9cd4174c24a44b731d86f6bdbca"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; apply IHl''; try right; trivial.",
                        "VernacExtend",
                        "b87a14dd871665f63a4bf8c6a7ef04101d577017"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intro H4.",
                        "VernacExtend",
                        "14b088687192634720c3664ec40f8e439bc7675a"
                    ]
                },
                {
                    "command": [
                        "inversion H4; subst.",
                        "VernacExtend",
                        "92ad52d95af4dae86dd1521283469fe7dcf249ec"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "apply (IHl' w a (node (vs, b :: bs) ts')); trivial.",
                        "VernacExtend",
                        "ad967e054008c2f9fb7249d6504c1635c25e1a78"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "assert (Hin : In (node (vs0, a' :: l0) ts) (node (vs0, a' :: l0) ts :: f)).",
                        "VernacExtend",
                        "26af450296ac309d8a9c07d5e5c68df8c184fd61"
                    ]
                },
                {
                    "command": [
                        "left; trivial.",
                        "VernacExtend",
                        "2f1efd67ff23560c270a9589d0d1b100a9c80732"
                    ]
                },
                {
                    "command": [
                        "apply (IHl'' (node (vs0, a' :: l0) ts) Hin w a (node (vs0, a' :: l0) ts)); trivial.",
                        "VernacExtend",
                        "43846c6e32737c2b44ddd748d13ffa8f6c80dc10"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_insert_forest_neq_aux",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "intro f; induction f as [|t f IHf]; intros a w f' Hf Hf'.",
                        "VernacExtend",
                        "814d076fc575420a1c6dd22d7d10c27ef07a41db"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros vs Hf; elim Hf; clear Hf; intros a' Hf.",
                        "VernacExtend",
                        "c0da9aef8df2374e72b4bc83071027b642cfc5d7"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros l Hf; elim Hf; clear Hf; intros ts Hf; elim Hf; clear Hf; intros Hf1 Hf2.",
                        "VernacExtend",
                        "5a333611984dff960cf472ace811b2c4d8c31267"
                    ]
                },
                {
                    "command": [
                        "inversion Hf1.",
                        "VernacExtend",
                        "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros vs Hf; elim Hf; clear Hf; intros a' Hf.",
                        "VernacExtend",
                        "c0da9aef8df2374e72b4bc83071027b642cfc5d7"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros l Hf; elim Hf; clear Hf; intros ts Hf; elim Hf; clear Hf; intros Hf1 Hf2.",
                        "VernacExtend",
                        "5a333611984dff960cf472ace811b2c4d8c31267"
                    ]
                },
                {
                    "command": [
                        "elim Hf1; clear Hf1; intro Hf1.",
                        "VernacExtend",
                        "826953cfdb73a49c011a2e1ea5db13203fb3ec10"
                    ]
                },
                {
                    "command": [
                        "subst t; inversion Hf'; subst.",
                        "VernacExtend",
                        "e6445540dac0f1428e406812bb73d566aee25447"
                    ]
                },
                {
                    "command": [
                        "elim H8; trivial.",
                        "VernacExtend",
                        "4cc3fbfaf30e2368b9e2aab0fb4fe50b596b4c97"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "generalize H8 (refl_equal (node (vs, a' :: l) ts)); apply is_insert_tree_neq.",
                        "VernacExtend",
                        "e007f15a018b511327156b5a8f833d7b2d11af31"
                    ]
                },
                {
                    "command": [
                        "inversion Hf'; subst.",
                        "VernacExtend",
                        "e6e34d7fc42d2a2a1c988bd642ca670033a663cf"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "generalize H1 (refl_equal f'0); apply IHf.",
                        "VernacExtend",
                        "58881dc5c9923a24e06c85cfc8cf3b5722929a00"
                    ]
                },
                {
                    "command": [
                        "exists vs; exists a'; exists l; exists ts; split; trivial.",
                        "VernacExtend",
                        "1fb2583649dfa14ef490b10f5e9c105922138c3e"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; subst.",
                        "VernacExtend",
                        "4d35c206165607b7acb1d11c8b422d6934a55278"
                    ]
                },
                {
                    "command": [
                        "generalize H5 (refl_equal (node (vs0, a'0 :: l0) ts0)); apply is_insert_tree_neq.",
                        "VernacExtend",
                        "e965818dc0242f62b733e5a59855da3a85bbbb1a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_insert_forest_neq",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "intros f ws Hws a w f' Hg; apply is_insert_forest_neq_aux; trivial.",
                        "VernacExtend",
                        "c21e8e5697db144daa554be40fe0caa9d1ad18bd"
                    ]
                },
                {
                    "command": [
                        "clear w f'.",
                        "VernacExtend",
                        "a8091c9e4bd4fd5036b1f491ceb6bbbe8c10f5d3"
                    ]
                },
                {
                    "command": [
                        "generalize a Hg; clear a Hg.",
                        "VernacExtend",
                        "38c02fb49fad6050b2789f457bdd78fa062488dd"
                    ]
                },
                {
                    "command": [
                        "induction Hws; intros a' Hg.",
                        "VernacExtend",
                        "861ee73a47b5749c4d0936d61efdbed3f98bbb19"
                    ]
                },
                {
                    "command": [
                        "inversion Hg.",
                        "VernacExtend",
                        "2b3e87be6e02711c01a4bc85ceceef3d8e17acc4"
                    ]
                },
                {
                    "command": [
                        "generalize Hg; clear Hg; simpl in |- *.",
                        "VernacExtend",
                        "11f3d5a42bc52a2a91dd37a8b465b3e5d22f9aea"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intros case_ws Hg.",
                        "VernacExtend",
                        "73c3bcd377233531917894d95b460b010d2dab79"
                    ]
                },
                {
                    "command": [
                        "elim (IHHws a' Hg); intros vs H'.",
                        "VernacExtend",
                        "8a6d5449142c6409b603148bf696275b8a161cb3"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros a'' H'.",
                        "VernacExtend",
                        "f27e493fd7cf0ac98107a70b202d966f9eee0d25"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros l H'.",
                        "VernacExtend",
                        "2ea6189e87c74e49e60e9d20c5aeca1712e2f5de"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros ts H'.",
                        "VernacExtend",
                        "093c9c621837bf1f84885c6c94c178469371ecde"
                    ]
                },
                {
                    "command": [
                        "elim H'; clear H'; intros H1 H2.",
                        "VernacExtend",
                        "1bc0cf9e0b7c4dc6fec229b6a8b201b73f5c5dbf"
                    ]
                },
                {
                    "command": [
                        "clear IHHws Hws case_ws Hg.",
                        "VernacExtend",
                        "012b420f2c4ba5d763bfb07dc40f256e2bf00144"
                    ]
                },
                {
                    "command": [
                        "induction H0.",
                        "VernacExtend",
                        "f7088b4eda47862769d27dcb01ed8193ca5ffe6c"
                    ]
                },
                {
                    "command": [
                        "inversion H1.",
                        "VernacExtend",
                        "58dee2cce9b13b50b065ba894c1b533413715754"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intro H1.",
                        "VernacExtend",
                        "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "exists vs; exists a''; exists l; exists ts; split; try left; trivial.",
                        "VernacExtend",
                        "d8aa9e8783c7c0e4f25e02ff7716dd9cc020afae"
                    ]
                },
                {
                    "command": [
                        "elim (IHis_insert_forest H H1); intros vs' H4.",
                        "VernacExtend",
                        "1cd2af86823d7ea98b29c862f83a8928c795ade2"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intros a''' H4.",
                        "VernacExtend",
                        "743f2d5d4d5d6c1dcc3a4a9b91b314dcf867cdac"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intros l' H4.",
                        "VernacExtend",
                        "fbd22bb02713e6b14dd9272669e8a571c350d2d5"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intros ts' H4.",
                        "VernacExtend",
                        "976d82d718b9a0f38fec953c96a58295615dfdba"
                    ]
                },
                {
                    "command": [
                        "elim H4; clear H4; intros H4 H5.",
                        "VernacExtend",
                        "ef934d3f0390895437a06021bbce9a9e845f2fd0"
                    ]
                },
                {
                    "command": [
                        "exists vs'; exists a'''; exists l'; exists ts'.",
                        "VernacExtend",
                        "6b961dfd0c3c61fbf18e1f2ac27646a7ea1fe630"
                    ]
                },
                {
                    "command": [
                        "split; try right; trivial.",
                        "VernacExtend",
                        "91fd8431be9c4da0d0b1cdfe9d521e147d4665bb"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intro H1.",
                        "VernacExtend",
                        "50322a956a46a2cc5103374b45d8eb9e9c0a0579"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "generalize (is_insert_tree_same_root H3).",
                        "VernacExtend",
                        "1d1fb6fb582a6af6e7e66c9c6f901a2ead8335ad"
                    ]
                },
                {
                    "command": [
                        "unfold root_label; simpl; intro H5.",
                        "VernacExtend",
                        "4f0403740585ca9b373ea693f9700a7e389ca0f1"
                    ]
                },
                {
                    "command": [
                        "destruct t' as [lbl t'ts].",
                        "VernacExtend",
                        "686e2ff6bbd2e09db117b9adb1ec9e14b4e39100"
                    ]
                },
                {
                    "command": [
                        "simpl in H5.",
                        "VernacExtend",
                        "03fbfc7bb6b248b41f6241227db3e5c410547157"
                    ]
                },
                {
                    "command": [
                        "destruct lbl as [t'vs t'l].",
                        "VernacExtend",
                        "0e7989cc5da398e9f955b81edd0fd03d7247aaab"
                    ]
                },
                {
                    "command": [
                        "destruct t'l; inversion H5; subst.",
                        "VernacExtend",
                        "ab2010207471cf158f8359002857b4cee4dce099"
                    ]
                },
                {
                    "command": [
                        "exists t'vs; exists a0; exists t'l; exists t'ts; split; try left; trivial.",
                        "VernacExtend",
                        "b6cc02d923906a2984f1de3bb3defc9217941651"
                    ]
                },
                {
                    "command": [
                        "exists vs; exists a''; exists l; exists ts; split; try right; trivial.",
                        "VernacExtend",
                        "7ef245b586539d775321d4d28d8d649fe2bca7a4"
                    ]
                },
                {
                    "command": [
                        "elim case_ws; trivial.",
                        "VernacExtend",
                        "124629547e6f8b0a82655cf000c3f64bd6d64be7"
                    ]
                },
                {
                    "command": [
                        "generalize Hg; clear Hg; simpl.",
                        "VernacExtend",
                        "11f3d5a42bc52a2a91dd37a8b465b3e5d22f9aea"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intros case_ws Hg.",
                        "VernacExtend",
                        "73c3bcd377233531917894d95b460b010d2dab79"
                    ]
                },
                {
                    "command": [
                        "elim H; trivial.",
                        "VernacExtend",
                        "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
                    ]
                },
                {
                    "command": [
                        "inversion Hg; subst.",
                        "VernacExtend",
                        "cff8dc706b49bd16b7357e2db2cbd42f904b1e33"
                    ]
                },
                {
                    "command": [
                        "exists (w::ws); exists a; exists (nil (A:=A)); exists f; split; try left; trivial.",
                        "VernacExtend",
                        "9e01d2e826c6bb73f82fd5e4f832011e649e6f26"
                    ]
                },
                {
                    "command": [
                        "elim (IHHws a' H2); intros vs' H3.",
                        "VernacExtend",
                        "6f6f1cff1a73f74de2bab236f9f537cbbac6632a"
                    ]
                },
                {
                    "command": [
                        "elim H3; clear H3; intros a'' H3; elim H3; clear H3; intros l' H3.",
                        "VernacExtend",
                        "75dc584ded8a25dfaad6cbd18b7c1ec7ce220862"
                    ]
                },
                {
                    "command": [
                        "elim H3; clear H3; intros ts' H3; elim H3; clear H3; intros H3 H4.",
                        "VernacExtend",
                        "f6c084af2077ce138d427a6e55e5770f54187d78"
                    ]
                },
                {
                    "command": [
                        "exists vs'; exists a''; exists l'; exists ts'; split; try right; trivial.",
                        "VernacExtend",
                        "8b3ef65018f437889746d88dc040ae801883057d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}