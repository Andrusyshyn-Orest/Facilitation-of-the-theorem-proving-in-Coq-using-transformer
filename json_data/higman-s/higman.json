{
    "filename": "higman.v",
    "coq_project": "higman-s",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export inductive_wqo.",
            "VernacRequire",
            "56696d339f654f4eb4071fb402dda5a999398ec3"
        ],
        [
            "Require Export tree.",
            "VernacRequire",
            "d7bbae5f01c8591faaa0f1ff90d3e39ca79d9220"
        ],
        [
            "Require Export higman_aux.",
            "VernacRequire",
            "63f4d3b6e1c53c7808485d547d0bae86d3596f42"
        ],
        [
            "Section higman.",
            "VernacBeginSection",
            "afe8c23e9e3a1369ec686b4cb11b59c9a55048b4"
        ],
        [
            "Variable A : Set.",
            "VernacAssumption",
            "913b2bc4093d15ed267c28d55b4536b83f6168df"
        ],
        [
            "Variable leA : A -> A -> Prop.",
            "VernacAssumption",
            "a3a167d12c7b87905bc3dfcee3cf1dfd437c8c25"
        ],
        [
            "Hypothesis eqA_dec : forall a a' : A, {a = a'} + {a <> a'}.",
            "VernacAssumption",
            "605df6fbd75b4cc369c3edbbe794f34d194fcec0"
        ],
        [
            "Hypothesis leA_dec : forall a a', {leA a a'} + {~ leA a a'}.",
            "VernacAssumption",
            "e43e24055466dec2d4672cf8d55c10c6451a9cd8"
        ],
        [
            "Hypothesis leA_trans : forall a a' a'', leA a a' -> leA a' a'' -> leA a a''.",
            "VernacAssumption",
            "b68231ad52702f8b073c6b5b6159d1491e9650cd"
        ],
        [
            "Definition embeds : list A -> list A -> Prop := (higman_aux.embeds leA).",
            "VernacDefinition",
            "10b2632796d7957ef289e4007bd774ff671c639f"
        ],
        [
            "Definition sublist : list (list A) -> list (list A) -> Prop := (higman_aux.sublist (A:=A)).",
            "VernacDefinition",
            "f7041e3c21b6a5def8131989952b5b2cde875f32"
        ],
        [
            "Definition Tree := (higman_aux.Tree A).",
            "VernacDefinition",
            "92bfe275e3e9fa611fcbc4b488de0193d4e9b8cd"
        ],
        [
            "Definition is_forest := (higman_aux.is_forest leA leA_dec).",
            "VernacDefinition",
            "8d6122c378d01c3ede7401b8e5cbc0cc8b6da8fb"
        ],
        [
            "Definition is_insert_forest := (higman_aux.is_insert_forest leA).",
            "VernacDefinition",
            "c25a8dd173f6137a158ce116f3f0c6cac6391f68"
        ],
        [
            "Definition is_insert_tree := (higman_aux.is_insert_tree leA).",
            "VernacDefinition",
            "f079a2a613fb23015de48826fe7e56c45f5787ca"
        ],
        [
            "Definition sub_seq_in_lbl (ws : list (list A)) (t : Tree) : Prop := forall vs l ts, t = node (vs,l) ts -> sublist (merge_label vs l) ws.",
            "VernacDefinition",
            "46d7172b8af1be76d965fc216c2f3dff38bbace3"
        ],
        [
            "Lemma sub_seq_in_forest : forall ws f, is_forest ws f -> P_on_forest sub_seq_in_lbl ws f.",
            "VernacStartTheoremProof",
            "1637713fe06690b8f9d5ddd8c580634257152275"
        ],
        [
            "intros ws f Hws.",
            "VernacExtend",
            "7fef396c50183872e3c63baf24dc5f6d06e7adbd"
        ],
        [
            "apply P_on_is_forest with leA leA_dec; intros.",
            "VernacExtend",
            "bec84883624c2f1df86ce8ddc0dcf9db38177b1e"
        ],
        [
            "unfold sub_seq_in_lbl; simpl; intros.",
            "VernacExtend",
            "9a768979172a54293fe4c302ed2a600ff4bc774d"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "constructor 3; trivial.",
            "VernacExtend",
            "022338a6d35b815af15b132861dc3ae5b75794db"
        ],
        [
            "unfold sub_seq_in_lbl in H0; apply H0 with ts0; trivial.",
            "VernacExtend",
            "451b50b088313b9cfb6aa09dc9706a3d40a11610"
        ],
        [
            "unfold sub_seq_in_lbl; simpl; intros.",
            "VernacExtend",
            "9a768979172a54293fe4c302ed2a600ff4bc774d"
        ],
        [
            "inversion H0; subst; destruct ws0; simpl; apply sublist_refl with (A:=A).",
            "VernacExtend",
            "99a4ec9a3cc8f889f994fcdd11ed59829806ef82"
        ],
        [
            "unfold sub_seq_in_lbl; simpl; intros.",
            "VernacExtend",
            "9a768979172a54293fe4c302ed2a600ff4bc774d"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "unfold sub_seq_in_lbl in H; apply H with (t::ts); trivial.",
            "VernacExtend",
            "69192e7006f0458a09610234cb631ada466f5e37"
        ],
        [
            "unfold sub_seq_in_lbl; simpl; intros.",
            "VernacExtend",
            "9a768979172a54293fe4c302ed2a600ff4bc774d"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "unfold sub_seq_in_lbl in H; apply H with f0; trivial.",
            "VernacExtend",
            "5a3e5b952f5dc099398621426b61afd3b40fd28d"
        ],
        [
            "unfold sub_seq_in_lbl in *; simpl in *.",
            "VernacExtend",
            "c772069713783f3fe7474290591488ef0275d553"
        ],
        [
            "intros ws' l ts Ht; constructor 2; apply (H ws' l ts Ht).",
            "VernacExtend",
            "d6ad619598a1a0b0c695d7206f3c9ed485f416ee"
        ],
        [
            "apply Hws.",
            "VernacExtend",
            "08d67c24dd05fac5b1716f73287bf1f5f042b2a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sorted_in_label (t : Tree) : Prop := forall vs l ts, t = node (vs, l) ts -> sorted leA l.",
            "VernacDefinition",
            "a7cd98f4490e44ff4bd8781374137bb9638360b2"
        ],
        [
            "Lemma sorted_in_forest : forall ws f, is_forest ws f -> forall t, tree_in_forest t f -> sorted_in_label t.",
            "VernacStartTheoremProof",
            "273fe7b45cdbc0293ba2e534ffdfbf2bce34770d"
        ],
        [
            "intros ws f Hf.",
            "VernacExtend",
            "4dbde11da83657b6d68f6f36616c59ada3467dc4"
        ],
        [
            "assert (H : P_on_forest (fun (_:list (list A)) => sorted_in_label) ws f).",
            "VernacExtend",
            "08fdc899bb7ce81f1d6ab004b579bde6f489b650"
        ],
        [
            "2 : intros t Ht; apply (H t Ht); trivial.",
            "VernacExtend",
            "755dd480e81623cbd69d0605343776f088a52cd3"
        ],
        [
            "apply P_on_is_forest with leA leA_dec; intros; trivial.",
            "VernacExtend",
            "14b307d25a1a26debd8f261aa4142c121c07ada7"
        ],
        [
            "destruct l as [|a' l].",
            "VernacExtend",
            "5886b3d14533ca1b3f43eb6d5d07cae6aa20f5b6"
        ],
        [
            "intros vs' l' ts' H'; inversion H'; subst.",
            "VernacExtend",
            "310d211ad74356b04a2d3d4d32507e47d5b9fbc6"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "intros vs' l' ts' H'; inversion H'; subst.",
            "VernacExtend",
            "310d211ad74356b04a2d3d4d32507e47d5b9fbc6"
        ],
        [
            "constructor 3.",
            "VernacExtend",
            "fc203c31040684912422f2b19644a4136ee46779"
        ],
        [
            "apply (H a' l vs ts'); trivial.",
            "VernacExtend",
            "c9a5ffa84cdd98ee8eb206f9447324c4afe21488"
        ],
        [
            "apply (H0 vs (a'::l) ts'); trivial.",
            "VernacExtend",
            "4c0a2ad68ad0d9d8a0a652200d8313d91d2d7f20"
        ],
        [
            "intros vs' l' ts' H'; inversion H'; subst.",
            "VernacExtend",
            "310d211ad74356b04a2d3d4d32507e47d5b9fbc6"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "intros vs' l' ts' H'; inversion H'; subst.",
            "VernacExtend",
            "310d211ad74356b04a2d3d4d32507e47d5b9fbc6"
        ],
        [
            "apply (H vs' l' (t::ts')); trivial.",
            "VernacExtend",
            "f9a2b26421ad3ac81ef9218d85bc08fc8edae2c6"
        ],
        [
            "intros vs' l' ts' H'; inversion H'; subst.",
            "VernacExtend",
            "310d211ad74356b04a2d3d4d32507e47d5b9fbc6"
        ],
        [
            "apply (H vs' l' f0); trivial.",
            "VernacExtend",
            "857d717714bbacc4c96fb3ee8fb7ac8bf78157c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition bad_seq_in_lbl (t : Tree) : Prop := forall vs l ts, t = node (vs,l) ts -> bad embeds vs.",
            "VernacDefinition",
            "3f5f955b7105b8a7659451ec566ba1a1066bffb0"
        ],
        [
            "Lemma bad_seqs_in_forest : forall ws, bad embeds ws -> forall f, is_forest ws f -> forall t, tree_in_forest t f -> bad_seq_in_lbl t.",
            "VernacStartTheoremProof",
            "4828aa5eb5bd7569c9aa413807f6bb306ebf6acc"
        ],
        [
            "intros ws Hws f Hf t Ht vs l ts H.",
            "VernacExtend",
            "f7d032c0bc37f67e8bf33ccba5cd7940fb13c59e"
        ],
        [
            "generalize (sorted_in_forest Hf Ht H); intro H2.",
            "VernacExtend",
            "f40ecc697a699f202801c5f9cc84d5b0f9d8932d"
        ],
        [
            "assert (H' : bad embeds (merge_label vs l)).",
            "VernacExtend",
            "71b59021ad08fd832698d7126bb83240e53dba33"
        ],
        [
            "apply (bad_sublist (leA:=leA) (sub_seq_in_forest Hf Ht H)); trivial.",
            "VernacExtend",
            "2b2c044fd57e228b59ba961ac15b71fa6df4fe8e"
        ],
        [
            "intro HF; apply H'.",
            "VernacExtend",
            "3396706da7c422acbd8e81cb2a25a171c43a3c94"
        ],
        [
            "apply good_merge with (leA:=leA); trivial.",
            "VernacExtend",
            "4767ec7e0047f549e9e03865eaf2cb9813cfd675"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ltF : list Tree -> list Tree -> Prop := fun f' => fun f => exists w, exists a, is_insert_forest f w a f' /\\ (forall t, tree_in_forest t f' -> bad_seq_in_lbl t) /\\ f<>f'.",
            "VernacDefinition",
            "468305c27d5a42f40d77dffb924ab2a323258a52"
        ],
        [
            "Fact acc_ltF_nil : Acc ltF nil.",
            "VernacStartTheoremProof",
            "4a9e8b6e790b1fb243c20861823c7a7af039d3fd"
        ],
        [
            "constructor; intros f Hf.",
            "VernacExtend",
            "e737417943b2bf6d25c0a739977ab20e9360ca44"
        ],
        [
            "elim Hf; clear Hf; intros w H; elim H; clear H; intros a H; elim H; clear H; intros H1 H; elim H; clear H; intros H2 H3.",
            "VernacExtend",
            "f42d0982d05fc6b44667d052fff90e4a1d1eeb59"
        ],
        [
            "inversion H1; subst.",
            "VernacExtend",
            "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
        ],
        [
            "elim H3; trivial.",
            "VernacExtend",
            "1e482a816939d8cc3973c9ac5c0855dad2ae45e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact acc_ltF_cons : forall f t, Acc ltF f -> Acc ltF (t::nil) -> Acc ltF (t::f).",
            "VernacStartTheoremProof",
            "ee25811ef6496f3e2d5b6ee1a3662f1989c15b94"
        ],
        [
            "intros f t Acc_f; generalize t; clear t; induction Acc_f as [f acc_f IHf].",
            "VernacExtend",
            "f9f7193ede293f7000df230a087f0acb2aafd41d"
        ],
        [
            "assert (H : forall f', Acc ltF f' -> forall t, f' = t::nil -> Acc ltF (t::f)).",
            "VernacExtend",
            "2e64f347d130753df364898a89297e87648802cd"
        ],
        [
            "2:intros; apply (H (t::nil)); trivial.",
            "VernacExtend",
            "3a84f24e227de861ff5e4cd83c4f13e79cd67e5c"
        ],
        [
            "intros f' Hf'; induction Hf' as [f' acc_f' IHf'].",
            "VernacExtend",
            "e1f47d17acf3b0c281a6bc64a721cd9536d87e79"
        ],
        [
            "intros; constructor.",
            "VernacExtend",
            "6060146ed8617d8b0251c9efb816acd480d86b70"
        ],
        [
            "intros f'' H2.",
            "VernacExtend",
            "91747b23569b7ff9bed67c126cd6544af4ca321c"
        ],
        [
            "elim H2; clear H2; intros w H2; elim H2; clear H2; intros a H2.",
            "VernacExtend",
            "32c62f3f97990b8020e4c40193031f1a282eae73"
        ],
        [
            "elim H2; clear H2; intros H2 H3; elim H3; clear H3; intros H3 H4.",
            "VernacExtend",
            "890d8a6f9cdd3e8becb0788524f12f5fcf2c03a7"
        ],
        [
            "inversion H2; subst.",
            "VernacExtend",
            "cbe105a5addb129fa1e578ba8ef36c4763179006"
        ],
        [
            "apply IHf; trivial.",
            "VernacExtend",
            "b2f8cbbf064e0c76cd5a76e871454e1dfe1b06b6"
        ],
        [
            "exists w; exists a; repeat split; trivial.",
            "VernacExtend",
            "72ef24f84165e1454cc7920bec6ce19c17060144"
        ],
        [
            "intros t Ht; apply (H3 t); trivial.",
            "VernacExtend",
            "24832f431824cefe8712f98b83c926df38edd525"
        ],
        [
            "inversion Ht; subst.",
            "VernacExtend",
            "a0bd5f668577b1bcfd3b44531a7d2975eb05597c"
        ],
        [
            "constructor 1 with t'; trivial; try right; trivial.",
            "VernacExtend",
            "7d99aa9dfa72809a06a677579b3945c9c021ad3e"
        ],
        [
            "intro; subst; apply H4; trivial.",
            "VernacExtend",
            "9fb86992b5641fc29576a76e6a55847794f1e963"
        ],
        [
            "constructor; apply acc_f'; trivial.",
            "VernacExtend",
            "8c67567e83e4fddd7f28511247eb9fc00160fc59"
        ],
        [
            "apply IHf' with (t'::nil); trivial.",
            "VernacExtend",
            "2737cd8cd7c221bc590f7e3ea75f97080396c737"
        ],
        [
            "exists w; exists a; repeat split; trivial.",
            "VernacExtend",
            "72ef24f84165e1454cc7920bec6ce19c17060144"
        ],
        [
            "apply (is_if4 (leA := leA) (vs:=vs) (a':= a') (ts:=ts)); trivial.",
            "VernacExtend",
            "0169d53d9dbfb34c4d0869e0cf6a8dadda33121a"
        ],
        [
            "intros u Hu; inversion Hu; subst.",
            "VernacExtend",
            "2be32c6343ce4cf17e3987b7e1370d8aa10e2d74"
        ],
        [
            "apply (H3 u).",
            "VernacExtend",
            "457e21878c03d7eae048a83ba0600c6d2a630c0c"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "subst t'0; constructor 1 with t'; try left; trivial.",
            "VernacExtend",
            "8b1b3c198f23e824fec84e11816b2504f3b7439b"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "intro H; subst; apply H4; inversion H; trivial.",
            "VernacExtend",
            "dd8001db594635adaaa69aa25ff591ac034e7aa3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_forest_roots_labels : forall ws f, is_forest ws f -> roots_labels f = Some (bad_subsequence leA leA_dec (firsts ws)).",
            "VernacStartTheoremProof",
            "33543b1e7119767ad814ff761970b0ce0653aac7"
        ],
        [
            "intros ws f Hws; induction Hws; simpl; trivial.",
            "VernacExtend",
            "417e57738786da268b6403be958ad23af5e6f89d"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case_ws.",
            "VernacExtend",
            "3558917c0d4a31c3c35022b1f5da3eb7532ce90e"
        ],
        [
            "rewrite <- IHHws.",
            "VernacExtend",
            "3370be46ff78fe6d8895b70021fee7ef1336b19e"
        ],
        [
            "symmetry; generalize H0; apply is_insert_forest_same_roots.",
            "VernacExtend",
            "dd4f61b37c7d62facf359ce5a07abe619cd0518b"
        ],
        [
            "elim case_ws; trivial.",
            "VernacExtend",
            "124629547e6f8b0a82655cf000c3f64bd6d64be7"
        ],
        [
            "rewrite IHHws; simpl.",
            "VernacExtend",
            "30a5b95c57ff5c29d62fce1b3dc27863728f56dc"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case_ws.",
            "VernacExtend",
            "3558917c0d4a31c3c35022b1f5da3eb7532ce90e"
        ],
        [
            "elim H; trivial.",
            "VernacExtend",
            "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma acc_ltF_single : forall ws, Acc (continues embeds) ws -> forall l a bs, Acc (continues leA) bs -> forall ts, Acc ltF ts -> forall t, root t = (ws,a::l) /\\ subtrees t = ts /\\ Some bs = roots_labels ts -> Acc ltF (t::nil).",
            "VernacStartTheoremProof",
            "07a04d290a6af1a4a61c2334429084226dd751f0"
        ],
        [
            "intros ws acc_ws; induction acc_ws as [ws acc_ws IHws]; intros l a.",
            "VernacExtend",
            "640d61704ca69440e6bc2082ecef405b536eae57"
        ],
        [
            "intros bs acc_bs; induction acc_bs as [bs acc_bs IHbs].",
            "VernacExtend",
            "3c5c882a4aaf134635d79b43e5afe9015d075be7"
        ],
        [
            "intros ts acc_ts; induction acc_ts as [ts acc_ts IHts].",
            "VernacExtend",
            "594e7420c1489f2ab040d2ab90623a086dc0b385"
        ],
        [
            "intros t Ht; elim Ht; clear Ht; intros H1 H2; elim H2; clear H2; intros H2 H3.",
            "VernacExtend",
            "7fb3246b85f9fedd05df05f5ccd46770893a72a0"
        ],
        [
            "constructor; intros f Hf.",
            "VernacExtend",
            "e737417943b2bf6d25c0a739977ab20e9360ca44"
        ],
        [
            "elim Hf; clear Hf; intros wf Hf.",
            "VernacExtend",
            "647aa67eccd55312185dc165696f5df936aafa06"
        ],
        [
            "elim Hf; clear Hf; intros af Hf.",
            "VernacExtend",
            "78fc7accb2acb0be990784e99d6b13c7928d57b1"
        ],
        [
            "elim Hf; clear Hf; intros Hf1 Hf2.",
            "VernacExtend",
            "7a08062dfa4c378d77c778a2adf2d738a87a422b"
        ],
        [
            "elim Hf2; clear Hf2; intros Hf2 Hf3.",
            "VernacExtend",
            "05f68748da10ef77e110f1b48a84e0b09eb7739c"
        ],
        [
            "destruct f as [|t' f].",
            "VernacExtend",
            "0f238bc5a28417d3e896f1098cf535e947f42b7c"
        ],
        [
            "inversion Hf1.",
            "VernacExtend",
            "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
        ],
        [
            "cut (f = nil).",
            "VernacExtend",
            "03ff002100de4cbc5a16231b0796e37ecac98c4d"
        ],
        [
            "intro; subst f.",
            "VernacExtend",
            "68483a327a003ee213be211faae824324a66ecc8"
        ],
        [
            "inversion Hf1.",
            "VernacExtend",
            "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
        ],
        [
            "subst f w a0 t' t f'; clear H7.",
            "VernacExtend",
            "d3ca3bef6f3ba02148f747b74c940e037a0d8339"
        ],
        [
            "elim Hf3; trivial.",
            "VernacExtend",
            "b1837a00b51e21ad3e19f3607d2c90ccd5fe7bae"
        ],
        [
            "subst w a0 t' t f.",
            "VernacExtend",
            "b72ba636e10d75ec530d7f5a88fd81b053fcb027"
        ],
        [
            "inversion H8; subst.",
            "VernacExtend",
            "21c7ae0e8c1a08e9117cf9de7e3342e9227b094c"
        ],
        [
            "apply IHbs with (y := af::bs) (ts := node (wf :: vs, af :: a' :: l) ts0 :: ts0); trivial.",
            "VernacExtend",
            "7776c9195c0f4f25575d6fa10b290bcd53466cc0"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "simpl in H3.",
            "VernacExtend",
            "2a96f120ac764efacadc60b978d01343f60aafa0"
        ],
        [
            "rewrite H10 in H3; inversion H3; trivial.",
            "VernacExtend",
            "99c3941c1b9fe9cc53d45e95382c33a9921cef28"
        ],
        [
            "apply acc_ltF_cons; trivial.",
            "VernacExtend",
            "5372dec97053861200a19e683606f896f53117d7"
        ],
        [
            "constructor; simpl in acc_ts; trivial.",
            "VernacExtend",
            "dd4257d075c0b1d74724a7145977e83f35037ca7"
        ],
        [
            "simpl in H1; inversion H1; subst.",
            "VernacExtend",
            "b58f4644823f19676426702741882911f70ef33e"
        ],
        [
            "apply (IHws (wf::ws)) with (ts:= ts0) (bs := bs) (a:=af) (l:=a::l); trivial.",
            "VernacExtend",
            "c8b835b43deb4d799087c6f40e2e6fff472875f0"
        ],
        [
            "constructor; trivial.",
            "VernacExtend",
            "0a6921e5c6d19c8d1b4ad2aafac05e8c578c74fc"
        ],
        [
            "intro HF; assert (Hbil : bad_seq_in_lbl (node (wf :: ws, af :: a :: l) ts0)).",
            "VernacExtend",
            "34a2f4537242282517fd6bdcbe720baa83b27eb5"
        ],
        [
            "apply (Hf2 (node (wf :: ws, af :: a :: l) ts0)); simpl.",
            "VernacExtend",
            "dcef2fb478f8cfd2450be297e2b39f7e6d34b9e7"
        ],
        [
            "constructor 1 with (node (ws, a :: l) (node (wf :: ws, af :: a :: l) ts0 :: ts0)); try left; trivial.",
            "VernacExtend",
            "39e4707a02ee272079483eb139d0cec8b026d144"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "constructor 1 with (node (wf :: ws, af :: a :: l) ts0); constructor; trivial.",
            "VernacExtend",
            "891825b8bdf8e297203f7222b95bdae0913cd5bd"
        ],
        [
            "apply (Hbil (wf::ws) (af::a::l) ts0); trivial.",
            "VernacExtend",
            "e7a8da9f652146553290450dad0ddf9a7548dff1"
        ],
        [
            "constructor; trivial.",
            "VernacExtend",
            "0a6921e5c6d19c8d1b4ad2aafac05e8c578c74fc"
        ],
        [
            "constructor; apply acc_bs.",
            "VernacExtend",
            "146aeda292c4d28d6374e74e439560a47c287f8d"
        ],
        [
            "constructor; apply acc_ts.",
            "VernacExtend",
            "26987a4b089f497a955938e1e35004367dd251f4"
        ],
        [
            "simpl in *; repeat split; trivial.",
            "VernacExtend",
            "9833f14426069b2a904a4c77c543d9f146faaa45"
        ],
        [
            "inversion H1; subst; trivial.",
            "VernacExtend",
            "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
        ],
        [
            "repeat split; simpl; trivial.",
            "VernacExtend",
            "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
        ],
        [
            "simpl in H3; rewrite <- H3; simpl; trivial.",
            "VernacExtend",
            "c27cd85781d0aad4f87781e610199adc2f0bc64e"
        ],
        [
            "apply IHts with (y := f'); trivial.",
            "VernacExtend",
            "dadd967fec8b2a904cba88bf9345aa35f67d6177"
        ],
        [
            "exists wf; exists af.",
            "VernacExtend",
            "3490d70b7f451068639659bd6c372a56dfb5b4fe"
        ],
        [
            "repeat split; simpl; trivial.",
            "VernacExtend",
            "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
        ],
        [
            "intros u Hu; apply (Hf2 u); inversion Hu; subst.",
            "VernacExtend",
            "776607c1a456e4ee6ba1f67a17b67d7e56ae9702"
        ],
        [
            "constructor 1 with (node (vs, a' :: l0) f'); try left; trivial.",
            "VernacExtend",
            "f02cf07abed2ab46ff45eea072f5df0aa3887df8"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "constructor 1 with t'; trivial.",
            "VernacExtend",
            "c988918b790c83741e960e94112fae343fa9892d"
        ],
        [
            "intro; subst; apply Hf3; trivial.",
            "VernacExtend",
            "82be9b48ba2d9b70d28b84a9e4357a86cc37083d"
        ],
        [
            "repeat split; simpl; trivial.",
            "VernacExtend",
            "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
        ],
        [
            "simpl in H3; rewrite H3.",
            "VernacExtend",
            "807bef2ab0abe8b9f55e682c5c3ce24222435cf8"
        ],
        [
            "generalize H11; apply is_insert_forest_same_roots.",
            "VernacExtend",
            "d7249426e54b22b3bbd2daa648d7f92bb2a3a48a"
        ],
        [
            "destruct f; trivial.",
            "VernacExtend",
            "35881e3e8434e7e91abeae4f7822c2e4c470cdbf"
        ],
        [
            "inversion Hf1; subst.",
            "VernacExtend",
            "12045b3f957a9abe9843b52629e298b148834d09"
        ],
        [
            "inversion H7.",
            "VernacExtend",
            "42a5ca7b50f733735ed76a249aba00e788a69623"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma higman_aux : forall bs, Acc (continues leA) bs -> forall f, Acc ltF f -> forall ws, bs = bad_subsequence leA leA_dec (firsts ws) /\\ is_forest ws f -> bad embeds ws -> Acc (continues embeds) ws.",
            "VernacStartTheoremProof",
            "9527f2010952c5c8de47e5bb62c06d9eb1eab304"
        ],
        [
            "intros bs acc_bs; induction acc_bs as [bs acc_bs IHbs].",
            "VernacExtend",
            "3c5c882a4aaf134635d79b43e5afe9015d075be7"
        ],
        [
            "intros f acc_f; induction acc_f as [f acc_f IHf].",
            "VernacExtend",
            "32cbc099a5f1246c9a086e8685d34d1a37302730"
        ],
        [
            "intros ws H; elim H; clear H; intros H1 H2 H3.",
            "VernacExtend",
            "bd55c5ce8a2427b14b7ec4b6d8b334f8b2c17e03"
        ],
        [
            "constructor; intros ws' Hws'.",
            "VernacExtend",
            "a2497ce0514fad03d530c9f93231c64999960061"
        ],
        [
            "Unset Regular Subst Tactic.",
            "VernacUnsetOption",
            "44cf9e6ec08d411fdf7c83dfa839af9ae86a8185"
        ],
        [
            "inversion Hws'; subst.",
            "VernacExtend",
            "826bacdc0ba872cd18d50bd9e596debb511ba5f3"
        ],
        [
            "Set Regular Subst Tactic.",
            "VernacSetOption",
            "f9ac2c43ac8477664842be2a66e7c3d3e426079c"
        ],
        [
            "induction a as [| a w IHw].",
            "VernacExtend",
            "f62fbd76752cb40dd967e652e72cf0b70ab64c19"
        ],
        [
            "constructor; intros y Hy; inversion Hy; subst.",
            "VernacExtend",
            "bcb216f121d96ed9d610a78bc8210080fef4c3ba"
        ],
        [
            "elim H0; constructor 1.",
            "VernacExtend",
            "1927edc204fff6ab25f3fab79414a63ce801f6aa"
        ],
        [
            "unfold embeds; apply (nil_embeds).",
            "VernacExtend",
            "aaf130de2d039b8ceb868c95c008e231f9067b32"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case_a_bs.",
            "VernacExtend",
            "fb239525f463ac8770d3529f480ba89eeddc1937"
        ],
        [
            "elim (insert_forest_get a w H2); intros f' Hf'.",
            "VernacExtend",
            "6bb104c971e562475b211b16f4ec0e6f704099c9"
        ],
        [
            "apply IHf with f'; trivial.",
            "VernacExtend",
            "752183e2c0487717e66c8cea797f18269e62ecb4"
        ],
        [
            "exists w; exists a; repeat split; trivial.",
            "VernacExtend",
            "72ef24f84165e1454cc7920bec6ce19c17060144"
        ],
        [
            "apply bad_seqs_in_forest with ((a::w)::ws); trivial.",
            "VernacExtend",
            "8453ae2875c5412c16dbfa1175ab8402fde736ea"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply H; trivial.",
            "VernacExtend",
            "2a60de8b8e6fbb9b42656d3eefbf1ae6284bbdbf"
        ],
        [
            "apply H3; trivial.",
            "VernacExtend",
            "d51b130dcb254ceaa7e48b350c576ecd56255d34"
        ],
        [
            "constructor 2 with f; trivial.",
            "VernacExtend",
            "3474be045942e3c562a4b164286509f385bf16f5"
        ],
        [
            "apply (is_insert_forest_neq (leA:=leA) (leA_dec:=leA_dec)) with ws a w; trivial.",
            "VernacExtend",
            "f4a0d55c0ac0f0f367013eabdd3294a0405693a1"
        ],
        [
            "simpl; elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro c.",
            "VernacExtend",
            "bfaf6f637e019124bc4eec8a869f6a02d905fd81"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "constructor 2 with f; trivial.",
            "VernacExtend",
            "3474be045942e3c562a4b164286509f385bf16f5"
        ],
        [
            "elim c; trivial.",
            "VernacExtend",
            "4bd3cab055549fd048465b1634385fde3fbf620e"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply H; trivial.",
            "VernacExtend",
            "2a60de8b8e6fbb9b42656d3eefbf1ae6284bbdbf"
        ],
        [
            "apply H3; trivial.",
            "VernacExtend",
            "d51b130dcb254ceaa7e48b350c576ecd56255d34"
        ],
        [
            "apply IHbs with (y := a ::(bad_subsequence leA leA_dec (firsts ws))) (f := (node (w::ws, a::nil) f)::f); simpl; trivial.",
            "VernacExtend",
            "bafe545d967797c057821374fb225556da1cd8e8"
        ],
        [
            "constructor; trivial.",
            "VernacExtend",
            "0a6921e5c6d19c8d1b4ad2aafac05e8c578c74fc"
        ],
        [
            "apply acc_ltF_cons.",
            "VernacExtend",
            "60715082c70f72f40de7eeb88f1a5357cf840c7e"
        ],
        [
            "constructor; apply acc_f.",
            "VernacExtend",
            "746e03322fb7cda7cece6a7de18c30b209c47a47"
        ],
        [
            "apply acc_ltF_single with (w::ws) (nil (A:=A)) a (bad_subsequence leA leA_dec (firsts ws)) f; trivial.",
            "VernacExtend",
            "192161366cb9d6cc5b72d2a4bf27e90f38f6b372"
        ],
        [
            "apply IHw; trivial.",
            "VernacExtend",
            "c1f0aef6896adab38a9de2b4f3af8d9fe90acf18"
        ],
        [
            "intros HF; apply H; generalize HF; apply (greater_remove_letter (leA:=leA)).",
            "VernacExtend",
            "4e114a95e5e2ad37210ce2293c17cca40ef17ad7"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros HF; apply H; generalize HF; apply (greater_remove_letter (leA:=leA)).",
            "VernacExtend",
            "4e114a95e5e2ad37210ce2293c17cca40ef17ad7"
        ],
        [
            "constructor; apply acc_bs.",
            "VernacExtend",
            "146aeda292c4d28d6374e74e439560a47c287f8d"
        ],
        [
            "constructor; apply acc_f.",
            "VernacExtend",
            "746e03322fb7cda7cece6a7de18c30b209c47a47"
        ],
        [
            "repeat split; trivial.",
            "VernacExtend",
            "060692b05c8d85062072ae8d30e5549bb92445ef"
        ],
        [
            "symmetry; apply is_forest_roots_labels; trivial.",
            "VernacExtend",
            "f9209362ebaff215614463c1a73779ca927e3896"
        ],
        [
            "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case'; [elim case_a_bs | idtac]; trivial.",
            "VernacExtend",
            "ce1be76356fe6afaa7236f903808f551f7a6f47e"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "constructor 3; trivial.",
            "VernacExtend",
            "022338a6d35b815af15b132861dc3ae5b75794db"
        ],
        [
            "intro HF; inversion HF; subst.",
            "VernacExtend",
            "4d35c206165607b7acb1d11c8b422d6934a55278"
        ],
        [
            "apply H; trivial.",
            "VernacExtend",
            "2a60de8b8e6fbb9b42656d3eefbf1ae6284bbdbf"
        ],
        [
            "apply H3; trivial.",
            "VernacExtend",
            "d51b130dcb254ceaa7e48b350c576ecd56255d34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Higman : Acc (continues leA) nil -> Acc (continues embeds) nil.",
            "VernacStartTheoremProof",
            "4dd2765ff440575c5f65eb440edabca477947fd4"
        ],
        [
            "intro wqo_leA; apply (higman_aux wqo_leA) with (f:=nil (A := Tree)).",
            "VernacExtend",
            "d50db3a31df26471eb27b1ba54babe5f6332d967"
        ],
        [
            "apply acc_ltF_nil.",
            "VernacExtend",
            "faad58bcf747628bc873c68950a8455b343f85dc"
        ],
        [
            "split; simpl; trivial.",
            "VernacExtend",
            "10d20bf7234139338d5a4262ee272ecd17785354"
        ],
        [
            "unfold is_forest; constructor 1 with (leA := leA) (leA_dec := leA_dec).",
            "VernacExtend",
            "644da6158c0ddd7395eddbc6388c932e994ae17b"
        ],
        [
            "intro HF; inversion HF; trivial.",
            "VernacExtend",
            "5d35de1a32ac80c4a8035dfcb6748649cb114c0d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End higman.",
            "VernacEndSegment",
            "62bd7845f043c86c775b0ea96c5a2a79a39c76b0"
        ]
    ],
    "proofs": [
        {
            "name": "sub_seq_in_forest",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros ws f Hws.",
                        "VernacExtend",
                        "7fef396c50183872e3c63baf24dc5f6d06e7adbd"
                    ]
                },
                {
                    "command": [
                        "apply P_on_is_forest with leA leA_dec; intros.",
                        "VernacExtend",
                        "bec84883624c2f1df86ce8ddc0dcf9db38177b1e"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl; simpl; intros.",
                        "VernacExtend",
                        "9a768979172a54293fe4c302ed2a600ff4bc774d"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "constructor 3; trivial.",
                        "VernacExtend",
                        "022338a6d35b815af15b132861dc3ae5b75794db"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl in H0; apply H0 with ts0; trivial.",
                        "VernacExtend",
                        "451b50b088313b9cfb6aa09dc9706a3d40a11610"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl; simpl; intros.",
                        "VernacExtend",
                        "9a768979172a54293fe4c302ed2a600ff4bc774d"
                    ]
                },
                {
                    "command": [
                        "inversion H0; subst; destruct ws0; simpl; apply sublist_refl with (A:=A).",
                        "VernacExtend",
                        "99a4ec9a3cc8f889f994fcdd11ed59829806ef82"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl; simpl; intros.",
                        "VernacExtend",
                        "9a768979172a54293fe4c302ed2a600ff4bc774d"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl in H; apply H with (t::ts); trivial.",
                        "VernacExtend",
                        "69192e7006f0458a09610234cb631ada466f5e37"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl; simpl; intros.",
                        "VernacExtend",
                        "9a768979172a54293fe4c302ed2a600ff4bc774d"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl in H; apply H with f0; trivial.",
                        "VernacExtend",
                        "5a3e5b952f5dc099398621426b61afd3b40fd28d"
                    ]
                },
                {
                    "command": [
                        "unfold sub_seq_in_lbl in *; simpl in *.",
                        "VernacExtend",
                        "c772069713783f3fe7474290591488ef0275d553"
                    ]
                },
                {
                    "command": [
                        "intros ws' l ts Ht; constructor 2; apply (H ws' l ts Ht).",
                        "VernacExtend",
                        "d6ad619598a1a0b0c695d7206f3c9ed485f416ee"
                    ]
                },
                {
                    "command": [
                        "apply Hws.",
                        "VernacExtend",
                        "08d67c24dd05fac5b1716f73287bf1f5f042b2a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bad_seqs_in_forest",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros ws Hws f Hf t Ht vs l ts H.",
                        "VernacExtend",
                        "f7d032c0bc37f67e8bf33ccba5cd7940fb13c59e"
                    ]
                },
                {
                    "command": [
                        "generalize (sorted_in_forest Hf Ht H); intro H2.",
                        "VernacExtend",
                        "f40ecc697a699f202801c5f9cc84d5b0f9d8932d"
                    ]
                },
                {
                    "command": [
                        "assert (H' : bad embeds (merge_label vs l)).",
                        "VernacExtend",
                        "71b59021ad08fd832698d7126bb83240e53dba33"
                    ]
                },
                {
                    "command": [
                        "apply (bad_sublist (leA:=leA) (sub_seq_in_forest Hf Ht H)); trivial.",
                        "VernacExtend",
                        "2b2c044fd57e228b59ba961ac15b71fa6df4fe8e"
                    ]
                },
                {
                    "command": [
                        "intro HF; apply H'.",
                        "VernacExtend",
                        "3396706da7c422acbd8e81cb2a25a171c43a3c94"
                    ]
                },
                {
                    "command": [
                        "apply good_merge with (leA:=leA); trivial.",
                        "VernacExtend",
                        "4767ec7e0047f549e9e03865eaf2cb9813cfd675"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "acc_ltF_nil",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "constructor; intros f Hf.",
                        "VernacExtend",
                        "e737417943b2bf6d25c0a739977ab20e9360ca44"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros w H; elim H; clear H; intros a H; elim H; clear H; intros H1 H; elim H; clear H; intros H2 H3.",
                        "VernacExtend",
                        "f42d0982d05fc6b44667d052fff90e4a1d1eeb59"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst.",
                        "VernacExtend",
                        "0d6098b7de8d43e8e8e8d2cd73cf811a6b3dbedf"
                    ]
                },
                {
                    "command": [
                        "elim H3; trivial.",
                        "VernacExtend",
                        "1e482a816939d8cc3973c9ac5c0855dad2ae45e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_forest_roots_labels",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros ws f Hws; induction Hws; simpl; trivial.",
                        "VernacExtend",
                        "417e57738786da268b6403be958ad23af5e6f89d"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case_ws.",
                        "VernacExtend",
                        "3558917c0d4a31c3c35022b1f5da3eb7532ce90e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHHws.",
                        "VernacExtend",
                        "3370be46ff78fe6d8895b70021fee7ef1336b19e"
                    ]
                },
                {
                    "command": [
                        "symmetry; generalize H0; apply is_insert_forest_same_roots.",
                        "VernacExtend",
                        "dd4f61b37c7d62facf359ce5a07abe619cd0518b"
                    ]
                },
                {
                    "command": [
                        "elim case_ws; trivial.",
                        "VernacExtend",
                        "124629547e6f8b0a82655cf000c3f64bd6d64be7"
                    ]
                },
                {
                    "command": [
                        "rewrite IHHws; simpl.",
                        "VernacExtend",
                        "30a5b95c57ff5c29d62fce1b3dc27863728f56dc"
                    ]
                },
                {
                    "command": [
                        "elim (greater_dec leA leA_dec a (bad_subsequence leA leA_dec (firsts ws))); intro case_ws.",
                        "VernacExtend",
                        "3558917c0d4a31c3c35022b1f5da3eb7532ce90e"
                    ]
                },
                {
                    "command": [
                        "elim H; trivial.",
                        "VernacExtend",
                        "b59a75aa739b4b3d53a6e94a5342147d96a5075a"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "acc_ltF_single",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros ws acc_ws; induction acc_ws as [ws acc_ws IHws]; intros l a.",
                        "VernacExtend",
                        "640d61704ca69440e6bc2082ecef405b536eae57"
                    ]
                },
                {
                    "command": [
                        "intros bs acc_bs; induction acc_bs as [bs acc_bs IHbs].",
                        "VernacExtend",
                        "3c5c882a4aaf134635d79b43e5afe9015d075be7"
                    ]
                },
                {
                    "command": [
                        "intros ts acc_ts; induction acc_ts as [ts acc_ts IHts].",
                        "VernacExtend",
                        "594e7420c1489f2ab040d2ab90623a086dc0b385"
                    ]
                },
                {
                    "command": [
                        "intros t Ht; elim Ht; clear Ht; intros H1 H2; elim H2; clear H2; intros H2 H3.",
                        "VernacExtend",
                        "7fb3246b85f9fedd05df05f5ccd46770893a72a0"
                    ]
                },
                {
                    "command": [
                        "constructor; intros f Hf.",
                        "VernacExtend",
                        "e737417943b2bf6d25c0a739977ab20e9360ca44"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros wf Hf.",
                        "VernacExtend",
                        "647aa67eccd55312185dc165696f5df936aafa06"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros af Hf.",
                        "VernacExtend",
                        "78fc7accb2acb0be990784e99d6b13c7928d57b1"
                    ]
                },
                {
                    "command": [
                        "elim Hf; clear Hf; intros Hf1 Hf2.",
                        "VernacExtend",
                        "7a08062dfa4c378d77c778a2adf2d738a87a422b"
                    ]
                },
                {
                    "command": [
                        "elim Hf2; clear Hf2; intros Hf2 Hf3.",
                        "VernacExtend",
                        "05f68748da10ef77e110f1b48a84e0b09eb7739c"
                    ]
                },
                {
                    "command": [
                        "destruct f as [|t' f].",
                        "VernacExtend",
                        "0f238bc5a28417d3e896f1098cf535e947f42b7c"
                    ]
                },
                {
                    "command": [
                        "inversion Hf1.",
                        "VernacExtend",
                        "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
                    ]
                },
                {
                    "command": [
                        "cut (f = nil).",
                        "VernacExtend",
                        "03ff002100de4cbc5a16231b0796e37ecac98c4d"
                    ]
                },
                {
                    "command": [
                        "intro; subst f.",
                        "VernacExtend",
                        "68483a327a003ee213be211faae824324a66ecc8"
                    ]
                },
                {
                    "command": [
                        "inversion Hf1.",
                        "VernacExtend",
                        "184a7eb61cb62d35ec9e6db5dbbfbb0bc5ee17e7"
                    ]
                },
                {
                    "command": [
                        "subst f w a0 t' t f'; clear H7.",
                        "VernacExtend",
                        "d3ca3bef6f3ba02148f747b74c940e037a0d8339"
                    ]
                },
                {
                    "command": [
                        "elim Hf3; trivial.",
                        "VernacExtend",
                        "b1837a00b51e21ad3e19f3607d2c90ccd5fe7bae"
                    ]
                },
                {
                    "command": [
                        "subst w a0 t' t f.",
                        "VernacExtend",
                        "b72ba636e10d75ec530d7f5a88fd81b053fcb027"
                    ]
                },
                {
                    "command": [
                        "inversion H8; subst.",
                        "VernacExtend",
                        "21c7ae0e8c1a08e9117cf9de7e3342e9227b094c"
                    ]
                },
                {
                    "command": [
                        "apply IHbs with (y := af::bs) (ts := node (wf :: vs, af :: a' :: l) ts0 :: ts0); trivial.",
                        "VernacExtend",
                        "7776c9195c0f4f25575d6fa10b290bcd53466cc0"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "simpl in H3.",
                        "VernacExtend",
                        "2a96f120ac764efacadc60b978d01343f60aafa0"
                    ]
                },
                {
                    "command": [
                        "rewrite H10 in H3; inversion H3; trivial.",
                        "VernacExtend",
                        "99c3941c1b9fe9cc53d45e95382c33a9921cef28"
                    ]
                },
                {
                    "command": [
                        "apply acc_ltF_cons; trivial.",
                        "VernacExtend",
                        "5372dec97053861200a19e683606f896f53117d7"
                    ]
                },
                {
                    "command": [
                        "constructor; simpl in acc_ts; trivial.",
                        "VernacExtend",
                        "dd4257d075c0b1d74724a7145977e83f35037ca7"
                    ]
                },
                {
                    "command": [
                        "simpl in H1; inversion H1; subst.",
                        "VernacExtend",
                        "b58f4644823f19676426702741882911f70ef33e"
                    ]
                },
                {
                    "command": [
                        "apply (IHws (wf::ws)) with (ts:= ts0) (bs := bs) (a:=af) (l:=a::l); trivial.",
                        "VernacExtend",
                        "c8b835b43deb4d799087c6f40e2e6fff472875f0"
                    ]
                },
                {
                    "command": [
                        "constructor; trivial.",
                        "VernacExtend",
                        "0a6921e5c6d19c8d1b4ad2aafac05e8c578c74fc"
                    ]
                },
                {
                    "command": [
                        "intro HF; assert (Hbil : bad_seq_in_lbl (node (wf :: ws, af :: a :: l) ts0)).",
                        "VernacExtend",
                        "34a2f4537242282517fd6bdcbe720baa83b27eb5"
                    ]
                },
                {
                    "command": [
                        "apply (Hf2 (node (wf :: ws, af :: a :: l) ts0)); simpl.",
                        "VernacExtend",
                        "dcef2fb478f8cfd2450be297e2b39f7e6d34b9e7"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with (node (ws, a :: l) (node (wf :: ws, af :: a :: l) ts0 :: ts0)); try left; trivial.",
                        "VernacExtend",
                        "39e4707a02ee272079483eb139d0cec8b026d144"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with (node (wf :: ws, af :: a :: l) ts0); constructor; trivial.",
                        "VernacExtend",
                        "891825b8bdf8e297203f7222b95bdae0913cd5bd"
                    ]
                },
                {
                    "command": [
                        "apply (Hbil (wf::ws) (af::a::l) ts0); trivial.",
                        "VernacExtend",
                        "e7a8da9f652146553290450dad0ddf9a7548dff1"
                    ]
                },
                {
                    "command": [
                        "constructor; trivial.",
                        "VernacExtend",
                        "0a6921e5c6d19c8d1b4ad2aafac05e8c578c74fc"
                    ]
                },
                {
                    "command": [
                        "constructor; apply acc_bs.",
                        "VernacExtend",
                        "146aeda292c4d28d6374e74e439560a47c287f8d"
                    ]
                },
                {
                    "command": [
                        "constructor; apply acc_ts.",
                        "VernacExtend",
                        "26987a4b089f497a955938e1e35004367dd251f4"
                    ]
                },
                {
                    "command": [
                        "simpl in *; repeat split; trivial.",
                        "VernacExtend",
                        "9833f14426069b2a904a4c77c543d9f146faaa45"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst; trivial.",
                        "VernacExtend",
                        "6600d5f3accb6df3067ff6edb5f1efe8f587347e"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl; trivial.",
                        "VernacExtend",
                        "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
                    ]
                },
                {
                    "command": [
                        "simpl in H3; rewrite <- H3; simpl; trivial.",
                        "VernacExtend",
                        "c27cd85781d0aad4f87781e610199adc2f0bc64e"
                    ]
                },
                {
                    "command": [
                        "apply IHts with (y := f'); trivial.",
                        "VernacExtend",
                        "dadd967fec8b2a904cba88bf9345aa35f67d6177"
                    ]
                },
                {
                    "command": [
                        "exists wf; exists af.",
                        "VernacExtend",
                        "3490d70b7f451068639659bd6c372a56dfb5b4fe"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl; trivial.",
                        "VernacExtend",
                        "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; apply (Hf2 u); inversion Hu; subst.",
                        "VernacExtend",
                        "776607c1a456e4ee6ba1f67a17b67d7e56ae9702"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with (node (vs, a' :: l0) f'); try left; trivial.",
                        "VernacExtend",
                        "f02cf07abed2ab46ff45eea072f5df0aa3887df8"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "constructor 1 with t'; trivial.",
                        "VernacExtend",
                        "c988918b790c83741e960e94112fae343fa9892d"
                    ]
                },
                {
                    "command": [
                        "intro; subst; apply Hf3; trivial.",
                        "VernacExtend",
                        "82be9b48ba2d9b70d28b84a9e4357a86cc37083d"
                    ]
                },
                {
                    "command": [
                        "repeat split; simpl; trivial.",
                        "VernacExtend",
                        "6264cd5c161b0c49672a3934fd4ffd2a2cf04427"
                    ]
                },
                {
                    "command": [
                        "simpl in H3; rewrite H3.",
                        "VernacExtend",
                        "807bef2ab0abe8b9f55e682c5c3ce24222435cf8"
                    ]
                },
                {
                    "command": [
                        "generalize H11; apply is_insert_forest_same_roots.",
                        "VernacExtend",
                        "d7249426e54b22b3bbd2daa648d7f92bb2a3a48a"
                    ]
                },
                {
                    "command": [
                        "destruct f; trivial.",
                        "VernacExtend",
                        "35881e3e8434e7e91abeae4f7822c2e4c470cdbf"
                    ]
                },
                {
                    "command": [
                        "inversion Hf1; subst.",
                        "VernacExtend",
                        "12045b3f957a9abe9843b52629e298b148834d09"
                    ]
                },
                {
                    "command": [
                        "inversion H7.",
                        "VernacExtend",
                        "42a5ca7b50f733735ed76a249aba00e788a69623"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Higman",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "intro wqo_leA; apply (higman_aux wqo_leA) with (f:=nil (A := Tree)).",
                        "VernacExtend",
                        "d50db3a31df26471eb27b1ba54babe5f6332d967"
                    ]
                },
                {
                    "command": [
                        "apply acc_ltF_nil.",
                        "VernacExtend",
                        "faad58bcf747628bc873c68950a8455b343f85dc"
                    ]
                },
                {
                    "command": [
                        "split; simpl; trivial.",
                        "VernacExtend",
                        "10d20bf7234139338d5a4262ee272ecd17785354"
                    ]
                },
                {
                    "command": [
                        "unfold is_forest; constructor 1 with (leA := leA) (leA_dec := leA_dec).",
                        "VernacExtend",
                        "644da6158c0ddd7395eddbc6388c932e994ae17b"
                    ]
                },
                {
                    "command": [
                        "intro HF; inversion HF; trivial.",
                        "VernacExtend",
                        "5d35de1a32ac80c4a8035dfcb6748649cb114c0d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}