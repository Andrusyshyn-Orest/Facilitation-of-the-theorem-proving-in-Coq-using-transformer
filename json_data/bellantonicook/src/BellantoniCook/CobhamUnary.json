{
    "filename": "src/BellantoniCook/CobhamUnary.v",
    "coq_project": "bellantonicook",
    "vernac_cmds": [
        [
            "Require Import Arith List.",
            "VernacRequire",
            "5f7260eb665bbd003ccedb5c050bdc1b14b0356e"
        ],
        [
            "Require Import BellantoniCook.Lib BellantoniCook.MultiPoly BellantoniCook.Cobham BellantoniCook.CobhamLib.",
            "VernacRequire",
            "788fb04365b694cf5f3489bdcc9c352f43d46d6f"
        ],
        [
            "Lemma Zero_correct n l: length (Sem (Zero_e n) l) = 0.",
            "VernacStartTheoremProof",
            "7cf1a907d59fe25f989b1443e12d5d618292861e"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma One_correct n l: length (Sem (One_e n) l) = 1.",
            "VernacStartTheoremProof",
            "199012c203d5232a86a6342f210325bcb6589d28"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Succ_e : Cobham := Comp 1 (Succ true) [Proj 1 0].",
            "VernacDefinition",
            "db835c712cc2ee598efb92ab313e6bdfb6a5aee4"
        ],
        [
            "Lemma arity_Succ : arity Succ_e = ok_arity 1.",
            "VernacStartTheoremProof",
            "00e9861e9a827ca740b00ea827b9f1df4a3418e9"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Succ : rec_bounded Succ_e.",
            "VernacStartTheoremProof",
            "debc1926c403069a6ac1b8e342a95d1624262506"
        ],
        [
            "simpl; tauto.",
            "VernacExtend",
            "2c27d7b56602355c3ed4605e551cd6a88509ac37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Succ_correct l : length (Sem Succ_e l) = S (length (Sem (Proj 1 0) l)).",
            "VernacStartTheoremProof",
            "a9bd1fbfa87d2b6125a1ff3c67d2f9205a71017f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Succ_e.",
            "VernacSetOpacity",
            "0de8f07cf1bbd374707b4719e80e4e912480c68b"
        ],
        [
            "Fixpoint Nat_e (n:nat) : Cobham := match n with | 0 => Zero | S n' => Comp 0 Succ_e [Nat_e n'] end.",
            "VernacFixpoint",
            "7cc33f4e0f69f70f41815b923e845ce119874b1e"
        ],
        [
            "Lemma arity_Nat n : arity (Nat_e n) = ok_arity 0.",
            "VernacStartTheoremProof",
            "8348d1073ebae1a2ab718761572bda5cf1e61645"
        ],
        [
            "induction n; trivial; simpl.",
            "VernacExtend",
            "006f3de7bf9371009933c327e432e20a18f03626"
        ],
        [
            "rewrite arity_Succ, IHn; simpl; trivial.",
            "VernacExtend",
            "1e58a1d6cccc6b2a271113afb8aa7a768ac4b971"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Nat n : rec_bounded (Nat_e n).",
            "VernacStartTheoremProof",
            "7df49e7c5f0714146b22bd86269fdf4760d78ae2"
        ],
        [
            "induction n; simpl; trivial; split; auto.",
            "VernacExtend",
            "6ff7429c46229b6bdc1d6071ef6275b84cecf563"
        ],
        [
            "apply rec_bounded_Succ.",
            "VernacExtend",
            "f97d04d402933deeda61abfcedc7d2243e006166"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Nat_correct : forall n l, length (Sem (Nat_e n) l) = n.",
            "VernacStartTheoremProof",
            "e3a275283989759af5e2d3600e2eeb4c40309b52"
        ],
        [
            "induction n; simpl; intros; trivial.",
            "VernacExtend",
            "f11f88911c08a055d0ebf1f67e856e8f9c990aa8"
        ],
        [
            "rewrite Succ_correct; simpl; auto.",
            "VernacExtend",
            "8488ff49fbc4b27ec7cdd1e2701ad3e26625f2f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation Plus_e := App_e.",
            "VernacSyntacticDefinition",
            "9eb8cf94017ace6226eb70d4de7e999f7c632988"
        ],
        [
            "Notation arity_Plus := arity_App.",
            "VernacSyntacticDefinition",
            "1d5fdf62967a2fbf098c4c66df4b82a979caabdc"
        ],
        [
            "Notation rec_bounded_Plus := rec_bounded_App.",
            "VernacSyntacticDefinition",
            "2d180c81aabf9919f6f9b0b71b0917627099e638"
        ],
        [
            "Lemma Plus_correct : forall l, length (Sem Plus_e l) = length (hd nil l) + length (hd nil (tl l)).",
            "VernacStartTheoremProof",
            "b4be91b1154e4fc56f354ca97d872e3faf96c741"
        ],
        [
            "intro l; rewrite App_correct.",
            "VernacExtend",
            "a49b09b0403437471ef513958155725353849061"
        ],
        [
            "apply app_length.",
            "VernacExtend",
            "c0ab6c03130fb1d55fe67b7aef74ee924867bead"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Plus_e.",
            "VernacSetOpacity",
            "bccbd9f05c8ea39ba78e3a2c25464d2280a39734"
        ],
        [
            "Fixpoint Plusl_e (ar:nat)(el:list Cobham) : Cobham := match el with | nil => Zero_e ar | e' :: el' => Comp ar Plus_e [e'; Plusl_e ar el'] end.",
            "VernacFixpoint",
            "d0c1c0364e55acfa366e3bb9369cf17884e23a9e"
        ],
        [
            "Lemma arity_Plusl ar el : andl (fun e => arity e = ok_arity ar) el -> arity (Plusl_e ar el) = ok_arity ar.",
            "VernacStartTheoremProof",
            "1f52fe5930665f745dfd81000a8fbb705835f2a2"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; trivial; intros (H1, H2).",
            "VernacExtend",
            "ace11654eef1f440cb1091819a7a39c99cde3c0d"
        ],
        [
            "rewrite arity_Plus, IH, H1; simpl; trivial.",
            "VernacExtend",
            "899db909707b93c83882d3d12e690981179583b2"
        ],
        [
            "rewrite <- beq_nat_refl; simpl; trivial.",
            "VernacExtend",
            "610ff20df40e0f5abed74ba4412d646c0699c728"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Plusl ar el : andl rec_bounded el -> rec_bounded (Plusl_e ar el).",
            "VernacStartTheoremProof",
            "af7fa80fb9b65feefa7cdd1898299535e6d6a60d"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; auto.",
            "VernacExtend",
            "7cffbc6127abbb4a4b12e91aa0837d29a1bf3bc0"
        ],
        [
            "intros [H1 H2]; split.",
            "VernacExtend",
            "9379e5d81cc90eda85fcb8c848e7bb5d6068cb15"
        ],
        [
            "apply rec_bounded_Plus.",
            "VernacExtend",
            "9adcdcc0d856fdf5ae5c2d5e5425def6da6df03b"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Plusl_correct : forall ar el l, length (Sem (Plusl_e ar el) l) = plusl (map (fun e => length (Sem e l)) el).",
            "VernacStartTheoremProof",
            "238a7cef6b3a6cc420876ab69bf695eb44dd1aa1"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; trivial; intros.",
            "VernacExtend",
            "233af4b916dd7d7e87288f9869380bf2b7a14303"
        ],
        [
            "rewrite Plus_correct; simpl; f_equal; apply IH.",
            "VernacExtend",
            "04548a838d13eaf3113138e90beee6ad3bd57848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Plusl_e.",
            "VernacSetOpacity",
            "fcb5d21de83b58344b075cf9da71e492edc89167"
        ],
        [
            "Definition Mult_e : Cobham := Rec2 (Zero_e 1) (Comp 3 Plus_e [Proj 3 1; Proj 3 2]) (Comp 2 Smash [ One_e 2; Comp 2 Smash [Comp 2 (Succ true) [Proj 2 0]; Comp 2 (Succ true) [Proj 2 1] ] ] ).",
            "VernacDefinition",
            "18577db24d37c17897d1def32e95213b3bcde3d4"
        ],
        [
            "Lemma arity_Mult : arity Mult_e = ok_arity 2.",
            "VernacStartTheoremProof",
            "dc9cbedb2f3a243f15427802d080784d7f705730"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Mult : rec_bounded Mult_e.",
            "VernacStartTheoremProof",
            "7ad337fcf9ea5296333c643b7bb4e4ffa33accaa"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat (split; trivial); intros; simpl; destruct l; simpl; try omega; rewrite length_smash'; induction l; simpl; try omega; case a; simpl; rewrite length_smash'; try omega; rewrite App_correct; simpl; simpl_list; eapply le_trans.",
            "VernacExtend",
            "be23bd97eb361051517451977ba871731cc196db"
        ],
        [
            "apply plus_le_compat_r; apply IHl; simpl; omega.",
            "VernacExtend",
            "e9ded72c509af6ff8b04f2c535fef89b36696274"
        ],
        [
            "simpl; omega.",
            "VernacExtend",
            "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
        ],
        [
            "apply plus_le_compat_r; apply IHl; simpl; omega.",
            "VernacExtend",
            "e9ded72c509af6ff8b04f2c535fef89b36696274"
        ],
        [
            "simpl; omega.",
            "VernacExtend",
            "e39ee197bcf8e665eb70095a296ce867a0e4d7ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Mult_correct : forall l, length (Sem Mult_e l) = length (hd nil l) * length (hd nil (tl l)).",
            "VernacStartTheoremProof",
            "e7d1e8d3f2b01b52d57c07db4002deee9df3fd85"
        ],
        [
            "simpl; intros [ | v1 ]; simpl; trivial; intros.",
            "VernacExtend",
            "5f77b2929c6441253476decd558ab30235c7b5d1"
        ],
        [
            "induction v1; simpl; trivial.",
            "VernacExtend",
            "b9b0460d131945c70f53f84ad492f163ca0de399"
        ],
        [
            "case a; simpl; rewrite Plus_correct; simpl; rewrite IHv1; destruct l; simpl; omega.",
            "VernacExtend",
            "36e82d9861b3a6c7110b3e9cdf288f050687f906"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Mult_e.",
            "VernacSetOpacity",
            "85bf4081cd42e4ebd1f27ec2ccd3fed38a393722"
        ],
        [
            "Fixpoint Multl_e (ar:nat)(el:list Cobham) : Cobham := match el with | nil => One_e ar | e' :: el' => Comp ar Mult_e [e'; Multl_e ar el'] end.",
            "VernacFixpoint",
            "1c7b3dfcdfedf7db68f24289ed10d4b8821a74f8"
        ],
        [
            "Lemma arity_Multl ar el : andl (fun e => arity e = ok_arity ar) el -> arity (Multl_e ar el) = ok_arity ar.",
            "VernacStartTheoremProof",
            "7689488c9bec903cf9d6ae3870f17e707966d4e3"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; trivial; intros [H1 H2].",
            "VernacExtend",
            "1c447b8abc73d9b2d0745c144619ee735a66559b"
        ],
        [
            "rewrite arity_Mult, IH, H1; simpl; trivial; rewrite <- beq_nat_refl; simpl; trivial.",
            "VernacExtend",
            "664e3895a5e5d1a9775d59539112e7920e24998f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Multl ar el : andl rec_bounded el -> rec_bounded (Multl_e ar el).",
            "VernacStartTheoremProof",
            "d41055b7dd03e196c4406442a709bfd81cdc6a95"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; auto; intros [H1 H2]; split.",
            "VernacExtend",
            "e015d7d6621e1b318e0673d47efe39673a50ba5f"
        ],
        [
            "apply rec_bounded_Mult.",
            "VernacExtend",
            "a739ae6635172abd96e7ded552136f29e904f1b4"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Multl_correct : forall ar el l, length (Sem (Multl_e ar el) l) = multl (map (fun e => length (Sem e l)) el).",
            "VernacStartTheoremProof",
            "ff4707c52b2f4c5ac2c27663e9d6fe036c57f53f"
        ],
        [
            "induction el as [ | e' el' IH]; simpl; trivial; intros.",
            "VernacExtend",
            "233af4b916dd7d7e87288f9869380bf2b7a14303"
        ],
        [
            "rewrite Mult_correct; simpl; auto.",
            "VernacExtend",
            "2bea1b807adc5f3192c5381b6716426ebb9aa143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint Power_e (n:nat) : Cobham := match n with | 0 => One_e 1 | S n' => Comp 1 Mult_e [Proj 1 0; Power_e n'] end.",
            "VernacFixpoint",
            "63e50f55be1f2770e7b97508c2185957f18946c5"
        ],
        [
            "Lemma arity_Power n : arity (Power_e n) = ok_arity 1.",
            "VernacStartTheoremProof",
            "41ab372867b806e0259a2dfbd2d6e713a3d0bfb9"
        ],
        [
            "induction n as [ | n' IH]; trivial; simpl.",
            "VernacExtend",
            "dcfec58b751b67771e66de1530f05941c4319aea"
        ],
        [
            "rewrite arity_Mult, <- beq_nat_refl, IH; simpl; trivial.",
            "VernacExtend",
            "48eb0609b0b8c35209e5533da8370f473b5787c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Power n : rec_bounded (Power_e n).",
            "VernacStartTheoremProof",
            "02c219973e6ca3478e79356b1738b1c56a294fdc"
        ],
        [
            "induction n as [ | n' IH]; simpl; intuition.",
            "VernacExtend",
            "ecc1e4eb19006b7185406601c6a96f4cf9aa491c"
        ],
        [
            "apply rec_bounded_Mult.",
            "VernacExtend",
            "a739ae6635172abd96e7ded552136f29e904f1b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Power_correct : forall n l, length (Sem (Power_e n) l) = power (length (hd nil l)) n.",
            "VernacStartTheoremProof",
            "7ed282da3e4963ffbe45bf61efa53a04bfe3eef2"
        ],
        [
            "induction n as [ | n' IH]; simpl; intros; trivial.",
            "VernacExtend",
            "084c938d8eb6dfdbd47dddd24d766da044e5394c"
        ],
        [
            "rewrite Mult_correct; simpl.",
            "VernacExtend",
            "6d77cb9de8c8bd29dbad4b1a3c73264cb82a5d62"
        ],
        [
            "rewrite IH, hd_nth_0; trivial.",
            "VernacExtend",
            "f8d1f2874269a7e849726c62ffd4f19727c2494a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Poly_pow (ar:nat) (xn:pow) : Cobham := Comp ar (Power_e (snd xn)) [Proj ar (fst xn)].",
            "VernacDefinition",
            "b21784be7a9ecf469ac7dc8b41fa3bf1be9c8508"
        ],
        [
            "Lemma arity_Poly_pow : forall ar xn, pWF_pow ar xn -> arity (Poly_pow ar xn) = ok_arity ar.",
            "VernacStartTheoremProof",
            "266fe18f271bb1ab7ac544f306bddeadc5ece96f"
        ],
        [
            "unfold pWF_pow; intros ar [x n] H; simpl in *.",
            "VernacExtend",
            "c979b11b3c5634f0f2ea350e12fe17bcbfccca0c"
        ],
        [
            "rewrite arity_Power, <- beq_nat_refl; simpl.",
            "VernacExtend",
            "32308ca56337223a1f71ce24a42fba37eeddc4e9"
        ],
        [
            "destruct ar; simpl in *.",
            "VernacExtend",
            "ea6ac78bd78b29eca966a5e276c7194d6793a48b"
        ],
        [
            "contradict H; omega.",
            "VernacExtend",
            "b01a273ad8ebcb349a24ecaa652ca535c8bc545c"
        ],
        [
            "case_eq (leb x ar); simpl; intro H0.",
            "VernacExtend",
            "437ea4f2ea5fa4db751fedae7c7179497bd71d6b"
        ],
        [
            "rewrite <- beq_nat_refl; simpl; trivial.",
            "VernacExtend",
            "610ff20df40e0f5abed74ba4412d646c0699c728"
        ],
        [
            "apply leb_complete_conv in H0.",
            "VernacExtend",
            "623d8bf7a0158748dbd6fcafdc01751be8e4435b"
        ],
        [
            "contradict H0; omega.",
            "VernacExtend",
            "0e0d66e11ff2a3746eb1e56f54c958efa1d8d450"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Poly_pow : forall ar xn, rec_bounded (Poly_pow ar xn).",
            "VernacStartTheoremProof",
            "5bb28ee34bb63c13afe4f600e6234913f2e0fcc0"
        ],
        [
            "simpl; intros _ xn; split; auto.",
            "VernacExtend",
            "13ff564f3152dda93f588d4940b905ca1d28e2c1"
        ],
        [
            "apply rec_bounded_Power.",
            "VernacExtend",
            "2008d000727e0de2ca9f59b609d244a60a4b5d9e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Poly_pow_correct : forall ar xn l, length (Sem (Poly_pow ar xn) l) = peval_pow xn (map (@length _) l).",
            "VernacStartTheoremProof",
            "d8e3abda748322cbda00f7ae23d409d4ae5110f0"
        ],
        [
            "intros ar [x n] l; simpl.",
            "VernacExtend",
            "451016358fdfe59aaae601fae7983abe2c6722c0"
        ],
        [
            "rewrite Power_correct; unfold peval_pow; simpl.",
            "VernacExtend",
            "81016f88e417e42919579d2f16daf1c425ad8299"
        ],
        [
            "rewrite (@map_nth _ _ (@length _) l nil); trivial.",
            "VernacExtend",
            "4e9f92edbe8b43b070a2c20de1314a879a286930"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Poly_pow.",
            "VernacSetOpacity",
            "1f21c436950fd8a9ae39e610a2de2b602b23ee1d"
        ],
        [
            "Definition Poly_mon (ar:nat)(m:mon) : Cobham := Comp ar Mult_e [Comp ar (Nat_e (fst m)) nil; Multl_e ar (map (Poly_pow ar) (snd m))].",
            "VernacDefinition",
            "caf1907256f93cd0e6b94fd81d54b2d45a759bb3"
        ],
        [
            "Lemma arity_Poly_mon : forall ar m, pWF_mon ar m -> arity (Poly_mon ar m) = ok_arity ar.",
            "VernacStartTheoremProof",
            "677ba36edc54371d146ed0753dc968a62aae8825"
        ],
        [
            "unfold pWF_mon; intros ar [a xl] H; simpl.",
            "VernacExtend",
            "cb2187c9f73e3aede67ba16b0f96c6452db3849d"
        ],
        [
            "rewrite arity_Mult, arity_Nat, arity_Multl; simpl.",
            "VernacExtend",
            "f88c7ff95ac1ee647adeab791c6ea3ce1270b3ef"
        ],
        [
            "rewrite <- beq_nat_refl; simpl; trivial.",
            "VernacExtend",
            "610ff20df40e0f5abed74ba4412d646c0699c728"
        ],
        [
            "induction xl; simpl in *; trivial; split; try tauto.",
            "VernacExtend",
            "6697d2f3ebb5c3db0d109ac22c3fec7c456635d2"
        ],
        [
            "apply arity_Poly_pow; tauto.",
            "VernacExtend",
            "0497fe9f403960600195e2bdfd3193a2f840ee09"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Poly_mon : forall ar m, rec_bounded (Poly_mon ar m).",
            "VernacStartTheoremProof",
            "4a2cbdc17d60dcdfd471e95c5bc9b68b2bfe40c9"
        ],
        [
            "intros ar [a xl]; simpl; split.",
            "VernacExtend",
            "8d3de75c14e30ce28ae393f1eb833289fdf5e921"
        ],
        [
            "apply rec_bounded_Mult.",
            "VernacExtend",
            "a739ae6635172abd96e7ded552136f29e904f1b4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "apply rec_bounded_Nat.",
            "VernacExtend",
            "7cb32e559dc7169cdb635522264a38533c032da6"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "apply rec_bounded_Multl.",
            "VernacExtend",
            "8dbec34904d2f3c45cce56fbfde4ce43600b27ad"
        ],
        [
            "rewrite <- forall_andl; intros.",
            "VernacExtend",
            "6db80ba84e60085bb219aea5233dec29749150f0"
        ],
        [
            "rewrite in_map_iff in H.",
            "VernacExtend",
            "1873c142ac9ce2a4c8e575b8482c1beb7667d9d4"
        ],
        [
            "destruct H as [xn [H _] ]; subst.",
            "VernacExtend",
            "8ac6e0a92a1f89b60762d5e84eac3e9095699066"
        ],
        [
            "apply rec_bounded_Poly_pow.",
            "VernacExtend",
            "02fac3d15bc56b066be927328c6cf25b82820d2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Poly_mon_correct : forall ar m l, length (Sem (Poly_mon ar m) l) = peval_mon m (map (@length _) l).",
            "VernacStartTheoremProof",
            "81726e3bfeaad6fdc9dd38832104939fa2384f9b"
        ],
        [
            "intros ar [a xl] l; simpl.",
            "VernacExtend",
            "72a1634b5a3b9ea4f6b9579e776abf8c29908461"
        ],
        [
            "rewrite Mult_correct; simpl.",
            "VernacExtend",
            "6d77cb9de8c8bd29dbad4b1a3c73264cb82a5d62"
        ],
        [
            "rewrite Nat_correct, Multl_correct; unfold peval_mon; simpl.",
            "VernacExtend",
            "16d59c7762ea8278599afea594e57d5e212eb69c"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "induction xl; simpl; trivial.",
            "VernacExtend",
            "b8601b64c9fc87faa432ae3046a281140a84e3eb"
        ],
        [
            "rewrite Poly_pow_correct.",
            "VernacExtend",
            "f335f9f573a178130c7394da81a22aa45da72e4b"
        ],
        [
            "unfold peval_pow in *.",
            "VernacExtend",
            "a00ec564fd5f3a158782c79b6292906dd9f2ea76"
        ],
        [
            "rewrite (@map_nth _ _ (@length _) l nil).",
            "VernacExtend",
            "82995293b0bf361f7149142cabec1b435e457afe"
        ],
        [
            "ring [IHxl].",
            "VernacExtend",
            "de535fd524e157e47e71174742fd82235f67f220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Poly_mon.",
            "VernacSetOpacity",
            "39b9526a8c319d9bc244641b00f30ed28f71aa5f"
        ],
        [
            "Definition Poly (p : pol) : Cobham := Plusl_e (fst p) (map (Poly_mon (fst p)) (snd p)).",
            "VernacDefinition",
            "284b6e15ec2f2d9ebc614a345c75f6e64fa99e8e"
        ],
        [
            "Lemma arity_Poly : forall p, pWF p -> arity (Poly p) = ok_arity (parity p).",
            "VernacStartTheoremProof",
            "8f0ebe535849dfd84d558e9b6bfa08abc219ed1b"
        ],
        [
            "unfold pWF, pWF', pWF_mon, pWF_pow; intros [ar ml] H.",
            "VernacExtend",
            "930b8a9e28206a7dbe9f749b1f580ba9dc700add"
        ],
        [
            "unfold Poly.",
            "VernacExtend",
            "e09d423de869f1dbf2c34c181e02debd9231354e"
        ],
        [
            "rewrite arity_Plusl; trivial.",
            "VernacExtend",
            "7649a4a28dec303b3d98ee1525ecea434ece3b65"
        ],
        [
            "induction ml; simpl in *; trivial.",
            "VernacExtend",
            "ba7c065f37ee612be040e51ce1c4cdb4059ef015"
        ],
        [
            "split; try tauto.",
            "VernacExtend",
            "164d793b7966ea3ae986f5a7a4efaab3b204b04d"
        ],
        [
            "apply arity_Poly_mon; tauto.",
            "VernacExtend",
            "df74edbeb27d056e4952d9bc08741719203c54fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rec_bounded_Poly : forall p, rec_bounded (Poly p).",
            "VernacStartTheoremProof",
            "edf5c8cbcbf044f78d3febba168f15be232bc7b5"
        ],
        [
            "intros [ar ml]; unfold Poly; simpl.",
            "VernacExtend",
            "7c53e270a1541e291a2d18debd78ae9e8af37e75"
        ],
        [
            "apply rec_bounded_Plusl.",
            "VernacExtend",
            "2efb68c0c5d35c632383dcf34b26908ead6300f4"
        ],
        [
            "rewrite <- forall_andl; intros e He.",
            "VernacExtend",
            "71de405bceb57028ba669d3dd74231e67b43c4ba"
        ],
        [
            "rewrite in_map_iff in He.",
            "VernacExtend",
            "dcc27aeffffba4769e638c847dceca5a0af09ae5"
        ],
        [
            "destruct He as [m [He _] ]; subst.",
            "VernacExtend",
            "fda5c943b64604354248b626dc047fbb5708703e"
        ],
        [
            "apply rec_bounded_Poly_mon.",
            "VernacExtend",
            "c1a88d23961b716ec04163491e36de6afd2787c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Poly_correct : forall p l, length (Sem (Poly p) l) = peval p (map (@length _) l).",
            "VernacStartTheoremProof",
            "8bc24dbb26dd1c7aa23a9be5f2230f7888940885"
        ],
        [
            "unfold Poly; intros [ar ml] l; simpl.",
            "VernacExtend",
            "d14de0d16e287b3dec53560e3cc3b441a9b6964d"
        ],
        [
            "rewrite Plusl_correct; unfold peval; simpl.",
            "VernacExtend",
            "2c7b2f89a76c61f44d8c767f5b24a223e2afa462"
        ],
        [
            "rewrite map_map.",
            "VernacExtend",
            "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
        ],
        [
            "induction ml; simpl; trivial.",
            "VernacExtend",
            "2ed750645d4953551bf34e79ad0f2b882f779190"
        ],
        [
            "rewrite Poly_mon_correct.",
            "VernacExtend",
            "8081d2fe6841cb12d4c413f5be22734bb53aab7b"
        ],
        [
            "unfold peval_mon in *.",
            "VernacExtend",
            "223fc3ff189a187eb8e9d64aaa799cb632cfda18"
        ],
        [
            "rewrite IHml; trivial.",
            "VernacExtend",
            "b4033d606659f704638f3c7dc083377acfd7eab0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Opaque Poly.",
            "VernacSetOpacity",
            "db0ee3b6cb032940689f472cefaaf864ba2e56b7"
        ]
    ],
    "proofs": [
        {
            "name": "Zero_correct",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "One_correct",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Succ",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Succ",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "simpl; tauto.",
                        "VernacExtend",
                        "2c27d7b56602355c3ed4605e551cd6a88509ac37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Succ_correct",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Nat",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "induction n; trivial; simpl.",
                        "VernacExtend",
                        "006f3de7bf9371009933c327e432e20a18f03626"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Succ, IHn; simpl; trivial.",
                        "VernacExtend",
                        "1e58a1d6cccc6b2a271113afb8aa7a768ac4b971"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Nat",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "induction n; simpl; trivial; split; auto.",
                        "VernacExtend",
                        "6ff7429c46229b6bdc1d6071ef6275b84cecf563"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Succ.",
                        "VernacExtend",
                        "f97d04d402933deeda61abfcedc7d2243e006166"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Nat_correct",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "induction n; simpl; intros; trivial.",
                        "VernacExtend",
                        "f11f88911c08a055d0ebf1f67e856e8f9c990aa8"
                    ]
                },
                {
                    "command": [
                        "rewrite Succ_correct; simpl; auto.",
                        "VernacExtend",
                        "8488ff49fbc4b27ec7cdd1e2701ad3e26625f2f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Plus_correct",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intro l; rewrite App_correct.",
                        "VernacExtend",
                        "a49b09b0403437471ef513958155725353849061"
                    ]
                },
                {
                    "command": [
                        "apply app_length.",
                        "VernacExtend",
                        "c0ab6c03130fb1d55fe67b7aef74ee924867bead"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Plusl",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; trivial; intros (H1, H2).",
                        "VernacExtend",
                        "ace11654eef1f440cb1091819a7a39c99cde3c0d"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Plus, IH, H1; simpl; trivial.",
                        "VernacExtend",
                        "899db909707b93c83882d3d12e690981179583b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl; simpl; trivial.",
                        "VernacExtend",
                        "610ff20df40e0f5abed74ba4412d646c0699c728"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Plusl",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; auto.",
                        "VernacExtend",
                        "7cffbc6127abbb4a4b12e91aa0837d29a1bf3bc0"
                    ]
                },
                {
                    "command": [
                        "intros [H1 H2]; split.",
                        "VernacExtend",
                        "9379e5d81cc90eda85fcb8c848e7bb5d6068cb15"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Plus.",
                        "VernacExtend",
                        "9adcdcc0d856fdf5ae5c2d5e5425def6da6df03b"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Plusl_correct",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; trivial; intros.",
                        "VernacExtend",
                        "233af4b916dd7d7e87288f9869380bf2b7a14303"
                    ]
                },
                {
                    "command": [
                        "rewrite Plus_correct; simpl; f_equal; apply IH.",
                        "VernacExtend",
                        "04548a838d13eaf3113138e90beee6ad3bd57848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Mult",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Mult_correct",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "simpl; intros [ | v1 ]; simpl; trivial; intros.",
                        "VernacExtend",
                        "5f77b2929c6441253476decd558ab30235c7b5d1"
                    ]
                },
                {
                    "command": [
                        "induction v1; simpl; trivial.",
                        "VernacExtend",
                        "b9b0460d131945c70f53f84ad492f163ca0de399"
                    ]
                },
                {
                    "command": [
                        "case a; simpl; rewrite Plus_correct; simpl; rewrite IHv1; destruct l; simpl; omega.",
                        "VernacExtend",
                        "36e82d9861b3a6c7110b3e9cdf288f050687f906"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Multl",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; trivial; intros [H1 H2].",
                        "VernacExtend",
                        "1c447b8abc73d9b2d0745c144619ee735a66559b"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Mult, IH, H1; simpl; trivial; rewrite <- beq_nat_refl; simpl; trivial.",
                        "VernacExtend",
                        "664e3895a5e5d1a9775d59539112e7920e24998f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Multl",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; auto; intros [H1 H2]; split.",
                        "VernacExtend",
                        "e015d7d6621e1b318e0673d47efe39673a50ba5f"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Mult.",
                        "VernacExtend",
                        "a739ae6635172abd96e7ded552136f29e904f1b4"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Multl_correct",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "induction el as [ | e' el' IH]; simpl; trivial; intros.",
                        "VernacExtend",
                        "233af4b916dd7d7e87288f9869380bf2b7a14303"
                    ]
                },
                {
                    "command": [
                        "rewrite Mult_correct; simpl; auto.",
                        "VernacExtend",
                        "2bea1b807adc5f3192c5381b6716426ebb9aa143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Power",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "induction n as [ | n' IH]; trivial; simpl.",
                        "VernacExtend",
                        "dcfec58b751b67771e66de1530f05941c4319aea"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Mult, <- beq_nat_refl, IH; simpl; trivial.",
                        "VernacExtend",
                        "48eb0609b0b8c35209e5533da8370f473b5787c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Power",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "induction n as [ | n' IH]; simpl; intuition.",
                        "VernacExtend",
                        "ecc1e4eb19006b7185406601c6a96f4cf9aa491c"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Mult.",
                        "VernacExtend",
                        "a739ae6635172abd96e7ded552136f29e904f1b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Power_correct",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "induction n as [ | n' IH]; simpl; intros; trivial.",
                        "VernacExtend",
                        "084c938d8eb6dfdbd47dddd24d766da044e5394c"
                    ]
                },
                {
                    "command": [
                        "rewrite Mult_correct; simpl.",
                        "VernacExtend",
                        "6d77cb9de8c8bd29dbad4b1a3c73264cb82a5d62"
                    ]
                },
                {
                    "command": [
                        "rewrite IH, hd_nth_0; trivial.",
                        "VernacExtend",
                        "f8d1f2874269a7e849726c62ffd4f19727c2494a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Poly_pow",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "unfold pWF_pow; intros ar [x n] H; simpl in *.",
                        "VernacExtend",
                        "c979b11b3c5634f0f2ea350e12fe17bcbfccca0c"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Power, <- beq_nat_refl; simpl.",
                        "VernacExtend",
                        "32308ca56337223a1f71ce24a42fba37eeddc4e9"
                    ]
                },
                {
                    "command": [
                        "destruct ar; simpl in *.",
                        "VernacExtend",
                        "ea6ac78bd78b29eca966a5e276c7194d6793a48b"
                    ]
                },
                {
                    "command": [
                        "contradict H; omega.",
                        "VernacExtend",
                        "b01a273ad8ebcb349a24ecaa652ca535c8bc545c"
                    ]
                },
                {
                    "command": [
                        "case_eq (leb x ar); simpl; intro H0.",
                        "VernacExtend",
                        "437ea4f2ea5fa4db751fedae7c7179497bd71d6b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl; simpl; trivial.",
                        "VernacExtend",
                        "610ff20df40e0f5abed74ba4412d646c0699c728"
                    ]
                },
                {
                    "command": [
                        "apply leb_complete_conv in H0.",
                        "VernacExtend",
                        "623d8bf7a0158748dbd6fcafdc01751be8e4435b"
                    ]
                },
                {
                    "command": [
                        "contradict H0; omega.",
                        "VernacExtend",
                        "0e0d66e11ff2a3746eb1e56f54c958efa1d8d450"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Poly_pow",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "simpl; intros _ xn; split; auto.",
                        "VernacExtend",
                        "13ff564f3152dda93f588d4940b905ca1d28e2c1"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Power.",
                        "VernacExtend",
                        "2008d000727e0de2ca9f59b609d244a60a4b5d9e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Poly_pow_correct",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros ar [x n] l; simpl.",
                        "VernacExtend",
                        "451016358fdfe59aaae601fae7983abe2c6722c0"
                    ]
                },
                {
                    "command": [
                        "rewrite Power_correct; unfold peval_pow; simpl.",
                        "VernacExtend",
                        "81016f88e417e42919579d2f16daf1c425ad8299"
                    ]
                },
                {
                    "command": [
                        "rewrite (@map_nth _ _ (@length _) l nil); trivial.",
                        "VernacExtend",
                        "4e9f92edbe8b43b070a2c20de1314a879a286930"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Poly_mon",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "unfold pWF_mon; intros ar [a xl] H; simpl.",
                        "VernacExtend",
                        "cb2187c9f73e3aede67ba16b0f96c6452db3849d"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Mult, arity_Nat, arity_Multl; simpl.",
                        "VernacExtend",
                        "f88c7ff95ac1ee647adeab791c6ea3ce1270b3ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl; simpl; trivial.",
                        "VernacExtend",
                        "610ff20df40e0f5abed74ba4412d646c0699c728"
                    ]
                },
                {
                    "command": [
                        "induction xl; simpl in *; trivial; split; try tauto.",
                        "VernacExtend",
                        "6697d2f3ebb5c3db0d109ac22c3fec7c456635d2"
                    ]
                },
                {
                    "command": [
                        "apply arity_Poly_pow; tauto.",
                        "VernacExtend",
                        "0497fe9f403960600195e2bdfd3193a2f840ee09"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Poly_mon",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "intros ar [a xl]; simpl; split.",
                        "VernacExtend",
                        "8d3de75c14e30ce28ae393f1eb833289fdf5e921"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Mult.",
                        "VernacExtend",
                        "a739ae6635172abd96e7ded552136f29e904f1b4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split; trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Nat.",
                        "VernacExtend",
                        "7cb32e559dc7169cdb635522264a38533c032da6"
                    ]
                },
                {
                    "command": [
                        "split; trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Multl.",
                        "VernacExtend",
                        "8dbec34904d2f3c45cce56fbfde4ce43600b27ad"
                    ]
                },
                {
                    "command": [
                        "rewrite <- forall_andl; intros.",
                        "VernacExtend",
                        "6db80ba84e60085bb219aea5233dec29749150f0"
                    ]
                },
                {
                    "command": [
                        "rewrite in_map_iff in H.",
                        "VernacExtend",
                        "1873c142ac9ce2a4c8e575b8482c1beb7667d9d4"
                    ]
                },
                {
                    "command": [
                        "destruct H as [xn [H _] ]; subst.",
                        "VernacExtend",
                        "8ac6e0a92a1f89b60762d5e84eac3e9095699066"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Poly_pow.",
                        "VernacExtend",
                        "02fac3d15bc56b066be927328c6cf25b82820d2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Poly_mon_correct",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros ar [a xl] l; simpl.",
                        "VernacExtend",
                        "72a1634b5a3b9ea4f6b9579e776abf8c29908461"
                    ]
                },
                {
                    "command": [
                        "rewrite Mult_correct; simpl.",
                        "VernacExtend",
                        "6d77cb9de8c8bd29dbad4b1a3c73264cb82a5d62"
                    ]
                },
                {
                    "command": [
                        "rewrite Nat_correct, Multl_correct; unfold peval_mon; simpl.",
                        "VernacExtend",
                        "16d59c7762ea8278599afea594e57d5e212eb69c"
                    ]
                },
                {
                    "command": [
                        "rewrite map_map.",
                        "VernacExtend",
                        "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
                    ]
                },
                {
                    "command": [
                        "induction xl; simpl; trivial.",
                        "VernacExtend",
                        "b8601b64c9fc87faa432ae3046a281140a84e3eb"
                    ]
                },
                {
                    "command": [
                        "rewrite Poly_pow_correct.",
                        "VernacExtend",
                        "f335f9f573a178130c7394da81a22aa45da72e4b"
                    ]
                },
                {
                    "command": [
                        "unfold peval_pow in *.",
                        "VernacExtend",
                        "a00ec564fd5f3a158782c79b6292906dd9f2ea76"
                    ]
                },
                {
                    "command": [
                        "rewrite (@map_nth _ _ (@length _) l nil).",
                        "VernacExtend",
                        "82995293b0bf361f7149142cabec1b435e457afe"
                    ]
                },
                {
                    "command": [
                        "ring [IHxl].",
                        "VernacExtend",
                        "de535fd524e157e47e71174742fd82235f67f220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arity_Poly",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "unfold pWF, pWF', pWF_mon, pWF_pow; intros [ar ml] H.",
                        "VernacExtend",
                        "930b8a9e28206a7dbe9f749b1f580ba9dc700add"
                    ]
                },
                {
                    "command": [
                        "unfold Poly.",
                        "VernacExtend",
                        "e09d423de869f1dbf2c34c181e02debd9231354e"
                    ]
                },
                {
                    "command": [
                        "rewrite arity_Plusl; trivial.",
                        "VernacExtend",
                        "7649a4a28dec303b3d98ee1525ecea434ece3b65"
                    ]
                },
                {
                    "command": [
                        "induction ml; simpl in *; trivial.",
                        "VernacExtend",
                        "ba7c065f37ee612be040e51ce1c4cdb4059ef015"
                    ]
                },
                {
                    "command": [
                        "split; try tauto.",
                        "VernacExtend",
                        "164d793b7966ea3ae986f5a7a4efaab3b204b04d"
                    ]
                },
                {
                    "command": [
                        "apply arity_Poly_mon; tauto.",
                        "VernacExtend",
                        "df74edbeb27d056e4952d9bc08741719203c54fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rec_bounded_Poly",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "intros [ar ml]; unfold Poly; simpl.",
                        "VernacExtend",
                        "7c53e270a1541e291a2d18debd78ae9e8af37e75"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Plusl.",
                        "VernacExtend",
                        "2efb68c0c5d35c632383dcf34b26908ead6300f4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- forall_andl; intros e He.",
                        "VernacExtend",
                        "71de405bceb57028ba669d3dd74231e67b43c4ba"
                    ]
                },
                {
                    "command": [
                        "rewrite in_map_iff in He.",
                        "VernacExtend",
                        "dcc27aeffffba4769e638c847dceca5a0af09ae5"
                    ]
                },
                {
                    "command": [
                        "destruct He as [m [He _] ]; subst.",
                        "VernacExtend",
                        "fda5c943b64604354248b626dc047fbb5708703e"
                    ]
                },
                {
                    "command": [
                        "apply rec_bounded_Poly_mon.",
                        "VernacExtend",
                        "c1a88d23961b716ec04163491e36de6afd2787c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Poly_correct",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "unfold Poly; intros [ar ml] l; simpl.",
                        "VernacExtend",
                        "d14de0d16e287b3dec53560e3cc3b441a9b6964d"
                    ]
                },
                {
                    "command": [
                        "rewrite Plusl_correct; unfold peval; simpl.",
                        "VernacExtend",
                        "2c7b2f89a76c61f44d8c767f5b24a223e2afa462"
                    ]
                },
                {
                    "command": [
                        "rewrite map_map.",
                        "VernacExtend",
                        "ae8e13105f5289f0c1e44cbfa83eff3c6f47acee"
                    ]
                },
                {
                    "command": [
                        "induction ml; simpl; trivial.",
                        "VernacExtend",
                        "2ed750645d4953551bf34e79ad0f2b882f779190"
                    ]
                },
                {
                    "command": [
                        "rewrite Poly_mon_correct.",
                        "VernacExtend",
                        "8081d2fe6841cb12d4c413f5be22734bb53aab7b"
                    ]
                },
                {
                    "command": [
                        "unfold peval_mon in *.",
                        "VernacExtend",
                        "223fc3ff189a187eb8e9d64aaa799cb632cfda18"
                    ]
                },
                {
                    "command": [
                        "rewrite IHml; trivial.",
                        "VernacExtend",
                        "b4033d606659f704638f3c7dc083377acfd7eab0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}