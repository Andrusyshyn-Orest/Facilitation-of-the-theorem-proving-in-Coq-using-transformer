{
    "filename": "Factorization/Factorization_Verif.v",
    "coq_project": "hardware",
    "vernac_cmds": [
        [
            "Require Export Linear_Structures.",
            "VernacRequire",
            "b158747e301f77a734a923ef3164e17402dbddce"
        ],
        [
            "Require Export Factorization.",
            "VernacRequire",
            "ef8a9c8cacff897464095611ce647edabba064bf"
        ],
        [
            "Section Factorization_for_Verification.",
            "VernacBeginSection",
            "087f16fe2632fc3e486c7bdfefe6876c5e89a8bb"
        ],
        [
            "Variable A : Set.",
            "VernacAssumption",
            "913b2bc4093d15ed267c28d55b4536b83f6168df"
        ],
        [
            "Variable BASE : BT.",
            "VernacAssumption",
            "03cb3e9f0105a56656748c99c5b73e671527148e"
        ],
        [
            "Let b := base BASE.",
            "VernacDefinition",
            "c88f84d86bd02ac5b03419e61b1bd012598b1819"
        ],
        [
            "Let Num := num BASE.",
            "VernacDefinition",
            "1d3c4de11c893e35b38f8c91916a69c95a60d30e"
        ],
        [
            "Let Digit := digit BASE.",
            "VernacDefinition",
            "67d36f2d43210d9566ec9c1d11cfbbeb321af1f8"
        ],
        [
            "Let Val_bound := val_bound BASE.",
            "VernacDefinition",
            "b228b2b6452cde3c4517cc3c75f2eb19f7faeda2"
        ],
        [
            "Variable R : forall n : nat, A -> inf n -> inf n -> A -> Prop.",
            "VernacAssumption",
            "bb4aaf277eaa2a49d0596aa48b6d527dc047f7bb"
        ],
        [
            "Definition Connection := connection A Digit Digit (R b).",
            "VernacDefinition",
            "c814e07e4ec19bc98aa0709489457ff191f9a75c"
        ],
        [
            "Notation Factorizable := (factorizable _) (only parsing).",
            "VernacSyntacticDefinition",
            "a59dad1ff671f874113c96c269e3c56442892d9b"
        ],
        [
            "Notation Proper := (proper _) (only parsing).",
            "VernacSyntacticDefinition",
            "8ab500a4cd9e59f20d01c46df0c89ef9d09e2288"
        ],
        [
            "Theorem factorization_for_verification : factorizable _ R -> proper _ BASE R -> forall (n : nat) (X Y : Num n) (a a' : A), Connection n a X Y a' -> R (exp b n) a (Val_bound n X) (Val_bound n Y) a'.",
            "VernacStartTheoremProof",
            "7b2e8ce44a0b288df680099ace2158506f10d670"
        ],
        [
            "intros F P.",
            "VernacExtend",
            "1130c0baa3c84ce747718e98dbbd3e72f2933eac"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "unfold proper in P; auto.",
            "VernacExtend",
            "750b47643c8fa71da0f48a66c91469cec8f21619"
        ],
        [
            "clear H X Y n a a'.",
            "VernacExtend",
            "527fe402fa2014ea8febf701dacea7e8e56403af"
        ],
        [
            "intros n a a1 a' d d' D D' H C H_rec.",
            "VernacExtend",
            "c2a1673e84b79e4b03de575264e1861b0661c968"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply F with d d' (Val_bound n D) (Val_bound n D') a1; try trivial; unfold Diveucl in |- *; split; simpl in |- *.",
            "VernacExtend",
            "dbd39bdeb2c2bf04e83379bda1e8140c646e949c"
        ],
        [
            "elim (mult_comm (exp (base BASE) n) (val BASE d)); unfold val in |- *; unfold val_inf in |- *; auto.",
            "VernacExtend",
            "814f6ddd605290f2d8e3712493dde0248b286800"
        ],
        [
            "unfold b in |- *; apply upper_bound.",
            "VernacExtend",
            "2e3dfad17fac63c074610bdf18779bcb11834ec0"
        ],
        [
            "elim (mult_comm (exp (base BASE) n) (val BASE d')); unfold val in |- *; unfold val_inf in |- *; auto.",
            "VernacExtend",
            "d4d206d65e4537c4b4c0df6186a3bae468f22c68"
        ],
        [
            "unfold b in |- *; apply upper_bound.",
            "VernacExtend",
            "2e3dfad17fac63c074610bdf18779bcb11834ec0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Factorization_for_Verification.",
            "VernacEndSegment",
            "3ef77e813f4110ae7e3bcf6f115d8fb64ee09e44"
        ]
    ],
    "proofs": [
        {
            "name": "factorization_for_verification",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros F P.",
                        "VernacExtend",
                        "1130c0baa3c84ce747718e98dbbd3e72f2933eac"
                    ]
                },
                {
                    "command": [
                        "simple induction 1.",
                        "VernacExtend",
                        "b1f838dd75029717483785a8785c7867663c75bc"
                    ]
                },
                {
                    "command": [
                        "unfold proper in P; auto.",
                        "VernacExtend",
                        "750b47643c8fa71da0f48a66c91469cec8f21619"
                    ]
                },
                {
                    "command": [
                        "clear H X Y n a a'.",
                        "VernacExtend",
                        "527fe402fa2014ea8febf701dacea7e8e56403af"
                    ]
                },
                {
                    "command": [
                        "intros n a a1 a' d d' D D' H C H_rec.",
                        "VernacExtend",
                        "c2a1673e84b79e4b03de575264e1861b0661c968"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply F with d d' (Val_bound n D) (Val_bound n D') a1; try trivial; unfold Diveucl in |- *; split; simpl in |- *.",
                        "VernacExtend",
                        "dbd39bdeb2c2bf04e83379bda1e8140c646e949c"
                    ]
                },
                {
                    "command": [
                        "elim (mult_comm (exp (base BASE) n) (val BASE d)); unfold val in |- *; unfold val_inf in |- *; auto.",
                        "VernacExtend",
                        "814f6ddd605290f2d8e3712493dde0248b286800"
                    ]
                },
                {
                    "command": [
                        "unfold b in |- *; apply upper_bound.",
                        "VernacExtend",
                        "2e3dfad17fac63c074610bdf18779bcb11834ec0"
                    ]
                },
                {
                    "command": [
                        "elim (mult_comm (exp (base BASE) n) (val BASE d')); unfold val in |- *; unfold val_inf in |- *; auto.",
                        "VernacExtend",
                        "d4d206d65e4537c4b4c0df6186a3bae468f22c68"
                    ]
                },
                {
                    "command": [
                        "unfold b in |- *; apply upper_bound.",
                        "VernacExtend",
                        "2e3dfad17fac63c074610bdf18779bcb11834ec0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}