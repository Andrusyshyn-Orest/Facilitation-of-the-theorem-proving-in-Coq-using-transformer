{
    "filename": "Utils/sets.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export MSets.",
            "VernacRequire",
            "3ee6a520beb381f4627370b8be48551a8688a771"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import NArith.",
            "VernacRequire",
            "94ad0f31c6e8f77c89e55924450f512e031ec933"
        ],
        [
            "Require Import Notations.",
            "VernacRequire",
            "a417ebd977b31297f271a9380cd8e45e4058428d"
        ],
        [
            "Require Import Sorting.",
            "VernacRequire",
            "4b941088881c86fc9cdf29a554745602ff99df7f"
        ],
        [
            "Require Import Coq.Program.Equality.",
            "VernacRequire",
            "637e8bbba214905e0c003754c6798a3d83ee6b7b"
        ],
        [
            "Require Export GeoCoq.Tactics.Coinc.tactics_axioms.",
            "VernacRequire",
            "73cad98edefe55e99aab34ee9cc33e982c85c05a"
        ],
        [
            "Module S := MSetList.Make PositiveOrderedTypeBits.",
            "VernacDefineModule",
            "485804c5e84015d9c1e2345b19a45ca8ba81fe25"
        ],
        [
            "Module SWP := WPropertiesOn PositiveOrderedTypeBits S.",
            "VernacDefineModule",
            "3a0c71e0a8e4cf628d3c71c563f5aff917348d89"
        ],
        [
            "Module SetOfSetsOfPositiveOrderedType <: OrderedType.",
            "VernacDefineModule",
            "aff0896e48fee8ee5be2dd81bf9e11df881bfeaa"
        ],
        [
            "Definition t := S.t.",
            "VernacDefinition",
            "ea93acdbd622275c60f30cec09fe78e615477c9d"
        ],
        [
            "Definition eq := S.Equal.",
            "VernacDefinition",
            "5e1319550a05c0f9c1e1ff67bfec3d7b2eef9d30"
        ],
        [
            "Include IsEq.",
            "VernacInclude",
            "52f9160e96bc0dbe9a79e2bb7641a70e924daf31"
        ],
        [
            "Definition eqb := S.equal.",
            "VernacDefinition",
            "84841b829a06e90d7636f010246c3a1793682acb"
        ],
        [
            "Definition eqb_eq := S.equal_spec.",
            "VernacDefinition",
            "222ad43e7188ed80abc38fc87943ecc5bb9a950d"
        ],
        [
            "Include HasEqBool2Dec.",
            "VernacInclude",
            "39a32ce78404fe2085b62d1aa75f098b5fc86564"
        ],
        [
            "Definition lt := S.lt.",
            "VernacDefinition",
            "85a77aa9a4e631e5abff916953b184bf2e989fa2"
        ],
        [
            "Instance lt_compat : Proper (eq==>eq==>iff) lt.",
            "VernacInstance",
            "04e2deec4194fc51245d368b9c1ad29da27fd761"
        ],
        [
            "apply S.lt_compat.",
            "VernacExtend",
            "77e4d10259d46e3b2295d7578008154857ef50ab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance lt_strorder : StrictOrder lt.",
            "VernacInstance",
            "fa189ac61b1474957ad71f3e51fbb244abde9f22"
        ],
        [
            "apply S.lt_strorder.",
            "VernacExtend",
            "7889ae262ece38226c3e782781770ce1bb1d6249"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compare := S.compare.",
            "VernacDefinition",
            "599075ef44ef4bfe97931294b86bca97aefb3848"
        ],
        [
            "Definition compare_spec := S.compare_spec.",
            "VernacDefinition",
            "648e87a9250472bdf6896de6eb13674d7ddd9bab"
        ],
        [
            "End SetOfSetsOfPositiveOrderedType.",
            "VernacEndSegment",
            "d0314b426884a498754f3353a7ff409d6a1b2542"
        ],
        [
            "Module SS := MSetList.Make SetOfSetsOfPositiveOrderedType.",
            "VernacDefineModule",
            "d8a38eae3ff3e9f1b652c730b52c8aced4317e0b"
        ],
        [
            "Definition fstpp (pair : (positive * positive)) := match pair with |(a,b) => Pos.min a b end.",
            "VernacDefinition",
            "ed1c9506c1308eeb5c0f5d4a3197f63bdbfc3c60"
        ],
        [
            "Definition sndpp (pair : (positive * positive)) := match pair with |(a,b) => Pos.max a b end.",
            "VernacDefinition",
            "aa10e485c7c56e03ecc705d1e714f997d1dac171"
        ],
        [
            "Module SetOfPairsOfPositiveOrderedType <: OrderedType.",
            "VernacDefineModule",
            "8f4112f19209521398e76fa71e8ce7f6cb3d79b8"
        ],
        [
            "Definition t:= (positive * positive).",
            "VernacDefinition",
            "f4575431e45893272d4e0ced9b8f06afeed5b020"
        ],
        [
            "Definition eq (t1 t2 : t) := Pos.eq (fstpp(t1)) (fstpp(t2)) /\\ Pos.eq (sndpp(t1)) (sndpp(t2)).",
            "VernacDefinition",
            "24e1911859d8bf5b46f5d7e327d9e875abbb2bf7"
        ],
        [
            "Include IsEq.",
            "VernacInclude",
            "52f9160e96bc0dbe9a79e2bb7641a70e924daf31"
        ],
        [
            "Definition eqb (t1 t2 : t) := Pos.eqb (fstpp(t1)) (fstpp(t2)) && Pos.eqb (sndpp(t1)) (sndpp(t2)).",
            "VernacDefinition",
            "8b463d2a7d315b097dc7564ac09510361d4c88ed"
        ],
        [
            "Lemma eqb_eq : forall t1 t2, eqb t1 t2 = true <-> eq t1 t2.",
            "VernacStartTheoremProof",
            "798d8c8c3dc68e161847566574d19d2b421b5984"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold eqb; unfold eq.",
            "VernacExtend",
            "e0b3a2426aeead8bd7ddc1e6915d8d12e6b36540"
        ],
        [
            "split; intro H.",
            "VernacExtend",
            "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
        ],
        [
            "apply andb_true_iff in H.",
            "VernacExtend",
            "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "split; apply Pos.eqb_eq; assumption.",
            "VernacExtend",
            "96fec2c0121274900081a38c038376c21fb8e313"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "apply andb_true_iff.",
            "VernacExtend",
            "583d40e493f314492aad482eb70e9a25a38aae78"
        ],
        [
            "split; apply Pos.eqb_eq; assumption.",
            "VernacExtend",
            "96fec2c0121274900081a38c038376c21fb8e313"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Include HasEqBool2Dec.",
            "VernacInclude",
            "39a32ce78404fe2085b62d1aa75f098b5fc86564"
        ],
        [
            "Definition lt (t1 t2 : t) := let ft1 := fstpp(t1) in let ft2 := fstpp(t2) in let st1 := sndpp(t1) in let st2 := sndpp(t2) in if Pos.eqb ft1 ft2 then Pos.lt st1 st2 else Pos.lt ft1 ft2.",
            "VernacDefinition",
            "42ebf9de35707aed9306fcf7a02b684fd930425e"
        ],
        [
            "Lemma lt_irrefl : Irreflexive lt.",
            "VernacStartTheoremProof",
            "fe59dc313efb799183faee3b531fe907005aab53"
        ],
        [
            "assert (HIP : Irreflexive Pos.lt) by (apply StrictOrder_Irreflexive; assumption).",
            "VernacExtend",
            "94289971a1cacf07bd2d249ba495ac5e33324525"
        ],
        [
            "unfold Irreflexive in *.",
            "VernacExtend",
            "58d5e59538835f33f657d11250e4b3c5b33d7cf4"
        ],
        [
            "unfold Reflexive in *.",
            "VernacExtend",
            "e7b3e3ec59e716a867ced036e52b951c2fc57497"
        ],
        [
            "unfold complement in *.",
            "VernacExtend",
            "8ae2dc974ecae948767a13201cdd430af516e09b"
        ],
        [
            "intro x.",
            "VernacExtend",
            "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "assert (HEq : Pos.eqb (fstpp(x)) (fstpp(x)) = true) by (apply Pos.eqb_eq; intuition).",
            "VernacExtend",
            "c35595b1cdbd5789853f8939ac98697009105cb1"
        ],
        [
            "rewrite HEq.",
            "VernacExtend",
            "24732cb3fa2a4a9a1b7d65c11c2b06d564cede6d"
        ],
        [
            "apply HIP.",
            "VernacExtend",
            "d8917130243c494e66b039d564f436db569f5a22"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_antiref : forall x, ~ lt x x.",
            "VernacStartTheoremProof",
            "7531647c17001d4e2096b09b2591423b1ef86f95"
        ],
        [
            "assert (HIL : Irreflexive lt) by (apply lt_irrefl).",
            "VernacExtend",
            "1284736a879575e0fdb142cc717ede271449f360"
        ],
        [
            "unfold Irreflexive in *.",
            "VernacExtend",
            "58d5e59538835f33f657d11250e4b3c5b33d7cf4"
        ],
        [
            "unfold Reflexive in *.",
            "VernacExtend",
            "e7b3e3ec59e716a867ced036e52b951c2fc57497"
        ],
        [
            "unfold complement in *.",
            "VernacExtend",
            "8ae2dc974ecae948767a13201cdd430af516e09b"
        ],
        [
            "intros x H.",
            "VernacExtend",
            "a0cd74b85812810ce5a78a540bad98f664bd4842"
        ],
        [
            "apply HIL with x.",
            "VernacExtend",
            "ee75e83ed5942cd3ed93a706bac7dc08a758be84"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_trans : Transitive lt.",
            "VernacStartTheoremProof",
            "665edc0fb6c507ecff76fd47011dfdf5479d2eaf"
        ],
        [
            "assert (HTP : Transitive Pos.lt) by (apply StrictOrder_Transitive; assumption).",
            "VernacExtend",
            "8a94041bc4bfe5f9d6fb62fb05f99571b36b79d3"
        ],
        [
            "unfold Transitive in *.",
            "VernacExtend",
            "60d49b6d9ab1380eb95b516d1c7d26e1317b596f"
        ],
        [
            "intros x y z.",
            "VernacExtend",
            "8357c7ce661033f932c65582aab008de3b5d8530"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "case_eq (Pos.eqb (fstpp(x)) (fstpp(y))).",
            "VernacExtend",
            "82b450a9692a69857dcc5e467a2db75cbae6e6ea"
        ],
        [
            "intro HEqXY.",
            "VernacExtend",
            "36eec1dcfea2b6c7b9dc9d767354329b5407bbd0"
        ],
        [
            "case_eq (Pos.eqb (fstpp(y)) (fstpp(z))).",
            "VernacExtend",
            "120436db7e255aff42ada4fecdc0c5f901aa04c4"
        ],
        [
            "intro HEqYZ.",
            "VernacExtend",
            "1f8d9ea2ab401320cbf9664649adb5a10b604a13"
        ],
        [
            "assert (HEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = true) by (apply Pos.eqb_eq in HEqXY; rewrite HEqXY; assumption).",
            "VernacExtend",
            "4d74858abb3376a84eafd5f899da1ee77310a1b6"
        ],
        [
            "rewrite HEqXZ.",
            "VernacExtend",
            "542a6f635f95892015263eaf7465fe4c6a00e44f"
        ],
        [
            "apply HTP.",
            "VernacExtend",
            "09cbeddfdbb6c506f8094c8001f30f6aac2e6850"
        ],
        [
            "intro HNEqYZ.",
            "VernacExtend",
            "9cf6289a425ddafe4a04aa862bbd81fb0e83968e"
        ],
        [
            "assert (HNEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = false) by (apply Pos.eqb_eq in HEqXY; rewrite HEqXY; assumption).",
            "VernacExtend",
            "ce5db946c312921d28026b976306c6471f8cc971"
        ],
        [
            "rewrite HNEqXZ.",
            "VernacExtend",
            "3c0d5de1051d5358e3bef5179b0046fdd1a3fba1"
        ],
        [
            "apply Pos.eqb_eq in HEqXY; rewrite HEqXY.",
            "VernacExtend",
            "a59eb1292a25c609bc038e912c3a7490d5eaf665"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro HNEqXY.",
            "VernacExtend",
            "ee3bf31a86e472120ee160f123be666246762ca5"
        ],
        [
            "case_eq (Pos.eqb (fstpp(y)) (fstpp(z))).",
            "VernacExtend",
            "120436db7e255aff42ada4fecdc0c5f901aa04c4"
        ],
        [
            "intro HEqYZ.",
            "VernacExtend",
            "1f8d9ea2ab401320cbf9664649adb5a10b604a13"
        ],
        [
            "assert (HNEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = false) by (apply Pos.eqb_eq in HEqYZ; rewrite <- HEqYZ; assumption).",
            "VernacExtend",
            "0193a8d2ec2155f3426ff4d6a2d558ba18bd9ee4"
        ],
        [
            "rewrite HNEqXZ.",
            "VernacExtend",
            "3c0d5de1051d5358e3bef5179b0046fdd1a3fba1"
        ],
        [
            "apply Pos.eqb_eq in HEqYZ; rewrite HEqYZ.",
            "VernacExtend",
            "10b3ebda60068d2d75af3988397ebc8db36d5300"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro HNEqYZ.",
            "VernacExtend",
            "9cf6289a425ddafe4a04aa862bbd81fb0e83968e"
        ],
        [
            "case_eq (Pos.eqb (fstpp(x)) (fstpp(z))).",
            "VernacExtend",
            "dd5a97c28043df8a0409fb01c44a58e8d3344df9"
        ],
        [
            "intro HEqXZ.",
            "VernacExtend",
            "db6ce38b4457a6b00d44e466a5d6fda54fffdf51"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (HLtXZ : Pos.ltb (fstpp(x)) (fstpp(z)) = true) by (apply Pos.ltb_lt; apply HTP with (fstpp(y)); assumption).",
            "VernacExtend",
            "158f0546799de13e4cf301c05753297828f3e0e9"
        ],
        [
            "apply Pos.eqb_eq in HEqXZ; rewrite HEqXZ in HLtXZ.",
            "VernacExtend",
            "1c0656373ad5a1cc3cebb6e32faad13175390528"
        ],
        [
            "assert (HIP : Irreflexive Pos.lt) by (apply StrictOrder_Irreflexive; assumption).",
            "VernacExtend",
            "94289971a1cacf07bd2d249ba495ac5e33324525"
        ],
        [
            "unfold Irreflexive in HIP.",
            "VernacExtend",
            "59d74634bd66e1ee992deea2b6a498082fc9afc9"
        ],
        [
            "unfold Reflexive in HIP.",
            "VernacExtend",
            "78a3c88e2aaa1d4a152959011eed549198a91f76"
        ],
        [
            "unfold complement in HIP.",
            "VernacExtend",
            "6de0f791a5ea0a4a0fbe834096fb7b3769fd8882"
        ],
        [
            "exfalso.",
            "VernacExtend",
            "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
        ],
        [
            "apply HIP with (fstpp(z)).",
            "VernacExtend",
            "2952dcc8c9daa49e5db8df4ce759fd53da471aca"
        ],
        [
            "apply Pos.ltb_lt in HLtXZ.",
            "VernacExtend",
            "459e1fd3794b39547b6115f0df417236d8b94a43"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro HNEqXZ.",
            "VernacExtend",
            "b2bbb45b73cda0e8774ae2cc72c380fd99d04af1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply HTP with (fstpp(y)); assumption.",
            "VernacExtend",
            "146e115779066abd36d69d32e3d4462f389513fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance lt_compat : Proper (eq==>eq==>iff) lt.",
            "VernacInstance",
            "04e2deec4194fc51245d368b9c1ad29da27fd761"
        ],
        [
            "intros x y HXY x' y' HX'Y'.",
            "VernacExtend",
            "c30b3f617f67a9f79833bda5828a07af3987511f"
        ],
        [
            "unfold lt; unfold eq in *.",
            "VernacExtend",
            "f97fe651bf28f3543f722c48ed5b23a93a13b256"
        ],
        [
            "elim HXY; intros HXYF HXYS.",
            "VernacExtend",
            "c83978f0d92f7a6a40980cdc332266c73bfd2fcd"
        ],
        [
            "elim HX'Y'; intros HX'Y'F HX'Y'S.",
            "VernacExtend",
            "f312300daece878cadeb4b156e580c3a7ed87791"
        ],
        [
            "clear HXY; clear HX'Y'.",
            "VernacExtend",
            "b8420ada36302c2cc31e4ed4b48866b9b22d43e5"
        ],
        [
            "unfold Pos.eq in *.",
            "VernacExtend",
            "b79675895e66e5f7c796eb4eecda4d7df02c7f95"
        ],
        [
            "case_eq (Pos.eqb (fstpp(x)) (fstpp(x'))); intro HXX'F.",
            "VernacExtend",
            "eba8e02f7c2755c576129704ee87fb1e9c8f03b9"
        ],
        [
            "assert (HYY'F : Pos.eqb (fstpp(y)) (fstpp(y')) = true).",
            "VernacExtend",
            "8a2113493fe84953b98958f679ca018a68530ebb"
        ],
        [
            "apply Pos.eqb_eq in HXX'F.",
            "VernacExtend",
            "2b661c25ad7505fe3fbe9a500c565b0983598d54"
        ],
        [
            "apply Pos.eqb_eq.",
            "VernacExtend",
            "095fe63dd7f87e8af9997ad5c294c9443cb412ca"
        ],
        [
            "rewrite <- HXYF.",
            "VernacExtend",
            "f3e282ef861f6eee842b766135d064529070b55f"
        ],
        [
            "rewrite <- HX'Y'F.",
            "VernacExtend",
            "8c36887631fd6501ffaff54704de3b985a281a5b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HYY'F.",
            "VernacExtend",
            "e014d8b80bc40ec12d1c3173d2133cd4875f3a7a"
        ],
        [
            "case_eq (Pos.eqb (sndpp(x)) (sndpp(x'))); intro HXX'S.",
            "VernacExtend",
            "1a7b0c74797b2e4737fb3e56f4dbd884a1a9a3c1"
        ],
        [
            "apply Pos.eqb_eq in HXX'S.",
            "VernacExtend",
            "111d0a544be76ba6c93a81d0df20accb73337ecf"
        ],
        [
            "assert (HYY'S : Pos.eqb (sndpp(y)) (sndpp(y')) = true).",
            "VernacExtend",
            "6fcd82c87e629810d71da8ad9c3e9f158a2aac63"
        ],
        [
            "apply Pos.eqb_eq.",
            "VernacExtend",
            "095fe63dd7f87e8af9997ad5c294c9443cb412ca"
        ],
        [
            "rewrite <- HXYS.",
            "VernacExtend",
            "1409d45df5e4481c2977352510ddc3f10c3a9eaf"
        ],
        [
            "rewrite <- HX'Y'S.",
            "VernacExtend",
            "9f79d083287bc6fd21012dae8ad537163bf6232f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Pos.eqb_eq in HYY'S.",
            "VernacExtend",
            "504358dd0e14e67f299fc0a25aa19800662af1a7"
        ],
        [
            "rewrite HYY'S.",
            "VernacExtend",
            "114e8b7330e3b4fea7921139d565a5da1ca28b83"
        ],
        [
            "rewrite HXX'S.",
            "VernacExtend",
            "9017ec161a22ac896a51db31332457036388cf04"
        ],
        [
            "rewrite HX'Y'S.",
            "VernacExtend",
            "db3556291e1fa3d4c9b8a8c6ca6fa5329fc12284"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HXYS.",
            "VernacExtend",
            "11b396f7f749f007f43a271a63cdf512be71caec"
        ],
        [
            "rewrite HX'Y'S.",
            "VernacExtend",
            "db3556291e1fa3d4c9b8a8c6ca6fa5329fc12284"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (HYY'F : Pos.eqb (fstpp(y)) (fstpp(y')) = false).",
            "VernacExtend",
            "095da35a5ae2521669add1bf00c4588e183f9b59"
        ],
        [
            "rewrite <- HXYF.",
            "VernacExtend",
            "f3e282ef861f6eee842b766135d064529070b55f"
        ],
        [
            "rewrite <- HX'Y'F.",
            "VernacExtend",
            "8c36887631fd6501ffaff54704de3b985a281a5b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HYY'F.",
            "VernacExtend",
            "e014d8b80bc40ec12d1c3173d2133cd4875f3a7a"
        ],
        [
            "rewrite HXYF.",
            "VernacExtend",
            "a528add66f5bc2136bae9fde28987c73dfde1a2f"
        ],
        [
            "rewrite HX'Y'F.",
            "VernacExtend",
            "a28b5330d1b0bfe3df95058377a284813b98b0ed"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance lt_strorder : StrictOrder lt.",
            "VernacInstance",
            "fa189ac61b1474957ad71f3e51fbb244abde9f22"
        ],
        [
            "apply Build_StrictOrder.",
            "VernacExtend",
            "b1c2304add9640b4f964524589a782a6f5a06730"
        ],
        [
            "apply lt_irrefl.",
            "VernacExtend",
            "663b21cb009de41f4398cf15411ebcd1c158eeb4"
        ],
        [
            "apply lt_trans.",
            "VernacExtend",
            "89abac57d3ee5bab2567e3bc743b175e05be7927"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compare t1 t2 := let ft1 := fstpp(t1) in let ft2 := fstpp(t2) in let st1 := sndpp(t1) in let st2 := sndpp(t2) in match (Pos.compare ft1 ft2) with | Lt => Lt | Eq => Pos.compare st1 st2 | Gt => Gt end.",
            "VernacDefinition",
            "9de5bd92f1335eb43e24b3b56864c793bf9ea75c"
        ],
        [
            "Lemma compare_spec : forall t1 t2, CompSpec eq lt t1 t2 (compare t1 t2).",
            "VernacStartTheoremProof",
            "cda7c962ffe108e7c16906f2f4beb80835dc4ac3"
        ],
        [
            "intros t1 t2.",
            "VernacExtend",
            "da31e6cfefad65215b5af41ad892e78e086e4934"
        ],
        [
            "case_eq (Pos.eqb (fstpp(t1)) (fstpp(t2))); intro HF.",
            "VernacExtend",
            "cf63b01ee780190c747b9a255a21ac9b92d436d2"
        ],
        [
            "apply Pos.eqb_eq in HF.",
            "VernacExtend",
            "7c3de4392419c773bebc9fba8c4059264816e8dd"
        ],
        [
            "case_eq (Pos.eqb (sndpp(t1)) (sndpp(t2))); intro HS.",
            "VernacExtend",
            "241b313feefdc4fee3b41d9e8e651d802178ad02"
        ],
        [
            "apply Pos.eqb_eq in HS.",
            "VernacExtend",
            "52c7250e223dff5020903621616faede6698ff3c"
        ],
        [
            "unfold CompSpec.",
            "VernacExtend",
            "1862e883863de213f3a419256ad542c806fd8414"
        ],
        [
            "assert (HC : compare t1 t2 = Eq).",
            "VernacExtend",
            "875474dcda1dc186d4b330dc33205109afc976e9"
        ],
        [
            "unfold compare.",
            "VernacExtend",
            "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
        ],
        [
            "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
            "VernacExtend",
            "8911b7de84788cd3e066da94bd911848a5d33b82"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.compare_cont_refl.",
            "VernacExtend",
            "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
        ],
        [
            "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Eq).",
            "VernacExtend",
            "186bcf8b496e1d6f9e48050817fc378a0cf8ca79"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "rewrite HS.",
            "VernacExtend",
            "c5a77025a085207e9c55935a53d7360da4e8e30e"
        ],
        [
            "apply Pos.compare_cont_refl.",
            "VernacExtend",
            "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
        ],
        [
            "rewrite HCF; rewrite HCS.",
            "VernacExtend",
            "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HC.",
            "VernacExtend",
            "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
        ],
        [
            "apply CompEq.",
            "VernacExtend",
            "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
        ],
        [
            "unfold eq.",
            "VernacExtend",
            "933b6273fd52e184377d2b6af7fe95b080d1399c"
        ],
        [
            "rewrite HF; rewrite HS; split; intuition.",
            "VernacExtend",
            "99ddc46cdff35b1225d723474f4917b66be16eff"
        ],
        [
            "case_eq (Pos.ltb (sndpp(t1)) (sndpp(t2))); intro HLS.",
            "VernacExtend",
            "4e11b1fa3205783ea9e376ecf30cba108e4cd1ff"
        ],
        [
            "assert (HC : compare t1 t2 = Lt).",
            "VernacExtend",
            "7ebc77970ab1b240214c83a3c06cb87d5fbbebfc"
        ],
        [
            "unfold compare.",
            "VernacExtend",
            "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
        ],
        [
            "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
            "VernacExtend",
            "8911b7de84788cd3e066da94bd911848a5d33b82"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.compare_cont_refl.",
            "VernacExtend",
            "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
        ],
        [
            "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Lt).",
            "VernacExtend",
            "b36655f02959b72fb3dea123aa345a02c3ae48b2"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "apply Pos.ltb_lt in HLS.",
            "VernacExtend",
            "1152d72ca0281554dfedd9ba6cb3eabfa2faa867"
        ],
        [
            "apply Pnat.nat_of_P_lt_Lt_compare_complement_morphism.",
            "VernacExtend",
            "f7bab32652b006059f44e82de52999d752577098"
        ],
        [
            "apply Pnat.Pos2Nat.inj_lt.",
            "VernacExtend",
            "1cfe164768e0ab944755d65964da9a8f288187ac"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HCF; rewrite HCS.",
            "VernacExtend",
            "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HC.",
            "VernacExtend",
            "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
        ],
        [
            "apply CompLt.",
            "VernacExtend",
            "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "apply Pos.eqb_eq in HF.",
            "VernacExtend",
            "7c3de4392419c773bebc9fba8c4059264816e8dd"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.ltb_lt in HLS.",
            "VernacExtend",
            "1152d72ca0281554dfedd9ba6cb3eabfa2faa867"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (HLS2 : Pos.ltb (sndpp(t2)) (sndpp(t1)) = true).",
            "VernacExtend",
            "6bb8dcee9d7b87e9206755ad59deac6508ded9a0"
        ],
        [
            "apply Pos.ltb_nlt in HLS.",
            "VernacExtend",
            "b81b14e326111ba131a2571ad8a44eb54c0411b4"
        ],
        [
            "apply Pos.le_nlt in HLS.",
            "VernacExtend",
            "136250c63fe88458cef5f320d6b8f4bdae4250e6"
        ],
        [
            "apply Pos.lt_eq_cases in HLS.",
            "VernacExtend",
            "917911a3e2f6347d2aba6133cc558e0efd9c5e18"
        ],
        [
            "elim HLS; intro HLS2.",
            "VernacExtend",
            "8e81ae41e668b2c218a4264de3509c477a486d62"
        ],
        [
            "apply Pos.ltb_lt.",
            "VernacExtend",
            "04aedfb379545b547c7ea99497939abb3b7c7d50"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Pos.eqb_neq in HS.",
            "VernacExtend",
            "e2ac28530d87b4e72e274eaeec6ba9ea8db90173"
        ],
        [
            "rewrite HLS2 in HS.",
            "VernacExtend",
            "82a9351bbc83cffc3a25760956b86cd211b143d1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (HC : compare t1 t2 = Gt).",
            "VernacExtend",
            "a75433855b2d6bbea001cea146820fff1ccdd454"
        ],
        [
            "unfold compare.",
            "VernacExtend",
            "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
        ],
        [
            "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
            "VernacExtend",
            "8911b7de84788cd3e066da94bd911848a5d33b82"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.compare_cont_refl.",
            "VernacExtend",
            "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
        ],
        [
            "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Gt).",
            "VernacExtend",
            "8fa233457fe8c7814b9ecd88cedf2d1261929087"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "apply Pos.ltb_lt in HLS2.",
            "VernacExtend",
            "23688ab466fab7f27b3582c0b1ef866437851167"
        ],
        [
            "apply Pnat.nat_of_P_gt_Gt_compare_complement_morphism.",
            "VernacExtend",
            "40b1228980b311f335affe7944ffae26e3587b0b"
        ],
        [
            "apply Pnat.Pos2Nat.inj_gt.",
            "VernacExtend",
            "40595105bd9dcb9dc822810d287d0ed22af4b0a8"
        ],
        [
            "apply Pos.gt_lt_iff.",
            "VernacExtend",
            "41b7050e48df1188cbf6417962504a8c1c53e125"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HCF; rewrite HCS.",
            "VernacExtend",
            "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HC.",
            "VernacExtend",
            "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
        ],
        [
            "apply CompGt.",
            "VernacExtend",
            "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "apply Pos.eqb_eq in HF.",
            "VernacExtend",
            "7c3de4392419c773bebc9fba8c4059264816e8dd"
        ],
        [
            "rewrite Pos.eqb_sym in HF.",
            "VernacExtend",
            "c4848a0bf4f05111026ccdd11ec194bdea080afd"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.ltb_lt in HLS2.",
            "VernacExtend",
            "23688ab466fab7f27b3582c0b1ef866437851167"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "case_eq (Pos.ltb (fstpp(t1)) (fstpp(t2))); intro HLF.",
            "VernacExtend",
            "4fc9b9aff687648599705506c37ae00b32980bd6"
        ],
        [
            "assert (HC : compare t1 t2 = Lt).",
            "VernacExtend",
            "7ebc77970ab1b240214c83a3c06cb87d5fbbebfc"
        ],
        [
            "unfold compare.",
            "VernacExtend",
            "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
        ],
        [
            "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Lt).",
            "VernacExtend",
            "a38c7b5428f5ec364d2d4e273db946caba442b4c"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "apply Pos.ltb_lt in HLF.",
            "VernacExtend",
            "f950bd581a1f601e04a6292d1b67ba8dceb70412"
        ],
        [
            "apply Pnat.nat_of_P_lt_Lt_compare_complement_morphism.",
            "VernacExtend",
            "f7bab32652b006059f44e82de52999d752577098"
        ],
        [
            "apply Pnat.Pos2Nat.inj_lt.",
            "VernacExtend",
            "1cfe164768e0ab944755d65964da9a8f288187ac"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HCF.",
            "VernacExtend",
            "6d32d734d475f83345858cdbb1777c0c8715d080"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HC.",
            "VernacExtend",
            "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
        ],
        [
            "apply CompLt.",
            "VernacExtend",
            "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.ltb_lt in HLF.",
            "VernacExtend",
            "f950bd581a1f601e04a6292d1b67ba8dceb70412"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (HLF2 : Pos.ltb (fstpp(t2)) (fstpp(t1)) = true).",
            "VernacExtend",
            "300f7da396aec8822cd84d118fb5a8fdd27f0ef2"
        ],
        [
            "apply Pos.ltb_nlt in HLF.",
            "VernacExtend",
            "a1ccb24662eaf78451f24f710870d943354a3e89"
        ],
        [
            "apply Pos.le_nlt in HLF.",
            "VernacExtend",
            "be4717193abd6b04841b4c971b2c684133eb95b6"
        ],
        [
            "apply Pos.lt_eq_cases in HLF.",
            "VernacExtend",
            "bf7f3605951eed36b7ae613abc0498e365ac27e5"
        ],
        [
            "elim HLF; intro HLF2.",
            "VernacExtend",
            "547027b632275ed41b9fe343abc2f0f4a1a67071"
        ],
        [
            "apply Pos.ltb_lt.",
            "VernacExtend",
            "04aedfb379545b547c7ea99497939abb3b7c7d50"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Pos.eqb_neq in HF.",
            "VernacExtend",
            "5d381a6452982e2022341d136ef78bfb67862a44"
        ],
        [
            "rewrite HLF2 in HF.",
            "VernacExtend",
            "36a290a66d3248349dfcbc42db95c87719716376"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (HC : compare t1 t2 = Gt).",
            "VernacExtend",
            "a75433855b2d6bbea001cea146820fff1ccdd454"
        ],
        [
            "unfold compare.",
            "VernacExtend",
            "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
        ],
        [
            "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Gt).",
            "VernacExtend",
            "541f09eadb4ea643bca6ef76d6a226800f622295"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "apply Pos.ltb_lt in HLF2.",
            "VernacExtend",
            "01fced6f2aa239bab87a5067b919b84827363e2f"
        ],
        [
            "apply Pnat.nat_of_P_gt_Gt_compare_complement_morphism.",
            "VernacExtend",
            "40b1228980b311f335affe7944ffae26e3587b0b"
        ],
        [
            "apply Pnat.Pos2Nat.inj_gt.",
            "VernacExtend",
            "40595105bd9dcb9dc822810d287d0ed22af4b0a8"
        ],
        [
            "apply Pos.gt_lt_iff.",
            "VernacExtend",
            "41b7050e48df1188cbf6417962504a8c1c53e125"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite HCF.",
            "VernacExtend",
            "6d32d734d475f83345858cdbb1777c0c8715d080"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite HC.",
            "VernacExtend",
            "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
        ],
        [
            "apply CompGt.",
            "VernacExtend",
            "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "rewrite Pos.eqb_sym in HF.",
            "VernacExtend",
            "c4848a0bf4f05111026ccdd11ec194bdea080afd"
        ],
        [
            "rewrite HF.",
            "VernacExtend",
            "888cec1c97071aa71bbf6d88077c811dd7347427"
        ],
        [
            "apply Pos.ltb_lt in HLF2.",
            "VernacExtend",
            "01fced6f2aa239bab87a5067b919b84827363e2f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SetOfPairsOfPositiveOrderedType.",
            "VernacEndSegment",
            "34104da2321cc0a4e8176380fab50187d7794d05"
        ],
        [
            "Module SP := MSetList.Make SetOfPairsOfPositiveOrderedType.",
            "VernacDefineModule",
            "65d814c8bb5df53444b26e84a506db8f35c28c6f"
        ],
        [
            "Module PosOrder <: TotalLeBool.",
            "VernacDefineModule",
            "741332f252683e4c22c3459b127a38955d19b0a3"
        ],
        [
            "Definition t := positive.",
            "VernacDefinition",
            "f9e815330069bad0d2e4c90337c0dc484f5fad38"
        ],
        [
            "Definition leb := Pos.leb.",
            "VernacDefinition",
            "86c29b4c0e209ee5d6445c8eeaae5a5d61dee859"
        ],
        [
            "Lemma leb_total : forall p1 p2, leb p1 p2 = true \\/ leb p2 p1 = true.",
            "VernacStartTheoremProof",
            "1acaf6806cd45749e1566be3ed82a4d6b4830f08"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "do 2 (rewrite Pos.leb_le).",
            "VernacExtend",
            "e4800718f80a7edf38e772c11981b487f6ba0a36"
        ],
        [
            "do 2 (rewrite Pos.le_lteq).",
            "VernacExtend",
            "b9c35aa7d49c21b58eb5fbdefecd6fc6838c60c1"
        ],
        [
            "assert (HElim := Pos.lt_total p1 p2).",
            "VernacExtend",
            "abcdcee531189a234b7d99f0199f12151814ba1c"
        ],
        [
            "elim HElim; clear HElim; intro HElim.",
            "VernacExtend",
            "588d1e900b6f6f32fb617753805c9df2cf5623a9"
        ],
        [
            "left; left; assumption.",
            "VernacExtend",
            "b1e1169c3e7a6087a38d3c04aee71bbfc2f6f3ba"
        ],
        [
            "elim HElim; clear HElim; intro HElim.",
            "VernacExtend",
            "588d1e900b6f6f32fb617753805c9df2cf5623a9"
        ],
        [
            "left; right; assumption.",
            "VernacExtend",
            "7618911eed6cafc80d81e243ba068a3252f25f29"
        ],
        [
            "right; left; assumption.",
            "VernacExtend",
            "9b218babeec3d27c28f2f8b4ca8c9c7cef0c4ac1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leb_dec : forall p1 p2, leb p1 p2 = true \\/ leb p1 p2 = false.",
            "VernacStartTheoremProof",
            "dcd94d28ee7d2d2c498ec8968504142d88181362"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim Pos.eq_dec with p1 p2.",
            "VernacExtend",
            "fe1a647766b49251b53916f553e4f6cab11ebfb1"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "left; apply POrderedType.Positive_as_DT.leb_refl.",
            "VernacExtend",
            "4941bad5b601a3ef3f0392c23a4f903ece44ba52"
        ],
        [
            "intro HNeq.",
            "VernacExtend",
            "d634bd749923791ba7351fcd579d6d6994942960"
        ],
        [
            "elim leb_total with p1 p2; intro Hp1p2.",
            "VernacExtend",
            "069fab1114470cdaff814eecc74f8b0267e244c5"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "rewrite Positive_as_DT.leb_gt.",
            "VernacExtend",
            "41d06096305c5eb1574a1064a7d718f38c9e3286"
        ],
        [
            "rewrite Positive_as_DT.leb_le in Hp1p2.",
            "VernacExtend",
            "85701a5d9a7a0acaed1989dff3e30c6254403dfb"
        ],
        [
            "rewrite Pos.lt_eq_cases in Hp1p2.",
            "VernacExtend",
            "281c7e4ede6250933d9df0abd2b89b10890a35c2"
        ],
        [
            "elim Hp1p2; intro.",
            "VernacExtend",
            "be551e635cc5a854a6112fb40617666558a61869"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "subst; intuition.",
            "VernacExtend",
            "996f8c91c6df59eb32d913a2132e15c6011e125f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PosOrder.",
            "VernacEndSegment",
            "dec8baf2a70e1d953f3c8c8336e5006f87b4b980"
        ],
        [
            "Module Import PosSort := Sort PosOrder.",
            "VernacDefineModule",
            "cde352d316505a82f42a2cbc4feeb9c75d7d9f9c"
        ],
        [
            "Definition OCPAux {n : nat} (cp : cartesianPower positive (S (S n))) := (PosSort.sort (CPToList cp)).",
            "VernacDefinition",
            "58be8a1db470e7441624e4507d3e979a10a84ae5"
        ],
        [
            "Lemma OCPALengthOK {n : nat} : forall (cp : cartesianPower positive (S (S n))), (length (OCPAux cp)) = (S (S n)).",
            "VernacStartTheoremProof",
            "a53824cf2fd8eec5986e3a1a9b775f057c3145fa"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "unfold OCPAux.",
            "VernacExtend",
            "4760fab52abea3724b245d762a774773fc0ed5fa"
        ],
        [
            "assert (HPerm := Permuted_sort (CPToList cp)).",
            "VernacExtend",
            "eaae0a118e6bceffe82fae55d552cde6e057f068"
        ],
        [
            "apply Permutation.Permutation_length in HPerm.",
            "VernacExtend",
            "b64d6044affe1b882fb4127861ec4157989de2c6"
        ],
        [
            "rewrite <- HPerm.",
            "VernacExtend",
            "75388d3660804fab0d5cb264f5a39a1736c12f02"
        ],
        [
            "apply eq_sym.",
            "VernacExtend",
            "313410cb7bcb68dc243125f00e91764f51d94be6"
        ],
        [
            "apply lengthOfCPToList.",
            "VernacExtend",
            "3203b73ffd30a9e7cf2cd8011964e8f0c7f24563"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma OCPSortedTl : forall (l : list positive), StronglySorted (fun x x0 : positive => is_true (x <=? x0)%positive) l -> StronglySorted (fun x x0 : positive => is_true (x <=? x0)%positive) (tl l).",
            "VernacStartTheoremProof",
            "7d1ec8cda953436681e23b1571867f9668de4c7b"
        ],
        [
            "intros l HSorted.",
            "VernacExtend",
            "8afe2abcca7265abf8e1e3573c125051e74087e0"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl; apply SSorted_nil.",
            "VernacExtend",
            "c2d20a5e2880eac4c9d6b4f9c6c809b7cd46ed66"
        ],
        [
            "clear IHl.",
            "VernacExtend",
            "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
        ],
        [
            "simpl; apply StronglySorted_inv in HSorted; destruct HSorted as [HSorted Hhd].",
            "VernacExtend",
            "3fad0f036c2fb0491de44c5c1008ea4cef5d5b30"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PermSorted : forall (l l' : list positive), Permutation.Permutation l l' -> StronglySorted (fun x x0 : positive => is_true (x <=? x0)%positive) l -> StronglySorted (fun x x0 : positive => is_true (x <=? x0)%positive) l' -> l = l'.",
            "VernacStartTheoremProof",
            "abc15246c2f23bb42e9b9f874b190425d90c382a"
        ],
        [
            "intro l; induction l.",
            "VernacExtend",
            "4a886e80d631695693a238edb191c72bc84bf91f"
        ],
        [
            "intro l'; induction l'.",
            "VernacExtend",
            "22aaf360ac72bf9b949d4bfd61a5737585a7ee76"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intro HPerm.",
            "VernacExtend",
            "f1039a9f2a54c9b2611b8553e6f47f70f0ecfed2"
        ],
        [
            "apply Permutation.Permutation_nil_cons in HPerm.",
            "VernacExtend",
            "5b8421d3b9a4a0f217422be739229e2b83e341c9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro l'; induction l'.",
            "VernacExtend",
            "22aaf360ac72bf9b949d4bfd61a5737585a7ee76"
        ],
        [
            "intro HPerm.",
            "VernacExtend",
            "f1039a9f2a54c9b2611b8553e6f47f70f0ecfed2"
        ],
        [
            "apply Permutation.Permutation_sym in HPerm.",
            "VernacExtend",
            "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
        ],
        [
            "apply Permutation.Permutation_nil_cons in HPerm.",
            "VernacExtend",
            "5b8421d3b9a4a0f217422be739229e2b83e341c9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intros HPerm Hl Hl'.",
            "VernacExtend",
            "7c7be6dab279068ffdd493456dec9aaeb10ba539"
        ],
        [
            "assert (HIna' : In a (a :: l)) by (apply in_eq).",
            "VernacExtend",
            "55afec4dc45de598aa1816a0e0ede4b30e051a77"
        ],
        [
            "assert (HIna : In a (a0 :: l')) by (apply Permutation.Permutation_in with (a :: l); assumption).",
            "VernacExtend",
            "8cf06b5fa4f6a443f4e51a28f09f8ee75d8aed1c"
        ],
        [
            "assert (HIna0' : In a0 (a0 :: l')) by (apply in_eq).",
            "VernacExtend",
            "d8741cf45cc95e4dc366ac47a6adf8dce0fe3bf6"
        ],
        [
            "assert (HIna0 : In a0 (a :: l)) by (apply Permutation.Permutation_in with (a0 :: l'); apply Permutation.Permutation_sym in HPerm;assumption).",
            "VernacExtend",
            "bdfc4990ae88cc58dfe897b56082abab1c37145b"
        ],
        [
            "clear HIna'; clear HIna0'; apply in_inv in HIna; apply in_inv in HIna0.",
            "VernacExtend",
            "d55bdbf350588637a430f0e1d923f68d9c701a81"
        ],
        [
            "elim HIna; clear HIna; intro HIna; elim HIna0; clear HIna0; intro HIna0; try (rewrite HIna in *); try (rewrite <- HIna0 in *).",
            "VernacExtend",
            "a53246243b8c06a1084074955edf2c689bc42874"
        ],
        [
            "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
            "VernacExtend",
            "39def801bfa5737aed003b8df03c4b091bc3d2b7"
        ],
        [
            "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
            "VernacExtend",
            "f1302511f7d9cea49745921c3b6e914482deaa99"
        ],
        [
            "apply IHl in HPerm'; try assumption.",
            "VernacExtend",
            "9d75f7d975d8c44c20ec49adef554f6019da98cb"
        ],
        [
            "rewrite HPerm'; reflexivity.",
            "VernacExtend",
            "7f5cd149485eb043961f440c44af9192b1f68822"
        ],
        [
            "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
            "VernacExtend",
            "39def801bfa5737aed003b8df03c4b091bc3d2b7"
        ],
        [
            "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
            "VernacExtend",
            "f1302511f7d9cea49745921c3b6e914482deaa99"
        ],
        [
            "apply IHl in HPerm'; try assumption.",
            "VernacExtend",
            "9d75f7d975d8c44c20ec49adef554f6019da98cb"
        ],
        [
            "rewrite HPerm'; reflexivity.",
            "VernacExtend",
            "7f5cd149485eb043961f440c44af9192b1f68822"
        ],
        [
            "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
            "VernacExtend",
            "39def801bfa5737aed003b8df03c4b091bc3d2b7"
        ],
        [
            "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
            "VernacExtend",
            "f1302511f7d9cea49745921c3b6e914482deaa99"
        ],
        [
            "apply IHl in HPerm'; try assumption.",
            "VernacExtend",
            "9d75f7d975d8c44c20ec49adef554f6019da98cb"
        ],
        [
            "rewrite HPerm'; reflexivity.",
            "VernacExtend",
            "7f5cd149485eb043961f440c44af9192b1f68822"
        ],
        [
            "assert (Hle1 := Hl); assert (Hle2 := Hl').",
            "VernacExtend",
            "228be241a2899b9901cc119820cc8a65aed7e797"
        ],
        [
            "apply StronglySorted_inv in Hle1; apply StronglySorted_inv in Hle2.",
            "VernacExtend",
            "2a4bdd1de525fef454ae1f62364058174db75fe4"
        ],
        [
            "destruct Hle1 as [Hclear Hle1]; clear Hclear; destruct Hle2 as [Hclear Hle2]; clear Hclear.",
            "VernacExtend",
            "b1e91a013cfbd98e4f48ab4705de7f22bf9d3557"
        ],
        [
            "assert (Haa0 : (forall x, In x l -> is_true (Pos.leb a x))) by (apply Forall_forall; assumption).",
            "VernacExtend",
            "811ba5dcc91d9080ee420f5334f1f688415e317b"
        ],
        [
            "assert (Ha0a : (forall x, In x l' -> is_true (Pos.leb a0 x))) by (apply Forall_forall; assumption).",
            "VernacExtend",
            "569f95a768d498ffc0dcf6b52e44862af22250aa"
        ],
        [
            "apply Ha0a in HIna.",
            "VernacExtend",
            "c7ae02bc462eb909cdc3077e681aacd7d259476b"
        ],
        [
            "apply Haa0 in HIna0.",
            "VernacExtend",
            "3f2d006ff6236307cb9f60de1029b086603a6c50"
        ],
        [
            "unfold is_true in *.",
            "VernacExtend",
            "0fbeb2fe432b1ebe391a9ec89fd2bb2ea793048a"
        ],
        [
            "apply Pos.leb_le in HIna; apply Pos.leb_le in HIna0.",
            "VernacExtend",
            "dbe7777a222ef1fc167da78eaf46d341a241cb95"
        ],
        [
            "assert (H := Pos.le_antisym a0 a HIna HIna0).",
            "VernacExtend",
            "777b0910fa3453f6144f308fcc803d118be271a0"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
            "VernacExtend",
            "39def801bfa5737aed003b8df03c4b091bc3d2b7"
        ],
        [
            "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
            "VernacExtend",
            "f1302511f7d9cea49745921c3b6e914482deaa99"
        ],
        [
            "apply IHl in HPerm'; try assumption.",
            "VernacExtend",
            "9d75f7d975d8c44c20ec49adef554f6019da98cb"
        ],
        [
            "rewrite HPerm'; reflexivity.",
            "VernacExtend",
            "7f5cd149485eb043961f440c44af9192b1f68822"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition OCP {n : nat} (cp : cartesianPower positive (S (S n))) : cartesianPower positive (S (S n)).",
            "VernacDefinition",
            "9e4cf1cf9e996a0870e39993bd50497c9cf365a2"
        ],
        [
            "assert (H := OCPALengthOK cp).",
            "VernacExtend",
            "10761c17ab9bc7d20449ee9473e8e029c8a80edd"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "exact (ListToCP (OCPAux cp) (fst cp)).",
            "VernacExtend",
            "7b444bf06fd47f62ec12ed65a1bffc22b76d0181"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma OCPSortedAux {n : nat} : forall (cp : cartesianPower positive (S (S n))), StronglySorted (fun x x0 : positive => is_true (x <=? x0)%positive) (CPToList (OCP cp)).",
            "VernacStartTheoremProof",
            "b563906d474d47b2129f901a67d4c310e36c2760"
        ],
        [
            "intros cp.",
            "VernacExtend",
            "2a808c102dbb769625f8ae61cd0f32776c84a737"
        ],
        [
            "unfold OCP.",
            "VernacExtend",
            "b21a644795adb364fa79c9d80e18446706bfc834"
        ],
        [
            "unfold OCPAux.",
            "VernacExtend",
            "4760fab52abea3724b245d762a774773fc0ed5fa"
        ],
        [
            "elim_eq_rect; simpl.",
            "VernacExtend",
            "1f7073b55f3c0088d97c377e51761c726c3af29b"
        ],
        [
            "rewrite CPLOK.",
            "VernacExtend",
            "763b475ffa025f720c8293f436cf3d3b53534d26"
        ],
        [
            "apply StronglySorted_sort.",
            "VernacExtend",
            "f63fd7d1df1b4e0f5867d93e7cdff45a45e13bdb"
        ],
        [
            "intros x1 x2 x3.",
            "VernacExtend",
            "358bd6118c012d274998a226f9b9f64b491a85dd"
        ],
        [
            "unfold is_true.",
            "VernacExtend",
            "73e58dc4b9293f0e30cceb725066cf6dc51c855f"
        ],
        [
            "intros Hx1x2 Hx2x3.",
            "VernacExtend",
            "4d6d8709f6c3cd2a87b3363496ff6fc875ade5b1"
        ],
        [
            "apply Pos.leb_le in Hx1x2.",
            "VernacExtend",
            "03ee9cfb48425da42e17141408beede934fa0426"
        ],
        [
            "apply Pos.leb_le in Hx2x3.",
            "VernacExtend",
            "774b9fcc16ee8e3918f6b3986536e5a717fa2085"
        ],
        [
            "apply Pos.leb_le.",
            "VernacExtend",
            "5b45e61113aed75a6efd98f6ec3c4f3b55da1d36"
        ],
        [
            "transitivity x2; assumption.",
            "VernacExtend",
            "f813080711e66e82a68d5ae596c24f968a50be5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma OCPPerm {n : nat} : forall (cp : cartesianPower positive (S (S n))), Permutation.Permutation (CPToList cp) (CPToList (OCP cp)).",
            "VernacStartTheoremProof",
            "cb5a0e73b3833dc959d3289b679857d9ad560856"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "unfold OCP.",
            "VernacExtend",
            "b21a644795adb364fa79c9d80e18446706bfc834"
        ],
        [
            "unfold OCPAux.",
            "VernacExtend",
            "4760fab52abea3724b245d762a774773fc0ed5fa"
        ],
        [
            "elim_eq_rect; simpl.",
            "VernacExtend",
            "1f7073b55f3c0088d97c377e51761c726c3af29b"
        ],
        [
            "rewrite CPLOK.",
            "VernacExtend",
            "763b475ffa025f720c8293f436cf3d3b53534d26"
        ],
        [
            "apply Permuted_sort.",
            "VernacExtend",
            "a7637e22391526f3baa256b780965faf7bf3f8f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLOCPTlOK {n : nat} : forall (cp : cartesianPower positive (S (S (S n)))), headCP cp = headCP (OCP cp) -> CPToList (OCP (tailCP cp)) = CPToList (tailCP (OCP cp)).",
            "VernacStartTheoremProof",
            "270b82da45d1fd05a8d1001c887208fdafbafba5"
        ],
        [
            "intros cp Hhd.",
            "VernacExtend",
            "ff71311afeaad4f490779d348e5b0c08453bc11d"
        ],
        [
            "apply PermSorted.",
            "VernacExtend",
            "597d4f901e30bcbcfd7c64209f862551fc8a5494"
        ],
        [
            "assert (H := OCPPerm cp).",
            "VernacExtend",
            "9f549dd1584d2988a62f9ff814eb73bd534961e2"
        ],
        [
            "rewrite CPToListOK in H.",
            "VernacExtend",
            "ec8c1a3d1bef8e7650344bdd06694894bce89d98"
        ],
        [
            "apply Permutation.Permutation_sym in H.",
            "VernacExtend",
            "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
        ],
        [
            "rewrite CPToListOK in H.",
            "VernacExtend",
            "ec8c1a3d1bef8e7650344bdd06694894bce89d98"
        ],
        [
            "rewrite <- Hhd in H.",
            "VernacExtend",
            "9d46cb4bef318bfc1d659572bc463b5760fab0a2"
        ],
        [
            "apply Permutation.Permutation_app_inv_l with ((headCP cp) :: nil).",
            "VernacExtend",
            "83589e55516d66d352f9095610bf60a94867df0d"
        ],
        [
            "assert (H' : (headCP cp :: nil) ++ CPToList (OCP (tailCP cp)) = headCP cp :: (CPToList (OCP (tailCP cp)))) by (simpl; reflexivity); rewrite H'; clear H'.",
            "VernacExtend",
            "8a8bce162cc1be5f1d5c419ca73643df3e2f1757"
        ],
        [
            "assert (H' : (headCP cp :: nil) ++ CPToList (tailCP (OCP cp)) = headCP cp :: (CPToList (tailCP (OCP cp)))) by (simpl; reflexivity); rewrite H'; clear H'.",
            "VernacExtend",
            "0feb0a0b1637eca3d0964c3930df2d8859cd459c"
        ],
        [
            "apply Permutation.Permutation_sym in H.",
            "VernacExtend",
            "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
        ],
        [
            "apply Permutation.perm_trans with (headCP cp :: CPToList (tailCP cp)); try assumption; clear H.",
            "VernacExtend",
            "030ea31b6a79dc0ad8e766823f56a431eb8d4303"
        ],
        [
            "assert (H := OCPPerm (tailCP cp)).",
            "VernacExtend",
            "06e1e1b3a2a98b658f7acfef6ed0e09139262752"
        ],
        [
            "apply Permutation.Permutation_sym in H.",
            "VernacExtend",
            "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
        ],
        [
            "apply Permutation.perm_skip.",
            "VernacExtend",
            "e9f44a387252e26735f564a446ce6d5616341161"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply OCPSortedAux.",
            "VernacExtend",
            "9acee36421b87459118d272048f203b74ae75d83"
        ],
        [
            "rewrite <- CPToListTl2.",
            "VernacExtend",
            "0cfd3596123a09fad9c95db01661a8899cd50e30"
        ],
        [
            "apply OCPSortedTl.",
            "VernacExtend",
            "4dd6c68aef27122d515f5989c55723c58a3623b8"
        ],
        [
            "apply OCPSortedAux.",
            "VernacExtend",
            "9acee36421b87459118d272048f203b74ae75d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma OCPTlOK {n : nat} : forall (cp : cartesianPower positive (S (S (S n)))), headCP cp = headCP (OCP cp) -> OCP (tailCP cp) = tailCP (OCP cp).",
            "VernacStartTheoremProof",
            "a11dec262d296fdbb014d74c181fcdbae015f868"
        ],
        [
            "intros cp Hhd.",
            "VernacExtend",
            "ff71311afeaad4f490779d348e5b0c08453bc11d"
        ],
        [
            "apply CPLOCPTlOK in Hhd.",
            "VernacExtend",
            "899bc4b6d2aed90ed48d738c041f9528ef5c03ac"
        ],
        [
            "apply CPLCP; assumption.",
            "VernacExtend",
            "c54b6e116cf446dcd78cfec1df6a8f4e8a56bce9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InCPOCP {n : nat} : forall p (cp : cartesianPower positive (S (S n))), InCP p cp <-> InCP p (OCP cp).",
            "VernacStartTheoremProof",
            "3955733ec5a8d8ce65083198428d30cff8153fd6"
        ],
        [
            "intros p cp.",
            "VernacExtend",
            "a297ca0b2b4117283e959a5fe0e3e3abb4841eca"
        ],
        [
            "unfold OCP.",
            "VernacExtend",
            "b21a644795adb364fa79c9d80e18446706bfc834"
        ],
        [
            "unfold OCPAux.",
            "VernacExtend",
            "4760fab52abea3724b245d762a774773fc0ed5fa"
        ],
        [
            "unfold InCP.",
            "VernacExtend",
            "df1188e79a6d40e6ab2452b5fd80a8a17374515e"
        ],
        [
            "elim_eq_rect; simpl.",
            "VernacExtend",
            "1f7073b55f3c0088d97c377e51761c726c3af29b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "rewrite CPLOK.",
            "VernacExtend",
            "763b475ffa025f720c8293f436cf3d3b53534d26"
        ],
        [
            "assert (HPerm1 := Permuted_sort (CPToList cp)); simpl in HPerm1.",
            "VernacExtend",
            "ea2a29ea492056547d1d77caa2d727f9a322c14d"
        ],
        [
            "assert (HPerm2 := HPerm1); apply Permutation.Permutation_sym in HPerm2.",
            "VernacExtend",
            "5f8ed5a577045931d060b69eaff870254ad205f4"
        ],
        [
            "assert (HInOK : In p (sort (fst cp :: snd cp :: nil)) <-> In p (fst cp :: snd cp :: nil)) by (split; intro HIn; try (apply Permutation.Permutation_in with (sort (fst cp :: snd cp :: nil)); assumption); apply Permutation.Permutation_in with (fst cp :: snd cp :: nil); assumption).",
            "VernacExtend",
            "c449e24e753a2de2f5e8912fb04afc9831ea951b"
        ],
        [
            "split; intro HIn.",
            "VernacExtend",
            "5d9e87271e4ae97f3905fb0d8d98c035c1f5ccba"
        ],
        [
            "apply HInOK; simpl; assumption.",
            "VernacExtend",
            "826e284c14274d03ec9aaac2e40a57afa0ddaa93"
        ],
        [
            "apply HInOK in HIn; simpl in HIn; assumption.",
            "VernacExtend",
            "d35a05c382e764a41c9d8bf93ba135f4d8febcab"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "rewrite CPLOK.",
            "VernacExtend",
            "763b475ffa025f720c8293f436cf3d3b53534d26"
        ],
        [
            "set (sscp := (nat_rect (fun n : nat => cartesianPower positive (S n) -> list positive) (fun cp0 : cartesianPower positive 1 => cp0 :: nil) (fun (n : nat) (IHn : cartesianPower positive (S n) -> list positive) (cp0 : cartesianPower positive (S (S n))) => fst cp0 :: IHn (tailCP cp0)) n (tailCP (snd cp)))).",
            "VernacExtend",
            "35ad1318b2359c49370ba83603f8e9041148ce4b"
        ],
        [
            "assert (HPerm := Permuted_sort (fst cp :: fst (snd cp) :: sscp)).",
            "VernacExtend",
            "b95623846fbb79df83c01ae76c86641b03c2efff"
        ],
        [
            "split; intro HIn.",
            "VernacExtend",
            "5d9e87271e4ae97f3905fb0d8d98c035c1f5ccba"
        ],
        [
            "elim HIn; clear HIn; intro HIn.",
            "VernacExtend",
            "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
            "VernacExtend",
            "fdc9d35e029355113df628a1032e282de87bd879"
        ],
        [
            "apply in_eq.",
            "VernacExtend",
            "b2ebc8aa95184dafdee2b91493439102df7a8d40"
        ],
        [
            "elim HIn; clear HIn; intro HIn.",
            "VernacExtend",
            "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
            "VernacExtend",
            "fdc9d35e029355113df628a1032e282de87bd879"
        ],
        [
            "apply in_cons.",
            "VernacExtend",
            "399e38cb78a431736f6d0e2fdcca101d4656106f"
        ],
        [
            "apply in_eq.",
            "VernacExtend",
            "b2ebc8aa95184dafdee2b91493439102df7a8d40"
        ],
        [
            "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
            "VernacExtend",
            "fdc9d35e029355113df628a1032e282de87bd879"
        ],
        [
            "do 2 (apply in_cons).",
            "VernacExtend",
            "ec7de9bb9e11e77bdffe78a26b8decc61619030f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Permutation.Permutation_sym in HPerm.",
            "VernacExtend",
            "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
        ],
        [
            "assert (HInOKAux := Permutation.Permutation_in).",
            "VernacExtend",
            "3be81de251ad3ef7de076e11d3641c4207ac6282"
        ],
        [
            "assert (HInOK := HInOKAux positive (sort (fst cp :: fst (snd cp) :: sscp)) (fst cp :: fst (snd cp) :: sscp) p HPerm HIn); clear HInOKAux; clear HIn.",
            "VernacExtend",
            "c23333f73dad2064120823e06ef940c2a3f74e52"
        ],
        [
            "rename HInOK into HIn.",
            "VernacExtend",
            "165af0397994a94c9ffebb87e19efdba79487024"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Set_of_tuple_of_positive.",
            "VernacBeginSection",
            "efaec37953109d4842cbb2314688e5bf7a36a504"
        ],
        [
            "Context {Ar : Arity}.",
            "VernacContext",
            "8b82ad0c4bdfd4521ff45f7686723e79afabe734"
        ],
        [
            "Fixpoint eqList (l1 l2 : list positive) := match l1, l2 with | nil, nil => True | (hd1 :: tl1), (hd2 :: tl2) => (Pos.eq hd1 hd2) /\\ (eqList tl1 tl2) | _, _ => False end.",
            "VernacFixpoint",
            "ee82f92a0641327f83276e1ef5b7c1fe4d05dfb0"
        ],
        [
            "Lemma eqListRefl : forall l, eqList l l.",
            "VernacStartTheoremProof",
            "7dc666dcfaf778113b5d8c9e4111abf5bcac52ec"
        ],
        [
            "intro l; induction l; simpl.",
            "VernacExtend",
            "f446a0b923ecc5cca94e0536ac35ae1e81b87317"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "split; try assumption.",
            "VernacExtend",
            "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqListSym : forall l l', eqList l l' -> eqList l' l.",
            "VernacStartTheoremProof",
            "ad3728e05f1537d0f967b24c6d8bb4dc06b03f79"
        ],
        [
            "intro l; induction l.",
            "VernacExtend",
            "4a886e80d631695693a238edb191c72bc84bf91f"
        ],
        [
            "intro l'; induction l'; auto.",
            "VernacExtend",
            "f604fd233bccf12ed3925e425860c02e9ce4a94f"
        ],
        [
            "intro l'; induction l'; auto.",
            "VernacExtend",
            "f604fd233bccf12ed3925e425860c02e9ce4a94f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intro H.",
            "VernacExtend",
            "a9535760040671e8853f25f0b4e9eda38ca392a6"
        ],
        [
            "destruct H as [Haa0 Hll'].",
            "VernacExtend",
            "8f0b672a809d5bab6ae471f56b3a88b3e6a49574"
        ],
        [
            "split; intuition.",
            "VernacExtend",
            "ad92f41c7c6120efbfc528c4c895eac1600e6297"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqListTrans : forall l1 l2 l3, eqList l1 l2 -> eqList l2 l3 -> eqList l1 l3.",
            "VernacStartTheoremProof",
            "8d96d9f6ad11a90a99e959e0dabf40af2b2a045a"
        ],
        [
            "intro l1; induction l1.",
            "VernacExtend",
            "0d5934638263245a2fb87d07fbce3ad989c90ec1"
        ],
        [
            "intro l2; induction l2.",
            "VernacExtend",
            "359cdd779aa3b29893b3e6d09cfe5b3907b33047"
        ],
        [
            "intro l3; induction l3.",
            "VernacExtend",
            "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "intro l2; induction l2.",
            "VernacExtend",
            "359cdd779aa3b29893b3e6d09cfe5b3907b33047"
        ],
        [
            "intro l3; induction l3.",
            "VernacExtend",
            "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "intro l3; induction l3.",
            "VernacExtend",
            "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros Hl1l2 Hl2l3.",
            "VernacExtend",
            "bcbdf810656c3eff4ff96789bb5e736a2566f2c0"
        ],
        [
            "destruct Hl1l2 as [Haa0 Hl1l2].",
            "VernacExtend",
            "39fc5928269aa7ef4ab00b861987f6b785d2f43c"
        ],
        [
            "destruct Hl2l3 as [Ha0a1 Hl2l3].",
            "VernacExtend",
            "7828b6da335efd57a9942fff3090acade25b6a8e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "transitivity a0; assumption.",
            "VernacExtend",
            "21ff4896c8ea927903348f7bf8ea6913865941ad"
        ],
        [
            "apply IHl1 with l2; assumption.",
            "VernacExtend",
            "6a665d980c8abefcf19a668dfbaa451d333dc9d8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tST := cartesianPower positive (S (S n)).",
            "VernacDefinition",
            "d65a0df2e654febe3fdec4e59334166cb7a19c17"
        ],
        [
            "Definition eqST (cp1 cp2 : tST) := eqList (PosSort.sort (CPToList cp1)) (PosSort.sort (CPToList cp2)).",
            "VernacDefinition",
            "4cad86b7ac66d3f7cc1df27e41384b0943e7b9f0"
        ],
        [
            "Lemma eqListSortOCP : forall (cp : tST), eqList (CPToList (OCP cp)) (PosSort.sort (CPToList cp)).",
            "VernacStartTheoremProof",
            "1fe7c0ae3b660574a3907c4ed1e5500eafe0e886"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "unfold OCP.",
            "VernacExtend",
            "b21a644795adb364fa79c9d80e18446706bfc834"
        ],
        [
            "unfold OCPAux.",
            "VernacExtend",
            "4760fab52abea3724b245d762a774773fc0ed5fa"
        ],
        [
            "elim_eq_rect.",
            "VernacExtend",
            "a3ab8624ed2e751c63fb01448c407dc19db6956e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite CPLOK.",
            "VernacExtend",
            "763b475ffa025f720c8293f436cf3d3b53534d26"
        ],
        [
            "apply eqListRefl.",
            "VernacExtend",
            "62276702c2a2c76cee88a20d60f2f426e3a4915a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint eqbList (l1 l2 : list positive) := match l1, l2 with | nil , nil => true | (hd1 :: tl1), (hd2 :: tl2) => (Pos.eqb hd1 hd2) && (eqbList tl1 tl2) | _ , _ => false end.",
            "VernacFixpoint",
            "47e6656956d5e5c7d7275ba4d4c8225544538b4b"
        ],
        [
            "Lemma eqbListEqList : forall l1 l2, eqbList l1 l2 = true <-> eqList l1 l2.",
            "VernacStartTheoremProof",
            "8bf23925878a21435878a6b48a507812857cb089"
        ],
        [
            "intro l1.",
            "VernacExtend",
            "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
        ],
        [
            "induction l1.",
            "VernacExtend",
            "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "simpl; unfold eqList.",
            "VernacExtend",
            "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "simpl; unfold eqList.",
            "VernacExtend",
            "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
        ],
        [
            "split; intro; intuition; discriminate.",
            "VernacExtend",
            "909ac1823f6a8515c91c4d42150414a5dbb2dabb"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "simpl; unfold eqList.",
            "VernacExtend",
            "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
        ],
        [
            "split; intro; intuition; discriminate.",
            "VernacExtend",
            "909ac1823f6a8515c91c4d42150414a5dbb2dabb"
        ],
        [
            "split; intro H.",
            "VernacExtend",
            "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
        ],
        [
            "unfold eqbList in H.",
            "VernacExtend",
            "cabd1f484b810375760a49f52507971082b9f535"
        ],
        [
            "apply andb_true_iff in H.",
            "VernacExtend",
            "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
        ],
        [
            "destruct H as [Hhd Htl].",
            "VernacExtend",
            "7109d8730dcbd51ef5568efabd9ef13034e2abd1"
        ],
        [
            "fold eqbList in Htl.",
            "VernacExtend",
            "e5839459b93209d1f534125ef359b3f183fb0762"
        ],
        [
            "assert (H := IHl1 l2).",
            "VernacExtend",
            "854ab8527e6f682f3bda0957e85156d38b9bdc1d"
        ],
        [
            "rewrite H in Htl.",
            "VernacExtend",
            "b407da14c4639d94029a8a6082f7c45956c894c8"
        ],
        [
            "unfold eqList.",
            "VernacExtend",
            "762edd97411b25e78c8afa87a2b0d4f303c258ce"
        ],
        [
            "split; try assumption.",
            "VernacExtend",
            "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
        ],
        [
            "rewrite PositiveSet.E.eqb_eq in Hhd.",
            "VernacExtend",
            "9a231bbf7012246dc793bde5c10edf239e39dcec"
        ],
        [
            "subst; reflexivity.",
            "VernacExtend",
            "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
        ],
        [
            "apply andb_true_iff.",
            "VernacExtend",
            "583d40e493f314492aad482eb70e9a25a38aae78"
        ],
        [
            "rewrite PositiveSet.E.eqb_eq; fold eqbList.",
            "VernacExtend",
            "4a156361a6553066b655eae78d4d150d8cef9bdf"
        ],
        [
            "unfold eqList in H.",
            "VernacExtend",
            "4fc1b264e2a18de86f0c9667c7420ccbf01a1477"
        ],
        [
            "destruct H as [Hhd Htl].",
            "VernacExtend",
            "7109d8730dcbd51ef5568efabd9ef13034e2abd1"
        ],
        [
            "fold eqList in Htl.",
            "VernacExtend",
            "33092eeba0f828f8ab7413294008e9aa17d7c5d0"
        ],
        [
            "assert (H := IHl1 l2).",
            "VernacExtend",
            "854ab8527e6f682f3bda0957e85156d38b9bdc1d"
        ],
        [
            "rewrite <- H in Htl.",
            "VernacExtend",
            "67f65a2e6370a0e6ef2417ec754fb773dbb6658e"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eqbST (cp1 cp2 : tST) := eqbList (PosSort.sort (CPToList cp1)) (PosSort.sort (CPToList cp2)).",
            "VernacDefinition",
            "1c47bc4f3b33235060e19224c280d106f31a62a6"
        ],
        [
            "Lemma eqbST_eqST : forall cp1 cp2, eqbST cp1 cp2 = true <-> eqST cp1 cp2.",
            "VernacStartTheoremProof",
            "fb1b976f50d4f54875b6846762f1236662bdee99"
        ],
        [
            "intros; unfold eqbST, eqST; apply eqbListEqList.",
            "VernacExtend",
            "af9d96211b9c3aafd18476f5f9d85e314c5c001e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint ltList (l1 l2 : list positive) := match l1, l2 with | nil, nil => False | (hd1 :: tl1), (hd2 :: tl2) => if (Pos.ltb hd1 hd2) then True else if (Pos.ltb hd2 hd1) then False else (ltList tl1 tl2) | nil, _ => True | _, nil => False end.",
            "VernacFixpoint",
            "0270c55de459f8d13f8db221c731be70056714fb"
        ],
        [
            "Lemma lengthOne : forall (l : list positive), length l = 1 -> exists a, l = a :: nil.",
            "VernacStartTheoremProof",
            "c452556d7a50454cfb5a24f06be3da722b083f89"
        ],
        [
            "intros l Hl.",
            "VernacExtend",
            "73c348d1ec294870f643ef6a781f4b0c88e45247"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl in Hl; discriminate.",
            "VernacExtend",
            "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "exists a; reflexivity.",
            "VernacExtend",
            "d0f7a71d1fbb46f3989d64caa53aab487bb30926"
        ],
        [
            "simpl in Hl; discriminate.",
            "VernacExtend",
            "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lengthAtLeastOne : forall (l : list positive) n, length l = (S n) -> exists a0 l0, l = a0 :: l0.",
            "VernacStartTheoremProof",
            "c2f6f8f54efe9d4130bcb5b959cbba06a8db2435"
        ],
        [
            "intros l n Hl.",
            "VernacExtend",
            "ecb38604757fc7a726d4f0be60cf3580de5f7db6"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl in Hl; discriminate.",
            "VernacExtend",
            "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
        ],
        [
            "exists a; exists l; reflexivity.",
            "VernacExtend",
            "9966df55c42cb0d8ff118d31b1cd7d0061fbd43c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltListTrans : forall m x y z, length x = (S m) -> length y = (S m) -> length z = (S m) -> ltList x y -> ltList y z -> ltList x z.",
            "VernacStartTheoremProof",
            "51d88871b5151198b9b53cb043137595582c2cb0"
        ],
        [
            "intro m; induction m; intros x y z lx ly lz Hxy Hyz.",
            "VernacExtend",
            "72fd5cc1ef852a2b90530232f7e838f21285abeb"
        ],
        [
            "assert (Hx := lengthOne x lx); destruct Hx as [hdx Hx].",
            "VernacExtend",
            "9c62bef87ef53a4a77608ecd8a7bebc26da5d1f5"
        ],
        [
            "assert (Hy := lengthOne y ly); destruct Hy as [hdy Hy].",
            "VernacExtend",
            "0dca29ef370b709a4e8a0b1d8997ea2c803f4e82"
        ],
        [
            "assert (Hz := lengthOne z lz); destruct Hz as [hdz Hz].",
            "VernacExtend",
            "9f94894d8e1e27b9355dec4392dbe15cd3c6cd14"
        ],
        [
            "subst; simpl in *.",
            "VernacExtend",
            "e273de7514ad96e96a09ebeca61a1469071c25a2"
        ],
        [
            "assert (H : Pos.ltb hdx hdz = true).",
            "VernacExtend",
            "2dda2f530426bd6c27a0fc89156ceb1520df0339"
        ],
        [
            "rewrite Pos.ltb_lt.",
            "VernacExtend",
            "1f91ef82c640fa1f8ec0f82038c4fb828070f037"
        ],
        [
            "transitivity hdy.",
            "VernacExtend",
            "c980f182b94b5d0ad77de07c66cc7d7ed11614d5"
        ],
        [
            "rewrite <- Pos.ltb_lt.",
            "VernacExtend",
            "bfa1c6dcca8eb4c3e4746bb2c5f8fa688a7a3594"
        ],
        [
            "induction (Pos.ltb hdx hdy); intuition.",
            "VernacExtend",
            "388e76107f3cd2b0d3ebf6d62f4cc7bd757d3232"
        ],
        [
            "induction (Pos.ltb hdy hdx); intuition.",
            "VernacExtend",
            "812954d24141177733fb4446900f8adc570b46bf"
        ],
        [
            "rewrite <- Pos.ltb_lt.",
            "VernacExtend",
            "bfa1c6dcca8eb4c3e4746bb2c5f8fa688a7a3594"
        ],
        [
            "induction (Pos.ltb hdy hdz); intuition.",
            "VernacExtend",
            "775cfffce38354d6200b8a1cf54a9d297aacbe2e"
        ],
        [
            "induction (Pos.ltb hdz hdy); intuition.",
            "VernacExtend",
            "b78be7a7df8260885385daf6e830a4c57456c6b3"
        ],
        [
            "rewrite H; trivial.",
            "VernacExtend",
            "be0ba1f6432776bd85200205d59a572473bb951c"
        ],
        [
            "assert (Hx := lengthAtLeastOne x (S m) lx); destruct Hx as [hdx [tlx Hx]].",
            "VernacExtend",
            "c0ae3d7076dc4e02204d82be30aeb9fb41815cc3"
        ],
        [
            "assert (Hy := lengthAtLeastOne y (S m) ly); destruct Hy as [hdy [tly Hy]].",
            "VernacExtend",
            "0712c80eb9f06e491a8f636205dc95505349681e"
        ],
        [
            "assert (Hz := lengthAtLeastOne z (S m) lz); destruct Hz as [hdz [tlz Hz]].",
            "VernacExtend",
            "e4baa0b7c59692625bd86220e0cfae50f94609ce"
        ],
        [
            "subst; simpl in *.",
            "VernacExtend",
            "e273de7514ad96e96a09ebeca61a1469071c25a2"
        ],
        [
            "assert (HEqxy := Pos.compare_eq hdx hdy).",
            "VernacExtend",
            "50a5b65feba9c2a9dd2e686b2ef682d84ec3b0b4"
        ],
        [
            "assert (HEqyz := Pos.compare_eq hdy hdz).",
            "VernacExtend",
            "83bd0d7c93c9b466a8b80d281964e5e4d79494d5"
        ],
        [
            "assert (HLtxy := Pos.compare_nge_iff hdx hdy).",
            "VernacExtend",
            "ab0c3ebd7b1c601896afc4e99e505f289469fcf2"
        ],
        [
            "assert (HLtyz := Pos.compare_nge_iff hdy hdz).",
            "VernacExtend",
            "dc73f00f320bb25ee2a4f0d7b41773c45934c57f"
        ],
        [
            "assert (HGtxy := Pos.compare_gt_iff hdx hdy).",
            "VernacExtend",
            "c3e7ba0c1bcc738de1c9680f82f89a7ccf1a8a94"
        ],
        [
            "assert (HGtyz := Pos.compare_gt_iff hdy hdz).",
            "VernacExtend",
            "9f60bb103a01cc57be872092d095b2ddc914f877"
        ],
        [
            "induction (Pos.compare hdx hdy); induction (Pos.compare hdy hdz).",
            "VernacExtend",
            "e1d88b72494f02f8af19cf311579285cdca9c173"
        ],
        [
            "assert (H : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "9f38bd8a2b4832500d29af736c00e48f714d78d0"
        ],
        [
            "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
        ],
        [
            "assert (H' : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "8bc6f0afa143d23a6622223c926512f03d6f3560"
        ],
        [
            "apply HEqyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "6853d296feeb5b0c7e7f03b300cea60436371d1b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (H := Pos.ltb_irrefl hdz).",
            "VernacExtend",
            "1155a6fa666b4d21e45ce3106149c61fc61e83cf"
        ],
        [
            "rewrite H in *; clear H.",
            "VernacExtend",
            "a659f7273b9ba28d93f6bd2cf194145d9a4a3001"
        ],
        [
            "apply eq_add_S in lx.",
            "VernacExtend",
            "36b082c261af286812cc43106248fd9da82d4ac0"
        ],
        [
            "apply eq_add_S in ly.",
            "VernacExtend",
            "90b4c8feb94d4b0e9e40e395a7f77a3f1a351f24"
        ],
        [
            "apply eq_add_S in lz.",
            "VernacExtend",
            "4f88446c77e2c9c6836af5d7b52118bc6dd422b4"
        ],
        [
            "apply IHm with tly; assumption.",
            "VernacExtend",
            "cefa29521320348b12c80ebb01db6292d5ae41dc"
        ],
        [
            "assert (H : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "9f38bd8a2b4832500d29af736c00e48f714d78d0"
        ],
        [
            "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
        ],
        [
            "assert (H' : Lt = Lt) by reflexivity.",
            "VernacExtend",
            "f4ba3a1d24b55f681389d5d072e6fafdd1dfc3af"
        ],
        [
            "apply HLtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "fcc6dd19935cfcbbbb2e1d02d95f95f711b66262"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite <- Pos.lt_nle in H'.",
            "VernacExtend",
            "0b4be71deeb5d741349a6a47badd57ccbc6be2d8"
        ],
        [
            "rewrite <- Pos.ltb_lt in H'.",
            "VernacExtend",
            "5681edd550d4930f7b8ffc728d6f1ec0235dde20"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "9f38bd8a2b4832500d29af736c00e48f714d78d0"
        ],
        [
            "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
        ],
        [
            "assert (H' : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "b4c37cbbd1fd4b5432c21394032118e8ffc3e37d"
        ],
        [
            "apply HGtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "6eff520aeeed5a2bbde4449964d11d8310c0adb8"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite <- Pos.ltb_lt in H'.",
            "VernacExtend",
            "5681edd550d4930f7b8ffc728d6f1ec0235dde20"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H : Lt = Lt) by reflexivity.",
            "VernacExtend",
            "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
        ],
        [
            "apply HLtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "07a1ade56b800eb22c8e148418729cbae85732bf"
        ],
        [
            "assert (H' : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "8bc6f0afa143d23a6622223c926512f03d6f3560"
        ],
        [
            "apply HEqyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "6853d296feeb5b0c7e7f03b300cea60436371d1b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "rewrite <- Pos.lt_nle in H.",
            "VernacExtend",
            "4c5c3f111f1011329788c52293fc2191b1c147b7"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H : Lt = Lt) by reflexivity.",
            "VernacExtend",
            "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
        ],
        [
            "apply HLtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "07a1ade56b800eb22c8e148418729cbae85732bf"
        ],
        [
            "assert (H' : Lt = Lt) by reflexivity.",
            "VernacExtend",
            "f4ba3a1d24b55f681389d5d072e6fafdd1dfc3af"
        ],
        [
            "apply HLtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "fcc6dd19935cfcbbbb2e1d02d95f95f711b66262"
        ],
        [
            "rewrite <- Pos.lt_nle in H.",
            "VernacExtend",
            "4c5c3f111f1011329788c52293fc2191b1c147b7"
        ],
        [
            "rewrite <- Pos.lt_nle in H'.",
            "VernacExtend",
            "0b4be71deeb5d741349a6a47badd57ccbc6be2d8"
        ],
        [
            "assert (H'' : Pos.lt hdx hdz) by (transitivity hdy; assumption).",
            "VernacExtend",
            "a02a84c59566ee09743323b216f8efab52582f9b"
        ],
        [
            "rewrite <- Pos.ltb_lt in H''.",
            "VernacExtend",
            "80e6071278a1cb15c82131c8514a1afec4ea808c"
        ],
        [
            "rewrite H''.",
            "VernacExtend",
            "08bc448c359c8ed379f487dadafb8d6578cdc776"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "a60b6fc4798d66826d9c0c5badd2788bbdea5481"
        ],
        [
            "assert (H : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
        ],
        [
            "apply HGtyz in H; clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "8098f1c67d75e416ea7edd435cf4b9b9d627c0e2"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "rewrite Pos.ltb_lt in H.",
            "VernacExtend",
            "3c4994677689308cb0666d7e2770a57b211af905"
        ],
        [
            "rewrite Pos.lt_nle in H.",
            "VernacExtend",
            "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
        ],
        [
            "assert (H' : Pos.ltb hdy hdz = false).",
            "VernacExtend",
            "9b8ba8b20249ed8a14cac7faa010d6d67dbad829"
        ],
        [
            "rewrite Pos.ltb_nlt.",
            "VernacExtend",
            "c42e95928af5319188f7a8c5061e3e817b68a425"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Pos.lt_eq_cases.",
            "VernacExtend",
            "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "f049e382af879d860de83f77769ecaaa64d80246"
        ],
        [
            "assert (H : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
        ],
        [
            "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "f1cc4770485a3da000078fb966cafd20344db302"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "rewrite Pos.ltb_lt in H.",
            "VernacExtend",
            "3c4994677689308cb0666d7e2770a57b211af905"
        ],
        [
            "rewrite Pos.lt_nle in H.",
            "VernacExtend",
            "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
        ],
        [
            "assert (H' : Pos.ltb hdx hdy = false).",
            "VernacExtend",
            "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
        ],
        [
            "rewrite Pos.ltb_nlt.",
            "VernacExtend",
            "c42e95928af5319188f7a8c5061e3e817b68a425"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Pos.lt_eq_cases.",
            "VernacExtend",
            "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "f049e382af879d860de83f77769ecaaa64d80246"
        ],
        [
            "assert (H : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
        ],
        [
            "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "f1cc4770485a3da000078fb966cafd20344db302"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "rewrite Pos.ltb_lt in H.",
            "VernacExtend",
            "3c4994677689308cb0666d7e2770a57b211af905"
        ],
        [
            "rewrite Pos.lt_nle in H.",
            "VernacExtend",
            "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
        ],
        [
            "assert (H' : Pos.ltb hdx hdy = false).",
            "VernacExtend",
            "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
        ],
        [
            "rewrite Pos.ltb_nlt.",
            "VernacExtend",
            "c42e95928af5319188f7a8c5061e3e817b68a425"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Pos.lt_eq_cases.",
            "VernacExtend",
            "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear HEqyz; clear HLtyz; clear HGtyz.",
            "VernacExtend",
            "f049e382af879d860de83f77769ecaaa64d80246"
        ],
        [
            "assert (H : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
        ],
        [
            "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
            "VernacExtend",
            "f1cc4770485a3da000078fb966cafd20344db302"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "rewrite H in *.",
            "VernacExtend",
            "288b227b15ae46c36597274ad2b93384514b82ec"
        ],
        [
            "rewrite Pos.ltb_lt in H.",
            "VernacExtend",
            "3c4994677689308cb0666d7e2770a57b211af905"
        ],
        [
            "rewrite Pos.lt_nle in H.",
            "VernacExtend",
            "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
        ],
        [
            "assert (H' : Pos.ltb hdx hdy = false).",
            "VernacExtend",
            "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
        ],
        [
            "rewrite Pos.ltb_nlt.",
            "VernacExtend",
            "c42e95928af5319188f7a8c5061e3e817b68a425"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Pos.lt_eq_cases.",
            "VernacExtend",
            "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite H' in *.",
            "VernacExtend",
            "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sortOK : forall m l, length l = m -> length (sort l) = m.",
            "VernacStartTheoremProof",
            "ef7855c0cdce2da1593261fed51294a0b343f087"
        ],
        [
            "intros m l Hl.",
            "VernacExtend",
            "f085b1ab0cf5672460b3dfe30dd30dd8e11a88e1"
        ],
        [
            "assert (H := Permuted_iter_merge l nil).",
            "VernacExtend",
            "8b051ada6a30b52fff58fc77082818c8ea9f2b26"
        ],
        [
            "apply Permutation.Permutation_length in H.",
            "VernacExtend",
            "8fb7a967a3939bd89b5868f9ee280aab2b35a74f"
        ],
        [
            "unfold flatten_stack in H.",
            "VernacExtend",
            "329ce76f3de9711ac6edd064d5b4562db7b543d2"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite <- Hl.",
            "VernacExtend",
            "5ed0aeece8356d562df83b4a1b3416a07ac23845"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "unfold sort.",
            "VernacExtend",
            "29cc4a076e0eb3e89206a710784f457b54076714"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ltST (cp1 cp2 : tST) := ltList (PosSort.sort (CPToList cp1)) (PosSort.sort (CPToList cp2)).",
            "VernacDefinition",
            "8ea4c4a4729e08900cf7ef0bafcf21194aa1c7b3"
        ],
        [
            "Lemma ltTrans : Transitive ltST.",
            "VernacStartTheoremProof",
            "5a97b7330636324c063619a1e3a3673beaab01f2"
        ],
        [
            "unfold lt.",
            "VernacExtend",
            "2e821d407c03d5f5e572c51453fdc618d9dec364"
        ],
        [
            "intros x y z Hxy Hyz.",
            "VernacExtend",
            "bf0d92fec5671802249f6b649dc54ef865d622c2"
        ],
        [
            "assert (lx : (S (S n)) = (S (S n))) by reflexivity.",
            "VernacExtend",
            "75347f9cb8dce3d30e4418cbf10a153ec7137a3c"
        ],
        [
            "assert (lx' := lengthOfCPToList x).",
            "VernacExtend",
            "0fb26881aa14c20caeb4399c27f44da3e66e5d7b"
        ],
        [
            "assert (lx'' := sortOK (S (S n)) (CPToList x)).",
            "VernacExtend",
            "090161554bddef6b2bb050c51e4bbac5ee97cf9d"
        ],
        [
            "rewrite <- lx' in lx''; clear lx'.",
            "VernacExtend",
            "673be5d9438e7c732f3173946cac08e539e9fcbe"
        ],
        [
            "apply lx'' in lx; clear lx''.",
            "VernacExtend",
            "5a9bad7e046948101db39d3df081c7adbb632c5d"
        ],
        [
            "assert (ly : (S (S n)) = (S (S n))) by reflexivity.",
            "VernacExtend",
            "73dbbb6da79c1f40f92a112a7646dda64bc61c5d"
        ],
        [
            "assert (ly' := lengthOfCPToList y).",
            "VernacExtend",
            "682ddfd9a04c80d3019062627f63d1f914b4c3bc"
        ],
        [
            "assert (ly'' := sortOK (S (S n)) (CPToList y)).",
            "VernacExtend",
            "06e88b5c8fc5a1d9959c2966ada6a81c3df26840"
        ],
        [
            "rewrite <- ly' in ly''; clear ly'.",
            "VernacExtend",
            "ca5f0a6bb0d3c606233b0cc45d9dca8a93e9e84e"
        ],
        [
            "apply ly'' in ly; clear ly''.",
            "VernacExtend",
            "69b17b4e92c18333355e59d65d6f250fae15fd7c"
        ],
        [
            "assert (lz : (S (S n)) = (S (S n))) by reflexivity.",
            "VernacExtend",
            "c025c5a16578459724a349310fc075a4843a0e09"
        ],
        [
            "assert (lz' := lengthOfCPToList z).",
            "VernacExtend",
            "10c5f60e5b75a76e8c634cf34547e3b96bbe8ca8"
        ],
        [
            "assert (lz'' := sortOK (S (S n)) (CPToList z)).",
            "VernacExtend",
            "0aa3b587e52149959c94d1210455a506839706a8"
        ],
        [
            "rewrite <- lz' in lz''; clear lz'.",
            "VernacExtend",
            "68fdb8731cb9190463bd4247943aff058a027d1e"
        ],
        [
            "apply lz'' in lz; clear lz''.",
            "VernacExtend",
            "08f506ba0ec9b634ecf0d3875de560bbae2ff683"
        ],
        [
            "assert (H := ltListTrans (S n) (sort (CPToList x)) (sort (CPToList y)) (sort (CPToList z))).",
            "VernacExtend",
            "719e5c2a4b5651f2c242cf57d7a964ff93b82b30"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltListIrrefl : forall l, ltList l l -> False.",
            "VernacStartTheoremProof",
            "444c9c28bfdc2381634b1b9bec1779ff2423c325"
        ],
        [
            "intro l.",
            "VernacExtend",
            "c8139627914eb6a3cf51966a8a1d73a6c51f81e7"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "assert (H := Pos.lt_irrefl a).",
            "VernacExtend",
            "880ab8b66e79c176469142f0da1c4962d613467a"
        ],
        [
            "rewrite <- Pos.ltb_nlt in H.",
            "VernacExtend",
            "7e940b58c7f81ee94c2f87f4786a15e43303948e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqListOK : forall l1 l2, eqList l1 l2 -> l1 = l2.",
            "VernacStartTheoremProof",
            "4fcadc3b8a4733421011f7a4bd53e28bc2fbfe49"
        ],
        [
            "intro l1.",
            "VernacExtend",
            "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
        ],
        [
            "induction l1.",
            "VernacExtend",
            "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intro HEq.",
            "VernacExtend",
            "5ba0ec7bcb7e0b7d3571015fa4add3d531fa33ef"
        ],
        [
            "destruct HEq as [Hhd Htl].",
            "VernacExtend",
            "a240f3abe9f2c02727463a0da80c445e56e1f0d5"
        ],
        [
            "unfold Pos.eq in Hhd.",
            "VernacExtend",
            "4b15103d34bb9ccf1b47fb61e3166d2627e9da3f"
        ],
        [
            "apply IHl1 in Htl.",
            "VernacExtend",
            "d85a426b30c5395e7516f2b1cef8a91bd00ae66d"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint compareList (l1 l2 : list positive) := match l1, l2 with | nil, nil => Eq | (hd1 :: tl1), (hd2 :: tl2) => match Pos.compare hd1 hd2 with | Lt => Lt | Eq => compareList tl1 tl2 | Gt => Gt end | nil, _ => Lt | _, nil => Gt end.",
            "VernacFixpoint",
            "90e9cdfefdda5a8244fd7e5d4d8f9016a7ed27c0"
        ],
        [
            "Lemma compareListSpec : forall l1 l2, CompSpec eqList ltList l1 l2 (compareList l1 l2).",
            "VernacStartTheoremProof",
            "6d5825d3c08f9ca6f274b0b3f60b97e15423e88e"
        ],
        [
            "intro l1.",
            "VernacExtend",
            "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
        ],
        [
            "unfold eqST; unfold lt.",
            "VernacExtend",
            "ca255793c019f6103c06b07fef0d1aae01fdf613"
        ],
        [
            "induction l1.",
            "VernacExtend",
            "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply CompEq.",
            "VernacExtend",
            "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply CompLt.",
            "VernacExtend",
            "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "intro l2.",
            "VernacExtend",
            "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
        ],
        [
            "induction l2.",
            "VernacExtend",
            "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply CompGt.",
            "VernacExtend",
            "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
        ],
        [
            "simpl; trivial.",
            "VernacExtend",
            "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
        ],
        [
            "clear IHl2.",
            "VernacExtend",
            "8c30713b7004e6fce2773d1ffd20c8aab5dd185e"
        ],
        [
            "assert (HEq := Pos.compare_eq a a0).",
            "VernacExtend",
            "fe78e1537b1a37401a817f33dd0537da9b978967"
        ],
        [
            "assert (HLt := Pos.compare_nge_iff a a0).",
            "VernacExtend",
            "6710e25ef764980fcf0651324faf5558dfb81782"
        ],
        [
            "assert (HGt := Pos.compare_gt_iff a a0).",
            "VernacExtend",
            "20dd1a37b0fa9b66690270629e591aadc2d82db4"
        ],
        [
            "induction (Pos.compare a a0).",
            "VernacExtend",
            "dcd2b3e3d54d0b5d4f79733b17fd725e90202e44"
        ],
        [
            "assert (H : Eq = Eq) by reflexivity.",
            "VernacExtend",
            "9f38bd8a2b4832500d29af736c00e48f714d78d0"
        ],
        [
            "apply HEq in H; clear HEq; clear HLt; clear HGt.",
            "VernacExtend",
            "8706d2175800397997e13ec69e16623ef949f111"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite POrderedType.Positive_as_OT.compare_refl.",
            "VernacExtend",
            "aaac27785629d4e84992d2973ab295073f39a0b0"
        ],
        [
            "assert (H := IHl1 l2); clear IHl1.",
            "VernacExtend",
            "6dd404d1c347abd5be22cb320aff6c180619ff02"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "apply CompEq.",
            "VernacExtend",
            "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
        ],
        [
            "simpl; split; auto; apply Pos.eq_refl.",
            "VernacExtend",
            "7f623a9763c4ac0bcb000a44db6071a43e64a298"
        ],
        [
            "apply CompLt.",
            "VernacExtend",
            "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
        ],
        [
            "simpl; rewrite Pos.ltb_irrefl; auto.",
            "VernacExtend",
            "2e077b33d27227c6723f866c3e4920d76f9b2f5a"
        ],
        [
            "apply CompGt.",
            "VernacExtend",
            "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
        ],
        [
            "simpl; rewrite Pos.ltb_irrefl; auto.",
            "VernacExtend",
            "2e077b33d27227c6723f866c3e4920d76f9b2f5a"
        ],
        [
            "assert (H : Lt = Lt) by reflexivity.",
            "VernacExtend",
            "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
        ],
        [
            "apply HLt in H; clear HEq; clear HLt; clear HGt.",
            "VernacExtend",
            "89ce4cbab422a0719fd976d1c3989929adbc40af"
        ],
        [
            "rewrite <- Pos.lt_nle in H.",
            "VernacExtend",
            "4c5c3f111f1011329788c52293fc2191b1c147b7"
        ],
        [
            "apply Pos.compare_lt_iff in H.",
            "VernacExtend",
            "dd60df3c67ddcccc743d3ee22c2d619f21710118"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply CompLt.",
            "VernacExtend",
            "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
        ],
        [
            "rewrite Pos.compare_lt_iff in H.",
            "VernacExtend",
            "41b42f7cb013df0d3af238dc3c65e4fb051377c7"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assert (H : Gt = Gt) by reflexivity.",
            "VernacExtend",
            "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
        ],
        [
            "apply HGt in H; clear HEq; clear HLt; clear HGt.",
            "VernacExtend",
            "2530496036163865e67f845b1d1d1c527d0f38b6"
        ],
        [
            "apply Pos.compare_gt_iff in H.",
            "VernacExtend",
            "bef001685a04eacd1b4bfa5ac54a906e47e8d115"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply CompGt.",
            "VernacExtend",
            "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
        ],
        [
            "rewrite Pos.compare_gt_iff in H.",
            "VernacExtend",
            "242fc55ac545b42d264eb5686cc8164b39528939"
        ],
        [
            "rewrite <- Pos.ltb_lt in H.",
            "VernacExtend",
            "8676b73a00a5021943e57fc330e45d8976dfc3ce"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compareST (cp1 cp2 : tST) := compareList (PosSort.sort (CPToList cp1)) (PosSort.sort (CPToList cp2)).",
            "VernacDefinition",
            "7a880a3ce3f5302b81302fb2ad7edf5fb41ae3eb"
        ],
        [
            "Lemma compare_spec : forall cp1 cp2, CompSpec eqST ltST cp1 cp2 (compareST cp1 cp2).",
            "VernacStartTheoremProof",
            "59f00c4ac76dfacdab3681f7a614fb51afdee0c9"
        ],
        [
            "intros cp1 cp2.",
            "VernacExtend",
            "166a89d6c3331c512a4229ef4948dfe3c287364c"
        ],
        [
            "unfold eqST, ltST, compareST.",
            "VernacExtend",
            "65e7c4a3eb5bb66e24a9d8a2b08776c05b27b6c8"
        ],
        [
            "apply compareListSpec.",
            "VernacExtend",
            "bb2abd831e55c5265fda2d4684c5293fd3c89e65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition STelt := tST.",
            "VernacDefinition",
            "5369c4d87dfd9f4f988222f60ce91451b47e7eb2"
        ],
        [
            "Definition STt := list tST.",
            "VernacDefinition",
            "3f3233497c3c03d2f12ac24907d8f4bde34aeb00"
        ],
        [
            "Definition STempty : STt := nil.",
            "VernacDefinition",
            "9534de94814579b8638b6f76cd382cfd943a844a"
        ],
        [
            "Lemma eqST_dec : forall x y, {eqST x y} + {~ eqST x y}.",
            "VernacStartTheoremProof",
            "7076d1bac92c996e429b2216da6257bc4cea3670"
        ],
        [
            "intros x y; case_eq (eqbST x y); intro HEq.",
            "VernacExtend",
            "f7cb354594302f248f24788444ba0d07cc1d60c8"
        ],
        [
            "apply eqbST_eqST in HEq; left; auto.",
            "VernacExtend",
            "3b4b7b877ee831edd803caeafd1e34b26bf03039"
        ],
        [
            "right; intro HEqST; apply eqbST_eqST in HEqST; rewrite HEq in *; discriminate.",
            "VernacExtend",
            "b0e1bff35b18c265550143b34fe82a2a15635d16"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition STadd (x : STelt) (s : STt) := cons x s.",
            "VernacDefinition",
            "b1fc447eb094984bfd7bf1e467ceedf1ab239022"
        ],
        [
            "Fixpoint STexists_ (f : STelt -> bool) (s : STt) := match s with | nil => false | hd :: tl => f hd || STexists_ f tl end.",
            "VernacFixpoint",
            "055c0a90348a6afad8a074d2f1058d250c4b0e30"
        ],
        [
            "Fixpoint STmem elt l := match l with | nil => false | hd :: tl => if eqST_dec hd elt then true else STmem elt tl end.",
            "VernacFixpoint",
            "c2e48e3767d859684df7a2173bae48a3be36fe51"
        ],
        [
            "Lemma STempty_b : forall y : STelt, STmem y STempty = false.",
            "VernacStartTheoremProof",
            "a284bcde52aa17a86ade8b326dbe32ae434f1784"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma STexists_mem_4 : forall f (s : STt), STexists_ f s = true -> exists x : STelt , STmem x s = true /\\ f x = true.",
            "VernacStartTheoremProof",
            "35202f80fb062f3cef0df8cf1264bd04cb0cd3eb"
        ],
        [
            "intros f s HEx; induction s; simpl in *; [discriminate|].",
            "VernacExtend",
            "babc8606a079933587e90e48d7e46c8341a4f491"
        ],
        [
            "case_eq (f a); intro Hfa; rewrite Hfa in *; simpl in *.",
            "VernacExtend",
            "53690f1d1dbbd1f4c03ea9ad53e6695ae51c7390"
        ],
        [
            "exists a; elim (eqST_dec a a); [intuition|intro H; exfalso; apply H; unfold eqST; apply eqListRefl].",
            "VernacExtend",
            "7d4ba70a99425921fb658d88e8dbf6ebecc92ba9"
        ],
        [
            "destruct (IHs HEx) as [x [Hmem Hfx]]; exists x.",
            "VernacExtend",
            "fb9b7023ab5de25deb5651fb0469b511ce5d812b"
        ],
        [
            "elim (eqST_dec a x); intro; intuition.",
            "VernacExtend",
            "a6998fd0907e628c0784688281f488a69323fbbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma STadd_iff : forall (s : STt) (x y : STelt), STmem y (STadd x s) = true <-> (eqST x y \\/ STmem y s = true).",
            "VernacStartTheoremProof",
            "e5e6f718e175ebf37bfcb5c95b1797dd34d13984"
        ],
        [
            "intros; simpl; elim (eqST_dec x y);intro;intuition.",
            "VernacExtend",
            "5db51beb4485b45ce821f301995ad878b7ea4232"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Set_of_tuple_of_positive.",
            "VernacEndSegment",
            "39843b21131be109170c5c3772040e1c14f08c7d"
        ]
    ],
    "proofs": [
        {
            "name": "lt_compat",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "apply S.lt_compat.",
                        "VernacExtend",
                        "77e4d10259d46e3b2295d7578008154857ef50ab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_strorder",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "apply S.lt_strorder.",
                        "VernacExtend",
                        "7889ae262ece38226c3e782781770ce1bb1d6249"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb_eq",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold eqb; unfold eq.",
                        "VernacExtend",
                        "e0b3a2426aeead8bd7ddc1e6915d8d12e6b36540"
                    ]
                },
                {
                    "command": [
                        "split; intro H.",
                        "VernacExtend",
                        "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H.",
                        "VernacExtend",
                        "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "split; apply Pos.eqb_eq; assumption.",
                        "VernacExtend",
                        "96fec2c0121274900081a38c038376c21fb8e313"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff.",
                        "VernacExtend",
                        "583d40e493f314492aad482eb70e9a25a38aae78"
                    ]
                },
                {
                    "command": [
                        "split; apply Pos.eqb_eq; assumption.",
                        "VernacExtend",
                        "96fec2c0121274900081a38c038376c21fb8e313"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_irrefl",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "assert (HIP : Irreflexive Pos.lt) by (apply StrictOrder_Irreflexive; assumption).",
                        "VernacExtend",
                        "94289971a1cacf07bd2d249ba495ac5e33324525"
                    ]
                },
                {
                    "command": [
                        "unfold Irreflexive in *.",
                        "VernacExtend",
                        "58d5e59538835f33f657d11250e4b3c5b33d7cf4"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in *.",
                        "VernacExtend",
                        "e7b3e3ec59e716a867ced036e52b951c2fc57497"
                    ]
                },
                {
                    "command": [
                        "unfold complement in *.",
                        "VernacExtend",
                        "8ae2dc974ecae948767a13201cdd430af516e09b"
                    ]
                },
                {
                    "command": [
                        "intro x.",
                        "VernacExtend",
                        "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "assert (HEq : Pos.eqb (fstpp(x)) (fstpp(x)) = true) by (apply Pos.eqb_eq; intuition).",
                        "VernacExtend",
                        "c35595b1cdbd5789853f8939ac98697009105cb1"
                    ]
                },
                {
                    "command": [
                        "rewrite HEq.",
                        "VernacExtend",
                        "24732cb3fa2a4a9a1b7d65c11c2b06d564cede6d"
                    ]
                },
                {
                    "command": [
                        "apply HIP.",
                        "VernacExtend",
                        "d8917130243c494e66b039d564f436db569f5a22"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_antiref",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "assert (HIL : Irreflexive lt) by (apply lt_irrefl).",
                        "VernacExtend",
                        "1284736a879575e0fdb142cc717ede271449f360"
                    ]
                },
                {
                    "command": [
                        "unfold Irreflexive in *.",
                        "VernacExtend",
                        "58d5e59538835f33f657d11250e4b3c5b33d7cf4"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in *.",
                        "VernacExtend",
                        "e7b3e3ec59e716a867ced036e52b951c2fc57497"
                    ]
                },
                {
                    "command": [
                        "unfold complement in *.",
                        "VernacExtend",
                        "8ae2dc974ecae948767a13201cdd430af516e09b"
                    ]
                },
                {
                    "command": [
                        "intros x H.",
                        "VernacExtend",
                        "a0cd74b85812810ce5a78a540bad98f664bd4842"
                    ]
                },
                {
                    "command": [
                        "apply HIL with x.",
                        "VernacExtend",
                        "ee75e83ed5942cd3ed93a706bac7dc08a758be84"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_trans",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "assert (HTP : Transitive Pos.lt) by (apply StrictOrder_Transitive; assumption).",
                        "VernacExtend",
                        "8a94041bc4bfe5f9d6fb62fb05f99571b36b79d3"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in *.",
                        "VernacExtend",
                        "60d49b6d9ab1380eb95b516d1c7d26e1317b596f"
                    ]
                },
                {
                    "command": [
                        "intros x y z.",
                        "VernacExtend",
                        "8357c7ce661033f932c65582aab008de3b5d8530"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (fstpp(x)) (fstpp(y))).",
                        "VernacExtend",
                        "82b450a9692a69857dcc5e467a2db75cbae6e6ea"
                    ]
                },
                {
                    "command": [
                        "intro HEqXY.",
                        "VernacExtend",
                        "36eec1dcfea2b6c7b9dc9d767354329b5407bbd0"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (fstpp(y)) (fstpp(z))).",
                        "VernacExtend",
                        "120436db7e255aff42ada4fecdc0c5f901aa04c4"
                    ]
                },
                {
                    "command": [
                        "intro HEqYZ.",
                        "VernacExtend",
                        "1f8d9ea2ab401320cbf9664649adb5a10b604a13"
                    ]
                },
                {
                    "command": [
                        "assert (HEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = true) by (apply Pos.eqb_eq in HEqXY; rewrite HEqXY; assumption).",
                        "VernacExtend",
                        "4d74858abb3376a84eafd5f899da1ee77310a1b6"
                    ]
                },
                {
                    "command": [
                        "rewrite HEqXZ.",
                        "VernacExtend",
                        "542a6f635f95892015263eaf7465fe4c6a00e44f"
                    ]
                },
                {
                    "command": [
                        "apply HTP.",
                        "VernacExtend",
                        "09cbeddfdbb6c506f8094c8001f30f6aac2e6850"
                    ]
                },
                {
                    "command": [
                        "intro HNEqYZ.",
                        "VernacExtend",
                        "9cf6289a425ddafe4a04aa862bbd81fb0e83968e"
                    ]
                },
                {
                    "command": [
                        "assert (HNEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = false) by (apply Pos.eqb_eq in HEqXY; rewrite HEqXY; assumption).",
                        "VernacExtend",
                        "ce5db946c312921d28026b976306c6471f8cc971"
                    ]
                },
                {
                    "command": [
                        "rewrite HNEqXZ.",
                        "VernacExtend",
                        "3c0d5de1051d5358e3bef5179b0046fdd1a3fba1"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HEqXY; rewrite HEqXY.",
                        "VernacExtend",
                        "a59eb1292a25c609bc038e912c3a7490d5eaf665"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro HNEqXY.",
                        "VernacExtend",
                        "ee3bf31a86e472120ee160f123be666246762ca5"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (fstpp(y)) (fstpp(z))).",
                        "VernacExtend",
                        "120436db7e255aff42ada4fecdc0c5f901aa04c4"
                    ]
                },
                {
                    "command": [
                        "intro HEqYZ.",
                        "VernacExtend",
                        "1f8d9ea2ab401320cbf9664649adb5a10b604a13"
                    ]
                },
                {
                    "command": [
                        "assert (HNEqXZ : Pos.eqb (fstpp(x)) (fstpp(z)) = false) by (apply Pos.eqb_eq in HEqYZ; rewrite <- HEqYZ; assumption).",
                        "VernacExtend",
                        "0193a8d2ec2155f3426ff4d6a2d558ba18bd9ee4"
                    ]
                },
                {
                    "command": [
                        "rewrite HNEqXZ.",
                        "VernacExtend",
                        "3c0d5de1051d5358e3bef5179b0046fdd1a3fba1"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HEqYZ; rewrite HEqYZ.",
                        "VernacExtend",
                        "10b3ebda60068d2d75af3988397ebc8db36d5300"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro HNEqYZ.",
                        "VernacExtend",
                        "9cf6289a425ddafe4a04aa862bbd81fb0e83968e"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (fstpp(x)) (fstpp(z))).",
                        "VernacExtend",
                        "dd5a97c28043df8a0409fb01c44a58e8d3344df9"
                    ]
                },
                {
                    "command": [
                        "intro HEqXZ.",
                        "VernacExtend",
                        "db6ce38b4457a6b00d44e466a5d6fda54fffdf51"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (HLtXZ : Pos.ltb (fstpp(x)) (fstpp(z)) = true) by (apply Pos.ltb_lt; apply HTP with (fstpp(y)); assumption).",
                        "VernacExtend",
                        "158f0546799de13e4cf301c05753297828f3e0e9"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HEqXZ; rewrite HEqXZ in HLtXZ.",
                        "VernacExtend",
                        "1c0656373ad5a1cc3cebb6e32faad13175390528"
                    ]
                },
                {
                    "command": [
                        "assert (HIP : Irreflexive Pos.lt) by (apply StrictOrder_Irreflexive; assumption).",
                        "VernacExtend",
                        "94289971a1cacf07bd2d249ba495ac5e33324525"
                    ]
                },
                {
                    "command": [
                        "unfold Irreflexive in HIP.",
                        "VernacExtend",
                        "59d74634bd66e1ee992deea2b6a498082fc9afc9"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in HIP.",
                        "VernacExtend",
                        "78a3c88e2aaa1d4a152959011eed549198a91f76"
                    ]
                },
                {
                    "command": [
                        "unfold complement in HIP.",
                        "VernacExtend",
                        "6de0f791a5ea0a4a0fbe834096fb7b3769fd8882"
                    ]
                },
                {
                    "command": [
                        "exfalso.",
                        "VernacExtend",
                        "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
                    ]
                },
                {
                    "command": [
                        "apply HIP with (fstpp(z)).",
                        "VernacExtend",
                        "2952dcc8c9daa49e5db8df4ce759fd53da471aca"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLtXZ.",
                        "VernacExtend",
                        "459e1fd3794b39547b6115f0df417236d8b94a43"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro HNEqXZ.",
                        "VernacExtend",
                        "b2bbb45b73cda0e8774ae2cc72c380fd99d04af1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply HTP with (fstpp(y)); assumption.",
                        "VernacExtend",
                        "146e115779066abd36d69d32e3d4462f389513fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_spec",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "intros t1 t2.",
                        "VernacExtend",
                        "da31e6cfefad65215b5af41ad892e78e086e4934"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (fstpp(t1)) (fstpp(t2))); intro HF.",
                        "VernacExtend",
                        "cf63b01ee780190c747b9a255a21ac9b92d436d2"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HF.",
                        "VernacExtend",
                        "7c3de4392419c773bebc9fba8c4059264816e8dd"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.eqb (sndpp(t1)) (sndpp(t2))); intro HS.",
                        "VernacExtend",
                        "241b313feefdc4fee3b41d9e8e651d802178ad02"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HS.",
                        "VernacExtend",
                        "52c7250e223dff5020903621616faede6698ff3c"
                    ]
                },
                {
                    "command": [
                        "unfold CompSpec.",
                        "VernacExtend",
                        "1862e883863de213f3a419256ad542c806fd8414"
                    ]
                },
                {
                    "command": [
                        "assert (HC : compare t1 t2 = Eq).",
                        "VernacExtend",
                        "875474dcda1dc186d4b330dc33205109afc976e9"
                    ]
                },
                {
                    "command": [
                        "unfold compare.",
                        "VernacExtend",
                        "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
                    ]
                },
                {
                    "command": [
                        "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
                        "VernacExtend",
                        "8911b7de84788cd3e066da94bd911848a5d33b82"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_cont_refl.",
                        "VernacExtend",
                        "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
                    ]
                },
                {
                    "command": [
                        "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Eq).",
                        "VernacExtend",
                        "186bcf8b496e1d6f9e48050817fc378a0cf8ca79"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "rewrite HS.",
                        "VernacExtend",
                        "c5a77025a085207e9c55935a53d7360da4e8e30e"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_cont_refl.",
                        "VernacExtend",
                        "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
                    ]
                },
                {
                    "command": [
                        "rewrite HCF; rewrite HCS.",
                        "VernacExtend",
                        "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite HC.",
                        "VernacExtend",
                        "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
                    ]
                },
                {
                    "command": [
                        "apply CompEq.",
                        "VernacExtend",
                        "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
                    ]
                },
                {
                    "command": [
                        "unfold eq.",
                        "VernacExtend",
                        "933b6273fd52e184377d2b6af7fe95b080d1399c"
                    ]
                },
                {
                    "command": [
                        "rewrite HF; rewrite HS; split; intuition.",
                        "VernacExtend",
                        "99ddc46cdff35b1225d723474f4917b66be16eff"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.ltb (sndpp(t1)) (sndpp(t2))); intro HLS.",
                        "VernacExtend",
                        "4e11b1fa3205783ea9e376ecf30cba108e4cd1ff"
                    ]
                },
                {
                    "command": [
                        "assert (HC : compare t1 t2 = Lt).",
                        "VernacExtend",
                        "7ebc77970ab1b240214c83a3c06cb87d5fbbebfc"
                    ]
                },
                {
                    "command": [
                        "unfold compare.",
                        "VernacExtend",
                        "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
                    ]
                },
                {
                    "command": [
                        "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
                        "VernacExtend",
                        "8911b7de84788cd3e066da94bd911848a5d33b82"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_cont_refl.",
                        "VernacExtend",
                        "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
                    ]
                },
                {
                    "command": [
                        "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Lt).",
                        "VernacExtend",
                        "b36655f02959b72fb3dea123aa345a02c3ae48b2"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLS.",
                        "VernacExtend",
                        "1152d72ca0281554dfedd9ba6cb3eabfa2faa867"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.nat_of_P_lt_Lt_compare_complement_morphism.",
                        "VernacExtend",
                        "f7bab32652b006059f44e82de52999d752577098"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.Pos2Nat.inj_lt.",
                        "VernacExtend",
                        "1cfe164768e0ab944755d65964da9a8f288187ac"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite HCF; rewrite HCS.",
                        "VernacExtend",
                        "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite HC.",
                        "VernacExtend",
                        "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
                    ]
                },
                {
                    "command": [
                        "apply CompLt.",
                        "VernacExtend",
                        "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HF.",
                        "VernacExtend",
                        "7c3de4392419c773bebc9fba8c4059264816e8dd"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLS.",
                        "VernacExtend",
                        "1152d72ca0281554dfedd9ba6cb3eabfa2faa867"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (HLS2 : Pos.ltb (sndpp(t2)) (sndpp(t1)) = true).",
                        "VernacExtend",
                        "6bb8dcee9d7b87e9206755ad59deac6508ded9a0"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_nlt in HLS.",
                        "VernacExtend",
                        "b81b14e326111ba131a2571ad8a44eb54c0411b4"
                    ]
                },
                {
                    "command": [
                        "apply Pos.le_nlt in HLS.",
                        "VernacExtend",
                        "136250c63fe88458cef5f320d6b8f4bdae4250e6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases in HLS.",
                        "VernacExtend",
                        "917911a3e2f6347d2aba6133cc558e0efd9c5e18"
                    ]
                },
                {
                    "command": [
                        "elim HLS; intro HLS2.",
                        "VernacExtend",
                        "8e81ae41e668b2c218a4264de3509c477a486d62"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt.",
                        "VernacExtend",
                        "04aedfb379545b547c7ea99497939abb3b7c7d50"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_neq in HS.",
                        "VernacExtend",
                        "e2ac28530d87b4e72e274eaeec6ba9ea8db90173"
                    ]
                },
                {
                    "command": [
                        "rewrite HLS2 in HS.",
                        "VernacExtend",
                        "82a9351bbc83cffc3a25760956b86cd211b143d1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (HC : compare t1 t2 = Gt).",
                        "VernacExtend",
                        "a75433855b2d6bbea001cea146820fff1ccdd454"
                    ]
                },
                {
                    "command": [
                        "unfold compare.",
                        "VernacExtend",
                        "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
                    ]
                },
                {
                    "command": [
                        "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Eq).",
                        "VernacExtend",
                        "8911b7de84788cd3e066da94bd911848a5d33b82"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_cont_refl.",
                        "VernacExtend",
                        "ac0778b4572327d03cc7058238ee9aa54bc5ac8b"
                    ]
                },
                {
                    "command": [
                        "assert (HCS : Pos.compare (sndpp(t1)) (sndpp(t2)) = Gt).",
                        "VernacExtend",
                        "8fa233457fe8c7814b9ecd88cedf2d1261929087"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLS2.",
                        "VernacExtend",
                        "23688ab466fab7f27b3582c0b1ef866437851167"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.nat_of_P_gt_Gt_compare_complement_morphism.",
                        "VernacExtend",
                        "40b1228980b311f335affe7944ffae26e3587b0b"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.Pos2Nat.inj_gt.",
                        "VernacExtend",
                        "40595105bd9dcb9dc822810d287d0ed22af4b0a8"
                    ]
                },
                {
                    "command": [
                        "apply Pos.gt_lt_iff.",
                        "VernacExtend",
                        "41b7050e48df1188cbf6417962504a8c1c53e125"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite HCF; rewrite HCS.",
                        "VernacExtend",
                        "bd350bb530cb50c86ce2fdc07d5ed8aa1af978f9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite HC.",
                        "VernacExtend",
                        "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
                    ]
                },
                {
                    "command": [
                        "apply CompGt.",
                        "VernacExtend",
                        "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_eq in HF.",
                        "VernacExtend",
                        "7c3de4392419c773bebc9fba8c4059264816e8dd"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.eqb_sym in HF.",
                        "VernacExtend",
                        "c4848a0bf4f05111026ccdd11ec194bdea080afd"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLS2.",
                        "VernacExtend",
                        "23688ab466fab7f27b3582c0b1ef866437851167"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "case_eq (Pos.ltb (fstpp(t1)) (fstpp(t2))); intro HLF.",
                        "VernacExtend",
                        "4fc9b9aff687648599705506c37ae00b32980bd6"
                    ]
                },
                {
                    "command": [
                        "assert (HC : compare t1 t2 = Lt).",
                        "VernacExtend",
                        "7ebc77970ab1b240214c83a3c06cb87d5fbbebfc"
                    ]
                },
                {
                    "command": [
                        "unfold compare.",
                        "VernacExtend",
                        "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
                    ]
                },
                {
                    "command": [
                        "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Lt).",
                        "VernacExtend",
                        "a38c7b5428f5ec364d2d4e273db946caba442b4c"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLF.",
                        "VernacExtend",
                        "f950bd581a1f601e04a6292d1b67ba8dceb70412"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.nat_of_P_lt_Lt_compare_complement_morphism.",
                        "VernacExtend",
                        "f7bab32652b006059f44e82de52999d752577098"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.Pos2Nat.inj_lt.",
                        "VernacExtend",
                        "1cfe164768e0ab944755d65964da9a8f288187ac"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite HCF.",
                        "VernacExtend",
                        "6d32d734d475f83345858cdbb1777c0c8715d080"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite HC.",
                        "VernacExtend",
                        "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
                    ]
                },
                {
                    "command": [
                        "apply CompLt.",
                        "VernacExtend",
                        "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLF.",
                        "VernacExtend",
                        "f950bd581a1f601e04a6292d1b67ba8dceb70412"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (HLF2 : Pos.ltb (fstpp(t2)) (fstpp(t1)) = true).",
                        "VernacExtend",
                        "300f7da396aec8822cd84d118fb5a8fdd27f0ef2"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_nlt in HLF.",
                        "VernacExtend",
                        "a1ccb24662eaf78451f24f710870d943354a3e89"
                    ]
                },
                {
                    "command": [
                        "apply Pos.le_nlt in HLF.",
                        "VernacExtend",
                        "be4717193abd6b04841b4c971b2c684133eb95b6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases in HLF.",
                        "VernacExtend",
                        "bf7f3605951eed36b7ae613abc0498e365ac27e5"
                    ]
                },
                {
                    "command": [
                        "elim HLF; intro HLF2.",
                        "VernacExtend",
                        "547027b632275ed41b9fe343abc2f0f4a1a67071"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt.",
                        "VernacExtend",
                        "04aedfb379545b547c7ea99497939abb3b7c7d50"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Pos.eqb_neq in HF.",
                        "VernacExtend",
                        "5d381a6452982e2022341d136ef78bfb67862a44"
                    ]
                },
                {
                    "command": [
                        "rewrite HLF2 in HF.",
                        "VernacExtend",
                        "36a290a66d3248349dfcbc42db95c87719716376"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (HC : compare t1 t2 = Gt).",
                        "VernacExtend",
                        "a75433855b2d6bbea001cea146820fff1ccdd454"
                    ]
                },
                {
                    "command": [
                        "unfold compare.",
                        "VernacExtend",
                        "b5d4704dfbc3e5e9441ee8f2b7957e022b2209cb"
                    ]
                },
                {
                    "command": [
                        "assert (HCF : Pos.compare (fstpp(t1)) (fstpp(t2)) = Gt).",
                        "VernacExtend",
                        "541f09eadb4ea643bca6ef76d6a226800f622295"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLF2.",
                        "VernacExtend",
                        "01fced6f2aa239bab87a5067b919b84827363e2f"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.nat_of_P_gt_Gt_compare_complement_morphism.",
                        "VernacExtend",
                        "40b1228980b311f335affe7944ffae26e3587b0b"
                    ]
                },
                {
                    "command": [
                        "apply Pnat.Pos2Nat.inj_gt.",
                        "VernacExtend",
                        "40595105bd9dcb9dc822810d287d0ed22af4b0a8"
                    ]
                },
                {
                    "command": [
                        "apply Pos.gt_lt_iff.",
                        "VernacExtend",
                        "41b7050e48df1188cbf6417962504a8c1c53e125"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite HCF.",
                        "VernacExtend",
                        "6d32d734d475f83345858cdbb1777c0c8715d080"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "rewrite HC.",
                        "VernacExtend",
                        "6d6b620e87dd22854838d4517b9b78283f2fcdc3"
                    ]
                },
                {
                    "command": [
                        "apply CompGt.",
                        "VernacExtend",
                        "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
                    ]
                },
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.eqb_sym in HF.",
                        "VernacExtend",
                        "c4848a0bf4f05111026ccdd11ec194bdea080afd"
                    ]
                },
                {
                    "command": [
                        "rewrite HF.",
                        "VernacExtend",
                        "888cec1c97071aa71bbf6d88077c811dd7347427"
                    ]
                },
                {
                    "command": [
                        "apply Pos.ltb_lt in HLF2.",
                        "VernacExtend",
                        "01fced6f2aa239bab87a5067b919b84827363e2f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leb_total",
            "line_nb": 285,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite Pos.leb_le).",
                        "VernacExtend",
                        "e4800718f80a7edf38e772c11981b487f6ba0a36"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite Pos.le_lteq).",
                        "VernacExtend",
                        "b9c35aa7d49c21b58eb5fbdefecd6fc6838c60c1"
                    ]
                },
                {
                    "command": [
                        "assert (HElim := Pos.lt_total p1 p2).",
                        "VernacExtend",
                        "abcdcee531189a234b7d99f0199f12151814ba1c"
                    ]
                },
                {
                    "command": [
                        "elim HElim; clear HElim; intro HElim.",
                        "VernacExtend",
                        "588d1e900b6f6f32fb617753805c9df2cf5623a9"
                    ]
                },
                {
                    "command": [
                        "left; left; assumption.",
                        "VernacExtend",
                        "b1e1169c3e7a6087a38d3c04aee71bbfc2f6f3ba"
                    ]
                },
                {
                    "command": [
                        "elim HElim; clear HElim; intro HElim.",
                        "VernacExtend",
                        "588d1e900b6f6f32fb617753805c9df2cf5623a9"
                    ]
                },
                {
                    "command": [
                        "left; right; assumption.",
                        "VernacExtend",
                        "7618911eed6cafc80d81e243ba068a3252f25f29"
                    ]
                },
                {
                    "command": [
                        "right; left; assumption.",
                        "VernacExtend",
                        "9b218babeec3d27c28f2f8b4ca8c9c7cef0c4ac1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leb_dec",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim Pos.eq_dec with p1 p2.",
                        "VernacExtend",
                        "fe1a647766b49251b53916f553e4f6cab11ebfb1"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "left; apply POrderedType.Positive_as_DT.leb_refl.",
                        "VernacExtend",
                        "4941bad5b601a3ef3f0392c23a4f903ece44ba52"
                    ]
                },
                {
                    "command": [
                        "intro HNeq.",
                        "VernacExtend",
                        "d634bd749923791ba7351fcd579d6d6994942960"
                    ]
                },
                {
                    "command": [
                        "elim leb_total with p1 p2; intro Hp1p2.",
                        "VernacExtend",
                        "069fab1114470cdaff814eecc74f8b0267e244c5"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "rewrite Positive_as_DT.leb_gt.",
                        "VernacExtend",
                        "41d06096305c5eb1574a1064a7d718f38c9e3286"
                    ]
                },
                {
                    "command": [
                        "rewrite Positive_as_DT.leb_le in Hp1p2.",
                        "VernacExtend",
                        "85701a5d9a7a0acaed1989dff3e30c6254403dfb"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.lt_eq_cases in Hp1p2.",
                        "VernacExtend",
                        "281c7e4ede6250933d9df0abd2b89b10890a35c2"
                    ]
                },
                {
                    "command": [
                        "elim Hp1p2; intro.",
                        "VernacExtend",
                        "be551e635cc5a854a6112fb40617666558a61869"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "subst; intuition.",
                        "VernacExtend",
                        "996f8c91c6df59eb32d913a2132e15c6011e125f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OCPALengthOK",
            "line_nb": 315,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "unfold OCPAux.",
                        "VernacExtend",
                        "4760fab52abea3724b245d762a774773fc0ed5fa"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm := Permuted_sort (CPToList cp)).",
                        "VernacExtend",
                        "eaae0a118e6bceffe82fae55d552cde6e057f068"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_length in HPerm.",
                        "VernacExtend",
                        "b64d6044affe1b882fb4127861ec4157989de2c6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- HPerm.",
                        "VernacExtend",
                        "75388d3660804fab0d5cb264f5a39a1736c12f02"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym.",
                        "VernacExtend",
                        "313410cb7bcb68dc243125f00e91764f51d94be6"
                    ]
                },
                {
                    "command": [
                        "apply lengthOfCPToList.",
                        "VernacExtend",
                        "3203b73ffd30a9e7cf2cd8011964e8f0c7f24563"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "OCPSortedTl",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "intros l HSorted.",
                        "VernacExtend",
                        "8afe2abcca7265abf8e1e3573c125051e74087e0"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl; apply SSorted_nil.",
                        "VernacExtend",
                        "c2d20a5e2880eac4c9d6b4f9c6c809b7cd46ed66"
                    ]
                },
                {
                    "command": [
                        "clear IHl.",
                        "VernacExtend",
                        "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
                    ]
                },
                {
                    "command": [
                        "simpl; apply StronglySorted_inv in HSorted; destruct HSorted as [HSorted Hhd].",
                        "VernacExtend",
                        "3fad0f036c2fb0491de44c5c1008ea4cef5d5b30"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PermSorted",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "intro l; induction l.",
                        "VernacExtend",
                        "4a886e80d631695693a238edb191c72bc84bf91f"
                    ]
                },
                {
                    "command": [
                        "intro l'; induction l'.",
                        "VernacExtend",
                        "22aaf360ac72bf9b949d4bfd61a5737585a7ee76"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intro HPerm.",
                        "VernacExtend",
                        "f1039a9f2a54c9b2611b8553e6f47f70f0ecfed2"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_nil_cons in HPerm.",
                        "VernacExtend",
                        "5b8421d3b9a4a0f217422be739229e2b83e341c9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro l'; induction l'.",
                        "VernacExtend",
                        "22aaf360ac72bf9b949d4bfd61a5737585a7ee76"
                    ]
                },
                {
                    "command": [
                        "intro HPerm.",
                        "VernacExtend",
                        "f1039a9f2a54c9b2611b8553e6f47f70f0ecfed2"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in HPerm.",
                        "VernacExtend",
                        "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_nil_cons in HPerm.",
                        "VernacExtend",
                        "5b8421d3b9a4a0f217422be739229e2b83e341c9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intros HPerm Hl Hl'.",
                        "VernacExtend",
                        "7c7be6dab279068ffdd493456dec9aaeb10ba539"
                    ]
                },
                {
                    "command": [
                        "assert (HIna' : In a (a :: l)) by (apply in_eq).",
                        "VernacExtend",
                        "55afec4dc45de598aa1816a0e0ede4b30e051a77"
                    ]
                },
                {
                    "command": [
                        "assert (HIna : In a (a0 :: l')) by (apply Permutation.Permutation_in with (a :: l); assumption).",
                        "VernacExtend",
                        "8cf06b5fa4f6a443f4e51a28f09f8ee75d8aed1c"
                    ]
                },
                {
                    "command": [
                        "assert (HIna0' : In a0 (a0 :: l')) by (apply in_eq).",
                        "VernacExtend",
                        "d8741cf45cc95e4dc366ac47a6adf8dce0fe3bf6"
                    ]
                },
                {
                    "command": [
                        "assert (HIna0 : In a0 (a :: l)) by (apply Permutation.Permutation_in with (a0 :: l'); apply Permutation.Permutation_sym in HPerm;assumption).",
                        "VernacExtend",
                        "bdfc4990ae88cc58dfe897b56082abab1c37145b"
                    ]
                },
                {
                    "command": [
                        "clear HIna'; clear HIna0'; apply in_inv in HIna; apply in_inv in HIna0.",
                        "VernacExtend",
                        "d55bdbf350588637a430f0e1d923f68d9c701a81"
                    ]
                },
                {
                    "command": [
                        "elim HIna; clear HIna; intro HIna; elim HIna0; clear HIna0; intro HIna0; try (rewrite HIna in *); try (rewrite <- HIna0 in *).",
                        "VernacExtend",
                        "a53246243b8c06a1084074955edf2c689bc42874"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
                        "VernacExtend",
                        "39def801bfa5737aed003b8df03c4b091bc3d2b7"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
                        "VernacExtend",
                        "f1302511f7d9cea49745921c3b6e914482deaa99"
                    ]
                },
                {
                    "command": [
                        "apply IHl in HPerm'; try assumption.",
                        "VernacExtend",
                        "9d75f7d975d8c44c20ec49adef554f6019da98cb"
                    ]
                },
                {
                    "command": [
                        "rewrite HPerm'; reflexivity.",
                        "VernacExtend",
                        "7f5cd149485eb043961f440c44af9192b1f68822"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
                        "VernacExtend",
                        "39def801bfa5737aed003b8df03c4b091bc3d2b7"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
                        "VernacExtend",
                        "f1302511f7d9cea49745921c3b6e914482deaa99"
                    ]
                },
                {
                    "command": [
                        "apply IHl in HPerm'; try assumption.",
                        "VernacExtend",
                        "9d75f7d975d8c44c20ec49adef554f6019da98cb"
                    ]
                },
                {
                    "command": [
                        "rewrite HPerm'; reflexivity.",
                        "VernacExtend",
                        "7f5cd149485eb043961f440c44af9192b1f68822"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
                        "VernacExtend",
                        "39def801bfa5737aed003b8df03c4b091bc3d2b7"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
                        "VernacExtend",
                        "f1302511f7d9cea49745921c3b6e914482deaa99"
                    ]
                },
                {
                    "command": [
                        "apply IHl in HPerm'; try assumption.",
                        "VernacExtend",
                        "9d75f7d975d8c44c20ec49adef554f6019da98cb"
                    ]
                },
                {
                    "command": [
                        "rewrite HPerm'; reflexivity.",
                        "VernacExtend",
                        "7f5cd149485eb043961f440c44af9192b1f68822"
                    ]
                },
                {
                    "command": [
                        "assert (Hle1 := Hl); assert (Hle2 := Hl').",
                        "VernacExtend",
                        "228be241a2899b9901cc119820cc8a65aed7e797"
                    ]
                },
                {
                    "command": [
                        "apply StronglySorted_inv in Hle1; apply StronglySorted_inv in Hle2.",
                        "VernacExtend",
                        "2a4bdd1de525fef454ae1f62364058174db75fe4"
                    ]
                },
                {
                    "command": [
                        "destruct Hle1 as [Hclear Hle1]; clear Hclear; destruct Hle2 as [Hclear Hle2]; clear Hclear.",
                        "VernacExtend",
                        "b1e91a013cfbd98e4f48ab4705de7f22bf9d3557"
                    ]
                },
                {
                    "command": [
                        "assert (Haa0 : (forall x, In x l -> is_true (Pos.leb a x))) by (apply Forall_forall; assumption).",
                        "VernacExtend",
                        "811ba5dcc91d9080ee420f5334f1f688415e317b"
                    ]
                },
                {
                    "command": [
                        "assert (Ha0a : (forall x, In x l' -> is_true (Pos.leb a0 x))) by (apply Forall_forall; assumption).",
                        "VernacExtend",
                        "569f95a768d498ffc0dcf6b52e44862af22250aa"
                    ]
                },
                {
                    "command": [
                        "apply Ha0a in HIna.",
                        "VernacExtend",
                        "c7ae02bc462eb909cdc3077e681aacd7d259476b"
                    ]
                },
                {
                    "command": [
                        "apply Haa0 in HIna0.",
                        "VernacExtend",
                        "3f2d006ff6236307cb9f60de1029b086603a6c50"
                    ]
                },
                {
                    "command": [
                        "unfold is_true in *.",
                        "VernacExtend",
                        "0fbeb2fe432b1ebe391a9ec89fd2bb2ea793048a"
                    ]
                },
                {
                    "command": [
                        "apply Pos.leb_le in HIna; apply Pos.leb_le in HIna0.",
                        "VernacExtend",
                        "dbe7777a222ef1fc167da78eaf46d341a241cb95"
                    ]
                },
                {
                    "command": [
                        "assert (H := Pos.le_antisym a0 a HIna HIna0).",
                        "VernacExtend",
                        "777b0910fa3453f6144f308fcc803d118be271a0"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm' : Permutation.Permutation l l') by (apply Permutation.Permutation_app_inv_l with (a :: nil); simpl; assumption).",
                        "VernacExtend",
                        "39def801bfa5737aed003b8df03c4b091bc3d2b7"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedTl in Hl; apply OCPSortedTl in Hl'.",
                        "VernacExtend",
                        "f1302511f7d9cea49745921c3b6e914482deaa99"
                    ]
                },
                {
                    "command": [
                        "apply IHl in HPerm'; try assumption.",
                        "VernacExtend",
                        "9d75f7d975d8c44c20ec49adef554f6019da98cb"
                    ]
                },
                {
                    "command": [
                        "rewrite HPerm'; reflexivity.",
                        "VernacExtend",
                        "7f5cd149485eb043961f440c44af9192b1f68822"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OCP",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "assert (H := OCPALengthOK cp).",
                        "VernacExtend",
                        "10761c17ab9bc7d20449ee9473e8e029c8a80edd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "exact (ListToCP (OCPAux cp) (fst cp)).",
                        "VernacExtend",
                        "7b444bf06fd47f62ec12ed65a1bffc22b76d0181"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "OCPSortedAux",
            "line_nb": 384,
            "steps": [
                {
                    "command": [
                        "intros cp.",
                        "VernacExtend",
                        "2a808c102dbb769625f8ae61cd0f32776c84a737"
                    ]
                },
                {
                    "command": [
                        "unfold OCP.",
                        "VernacExtend",
                        "b21a644795adb364fa79c9d80e18446706bfc834"
                    ]
                },
                {
                    "command": [
                        "unfold OCPAux.",
                        "VernacExtend",
                        "4760fab52abea3724b245d762a774773fc0ed5fa"
                    ]
                },
                {
                    "command": [
                        "elim_eq_rect; simpl.",
                        "VernacExtend",
                        "1f7073b55f3c0088d97c377e51761c726c3af29b"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLOK.",
                        "VernacExtend",
                        "763b475ffa025f720c8293f436cf3d3b53534d26"
                    ]
                },
                {
                    "command": [
                        "apply StronglySorted_sort.",
                        "VernacExtend",
                        "f63fd7d1df1b4e0f5867d93e7cdff45a45e13bdb"
                    ]
                },
                {
                    "command": [
                        "intros x1 x2 x3.",
                        "VernacExtend",
                        "358bd6118c012d274998a226f9b9f64b491a85dd"
                    ]
                },
                {
                    "command": [
                        "unfold is_true.",
                        "VernacExtend",
                        "73e58dc4b9293f0e30cceb725066cf6dc51c855f"
                    ]
                },
                {
                    "command": [
                        "intros Hx1x2 Hx2x3.",
                        "VernacExtend",
                        "4d6d8709f6c3cd2a87b3363496ff6fc875ade5b1"
                    ]
                },
                {
                    "command": [
                        "apply Pos.leb_le in Hx1x2.",
                        "VernacExtend",
                        "03ee9cfb48425da42e17141408beede934fa0426"
                    ]
                },
                {
                    "command": [
                        "apply Pos.leb_le in Hx2x3.",
                        "VernacExtend",
                        "774b9fcc16ee8e3918f6b3986536e5a717fa2085"
                    ]
                },
                {
                    "command": [
                        "apply Pos.leb_le.",
                        "VernacExtend",
                        "5b45e61113aed75a6efd98f6ec3c4f3b55da1d36"
                    ]
                },
                {
                    "command": [
                        "transitivity x2; assumption.",
                        "VernacExtend",
                        "f813080711e66e82a68d5ae596c24f968a50be5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OCPPerm",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "unfold OCP.",
                        "VernacExtend",
                        "b21a644795adb364fa79c9d80e18446706bfc834"
                    ]
                },
                {
                    "command": [
                        "unfold OCPAux.",
                        "VernacExtend",
                        "4760fab52abea3724b245d762a774773fc0ed5fa"
                    ]
                },
                {
                    "command": [
                        "elim_eq_rect; simpl.",
                        "VernacExtend",
                        "1f7073b55f3c0088d97c377e51761c726c3af29b"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLOK.",
                        "VernacExtend",
                        "763b475ffa025f720c8293f436cf3d3b53534d26"
                    ]
                },
                {
                    "command": [
                        "apply Permuted_sort.",
                        "VernacExtend",
                        "a7637e22391526f3baa256b780965faf7bf3f8f9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLOCPTlOK",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "intros cp Hhd.",
                        "VernacExtend",
                        "ff71311afeaad4f490779d348e5b0c08453bc11d"
                    ]
                },
                {
                    "command": [
                        "apply PermSorted.",
                        "VernacExtend",
                        "597d4f901e30bcbcfd7c64209f862551fc8a5494"
                    ]
                },
                {
                    "command": [
                        "assert (H := OCPPerm cp).",
                        "VernacExtend",
                        "9f549dd1584d2988a62f9ff814eb73bd534961e2"
                    ]
                },
                {
                    "command": [
                        "rewrite CPToListOK in H.",
                        "VernacExtend",
                        "ec8c1a3d1bef8e7650344bdd06694894bce89d98"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in H.",
                        "VernacExtend",
                        "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
                    ]
                },
                {
                    "command": [
                        "rewrite CPToListOK in H.",
                        "VernacExtend",
                        "ec8c1a3d1bef8e7650344bdd06694894bce89d98"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hhd in H.",
                        "VernacExtend",
                        "9d46cb4bef318bfc1d659572bc463b5760fab0a2"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_app_inv_l with ((headCP cp) :: nil).",
                        "VernacExtend",
                        "83589e55516d66d352f9095610bf60a94867df0d"
                    ]
                },
                {
                    "command": [
                        "assert (H' : (headCP cp :: nil) ++ CPToList (OCP (tailCP cp)) = headCP cp :: (CPToList (OCP (tailCP cp)))) by (simpl; reflexivity); rewrite H'; clear H'.",
                        "VernacExtend",
                        "8a8bce162cc1be5f1d5c419ca73643df3e2f1757"
                    ]
                },
                {
                    "command": [
                        "assert (H' : (headCP cp :: nil) ++ CPToList (tailCP (OCP cp)) = headCP cp :: (CPToList (tailCP (OCP cp)))) by (simpl; reflexivity); rewrite H'; clear H'.",
                        "VernacExtend",
                        "0feb0a0b1637eca3d0964c3930df2d8859cd459c"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in H.",
                        "VernacExtend",
                        "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.perm_trans with (headCP cp :: CPToList (tailCP cp)); try assumption; clear H.",
                        "VernacExtend",
                        "030ea31b6a79dc0ad8e766823f56a431eb8d4303"
                    ]
                },
                {
                    "command": [
                        "assert (H := OCPPerm (tailCP cp)).",
                        "VernacExtend",
                        "06e1e1b3a2a98b658f7acfef6ed0e09139262752"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in H.",
                        "VernacExtend",
                        "6ccee2255ca0a4011166f060438ba0b7a7c0da6b"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.perm_skip.",
                        "VernacExtend",
                        "e9f44a387252e26735f564a446ce6d5616341161"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedAux.",
                        "VernacExtend",
                        "9acee36421b87459118d272048f203b74ae75d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- CPToListTl2.",
                        "VernacExtend",
                        "0cfd3596123a09fad9c95db01661a8899cd50e30"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedTl.",
                        "VernacExtend",
                        "4dd6c68aef27122d515f5989c55723c58a3623b8"
                    ]
                },
                {
                    "command": [
                        "apply OCPSortedAux.",
                        "VernacExtend",
                        "9acee36421b87459118d272048f203b74ae75d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OCPTlOK",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "intros cp Hhd.",
                        "VernacExtend",
                        "ff71311afeaad4f490779d348e5b0c08453bc11d"
                    ]
                },
                {
                    "command": [
                        "apply CPLOCPTlOK in Hhd.",
                        "VernacExtend",
                        "899bc4b6d2aed90ed48d738c041f9528ef5c03ac"
                    ]
                },
                {
                    "command": [
                        "apply CPLCP; assumption.",
                        "VernacExtend",
                        "c54b6e116cf446dcd78cfec1df6a8f4e8a56bce9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InCPOCP",
            "line_nb": 434,
            "steps": [
                {
                    "command": [
                        "intros p cp.",
                        "VernacExtend",
                        "a297ca0b2b4117283e959a5fe0e3e3abb4841eca"
                    ]
                },
                {
                    "command": [
                        "unfold OCP.",
                        "VernacExtend",
                        "b21a644795adb364fa79c9d80e18446706bfc834"
                    ]
                },
                {
                    "command": [
                        "unfold OCPAux.",
                        "VernacExtend",
                        "4760fab52abea3724b245d762a774773fc0ed5fa"
                    ]
                },
                {
                    "command": [
                        "unfold InCP.",
                        "VernacExtend",
                        "df1188e79a6d40e6ab2452b5fd80a8a17374515e"
                    ]
                },
                {
                    "command": [
                        "elim_eq_rect; simpl.",
                        "VernacExtend",
                        "1f7073b55f3c0088d97c377e51761c726c3af29b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLOK.",
                        "VernacExtend",
                        "763b475ffa025f720c8293f436cf3d3b53534d26"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm1 := Permuted_sort (CPToList cp)); simpl in HPerm1.",
                        "VernacExtend",
                        "ea2a29ea492056547d1d77caa2d727f9a322c14d"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm2 := HPerm1); apply Permutation.Permutation_sym in HPerm2.",
                        "VernacExtend",
                        "5f8ed5a577045931d060b69eaff870254ad205f4"
                    ]
                },
                {
                    "command": [
                        "assert (HInOK : In p (sort (fst cp :: snd cp :: nil)) <-> In p (fst cp :: snd cp :: nil)) by (split; intro HIn; try (apply Permutation.Permutation_in with (sort (fst cp :: snd cp :: nil)); assumption); apply Permutation.Permutation_in with (fst cp :: snd cp :: nil); assumption).",
                        "VernacExtend",
                        "c449e24e753a2de2f5e8912fb04afc9831ea951b"
                    ]
                },
                {
                    "command": [
                        "split; intro HIn.",
                        "VernacExtend",
                        "5d9e87271e4ae97f3905fb0d8d98c035c1f5ccba"
                    ]
                },
                {
                    "command": [
                        "apply HInOK; simpl; assumption.",
                        "VernacExtend",
                        "826e284c14274d03ec9aaac2e40a57afa0ddaa93"
                    ]
                },
                {
                    "command": [
                        "apply HInOK in HIn; simpl in HIn; assumption.",
                        "VernacExtend",
                        "d35a05c382e764a41c9d8bf93ba135f4d8febcab"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLOK.",
                        "VernacExtend",
                        "763b475ffa025f720c8293f436cf3d3b53534d26"
                    ]
                },
                {
                    "command": [
                        "set (sscp := (nat_rect (fun n : nat => cartesianPower positive (S n) -> list positive) (fun cp0 : cartesianPower positive 1 => cp0 :: nil) (fun (n : nat) (IHn : cartesianPower positive (S n) -> list positive) (cp0 : cartesianPower positive (S (S n))) => fst cp0 :: IHn (tailCP cp0)) n (tailCP (snd cp)))).",
                        "VernacExtend",
                        "35ad1318b2359c49370ba83603f8e9041148ce4b"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm := Permuted_sort (fst cp :: fst (snd cp) :: sscp)).",
                        "VernacExtend",
                        "b95623846fbb79df83c01ae76c86641b03c2efff"
                    ]
                },
                {
                    "command": [
                        "split; intro HIn.",
                        "VernacExtend",
                        "5d9e87271e4ae97f3905fb0d8d98c035c1f5ccba"
                    ]
                },
                {
                    "command": [
                        "elim HIn; clear HIn; intro HIn.",
                        "VernacExtend",
                        "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
                        "VernacExtend",
                        "fdc9d35e029355113df628a1032e282de87bd879"
                    ]
                },
                {
                    "command": [
                        "apply in_eq.",
                        "VernacExtend",
                        "b2ebc8aa95184dafdee2b91493439102df7a8d40"
                    ]
                },
                {
                    "command": [
                        "elim HIn; clear HIn; intro HIn.",
                        "VernacExtend",
                        "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
                        "VernacExtend",
                        "fdc9d35e029355113df628a1032e282de87bd879"
                    ]
                },
                {
                    "command": [
                        "apply in_cons.",
                        "VernacExtend",
                        "399e38cb78a431736f6d0e2fdcca101d4656106f"
                    ]
                },
                {
                    "command": [
                        "apply in_eq.",
                        "VernacExtend",
                        "b2ebc8aa95184dafdee2b91493439102df7a8d40"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_in with (fst cp :: fst (snd cp) :: sscp); try assumption.",
                        "VernacExtend",
                        "fdc9d35e029355113df628a1032e282de87bd879"
                    ]
                },
                {
                    "command": [
                        "do 2 (apply in_cons).",
                        "VernacExtend",
                        "ec7de9bb9e11e77bdffe78a26b8decc61619030f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in HPerm.",
                        "VernacExtend",
                        "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
                    ]
                },
                {
                    "command": [
                        "assert (HInOKAux := Permutation.Permutation_in).",
                        "VernacExtend",
                        "3be81de251ad3ef7de076e11d3641c4207ac6282"
                    ]
                },
                {
                    "command": [
                        "assert (HInOK := HInOKAux positive (sort (fst cp :: fst (snd cp) :: sscp)) (fst cp :: fst (snd cp) :: sscp) p HPerm HIn); clear HInOKAux; clear HIn.",
                        "VernacExtend",
                        "c23333f73dad2064120823e06ef940c2a3f74e52"
                    ]
                },
                {
                    "command": [
                        "rename HInOK into HIn.",
                        "VernacExtend",
                        "165af0397994a94c9ffebb87e19efdba79487024"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqListRefl",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "intro l; induction l; simpl.",
                        "VernacExtend",
                        "f446a0b923ecc5cca94e0536ac35ae1e81b87317"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "split; try assumption.",
                        "VernacExtend",
                        "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqListSym",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "intro l; induction l.",
                        "VernacExtend",
                        "4a886e80d631695693a238edb191c72bc84bf91f"
                    ]
                },
                {
                    "command": [
                        "intro l'; induction l'; auto.",
                        "VernacExtend",
                        "f604fd233bccf12ed3925e425860c02e9ce4a94f"
                    ]
                },
                {
                    "command": [
                        "intro l'; induction l'; auto.",
                        "VernacExtend",
                        "f604fd233bccf12ed3925e425860c02e9ce4a94f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intro H.",
                        "VernacExtend",
                        "a9535760040671e8853f25f0b4e9eda38ca392a6"
                    ]
                },
                {
                    "command": [
                        "destruct H as [Haa0 Hll'].",
                        "VernacExtend",
                        "8f0b672a809d5bab6ae471f56b3a88b3e6a49574"
                    ]
                },
                {
                    "command": [
                        "split; intuition.",
                        "VernacExtend",
                        "ad92f41c7c6120efbfc528c4c895eac1600e6297"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqListTrans",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "intro l1; induction l1.",
                        "VernacExtend",
                        "0d5934638263245a2fb87d07fbce3ad989c90ec1"
                    ]
                },
                {
                    "command": [
                        "intro l2; induction l2.",
                        "VernacExtend",
                        "359cdd779aa3b29893b3e6d09cfe5b3907b33047"
                    ]
                },
                {
                    "command": [
                        "intro l3; induction l3.",
                        "VernacExtend",
                        "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "intro l2; induction l2.",
                        "VernacExtend",
                        "359cdd779aa3b29893b3e6d09cfe5b3907b33047"
                    ]
                },
                {
                    "command": [
                        "intro l3; induction l3.",
                        "VernacExtend",
                        "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "intro l3; induction l3.",
                        "VernacExtend",
                        "bd14fabdbfedea3f17492e6abeeed0973b2ef177"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros Hl1l2 Hl2l3.",
                        "VernacExtend",
                        "bcbdf810656c3eff4ff96789bb5e736a2566f2c0"
                    ]
                },
                {
                    "command": [
                        "destruct Hl1l2 as [Haa0 Hl1l2].",
                        "VernacExtend",
                        "39fc5928269aa7ef4ab00b861987f6b785d2f43c"
                    ]
                },
                {
                    "command": [
                        "destruct Hl2l3 as [Ha0a1 Hl2l3].",
                        "VernacExtend",
                        "7828b6da335efd57a9942fff3090acade25b6a8e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "transitivity a0; assumption.",
                        "VernacExtend",
                        "21ff4896c8ea927903348f7bf8ea6913865941ad"
                    ]
                },
                {
                    "command": [
                        "apply IHl1 with l2; assumption.",
                        "VernacExtend",
                        "6a665d980c8abefcf19a668dfbaa451d333dc9d8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqListSortOCP",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "unfold OCP.",
                        "VernacExtend",
                        "b21a644795adb364fa79c9d80e18446706bfc834"
                    ]
                },
                {
                    "command": [
                        "unfold OCPAux.",
                        "VernacExtend",
                        "4760fab52abea3724b245d762a774773fc0ed5fa"
                    ]
                },
                {
                    "command": [
                        "elim_eq_rect.",
                        "VernacExtend",
                        "a3ab8624ed2e751c63fb01448c407dc19db6956e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLOK.",
                        "VernacExtend",
                        "763b475ffa025f720c8293f436cf3d3b53534d26"
                    ]
                },
                {
                    "command": [
                        "apply eqListRefl.",
                        "VernacExtend",
                        "62276702c2a2c76cee88a20d60f2f426e3a4915a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqbListEqList",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "intro l1.",
                        "VernacExtend",
                        "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
                    ]
                },
                {
                    "command": [
                        "induction l1.",
                        "VernacExtend",
                        "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold eqList.",
                        "VernacExtend",
                        "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold eqList.",
                        "VernacExtend",
                        "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
                    ]
                },
                {
                    "command": [
                        "split; intro; intuition; discriminate.",
                        "VernacExtend",
                        "909ac1823f6a8515c91c4d42150414a5dbb2dabb"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold eqList.",
                        "VernacExtend",
                        "17c3c8f9ef76150f1a19bf52ea2203ca86fdacce"
                    ]
                },
                {
                    "command": [
                        "split; intro; intuition; discriminate.",
                        "VernacExtend",
                        "909ac1823f6a8515c91c4d42150414a5dbb2dabb"
                    ]
                },
                {
                    "command": [
                        "split; intro H.",
                        "VernacExtend",
                        "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
                    ]
                },
                {
                    "command": [
                        "unfold eqbList in H.",
                        "VernacExtend",
                        "cabd1f484b810375760a49f52507971082b9f535"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff in H.",
                        "VernacExtend",
                        "6be4e13be3cc994beedd2c7e4adabd0a944c1be7"
                    ]
                },
                {
                    "command": [
                        "destruct H as [Hhd Htl].",
                        "VernacExtend",
                        "7109d8730dcbd51ef5568efabd9ef13034e2abd1"
                    ]
                },
                {
                    "command": [
                        "fold eqbList in Htl.",
                        "VernacExtend",
                        "e5839459b93209d1f534125ef359b3f183fb0762"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHl1 l2).",
                        "VernacExtend",
                        "854ab8527e6f682f3bda0957e85156d38b9bdc1d"
                    ]
                },
                {
                    "command": [
                        "rewrite H in Htl.",
                        "VernacExtend",
                        "b407da14c4639d94029a8a6082f7c45956c894c8"
                    ]
                },
                {
                    "command": [
                        "unfold eqList.",
                        "VernacExtend",
                        "762edd97411b25e78c8afa87a2b0d4f303c258ce"
                    ]
                },
                {
                    "command": [
                        "split; try assumption.",
                        "VernacExtend",
                        "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
                    ]
                },
                {
                    "command": [
                        "rewrite PositiveSet.E.eqb_eq in Hhd.",
                        "VernacExtend",
                        "9a231bbf7012246dc793bde5c10edf239e39dcec"
                    ]
                },
                {
                    "command": [
                        "subst; reflexivity.",
                        "VernacExtend",
                        "e0e2f5d2bb0ba834bbb8fede1abdf8af65f1ce87"
                    ]
                },
                {
                    "command": [
                        "apply andb_true_iff.",
                        "VernacExtend",
                        "583d40e493f314492aad482eb70e9a25a38aae78"
                    ]
                },
                {
                    "command": [
                        "rewrite PositiveSet.E.eqb_eq; fold eqbList.",
                        "VernacExtend",
                        "4a156361a6553066b655eae78d4d150d8cef9bdf"
                    ]
                },
                {
                    "command": [
                        "unfold eqList in H.",
                        "VernacExtend",
                        "4fc1b264e2a18de86f0c9667c7420ccbf01a1477"
                    ]
                },
                {
                    "command": [
                        "destruct H as [Hhd Htl].",
                        "VernacExtend",
                        "7109d8730dcbd51ef5568efabd9ef13034e2abd1"
                    ]
                },
                {
                    "command": [
                        "fold eqList in Htl.",
                        "VernacExtend",
                        "33092eeba0f828f8ab7413294008e9aa17d7c5d0"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHl1 l2).",
                        "VernacExtend",
                        "854ab8527e6f682f3bda0957e85156d38b9bdc1d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H in Htl.",
                        "VernacExtend",
                        "67f65a2e6370a0e6ef2417ec754fb773dbb6658e"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqbST_eqST",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "intros; unfold eqbST, eqST; apply eqbListEqList.",
                        "VernacExtend",
                        "af9d96211b9c3aafd18476f5f9d85e314c5c001e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lengthOne",
            "line_nb": 560,
            "steps": [
                {
                    "command": [
                        "intros l Hl.",
                        "VernacExtend",
                        "73c348d1ec294870f643ef6a781f4b0c88e45247"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl in Hl; discriminate.",
                        "VernacExtend",
                        "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "exists a; reflexivity.",
                        "VernacExtend",
                        "d0f7a71d1fbb46f3989d64caa53aab487bb30926"
                    ]
                },
                {
                    "command": [
                        "simpl in Hl; discriminate.",
                        "VernacExtend",
                        "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lengthAtLeastOne",
            "line_nb": 568,
            "steps": [
                {
                    "command": [
                        "intros l n Hl.",
                        "VernacExtend",
                        "ecb38604757fc7a726d4f0be60cf3580de5f7db6"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl in Hl; discriminate.",
                        "VernacExtend",
                        "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
                    ]
                },
                {
                    "command": [
                        "exists a; exists l; reflexivity.",
                        "VernacExtend",
                        "9966df55c42cb0d8ff118d31b1cd7d0061fbd43c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltListTrans",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "intro m; induction m; intros x y z lx ly lz Hxy Hyz.",
                        "VernacExtend",
                        "72fd5cc1ef852a2b90530232f7e838f21285abeb"
                    ]
                },
                {
                    "command": [
                        "assert (Hx := lengthOne x lx); destruct Hx as [hdx Hx].",
                        "VernacExtend",
                        "9c62bef87ef53a4a77608ecd8a7bebc26da5d1f5"
                    ]
                },
                {
                    "command": [
                        "assert (Hy := lengthOne y ly); destruct Hy as [hdy Hy].",
                        "VernacExtend",
                        "0dca29ef370b709a4e8a0b1d8997ea2c803f4e82"
                    ]
                },
                {
                    "command": [
                        "assert (Hz := lengthOne z lz); destruct Hz as [hdz Hz].",
                        "VernacExtend",
                        "9f94894d8e1e27b9355dec4392dbe15cd3c6cd14"
                    ]
                },
                {
                    "command": [
                        "subst; simpl in *.",
                        "VernacExtend",
                        "e273de7514ad96e96a09ebeca61a1469071c25a2"
                    ]
                },
                {
                    "command": [
                        "assert (H : Pos.ltb hdx hdz = true).",
                        "VernacExtend",
                        "2dda2f530426bd6c27a0fc89156ceb1520df0339"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_lt.",
                        "VernacExtend",
                        "1f91ef82c640fa1f8ec0f82038c4fb828070f037"
                    ]
                },
                {
                    "command": [
                        "transitivity hdy.",
                        "VernacExtend",
                        "c980f182b94b5d0ad77de07c66cc7d7ed11614d5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt.",
                        "VernacExtend",
                        "bfa1c6dcca8eb4c3e4746bb2c5f8fa688a7a3594"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.ltb hdx hdy); intuition.",
                        "VernacExtend",
                        "388e76107f3cd2b0d3ebf6d62f4cc7bd757d3232"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.ltb hdy hdx); intuition.",
                        "VernacExtend",
                        "812954d24141177733fb4446900f8adc570b46bf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt.",
                        "VernacExtend",
                        "bfa1c6dcca8eb4c3e4746bb2c5f8fa688a7a3594"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.ltb hdy hdz); intuition.",
                        "VernacExtend",
                        "775cfffce38354d6200b8a1cf54a9d297aacbe2e"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.ltb hdz hdy); intuition.",
                        "VernacExtend",
                        "b78be7a7df8260885385daf6e830a4c57456c6b3"
                    ]
                },
                {
                    "command": [
                        "rewrite H; trivial.",
                        "VernacExtend",
                        "be0ba1f6432776bd85200205d59a572473bb951c"
                    ]
                },
                {
                    "command": [
                        "assert (Hx := lengthAtLeastOne x (S m) lx); destruct Hx as [hdx [tlx Hx]].",
                        "VernacExtend",
                        "c0ae3d7076dc4e02204d82be30aeb9fb41815cc3"
                    ]
                },
                {
                    "command": [
                        "assert (Hy := lengthAtLeastOne y (S m) ly); destruct Hy as [hdy [tly Hy]].",
                        "VernacExtend",
                        "0712c80eb9f06e491a8f636205dc95505349681e"
                    ]
                },
                {
                    "command": [
                        "assert (Hz := lengthAtLeastOne z (S m) lz); destruct Hz as [hdz [tlz Hz]].",
                        "VernacExtend",
                        "e4baa0b7c59692625bd86220e0cfae50f94609ce"
                    ]
                },
                {
                    "command": [
                        "subst; simpl in *.",
                        "VernacExtend",
                        "e273de7514ad96e96a09ebeca61a1469071c25a2"
                    ]
                },
                {
                    "command": [
                        "assert (HEqxy := Pos.compare_eq hdx hdy).",
                        "VernacExtend",
                        "50a5b65feba9c2a9dd2e686b2ef682d84ec3b0b4"
                    ]
                },
                {
                    "command": [
                        "assert (HEqyz := Pos.compare_eq hdy hdz).",
                        "VernacExtend",
                        "83bd0d7c93c9b466a8b80d281964e5e4d79494d5"
                    ]
                },
                {
                    "command": [
                        "assert (HLtxy := Pos.compare_nge_iff hdx hdy).",
                        "VernacExtend",
                        "ab0c3ebd7b1c601896afc4e99e505f289469fcf2"
                    ]
                },
                {
                    "command": [
                        "assert (HLtyz := Pos.compare_nge_iff hdy hdz).",
                        "VernacExtend",
                        "dc73f00f320bb25ee2a4f0d7b41773c45934c57f"
                    ]
                },
                {
                    "command": [
                        "assert (HGtxy := Pos.compare_gt_iff hdx hdy).",
                        "VernacExtend",
                        "c3e7ba0c1bcc738de1c9680f82f89a7ccf1a8a94"
                    ]
                },
                {
                    "command": [
                        "assert (HGtyz := Pos.compare_gt_iff hdy hdz).",
                        "VernacExtend",
                        "9f60bb103a01cc57be872092d095b2ddc914f877"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.compare hdx hdy); induction (Pos.compare hdy hdz).",
                        "VernacExtend",
                        "e1d88b72494f02f8af19cf311579285cdca9c173"
                    ]
                },
                {
                    "command": [
                        "assert (H : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "9f38bd8a2b4832500d29af736c00e48f714d78d0"
                    ]
                },
                {
                    "command": [
                        "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "8bc6f0afa143d23a6622223c926512f03d6f3560"
                    ]
                },
                {
                    "command": [
                        "apply HEqyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "6853d296feeb5b0c7e7f03b300cea60436371d1b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (H := Pos.ltb_irrefl hdz).",
                        "VernacExtend",
                        "1155a6fa666b4d21e45ce3106149c61fc61e83cf"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *; clear H.",
                        "VernacExtend",
                        "a659f7273b9ba28d93f6bd2cf194145d9a4a3001"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S in lx.",
                        "VernacExtend",
                        "36b082c261af286812cc43106248fd9da82d4ac0"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S in ly.",
                        "VernacExtend",
                        "90b4c8feb94d4b0e9e40e395a7f77a3f1a351f24"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S in lz.",
                        "VernacExtend",
                        "4f88446c77e2c9c6836af5d7b52118bc6dd422b4"
                    ]
                },
                {
                    "command": [
                        "apply IHm with tly; assumption.",
                        "VernacExtend",
                        "cefa29521320348b12c80ebb01db6292d5ae41dc"
                    ]
                },
                {
                    "command": [
                        "assert (H : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "9f38bd8a2b4832500d29af736c00e48f714d78d0"
                    ]
                },
                {
                    "command": [
                        "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Lt = Lt) by reflexivity.",
                        "VernacExtend",
                        "f4ba3a1d24b55f681389d5d072e6fafdd1dfc3af"
                    ]
                },
                {
                    "command": [
                        "apply HLtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "fcc6dd19935cfcbbbb2e1d02d95f95f711b66262"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.lt_nle in H'.",
                        "VernacExtend",
                        "0b4be71deeb5d741349a6a47badd57ccbc6be2d8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H'.",
                        "VernacExtend",
                        "5681edd550d4930f7b8ffc728d6f1ec0235dde20"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "9f38bd8a2b4832500d29af736c00e48f714d78d0"
                    ]
                },
                {
                    "command": [
                        "apply HEqxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "179173bf5c7583961bd3a13d1267ff6a34d76fa5"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "b4c37cbbd1fd4b5432c21394032118e8ffc3e37d"
                    ]
                },
                {
                    "command": [
                        "apply HGtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "6eff520aeeed5a2bbde4449964d11d8310c0adb8"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H'.",
                        "VernacExtend",
                        "5681edd550d4930f7b8ffc728d6f1ec0235dde20"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H : Lt = Lt) by reflexivity.",
                        "VernacExtend",
                        "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
                    ]
                },
                {
                    "command": [
                        "apply HLtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "07a1ade56b800eb22c8e148418729cbae85732bf"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "8bc6f0afa143d23a6622223c926512f03d6f3560"
                    ]
                },
                {
                    "command": [
                        "apply HEqyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "6853d296feeb5b0c7e7f03b300cea60436371d1b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.lt_nle in H.",
                        "VernacExtend",
                        "4c5c3f111f1011329788c52293fc2191b1c147b7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H : Lt = Lt) by reflexivity.",
                        "VernacExtend",
                        "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
                    ]
                },
                {
                    "command": [
                        "apply HLtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "07a1ade56b800eb22c8e148418729cbae85732bf"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Lt = Lt) by reflexivity.",
                        "VernacExtend",
                        "f4ba3a1d24b55f681389d5d072e6fafdd1dfc3af"
                    ]
                },
                {
                    "command": [
                        "apply HLtyz in H'; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "fcc6dd19935cfcbbbb2e1d02d95f95f711b66262"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.lt_nle in H.",
                        "VernacExtend",
                        "4c5c3f111f1011329788c52293fc2191b1c147b7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.lt_nle in H'.",
                        "VernacExtend",
                        "0b4be71deeb5d741349a6a47badd57ccbc6be2d8"
                    ]
                },
                {
                    "command": [
                        "assert (H'' : Pos.lt hdx hdz) by (transitivity hdy; assumption).",
                        "VernacExtend",
                        "a02a84c59566ee09743323b216f8efab52582f9b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H''.",
                        "VernacExtend",
                        "80e6071278a1cb15c82131c8514a1afec4ea808c"
                    ]
                },
                {
                    "command": [
                        "rewrite H''.",
                        "VernacExtend",
                        "08bc448c359c8ed379f487dadafb8d6578cdc776"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "a60b6fc4798d66826d9c0c5badd2788bbdea5481"
                    ]
                },
                {
                    "command": [
                        "assert (H : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
                    ]
                },
                {
                    "command": [
                        "apply HGtyz in H; clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "8098f1c67d75e416ea7edd435cf4b9b9d627c0e2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_lt in H.",
                        "VernacExtend",
                        "3c4994677689308cb0666d7e2770a57b211af905"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.lt_nle in H.",
                        "VernacExtend",
                        "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Pos.ltb hdy hdz = false).",
                        "VernacExtend",
                        "9b8ba8b20249ed8a14cac7faa010d6d67dbad829"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_nlt.",
                        "VernacExtend",
                        "c42e95928af5319188f7a8c5061e3e817b68a425"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases.",
                        "VernacExtend",
                        "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "f049e382af879d860de83f77769ecaaa64d80246"
                    ]
                },
                {
                    "command": [
                        "assert (H : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
                    ]
                },
                {
                    "command": [
                        "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "f1cc4770485a3da000078fb966cafd20344db302"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_lt in H.",
                        "VernacExtend",
                        "3c4994677689308cb0666d7e2770a57b211af905"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.lt_nle in H.",
                        "VernacExtend",
                        "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Pos.ltb hdx hdy = false).",
                        "VernacExtend",
                        "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_nlt.",
                        "VernacExtend",
                        "c42e95928af5319188f7a8c5061e3e817b68a425"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases.",
                        "VernacExtend",
                        "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "f049e382af879d860de83f77769ecaaa64d80246"
                    ]
                },
                {
                    "command": [
                        "assert (H : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
                    ]
                },
                {
                    "command": [
                        "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "f1cc4770485a3da000078fb966cafd20344db302"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_lt in H.",
                        "VernacExtend",
                        "3c4994677689308cb0666d7e2770a57b211af905"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.lt_nle in H.",
                        "VernacExtend",
                        "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Pos.ltb hdx hdy = false).",
                        "VernacExtend",
                        "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_nlt.",
                        "VernacExtend",
                        "c42e95928af5319188f7a8c5061e3e817b68a425"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases.",
                        "VernacExtend",
                        "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "clear HEqyz; clear HLtyz; clear HGtyz.",
                        "VernacExtend",
                        "f049e382af879d860de83f77769ecaaa64d80246"
                    ]
                },
                {
                    "command": [
                        "assert (H : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
                    ]
                },
                {
                    "command": [
                        "apply HGtxy in H; clear HEqxy; clear HLtxy; clear HGtxy.",
                        "VernacExtend",
                        "f1cc4770485a3da000078fb966cafd20344db302"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "rewrite H in *.",
                        "VernacExtend",
                        "288b227b15ae46c36597274ad2b93384514b82ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_lt in H.",
                        "VernacExtend",
                        "3c4994677689308cb0666d7e2770a57b211af905"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.lt_nle in H.",
                        "VernacExtend",
                        "1dd86cfcc8e04ef2925e94f90c7dcbebb1fe787f"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Pos.ltb hdx hdy = false).",
                        "VernacExtend",
                        "fd8943a662dc706abe1065aaf25ae86bb0dd5bec"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.ltb_nlt.",
                        "VernacExtend",
                        "c42e95928af5319188f7a8c5061e3e817b68a425"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_eq_cases.",
                        "VernacExtend",
                        "0a2045b2d4a8db87dd90ccfbb163b2b102a86f42"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "rewrite H' in *.",
                        "VernacExtend",
                        "8f4827ff5f1e359d0f72ca6681c3ec02d7d3fee6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sortOK",
            "line_nb": 709,
            "steps": [
                {
                    "command": [
                        "intros m l Hl.",
                        "VernacExtend",
                        "f085b1ab0cf5672460b3dfe30dd30dd8e11a88e1"
                    ]
                },
                {
                    "command": [
                        "assert (H := Permuted_iter_merge l nil).",
                        "VernacExtend",
                        "8b051ada6a30b52fff58fc77082818c8ea9f2b26"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_length in H.",
                        "VernacExtend",
                        "8fb7a967a3939bd89b5868f9ee280aab2b35a74f"
                    ]
                },
                {
                    "command": [
                        "unfold flatten_stack in H.",
                        "VernacExtend",
                        "329ce76f3de9711ac6edd064d5b4562db7b543d2"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hl.",
                        "VernacExtend",
                        "5ed0aeece8356d562df83b4a1b3416a07ac23845"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "unfold sort.",
                        "VernacExtend",
                        "29cc4a076e0eb3e89206a710784f457b54076714"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltTrans",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "unfold lt.",
                        "VernacExtend",
                        "2e821d407c03d5f5e572c51453fdc618d9dec364"
                    ]
                },
                {
                    "command": [
                        "intros x y z Hxy Hyz.",
                        "VernacExtend",
                        "bf0d92fec5671802249f6b649dc54ef865d622c2"
                    ]
                },
                {
                    "command": [
                        "assert (lx : (S (S n)) = (S (S n))) by reflexivity.",
                        "VernacExtend",
                        "75347f9cb8dce3d30e4418cbf10a153ec7137a3c"
                    ]
                },
                {
                    "command": [
                        "assert (lx' := lengthOfCPToList x).",
                        "VernacExtend",
                        "0fb26881aa14c20caeb4399c27f44da3e66e5d7b"
                    ]
                },
                {
                    "command": [
                        "assert (lx'' := sortOK (S (S n)) (CPToList x)).",
                        "VernacExtend",
                        "090161554bddef6b2bb050c51e4bbac5ee97cf9d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lx' in lx''; clear lx'.",
                        "VernacExtend",
                        "673be5d9438e7c732f3173946cac08e539e9fcbe"
                    ]
                },
                {
                    "command": [
                        "apply lx'' in lx; clear lx''.",
                        "VernacExtend",
                        "5a9bad7e046948101db39d3df081c7adbb632c5d"
                    ]
                },
                {
                    "command": [
                        "assert (ly : (S (S n)) = (S (S n))) by reflexivity.",
                        "VernacExtend",
                        "73dbbb6da79c1f40f92a112a7646dda64bc61c5d"
                    ]
                },
                {
                    "command": [
                        "assert (ly' := lengthOfCPToList y).",
                        "VernacExtend",
                        "682ddfd9a04c80d3019062627f63d1f914b4c3bc"
                    ]
                },
                {
                    "command": [
                        "assert (ly'' := sortOK (S (S n)) (CPToList y)).",
                        "VernacExtend",
                        "06e88b5c8fc5a1d9959c2966ada6a81c3df26840"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ly' in ly''; clear ly'.",
                        "VernacExtend",
                        "ca5f0a6bb0d3c606233b0cc45d9dca8a93e9e84e"
                    ]
                },
                {
                    "command": [
                        "apply ly'' in ly; clear ly''.",
                        "VernacExtend",
                        "69b17b4e92c18333355e59d65d6f250fae15fd7c"
                    ]
                },
                {
                    "command": [
                        "assert (lz : (S (S n)) = (S (S n))) by reflexivity.",
                        "VernacExtend",
                        "c025c5a16578459724a349310fc075a4843a0e09"
                    ]
                },
                {
                    "command": [
                        "assert (lz' := lengthOfCPToList z).",
                        "VernacExtend",
                        "10c5f60e5b75a76e8c634cf34547e3b96bbe8ca8"
                    ]
                },
                {
                    "command": [
                        "assert (lz'' := sortOK (S (S n)) (CPToList z)).",
                        "VernacExtend",
                        "0aa3b587e52149959c94d1210455a506839706a8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lz' in lz''; clear lz'.",
                        "VernacExtend",
                        "68fdb8731cb9190463bd4247943aff058a027d1e"
                    ]
                },
                {
                    "command": [
                        "apply lz'' in lz; clear lz''.",
                        "VernacExtend",
                        "08f506ba0ec9b634ecf0d3875de560bbae2ff683"
                    ]
                },
                {
                    "command": [
                        "assert (H := ltListTrans (S n) (sort (CPToList x)) (sort (CPToList y)) (sort (CPToList z))).",
                        "VernacExtend",
                        "719e5c2a4b5651f2c242cf57d7a964ff93b82b30"
                    ]
                },
                {
                    "command": [
                        "apply H; assumption.",
                        "VernacExtend",
                        "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltListIrrefl",
            "line_nb": 742,
            "steps": [
                {
                    "command": [
                        "intro l.",
                        "VernacExtend",
                        "c8139627914eb6a3cf51966a8a1d73a6c51f81e7"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "assert (H := Pos.lt_irrefl a).",
                        "VernacExtend",
                        "880ab8b66e79c176469142f0da1c4962d613467a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_nlt in H.",
                        "VernacExtend",
                        "7e940b58c7f81ee94c2f87f4786a15e43303948e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply IHl.",
                        "VernacExtend",
                        "af412c6009bba78f939aa53ab07dcd1baaf5888b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqListOK",
            "line_nb": 752,
            "steps": [
                {
                    "command": [
                        "intro l1.",
                        "VernacExtend",
                        "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
                    ]
                },
                {
                    "command": [
                        "induction l1.",
                        "VernacExtend",
                        "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intro HEq.",
                        "VernacExtend",
                        "5ba0ec7bcb7e0b7d3571015fa4add3d531fa33ef"
                    ]
                },
                {
                    "command": [
                        "destruct HEq as [Hhd Htl].",
                        "VernacExtend",
                        "a240f3abe9f2c02727463a0da80c445e56e1f0d5"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.eq in Hhd.",
                        "VernacExtend",
                        "4b15103d34bb9ccf1b47fb61e3166d2627e9da3f"
                    ]
                },
                {
                    "command": [
                        "apply IHl1 in Htl.",
                        "VernacExtend",
                        "d85a426b30c5395e7516f2b1cef8a91bd00ae66d"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compareListSpec",
            "line_nb": 771,
            "steps": [
                {
                    "command": [
                        "intro l1.",
                        "VernacExtend",
                        "465d5ba237f0ac3ac78ec62f43016ee3b528e4ca"
                    ]
                },
                {
                    "command": [
                        "unfold eqST; unfold lt.",
                        "VernacExtend",
                        "ca255793c019f6103c06b07fef0d1aae01fdf613"
                    ]
                },
                {
                    "command": [
                        "induction l1.",
                        "VernacExtend",
                        "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply CompEq.",
                        "VernacExtend",
                        "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply CompLt.",
                        "VernacExtend",
                        "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "intro l2.",
                        "VernacExtend",
                        "d71b6938fc67c1e55ebe9a17851531cde9ba878a"
                    ]
                },
                {
                    "command": [
                        "induction l2.",
                        "VernacExtend",
                        "ff7ecc59ee4f6b0af8484905f5e8c131f6a870c4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply CompGt.",
                        "VernacExtend",
                        "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
                    ]
                },
                {
                    "command": [
                        "simpl; trivial.",
                        "VernacExtend",
                        "700c92fe710eacabdba1c0df7cd3aac36ec19aa1"
                    ]
                },
                {
                    "command": [
                        "clear IHl2.",
                        "VernacExtend",
                        "8c30713b7004e6fce2773d1ffd20c8aab5dd185e"
                    ]
                },
                {
                    "command": [
                        "assert (HEq := Pos.compare_eq a a0).",
                        "VernacExtend",
                        "fe78e1537b1a37401a817f33dd0537da9b978967"
                    ]
                },
                {
                    "command": [
                        "assert (HLt := Pos.compare_nge_iff a a0).",
                        "VernacExtend",
                        "6710e25ef764980fcf0651324faf5558dfb81782"
                    ]
                },
                {
                    "command": [
                        "assert (HGt := Pos.compare_gt_iff a a0).",
                        "VernacExtend",
                        "20dd1a37b0fa9b66690270629e591aadc2d82db4"
                    ]
                },
                {
                    "command": [
                        "induction (Pos.compare a a0).",
                        "VernacExtend",
                        "dcd2b3e3d54d0b5d4f79733b17fd725e90202e44"
                    ]
                },
                {
                    "command": [
                        "assert (H : Eq = Eq) by reflexivity.",
                        "VernacExtend",
                        "9f38bd8a2b4832500d29af736c00e48f714d78d0"
                    ]
                },
                {
                    "command": [
                        "apply HEq in H; clear HEq; clear HLt; clear HGt.",
                        "VernacExtend",
                        "8706d2175800397997e13ec69e16623ef949f111"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite POrderedType.Positive_as_OT.compare_refl.",
                        "VernacExtend",
                        "aaac27785629d4e84992d2973ab295073f39a0b0"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHl1 l2); clear IHl1.",
                        "VernacExtend",
                        "6dd404d1c347abd5be22cb320aff6c180619ff02"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "apply CompEq.",
                        "VernacExtend",
                        "b33224c6cc21c07307fa2756f8f3bc5afea42a86"
                    ]
                },
                {
                    "command": [
                        "simpl; split; auto; apply Pos.eq_refl.",
                        "VernacExtend",
                        "7f623a9763c4ac0bcb000a44db6071a43e64a298"
                    ]
                },
                {
                    "command": [
                        "apply CompLt.",
                        "VernacExtend",
                        "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Pos.ltb_irrefl; auto.",
                        "VernacExtend",
                        "2e077b33d27227c6723f866c3e4920d76f9b2f5a"
                    ]
                },
                {
                    "command": [
                        "apply CompGt.",
                        "VernacExtend",
                        "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Pos.ltb_irrefl; auto.",
                        "VernacExtend",
                        "2e077b33d27227c6723f866c3e4920d76f9b2f5a"
                    ]
                },
                {
                    "command": [
                        "assert (H : Lt = Lt) by reflexivity.",
                        "VernacExtend",
                        "dad86cf9e7591304d3fbec54bfdf828b4e487fe4"
                    ]
                },
                {
                    "command": [
                        "apply HLt in H; clear HEq; clear HLt; clear HGt.",
                        "VernacExtend",
                        "89ce4cbab422a0719fd976d1c3989929adbc40af"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.lt_nle in H.",
                        "VernacExtend",
                        "4c5c3f111f1011329788c52293fc2191b1c147b7"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_lt_iff in H.",
                        "VernacExtend",
                        "dd60df3c67ddcccc743d3ee22c2d619f21710118"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply CompLt.",
                        "VernacExtend",
                        "f51f427b9fd49a1f6a09fea8200e11fd62dcaa8c"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.compare_lt_iff in H.",
                        "VernacExtend",
                        "41b42f7cb013df0d3af238dc3c65e4fb051377c7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "assert (H : Gt = Gt) by reflexivity.",
                        "VernacExtend",
                        "dffa8f5c3cf75e0ff0e391591489f7b1da758882"
                    ]
                },
                {
                    "command": [
                        "apply HGt in H; clear HEq; clear HLt; clear HGt.",
                        "VernacExtend",
                        "2530496036163865e67f845b1d1d1c527d0f38b6"
                    ]
                },
                {
                    "command": [
                        "apply Pos.compare_gt_iff in H.",
                        "VernacExtend",
                        "bef001685a04eacd1b4bfa5ac54a906e47e8d115"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply CompGt.",
                        "VernacExtend",
                        "36fc323f7f1b077adb17fd9dcafe9a5ddd4d968c"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.compare_gt_iff in H.",
                        "VernacExtend",
                        "242fc55ac545b42d264eb5686cc8164b39528939"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.ltb_lt in H.",
                        "VernacExtend",
                        "8676b73a00a5021943e57fc330e45d8976dfc3ce"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqST_dec",
            "line_nb": 839,
            "steps": [
                {
                    "command": [
                        "intros x y; case_eq (eqbST x y); intro HEq.",
                        "VernacExtend",
                        "f7cb354594302f248f24788444ba0d07cc1d60c8"
                    ]
                },
                {
                    "command": [
                        "apply eqbST_eqST in HEq; left; auto.",
                        "VernacExtend",
                        "3b4b7b877ee831edd803caeafd1e34b26bf03039"
                    ]
                },
                {
                    "command": [
                        "right; intro HEqST; apply eqbST_eqST in HEqST; rewrite HEq in *; discriminate.",
                        "VernacExtend",
                        "b0e1bff35b18c265550143b34fe82a2a15635d16"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "STempty_b",
            "line_nb": 847,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "STexists_mem_4",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "intros f s HEx; induction s; simpl in *; [discriminate|].",
                        "VernacExtend",
                        "babc8606a079933587e90e48d7e46c8341a4f491"
                    ]
                },
                {
                    "command": [
                        "case_eq (f a); intro Hfa; rewrite Hfa in *; simpl in *.",
                        "VernacExtend",
                        "53690f1d1dbbd1f4c03ea9ad53e6695ae51c7390"
                    ]
                },
                {
                    "command": [
                        "exists a; elim (eqST_dec a a); [intuition|intro H; exfalso; apply H; unfold eqST; apply eqListRefl].",
                        "VernacExtend",
                        "7d4ba70a99425921fb658d88e8dbf6ebecc92ba9"
                    ]
                },
                {
                    "command": [
                        "destruct (IHs HEx) as [x [Hmem Hfx]]; exists x.",
                        "VernacExtend",
                        "fb9b7023ab5de25deb5651fb0469b511ce5d812b"
                    ]
                },
                {
                    "command": [
                        "elim (eqST_dec a x); intro; intuition.",
                        "VernacExtend",
                        "a6998fd0907e628c0784688281f488a69323fbbb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "STadd_iff",
            "line_nb": 858,
            "steps": [
                {
                    "command": [
                        "intros; simpl; elim (eqST_dec x y);intro;intuition.",
                        "VernacExtend",
                        "5db51beb4485b45ce821f301995ad878b7ea4232"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}