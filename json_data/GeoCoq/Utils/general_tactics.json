{
    "filename": "Utils/general_tactics.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Ltac ex_elim H x := elim H; intros x ; intro; clear H.",
            "VernacExtend",
            "4ad780de21e1cfda21a244357a5ffc1c49a0e279"
        ],
        [
            "Ltac DecompEx H P := elim H;intro P;intro;clear H.",
            "VernacExtend",
            "6892238d2f69b1fc9ed6100fda6b0d0b93de7748"
        ],
        [
            "Ltac DecompExAnd H P := elim H;intro P;let id:=fresh in (intro id;decompose [and] id;clear id;clear H).",
            "VernacExtend",
            "b1a84cd8bb81b58d0feb1d173288b7e83ef5082b"
        ],
        [
            "Ltac exist_hyp t := match goal with | H1:t |- _ => idtac end.",
            "VernacExtend",
            "79daf89e6754925ab339dee3d0f2e9dbd4095294"
        ],
        [
            "Ltac hyp_of_type t := match goal with | H1:t |- _ => H1 end.",
            "VernacExtend",
            "0fa39cd697c180bb1c6e5445261faffb2d914c18"
        ],
        [
            "Ltac clean_duplicated_hyps := repeat match goal with | H:?X1 |- _ => clear H; exist_hyp X1 end.",
            "VernacExtend",
            "0c8d392461970693fd99a25da32cdb764b3d4a11"
        ],
        [
            "Ltac suppose H := cut H;[intro|idtac].",
            "VernacExtend",
            "afa170b5931c311c2722141dadbe184eb360bfca"
        ],
        [
            "Ltac not_exist_hyp t := match goal with | H1:t |- _ => fail 2 end || idtac.",
            "VernacExtend",
            "b8b109cbd63e94dea883c8f837c23806f2946d9a"
        ],
        [
            "Ltac DecompAndAll := repeat match goal with | H:(?X1 /\\ ?X2) |- _ => decompose [and] H;clear H end.",
            "VernacExtend",
            "ef2e185bc94a3764fd86d62408dc1c9de74c3881"
        ],
        [
            "Ltac assert_if_not_exist H := not_exist_hyp H;assert H.",
            "VernacExtend",
            "404a56bd35fd355dc684d28e175687334deb1956"
        ],
        [
            "Ltac absurde := match goal with |H : (?X <> ?X) |- _ => apply False_ind; apply H; reflexivity end.",
            "VernacExtend",
            "d56fe9ef244fcb7da1d5bfd8f00e6b3294f35039"
        ],
        [
            "Ltac spliter := repeat match goal with | H:(?X1 /\\ ?X2) |- _ => induction H end.",
            "VernacExtend",
            "875cfce79c313649f968ffc743b2209132c50d00"
        ],
        [
            "Ltac ex_and H x := elim H; intro x; intros; clear H;spliter.",
            "VernacExtend",
            "a225549cd387d00eecb26b688c55b6190fcc2706"
        ],
        [
            "Ltac use H := decompose [and] H;clear H.",
            "VernacExtend",
            "b40fe51691273a2ec75faede6c6a30f396dfd6f9"
        ],
        [
            "Ltac try_or T := match goal with | |- ?A \\/ ?B => (left; try_or T) || (right;try_or T) | |- _ => T end.",
            "VernacExtend",
            "781a6e31bacfae6d1138e8b218ee6e99856bd9b2"
        ],
        [
            "Tactic Notation \"generalizes\" hyp(X) := generalize X; clear X.",
            "VernacExtend",
            "f67a181a46e8c8010dae3477ff8193594c6b7abc"
        ],
        [
            "Ltac sort_tactic := try match goal with H: ?T |- _ => match type of T with Prop => generalizes H; (try sort_tactic); intro end end.",
            "VernacExtend",
            "c2e4dc14914031360486636456418b3638586655"
        ],
        [
            "Tactic Notation \"sort\" := sort_tactic.",
            "VernacExtend",
            "e6a6f3b1f47b63b8312ca33a8a738fce74ef72cc"
        ],
        [
            "Definition ltac_something (P:Type) (e:P) := e.",
            "VernacDefinition",
            "80bab0ac9239eb8cadd53f478e29c33c1e815738"
        ],
        [
            "Notation \"'Something'\" := (@ltac_something _ _).",
            "VernacNotation",
            "9be766e9d88d204b5e249bb1c32ce92a81a33db6"
        ],
        [
            "Lemma ltac_something_eq : forall (e:Type), e = (@ltac_something _ e).",
            "VernacStartTheoremProof",
            "f7e6ac04aea3b8167f01f52d6aee2011f19e4098"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltac_something_hide : forall (e:Type), e -> (@ltac_something _ e).",
            "VernacStartTheoremProof",
            "2bedbedb268607773a3cfe1377e7eb1a5661eb5a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltac_something_show : forall (e:Type), (@ltac_something _ e) -> e.",
            "VernacStartTheoremProof",
            "da2a9aff7860a78a62640abb764550551510a55b"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Tactic Notation \"hide_def\" hyp(x) := let x' := constr:(x) in let T := eval unfold x in x' in change T with (@ltac_something _ T) in x.",
            "VernacExtend",
            "42ca6ee5b40d52a23fcf09cebd38cc05c542f17c"
        ],
        [
            "Tactic Notation \"show_def\" hyp(x) := let x' := constr:(x) in let U := eval unfold x in x' in match U with @ltac_something _ ?T => change U with T in x end.",
            "VernacExtend",
            "a2553b092ebd78616e348c80c32afa314ef5da73"
        ],
        [
            "Tactic Notation \"show_def\" := unfold ltac_something.",
            "VernacExtend",
            "e69f0c04e5558d79299afd90d2dbce4e367ee5de"
        ],
        [
            "Tactic Notation \"show_def\" \"in\" \"*\" := unfold ltac_something in *.",
            "VernacExtend",
            "895503ad61a64750b11d1eaef2cb4130060f0217"
        ],
        [
            "Tactic Notation \"hide_defs\" := repeat match goal with H := ?T |- _ => match T with | @ltac_something _ _ => fail 1 | _ => change T with (@ltac_something _ T) in H end end.",
            "VernacExtend",
            "c077f5acb53abf95ed7eff00e8346181cb9ff3e3"
        ],
        [
            "Tactic Notation \"show_defs\" := repeat match goal with H := (@ltac_something _ ?T) |- _ => change (@ltac_something _ T) with T in H end.",
            "VernacExtend",
            "2354ecf6d05b9e2bf2c53fa05eabadbfa23ee74f"
        ],
        [
            "Tactic Notation \"show_hyp\" hyp(H) := apply ltac_something_show in H.",
            "VernacExtend",
            "0ec43853ce4a6b068e332c341344c8326399bbb3"
        ],
        [
            "Tactic Notation \"hide_hyp\" hyp(H) := apply ltac_something_hide in H.",
            "VernacExtend",
            "50dd59b0507886cca98c0231604e52d586b6ece4"
        ],
        [
            "Tactic Notation \"show_hyps\" := repeat match goal with H: @ltac_something _ _ |- _ => show_hyp H end.",
            "VernacExtend",
            "c99aa28bd5d97fee2dbf1f78c17fa7708c1aa352"
        ],
        [
            "Tactic Notation \"hide_hyps\" := repeat match goal with H: ?T |- _ => match type of T with | Prop => match T with | @ltac_something _ _ => fail 2 | _ => hide_hyp H end | _ => fail 1 end end.",
            "VernacExtend",
            "94361cd35c0be0df62b9af65be40a0f1940bb026"
        ],
        [
            "Tactic Notation \"hide\" hyp(H) := first [hide_def H | hide_hyp H].",
            "VernacExtend",
            "688c500c7fcdf11274294bed993f34857301b086"
        ],
        [
            "Tactic Notation \"show\" hyp(H) := first [show_def H | show_hyp H].",
            "VernacExtend",
            "ee9feb826cb023f7f72671c418fb5ef8f3973c94"
        ],
        [
            "Tactic Notation \"hide_all\" := hide_hyps; hide_defs.",
            "VernacExtend",
            "209ae758c1576fe09f48e4e5fa3c8d219785e31d"
        ],
        [
            "Tactic Notation \"show_all\" := unfold ltac_something in *.",
            "VernacExtend",
            "31cbd71155ee50f330d78d82b60a79085ef81098"
        ],
        [
            "Tactic Notation \"hide_term\" constr(E) := change E with (@ltac_something _ E).",
            "VernacExtend",
            "8f76c4f3597917c2c0ce65f762ff633f06e24bec"
        ],
        [
            "Tactic Notation \"show_term\" constr(E) := change (@ltac_something _ E) with E.",
            "VernacExtend",
            "f67473adfe436e5480c4069bd1fc8205b850ec6f"
        ],
        [
            "Tactic Notation \"show_term\" := unfold ltac_something.",
            "VernacExtend",
            "13a16f8524ef119e38d1b22251899acf4d546cae"
        ],
        [
            "Tactic Notation \"hide_term\" constr(E) \"in\" hyp(H) := change E with (@ltac_something _ E) in H.",
            "VernacExtend",
            "5598aedec7bcbc8098d4c6e16cfd1aaf11285727"
        ],
        [
            "Tactic Notation \"show_term\" constr(E) \"in\" hyp(H) := change (@ltac_something _ E) with E in H.",
            "VernacExtend",
            "79da5d56b935e0026cef3c55bb0ef1b2c7bf3fdf"
        ],
        [
            "Tactic Notation \"show_term\" \"in\" hyp(H) := unfold ltac_something in H.",
            "VernacExtend",
            "ef8a67c48858eff71469e0f7a195b670833fd162"
        ]
    ],
    "proofs": [
        {
            "name": "ltac_something_eq",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltac_something_hide",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltac_something_show",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}