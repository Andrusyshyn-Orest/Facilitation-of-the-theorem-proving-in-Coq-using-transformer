{
    "filename": "Utils/arity.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import NArith.",
            "VernacRequire",
            "94ad0f31c6e8f77c89e55924450f512e031ec933"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import Sorting.",
            "VernacRequire",
            "4b941088881c86fc9cdf29a554745602ff99df7f"
        ],
        [
            "Require Import Coq.Program.Equality.",
            "VernacRequire",
            "637e8bbba214905e0c003754c6798a3d83ee6b7b"
        ],
        [
            "Lemma minus_n_0 : forall n, n-0 = n.",
            "VernacStartTheoremProof",
            "442f84bf9b61db7dae5fffbe0ac911051f232ed1"
        ],
        [
            "induction n; trivial.",
            "VernacExtend",
            "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma plus_0_n : forall n, 0+n = n.",
            "VernacStartTheoremProof",
            "2893ebea63a8a0dd83c53e9dd47846cca525a39f"
        ],
        [
            "induction n; trivial.",
            "VernacExtend",
            "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma plus_n_0 : forall n, n+0 = n.",
            "VernacStartTheoremProof",
            "388a4e342ca05daf9fe737eb902ea4ba398912fb"
        ],
        [
            "induction n; trivial.",
            "VernacExtend",
            "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
        ],
        [
            "simpl; rewrite IHn; reflexivity.",
            "VernacExtend",
            "7cc744d90f0b70e1031c445b5570cf55ceee6ae5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma plus_n_1 : forall n, n+1 = S n.",
            "VernacStartTheoremProof",
            "099b678ab9cfbba9e2a5f47fe1a3680926c08c5f"
        ],
        [
            "induction n; trivial.",
            "VernacExtend",
            "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
        ],
        [
            "simpl; rewrite IHn; reflexivity.",
            "VernacExtend",
            "7cc744d90f0b70e1031c445b5570cf55ceee6ae5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma minus_n1_n2_0 : forall n1 n2, n1+n2-0 = n1+n2.",
            "VernacStartTheoremProof",
            "60441e6f65eaf7f4ec0f86f2ae3602ab211f03d8"
        ],
        [
            "induction n1; induction n2; trivial.",
            "VernacExtend",
            "34b207c7548beebbd54b864e94e233c1d5b03058"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Fixpoint arity (T:Type) (n:nat) := match n with | 0 => Prop | S p => T -> arity T p end.",
            "VernacFixpoint",
            "bfef4986974d495b53d256e2a00943887004c10d"
        ],
        [
            "Fixpoint cartesianPowerAux (T:Type) (n:nat) := match n with | 0 => T | S p => (T * cartesianPowerAux T p)%type end.",
            "VernacFixpoint",
            "7c9f5bac695a3a73024f54fb5bf49e74cbb99dc4"
        ],
        [
            "Definition cartesianPower T n := cartesianPowerAux T (n-1).",
            "VernacDefinition",
            "41f1f398fcbc2e13f246a360cdac3e2b3d074f59"
        ],
        [
            "Definition headCP {T:Type} {n:nat} (cp : cartesianPower T (S n)) : T.",
            "VernacDefinition",
            "3eba54db87369a9cadfa7d9139c32ef41141bfc7"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact cp.",
            "VernacExtend",
            "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
        ],
        [
            "exact (fst cp).",
            "VernacExtend",
            "dd6fe8f9fa5d0e8790f96b0c2205656840119c75"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition headCPbis {T:Type} {n:nat} (cp : cartesianPower T (S n)) : cartesianPower T 1.",
            "VernacDefinition",
            "dde3dac6c17c2faf37409d88016adad331c272fd"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact cp.",
            "VernacExtend",
            "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
        ],
        [
            "exact (fst cp).",
            "VernacExtend",
            "dd6fe8f9fa5d0e8790f96b0c2205656840119c75"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition tailCP {T:Type} {n:nat} (cp : cartesianPower T (S (S n))) : (cartesianPower T (S n)).",
            "VernacDefinition",
            "0e6183369d434e22a770635ff07281ba6cbd8588"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact (snd cp).",
            "VernacExtend",
            "f7b414481519e8c94217a4ea999e3cfe4c765c8e"
        ],
        [
            "exact (snd cp).",
            "VernacExtend",
            "f7b414481519e8c94217a4ea999e3cfe4c765c8e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition tailDefaultCP {T:Type} {n:nat} (cp : cartesianPower T (S n)) (Default : cartesianPower T n) : (cartesianPower T n).",
            "VernacDefinition",
            "b197c389d5cb9179101aeef864408ba6c5983c41"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact Default.",
            "VernacExtend",
            "ac24d2bfc1bde36ccc33289bb14eae3223745f2e"
        ],
        [
            "exact (tailCP cp).",
            "VernacExtend",
            "0c782ae080e0e99645db353883d8f85379fa5eb2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition allButLastCP {T:Type} {n:nat} (cp : cartesianPower T (S (S n))) : (cartesianPower T (S n)).",
            "VernacDefinition",
            "e3fd49c0a5f1dcf236073ce6da21d0e9016c3501"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact (headCP cp).",
            "VernacExtend",
            "3f67cb569526207a09f6757d05cf515c951e1be4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact (headCP cp).",
            "VernacExtend",
            "3f67cb569526207a09f6757d05cf515c951e1be4"
        ],
        [
            "unfold cartesianPower in IHn.",
            "VernacExtend",
            "22735a48e1b984dcf6673fd6485868f9653ce774"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite minus_n_0 in IHn.",
            "VernacExtend",
            "ea41ec06a8f67595af1d52b2d36f2d0f8d19d081"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "exact (tailCP cp).",
            "VernacExtend",
            "0c782ae080e0e99645db353883d8f85379fa5eb2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma allButLastCPTl {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S (S n)))), allButLastCP (tailCP cp) = tailCP (allButLastCP cp).",
            "VernacStartTheoremProof",
            "e53e8931c36e413d9dff373556c1f6266ccd15e8"
        ],
        [
            "intro cp; induction n; simpl; reflexivity.",
            "VernacExtend",
            "a71d2d551a76668e454edbd22fa95b8a521131fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lastCP {T:Type} {n:nat} (cp : cartesianPower T (S n)) : T.",
            "VernacDefinition",
            "9a72c7c88818bb55f37175dd5151f2d2a41e37e1"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact cp.",
            "VernacExtend",
            "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "exact (tailCP cp).",
            "VernacExtend",
            "0c782ae080e0e99645db353883d8f85379fa5eb2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma lastCPTl {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), lastCP cp = lastCP (tailCP cp).",
            "VernacStartTheoremProof",
            "91f1f8405a5f76ef1ba384ef1614b8e97282193d"
        ],
        [
            "intro cp; induction n; simpl; reflexivity.",
            "VernacExtend",
            "a71d2d551a76668e454edbd22fa95b8a521131fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CP_ind {T:Type} {n : nat} : forall (cp cp' : cartesianPower T (S (S n))), headCP cp = headCP cp' -> tailCP cp = tailCP cp' -> cp = cp'.",
            "VernacStartTheoremProof",
            "9b05d3d7d70220bfe55fd5648fba74edb4ed6ed9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n; simpl in *; apply injective_projections; assumption.",
            "VernacExtend",
            "8312f8a8c51d9f403cf63bf691f46b937db7d7b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CPPair {T : Type} : forall (cp : cartesianPower T 2), cp = (fst cp, snd cp).",
            "VernacDefinition",
            "33e27b90106eeae277937495e5bbbd654227dc52"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "apply CP_ind; simpl; reflexivity.",
            "VernacExtend",
            "aaee9b56a120ea0c39fc48226cebecec3e1290cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tailCPbis {T:Type} {n:nat} m1 m2 (cp : cartesianPower T m1) : (S (S n)) = m1 -> (S n) = m2 -> (cartesianPower T m2).",
            "VernacDefinition",
            "5aa3179f9d784617845176838bcdfa0b0ce3a248"
        ],
        [
            "intros Hm1 Hm2.",
            "VernacExtend",
            "e2704b5f103ecdd578516abc71a20a088fddee29"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "exact (tailCP cp).",
            "VernacExtend",
            "0c782ae080e0e99645db353883d8f85379fa5eb2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition consHeadCP {T:Type} {n:nat} (t : T) (cp : cartesianPower T n) : (cartesianPower T (S n)).",
            "VernacDefinition",
            "9f92545973158bef1c3469bfc3a232cda7add142"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact t.",
            "VernacExtend",
            "17416f87623794c32a48f94a10f9fd8fd82da9f1"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact t.",
            "VernacExtend",
            "17416f87623794c32a48f94a10f9fd8fd82da9f1"
        ],
        [
            "unfold cartesianPower in cp.",
            "VernacExtend",
            "76188d16689ee4014694a16f3c7822724c5a2cd9"
        ],
        [
            "simpl in cp.",
            "VernacExtend",
            "de0a88e0341810116979e56a8dc62e388cfec3f9"
        ],
        [
            "rewrite minus_n_0 in cp.",
            "VernacExtend",
            "0d201f0bb8ac3117ad9c58c4bd44fd7b75c6414c"
        ],
        [
            "exact cp.",
            "VernacExtend",
            "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma consHeadCPHd {T:Type} {n:nat} : forall (cp : cartesianPower T n) t, headCP (consHeadCP t cp) = t.",
            "VernacStartTheoremProof",
            "f559b1a692d48a9acc8bd51e8cb5fa987b35e9e5"
        ],
        [
            "intro cp; induction n; simpl; reflexivity.",
            "VernacExtend",
            "a71d2d551a76668e454edbd22fa95b8a521131fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consHeadCPTl {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) t, tailCP (consHeadCP t cp) = cp.",
            "VernacStartTheoremProof",
            "da70e1c87f2451f6a6a8bdec21b69a702c252c13"
        ],
        [
            "intro cp; induction n; simpl; reflexivity.",
            "VernacExtend",
            "a71d2d551a76668e454edbd22fa95b8a521131fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consHeadCPOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), cp = consHeadCP (headCP cp) (tailCP cp).",
            "VernacStartTheoremProof",
            "3a9591e8d0fb4b40c8218d6a81b33751b9639633"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply CPPair.",
            "VernacExtend",
            "1e49f95e0733d290d34eac6a1a6d6b72a0f79fc1"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite consHeadCPTl; reflexivity.",
            "VernacExtend",
            "72891262049cbc3934dfd006174104e0f01751a3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition consTailCP {T:Type} {n:nat} (cp : cartesianPower T n) (t : T) : (cartesianPower T (S n)).",
            "VernacDefinition",
            "58077ef248ec9b90c864d7cb25483506dbfd3b84"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact t.",
            "VernacExtend",
            "17416f87623794c32a48f94a10f9fd8fd82da9f1"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact (cp, t).",
            "VernacExtend",
            "668a640423d97ecd32bc5a7e0353862318870bd8"
        ],
        [
            "clear IHn0.",
            "VernacExtend",
            "8baf6e7884357a18bf8e61c467f230bd9a632255"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact (headCP cp).",
            "VernacExtend",
            "3f67cb569526207a09f6757d05cf515c951e1be4"
        ],
        [
            "exact (IHn (tailCP cp)).",
            "VernacExtend",
            "c8df458f9121fe9a6b2d9a46103d272c237c7728"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma consTailCPTl {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) t, tailCP (consTailCP cp t) = consTailCP (tailCP cp) t.",
            "VernacStartTheoremProof",
            "eb8737e68723ebfb7396595e0d263405b4c9591b"
        ],
        [
            "intro cp; induction n; simpl; reflexivity.",
            "VernacExtend",
            "a71d2d551a76668e454edbd22fa95b8a521131fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailCPOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), cp = consTailCP (allButLastCP cp) (lastCP cp).",
            "VernacStartTheoremProof",
            "c32f4b1524d640564227e06c029a63037b178563"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply CPPair.",
            "VernacExtend",
            "1e49f95e0733d290d34eac6a1a6d6b72a0f79fc1"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "assert (H := IHn (tailCP cp)).",
            "VernacExtend",
            "cfc2d8c58bfc0aa50cf2c939ea7e379c1c79ee3e"
        ],
        [
            "rewrite <- lastCPTl in H.",
            "VernacExtend",
            "ca6eb93a1c9143b9d0c4677bedb0edadb3187d02"
        ],
        [
            "rewrite allButLastCPTl in H.",
            "VernacExtend",
            "246ad25fb80069cf598b01864ed78ceb1d908b7e"
        ],
        [
            "rewrite <- consTailCPTl in H.",
            "VernacExtend",
            "6ed1a740415e1f7b7fbc2a852a9467022e7b3901"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailCPAbl {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) t, allButLastCP (consTailCP cp t) = cp.",
            "VernacStartTheoremProof",
            "ff250d29537cef348b90cb70b299f3770ed38a48"
        ],
        [
            "intros cp t; induction n; try (simpl; reflexivity).",
            "VernacExtend",
            "e61dc7709759f84a54d553b65d21524dc03b72f5"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite <- IHn.",
            "VernacExtend",
            "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
        ],
        [
            "rewrite <- consTailCPTl.",
            "VernacExtend",
            "cef033f508b727aab71816cee58c17eed891b5c2"
        ],
        [
            "rewrite allButLastCPTl.",
            "VernacExtend",
            "86d3d097ec58d0d7402cfca99b57ae523f047101"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailCPTlD {T:Type} {n:nat} : forall (cp : cartesianPower T n) t, tailDefaultCP (consHeadCP t cp) cp = cp.",
            "VernacStartTheoremProof",
            "7bd9623d055a4125d4828d8c318168a1c1316df0"
        ],
        [
            "intros cp t; induction n; try (simpl; reflexivity).",
            "VernacExtend",
            "e61dc7709759f84a54d553b65d21524dc03b72f5"
        ],
        [
            "induction n; simpl; reflexivity.",
            "VernacExtend",
            "df241b5c60311830e909478d01091c61621e541b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consHdTlTlHd {T:Type} {n:nat} : forall (F L : T) (X : cartesianPower T n), consHeadCP F (consTailCP X L) = consTailCP (consHeadCP F X) L.",
            "VernacStartTheoremProof",
            "8d8e7833f6ed9be702e267a7196f1721a127e67d"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "intros F L X.",
            "VernacExtend",
            "3b1477430684db11c7b927adb06cbd7cb167e824"
        ],
        [
            "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
            "VernacExtend",
            "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "intros F L X.",
            "VernacExtend",
            "3b1477430684db11c7b927adb06cbd7cb167e824"
        ],
        [
            "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
            "VernacExtend",
            "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
        ],
        [
            "intros F L X.",
            "VernacExtend",
            "3b1477430684db11c7b927adb06cbd7cb167e824"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "assert (H := consHeadCPOK X); rewrite H; clear H.",
            "VernacExtend",
            "5f8fac1798342f128ff1916404d7b28fad68347c"
        ],
        [
            "rewrite consHeadCPTl.",
            "VernacExtend",
            "5285d85f246deaf1faa34f8659332af505ced706"
        ],
        [
            "rewrite consTailCPTl.",
            "VernacExtend",
            "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
        ],
        [
            "rewrite consHeadCPTl.",
            "VernacExtend",
            "5285d85f246deaf1faa34f8659332af505ced706"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTlHdHdTl {T:Type} {n:nat} : forall (A B C : T) (X : cartesianPower T n), consHeadCP A (consHeadCP B (consTailCP X C)) = consTailCP (consHeadCP A (consHeadCP B X)) C.",
            "VernacStartTheoremProof",
            "42122abace3c725c7d4a9f0f92b0f3fde14afb77"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "intros A B C X.",
            "VernacExtend",
            "2aa97f895925ac1cb9b3658e555e9d8382d30449"
        ],
        [
            "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
            "VernacExtend",
            "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "intros A B C X.",
            "VernacExtend",
            "2aa97f895925ac1cb9b3658e555e9d8382d30449"
        ],
        [
            "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
            "VernacExtend",
            "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
        ],
        [
            "intros A B C X.",
            "VernacExtend",
            "2aa97f895925ac1cb9b3658e555e9d8382d30449"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "assert (H := consHeadCPOK X); rewrite H; clear H.",
            "VernacExtend",
            "5f8fac1798342f128ff1916404d7b28fad68347c"
        ],
        [
            "rewrite consHeadCPTl.",
            "VernacExtend",
            "5285d85f246deaf1faa34f8659332af505ced706"
        ],
        [
            "rewrite consTailCPTl.",
            "VernacExtend",
            "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
        ],
        [
            "rewrite consHeadCPTl.",
            "VernacExtend",
            "5285d85f246deaf1faa34f8659332af505ced706"
        ],
        [
            "rewrite <- IHn.",
            "VernacExtend",
            "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "do 2 (rewrite consHeadCPTl).",
            "VernacExtend",
            "a5f9347bdd0a4e7f6382b23fb40bf5ee7f99ccdc"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite consHeadCPTl.",
            "VernacExtend",
            "5285d85f246deaf1faa34f8659332af505ced706"
        ],
        [
            "rewrite consTailCPTl.",
            "VernacExtend",
            "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite consHeadCPTl; reflexivity.",
            "VernacExtend",
            "72891262049cbc3934dfd006174104e0f01751a3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CPToList {T:Type} {n:nat} (cp : cartesianPower T n) : list T.",
            "VernacDefinition",
            "41de45aa2cf10a90cd297ff53aae3aab70cce45a"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact nil.",
            "VernacExtend",
            "221463c73c88586bbdeb2d7fddb75313a7dd5887"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exact (cons cp nil).",
            "VernacExtend",
            "a2d513a241f174aab3cf919451d62d0ad2ce3dc7"
        ],
        [
            "apply cons.",
            "VernacExtend",
            "6e3fa01c803d31f81a7ff1df9b21bac128cbbd28"
        ],
        [
            "exact (headCP cp).",
            "VernacExtend",
            "3f67cb569526207a09f6757d05cf515c951e1be4"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "exact (tailCP cp).",
            "VernacExtend",
            "0c782ae080e0e99645db353883d8f85379fa5eb2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition InCP {T:Type} {n:nat} p (cp : cartesianPower T n) := In p (CPToList cp).",
            "VernacDefinition",
            "02c01bc2c6604883ca88c9e01a38504e641fa3ac"
        ],
        [
            "Lemma InCPOK {T:Type} {n:nat} : forall p (cp : cartesianPower T (S (S n))), InCP p cp <-> ((p = headCP cp) \\/ InCP p (tailCP cp)).",
            "VernacStartTheoremProof",
            "810b4916d59a332960d6a84356f3e15244c41e7e"
        ],
        [
            "intros p cp; unfold InCP; induction n; simpl.",
            "VernacExtend",
            "0e6577d8f2140819e1c544c6fa94c8032af72ac6"
        ],
        [
            "split; intro H.",
            "VernacExtend",
            "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "left; subst; reflexivity.",
            "VernacExtend",
            "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "left; subst; reflexivity.",
            "VernacExtend",
            "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "split; intro H.",
            "VernacExtend",
            "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "left; subst; reflexivity.",
            "VernacExtend",
            "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "left; subst; reflexivity.",
            "VernacExtend",
            "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lastCPIn {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)), InCP (lastCP cp) cp.",
            "VernacStartTheoremProof",
            "c0bae7444e0d07edc1265caa153a83930227da4e"
        ],
        [
            "unfold InCP.",
            "VernacExtend",
            "df1188e79a6d40e6ab2452b5fd80a8a17374515e"
        ],
        [
            "intro cp; induction n.",
            "VernacExtend",
            "4727b576acbea676c732194c48e182e0d8bce9c7"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (H := IHn (tailCP cp)).",
            "VernacExtend",
            "cfc2d8c58bfc0aa50cf2c939ea7e379c1c79ee3e"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition nthCP {T:Type} {m:nat} (n : nat) (cp : cartesianPower T m) (Default : T) := nth (n-1) (CPToList cp) Default.",
            "VernacDefinition",
            "423c44aaec0988b114121c53c20b2872cfa3d973"
        ],
        [
            "Lemma CPToListOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), CPToList cp = cons (headCP cp) (CPToList (tailCP cp)).",
            "VernacStartTheoremProof",
            "c87804bc3f3ee2c8496403c1d93a57d1f7c62860"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLHdTlOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), CPToList cp = ((headCP cp) :: nil) ++ CPToList (tailCP cp).",
            "VernacStartTheoremProof",
            "e9e31488afdf61ee7fca4e7c5e70517321dcbd30"
        ],
        [
            "induction n; intro cp; simpl; reflexivity.",
            "VernacExtend",
            "e5be823c9d7b21d7302c98825d35d3249889c599"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) t, CPToList (consTailCP cp t) = CPToList cp ++ t :: nil.",
            "VernacStartTheoremProof",
            "022d11a18cbd7bf41318e66824a1e84ff8a094bf"
        ],
        [
            "induction n; intros cp t.",
            "VernacExtend",
            "04d9458a3db475d480ddabe78ce7874d3b5302fe"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite CPToListOK.",
            "VernacExtend",
            "eef100557e9be0c6aaae82db33eb1f15d005d960"
        ],
        [
            "assert (H : headCP (consTailCP cp t) = headCP cp) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "966800d2319b1cc7ac3ca15dee7223f5c70a0736"
        ],
        [
            "assert (H : tailCP (consTailCP cp t) = (consTailCP (tailCP cp) t)) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "fe0cd339b1b16085a539907067f4f97272e394a9"
        ],
        [
            "rewrite IHn.",
            "VernacExtend",
            "ec9472e508d0ba82a8f6be939d2e4d39f35c3667"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InNth {T:Type} {n:nat} : forall (cp : cartesianPower T n) (t Default : T), InCP t cp -> (exists id, id >= 1 /\\ id <= n /\\ t = nthCP id cp Default).",
            "VernacStartTheoremProof",
            "4a6f6ccbc9887d761d9af8566d44d1456596517b"
        ],
        [
            "induction n; intros cp t Default HIn.",
            "VernacExtend",
            "176b298541349c306c4634ad31c156dd8a0236bd"
        ],
        [
            "unfold InCP in HIn.",
            "VernacExtend",
            "e5d26015d2e77c81bd42744c6bdc7e75b5d74f82"
        ],
        [
            "simpl in HIn.",
            "VernacExtend",
            "af19e5789c5bd9adae0bce08955f8a2a5a9a0a1c"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "exists 1; try intuition.",
            "VernacExtend",
            "85ac0f2393e26e9eb484dcef1748c8c094ac0d3d"
        ],
        [
            "unfold nthCP; simpl.",
            "VernacExtend",
            "fd0c2a3ff97e003f496d89910353821dfc69db64"
        ],
        [
            "unfold InCP in HIn; simpl in HIn.",
            "VernacExtend",
            "ee1c91691c39a44274211820d9c1f2f701eb825d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear IHn0.",
            "VernacExtend",
            "8baf6e7884357a18bf8e61c467f230bd9a632255"
        ],
        [
            "apply InCPOK in HIn.",
            "VernacExtend",
            "827e18e8f2c3cb87bf159d43eae1b086072ea3d1"
        ],
        [
            "elim HIn; clear HIn; intro HIn.",
            "VernacExtend",
            "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
        ],
        [
            "exists 1; unfold nthCP; simpl; intuition.",
            "VernacExtend",
            "9d63009ff7e5bf174ad08cf68d1282f6ca100db9"
        ],
        [
            "assert (H := IHn (tailCP cp) t Default).",
            "VernacExtend",
            "87b8daa51171dc293ece9c2c6a378643dc953494"
        ],
        [
            "apply H in HIn; clear H.",
            "VernacExtend",
            "7f175d4313eb1cec215de6c0f56197dcee42c16e"
        ],
        [
            "destruct HIn as [id [Hge [Hle HEq]]].",
            "VernacExtend",
            "e697306619226ade85e968da92b16de0b03e5bed"
        ],
        [
            "unfold nthCP in *.",
            "VernacExtend",
            "3ca34627b20e61ae6fdc6827f762133101a3cb54"
        ],
        [
            "exists (S id); try intuition.",
            "VernacExtend",
            "b5eb6b22ebe43f38e3f66d9f69aad27b4b847f1e"
        ],
        [
            "assert (H := app_nth2 ((headCP cp) :: nil) (CPToList (tailCP cp)) Default Hge).",
            "VernacExtend",
            "d63872c8387a317e4083a6ac1ddb89693955685a"
        ],
        [
            "rewrite CPToListOK.",
            "VernacExtend",
            "eef100557e9be0c6aaae82db33eb1f15d005d960"
        ],
        [
            "assert (H' : (headCP cp :: nil) ++ CPToList (tailCP cp) = (headCP cp :: CPToList (tailCP cp))) by (simpl; reflexivity); rewrite <- H'; clear H'.",
            "VernacExtend",
            "eef5af93cf4cb0febe5787db214fbdf6dfe30e08"
        ],
        [
            "assert (H' : (S id - 1) = id) by (simpl; rewrite minus_n_0; reflexivity); rewrite H'; clear H'.",
            "VernacExtend",
            "9873aea1c288b7135c71f191d9034505c863ff8c"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply HEq.",
            "VernacExtend",
            "d1309a313f733c937c7fb937efef6ad86e9f873a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthFirst {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) (t Default : T), t = nthCP 1 cp Default -> t = headCP cp.",
            "VernacStartTheoremProof",
            "66a212efda1e922f932e6b993c3677d8ebb98db5"
        ],
        [
            "induction n; intros cp t Default Hnth.",
            "VernacExtend",
            "31afe64c3b22234d17574339e84ea4c45d29f3fa"
        ],
        [
            "unfold nthCP in Hnth.",
            "VernacExtend",
            "bb202053a9318ee3fe6b0b02731714039ef34737"
        ],
        [
            "simpl in Hnth.",
            "VernacExtend",
            "40a304d854b9d6857e36e0e042846658f7cdf4c1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold nthCP in Hnth.",
            "VernacExtend",
            "bb202053a9318ee3fe6b0b02731714039ef34737"
        ],
        [
            "simpl in Hnth.",
            "VernacExtend",
            "40a304d854b9d6857e36e0e042846658f7cdf4c1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lengthOfCPToList {T:Type} {n:nat} : forall (cp : cartesianPower T n), n = length (CPToList cp).",
            "VernacStartTheoremProof",
            "78bc64b6753f59064ef32c9f9561e308370539e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply eq_S.",
            "VernacExtend",
            "8ef0b219ea0189c2d80bb55d03c4c9f24beca469"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma lastTailOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), lastCP cp = lastCP (tailCP cp).",
            "VernacStartTheoremProof",
            "5767b85098d40d8fa01c29d9623f869ef0394f5d"
        ],
        [
            "induction n; intro cp; simpl; reflexivity.",
            "VernacExtend",
            "e5be823c9d7b21d7302c98825d35d3249889c599"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailCPLast {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) t, lastCP (consTailCP cp t) = t.",
            "VernacStartTheoremProof",
            "9ba31e9f04310bef6281e7a339afecfc5ea7c731"
        ],
        [
            "intros cp t; induction n; try (simpl; reflexivity).",
            "VernacExtend",
            "e61dc7709759f84a54d553b65d21524dc03b72f5"
        ],
        [
            "rewrite lastTailOK.",
            "VernacExtend",
            "a2127fe8919bb23e2034ec2880f4d7428d04a661"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthLast {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) (Default : T), lastCP cp = nthCP (S n) cp Default.",
            "VernacStartTheoremProof",
            "80c2fa90fb6334fe9542f64ef4008b44d01933cd"
        ],
        [
            "unfold nthCP; induction n; intros cp Default.",
            "VernacExtend",
            "0a5e38cd681a672131c9ef2434880b1bde483732"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite lastTailOK.",
            "VernacExtend",
            "a2127fe8919bb23e2034ec2880f4d7428d04a661"
        ],
        [
            "assert (H := IHn (tailCP cp) Default); rewrite H; clear H; clear IHn.",
            "VernacExtend",
            "451f89c57ffd049cca599179b0ac776d16b460b3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite minus_n_0.",
            "VernacExtend",
            "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCircPerm1 {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (t Default : T), t = nthCP 1 cp Default -> t = nthCP (S (S n)) (consTailCP (tailCP cp) (headCP cp)) Default.",
            "VernacStartTheoremProof",
            "dabd86da260d47a89c5bab01943ed3b20e50d04c"
        ],
        [
            "intros cp t Default Hnth.",
            "VernacExtend",
            "2bef157b3e5666349c8d3edd6174af76b7d9d29a"
        ],
        [
            "apply nthFirst in Hnth.",
            "VernacExtend",
            "aad36d39164feafa5833c1b170f1f95c01107042"
        ],
        [
            "rewrite <- Hnth.",
            "VernacExtend",
            "5e70296f43972cce3cc8b24a7c950007ba4a7dc5"
        ],
        [
            "clear Hnth.",
            "VernacExtend",
            "f503ee23ebea71d8848ca61b4360bab8a28835c1"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "rewrite consTailOK.",
            "VernacExtend",
            "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
        ],
        [
            "rewrite app_nth2.",
            "VernacExtend",
            "74addee75b3c84dd121c466306b8bb741471b291"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- Minus.minus_diag_reverse.",
            "VernacExtend",
            "bde080e07a4d414dbe005583988c3b79b7f4e85b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCircPerm1Eq {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (Default : T), nthCP 1 cp Default = nthCP (S (S n)) (consTailCP (tailCP cp) (headCP cp)) Default.",
            "VernacStartTheoremProof",
            "84330dc5cb85acbedd2f21213b635ef444e2de84"
        ],
        [
            "intros cp Default.",
            "VernacExtend",
            "ca4f1a728705fc842c814e5bf35452c42af1efcf"
        ],
        [
            "apply nthCircPerm1.",
            "VernacExtend",
            "0d459606de2649f99a2c59cc5ba7205d5e616180"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCircPerm2 {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (t Default : T) id, t = nthCP (S (S id)) cp Default -> id <= n -> t = nthCP (S id) (consTailCP (tailCP cp) (headCP cp)) Default.",
            "VernacStartTheoremProof",
            "b5d524347ab40cfaa76fe46c755dceaa06ffd0db"
        ],
        [
            "induction n; intros cp t Default id Hnth HIn.",
            "VernacExtend",
            "02849ba9d0c578448bd872fb6acdbe0ce6cbbba8"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "induction id.",
            "VernacExtend",
            "d2ab20131c0b8a28447fc6bdd17133893aecd902"
        ],
        [
            "unfold nthCP in *.",
            "VernacExtend",
            "3ca34627b20e61ae6fdc6827f762133101a3cb54"
        ],
        [
            "simpl in Hnth.",
            "VernacExtend",
            "40a304d854b9d6857e36e0e042846658f7cdf4c1"
        ],
        [
            "rewrite <- Hnth.",
            "VernacExtend",
            "5e70296f43972cce3cc8b24a7c950007ba4a7dc5"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "assert (H := Le.le_Sn_0 id); intuition.",
            "VernacExtend",
            "67b58666ee2cc8f84772950950a8fd4521b00ed7"
        ],
        [
            "unfold nthCP in *.",
            "VernacExtend",
            "3ca34627b20e61ae6fdc6827f762133101a3cb54"
        ],
        [
            "rewrite consTailOK.",
            "VernacExtend",
            "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
        ],
        [
            "rewrite CPLHdTlOK in Hnth.",
            "VernacExtend",
            "0b57be17cdb31122d47a85a301fccf6398cc475a"
        ],
        [
            "rewrite app_nth2 in Hnth.",
            "VernacExtend",
            "9756e4ccb6fe29137dbdb81d2471836177efb80a"
        ],
        [
            "assert (H : S (S id) - 1 - length (headCP cp :: nil) = S id - 1) by (simpl; reflexivity); rewrite H in Hnth; clear H.",
            "VernacExtend",
            "a454324e93c9bd043f3c58f9484d8f7e55751eda"
        ],
        [
            "rewrite app_nth1; try assumption.",
            "VernacExtend",
            "6fcd8768490ee8c4370ecfbf78cfbb7cfd8ced1a"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite minus_n_0.",
            "VernacExtend",
            "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
        ],
        [
            "apply Lt.le_lt_n_Sm; assumption.",
            "VernacExtend",
            "facd6acf2a05c01db8e69ecba8faff00eae484b5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCircPerm2Eq {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (Default : T) id, id <= n -> nthCP (S (S id)) cp Default = nthCP (S id) (consTailCP (tailCP cp) (headCP cp)) Default.",
            "VernacStartTheoremProof",
            "e5bc8077e89a80dbb8d118be7ba4867aa8f5a4d9"
        ],
        [
            "intros cp Default id Hle.",
            "VernacExtend",
            "9c15ef866b1a7b17cab1ccebc20a98622b7ca238"
        ],
        [
            "apply nthCircPerm2.",
            "VernacExtend",
            "8934875c8fd875eaf0f029c5fee4bca333c43636"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCPTlOK {T:Type} {m:nat} : forall (cp : cartesianPower T (S (S m))) (Default : T) n, nthCP (S n) (tailCP cp) Default = nthCP (S (S n)) cp Default.",
            "VernacStartTheoremProof",
            "b3bf4cc9b6a33b701617f3774c93001c51704af5"
        ],
        [
            "induction m; intros cp Default n.",
            "VernacExtend",
            "474fc3e2ac932c85d817f89abd8c9e05e6fbdfe6"
        ],
        [
            "induction n; unfold nthCP; simpl; reflexivity.",
            "VernacExtend",
            "25e56ec777a68fbf10de36eb00eca699a8c63033"
        ],
        [
            "assert (H := nthCircPerm2 cp (nthCP (S (S n)) cp Default) Default n).",
            "VernacExtend",
            "66d8b3569ad1205be6f0af0aab541207315c49df"
        ],
        [
            "assert (Hnm := le_lt_dec n (S m)).",
            "VernacExtend",
            "9ff2c85638edde6df1e6bd1c60c6a0893de70bf7"
        ],
        [
            "elim Hnm; clear Hnm; intro Hnm.",
            "VernacExtend",
            "4e402713f31556ce6cf0384ce76293fabe57348c"
        ],
        [
            "assert (H' : nthCP (S (S n)) cp Default = nthCP (S (S n)) cp Default) by reflexivity; apply H in H'; try assumption; clear H; rewrite H'; clear H'.",
            "VernacExtend",
            "804d09c0d19c2ae92f5705e3d4e79005b294ed68"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "rewrite consTailOK.",
            "VernacExtend",
            "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
        ],
        [
            "rewrite app_nth1; try reflexivity.",
            "VernacExtend",
            "e6ae684cd55d48516a994e848693259a6ab61071"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite minus_n_0.",
            "VernacExtend",
            "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
        ],
        [
            "apply Lt.le_lt_n_Sm; assumption.",
            "VernacExtend",
            "facd6acf2a05c01db8e69ecba8faff00eae484b5"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "rewrite nth_overflow.",
            "VernacExtend",
            "1dc95ea9f004c971a847e2487e936f95ce6a3b41"
        ],
        [
            "rewrite nth_overflow; try reflexivity.",
            "VernacExtend",
            "ee1bb2d600db26e573f53a40d6a50c0c30a0c243"
        ],
        [
            "rewrite <- lengthOfCPToList; simpl; intuition.",
            "VernacExtend",
            "3bf0d81d7be49a641ff7f8295f575bd05e709e22"
        ],
        [
            "rewrite <- lengthOfCPToList; simpl; rewrite minus_n_0; intuition.",
            "VernacExtend",
            "e9afc42fe07e37d072cfc1a2cdd9e3867a5a1166"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthEqOK {T:Type} {m:nat} : forall (cp1 cp2 : cartesianPower T (S m)) (Default : T), (forall n, nthCP n cp1 Default = nthCP n cp2 Default) -> cp1 = cp2.",
            "VernacStartTheoremProof",
            "a87710e25576238a14782b20e4cc2779eeb199e1"
        ],
        [
            "induction m; intros cp1 cp2 Default Hnth.",
            "VernacExtend",
            "3c982f683bb42c95203432fef8bf089119cd8087"
        ],
        [
            "assert (H := Hnth 1).",
            "VernacExtend",
            "241215e42814a2c29d9e411ef19d95a4e7905bf2"
        ],
        [
            "unfold nthCP in H.",
            "VernacExtend",
            "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "assert (H := Hnth 1).",
            "VernacExtend",
            "241215e42814a2c29d9e411ef19d95a4e7905bf2"
        ],
        [
            "unfold nthCP in H.",
            "VernacExtend",
            "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply IHm with Default.",
            "VernacExtend",
            "5ecf35b89ae5181e0aeda19a1e9e4f6f08b2ffd1"
        ],
        [
            "intro n; induction n.",
            "VernacExtend",
            "d0fb4cd4fcd668e74be080a0a5c781ae93469446"
        ],
        [
            "assert (H := Hnth 2).",
            "VernacExtend",
            "5b7161863fb8e31cbf6b9010a31c649e38005878"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "unfold nthCP in H.",
            "VernacExtend",
            "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
        ],
        [
            "do 2 (rewrite CPLHdTlOK in H).",
            "VernacExtend",
            "6a6872a6441310ee737b79783f4edbf2ea77f526"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "do 2 (rewrite nthCPTlOK).",
            "VernacExtend",
            "a54c6fe4702bc90d2c86fe5764101b7cfbd96740"
        ],
        [
            "apply Hnth.",
            "VernacExtend",
            "b7b7b282a408c11bd8248149959cfd21d26e6619"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma consTailPerm {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), Permutation.Permutation (CPToList cp) (CPToList (consTailCP (tailCP cp) (headCP cp))).",
            "VernacStartTheoremProof",
            "1b3a76d82d5c6cd8abcd43959874df9b85203494"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "rewrite CPLHdTlOK.",
            "VernacExtend",
            "8e234962c35640d3983637598c71b19a66994de1"
        ],
        [
            "rewrite consTailOK.",
            "VernacExtend",
            "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
        ],
        [
            "apply Permutation.Permutation_app_comm.",
            "VernacExtend",
            "a4aef3a57be388f4be4d499412ddffdcf926251d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ListToCP {T : Type} (l : list T) (Default : T) : cartesianPower T (length l).",
            "VernacDefinition",
            "e6ea8c2fbb927387bacb9d578dd1009dcd1a6915"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "exact Default.",
            "VernacExtend",
            "ac24d2bfc1bde36ccc33289bb14eae3223745f2e"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "exact a.",
            "VernacExtend",
            "22ff3beb9eb73525898c3fe8426139b9069c03e7"
        ],
        [
            "clear IHl0.",
            "VernacExtend",
            "2efc242e0d7de588a145abb02fdc1e129a19e1d6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact a.",
            "VernacExtend",
            "22ff3beb9eb73525898c3fe8426139b9069c03e7"
        ],
        [
            "unfold cartesianPower in IHl.",
            "VernacExtend",
            "94ac88ef2632d19f36ef74369f0a8864f842c860"
        ],
        [
            "simpl in IHl.",
            "VernacExtend",
            "4a0374ff7bc22639f0728e92291ab37fb877dedf"
        ],
        [
            "rewrite minus_n_0 in IHl.",
            "VernacExtend",
            "b42130b3db07a9f191f0c58e79debb4a60385c00"
        ],
        [
            "exact IHl.",
            "VernacExtend",
            "092ed5cd46596dc50420405f8143ea44eafb778d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Fixpoint circPermNCP {T:Type} {m:nat} (n : nat) (cp : cartesianPower T (S (S m))) := match n with | 0 => cp | S p => circPermNCP p (consTailCP (tailCP cp) (headCP cp)) end.",
            "VernacFixpoint",
            "e0c92776a6824f958224d2bf36fc0cd7c4a3982f"
        ],
        [
            "Lemma circPermNCP0 {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), cp = circPermNCP 0 cp.",
            "VernacStartTheoremProof",
            "e75939793f255bbbc2f8656a9bef0fc1e7f84cb5"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNCPOK {T:Type} {m:nat} : forall (n : nat) (cp : cartesianPower T (S (S m))), circPermNCP (S n) cp = circPermNCP n (consTailCP (tailCP cp) (headCP cp)).",
            "VernacStartTheoremProof",
            "13af96358846f389f6f1d649fb9e679bc60e85be"
        ],
        [
            "unfold circPermNCP; reflexivity.",
            "VernacExtend",
            "60a982d4f1723233e5ba9397ce62dfef2597e1ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCircPermNAny {T:Type} {m:nat} : forall (cp : cartesianPower T (S (S m))) (Default : T) id n, id + n <= S m -> nthCP (S id + n) cp Default = nthCP (S id) (circPermNCP n cp) Default.",
            "VernacStartTheoremProof",
            "e70459e9faad7d69f226b25be5db8824be185c54"
        ],
        [
            "intros cp Default id n Hle; revert cp; induction n; intro cp.",
            "VernacExtend",
            "1350e9e82042f7c29c045df5963bcff3a41f8762"
        ],
        [
            "rewrite plus_n_0; simpl; reflexivity.",
            "VernacExtend",
            "0641b739752b11ae087c8052409538ff391e8a1d"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "assert (H : id + n <= S m) by (apply le_Sn_le; rewrite plus_n_Sm; assumption).",
            "VernacExtend",
            "ad57cc88493f2203d4dbaf669ae6241ef5d89f83"
        ],
        [
            "assert (H' : id + n <= m) by (apply le_S_n; transitivity (id + S n); intuition).",
            "VernacExtend",
            "01685ece00f0aa5163465133f2507f8706f21f3b"
        ],
        [
            "rewrite <- IHn; try assumption.",
            "VernacExtend",
            "937e7eac4b20daac09d7288c801b5b21d3e71731"
        ],
        [
            "rewrite <- plus_n_Sm.",
            "VernacExtend",
            "10308ef961b07f08e71cba91e06650cc774994fe"
        ],
        [
            "apply nthCircPerm2Eq; assumption.",
            "VernacExtend",
            "0c8737854458253d492fba4b216128f7c727c72c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNIdFirst {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (Default : T), nthCP 1 cp Default = nthCP 1 (circPermNCP (S (S n)) cp) Default.",
            "VernacStartTheoremProof",
            "61bed58c5d75652e4ab32e881c29636c13dfe559"
        ],
        [
            "intros cp Default.",
            "VernacExtend",
            "ca4f1a728705fc842c814e5bf35452c42af1efcf"
        ],
        [
            "rewrite nthCircPerm1Eq.",
            "VernacExtend",
            "3395193bed7da3beb2e51a047cb5a7bf6418b319"
        ],
        [
            "assert (H : 0 + S n <= S n) by intuition.",
            "VernacExtend",
            "0da119e444359160fa2d872a81ef88c7db7c140b"
        ],
        [
            "assert (H' := nthCircPermNAny (consTailCP (tailCP cp) (headCP cp)) Default 0 (S n) H); clear H.",
            "VernacExtend",
            "a3a78a57cec23c0b57f6fdfec6e25683d690b60f"
        ],
        [
            "assert (H : 1 + S n = S (S n)) by intuition; rewrite H in H'; clear H; rewrite H'.",
            "VernacExtend",
            "955554d6f427f04f8f56a80e6f115005992bbd6d"
        ],
        [
            "apply eq_sym.",
            "VernacExtend",
            "313410cb7bcb68dc243125f00e91764f51d94be6"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNConsTlOK {T:Type} {m:nat} : forall (n : nat) (cp : cartesianPower T (S (S m))), consTailCP (tailCP (circPermNCP n cp)) (headCP (circPermNCP n cp)) = circPermNCP n (consTailCP (tailCP cp) (headCP cp)).",
            "VernacStartTheoremProof",
            "cbeada0d093c16d612ec7c81581f67ca2c71c6f9"
        ],
        [
            "intros n; induction n; intro cp.",
            "VernacExtend",
            "b6489c9fa197dcae653ab3259575f5db6bd5bdd2"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "apply eq_sym.",
            "VernacExtend",
            "313410cb7bcb68dc243125f00e91764f51d94be6"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "rewrite <- IHn.",
            "VernacExtend",
            "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
        ],
        [
            "rewrite <- circPermNCPOK.",
            "VernacExtend",
            "1ac662cfaad2ccd2f5a76cb69c03059276f21311"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermPerm {T:Type} {m:nat} : forall (n : nat) (cp : cartesianPower T (S (S m))), circPermNCP (S (S (S n))) cp = circPermNCP 1 (circPermNCP (S (S n)) cp).",
            "VernacStartTheoremProof",
            "8e46000f8e31b0f9e4f54683a3c2ecb7a6c8383a"
        ],
        [
            "intros n cp.",
            "VernacExtend",
            "5f8874c6c8473bb2ebc889c756e52655d6889053"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "apply eq_sym.",
            "VernacExtend",
            "313410cb7bcb68dc243125f00e91764f51d94be6"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "rewrite <- circPermNCP0.",
            "VernacExtend",
            "ebafc504a252ffdca9fac01150a987902442f5ff"
        ],
        [
            "apply circPermNConsTlOK.",
            "VernacExtend",
            "a94d0d06188ea90bfafd4ee0aae963b9bffd06dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nthCP01 {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) Default, nthCP 0 cp Default = nthCP 1 cp Default.",
            "VernacStartTheoremProof",
            "3b6d709b99f266c91fc16cf68b0b26be98e6a29c"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "assert (H : 0 - 1 = 0) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "ddbe038d09f2f84aca6a33f957c58ee04be9ba5d"
        ],
        [
            "assert (H : 1 - 1 = 0) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "83dd4afdaf2aaf16baedb2ddc24097fce630d862"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNIdAux {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))) (Default : T), cp = circPermNCP (S (S n)) cp.",
            "VernacStartTheoremProof",
            "898f4eb3ef2263d391c36ff467a1d8be11e2c8e9"
        ],
        [
            "intros cp Default.",
            "VernacExtend",
            "ca4f1a728705fc842c814e5bf35452c42af1efcf"
        ],
        [
            "apply nthEqOK with Default.",
            "VernacExtend",
            "f1caaf5ebaafff920d81d49cf4836856d610df7f"
        ],
        [
            "intro m.",
            "VernacExtend",
            "4b82221b29d931d49eaab61535235762be4a3968"
        ],
        [
            "assert (Hmn := le_lt_dec m (S (S n))).",
            "VernacExtend",
            "e5307f166bae2669929c7eed81d22df15166a5b3"
        ],
        [
            "elim Hmn; clear Hmn; intro Hmn.",
            "VernacExtend",
            "3c88de8cdac85de075a6417145b055f07e37ab02"
        ],
        [
            "revert cp; induction m; intro cp.",
            "VernacExtend",
            "51336b42eb948ae97e29ee0b12b27dd42c4112e2"
        ],
        [
            "do 2 (rewrite nthCP01).",
            "VernacExtend",
            "e93f25112c6cb67824915207ea371f515cb2b8d3"
        ],
        [
            "apply circPermNIdFirst.",
            "VernacExtend",
            "8886e6bae5c2fe85528fc01ef5bffa966625f6db"
        ],
        [
            "clear IHm.",
            "VernacExtend",
            "f146c476dfe2496aa8dbd81475d23c7e79471842"
        ],
        [
            "revert cp; induction m; intro cp.",
            "VernacExtend",
            "51336b42eb948ae97e29ee0b12b27dd42c4112e2"
        ],
        [
            "apply circPermNIdFirst.",
            "VernacExtend",
            "8886e6bae5c2fe85528fc01ef5bffa966625f6db"
        ],
        [
            "assert (H : m <= n) by (do 2 (apply le_S_n); assumption).",
            "VernacExtend",
            "9a3741f80c2b20043442068f4d555b5b0f2eec2c"
        ],
        [
            "rewrite nthCircPerm2Eq; try assumption; clear H.",
            "VernacExtend",
            "81fbd69b3c3b27e85e0ece0533aac6c114f39ddd"
        ],
        [
            "assert (H : S m <= S (S n)) by intuition.",
            "VernacExtend",
            "ab611bd663b0f526c0b011b2a6d0b9e89232c3f9"
        ],
        [
            "rewrite IHm; try assumption; clear H; clear IHm.",
            "VernacExtend",
            "88f63cba5c1179ba0e45fa74f9348677b289f763"
        ],
        [
            "rewrite <- circPermNCPOK.",
            "VernacExtend",
            "1ac662cfaad2ccd2f5a76cb69c03059276f21311"
        ],
        [
            "rewrite circPermPerm.",
            "VernacExtend",
            "fb03d2684cb3dda69e92bfb0f2cc2c5bd866e21c"
        ],
        [
            "assert (H : m + 1 <= S n) by (rewrite plus_n_1; intuition).",
            "VernacExtend",
            "5a43d77a2cb0d5ff60086520eb422af16880e937"
        ],
        [
            "rewrite <- nthCircPermNAny; try assumption; clear H.",
            "VernacExtend",
            "3e6fb7c25254abe6865d70111b248632af60f851"
        ],
        [
            "rewrite plus_n_1; reflexivity.",
            "VernacExtend",
            "9eadad73819168dfa96dd45c0735758d856f7014"
        ],
        [
            "induction m.",
            "VernacExtend",
            "6f6279e892ad221278939a9b429a59edaeeb1676"
        ],
        [
            "assert (H := lt_n_0 (S (S n))); intuition.",
            "VernacExtend",
            "0966cb6ddc862158b5990fc964d93e8361a284f5"
        ],
        [
            "clear IHm.",
            "VernacExtend",
            "f146c476dfe2496aa8dbd81475d23c7e79471842"
        ],
        [
            "unfold nthCP.",
            "VernacExtend",
            "126097c5c0bed5285d1e5e484777b30ea55bff3b"
        ],
        [
            "rewrite nth_overflow.",
            "VernacExtend",
            "1dc95ea9f004c971a847e2487e936f95ce6a3b41"
        ],
        [
            "rewrite nth_overflow; try reflexivity.",
            "VernacExtend",
            "ee1bb2d600db26e573f53a40d6a50c0c30a0c243"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite minus_n_0.",
            "VernacExtend",
            "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
        ],
        [
            "apply gt_S_le.",
            "VernacExtend",
            "1b667f6cc0411fe101f7b1adf86fb1335c2a0d80"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- lengthOfCPToList.",
            "VernacExtend",
            "8bc18357e05be9402e542b559cf2833f7688df42"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite minus_n_0.",
            "VernacExtend",
            "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
        ],
        [
            "apply gt_S_le.",
            "VernacExtend",
            "1b667f6cc0411fe101f7b1adf86fb1335c2a0d80"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNId {T:Type} {n:nat} : forall (cp : cartesianPower T (S (S n))), cp = circPermNCP (S (S n)) cp.",
            "VernacStartTheoremProof",
            "594e267f5c73bc6e8e49d39364e7686e4a237c2a"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "apply circPermNIdAux.",
            "VernacExtend",
            "af257e85d48acdd00963d298a05c27329ac43935"
        ],
        [
            "exact (headCP cp).",
            "VernacExtend",
            "3f67cb569526207a09f6757d05cf515c951e1be4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma circPermNConsOK {T:Type} {n:nat} : forall (cp : cartesianPower T (S n)) (t1 t2 : T), circPermNCP (S n) (consTailCP (consTailCP cp t1) t2) = consHeadCP t1 (consHeadCP t2 cp).",
            "VernacStartTheoremProof",
            "3c1d1db39a074558f948dfca169a58f476f2b087"
        ],
        [
            "induction n; intros cp t1 t2.",
            "VernacExtend",
            "ac2b52bb17d3201f33832bfd9e4c2ca63cdd3fd0"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "assert (H := circPermNId (consHeadCP t1 (consHeadCP t2 cp))); rewrite H; clear H.",
            "VernacExtend",
            "e83af2292d2cc8d9901b53cefc3a7f19a0f4e788"
        ],
        [
            "apply eq_sym.",
            "VernacExtend",
            "313410cb7bcb68dc243125f00e91764f51d94be6"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "assert (H : headCP (consHeadCP t1 (consHeadCP t2 cp)) = t1) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "ff123260848cdb02a74b09df3c0ef938d26c1449"
        ],
        [
            "assert (H : tailCP (consHeadCP t1 (consHeadCP t2 cp)) = consHeadCP t2 cp) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "5183fa0ad786d19d08301ab0132d503c822bbf3c"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "assert (H : headCP (consTailCP (consHeadCP t2 cp) t1) = t2) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "59868e9a9be7a1b06debbad6ed2b044cca2ac7cb"
        ],
        [
            "assert (H : tailCP (consTailCP (consHeadCP t2 cp) t1) = consTailCP cp t1) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "236429398fcfe22506269fa48ed8ebb8bb1445ea"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma listInd {T : Type} : forall n (l l' : list T) Default, length l = (S n) -> length l' = (S n) -> hd Default l = hd Default l' -> tl l = tl l' -> l = l'.",
            "VernacStartTheoremProof",
            "ac9a3b3851201a3887612a1014cddbb7c92de9ad"
        ],
        [
            "intros n l.",
            "VernacExtend",
            "d15a0b6304d5de3931ed94d7fd1378867aca9f17"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "intros l' Default Hl.",
            "VernacExtend",
            "a2297a567d212eb1531cbfb7d3cce2974abb3d9b"
        ],
        [
            "simpl in Hl; discriminate.",
            "VernacExtend",
            "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
        ],
        [
            "intros l' Default Hl Hl' Hhd Htl.",
            "VernacExtend",
            "eb4c8a3fea3811fa55c049242387b2d2fb90c5fb"
        ],
        [
            "induction l'.",
            "VernacExtend",
            "773e04ff833259851fb65b4bcd371f3996d47e26"
        ],
        [
            "simpl in Hl'; discriminate.",
            "VernacExtend",
            "d095f2c89f9e97ac3865760e021e44b3e7e653f2"
        ],
        [
            "simpl in Hhd.",
            "VernacExtend",
            "75719e550ca2b7c8882e386d13adfe3c257fb4ea"
        ],
        [
            "simpl in Htl.",
            "VernacExtend",
            "3fc6c8cc726d1ff1778a4da40819e236ce56486e"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLHd {T : Type} : forall (a : T) l Default, hd Default (CPToList (ListToCP (a :: l) Default)) = a.",
            "VernacStartTheoremProof",
            "267236d327e83b641140ce27958a04a89948e176"
        ],
        [
            "intros a l Default.",
            "VernacExtend",
            "c36dbc044317b57eebb776ef3222d827c169e46e"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ListToCPTl {T : Type} : forall (a a0 : T) l (Ha0l : (S (length l)) = length (a0 :: l)) Haa0l Default, tailCPbis (length (a :: a0 :: l)) (length (a :: l)) (ListToCP (a :: a0 :: l) Default) Haa0l Ha0l = ListToCP (a0 :: l) Default.",
            "VernacStartTheoremProof",
            "82c94590e7a6ed60cf06b40167d11311443ec78f"
        ],
        [
            "intros a a0 l Ha0l Haa0l Default.",
            "VernacExtend",
            "3f562b1f2f5e744cd558b6b8adb3a3b8faffc294"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "unfold tailCPbis.",
            "VernacExtend",
            "0899dca65ebc93cb7f3a00ded05c289d75bd0801"
        ],
        [
            "unfold tailCP.",
            "VernacExtend",
            "bada5e101e667173f4757dbf5195b0f8782f85f0"
        ],
        [
            "repeat (elim_eq_rect; simpl).",
            "VernacExtend",
            "1b001f43744ca438a513b395a1a1493a1004b8f3"
        ],
        [
            "induction l; simpl; reflexivity.",
            "VernacExtend",
            "0cc1dedcb843499102e89205159d3cd87dc26321"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPToListTl1 {T : Type} : forall (a a0 : T) l (cp : cartesianPower T (length (a :: a0 :: l))), tl (CPToList cp) = CPToList (tailCP cp).",
            "VernacStartTheoremProof",
            "53f8b85d8cd49d3ef18512a9f3f8c1320d543cdd"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPToListTl2 {T : Type} {n : nat} : forall (cp : cartesianPower T (S (S n))), tl (CPToList cp) = CPToList (tailCP cp).",
            "VernacStartTheoremProof",
            "8fb1060ee6b6fa41441b055f3c772a31c0424f71"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "apply listInd with (S n) (fst cp).",
            "VernacExtend",
            "1d43cccba52b944f1ae04d68157eec65f306b741"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "assert (H := lengthOfCPToList cp); rewrite H.",
            "VernacExtend",
            "df07fb0fef1a9cd7db1c7461f34539b37b237082"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "assert (H := lengthOfCPToList (tailCP cp)); rewrite H.",
            "VernacExtend",
            "552b0874ac28c65957a8cb21fc1560cbacb6089d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPCPL {T : Type} : forall (a : T) l (cp1 : cartesianPower T (length (a :: l))) (cp2 : cartesianPower T (S(length l))), cp1 = cp2 -> CPToList cp1 = CPToList cp2.",
            "VernacStartTheoremProof",
            "84b415cafbcb63715563ef4272747c81284f7a36"
        ],
        [
            "intros; subst; reflexivity.",
            "VernacExtend",
            "9a97a00b0aa2a8284651f9454c8eaa359460e3a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLCP {T : Type} {n : nat} : forall (cp1 cp2 : cartesianPower T (S n)), CPToList cp1 = CPToList cp2 -> cp1 = cp2.",
            "VernacStartTheoremProof",
            "02287d611fe4909062c3c169b489b0359fd3070f"
        ],
        [
            "induction n; intros cp1 cp2 HCPL.",
            "VernacExtend",
            "31731eb4f2cf9f22e89d95d8628a1587d7db22e7"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "injection HCPL.",
            "VernacExtend",
            "d5578f2bef7c2ff77b0c4e06eea872d4196d9048"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "do 2 (rewrite CPToListOK in HCPL).",
            "VernacExtend",
            "77af0ff14a5b18535fcd79d042503581670652d9"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "injection HCPL; auto.",
            "VernacExtend",
            "956fafdeb43b82cf651f7a2c8778dab03034be89"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "injection HCPL; auto.",
            "VernacExtend",
            "956fafdeb43b82cf651f7a2c8778dab03034be89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLRec {T : Type} : forall (a : T) l Default, (a :: (CPToList (ListToCP l Default))) = CPToList (ListToCP (a :: l) Default).",
            "VernacStartTheoremProof",
            "8b8669b9133f34e5d7c067b9f7135e8d849a853a"
        ],
        [
            "intros a l Default.",
            "VernacExtend",
            "c36dbc044317b57eebb776ef3222d827c169e46e"
        ],
        [
            "assert (HlAux := lengthOfCPToList (ListToCP l Default)).",
            "VernacExtend",
            "dff22c3be830b39f9d64491ea201d8b51491c4a3"
        ],
        [
            "assert (Hl : S (length l) = length (a :: CPToList (ListToCP l Default))) by (simpl; apply eq_S; assumption); clear HlAux; apply eq_sym in Hl.",
            "VernacExtend",
            "076091ac4f0d4fc1313cdf67d696a996be6bfd4f"
        ],
        [
            "assert (Hal := lengthOfCPToList (ListToCP (a :: l) Default)); apply eq_sym in Hal.",
            "VernacExtend",
            "f392e963d1a83e33014e2cc13b910022e8c6121c"
        ],
        [
            "apply listInd with (length l) Default; try assumption.",
            "VernacExtend",
            "a86ab6b35821744f4b3effa208fb79a1a35ab533"
        ],
        [
            "rewrite CPLHd; simpl; reflexivity.",
            "VernacExtend",
            "53a85d084d0c1a5812516185a39cc8d2d695dedd"
        ],
        [
            "assert (H : tl (a :: CPToList (ListToCP l Default)) = CPToList (ListToCP l Default)) by (simpl; reflexivity); rewrite H; clear H.",
            "VernacExtend",
            "b806848d5d22451e58e4d4dbffb7a1a509f7e7ed"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "clear IHl.",
            "VernacExtend",
            "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
        ],
        [
            "assert (H := CPToListTl1 a a0 l (ListToCP (a :: a0 :: l) Default)); rewrite H; clear H.",
            "VernacExtend",
            "f218f9b04766bcf964eb1d6249db2ef0fec722ab"
        ],
        [
            "assert (H := CPCPL a0 l (ListToCP (a0 :: l) Default) (tailCP (ListToCP (a :: a0 :: l) Default))); apply H; clear H.",
            "VernacExtend",
            "afaba0e90b668fed83bbd518aec617a1a2258b9e"
        ],
        [
            "assert (Ha0l : (S (length l)) = length (a0 :: l)) by (simpl; reflexivity).",
            "VernacExtend",
            "483bad1c9a3814c407123515dd845e7a74875260"
        ],
        [
            "assert (Haa0l : (S (S (length l))) = length (a :: a0 :: l)) by (simpl; reflexivity).",
            "VernacExtend",
            "913f6a5d92d7bd7e0993c76c03d136054b5d33d2"
        ],
        [
            "assert (H := ListToCPTl a a0 l Ha0l Haa0l Default); rewrite <- H; clear H.",
            "VernacExtend",
            "516dab149f19538c173e3d67f0617413b9b4550f"
        ],
        [
            "unfold tailCPbis.",
            "VernacExtend",
            "0899dca65ebc93cb7f3a00ded05c289d75bd0801"
        ],
        [
            "repeat (elim_eq_rect; simpl); reflexivity.",
            "VernacExtend",
            "ab32776576d46f87a22d7a8d4eba252d87712a49"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CPLOK {T : Type} : forall (l : list T) Default, CPToList (ListToCP l Default) = l.",
            "VernacStartTheoremProof",
            "87131bcece31f1368e0849a0f3128f5ff1d941de"
        ],
        [
            "intros l Default.",
            "VernacExtend",
            "ef94ad8b439672a7ad39e65de2741aa0c0494edc"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "rewrite <- CPLRec.",
            "VernacExtend",
            "37da0f46d7923818c29d99d41ebc2d5fe773599a"
        ],
        [
            "rewrite IHl.",
            "VernacExtend",
            "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fixLastCP {T:Type} {n:nat} (appPred : cartesianPower T (S (S n)) -> Prop) (t : T) : cartesianPower T (S n) -> Prop.",
            "VernacDefinition",
            "a395a3f238c86bd396dd27915c68c8b1c4cfbd7f"
        ],
        [
            "intro cp.",
            "VernacExtend",
            "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
        ],
        [
            "apply appPred.",
            "VernacExtend",
            "65b43bfa97df98594c9be5d6fd986c066663b769"
        ],
        [
            "exact (consTailCP cp t).",
            "VernacExtend",
            "c49a99ea21660f0580f55772065dd6df243e4bc7"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma fixLastCPOK {T:Type} {n:nat} : forall (appPred : cartesianPower T (S (S n)) -> Prop) (cp : cartesianPower T (S n)) (t : T), appPred (consTailCP cp t) = (fixLastCP appPred t) cp.",
            "VernacStartTheoremProof",
            "2b5a7c1ebbd2a064f2eb6faf8403c90380660a38"
        ],
        [
            "intros appPred cp; unfold fixLastCP; reflexivity.",
            "VernacExtend",
            "23ca924c732c0223933ffbd4d05e43c2139904c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition app {T:Type} {n:nat} (pred : arity T n) (cp : cartesianPower T n) : Prop.",
            "VernacDefinition",
            "287b1d6a4b65d106937afacc012ec065927543d4"
        ],
        [
            "induction n; [apply pred|clear IHn].",
            "VernacExtend",
            "290d185b5d8e5c652fb2e9595fec78e85b5e0ed2"
        ],
        [
            "induction n; [exact (pred cp)|exact (IHn (pred (headCP cp)) (tailCP cp))].",
            "VernacExtend",
            "1cd90dfa8c6d33c357325bb739ca63f9fad4f5a2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition app_n_1 {T:Type} {n:nat} (pred : arity T (S n)) (cp : cartesianPower T n) (x : T) : Prop.",
            "VernacDefinition",
            "f79c4e44c14bfd5e147e6afc88b07b845ba41692"
        ],
        [
            "induction n; [exact (pred x)|clear IHn].",
            "VernacExtend",
            "503d471f153a1573ce9da862f2e3b079833230f1"
        ],
        [
            "induction n; [exact (pred cp x)|exact (IHn (pred (headCP cp)) (tailCP cp))].",
            "VernacExtend",
            "e012fdabe5f7075348b191fbadb4e06ef73b2eec"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma app_n_1_app {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), app_n_1 pred cpp x -> allButLastCP cpt = cpp -> lastCP cpt = x -> app pred cpt.",
            "VernacStartTheoremProof",
            "a6ae9396452cf5f9b6c2c1c4dc36ccab12d0df10"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1.",
            "VernacExtend",
            "85e84d2667b53456606ab747d4b84d4de959182c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply IHn with (tailCP cpp); clear IHn.",
            "VernacExtend",
            "475e79d5dafdcfd61df9c35a9a85ea94b7220536"
        ],
        [
            "unfold app_n_1 in *.",
            "VernacExtend",
            "a8afb3ef69bcaf32ac39e72ced322501f14503bc"
        ],
        [
            "assert (H3 : (fst cpt) = fst (cpp)) by (rewrite <- H0; simpl; reflexivity).",
            "VernacExtend",
            "70b56fe3a8b8197fa33f663e113e89a89d02581e"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl in *; reflexivity.",
            "VernacExtend",
            "a7b5aac0483332f54e6f4f8f70b1fd5f21aa63f7"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_app_n_1 {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), app pred cpt -> allButLastCP cpt = cpp -> lastCP cpt = x -> app_n_1 pred cpp x.",
            "VernacStartTheoremProof",
            "52f56af8e0d7efa34399b30225ed58129d39dd6e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1.",
            "VernacExtend",
            "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply IHn with (tailCP cpt); clear IHn.",
            "VernacExtend",
            "665b5d71ed180c46163f9d474805146275c8d27b"
        ],
        [
            "unfold app in *.",
            "VernacExtend",
            "87a97395eae4034dd063befde6a1a56638dad85f"
        ],
        [
            "assert (H3 : (fst cpt) = fst (cpp)) by (rewrite <- H0; simpl; reflexivity).",
            "VernacExtend",
            "70b56fe3a8b8197fa33f663e113e89a89d02581e"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "apply CP_ind.",
            "VernacExtend",
            "b9dd30620071e95bf47a515623b3ac7813379c9a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl in *; reflexivity.",
            "VernacExtend",
            "a7b5aac0483332f54e6f4f8f70b1fd5f21aa63f7"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_n_1_app_eq {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), allButLastCP cpt = cpp -> lastCP cpt = x -> (app pred cpt <-> app_n_1 pred cpp x).",
            "VernacStartTheoremProof",
            "d25ae8c86cce3431d2338ec2981f4652528eea35"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro H1.",
            "VernacExtend",
            "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
        ],
        [
            "apply (app_app_n_1 pred x cpp cpt H1 H H0).",
            "VernacExtend",
            "53638d7941d09d67ddb4e23452f92d1137e28a09"
        ],
        [
            "intro H1.",
            "VernacExtend",
            "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
        ],
        [
            "apply (app_n_1_app pred x cpp cpt H1 H H0).",
            "VernacExtend",
            "d57fea262f5c5b4d0c7d4ff942e50dc8f457eefc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition app_1_n {T:Type} {n:nat} (pred : arity T (S n)) (x : T) (cp : cartesianPower T n) : Prop.",
            "VernacDefinition",
            "8d4495306c08c642e7322969160d0d3ee8cde095"
        ],
        [
            "induction n; [exact (pred x)|clear IHn].",
            "VernacExtend",
            "503d471f153a1573ce9da862f2e3b079833230f1"
        ],
        [
            "induction n; [exact (pred x cp)|clear IHn].",
            "VernacExtend",
            "9a66d8f12b886ff9d1e7c6a77724f9557bcf57c5"
        ],
        [
            "assert (newPred : arity T (S n)) by (exact (pred x (headCP cp))).",
            "VernacExtend",
            "be2aa0706a7ea7963610bf200a859629d570d0a9"
        ],
        [
            "exact (app newPred (tailCP cp)).",
            "VernacExtend",
            "108e38fefe6500ea20608da614f420e5bd63166f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma app_1_n_app {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), app_1_n pred x cpp -> headCP cpt = x -> tailCP cpt = cpp -> app pred cpt.",
            "VernacStartTheoremProof",
            "6c0ba3338dfe76fcaa9a334eb44dd5e8611dcdf5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1.",
            "VernacExtend",
            "85e84d2667b53456606ab747d4b84d4de959182c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1.",
            "VernacExtend",
            "85e84d2667b53456606ab747d4b84d4de959182c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_app_1_n {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), app pred cpt -> headCP cpt = x -> tailCP cpt = cpp -> app_1_n pred x cpp.",
            "VernacStartTheoremProof",
            "746e94f2892a9d97df5fa178d66ab9b85b7c8307"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1.",
            "VernacExtend",
            "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1.",
            "VernacExtend",
            "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_1_n_app_eq {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S n))), headCP cpt = x -> tailCP cpt = cpp -> (app pred cpt <-> app_1_n pred x cpp).",
            "VernacStartTheoremProof",
            "bfb0cf904b3e2f83da97977e7654b1675964976b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro H1.",
            "VernacExtend",
            "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
        ],
        [
            "apply (app_app_1_n pred x cpp cpt H1 H H0).",
            "VernacExtend",
            "2f4f2eac3c05d3e1b22943919b5413bd4fc05547"
        ],
        [
            "intro H1.",
            "VernacExtend",
            "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
        ],
        [
            "apply (app_1_n_app pred x cpp cpt H1 H H0).",
            "VernacExtend",
            "5c5294359358a45f3d023c930003bed98b33d8a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition app_2_n {T:Type} {n:nat} (pred : arity T (S (S n))) (x1 x2 : T) (cp : cartesianPower T n) : Prop.",
            "VernacDefinition",
            "be389706b4ebb12f9ae01ad6ec12a994258da369"
        ],
        [
            "exact (app (pred x1 x2) cp).",
            "VernacExtend",
            "03017c1d1d85995a80a5826f0e79258ef96155e4"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma app_2_n_app {T:Type} {n:nat} : forall (pred : arity T (S (S (S n)))) (x1 x2 : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S (S n)))), app_2_n pred x1 x2 cpp -> headCP cpt = x1 -> headCP (tailCP cpt) = x2 -> tailCP (tailCP cpt) = cpp -> app pred cpt.",
            "VernacStartTheoremProof",
            "d93016138c637d12f6fc0aa1db45f2805bc93347"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1; rewrite H2.",
            "VernacExtend",
            "1c38e61caad39b10670c6bf6c9b067b299c60806"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1; rewrite H2.",
            "VernacExtend",
            "1c38e61caad39b10670c6bf6c9b067b299c60806"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_2_n_app_default {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x1 x2 : T) (cpp Default : cartesianPower T n) (cpt : cartesianPower T (S (S n))), app_2_n pred x1 x2 cpp -> headCP cpt = x1 -> headCP (tailCP cpt) = x2 -> tailDefaultCP (tailCP cpt) Default = cpp -> app pred cpt.",
            "VernacStartTheoremProof",
            "850a260366dd5fd39683b8888931618e337c5f17"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1.",
            "VernacExtend",
            "85e84d2667b53456606ab747d4b84d4de959182c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite H0; rewrite H1; rewrite H2.",
            "VernacExtend",
            "1c38e61caad39b10670c6bf6c9b067b299c60806"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_app_2_n {T:Type} {n:nat} : forall (pred : arity T (S (S (S n)))) (x1 x2 : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S (S n)))), app pred cpt -> headCP cpt = x1 -> headCP (tailCP cpt) = x2 -> tailCP (tailCP cpt) = cpp -> app_2_n pred x1 x2 cpp.",
            "VernacStartTheoremProof",
            "fac0c3cf407f80c9eaa03453b74f5a5f44f18b6a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
            "VernacExtend",
            "9aacaba5655cea38883202a3e5385d200e20f2ac"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
            "VernacExtend",
            "9aacaba5655cea38883202a3e5385d200e20f2ac"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_app_2_n_default {T:Type} {n:nat} : forall (pred : arity T (S (S n))) (x1 x2 : T) (cpp Default : cartesianPower T n) (cpt : cartesianPower T (S (S n))), app pred cpt -> headCP cpt = x1 -> headCP (tailCP cpt) = x2 -> tailDefaultCP (tailCP cpt) Default = cpp -> app_2_n pred x1 x2 cpp.",
            "VernacStartTheoremProof",
            "76e50240313162eaa4ea71b2a5f176684e8e1e18"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
            "VernacExtend",
            "9aacaba5655cea38883202a3e5385d200e20f2ac"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear IHn.",
            "VernacExtend",
            "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
            "VernacExtend",
            "9aacaba5655cea38883202a3e5385d200e20f2ac"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma app_2_n_app_eq {T:Type} {n:nat} : forall (pred : arity T (S (S (S n)))) (x1 x2 : T) (cpp : cartesianPower T (S n)) (cpt : cartesianPower T (S (S (S n)))), headCP cpt = x1 -> headCP (tailCP cpt) = x2 -> tailCP (tailCP cpt) = cpp -> (app pred cpt <-> app_2_n pred x1 x2 cpp).",
            "VernacStartTheoremProof",
            "669d7bf7e2331fd198851d97338797a6f0ce9adc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro H2.",
            "VernacExtend",
            "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
        ],
        [
            "apply (app_app_2_n pred x1 x2 cpp cpt H2 H H0 H1).",
            "VernacExtend",
            "fbc39a9623fceda5a451017f18da0140beb5617f"
        ],
        [
            "intro H2.",
            "VernacExtend",
            "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
        ],
        [
            "apply (app_2_n_app pred x1 x2 cpp cpt H2 H H0 H1).",
            "VernacExtend",
            "926cee1e3e5b92635830e909cebd76be2559625b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PermOKAux {T : Type} {m : nat} : forall (appPred : (cartesianPower T (S (S m))) -> Prop) n, (forall (A : T) (X : cartesianPower T (S m)), appPred (consHeadCP A X) -> appPred (consTailCP X A)) -> (forall (X : cartesianPower T (S (S m))), appPred X -> appPred (circPermNCP n X)).",
            "VernacStartTheoremProof",
            "e50758dc34a06418badca7148cdbe5407d3dc205"
        ],
        [
            "intros appPred n HPerm.",
            "VernacExtend",
            "03c8ca39f353f7db6ad4b3b1261f84f528cc52b2"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros X HappPred.",
            "VernacExtend",
            "efca1b18585e9360176b78d101da6a8f83d7b6bb"
        ],
        [
            "assert (H : appPred (circPermNCP n X)) by (apply IHn; assumption); clear IHn; clear HappPred.",
            "VernacExtend",
            "e6cd244ae7abd82c2f677809b65df944bfd31a49"
        ],
        [
            "rewrite consHeadCPOK in H.",
            "VernacExtend",
            "1455c05743f726bb849369bd6dcfc11c90af4066"
        ],
        [
            "apply HPerm in H.",
            "VernacExtend",
            "bb8b165c043f45db97a87703819d1ef9d466aba6"
        ],
        [
            "rewrite circPermNCPOK.",
            "VernacExtend",
            "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
        ],
        [
            "rewrite <- circPermNConsTlOK.",
            "VernacExtend",
            "b3c1a386c5f634c713da8e58aef35cc4b285311d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PermOK {T : Type} {n : nat} : forall (cp1 cp2 : cartesianPower T (S (S n))) (appPred : (cartesianPower T (S (S n))) -> Prop), (forall (A : T) (X : cartesianPower T (S n)), appPred (consHeadCP A X) -> appPred (consTailCP X A)) -> (forall (A B : T) (X : cartesianPower T n), appPred (consHeadCP A (consHeadCP B X)) -> appPred (consHeadCP B (consHeadCP A X))) -> appPred cp1 -> Permutation.Permutation (CPToList cp1) (CPToList cp2) -> appPred cp2.",
            "VernacStartTheoremProof",
            "422693ca0295635281c6973cd3a478489f7bcf0b"
        ],
        [
            "induction n; intros cp1 cp2 appPred pred_perm_1 pred_perm_2 Hpred HPerm.",
            "VernacExtend",
            "edcd96bf6bc88577e2b7a4464fe650aba594bbad"
        ],
        [
            "assert (Hcp1 := CPPair cp1); rewrite Hcp1 in *; clear Hcp1.",
            "VernacExtend",
            "c997ccbfe4cce66913714f50eb6a17c30778727e"
        ],
        [
            "assert (Hcp2 := CPPair cp2); rewrite Hcp2 in *; clear Hcp2.",
            "VernacExtend",
            "5b7304f5cd8335426b8c784d40f129858e6c9dd6"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "apply Permutation.Permutation_length_2 in HPerm.",
            "VernacExtend",
            "7169b43c6e9eab0a89954886cb4fff345bf24244"
        ],
        [
            "elim HPerm; clear HPerm; intro HPerm; destruct HPerm as [HEq1 HEq2]; rewrite <- HEq1; rewrite <- HEq2.",
            "VernacExtend",
            "31d8665822fb0603fdda572e60773ec711778c61"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply pred_perm_1; assumption.",
            "VernacExtend",
            "f69d8a44dd92f01d2dced7d2f51ff1a52202f46b"
        ],
        [
            "rewrite consTailCPOK.",
            "VernacExtend",
            "e7601107f0d52d5774bafb0dd2d12f1440c2929d"
        ],
        [
            "assert (H' := lastCPIn cp2).",
            "VernacExtend",
            "60a87d54a7738f7497ebfdd2e9058c41b3d43adb"
        ],
        [
            "assert (H : InCP (lastCP cp2) cp1) by (unfold InCP;apply Permutation.Permutation_in with (CPToList cp2); try apply Permutation.Permutation_sym; assumption); clear H'.",
            "VernacExtend",
            "d203a7339f5661ff5bd52ff0473a8cd47e81c71b"
        ],
        [
            "assert (H' := InNth cp1 (lastCP cp2) (headCP cp2) H); clear H.",
            "VernacExtend",
            "aee01f8813facb4d2f9b16f4e96ee639a67be0b0"
        ],
        [
            "destruct H' as [id [Hge [Hle Hnth]]].",
            "VernacExtend",
            "6af6826779699ad3b180c26e305d0542b86e0bfc"
        ],
        [
            "assert (H : exists cp, appPred cp /\\ Permutation.Permutation (CPToList cp2) (CPToList cp) /\\ lastCP cp = lastCP cp2).",
            "VernacExtend",
            "784e942201927051ca289f1305df7c475c5d14dc"
        ],
        [
            "induction id; try (unfold ge in Hge; assert (H := Le.le_Sn_0 0); contradiction); clear IHid.",
            "VernacExtend",
            "a8b52ee18d1f17d7108e82caa0ca77767f6f25e5"
        ],
        [
            "revert Hnth; revert HPerm; revert Hpred; revert cp1; induction id; intros.",
            "VernacExtend",
            "fc118ed85a16067ff39623caa39957286ca20391"
        ],
        [
            "exists (consTailCP (tailCP cp1) (headCP cp1)).",
            "VernacExtend",
            "add67156887bc03fb5be1a07c845cb29d4fb0ae5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply pred_perm_1.",
            "VernacExtend",
            "d2236473ca9604fd8cabcd8f3109a27b1a1adc05"
        ],
        [
            "rewrite <- consHeadCPOK.",
            "VernacExtend",
            "65fbadf6c2725a202db29f618fc7dabea16e0013"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Permutation.perm_trans with (CPToList cp1); try (apply consTailPerm).",
            "VernacExtend",
            "c2d3d77d51bcfc011df25df6bb29e41812fc1404"
        ],
        [
            "apply Permutation.Permutation_sym; assumption.",
            "VernacExtend",
            "4c6ad6dd07e554db59c4525749d61f7fbf5ef739"
        ],
        [
            "apply nthCircPerm1 in Hnth.",
            "VernacExtend",
            "d832f2c6e75641e686da42f8aad390594f2362e1"
        ],
        [
            "rewrite Hnth.",
            "VernacExtend",
            "893d3037321022e89ec48f27d3c1447b45504829"
        ],
        [
            "assert (H := nthLast (consTailCP (tailCP cp1) (headCP cp1)) (headCP cp2)); rewrite H; reflexivity.",
            "VernacExtend",
            "fd02b8b3a5804ad66179a5b529ec7939fabc38df"
        ],
        [
            "assert (H := Hle).",
            "VernacExtend",
            "1393ede51fd07c2d3de495fdffef324a4d3901a1"
        ],
        [
            "do 2 (apply Le.le_S_n in H).",
            "VernacExtend",
            "858a1f4078d29ae5017ba2b226fbe77a955c4021"
        ],
        [
            "apply nthCircPerm2 in Hnth; try assumption; clear H.",
            "VernacExtend",
            "268333a8a8eeadb7b9dbbd37bb167e451fbf720b"
        ],
        [
            "apply Le.le_Sn_le in Hle.",
            "VernacExtend",
            "eb17f7abd6eabf4e844e9082fe73d0563d66c293"
        ],
        [
            "assert (H : S id >= 1) by intuition; clear Hge; rename H into Hge.",
            "VernacExtend",
            "e6432f386645686a3705920d58265534337f112f"
        ],
        [
            "assert (H : appPred (consTailCP (tailCP cp1) (headCP cp1))) by (apply pred_perm_1; rewrite <- consHeadCPOK; assumption) ; clear Hpred; rename H into Hpred.",
            "VernacExtend",
            "4e11be2d6395dfae7cd0eeadd3fff9ee8849002a"
        ],
        [
            "assert (H := consTailPerm cp1); apply Permutation.Permutation_sym in H.",
            "VernacExtend",
            "bb823c565b57cd781cbb2f18d19148c7d77b237b"
        ],
        [
            "assert (H' : Permutation.Permutation (CPToList (consTailCP (tailCP cp1) (headCP cp1))) (CPToList cp2)) by (apply Permutation.perm_trans with (CPToList cp1); assumption); clear HPerm; rename H' into HPerm.",
            "VernacExtend",
            "1a97311598719eef4611d534c6f1a3aa65504fd3"
        ],
        [
            "assert (H' := IHid Hge Hle (consTailCP (tailCP cp1) (headCP cp1)) Hpred HPerm Hnth).",
            "VernacExtend",
            "48891ae3c31d01a899f5e50ce8e7c591719df11d"
        ],
        [
            "destruct H' as [cp [Hpredcp [HPermcp Hlastcp]]]; exists cp.",
            "VernacExtend",
            "c844fed09b16b33891738166b3e2d28aac625f1a"
        ],
        [
            "do 2 (split; try assumption).",
            "VernacExtend",
            "0314a10677b01b703501076cff849cabccdbdd8b"
        ],
        [
            "clear Hnth; clear Hle; clear Hge; clear id; clear HPerm; clear Hpred; clear cp1.",
            "VernacExtend",
            "3c29c0260d30aaeb94d52d3e8441a4da51638a19"
        ],
        [
            "destruct H as [cp [Hpred [HPerm Hlast]]]; rewrite <- Hlast.",
            "VernacExtend",
            "2ab899f2fc04339b4901b35ee8013b22512a7ca7"
        ],
        [
            "assert (H := consTailCPOK cp); rewrite H in HPerm; clear H.",
            "VernacExtend",
            "1e165132c63bd6530f2232fdac2969d664e6d996"
        ],
        [
            "assert (H := consTailCPOK cp2); rewrite H in HPerm; clear H.",
            "VernacExtend",
            "7e70c1482d1e1a0d730965c33845f78d1f46d924"
        ],
        [
            "do 2 (rewrite consTailOK in HPerm).",
            "VernacExtend",
            "914f7eddecd1cddfe41cf2dfb1102ca825a7a0a0"
        ],
        [
            "rewrite Hlast in HPerm.",
            "VernacExtend",
            "28abd930252ccfdaf52aaa51f9ac6b9f3a711e15"
        ],
        [
            "apply Permutation.Permutation_app_inv_r in HPerm.",
            "VernacExtend",
            "2aa74b9a70fce5f5a7b98c4e61ee556e001cf5d0"
        ],
        [
            "assert (ablcp := allButLastCP cp).",
            "VernacExtend",
            "2b132798a5efe493f85ccf122af23ff49f009577"
        ],
        [
            "assert (ablcp2 := allButLastCP cp2).",
            "VernacExtend",
            "cca7775262468f6ad84721c70aba67fc75d12282"
        ],
        [
            "assert (pred_perm_3 := PermOKAux appPred (S n) pred_perm_1).",
            "VernacExtend",
            "c1bdb65d92c336ec400942cfaaa6f88137fe01f9"
        ],
        [
            "assert (HPerm1 : (forall (A : T) (X : cartesianPower T (S n)), (fixLastCP appPred (lastCP cp)) (consHeadCP A X) -> (fixLastCP appPred (lastCP cp)) (consTailCP X A))).",
            "VernacExtend",
            "3c08388ab7002b38c843e9447255804d62ab301a"
        ],
        [
            "unfold fixLastCP; intros A X HappPred.",
            "VernacExtend",
            "78996872395dc4bf04556fa6e5f9e360b6d34800"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl in HappPred.",
            "VernacExtend",
            "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
        ],
        [
            "apply pred_perm_2.",
            "VernacExtend",
            "0bdb08ca0764d61038fda5e2ed96b8c49b10ed5d"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear IHn0.",
            "VernacExtend",
            "8baf6e7884357a18bf8e61c467f230bd9a632255"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in HappPred.",
            "VernacExtend",
            "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
        ],
        [
            "simpl in pred_perm_1.",
            "VernacExtend",
            "7bbdcbe45fc84af621e9c2a7eccad56304af088f"
        ],
        [
            "simpl in pred_perm_2.",
            "VernacExtend",
            "a80d844500edd5c816e5020b50a9783d0641cada"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_3 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "e196567fe653cd1a7b12411dea03f06c778a3804"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear IHn0.",
            "VernacExtend",
            "8baf6e7884357a18bf8e61c467f230bd9a632255"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in HappPred.",
            "VernacExtend",
            "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
        ],
        [
            "simpl in pred_perm_1.",
            "VernacExtend",
            "7bbdcbe45fc84af621e9c2a7eccad56304af088f"
        ],
        [
            "simpl in pred_perm_2.",
            "VernacExtend",
            "a80d844500edd5c816e5020b50a9783d0641cada"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "apply pred_perm_1 in HappPred; simpl in HappPred.",
            "VernacExtend",
            "769c26913793029bcef0bbb296efab4250e48e5b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear IHn0.",
            "VernacExtend",
            "8baf6e7884357a18bf8e61c467f230bd9a632255"
        ],
        [
            "assert (H := consHeadCPOK X); rewrite H in *; clear H.",
            "VernacExtend",
            "7f6f149a0ce36645e04585f6334b35f81bf3df82"
        ],
        [
            "assert (H := consTailCPOK (tailCP X)); rewrite H in *; clear H.",
            "VernacExtend",
            "6038985b00077ba64efc06490820c61852ad8c7c"
        ],
        [
            "set (B := headCP X) in *.",
            "VernacExtend",
            "3165305e66bcee60fc04cb2a027985ae6620d5cc"
        ],
        [
            "set (CP := allButLastCP (allButLastCP (tailCP X))) in *.",
            "VernacExtend",
            "adfaef4fa4281d6b6abf1e8a9a319c676bdd9590"
        ],
        [
            "set (C := tailCP (allButLastCP (tailCP X))) in *.",
            "VernacExtend",
            "ae5f5c32c6e2af1ceeeefa870138049eda86e390"
        ],
        [
            "set (D := lastCP (tailCP X)) in *.",
            "VernacExtend",
            "81940bc91bfccc9a6fe2f48b50adc0bff4ba6d7d"
        ],
        [
            "set (E := lastCP cp) in *.",
            "VernacExtend",
            "3d79cf306cfe33993e1b2fa5f807232c24c18271"
        ],
        [
            "apply pred_perm_3 in HappPred; rewrite consTlHdHdTl in HappPred; rewrite circPermNConsOK in HappPred.",
            "VernacExtend",
            "268f19ef85b06970f3793d9f855543ca7a458044"
        ],
        [
            "apply pred_perm_1 in HappPred; do 2 (rewrite <- consHdTlTlHd in HappPred).",
            "VernacExtend",
            "7eadebbb6014c265cfe25d43fda3b213a394a8c5"
        ],
        [
            "apply pred_perm_2 in HappPred.",
            "VernacExtend",
            "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
        ],
        [
            "apply pred_perm_1; rewrite <- consHdTlTlHd; rewrite <- circPermNConsOK.",
            "VernacExtend",
            "d83979dba9d2211d434bb8bdf5be613f64863659"
        ],
        [
            "apply pred_perm_3.",
            "VernacExtend",
            "3a883e61b1cb143d66deb3b4b8d13cdb9aa6d7b6"
        ],
        [
            "do 2 (apply pred_perm_1; rewrite consHdTlTlHd); rewrite consHdTlTlHd.",
            "VernacExtend",
            "63a5a3817b518e544f83e1cd36c51bcb3fa0a66d"
        ],
        [
            "apply pred_perm_1.",
            "VernacExtend",
            "d2236473ca9604fd8cabcd8f3109a27b1a1adc05"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (HPerm2 : (forall (A B : T) (X : cartesianPower T n), (fixLastCP appPred (lastCP cp)) (consHeadCP A (consHeadCP B X)) -> (fixLastCP appPred (lastCP cp)) (consHeadCP B (consHeadCP A X)))) by (unfold fixLastCP; intros A B X HappPred; rewrite <- consTlHdHdTl; apply pred_perm_2; rewrite consTlHdHdTl; assumption).",
            "VernacExtend",
            "3c2f89483cf70aa34cf42629bc0333fb9723237d"
        ],
        [
            "apply Permutation.Permutation_sym in HPerm.",
            "VernacExtend",
            "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
        ],
        [
            "assert (H := IHn (allButLastCP cp) (allButLastCP cp2) (fixLastCP appPred (lastCP cp)) HPerm1 HPerm2).",
            "VernacExtend",
            "77b6f542a8ba37af9a2acd929178662f03d55e56"
        ],
        [
            "apply H; try assumption.",
            "VernacExtend",
            "68e7092774a2e9a2819db750e45c33de9d664634"
        ],
        [
            "rewrite <- fixLastCPOK.",
            "VernacExtend",
            "65bfb162b7e9867cdca91ac8acd3c4faa2173008"
        ],
        [
            "rewrite <- consTailCPOK.",
            "VernacExtend",
            "c6689cfe45bce7d95c908555702bbc1d1918f7d5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lengthNilOK {A : Type} : forall (l : list A), length l = 0 -> l = nil.",
            "VernacStartTheoremProof",
            "8f121717fe4b0b48bc26df40583a69b784b964cd"
        ],
        [
            "intros l Hlength; induction l.",
            "VernacExtend",
            "d4b118832d61f721685fdb0ae9cc593ad4b49547"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in Hlength.",
            "VernacExtend",
            "b56b0b0fdaf572bbd71967066d8c971e314b994d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDupOK {A : Type} : forall (l l' : list A), incl l l' -> length l = length l' -> NoDup l -> Permutation.Permutation l l'.",
            "VernacStartTheoremProof",
            "740c4e9a492b92fb8380f7dbc0c6c30e6ee6c6cd"
        ],
        [
            "intro l; induction l; intros l' Hincl Hlength HNoDup.",
            "VernacExtend",
            "36d960983810050e3e37b0146121e31be07aa187"
        ],
        [
            "simpl in Hlength.",
            "VernacExtend",
            "b56b0b0fdaf572bbd71967066d8c971e314b994d"
        ],
        [
            "apply eq_sym in Hlength.",
            "VernacExtend",
            "9daca15835efabb298f07643e1076af749e031da"
        ],
        [
            "apply lengthNilOK in Hlength.",
            "VernacExtend",
            "15560a1336851584c0a26d4cb73ae72a54e0d4d7"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply Permutation.perm_nil.",
            "VernacExtend",
            "872f7594b0e8651299f00535dfad0e8b9ff3fc6f"
        ],
        [
            "induction l'.",
            "VernacExtend",
            "773e04ff833259851fb65b4bcd371f3996d47e26"
        ],
        [
            "simpl in Hlength.",
            "VernacExtend",
            "b56b0b0fdaf572bbd71967066d8c971e314b994d"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "clear IHl'.",
            "VernacExtend",
            "5d9ecccaea7c6a865b008a90acbec22b9eb1f6b4"
        ],
        [
            "rename a0 into a'.",
            "VernacExtend",
            "a97c0733503bc0fdf8faf7e51e18c33a52194f37"
        ],
        [
            "assert (HIn := in_eq a l).",
            "VernacExtend",
            "f23fee9933a34c6e97de7496572120edb07e2172"
        ],
        [
            "assert (H := Hincl).",
            "VernacExtend",
            "ed12c27297899d9053b9c62c8f6713c933054439"
        ],
        [
            "unfold incl in H.",
            "VernacExtend",
            "7efcfee3aa78d8489d80ccdf83d0b72661f1ba26"
        ],
        [
            "apply H in HIn.",
            "VernacExtend",
            "2da3bd42e5f29b15ef9a60555dd0c6034ffe0bee"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "apply in_split in HIn.",
            "VernacExtend",
            "a2913997515114d5b720ea5dbf665aabd00d038c"
        ],
        [
            "destruct HIn as [l1 [l2 Hl']].",
            "VernacExtend",
            "8c30609187acc101a3983f2ba9b3b37731da67bb"
        ],
        [
            "rewrite Hl' in *.",
            "VernacExtend",
            "6fc85f8b4e887099545c7a71c68b441050e57253"
        ],
        [
            "apply Permutation.Permutation_cons_app.",
            "VernacExtend",
            "7d390634d14134a4b8df75cf1867087dd02038dc"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "unfold incl.",
            "VernacExtend",
            "bc668a228fabc181ca6e5d6b8b8a0673a10724dc"
        ],
        [
            "intros e HIn.",
            "VernacExtend",
            "4376b87e7e7aeaba492e6fe1c2ad3aada03aeb9b"
        ],
        [
            "unfold incl in Hincl.",
            "VernacExtend",
            "14f3fd11e65bc2792727fbcd20d2dd2947f1764a"
        ],
        [
            "assert (H := Hincl e).",
            "VernacExtend",
            "5cf404fff830cd25182c94299e0caf51da115e3e"
        ],
        [
            "clear Hincl.",
            "VernacExtend",
            "77e3824512f818b55287b7e255b534db82467296"
        ],
        [
            "assert (HIn' := in_cons a e l HIn).",
            "VernacExtend",
            "e8329d64b33f369135a069459181cca69a5bd2d5"
        ],
        [
            "apply H in HIn'.",
            "VernacExtend",
            "9506e9ce250fdd13b5acdc8fb7763ac73ff70dff"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "apply in_app_or in HIn'.",
            "VernacExtend",
            "bbdd00cd7b7f49c87650c4e8163d146930d463b7"
        ],
        [
            "elim HIn'; clear HIn'; intro HIn'.",
            "VernacExtend",
            "2311dff2f659de92b19627b64c4d9ae16e78f4bf"
        ],
        [
            "apply in_or_app.",
            "VernacExtend",
            "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply in_inv in HIn'.",
            "VernacExtend",
            "ca5d9b76a4604d5cef86835fd94fc453221e79c5"
        ],
        [
            "elim HIn'; clear HIn'; intro HIn'.",
            "VernacExtend",
            "2311dff2f659de92b19627b64c4d9ae16e78f4bf"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (H := NoDup_remove_2 nil l e).",
            "VernacExtend",
            "f1db7f76b259c8319bfd1ac0d3adcf4c0a27f385"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "apply H in HNoDup.",
            "VernacExtend",
            "8c42bf5f6abd00aaac0ee3f1d127ed68c28b75cc"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "apply in_or_app.",
            "VernacExtend",
            "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "rewrite app_length.",
            "VernacExtend",
            "b9244791fd1e7d821ced2461a10375e028945296"
        ],
        [
            "rewrite app_length in Hlength.",
            "VernacExtend",
            "69ce44d148ea67c08a6fa8b9f2b3e8feacc0d7b7"
        ],
        [
            "simpl in Hlength.",
            "VernacExtend",
            "b56b0b0fdaf572bbd71967066d8c971e314b994d"
        ],
        [
            "rewrite <- plus_n_Sm in Hlength.",
            "VernacExtend",
            "caa79aad28f59e84c987c071940418319858547a"
        ],
        [
            "apply eq_add_S in Hlength.",
            "VernacExtend",
            "01aae2642b33e42fc30a8f54f4588f5277f51cd5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H := NoDup_remove_1 nil l a).",
            "VernacExtend",
            "4a4d862bf47c7514d2802a91a4cc5f8d38df7afa"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoDup_dec {A : Type} : forall (l : list A), (forall x y : A, {x = y} + {x <> y}) -> NoDup l \\/ ~ NoDup l.",
            "VernacStartTheoremProof",
            "1c0e1e2573e22d4300043f69c7e0d99b4a9e314e"
        ],
        [
            "intros l HDec.",
            "VernacExtend",
            "790d782c3cc863b052240b1229fddf68afc66426"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply NoDup_nil.",
            "VernacExtend",
            "67313a1ac898e25e0b147e35dceb4ec1f7ac73d2"
        ],
        [
            "elim IHl; clear IHl; intro H.",
            "VernacExtend",
            "946f9b900b4dbce1365a7b63d963a14b214c75b8"
        ],
        [
            "assert (HIn := in_dec HDec a l).",
            "VernacExtend",
            "39e2833059019619648db29a5c67319130accdba"
        ],
        [
            "elim HIn; clear HIn; intro HIn.",
            "VernacExtend",
            "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "intro H.",
            "VernacExtend",
            "a9535760040671e8853f25f0b4e9eda38ca392a6"
        ],
        [
            "assert (H' := NoDup_remove_2 nil l a).",
            "VernacExtend",
            "73e46c85acb4adbe90ccdf42d5cd335ac8ca3eeb"
        ],
        [
            "simpl in H'.",
            "VernacExtend",
            "d943243015ae7f9d4452dfc70846f2ccdf57c2f4"
        ],
        [
            "apply H' in H.",
            "VernacExtend",
            "805e76f40d46d9ca720ab8f786b4ba8302834790"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply NoDup_cons; assumption.",
            "VernacExtend",
            "3fce642939bead3b4da3c2d7918f4b835b0733af"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "assert (H := NoDup_remove_1 nil l a).",
            "VernacExtend",
            "4a4d862bf47c7514d2802a91a4cc5f8d38df7afa"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NotNoDupDup {A : Type} : forall (l : list A), (forall x y : A, {x = y} + {x <> y}) -> ~ NoDup l-> exists e l1 l2, l = l1 ++ e :: l2 /\\ In e (l1 ++ l2).",
            "VernacStartTheoremProof",
            "45aace2924f03aca590403f55630ef4bc72efff5"
        ],
        [
            "intros l HDec.",
            "VernacExtend",
            "790d782c3cc863b052240b1229fddf68afc66426"
        ],
        [
            "induction l; intro HDup.",
            "VernacExtend",
            "a1a35a0f225713f147271b2aafd87d419472effc"
        ],
        [
            "assert (H := NoDup_nil A).",
            "VernacExtend",
            "0f57b7e5e8d96a86685cb8b7992abe3448282c7e"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "assert (HIn := in_dec HDec a l).",
            "VernacExtend",
            "39e2833059019619648db29a5c67319130accdba"
        ],
        [
            "elim HIn; clear HIn; intro HIn.",
            "VernacExtend",
            "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
        ],
        [
            "exists a; exists nil; exists l.",
            "VernacExtend",
            "836eea1bdd73ccd4d343bc6b05cc5ba507792934"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (HDup' := NoDup_dec l HDec).",
            "VernacExtend",
            "4a7de7758cf9519bcc2ad37596a942a9d45c473e"
        ],
        [
            "elim HDup'; clear HDup'; intro HDup'.",
            "VernacExtend",
            "b3e561071ebf9e14976a4bd8b7967a3b0d2c6f5b"
        ],
        [
            "exfalso.",
            "VernacExtend",
            "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
        ],
        [
            "apply HDup.",
            "VernacExtend",
            "3bdad60570da903f339e5433d6e3ba3b37bec3d8"
        ],
        [
            "apply NoDup_cons; assumption.",
            "VernacExtend",
            "3fce642939bead3b4da3c2d7918f4b835b0733af"
        ],
        [
            "apply IHl in HDup'.",
            "VernacExtend",
            "d9bd6e0dad1c1eb52248a9bb1d459ddc85887809"
        ],
        [
            "clear HDec; clear HDup; clear HIn.",
            "VernacExtend",
            "cf8693e1b3ad423d904b035c9cbc8678e8176fd2"
        ],
        [
            "destruct HDup' as [e [l1 [l2 [HEq HIn]]]]; clear IHl.",
            "VernacExtend",
            "b29bab730eac9e532710a16603cc52502d3566c5"
        ],
        [
            "exists e; exists (a :: l1); exists l2.",
            "VernacExtend",
            "8185bf8f06eb85d4021b744e4b08d9b9a266d6ec"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite HEq; reflexivity.",
            "VernacExtend",
            "d8fdb38c3508578e03d7e17988f3d4c6080a89b6"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pred_conj_aux {T:Type} {n:nat} (pred : arity T (S n)) (m : nat) (cp : cartesianPower T (S m)) (cpwd : cartesianPower T n) : Prop.",
            "VernacDefinition",
            "0310abc36eb61295047163f26cdfd31296fbb08a"
        ],
        [
            "induction m.",
            "VernacExtend",
            "6f6279e892ad221278939a9b429a59edaeeb1676"
        ],
        [
            "exact (app_1_n pred cp cpwd).",
            "VernacExtend",
            "44cf3099a650f5ca35f999866c97124f35156bb9"
        ],
        [
            "exact ((app_1_n pred (headCP cp) cpwd) /\\ IHm (tailCP cp)).",
            "VernacExtend",
            "72dc616b464eccc7ff630cfb9e52b86a5326ca2e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma pcaHdTl {T:Type} {n:nat} : forall (pred : arity T (S n)) m cp cpwd, pred_conj_aux pred (S m) cp cpwd = (app_1_n pred (headCP cp) cpwd /\\ pred_conj_aux pred m (tailCP cp) cpwd).",
            "VernacStartTheoremProof",
            "00d2c09bda1204a8279fc3ed910c26dc2a7178be"
        ],
        [
            "unfold pred_conj_aux; unfold nat_rect; reflexivity.",
            "VernacExtend",
            "824596af58ed8b32903be5d0c41c6874c531b856"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pred_conj {T:Type} {n:nat} (pred : arity T (S n)) (cp : cartesianPower T (S n)) (cpwd : cartesianPower T n) : Prop.",
            "VernacDefinition",
            "fe987ddf297544a5417106296c4628ce9b3caa95"
        ],
        [
            "exact (pred_conj_aux pred n cp cpwd).",
            "VernacExtend",
            "e622dfd707754d142d615d056beb03c48e5f43f1"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "minus_n_0",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "induction n; trivial.",
                        "VernacExtend",
                        "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "plus_0_n",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "induction n; trivial.",
                        "VernacExtend",
                        "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "plus_n_0",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "induction n; trivial.",
                        "VernacExtend",
                        "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite IHn; reflexivity.",
                        "VernacExtend",
                        "7cc744d90f0b70e1031c445b5570cf55ceee6ae5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "plus_n_1",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "induction n; trivial.",
                        "VernacExtend",
                        "38c5350a53609e1d4c64878bb589b9a59ffc85a2"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite IHn; reflexivity.",
                        "VernacExtend",
                        "7cc744d90f0b70e1031c445b5570cf55ceee6ae5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "minus_n1_n2_0",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "induction n1; induction n2; trivial.",
                        "VernacExtend",
                        "34b207c7548beebbd54b864e94e233c1d5b03058"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "headCP",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact cp.",
                        "VernacExtend",
                        "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
                    ]
                },
                {
                    "command": [
                        "exact (fst cp).",
                        "VernacExtend",
                        "dd6fe8f9fa5d0e8790f96b0c2205656840119c75"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "headCPbis",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact cp.",
                        "VernacExtend",
                        "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
                    ]
                },
                {
                    "command": [
                        "exact (fst cp).",
                        "VernacExtend",
                        "dd6fe8f9fa5d0e8790f96b0c2205656840119c75"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "tailCP",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact (snd cp).",
                        "VernacExtend",
                        "f7b414481519e8c94217a4ea999e3cfe4c765c8e"
                    ]
                },
                {
                    "command": [
                        "exact (snd cp).",
                        "VernacExtend",
                        "f7b414481519e8c94217a4ea999e3cfe4c765c8e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "tailDefaultCP",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact Default.",
                        "VernacExtend",
                        "ac24d2bfc1bde36ccc33289bb14eae3223745f2e"
                    ]
                },
                {
                    "command": [
                        "exact (tailCP cp).",
                        "VernacExtend",
                        "0c782ae080e0e99645db353883d8f85379fa5eb2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "allButLastCP",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact (headCP cp).",
                        "VernacExtend",
                        "3f67cb569526207a09f6757d05cf515c951e1be4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact (headCP cp).",
                        "VernacExtend",
                        "3f67cb569526207a09f6757d05cf515c951e1be4"
                    ]
                },
                {
                    "command": [
                        "unfold cartesianPower in IHn.",
                        "VernacExtend",
                        "22735a48e1b984dcf6673fd6485868f9653ce774"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0 in IHn.",
                        "VernacExtend",
                        "ea41ec06a8f67595af1d52b2d36f2d0f8d19d081"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "exact (tailCP cp).",
                        "VernacExtend",
                        "0c782ae080e0e99645db353883d8f85379fa5eb2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "allButLastCPTl",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intro cp; induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "a71d2d551a76668e454edbd22fa95b8a521131fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lastCP",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact cp.",
                        "VernacExtend",
                        "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "exact (tailCP cp).",
                        "VernacExtend",
                        "0c782ae080e0e99645db353883d8f85379fa5eb2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "lastCPTl",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intro cp; induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "a71d2d551a76668e454edbd22fa95b8a521131fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CP_ind",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n; simpl in *; apply injective_projections; assumption.",
                        "VernacExtend",
                        "8312f8a8c51d9f403cf63bf691f46b937db7d7b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPPair",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind; simpl; reflexivity.",
                        "VernacExtend",
                        "aaee9b56a120ea0c39fc48226cebecec3e1290cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tailCPbis",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros Hm1 Hm2.",
                        "VernacExtend",
                        "e2704b5f103ecdd578516abc71a20a088fddee29"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "exact (tailCP cp).",
                        "VernacExtend",
                        "0c782ae080e0e99645db353883d8f85379fa5eb2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "consHeadCP",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact t.",
                        "VernacExtend",
                        "17416f87623794c32a48f94a10f9fd8fd82da9f1"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact t.",
                        "VernacExtend",
                        "17416f87623794c32a48f94a10f9fd8fd82da9f1"
                    ]
                },
                {
                    "command": [
                        "unfold cartesianPower in cp.",
                        "VernacExtend",
                        "76188d16689ee4014694a16f3c7822724c5a2cd9"
                    ]
                },
                {
                    "command": [
                        "simpl in cp.",
                        "VernacExtend",
                        "de0a88e0341810116979e56a8dc62e388cfec3f9"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0 in cp.",
                        "VernacExtend",
                        "0d201f0bb8ac3117ad9c58c4bd44fd7b75c6414c"
                    ]
                },
                {
                    "command": [
                        "exact cp.",
                        "VernacExtend",
                        "0b36e09a690daa999ad9a3de26a0a49558dde7c7"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "consHeadCPHd",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intro cp; induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "a71d2d551a76668e454edbd22fa95b8a521131fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consHeadCPTl",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intro cp; induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "a71d2d551a76668e454edbd22fa95b8a521131fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consHeadCPOK",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply CPPair.",
                        "VernacExtend",
                        "1e49f95e0733d290d34eac6a1a6d6b72a0f79fc1"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl; reflexivity.",
                        "VernacExtend",
                        "72891262049cbc3934dfd006174104e0f01751a3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailCP",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact t.",
                        "VernacExtend",
                        "17416f87623794c32a48f94a10f9fd8fd82da9f1"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact (cp, t).",
                        "VernacExtend",
                        "668a640423d97ecd32bc5a7e0353862318870bd8"
                    ]
                },
                {
                    "command": [
                        "clear IHn0.",
                        "VernacExtend",
                        "8baf6e7884357a18bf8e61c467f230bd9a632255"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact (headCP cp).",
                        "VernacExtend",
                        "3f67cb569526207a09f6757d05cf515c951e1be4"
                    ]
                },
                {
                    "command": [
                        "exact (IHn (tailCP cp)).",
                        "VernacExtend",
                        "c8df458f9121fe9a6b2d9a46103d272c237c7728"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "consTailCPTl",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intro cp; induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "a71d2d551a76668e454edbd22fa95b8a521131fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailCPOK",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply CPPair.",
                        "VernacExtend",
                        "1e49f95e0733d290d34eac6a1a6d6b72a0f79fc1"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHn (tailCP cp)).",
                        "VernacExtend",
                        "cfc2d8c58bfc0aa50cf2c939ea7e379c1c79ee3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lastCPTl in H.",
                        "VernacExtend",
                        "ca6eb93a1c9143b9d0c4677bedb0edadb3187d02"
                    ]
                },
                {
                    "command": [
                        "rewrite allButLastCPTl in H.",
                        "VernacExtend",
                        "246ad25fb80069cf598b01864ed78ceb1d908b7e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- consTailCPTl in H.",
                        "VernacExtend",
                        "6ed1a740415e1f7b7fbc2a852a9467022e7b3901"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailCPAbl",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "intros cp t; induction n; try (simpl; reflexivity).",
                        "VernacExtend",
                        "e61dc7709759f84a54d553b65d21524dc03b72f5"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHn.",
                        "VernacExtend",
                        "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
                    ]
                },
                {
                    "command": [
                        "rewrite <- consTailCPTl.",
                        "VernacExtend",
                        "cef033f508b727aab71816cee58c17eed891b5c2"
                    ]
                },
                {
                    "command": [
                        "rewrite allButLastCPTl.",
                        "VernacExtend",
                        "86d3d097ec58d0d7402cfca99b57ae523f047101"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailCPTlD",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros cp t; induction n; try (simpl; reflexivity).",
                        "VernacExtend",
                        "e61dc7709759f84a54d553b65d21524dc03b72f5"
                    ]
                },
                {
                    "command": [
                        "induction n; simpl; reflexivity.",
                        "VernacExtend",
                        "df241b5c60311830e909478d01091c61621e541b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consHdTlTlHd",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "intros F L X.",
                        "VernacExtend",
                        "3b1477430684db11c7b927adb06cbd7cb167e824"
                    ]
                },
                {
                    "command": [
                        "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
                        "VernacExtend",
                        "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "intros F L X.",
                        "VernacExtend",
                        "3b1477430684db11c7b927adb06cbd7cb167e824"
                    ]
                },
                {
                    "command": [
                        "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
                        "VernacExtend",
                        "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
                    ]
                },
                {
                    "command": [
                        "intros F L X.",
                        "VernacExtend",
                        "3b1477430684db11c7b927adb06cbd7cb167e824"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "assert (H := consHeadCPOK X); rewrite H; clear H.",
                        "VernacExtend",
                        "5f8fac1798342f128ff1916404d7b28fad68347c"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl.",
                        "VernacExtend",
                        "5285d85f246deaf1faa34f8659332af505ced706"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailCPTl.",
                        "VernacExtend",
                        "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl.",
                        "VernacExtend",
                        "5285d85f246deaf1faa34f8659332af505ced706"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTlHdHdTl",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "intros A B C X.",
                        "VernacExtend",
                        "2aa97f895925ac1cb9b3658e555e9d8382d30449"
                    ]
                },
                {
                    "command": [
                        "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
                        "VernacExtend",
                        "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "intros A B C X.",
                        "VernacExtend",
                        "2aa97f895925ac1cb9b3658e555e9d8382d30449"
                    ]
                },
                {
                    "command": [
                        "unfold consHeadCP; unfold consTailCP; simpl; reflexivity.",
                        "VernacExtend",
                        "82d31d91eb4e2f1e5b845b44243fb5d9e5ff74f0"
                    ]
                },
                {
                    "command": [
                        "intros A B C X.",
                        "VernacExtend",
                        "2aa97f895925ac1cb9b3658e555e9d8382d30449"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "assert (H := consHeadCPOK X); rewrite H; clear H.",
                        "VernacExtend",
                        "5f8fac1798342f128ff1916404d7b28fad68347c"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl.",
                        "VernacExtend",
                        "5285d85f246deaf1faa34f8659332af505ced706"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailCPTl.",
                        "VernacExtend",
                        "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl.",
                        "VernacExtend",
                        "5285d85f246deaf1faa34f8659332af505ced706"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHn.",
                        "VernacExtend",
                        "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite consHeadCPTl).",
                        "VernacExtend",
                        "a5f9347bdd0a4e7f6382b23fb40bf5ee7f99ccdc"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl.",
                        "VernacExtend",
                        "5285d85f246deaf1faa34f8659332af505ced706"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailCPTl.",
                        "VernacExtend",
                        "ad03cf6e4f019b3391749b09a74036b5fdf76b4d"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPTl; reflexivity.",
                        "VernacExtend",
                        "72891262049cbc3934dfd006174104e0f01751a3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPToList",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact nil.",
                        "VernacExtend",
                        "221463c73c88586bbdeb2d7fddb75313a7dd5887"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exact (cons cp nil).",
                        "VernacExtend",
                        "a2d513a241f174aab3cf919451d62d0ad2ce3dc7"
                    ]
                },
                {
                    "command": [
                        "apply cons.",
                        "VernacExtend",
                        "6e3fa01c803d31f81a7ff1df9b21bac128cbbd28"
                    ]
                },
                {
                    "command": [
                        "exact (headCP cp).",
                        "VernacExtend",
                        "3f67cb569526207a09f6757d05cf515c951e1be4"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "exact (tailCP cp).",
                        "VernacExtend",
                        "0c782ae080e0e99645db353883d8f85379fa5eb2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "InCPOK",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "intros p cp; unfold InCP; induction n; simpl.",
                        "VernacExtend",
                        "0e6577d8f2140819e1c544c6fa94c8032af72ac6"
                    ]
                },
                {
                    "command": [
                        "split; intro H.",
                        "VernacExtend",
                        "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "left; subst; reflexivity.",
                        "VernacExtend",
                        "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "left; subst; reflexivity.",
                        "VernacExtend",
                        "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "split; intro H.",
                        "VernacExtend",
                        "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "left; subst; reflexivity.",
                        "VernacExtend",
                        "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "left; subst; reflexivity.",
                        "VernacExtend",
                        "fe200eec37ab0caad0908eeeac2b6a1ff361f204"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lastCPIn",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "unfold InCP.",
                        "VernacExtend",
                        "df1188e79a6d40e6ab2452b5fd80a8a17374515e"
                    ]
                },
                {
                    "command": [
                        "intro cp; induction n.",
                        "VernacExtend",
                        "4727b576acbea676c732194c48e182e0d8bce9c7"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHn (tailCP cp)).",
                        "VernacExtend",
                        "cfc2d8c58bfc0aa50cf2c939ea7e379c1c79ee3e"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPToListOK",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLHdTlOK",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "induction n; intro cp; simpl; reflexivity.",
                        "VernacExtend",
                        "e5be823c9d7b21d7302c98825d35d3249889c599"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailOK",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp t.",
                        "VernacExtend",
                        "04d9458a3db475d480ddabe78ce7874d3b5302fe"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite CPToListOK.",
                        "VernacExtend",
                        "eef100557e9be0c6aaae82db33eb1f15d005d960"
                    ]
                },
                {
                    "command": [
                        "assert (H : headCP (consTailCP cp t) = headCP cp) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "966800d2319b1cc7ac3ca15dee7223f5c70a0736"
                    ]
                },
                {
                    "command": [
                        "assert (H : tailCP (consTailCP cp t) = (consTailCP (tailCP cp) t)) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "fe0cd339b1b16085a539907067f4f97272e394a9"
                    ]
                },
                {
                    "command": [
                        "rewrite IHn.",
                        "VernacExtend",
                        "ec9472e508d0ba82a8f6be939d2e4d39f35c3667"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InNth",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp t Default HIn.",
                        "VernacExtend",
                        "176b298541349c306c4634ad31c156dd8a0236bd"
                    ]
                },
                {
                    "command": [
                        "unfold InCP in HIn.",
                        "VernacExtend",
                        "e5d26015d2e77c81bd42744c6bdc7e75b5d74f82"
                    ]
                },
                {
                    "command": [
                        "simpl in HIn.",
                        "VernacExtend",
                        "af19e5789c5bd9adae0bce08955f8a2a5a9a0a1c"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "exists 1; try intuition.",
                        "VernacExtend",
                        "85ac0f2393e26e9eb484dcef1748c8c094ac0d3d"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP; simpl.",
                        "VernacExtend",
                        "fd0c2a3ff97e003f496d89910353821dfc69db64"
                    ]
                },
                {
                    "command": [
                        "unfold InCP in HIn; simpl in HIn.",
                        "VernacExtend",
                        "ee1c91691c39a44274211820d9c1f2f701eb825d"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "clear IHn0.",
                        "VernacExtend",
                        "8baf6e7884357a18bf8e61c467f230bd9a632255"
                    ]
                },
                {
                    "command": [
                        "apply InCPOK in HIn.",
                        "VernacExtend",
                        "827e18e8f2c3cb87bf159d43eae1b086072ea3d1"
                    ]
                },
                {
                    "command": [
                        "elim HIn; clear HIn; intro HIn.",
                        "VernacExtend",
                        "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
                    ]
                },
                {
                    "command": [
                        "exists 1; unfold nthCP; simpl; intuition.",
                        "VernacExtend",
                        "9d63009ff7e5bf174ad08cf68d1282f6ca100db9"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHn (tailCP cp) t Default).",
                        "VernacExtend",
                        "87b8daa51171dc293ece9c2c6a378643dc953494"
                    ]
                },
                {
                    "command": [
                        "apply H in HIn; clear H.",
                        "VernacExtend",
                        "7f175d4313eb1cec215de6c0f56197dcee42c16e"
                    ]
                },
                {
                    "command": [
                        "destruct HIn as [id [Hge [Hle HEq]]].",
                        "VernacExtend",
                        "e697306619226ade85e968da92b16de0b03e5bed"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in *.",
                        "VernacExtend",
                        "3ca34627b20e61ae6fdc6827f762133101a3cb54"
                    ]
                },
                {
                    "command": [
                        "exists (S id); try intuition.",
                        "VernacExtend",
                        "b5eb6b22ebe43f38e3f66d9f69aad27b4b847f1e"
                    ]
                },
                {
                    "command": [
                        "assert (H := app_nth2 ((headCP cp) :: nil) (CPToList (tailCP cp)) Default Hge).",
                        "VernacExtend",
                        "d63872c8387a317e4083a6ac1ddb89693955685a"
                    ]
                },
                {
                    "command": [
                        "rewrite CPToListOK.",
                        "VernacExtend",
                        "eef100557e9be0c6aaae82db33eb1f15d005d960"
                    ]
                },
                {
                    "command": [
                        "assert (H' : (headCP cp :: nil) ++ CPToList (tailCP cp) = (headCP cp :: CPToList (tailCP cp))) by (simpl; reflexivity); rewrite <- H'; clear H'.",
                        "VernacExtend",
                        "eef5af93cf4cb0febe5787db214fbdf6dfe30e08"
                    ]
                },
                {
                    "command": [
                        "assert (H' : (S id - 1) = id) by (simpl; rewrite minus_n_0; reflexivity); rewrite H'; clear H'.",
                        "VernacExtend",
                        "9873aea1c288b7135c71f191d9034505c863ff8c"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply HEq.",
                        "VernacExtend",
                        "d1309a313f733c937c7fb937efef6ad86e9f873a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthFirst",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp t Default Hnth.",
                        "VernacExtend",
                        "31afe64c3b22234d17574339e84ea4c45d29f3fa"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in Hnth.",
                        "VernacExtend",
                        "bb202053a9318ee3fe6b0b02731714039ef34737"
                    ]
                },
                {
                    "command": [
                        "simpl in Hnth.",
                        "VernacExtend",
                        "40a304d854b9d6857e36e0e042846658f7cdf4c1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in Hnth.",
                        "VernacExtend",
                        "bb202053a9318ee3fe6b0b02731714039ef34737"
                    ]
                },
                {
                    "command": [
                        "simpl in Hnth.",
                        "VernacExtend",
                        "40a304d854b9d6857e36e0e042846658f7cdf4c1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lengthOfCPToList",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply eq_S.",
                        "VernacExtend",
                        "8ef0b219ea0189c2d80bb55d03c4c9f24beca469"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "lastTailOK",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "induction n; intro cp; simpl; reflexivity.",
                        "VernacExtend",
                        "e5be823c9d7b21d7302c98825d35d3249889c599"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailCPLast",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intros cp t; induction n; try (simpl; reflexivity).",
                        "VernacExtend",
                        "e61dc7709759f84a54d553b65d21524dc03b72f5"
                    ]
                },
                {
                    "command": [
                        "rewrite lastTailOK.",
                        "VernacExtend",
                        "a2127fe8919bb23e2034ec2880f4d7428d04a661"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthLast",
            "line_nb": 298,
            "steps": [
                {
                    "command": [
                        "unfold nthCP; induction n; intros cp Default.",
                        "VernacExtend",
                        "0a5e38cd681a672131c9ef2434880b1bde483732"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite lastTailOK.",
                        "VernacExtend",
                        "a2127fe8919bb23e2034ec2880f4d7428d04a661"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHn (tailCP cp) Default); rewrite H; clear H; clear IHn.",
                        "VernacExtend",
                        "451f89c57ffd049cca599179b0ac776d16b460b3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0.",
                        "VernacExtend",
                        "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCircPerm1",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "intros cp t Default Hnth.",
                        "VernacExtend",
                        "2bef157b3e5666349c8d3edd6174af76b7d9d29a"
                    ]
                },
                {
                    "command": [
                        "apply nthFirst in Hnth.",
                        "VernacExtend",
                        "aad36d39164feafa5833c1b170f1f95c01107042"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hnth.",
                        "VernacExtend",
                        "5e70296f43972cce3cc8b24a7c950007ba4a7dc5"
                    ]
                },
                {
                    "command": [
                        "clear Hnth.",
                        "VernacExtend",
                        "f503ee23ebea71d8848ca61b4360bab8a28835c1"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailOK.",
                        "VernacExtend",
                        "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
                    ]
                },
                {
                    "command": [
                        "rewrite app_nth2.",
                        "VernacExtend",
                        "74addee75b3c84dd121c466306b8bb741471b291"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Minus.minus_diag_reverse.",
                        "VernacExtend",
                        "bde080e07a4d414dbe005583988c3b79b7f4e85b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCircPerm1Eq",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "intros cp Default.",
                        "VernacExtend",
                        "ca4f1a728705fc842c814e5bf35452c42af1efcf"
                    ]
                },
                {
                    "command": [
                        "apply nthCircPerm1.",
                        "VernacExtend",
                        "0d459606de2649f99a2c59cc5ba7205d5e616180"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCircPerm2",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp t Default id Hnth HIn.",
                        "VernacExtend",
                        "02849ba9d0c578448bd872fb6acdbe0ce6cbbba8"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "induction id.",
                        "VernacExtend",
                        "d2ab20131c0b8a28447fc6bdd17133893aecd902"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in *.",
                        "VernacExtend",
                        "3ca34627b20e61ae6fdc6827f762133101a3cb54"
                    ]
                },
                {
                    "command": [
                        "simpl in Hnth.",
                        "VernacExtend",
                        "40a304d854b9d6857e36e0e042846658f7cdf4c1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hnth.",
                        "VernacExtend",
                        "5e70296f43972cce3cc8b24a7c950007ba4a7dc5"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "assert (H := Le.le_Sn_0 id); intuition.",
                        "VernacExtend",
                        "67b58666ee2cc8f84772950950a8fd4521b00ed7"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in *.",
                        "VernacExtend",
                        "3ca34627b20e61ae6fdc6827f762133101a3cb54"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailOK.",
                        "VernacExtend",
                        "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLHdTlOK in Hnth.",
                        "VernacExtend",
                        "0b57be17cdb31122d47a85a301fccf6398cc475a"
                    ]
                },
                {
                    "command": [
                        "rewrite app_nth2 in Hnth.",
                        "VernacExtend",
                        "9756e4ccb6fe29137dbdb81d2471836177efb80a"
                    ]
                },
                {
                    "command": [
                        "assert (H : S (S id) - 1 - length (headCP cp :: nil) = S id - 1) by (simpl; reflexivity); rewrite H in Hnth; clear H.",
                        "VernacExtend",
                        "a454324e93c9bd043f3c58f9484d8f7e55751eda"
                    ]
                },
                {
                    "command": [
                        "rewrite app_nth1; try assumption.",
                        "VernacExtend",
                        "6fcd8768490ee8c4370ecfbf78cfbb7cfd8ced1a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0.",
                        "VernacExtend",
                        "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
                    ]
                },
                {
                    "command": [
                        "apply Lt.le_lt_n_Sm; assumption.",
                        "VernacExtend",
                        "facd6acf2a05c01db8e69ecba8faff00eae484b5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCircPerm2Eq",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "intros cp Default id Hle.",
                        "VernacExtend",
                        "9c15ef866b1a7b17cab1ccebc20a98622b7ca238"
                    ]
                },
                {
                    "command": [
                        "apply nthCircPerm2.",
                        "VernacExtend",
                        "8934875c8fd875eaf0f029c5fee4bca333c43636"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCPTlOK",
            "line_nb": 356,
            "steps": [
                {
                    "command": [
                        "induction m; intros cp Default n.",
                        "VernacExtend",
                        "474fc3e2ac932c85d817f89abd8c9e05e6fbdfe6"
                    ]
                },
                {
                    "command": [
                        "induction n; unfold nthCP; simpl; reflexivity.",
                        "VernacExtend",
                        "25e56ec777a68fbf10de36eb00eca699a8c63033"
                    ]
                },
                {
                    "command": [
                        "assert (H := nthCircPerm2 cp (nthCP (S (S n)) cp Default) Default n).",
                        "VernacExtend",
                        "66d8b3569ad1205be6f0af0aab541207315c49df"
                    ]
                },
                {
                    "command": [
                        "assert (Hnm := le_lt_dec n (S m)).",
                        "VernacExtend",
                        "9ff2c85638edde6df1e6bd1c60c6a0893de70bf7"
                    ]
                },
                {
                    "command": [
                        "elim Hnm; clear Hnm; intro Hnm.",
                        "VernacExtend",
                        "4e402713f31556ce6cf0384ce76293fabe57348c"
                    ]
                },
                {
                    "command": [
                        "assert (H' : nthCP (S (S n)) cp Default = nthCP (S (S n)) cp Default) by reflexivity; apply H in H'; try assumption; clear H; rewrite H'; clear H'.",
                        "VernacExtend",
                        "804d09c0d19c2ae92f5705e3d4e79005b294ed68"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailOK.",
                        "VernacExtend",
                        "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
                    ]
                },
                {
                    "command": [
                        "rewrite app_nth1; try reflexivity.",
                        "VernacExtend",
                        "e6ae684cd55d48516a994e848693259a6ab61071"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0.",
                        "VernacExtend",
                        "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
                    ]
                },
                {
                    "command": [
                        "apply Lt.le_lt_n_Sm; assumption.",
                        "VernacExtend",
                        "facd6acf2a05c01db8e69ecba8faff00eae484b5"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_overflow.",
                        "VernacExtend",
                        "1dc95ea9f004c971a847e2487e936f95ce6a3b41"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_overflow; try reflexivity.",
                        "VernacExtend",
                        "ee1bb2d600db26e573f53a40d6a50c0c30a0c243"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList; simpl; intuition.",
                        "VernacExtend",
                        "3bf0d81d7be49a641ff7f8295f575bd05e709e22"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList; simpl; rewrite minus_n_0; intuition.",
                        "VernacExtend",
                        "e9afc42fe07e37d072cfc1a2cdd9e3867a5a1166"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthEqOK",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "induction m; intros cp1 cp2 Default Hnth.",
                        "VernacExtend",
                        "3c982f683bb42c95203432fef8bf089119cd8087"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hnth 1).",
                        "VernacExtend",
                        "241215e42814a2c29d9e411ef19d95a4e7905bf2"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in H.",
                        "VernacExtend",
                        "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hnth 1).",
                        "VernacExtend",
                        "241215e42814a2c29d9e411ef19d95a4e7905bf2"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in H.",
                        "VernacExtend",
                        "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply IHm with Default.",
                        "VernacExtend",
                        "5ecf35b89ae5181e0aeda19a1e9e4f6f08b2ffd1"
                    ]
                },
                {
                    "command": [
                        "intro n; induction n.",
                        "VernacExtend",
                        "d0fb4cd4fcd668e74be080a0a5c781ae93469446"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hnth 2).",
                        "VernacExtend",
                        "5b7161863fb8e31cbf6b9010a31c649e38005878"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP in H.",
                        "VernacExtend",
                        "d76ad7791cf88a6a8b9dfd1458828ff3e12bd1e0"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite CPLHdTlOK in H).",
                        "VernacExtend",
                        "6a6872a6441310ee737b79783f4edbf2ea77f526"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite nthCPTlOK).",
                        "VernacExtend",
                        "a54c6fe4702bc90d2c86fe5764101b7cfbd96740"
                    ]
                },
                {
                    "command": [
                        "apply Hnth.",
                        "VernacExtend",
                        "b7b7b282a408c11bd8248149959cfd21d26e6619"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "consTailPerm",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLHdTlOK.",
                        "VernacExtend",
                        "8e234962c35640d3983637598c71b19a66994de1"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailOK.",
                        "VernacExtend",
                        "e8790e7e34d96ab34a0087f15dada2768d0b6dd9"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_app_comm.",
                        "VernacExtend",
                        "a4aef3a57be388f4be4d499412ddffdcf926251d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ListToCP",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "exact Default.",
                        "VernacExtend",
                        "ac24d2bfc1bde36ccc33289bb14eae3223745f2e"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "exact a.",
                        "VernacExtend",
                        "22ff3beb9eb73525898c3fe8426139b9069c03e7"
                    ]
                },
                {
                    "command": [
                        "clear IHl0.",
                        "VernacExtend",
                        "2efc242e0d7de588a145abb02fdc1e129a19e1d6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact a.",
                        "VernacExtend",
                        "22ff3beb9eb73525898c3fe8426139b9069c03e7"
                    ]
                },
                {
                    "command": [
                        "unfold cartesianPower in IHl.",
                        "VernacExtend",
                        "94ac88ef2632d19f36ef74369f0a8864f842c860"
                    ]
                },
                {
                    "command": [
                        "simpl in IHl.",
                        "VernacExtend",
                        "4a0374ff7bc22639f0728e92291ab37fb877dedf"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0 in IHl.",
                        "VernacExtend",
                        "b42130b3db07a9f191f0c58e79debb4a60385c00"
                    ]
                },
                {
                    "command": [
                        "exact IHl.",
                        "VernacExtend",
                        "092ed5cd46596dc50420405f8143ea44eafb778d"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "circPermNCP0",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNCPOK",
            "line_nb": 420,
            "steps": [
                {
                    "command": [
                        "unfold circPermNCP; reflexivity.",
                        "VernacExtend",
                        "60a982d4f1723233e5ba9397ce62dfef2597e1ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCircPermNAny",
            "line_nb": 423,
            "steps": [
                {
                    "command": [
                        "intros cp Default id n Hle; revert cp; induction n; intro cp.",
                        "VernacExtend",
                        "1350e9e82042f7c29c045df5963bcff3a41f8762"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_n_0; simpl; reflexivity.",
                        "VernacExtend",
                        "0641b739752b11ae087c8052409538ff391e8a1d"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "assert (H : id + n <= S m) by (apply le_Sn_le; rewrite plus_n_Sm; assumption).",
                        "VernacExtend",
                        "ad57cc88493f2203d4dbaf669ae6241ef5d89f83"
                    ]
                },
                {
                    "command": [
                        "assert (H' : id + n <= m) by (apply le_S_n; transitivity (id + S n); intuition).",
                        "VernacExtend",
                        "01685ece00f0aa5163465133f2507f8706f21f3b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHn; try assumption.",
                        "VernacExtend",
                        "937e7eac4b20daac09d7288c801b5b21d3e71731"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_n_Sm.",
                        "VernacExtend",
                        "10308ef961b07f08e71cba91e06650cc774994fe"
                    ]
                },
                {
                    "command": [
                        "apply nthCircPerm2Eq; assumption.",
                        "VernacExtend",
                        "0c8737854458253d492fba4b216128f7c727c72c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNIdFirst",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "intros cp Default.",
                        "VernacExtend",
                        "ca4f1a728705fc842c814e5bf35452c42af1efcf"
                    ]
                },
                {
                    "command": [
                        "rewrite nthCircPerm1Eq.",
                        "VernacExtend",
                        "3395193bed7da3beb2e51a047cb5a7bf6418b319"
                    ]
                },
                {
                    "command": [
                        "assert (H : 0 + S n <= S n) by intuition.",
                        "VernacExtend",
                        "0da119e444359160fa2d872a81ef88c7db7c140b"
                    ]
                },
                {
                    "command": [
                        "assert (H' := nthCircPermNAny (consTailCP (tailCP cp) (headCP cp)) Default 0 (S n) H); clear H.",
                        "VernacExtend",
                        "a3a78a57cec23c0b57f6fdfec6e25683d690b60f"
                    ]
                },
                {
                    "command": [
                        "assert (H : 1 + S n = S (S n)) by intuition; rewrite H in H'; clear H; rewrite H'.",
                        "VernacExtend",
                        "955554d6f427f04f8f56a80e6f115005992bbd6d"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym.",
                        "VernacExtend",
                        "313410cb7bcb68dc243125f00e91764f51d94be6"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNConsTlOK",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "intros n; induction n; intro cp.",
                        "VernacExtend",
                        "b6489c9fa197dcae653ab3259575f5db6bd5bdd2"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym.",
                        "VernacExtend",
                        "313410cb7bcb68dc243125f00e91764f51d94be6"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHn.",
                        "VernacExtend",
                        "3c5a36386bd293ffdd7a599d133f731aebc8cfae"
                    ]
                },
                {
                    "command": [
                        "rewrite <- circPermNCPOK.",
                        "VernacExtend",
                        "1ac662cfaad2ccd2f5a76cb69c03059276f21311"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermPerm",
            "line_nb": 452,
            "steps": [
                {
                    "command": [
                        "intros n cp.",
                        "VernacExtend",
                        "5f8874c6c8473bb2ebc889c756e52655d6889053"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym.",
                        "VernacExtend",
                        "313410cb7bcb68dc243125f00e91764f51d94be6"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "rewrite <- circPermNCP0.",
                        "VernacExtend",
                        "ebafc504a252ffdca9fac01150a987902442f5ff"
                    ]
                },
                {
                    "command": [
                        "apply circPermNConsTlOK.",
                        "VernacExtend",
                        "a94d0d06188ea90bfafd4ee0aae963b9bffd06dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nthCP01",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "assert (H : 0 - 1 = 0) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "ddbe038d09f2f84aca6a33f957c58ee04be9ba5d"
                    ]
                },
                {
                    "command": [
                        "assert (H : 1 - 1 = 0) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "83dd4afdaf2aaf16baedb2ddc24097fce630d862"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNIdAux",
            "line_nb": 466,
            "steps": [
                {
                    "command": [
                        "intros cp Default.",
                        "VernacExtend",
                        "ca4f1a728705fc842c814e5bf35452c42af1efcf"
                    ]
                },
                {
                    "command": [
                        "apply nthEqOK with Default.",
                        "VernacExtend",
                        "f1caaf5ebaafff920d81d49cf4836856d610df7f"
                    ]
                },
                {
                    "command": [
                        "intro m.",
                        "VernacExtend",
                        "4b82221b29d931d49eaab61535235762be4a3968"
                    ]
                },
                {
                    "command": [
                        "assert (Hmn := le_lt_dec m (S (S n))).",
                        "VernacExtend",
                        "e5307f166bae2669929c7eed81d22df15166a5b3"
                    ]
                },
                {
                    "command": [
                        "elim Hmn; clear Hmn; intro Hmn.",
                        "VernacExtend",
                        "3c88de8cdac85de075a6417145b055f07e37ab02"
                    ]
                },
                {
                    "command": [
                        "revert cp; induction m; intro cp.",
                        "VernacExtend",
                        "51336b42eb948ae97e29ee0b12b27dd42c4112e2"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite nthCP01).",
                        "VernacExtend",
                        "e93f25112c6cb67824915207ea371f515cb2b8d3"
                    ]
                },
                {
                    "command": [
                        "apply circPermNIdFirst.",
                        "VernacExtend",
                        "8886e6bae5c2fe85528fc01ef5bffa966625f6db"
                    ]
                },
                {
                    "command": [
                        "clear IHm.",
                        "VernacExtend",
                        "f146c476dfe2496aa8dbd81475d23c7e79471842"
                    ]
                },
                {
                    "command": [
                        "revert cp; induction m; intro cp.",
                        "VernacExtend",
                        "51336b42eb948ae97e29ee0b12b27dd42c4112e2"
                    ]
                },
                {
                    "command": [
                        "apply circPermNIdFirst.",
                        "VernacExtend",
                        "8886e6bae5c2fe85528fc01ef5bffa966625f6db"
                    ]
                },
                {
                    "command": [
                        "assert (H : m <= n) by (do 2 (apply le_S_n); assumption).",
                        "VernacExtend",
                        "9a3741f80c2b20043442068f4d555b5b0f2eec2c"
                    ]
                },
                {
                    "command": [
                        "rewrite nthCircPerm2Eq; try assumption; clear H.",
                        "VernacExtend",
                        "81fbd69b3c3b27e85e0ece0533aac6c114f39ddd"
                    ]
                },
                {
                    "command": [
                        "assert (H : S m <= S (S n)) by intuition.",
                        "VernacExtend",
                        "ab611bd663b0f526c0b011b2a6d0b9e89232c3f9"
                    ]
                },
                {
                    "command": [
                        "rewrite IHm; try assumption; clear H; clear IHm.",
                        "VernacExtend",
                        "88f63cba5c1179ba0e45fa74f9348677b289f763"
                    ]
                },
                {
                    "command": [
                        "rewrite <- circPermNCPOK.",
                        "VernacExtend",
                        "1ac662cfaad2ccd2f5a76cb69c03059276f21311"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermPerm.",
                        "VernacExtend",
                        "fb03d2684cb3dda69e92bfb0f2cc2c5bd866e21c"
                    ]
                },
                {
                    "command": [
                        "assert (H : m + 1 <= S n) by (rewrite plus_n_1; intuition).",
                        "VernacExtend",
                        "5a43d77a2cb0d5ff60086520eb422af16880e937"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nthCircPermNAny; try assumption; clear H.",
                        "VernacExtend",
                        "3e6fb7c25254abe6865d70111b248632af60f851"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_n_1; reflexivity.",
                        "VernacExtend",
                        "9eadad73819168dfa96dd45c0735758d856f7014"
                    ]
                },
                {
                    "command": [
                        "induction m.",
                        "VernacExtend",
                        "6f6279e892ad221278939a9b429a59edaeeb1676"
                    ]
                },
                {
                    "command": [
                        "assert (H := lt_n_0 (S (S n))); intuition.",
                        "VernacExtend",
                        "0966cb6ddc862158b5990fc964d93e8361a284f5"
                    ]
                },
                {
                    "command": [
                        "clear IHm.",
                        "VernacExtend",
                        "f146c476dfe2496aa8dbd81475d23c7e79471842"
                    ]
                },
                {
                    "command": [
                        "unfold nthCP.",
                        "VernacExtend",
                        "126097c5c0bed5285d1e5e484777b30ea55bff3b"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_overflow.",
                        "VernacExtend",
                        "1dc95ea9f004c971a847e2487e936f95ce6a3b41"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_overflow; try reflexivity.",
                        "VernacExtend",
                        "ee1bb2d600db26e573f53a40d6a50c0c30a0c243"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0.",
                        "VernacExtend",
                        "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
                    ]
                },
                {
                    "command": [
                        "apply gt_S_le.",
                        "VernacExtend",
                        "1b667f6cc0411fe101f7b1adf86fb1335c2a0d80"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- lengthOfCPToList.",
                        "VernacExtend",
                        "8bc18357e05be9402e542b559cf2833f7688df42"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_n_0.",
                        "VernacExtend",
                        "c3dd2f2ffa58f6a2e845f6d2963e6cfd1824fff8"
                    ]
                },
                {
                    "command": [
                        "apply gt_S_le.",
                        "VernacExtend",
                        "1b667f6cc0411fe101f7b1adf86fb1335c2a0d80"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNId",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "apply circPermNIdAux.",
                        "VernacExtend",
                        "af257e85d48acdd00963d298a05c27329ac43935"
                    ]
                },
                {
                    "command": [
                        "exact (headCP cp).",
                        "VernacExtend",
                        "3f67cb569526207a09f6757d05cf515c951e1be4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "circPermNConsOK",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp t1 t2.",
                        "VernacExtend",
                        "ac2b52bb17d3201f33832bfd9e4c2ca63cdd3fd0"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "assert (H := circPermNId (consHeadCP t1 (consHeadCP t2 cp))); rewrite H; clear H.",
                        "VernacExtend",
                        "e83af2292d2cc8d9901b53cefc3a7f19a0f4e788"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym.",
                        "VernacExtend",
                        "313410cb7bcb68dc243125f00e91764f51d94be6"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "assert (H : headCP (consHeadCP t1 (consHeadCP t2 cp)) = t1) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "ff123260848cdb02a74b09df3c0ef938d26c1449"
                    ]
                },
                {
                    "command": [
                        "assert (H : tailCP (consHeadCP t1 (consHeadCP t2 cp)) = consHeadCP t2 cp) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "5183fa0ad786d19d08301ab0132d503c822bbf3c"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "assert (H : headCP (consTailCP (consHeadCP t2 cp) t1) = t2) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "59868e9a9be7a1b06debbad6ed2b044cca2ac7cb"
                    ]
                },
                {
                    "command": [
                        "assert (H : tailCP (consTailCP (consHeadCP t2 cp) t1) = consTailCP cp t1) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "236429398fcfe22506269fa48ed8ebb8bb1445ea"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "listInd",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "intros n l.",
                        "VernacExtend",
                        "d15a0b6304d5de3931ed94d7fd1378867aca9f17"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "intros l' Default Hl.",
                        "VernacExtend",
                        "a2297a567d212eb1531cbfb7d3cce2974abb3d9b"
                    ]
                },
                {
                    "command": [
                        "simpl in Hl; discriminate.",
                        "VernacExtend",
                        "8e379a5596c17bb65fc17ccb63af04e959b2fe41"
                    ]
                },
                {
                    "command": [
                        "intros l' Default Hl Hl' Hhd Htl.",
                        "VernacExtend",
                        "eb4c8a3fea3811fa55c049242387b2d2fb90c5fb"
                    ]
                },
                {
                    "command": [
                        "induction l'.",
                        "VernacExtend",
                        "773e04ff833259851fb65b4bcd371f3996d47e26"
                    ]
                },
                {
                    "command": [
                        "simpl in Hl'; discriminate.",
                        "VernacExtend",
                        "d095f2c89f9e97ac3865760e021e44b3e7e653f2"
                    ]
                },
                {
                    "command": [
                        "simpl in Hhd.",
                        "VernacExtend",
                        "75719e550ca2b7c8882e386d13adfe3c257fb4ea"
                    ]
                },
                {
                    "command": [
                        "simpl in Htl.",
                        "VernacExtend",
                        "3fc6c8cc726d1ff1778a4da40819e236ce56486e"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLHd",
            "line_nb": 536,
            "steps": [
                {
                    "command": [
                        "intros a l Default.",
                        "VernacExtend",
                        "c36dbc044317b57eebb776ef3222d827c169e46e"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ListToCPTl",
            "line_nb": 542,
            "steps": [
                {
                    "command": [
                        "intros a a0 l Ha0l Haa0l Default.",
                        "VernacExtend",
                        "3f562b1f2f5e744cd558b6b8adb3a3b8faffc294"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "unfold tailCPbis.",
                        "VernacExtend",
                        "0899dca65ebc93cb7f3a00ded05c289d75bd0801"
                    ]
                },
                {
                    "command": [
                        "unfold tailCP.",
                        "VernacExtend",
                        "bada5e101e667173f4757dbf5195b0f8782f85f0"
                    ]
                },
                {
                    "command": [
                        "repeat (elim_eq_rect; simpl).",
                        "VernacExtend",
                        "1b001f43744ca438a513b395a1a1493a1004b8f3"
                    ]
                },
                {
                    "command": [
                        "induction l; simpl; reflexivity.",
                        "VernacExtend",
                        "0cc1dedcb843499102e89205159d3cd87dc26321"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPToListTl1",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPToListTl2",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "apply listInd with (S n) (fst cp).",
                        "VernacExtend",
                        "1d43cccba52b944f1ae04d68157eec65f306b741"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S.",
                        "VernacExtend",
                        "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
                    ]
                },
                {
                    "command": [
                        "assert (H := lengthOfCPToList cp); rewrite H.",
                        "VernacExtend",
                        "df07fb0fef1a9cd7db1c7461f34539b37b237082"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "assert (H := lengthOfCPToList (tailCP cp)); rewrite H.",
                        "VernacExtend",
                        "552b0874ac28c65957a8cb21fc1560cbacb6089d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPCPL",
            "line_nb": 566,
            "steps": [
                {
                    "command": [
                        "intros; subst; reflexivity.",
                        "VernacExtend",
                        "9a97a00b0aa2a8284651f9454c8eaa359460e3a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLCP",
            "line_nb": 569,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp1 cp2 HCPL.",
                        "VernacExtend",
                        "31731eb4f2cf9f22e89d95d8628a1587d7db22e7"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "injection HCPL.",
                        "VernacExtend",
                        "d5578f2bef7c2ff77b0c4e06eea872d4196d9048"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite CPToListOK in HCPL).",
                        "VernacExtend",
                        "77af0ff14a5b18535fcd79d042503581670652d9"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "injection HCPL; auto.",
                        "VernacExtend",
                        "956fafdeb43b82cf651f7a2c8778dab03034be89"
                    ]
                },
                {
                    "command": [
                        "apply IHn.",
                        "VernacExtend",
                        "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
                    ]
                },
                {
                    "command": [
                        "injection HCPL; auto.",
                        "VernacExtend",
                        "956fafdeb43b82cf651f7a2c8778dab03034be89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLRec",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "intros a l Default.",
                        "VernacExtend",
                        "c36dbc044317b57eebb776ef3222d827c169e46e"
                    ]
                },
                {
                    "command": [
                        "assert (HlAux := lengthOfCPToList (ListToCP l Default)).",
                        "VernacExtend",
                        "dff22c3be830b39f9d64491ea201d8b51491c4a3"
                    ]
                },
                {
                    "command": [
                        "assert (Hl : S (length l) = length (a :: CPToList (ListToCP l Default))) by (simpl; apply eq_S; assumption); clear HlAux; apply eq_sym in Hl.",
                        "VernacExtend",
                        "076091ac4f0d4fc1313cdf67d696a996be6bfd4f"
                    ]
                },
                {
                    "command": [
                        "assert (Hal := lengthOfCPToList (ListToCP (a :: l) Default)); apply eq_sym in Hal.",
                        "VernacExtend",
                        "f392e963d1a83e33014e2cc13b910022e8c6121c"
                    ]
                },
                {
                    "command": [
                        "apply listInd with (length l) Default; try assumption.",
                        "VernacExtend",
                        "a86ab6b35821744f4b3effa208fb79a1a35ab533"
                    ]
                },
                {
                    "command": [
                        "rewrite CPLHd; simpl; reflexivity.",
                        "VernacExtend",
                        "53a85d084d0c1a5812516185a39cc8d2d695dedd"
                    ]
                },
                {
                    "command": [
                        "assert (H : tl (a :: CPToList (ListToCP l Default)) = CPToList (ListToCP l Default)) by (simpl; reflexivity); rewrite H; clear H.",
                        "VernacExtend",
                        "b806848d5d22451e58e4d4dbffb7a1a509f7e7ed"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "clear IHl.",
                        "VernacExtend",
                        "8bbd9602dc9b79bb59ead5a20fa2e5495ddfe01a"
                    ]
                },
                {
                    "command": [
                        "assert (H := CPToListTl1 a a0 l (ListToCP (a :: a0 :: l) Default)); rewrite H; clear H.",
                        "VernacExtend",
                        "f218f9b04766bcf964eb1d6249db2ef0fec722ab"
                    ]
                },
                {
                    "command": [
                        "assert (H := CPCPL a0 l (ListToCP (a0 :: l) Default) (tailCP (ListToCP (a :: a0 :: l) Default))); apply H; clear H.",
                        "VernacExtend",
                        "afaba0e90b668fed83bbd518aec617a1a2258b9e"
                    ]
                },
                {
                    "command": [
                        "assert (Ha0l : (S (length l)) = length (a0 :: l)) by (simpl; reflexivity).",
                        "VernacExtend",
                        "483bad1c9a3814c407123515dd845e7a74875260"
                    ]
                },
                {
                    "command": [
                        "assert (Haa0l : (S (S (length l))) = length (a :: a0 :: l)) by (simpl; reflexivity).",
                        "VernacExtend",
                        "913f6a5d92d7bd7e0993c76c03d136054b5d33d2"
                    ]
                },
                {
                    "command": [
                        "assert (H := ListToCPTl a a0 l Ha0l Haa0l Default); rewrite <- H; clear H.",
                        "VernacExtend",
                        "516dab149f19538c173e3d67f0617413b9b4550f"
                    ]
                },
                {
                    "command": [
                        "unfold tailCPbis.",
                        "VernacExtend",
                        "0899dca65ebc93cb7f3a00ded05c289d75bd0801"
                    ]
                },
                {
                    "command": [
                        "repeat (elim_eq_rect; simpl); reflexivity.",
                        "VernacExtend",
                        "ab32776576d46f87a22d7a8d4eba252d87712a49"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CPLOK",
            "line_nb": 599,
            "steps": [
                {
                    "command": [
                        "intros l Default.",
                        "VernacExtend",
                        "ef94ad8b439672a7ad39e65de2741aa0c0494edc"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- CPLRec.",
                        "VernacExtend",
                        "37da0f46d7923818c29d99d41ebc2d5fe773599a"
                    ]
                },
                {
                    "command": [
                        "rewrite IHl.",
                        "VernacExtend",
                        "d4d0cebbb161cf1462b69fd1ed2d76db253a98c6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fixLastCP",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "intro cp.",
                        "VernacExtend",
                        "c721a8b7f258f026a193ecfb4ef60d02719b5bb3"
                    ]
                },
                {
                    "command": [
                        "apply appPred.",
                        "VernacExtend",
                        "65b43bfa97df98594c9be5d6fd986c066663b769"
                    ]
                },
                {
                    "command": [
                        "exact (consTailCP cp t).",
                        "VernacExtend",
                        "c49a99ea21660f0580f55772065dd6df243e4bc7"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "fixLastCPOK",
            "line_nb": 612,
            "steps": [
                {
                    "command": [
                        "intros appPred cp; unfold fixLastCP; reflexivity.",
                        "VernacExtend",
                        "23ca924c732c0223933ffbd4d05e43c2139904c3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app",
            "line_nb": 615,
            "steps": [
                {
                    "command": [
                        "induction n; [apply pred|clear IHn].",
                        "VernacExtend",
                        "290d185b5d8e5c652fb2e9595fec78e85b5e0ed2"
                    ]
                },
                {
                    "command": [
                        "induction n; [exact (pred cp)|exact (IHn (pred (headCP cp)) (tailCP cp))].",
                        "VernacExtend",
                        "1cd90dfa8c6d33c357325bb739ca63f9fad4f5a2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "app_n_1",
            "line_nb": 619,
            "steps": [
                {
                    "command": [
                        "induction n; [exact (pred x)|clear IHn].",
                        "VernacExtend",
                        "503d471f153a1573ce9da862f2e3b079833230f1"
                    ]
                },
                {
                    "command": [
                        "induction n; [exact (pred cp x)|exact (IHn (pred (headCP cp)) (tailCP cp))].",
                        "VernacExtend",
                        "e012fdabe5f7075348b191fbadb4e06ef73b2eec"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "app_n_1_app",
            "line_nb": 623,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1.",
                        "VernacExtend",
                        "85e84d2667b53456606ab747d4b84d4de959182c"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply IHn with (tailCP cpp); clear IHn.",
                        "VernacExtend",
                        "475e79d5dafdcfd61df9c35a9a85ea94b7220536"
                    ]
                },
                {
                    "command": [
                        "unfold app_n_1 in *.",
                        "VernacExtend",
                        "a8afb3ef69bcaf32ac39e72ced322501f14503bc"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : (fst cpt) = fst (cpp)) by (rewrite <- H0; simpl; reflexivity).",
                        "VernacExtend",
                        "70b56fe3a8b8197fa33f663e113e89a89d02581e"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H3.",
                        "VernacExtend",
                        "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl in *; reflexivity.",
                        "VernacExtend",
                        "a7b5aac0483332f54e6f4f8f70b1fd5f21aa63f7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_app_n_1",
            "line_nb": 646,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1.",
                        "VernacExtend",
                        "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply IHn with (tailCP cpt); clear IHn.",
                        "VernacExtend",
                        "665b5d71ed180c46163f9d474805146275c8d27b"
                    ]
                },
                {
                    "command": [
                        "unfold app in *.",
                        "VernacExtend",
                        "87a97395eae4034dd063befde6a1a56638dad85f"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : (fst cpt) = fst (cpp)) by (rewrite <- H0; simpl; reflexivity).",
                        "VernacExtend",
                        "70b56fe3a8b8197fa33f663e113e89a89d02581e"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "apply CP_ind.",
                        "VernacExtend",
                        "b9dd30620071e95bf47a515623b3ac7813379c9a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl in *; reflexivity.",
                        "VernacExtend",
                        "a7b5aac0483332f54e6f4f8f70b1fd5f21aa63f7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_n_1_app_eq",
            "line_nb": 669,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro H1.",
                        "VernacExtend",
                        "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
                    ]
                },
                {
                    "command": [
                        "apply (app_app_n_1 pred x cpp cpt H1 H H0).",
                        "VernacExtend",
                        "53638d7941d09d67ddb4e23452f92d1137e28a09"
                    ]
                },
                {
                    "command": [
                        "intro H1.",
                        "VernacExtend",
                        "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
                    ]
                },
                {
                    "command": [
                        "apply (app_n_1_app pred x cpp cpt H1 H H0).",
                        "VernacExtend",
                        "d57fea262f5c5b4d0c7d4ff942e50dc8f457eefc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_1_n",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "induction n; [exact (pred x)|clear IHn].",
                        "VernacExtend",
                        "503d471f153a1573ce9da862f2e3b079833230f1"
                    ]
                },
                {
                    "command": [
                        "induction n; [exact (pred x cp)|clear IHn].",
                        "VernacExtend",
                        "9a66d8f12b886ff9d1e7c6a77724f9557bcf57c5"
                    ]
                },
                {
                    "command": [
                        "assert (newPred : arity T (S n)) by (exact (pred x (headCP cp))).",
                        "VernacExtend",
                        "be2aa0706a7ea7963610bf200a859629d570d0a9"
                    ]
                },
                {
                    "command": [
                        "exact (app newPred (tailCP cp)).",
                        "VernacExtend",
                        "108e38fefe6500ea20608da614f420e5bd63166f"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "app_1_n_app",
            "line_nb": 683,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1.",
                        "VernacExtend",
                        "85e84d2667b53456606ab747d4b84d4de959182c"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1.",
                        "VernacExtend",
                        "85e84d2667b53456606ab747d4b84d4de959182c"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_app_1_n",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1.",
                        "VernacExtend",
                        "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1.",
                        "VernacExtend",
                        "66c701ca9f1cc54dbb13bfe476979dd3c5945511"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_1_n_app_eq",
            "line_nb": 705,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro H1.",
                        "VernacExtend",
                        "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
                    ]
                },
                {
                    "command": [
                        "apply (app_app_1_n pred x cpp cpt H1 H H0).",
                        "VernacExtend",
                        "2f4f2eac3c05d3e1b22943919b5413bd4fc05547"
                    ]
                },
                {
                    "command": [
                        "intro H1.",
                        "VernacExtend",
                        "d2fcc9516b33dbca4f189b9ddbee105efc1235d1"
                    ]
                },
                {
                    "command": [
                        "apply (app_1_n_app pred x cpp cpt H1 H H0).",
                        "VernacExtend",
                        "5c5294359358a45f3d023c930003bed98b33d8a1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_2_n",
            "line_nb": 713,
            "steps": [
                {
                    "command": [
                        "exact (app (pred x1 x2) cp).",
                        "VernacExtend",
                        "03017c1d1d85995a80a5826f0e79258ef96155e4"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "app_2_n_app",
            "line_nb": 716,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1; rewrite H2.",
                        "VernacExtend",
                        "1c38e61caad39b10670c6bf6c9b067b299c60806"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1; rewrite H2.",
                        "VernacExtend",
                        "1c38e61caad39b10670c6bf6c9b067b299c60806"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_2_n_app_default",
            "line_nb": 727,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1.",
                        "VernacExtend",
                        "85e84d2667b53456606ab747d4b84d4de959182c"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H1; rewrite H2.",
                        "VernacExtend",
                        "1c38e61caad39b10670c6bf6c9b067b299c60806"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_app_2_n",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
                        "VernacExtend",
                        "9aacaba5655cea38883202a3e5385d200e20f2ac"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
                        "VernacExtend",
                        "9aacaba5655cea38883202a3e5385d200e20f2ac"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_app_2_n_default",
            "line_nb": 748,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
                        "VernacExtend",
                        "9aacaba5655cea38883202a3e5385d200e20f2ac"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear IHn.",
                        "VernacExtend",
                        "cae601efe03260c52301ec9ec0a1f190fd54fb3c"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H1; rewrite <- H2.",
                        "VernacExtend",
                        "9aacaba5655cea38883202a3e5385d200e20f2ac"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_2_n_app_eq",
            "line_nb": 759,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro H2.",
                        "VernacExtend",
                        "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
                    ]
                },
                {
                    "command": [
                        "apply (app_app_2_n pred x1 x2 cpp cpt H2 H H0 H1).",
                        "VernacExtend",
                        "fbc39a9623fceda5a451017f18da0140beb5617f"
                    ]
                },
                {
                    "command": [
                        "intro H2.",
                        "VernacExtend",
                        "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
                    ]
                },
                {
                    "command": [
                        "apply (app_2_n_app pred x1 x2 cpp cpt H2 H H0 H1).",
                        "VernacExtend",
                        "926cee1e3e5b92635830e909cebd76be2559625b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PermOKAux",
            "line_nb": 767,
            "steps": [
                {
                    "command": [
                        "intros appPred n HPerm.",
                        "VernacExtend",
                        "03c8ca39f353f7db6ad4b3b1261f84f528cc52b2"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros X HappPred.",
                        "VernacExtend",
                        "efca1b18585e9360176b78d101da6a8f83d7b6bb"
                    ]
                },
                {
                    "command": [
                        "assert (H : appPred (circPermNCP n X)) by (apply IHn; assumption); clear IHn; clear HappPred.",
                        "VernacExtend",
                        "e6cd244ae7abd82c2f677809b65df944bfd31a49"
                    ]
                },
                {
                    "command": [
                        "rewrite consHeadCPOK in H.",
                        "VernacExtend",
                        "1455c05743f726bb849369bd6dcfc11c90af4066"
                    ]
                },
                {
                    "command": [
                        "apply HPerm in H.",
                        "VernacExtend",
                        "bb8b165c043f45db97a87703819d1ef9d466aba6"
                    ]
                },
                {
                    "command": [
                        "rewrite circPermNCPOK.",
                        "VernacExtend",
                        "bdc2c7710bd4d84e270423f5c6c5a7630df48a28"
                    ]
                },
                {
                    "command": [
                        "rewrite <- circPermNConsTlOK.",
                        "VernacExtend",
                        "b3c1a386c5f634c713da8e58aef35cc4b285311d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PermOK",
            "line_nb": 779,
            "steps": [
                {
                    "command": [
                        "induction n; intros cp1 cp2 appPred pred_perm_1 pred_perm_2 Hpred HPerm.",
                        "VernacExtend",
                        "edcd96bf6bc88577e2b7a4464fe650aba594bbad"
                    ]
                },
                {
                    "command": [
                        "assert (Hcp1 := CPPair cp1); rewrite Hcp1 in *; clear Hcp1.",
                        "VernacExtend",
                        "c997ccbfe4cce66913714f50eb6a17c30778727e"
                    ]
                },
                {
                    "command": [
                        "assert (Hcp2 := CPPair cp2); rewrite Hcp2 in *; clear Hcp2.",
                        "VernacExtend",
                        "5b7304f5cd8335426b8c784d40f129858e6c9dd6"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_length_2 in HPerm.",
                        "VernacExtend",
                        "7169b43c6e9eab0a89954886cb4fff345bf24244"
                    ]
                },
                {
                    "command": [
                        "elim HPerm; clear HPerm; intro HPerm; destruct HPerm as [HEq1 HEq2]; rewrite <- HEq1; rewrite <- HEq2.",
                        "VernacExtend",
                        "31d8665822fb0603fdda572e60773ec711778c61"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1; assumption.",
                        "VernacExtend",
                        "f69d8a44dd92f01d2dced7d2f51ff1a52202f46b"
                    ]
                },
                {
                    "command": [
                        "rewrite consTailCPOK.",
                        "VernacExtend",
                        "e7601107f0d52d5774bafb0dd2d12f1440c2929d"
                    ]
                },
                {
                    "command": [
                        "assert (H' := lastCPIn cp2).",
                        "VernacExtend",
                        "60a87d54a7738f7497ebfdd2e9058c41b3d43adb"
                    ]
                },
                {
                    "command": [
                        "assert (H : InCP (lastCP cp2) cp1) by (unfold InCP;apply Permutation.Permutation_in with (CPToList cp2); try apply Permutation.Permutation_sym; assumption); clear H'.",
                        "VernacExtend",
                        "d203a7339f5661ff5bd52ff0473a8cd47e81c71b"
                    ]
                },
                {
                    "command": [
                        "assert (H' := InNth cp1 (lastCP cp2) (headCP cp2) H); clear H.",
                        "VernacExtend",
                        "aee01f8813facb4d2f9b16f4e96ee639a67be0b0"
                    ]
                },
                {
                    "command": [
                        "destruct H' as [id [Hge [Hle Hnth]]].",
                        "VernacExtend",
                        "6af6826779699ad3b180c26e305d0542b86e0bfc"
                    ]
                },
                {
                    "command": [
                        "assert (H : exists cp, appPred cp /\\ Permutation.Permutation (CPToList cp2) (CPToList cp) /\\ lastCP cp = lastCP cp2).",
                        "VernacExtend",
                        "784e942201927051ca289f1305df7c475c5d14dc"
                    ]
                },
                {
                    "command": [
                        "induction id; try (unfold ge in Hge; assert (H := Le.le_Sn_0 0); contradiction); clear IHid.",
                        "VernacExtend",
                        "a8b52ee18d1f17d7108e82caa0ca77767f6f25e5"
                    ]
                },
                {
                    "command": [
                        "revert Hnth; revert HPerm; revert Hpred; revert cp1; induction id; intros.",
                        "VernacExtend",
                        "fc118ed85a16067ff39623caa39957286ca20391"
                    ]
                },
                {
                    "command": [
                        "exists (consTailCP (tailCP cp1) (headCP cp1)).",
                        "VernacExtend",
                        "add67156887bc03fb5be1a07c845cb29d4fb0ae5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1.",
                        "VernacExtend",
                        "d2236473ca9604fd8cabcd8f3109a27b1a1adc05"
                    ]
                },
                {
                    "command": [
                        "rewrite <- consHeadCPOK.",
                        "VernacExtend",
                        "65fbadf6c2725a202db29f618fc7dabea16e0013"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.perm_trans with (CPToList cp1); try (apply consTailPerm).",
                        "VernacExtend",
                        "c2d3d77d51bcfc011df25df6bb29e41812fc1404"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym; assumption.",
                        "VernacExtend",
                        "4c6ad6dd07e554db59c4525749d61f7fbf5ef739"
                    ]
                },
                {
                    "command": [
                        "apply nthCircPerm1 in Hnth.",
                        "VernacExtend",
                        "d832f2c6e75641e686da42f8aad390594f2362e1"
                    ]
                },
                {
                    "command": [
                        "rewrite Hnth.",
                        "VernacExtend",
                        "893d3037321022e89ec48f27d3c1447b45504829"
                    ]
                },
                {
                    "command": [
                        "assert (H := nthLast (consTailCP (tailCP cp1) (headCP cp1)) (headCP cp2)); rewrite H; reflexivity.",
                        "VernacExtend",
                        "fd02b8b3a5804ad66179a5b529ec7939fabc38df"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hle).",
                        "VernacExtend",
                        "1393ede51fd07c2d3de495fdffef324a4d3901a1"
                    ]
                },
                {
                    "command": [
                        "do 2 (apply Le.le_S_n in H).",
                        "VernacExtend",
                        "858a1f4078d29ae5017ba2b226fbe77a955c4021"
                    ]
                },
                {
                    "command": [
                        "apply nthCircPerm2 in Hnth; try assumption; clear H.",
                        "VernacExtend",
                        "268333a8a8eeadb7b9dbbd37bb167e451fbf720b"
                    ]
                },
                {
                    "command": [
                        "apply Le.le_Sn_le in Hle.",
                        "VernacExtend",
                        "eb17f7abd6eabf4e844e9082fe73d0563d66c293"
                    ]
                },
                {
                    "command": [
                        "assert (H : S id >= 1) by intuition; clear Hge; rename H into Hge.",
                        "VernacExtend",
                        "e6432f386645686a3705920d58265534337f112f"
                    ]
                },
                {
                    "command": [
                        "assert (H : appPred (consTailCP (tailCP cp1) (headCP cp1))) by (apply pred_perm_1; rewrite <- consHeadCPOK; assumption) ; clear Hpred; rename H into Hpred.",
                        "VernacExtend",
                        "4e11be2d6395dfae7cd0eeadd3fff9ee8849002a"
                    ]
                },
                {
                    "command": [
                        "assert (H := consTailPerm cp1); apply Permutation.Permutation_sym in H.",
                        "VernacExtend",
                        "bb823c565b57cd781cbb2f18d19148c7d77b237b"
                    ]
                },
                {
                    "command": [
                        "assert (H' : Permutation.Permutation (CPToList (consTailCP (tailCP cp1) (headCP cp1))) (CPToList cp2)) by (apply Permutation.perm_trans with (CPToList cp1); assumption); clear HPerm; rename H' into HPerm.",
                        "VernacExtend",
                        "1a97311598719eef4611d534c6f1a3aa65504fd3"
                    ]
                },
                {
                    "command": [
                        "assert (H' := IHid Hge Hle (consTailCP (tailCP cp1) (headCP cp1)) Hpred HPerm Hnth).",
                        "VernacExtend",
                        "48891ae3c31d01a899f5e50ce8e7c591719df11d"
                    ]
                },
                {
                    "command": [
                        "destruct H' as [cp [Hpredcp [HPermcp Hlastcp]]]; exists cp.",
                        "VernacExtend",
                        "c844fed09b16b33891738166b3e2d28aac625f1a"
                    ]
                },
                {
                    "command": [
                        "do 2 (split; try assumption).",
                        "VernacExtend",
                        "0314a10677b01b703501076cff849cabccdbdd8b"
                    ]
                },
                {
                    "command": [
                        "clear Hnth; clear Hle; clear Hge; clear id; clear HPerm; clear Hpred; clear cp1.",
                        "VernacExtend",
                        "3c29c0260d30aaeb94d52d3e8441a4da51638a19"
                    ]
                },
                {
                    "command": [
                        "destruct H as [cp [Hpred [HPerm Hlast]]]; rewrite <- Hlast.",
                        "VernacExtend",
                        "2ab899f2fc04339b4901b35ee8013b22512a7ca7"
                    ]
                },
                {
                    "command": [
                        "assert (H := consTailCPOK cp); rewrite H in HPerm; clear H.",
                        "VernacExtend",
                        "1e165132c63bd6530f2232fdac2969d664e6d996"
                    ]
                },
                {
                    "command": [
                        "assert (H := consTailCPOK cp2); rewrite H in HPerm; clear H.",
                        "VernacExtend",
                        "7e70c1482d1e1a0d730965c33845f78d1f46d924"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite consTailOK in HPerm).",
                        "VernacExtend",
                        "914f7eddecd1cddfe41cf2dfb1102ca825a7a0a0"
                    ]
                },
                {
                    "command": [
                        "rewrite Hlast in HPerm.",
                        "VernacExtend",
                        "28abd930252ccfdaf52aaa51f9ac6b9f3a711e15"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_app_inv_r in HPerm.",
                        "VernacExtend",
                        "2aa74b9a70fce5f5a7b98c4e61ee556e001cf5d0"
                    ]
                },
                {
                    "command": [
                        "assert (ablcp := allButLastCP cp).",
                        "VernacExtend",
                        "2b132798a5efe493f85ccf122af23ff49f009577"
                    ]
                },
                {
                    "command": [
                        "assert (ablcp2 := allButLastCP cp2).",
                        "VernacExtend",
                        "cca7775262468f6ad84721c70aba67fc75d12282"
                    ]
                },
                {
                    "command": [
                        "assert (pred_perm_3 := PermOKAux appPred (S n) pred_perm_1).",
                        "VernacExtend",
                        "c1bdb65d92c336ec400942cfaaa6f88137fe01f9"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm1 : (forall (A : T) (X : cartesianPower T (S n)), (fixLastCP appPred (lastCP cp)) (consHeadCP A X) -> (fixLastCP appPred (lastCP cp)) (consTailCP X A))).",
                        "VernacExtend",
                        "3c08388ab7002b38c843e9447255804d62ab301a"
                    ]
                },
                {
                    "command": [
                        "unfold fixLastCP; intros A X HappPred.",
                        "VernacExtend",
                        "78996872395dc4bf04556fa6e5f9e360b6d34800"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl in HappPred.",
                        "VernacExtend",
                        "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2.",
                        "VernacExtend",
                        "0bdb08ca0764d61038fda5e2ed96b8c49b10ed5d"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "clear IHn0.",
                        "VernacExtend",
                        "8baf6e7884357a18bf8e61c467f230bd9a632255"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in HappPred.",
                        "VernacExtend",
                        "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
                    ]
                },
                {
                    "command": [
                        "simpl in pred_perm_1.",
                        "VernacExtend",
                        "7bbdcbe45fc84af621e9c2a7eccad56304af088f"
                    ]
                },
                {
                    "command": [
                        "simpl in pred_perm_2.",
                        "VernacExtend",
                        "a80d844500edd5c816e5020b50a9783d0641cada"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_3 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "e196567fe653cd1a7b12411dea03f06c778a3804"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "clear IHn0.",
                        "VernacExtend",
                        "8baf6e7884357a18bf8e61c467f230bd9a632255"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in HappPred.",
                        "VernacExtend",
                        "bdc4c3bc140c73c629c54f11383cba90cf9ab794"
                    ]
                },
                {
                    "command": [
                        "simpl in pred_perm_1.",
                        "VernacExtend",
                        "7bbdcbe45fc84af621e9c2a7eccad56304af088f"
                    ]
                },
                {
                    "command": [
                        "simpl in pred_perm_2.",
                        "VernacExtend",
                        "a80d844500edd5c816e5020b50a9783d0641cada"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; simpl in HappPred.",
                        "VernacExtend",
                        "769c26913793029bcef0bbb296efab4250e48e5b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "clear IHn0.",
                        "VernacExtend",
                        "8baf6e7884357a18bf8e61c467f230bd9a632255"
                    ]
                },
                {
                    "command": [
                        "assert (H := consHeadCPOK X); rewrite H in *; clear H.",
                        "VernacExtend",
                        "7f6f149a0ce36645e04585f6334b35f81bf3df82"
                    ]
                },
                {
                    "command": [
                        "assert (H := consTailCPOK (tailCP X)); rewrite H in *; clear H.",
                        "VernacExtend",
                        "6038985b00077ba64efc06490820c61852ad8c7c"
                    ]
                },
                {
                    "command": [
                        "set (B := headCP X) in *.",
                        "VernacExtend",
                        "3165305e66bcee60fc04cb2a027985ae6620d5cc"
                    ]
                },
                {
                    "command": [
                        "set (CP := allButLastCP (allButLastCP (tailCP X))) in *.",
                        "VernacExtend",
                        "adfaef4fa4281d6b6abf1e8a9a319c676bdd9590"
                    ]
                },
                {
                    "command": [
                        "set (C := tailCP (allButLastCP (tailCP X))) in *.",
                        "VernacExtend",
                        "ae5f5c32c6e2af1ceeeefa870138049eda86e390"
                    ]
                },
                {
                    "command": [
                        "set (D := lastCP (tailCP X)) in *.",
                        "VernacExtend",
                        "81940bc91bfccc9a6fe2f48b50adc0bff4ba6d7d"
                    ]
                },
                {
                    "command": [
                        "set (E := lastCP cp) in *.",
                        "VernacExtend",
                        "3d79cf306cfe33993e1b2fa5f807232c24c18271"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_3 in HappPred; rewrite consTlHdHdTl in HappPred; rewrite circPermNConsOK in HappPred.",
                        "VernacExtend",
                        "268f19ef85b06970f3793d9f855543ca7a458044"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1 in HappPred; do 2 (rewrite <- consHdTlTlHd in HappPred).",
                        "VernacExtend",
                        "7eadebbb6014c265cfe25d43fda3b213a394a8c5"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_2 in HappPred.",
                        "VernacExtend",
                        "699d53d43c23bc4a7fcaa70cac65aa7d25d9b490"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1; rewrite <- consHdTlTlHd; rewrite <- circPermNConsOK.",
                        "VernacExtend",
                        "d83979dba9d2211d434bb8bdf5be613f64863659"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_3.",
                        "VernacExtend",
                        "3a883e61b1cb143d66deb3b4b8d13cdb9aa6d7b6"
                    ]
                },
                {
                    "command": [
                        "do 2 (apply pred_perm_1; rewrite consHdTlTlHd); rewrite consHdTlTlHd.",
                        "VernacExtend",
                        "63a5a3817b518e544f83e1cd36c51bcb3fa0a66d"
                    ]
                },
                {
                    "command": [
                        "apply pred_perm_1.",
                        "VernacExtend",
                        "d2236473ca9604fd8cabcd8f3109a27b1a1adc05"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (HPerm2 : (forall (A B : T) (X : cartesianPower T n), (fixLastCP appPred (lastCP cp)) (consHeadCP A (consHeadCP B X)) -> (fixLastCP appPred (lastCP cp)) (consHeadCP B (consHeadCP A X)))) by (unfold fixLastCP; intros A B X HappPred; rewrite <- consTlHdHdTl; apply pred_perm_2; rewrite consTlHdHdTl; assumption).",
                        "VernacExtend",
                        "3c2f89483cf70aa34cf42629bc0333fb9723237d"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_sym in HPerm.",
                        "VernacExtend",
                        "2bac89f9a95cdaf27594a08fe9ee0b76ebffd010"
                    ]
                },
                {
                    "command": [
                        "assert (H := IHn (allButLastCP cp) (allButLastCP cp2) (fixLastCP appPred (lastCP cp)) HPerm1 HPerm2).",
                        "VernacExtend",
                        "77b6f542a8ba37af9a2acd929178662f03d55e56"
                    ]
                },
                {
                    "command": [
                        "apply H; try assumption.",
                        "VernacExtend",
                        "68e7092774a2e9a2819db750e45c33de9d664634"
                    ]
                },
                {
                    "command": [
                        "rewrite <- fixLastCPOK.",
                        "VernacExtend",
                        "65bfb162b7e9867cdca91ac8acd3c4faa2173008"
                    ]
                },
                {
                    "command": [
                        "rewrite <- consTailCPOK.",
                        "VernacExtend",
                        "c6689cfe45bce7d95c908555702bbc1d1918f7d5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lengthNilOK",
            "line_nb": 886,
            "steps": [
                {
                    "command": [
                        "intros l Hlength; induction l.",
                        "VernacExtend",
                        "d4b118832d61f721685fdb0ae9cc593ad4b49547"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in Hlength.",
                        "VernacExtend",
                        "b56b0b0fdaf572bbd71967066d8c971e314b994d"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NoDupOK",
            "line_nb": 892,
            "steps": [
                {
                    "command": [
                        "intro l; induction l; intros l' Hincl Hlength HNoDup.",
                        "VernacExtend",
                        "36d960983810050e3e37b0146121e31be07aa187"
                    ]
                },
                {
                    "command": [
                        "simpl in Hlength.",
                        "VernacExtend",
                        "b56b0b0fdaf572bbd71967066d8c971e314b994d"
                    ]
                },
                {
                    "command": [
                        "apply eq_sym in Hlength.",
                        "VernacExtend",
                        "9daca15835efabb298f07643e1076af749e031da"
                    ]
                },
                {
                    "command": [
                        "apply lengthNilOK in Hlength.",
                        "VernacExtend",
                        "15560a1336851584c0a26d4cb73ae72a54e0d4d7"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.perm_nil.",
                        "VernacExtend",
                        "872f7594b0e8651299f00535dfad0e8b9ff3fc6f"
                    ]
                },
                {
                    "command": [
                        "induction l'.",
                        "VernacExtend",
                        "773e04ff833259851fb65b4bcd371f3996d47e26"
                    ]
                },
                {
                    "command": [
                        "simpl in Hlength.",
                        "VernacExtend",
                        "b56b0b0fdaf572bbd71967066d8c971e314b994d"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "clear IHl'.",
                        "VernacExtend",
                        "5d9ecccaea7c6a865b008a90acbec22b9eb1f6b4"
                    ]
                },
                {
                    "command": [
                        "rename a0 into a'.",
                        "VernacExtend",
                        "a97c0733503bc0fdf8faf7e51e18c33a52194f37"
                    ]
                },
                {
                    "command": [
                        "assert (HIn := in_eq a l).",
                        "VernacExtend",
                        "f23fee9933a34c6e97de7496572120edb07e2172"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hincl).",
                        "VernacExtend",
                        "ed12c27297899d9053b9c62c8f6713c933054439"
                    ]
                },
                {
                    "command": [
                        "unfold incl in H.",
                        "VernacExtend",
                        "7efcfee3aa78d8489d80ccdf83d0b72661f1ba26"
                    ]
                },
                {
                    "command": [
                        "apply H in HIn.",
                        "VernacExtend",
                        "2da3bd42e5f29b15ef9a60555dd0c6034ffe0bee"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "apply in_split in HIn.",
                        "VernacExtend",
                        "a2913997515114d5b720ea5dbf665aabd00d038c"
                    ]
                },
                {
                    "command": [
                        "destruct HIn as [l1 [l2 Hl']].",
                        "VernacExtend",
                        "8c30609187acc101a3983f2ba9b3b37731da67bb"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl' in *.",
                        "VernacExtend",
                        "6fc85f8b4e887099545c7a71c68b441050e57253"
                    ]
                },
                {
                    "command": [
                        "apply Permutation.Permutation_cons_app.",
                        "VernacExtend",
                        "7d390634d14134a4b8df75cf1867087dd02038dc"
                    ]
                },
                {
                    "command": [
                        "apply IHl.",
                        "VernacExtend",
                        "af412c6009bba78f939aa53ab07dcd1baaf5888b"
                    ]
                },
                {
                    "command": [
                        "unfold incl.",
                        "VernacExtend",
                        "bc668a228fabc181ca6e5d6b8b8a0673a10724dc"
                    ]
                },
                {
                    "command": [
                        "intros e HIn.",
                        "VernacExtend",
                        "4376b87e7e7aeaba492e6fe1c2ad3aada03aeb9b"
                    ]
                },
                {
                    "command": [
                        "unfold incl in Hincl.",
                        "VernacExtend",
                        "14f3fd11e65bc2792727fbcd20d2dd2947f1764a"
                    ]
                },
                {
                    "command": [
                        "assert (H := Hincl e).",
                        "VernacExtend",
                        "5cf404fff830cd25182c94299e0caf51da115e3e"
                    ]
                },
                {
                    "command": [
                        "clear Hincl.",
                        "VernacExtend",
                        "77e3824512f818b55287b7e255b534db82467296"
                    ]
                },
                {
                    "command": [
                        "assert (HIn' := in_cons a e l HIn).",
                        "VernacExtend",
                        "e8329d64b33f369135a069459181cca69a5bd2d5"
                    ]
                },
                {
                    "command": [
                        "apply H in HIn'.",
                        "VernacExtend",
                        "9506e9ce250fdd13b5acdc8fb7763ac73ff70dff"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "apply in_app_or in HIn'.",
                        "VernacExtend",
                        "bbdd00cd7b7f49c87650c4e8163d146930d463b7"
                    ]
                },
                {
                    "command": [
                        "elim HIn'; clear HIn'; intro HIn'.",
                        "VernacExtend",
                        "2311dff2f659de92b19627b64c4d9ae16e78f4bf"
                    ]
                },
                {
                    "command": [
                        "apply in_or_app.",
                        "VernacExtend",
                        "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply in_inv in HIn'.",
                        "VernacExtend",
                        "ca5d9b76a4604d5cef86835fd94fc453221e79c5"
                    ]
                },
                {
                    "command": [
                        "elim HIn'; clear HIn'; intro HIn'.",
                        "VernacExtend",
                        "2311dff2f659de92b19627b64c4d9ae16e78f4bf"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (H := NoDup_remove_2 nil l e).",
                        "VernacExtend",
                        "f1db7f76b259c8319bfd1ac0d3adcf4c0a27f385"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "apply H in HNoDup.",
                        "VernacExtend",
                        "8c42bf5f6abd00aaac0ee3f1d127ed68c28b75cc"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "apply in_or_app.",
                        "VernacExtend",
                        "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "rewrite app_length.",
                        "VernacExtend",
                        "b9244791fd1e7d821ced2461a10375e028945296"
                    ]
                },
                {
                    "command": [
                        "rewrite app_length in Hlength.",
                        "VernacExtend",
                        "69ce44d148ea67c08a6fa8b9f2b3e8feacc0d7b7"
                    ]
                },
                {
                    "command": [
                        "simpl in Hlength.",
                        "VernacExtend",
                        "b56b0b0fdaf572bbd71967066d8c971e314b994d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_n_Sm in Hlength.",
                        "VernacExtend",
                        "caa79aad28f59e84c987c071940418319858547a"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S in Hlength.",
                        "VernacExtend",
                        "01aae2642b33e42fc30a8f54f4588f5277f51cd5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H := NoDup_remove_1 nil l a).",
                        "VernacExtend",
                        "4a4d862bf47c7514d2802a91a4cc5f8d38df7afa"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NoDup_dec",
            "line_nb": 946,
            "steps": [
                {
                    "command": [
                        "intros l HDec.",
                        "VernacExtend",
                        "790d782c3cc863b052240b1229fddf68afc66426"
                    ]
                },
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "apply NoDup_nil.",
                        "VernacExtend",
                        "67313a1ac898e25e0b147e35dceb4ec1f7ac73d2"
                    ]
                },
                {
                    "command": [
                        "elim IHl; clear IHl; intro H.",
                        "VernacExtend",
                        "946f9b900b4dbce1365a7b63d963a14b214c75b8"
                    ]
                },
                {
                    "command": [
                        "assert (HIn := in_dec HDec a l).",
                        "VernacExtend",
                        "39e2833059019619648db29a5c67319130accdba"
                    ]
                },
                {
                    "command": [
                        "elim HIn; clear HIn; intro HIn.",
                        "VernacExtend",
                        "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "intro H.",
                        "VernacExtend",
                        "a9535760040671e8853f25f0b4e9eda38ca392a6"
                    ]
                },
                {
                    "command": [
                        "assert (H' := NoDup_remove_2 nil l a).",
                        "VernacExtend",
                        "73e46c85acb4adbe90ccdf42d5cd335ac8ca3eeb"
                    ]
                },
                {
                    "command": [
                        "simpl in H'.",
                        "VernacExtend",
                        "d943243015ae7f9d4452dfc70846f2ccdf57c2f4"
                    ]
                },
                {
                    "command": [
                        "apply H' in H.",
                        "VernacExtend",
                        "805e76f40d46d9ca720ab8f786b4ba8302834790"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "apply NoDup_cons; assumption.",
                        "VernacExtend",
                        "3fce642939bead3b4da3c2d7918f4b835b0733af"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "assert (H := NoDup_remove_1 nil l a).",
                        "VernacExtend",
                        "4a4d862bf47c7514d2802a91a4cc5f8d38df7afa"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NotNoDupDup",
            "line_nb": 971,
            "steps": [
                {
                    "command": [
                        "intros l HDec.",
                        "VernacExtend",
                        "790d782c3cc863b052240b1229fddf68afc66426"
                    ]
                },
                {
                    "command": [
                        "induction l; intro HDup.",
                        "VernacExtend",
                        "a1a35a0f225713f147271b2aafd87d419472effc"
                    ]
                },
                {
                    "command": [
                        "assert (H := NoDup_nil A).",
                        "VernacExtend",
                        "0f57b7e5e8d96a86685cb8b7992abe3448282c7e"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "assert (HIn := in_dec HDec a l).",
                        "VernacExtend",
                        "39e2833059019619648db29a5c67319130accdba"
                    ]
                },
                {
                    "command": [
                        "elim HIn; clear HIn; intro HIn.",
                        "VernacExtend",
                        "cef04187d87fabdc6f0f5eae89abdfdcc53a6913"
                    ]
                },
                {
                    "command": [
                        "exists a; exists nil; exists l.",
                        "VernacExtend",
                        "836eea1bdd73ccd4d343bc6b05cc5ba507792934"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "assert (HDup' := NoDup_dec l HDec).",
                        "VernacExtend",
                        "4a7de7758cf9519bcc2ad37596a942a9d45c473e"
                    ]
                },
                {
                    "command": [
                        "elim HDup'; clear HDup'; intro HDup'.",
                        "VernacExtend",
                        "b3e561071ebf9e14976a4bd8b7967a3b0d2c6f5b"
                    ]
                },
                {
                    "command": [
                        "exfalso.",
                        "VernacExtend",
                        "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
                    ]
                },
                {
                    "command": [
                        "apply HDup.",
                        "VernacExtend",
                        "3bdad60570da903f339e5433d6e3ba3b37bec3d8"
                    ]
                },
                {
                    "command": [
                        "apply NoDup_cons; assumption.",
                        "VernacExtend",
                        "3fce642939bead3b4da3c2d7918f4b835b0733af"
                    ]
                },
                {
                    "command": [
                        "apply IHl in HDup'.",
                        "VernacExtend",
                        "d9bd6e0dad1c1eb52248a9bb1d459ddc85887809"
                    ]
                },
                {
                    "command": [
                        "clear HDec; clear HDup; clear HIn.",
                        "VernacExtend",
                        "cf8693e1b3ad423d904b035c9cbc8678e8176fd2"
                    ]
                },
                {
                    "command": [
                        "destruct HDup' as [e [l1 [l2 [HEq HIn]]]]; clear IHl.",
                        "VernacExtend",
                        "b29bab730eac9e532710a16603cc52502d3566c5"
                    ]
                },
                {
                    "command": [
                        "exists e; exists (a :: l1); exists l2.",
                        "VernacExtend",
                        "8185bf8f06eb85d4021b744e4b08d9b9a266d6ec"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite HEq; reflexivity.",
                        "VernacExtend",
                        "d8fdb38c3508578e03d7e17988f3d4c6080a89b6"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred_conj_aux",
            "line_nb": 995,
            "steps": [
                {
                    "command": [
                        "induction m.",
                        "VernacExtend",
                        "6f6279e892ad221278939a9b429a59edaeeb1676"
                    ]
                },
                {
                    "command": [
                        "exact (app_1_n pred cp cpwd).",
                        "VernacExtend",
                        "44cf3099a650f5ca35f999866c97124f35156bb9"
                    ]
                },
                {
                    "command": [
                        "exact ((app_1_n pred (headCP cp) cpwd) /\\ IHm (tailCP cp)).",
                        "VernacExtend",
                        "72dc616b464eccc7ff630cfb9e52b86a5326ca2e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "pcaHdTl",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "unfold pred_conj_aux; unfold nat_rect; reflexivity.",
                        "VernacExtend",
                        "824596af58ed8b32903be5d0c41c6874c531b856"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred_conj",
            "line_nb": 1003,
            "steps": [
                {
                    "command": [
                        "exact (pred_conj_aux pred n cp cpwd).",
                        "VernacExtend",
                        "e622dfd707754d142d615d056beb03c48e5f43f1"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}