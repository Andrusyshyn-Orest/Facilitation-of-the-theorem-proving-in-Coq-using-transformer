{
    "filename": "Tarski_dev/Ch04_cong_bet.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Tarski_dev.Ch03_bet.",
            "VernacRequire",
            "d332e612d87caaa02b43b4d899c837bb172daac7"
        ],
        [
            "Section T3.",
            "VernacBeginSection",
            "11eb1e9574ca977d2d0944f855c7148288db8c5a"
        ],
        [
            "Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.",
            "VernacContext",
            "c652196849f972e656c6c0437bc0c834b4161ae1"
        ],
        [
            "Lemma l4_2 : forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.",
            "VernacStartTheoremProof",
            "bc1831307bc31e2c4f091dfeab88b53e057b58ce"
        ],
        [
            "unfold IFSC.",
            "VernacExtend",
            "60753f7f761ae39d00e6454af135b7cb414ef7a5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "induction (eq_dec_points A C).",
            "VernacExtend",
            "bda996de19e922f2f3aa46630bed62394edd5e36"
        ],
        [
            "treat_equalities;assumption.",
            "VernacExtend",
            "1de2a51775ad72f97b3cb8e5d10010adcfc011d7"
        ],
        [
            "assert (exists E, Bet A C E /\\ C <> E) by apply point_construction_different.",
            "VernacExtend",
            "22093ab0e6c0b1eae71471d07e5b2c601371138a"
        ],
        [
            "ex_and H6 E.",
            "VernacExtend",
            "732387d8be42f94a9bbdc621729ca4e1180394b7"
        ],
        [
            "prolong A' C' E' C E.",
            "VernacExtend",
            "2da438bd47d42e6e1ee8b9243d594aab97770924"
        ],
        [
            "assert (Cong E D E' D') by ( apply (five_segment_with_def A C E D A' C' E' D');[ unfold OFSC; repeat split;Cong| assumption]).",
            "VernacExtend",
            "579e5653d2468fc089d6a0bf909dda0c22b10f3c"
        ],
        [
            "apply (five_segment_with_def E C B D E' C' B' D').",
            "VernacExtend",
            "78616c6c15215691cfe851e6d1a5f8164eb05152"
        ],
        [
            "unfold OFSC.",
            "VernacExtend",
            "492752124a3e0e575422433695b3cbf9807f06bc"
        ],
        [
            "repeat split; try solve [eBetween| Cong ].",
            "VernacExtend",
            "9a23e7c57b4f31d6a8335906499faef3c8199798"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l4_3 : forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A C A' C' -> Cong B C B' C' -> Cong A B A' B'.",
            "VernacStartTheoremProof",
            "aef37f7b7ea1464a8abcd05557c69bd2ee6a1e0a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply cong_commutativity.",
            "VernacExtend",
            "f9aaaf4e990e42548d094910d661343457891a5f"
        ],
        [
            "apply (l4_2 A B C A A' B' C' A').",
            "VernacExtend",
            "a469d13f1e1b5059256682b9f3739785e1296370"
        ],
        [
            "unfold IFSC.",
            "VernacExtend",
            "60753f7f761ae39d00e6454af135b7cb414ef7a5"
        ],
        [
            "repeat split;Cong.",
            "VernacExtend",
            "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l4_3_1 : forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong A C A' C' -> Cong B C B' C'.",
            "VernacStartTheoremProof",
            "381bbf9f96ac6aa06727d1de4bbf37770480c3e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply cong_commutativity.",
            "VernacExtend",
            "f9aaaf4e990e42548d094910d661343457891a5f"
        ],
        [
            "eapply l4_3;eBetween;Cong.",
            "VernacExtend",
            "400db3a536bde46d726cd4b2678cb47e4f1f34cf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l4_5 : forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.",
            "VernacStartTheoremProof",
            "a78e42e20a958da0efb42c95204bbea84e486b3a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "assert (exists D', Bet C' A' D' /\\ A' <> D') by (apply point_construction_different).",
            "VernacExtend",
            "a64e4e519e89d5c3757018d4a6e1cd5bcf776732"
        ],
        [
            "ex_and H1 x'.",
            "VernacExtend",
            "80b8ea576dea940d212455624cca7326dda51963"
        ],
        [
            "prolong x' A' B' A B.",
            "VernacExtend",
            "33cd2e99a2eaa352e3b6d2a6ea02834e45afe255"
        ],
        [
            "prolong x' B' C'' B C.",
            "VernacExtend",
            "10796423cc45f74fff54423da3f9ed57100a47af"
        ],
        [
            "assert (Bet A' B' C'') by eBetween.",
            "VernacExtend",
            "838be2c0dafc35897693deedd46bf0095229230e"
        ],
        [
            "assert (C'' = C').",
            "VernacExtend",
            "710e5d4b4a3610a7f6dbcc84594ad1f656e9d967"
        ],
        [
            "eapply (construction_uniqueness x' A' ).",
            "VernacExtend",
            "a59189f49ac66245bca0b2631284b9a7a2349902"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "eBetween.",
            "VernacExtend",
            "7b31bcfa7dadd14c68b56ddf144f7ee645de2c81"
        ],
        [
            "apply (l2_11 A' B' C'' A B C);Between.",
            "VernacExtend",
            "1df89dfcdf2474218e6123383b140cd9b91f8ba3"
        ],
        [
            "eBetween.",
            "VernacExtend",
            "7b31bcfa7dadd14c68b56ddf144f7ee645de2c81"
        ],
        [
            "Cong.",
            "VernacExtend",
            "38071831c795d703a75f51b6d65fc147487103cc"
        ],
        [
            "subst C''.",
            "VernacExtend",
            "baf9e25f24f7f72e069af1c7b2831385b5536daa"
        ],
        [
            "exists B'.",
            "VernacExtend",
            "bcb20d6cf63fc499dc5f940bb4e74610c8e37255"
        ],
        [
            "repeat split;Cong.",
            "VernacExtend",
            "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l4_6 : forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.",
            "VernacStartTheoremProof",
            "81d0f682468604eb4e6641196d3610a9146a1e15"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C') by (eapply l4_5;intuition).",
            "VernacExtend",
            "779d38e51b39d77c88ae9bc82be65c8c982c10e9"
        ],
        [
            "ex_and H1 x.",
            "VernacExtend",
            "c361a38a1b27acee6c483cf87a7f204f2e88a370"
        ],
        [
            "unfold Cong_3 in *;spliter.",
            "VernacExtend",
            "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
        ],
        [
            "assert (Cong_3 A' x C' A' B' C').",
            "VernacExtend",
            "a76043ca12a0ca475468215df2a3221c77dc3a14"
        ],
        [
            "unfold Cong_3;repeat split; Cong.",
            "VernacExtend",
            "5366fc64b85e7e81372578c99bd45fea50441a6c"
        ],
        [
            "apply cong_transitivity with A B; Cong.",
            "VernacExtend",
            "20f054835fa3b4ad0c41ee799527047b78569000"
        ],
        [
            "apply cong_transitivity with B C; Cong.",
            "VernacExtend",
            "84196df96279b7781915a93b94819a58a3f8a12a"
        ],
        [
            "unfold Cong_3 in H7;spliter.",
            "VernacExtend",
            "91f2011eba666d3083fe26eb215bb9a5f5f9744e"
        ],
        [
            "assert (IFSC A' x C' x A' x C' B') by (unfold IFSC;repeat split;Cong).",
            "VernacExtend",
            "e9f68579712acf334b50eb479982072fc11712d2"
        ],
        [
            "assert (Cong x x x B') by (eapply l4_2;apply H10).",
            "VernacExtend",
            "0d7ac815274ef92724c26780eeb778e1cefc0dbb"
        ],
        [
            "Between.",
            "VernacExtend",
            "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cong3_bet_eq : forall A B C X, Bet A B C -> Cong_3 A B C A X C -> X = B.",
            "VernacStartTheoremProof",
            "4616f5746276c9ced096d4a1d3d985b640552191"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert (IFSC A B C B A B C X) by (unfold IFSC;intuition).",
            "VernacExtend",
            "ae832fed3fe089b3447deb2a1710991343af16cd"
        ],
        [
            "assert (Cong B B B X) by (apply (l4_2 _ _ _ _ _ _ _ _ H3)).",
            "VernacExtend",
            "11916bdc217c3d80e5ec967b3e66ee3a2af3ae7a"
        ],
        [
            "Between.",
            "VernacExtend",
            "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End T3.",
            "VernacEndSegment",
            "86bffd44042aced7db3b5e80d366ff4f1349a759"
        ]
    ],
    "proofs": [
        {
            "name": "l4_2",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "unfold IFSC.",
                        "VernacExtend",
                        "60753f7f761ae39d00e6454af135b7cb414ef7a5"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec_points A C).",
                        "VernacExtend",
                        "bda996de19e922f2f3aa46630bed62394edd5e36"
                    ]
                },
                {
                    "command": [
                        "treat_equalities;assumption.",
                        "VernacExtend",
                        "1de2a51775ad72f97b3cb8e5d10010adcfc011d7"
                    ]
                },
                {
                    "command": [
                        "assert (exists E, Bet A C E /\\ C <> E) by apply point_construction_different.",
                        "VernacExtend",
                        "22093ab0e6c0b1eae71471d07e5b2c601371138a"
                    ]
                },
                {
                    "command": [
                        "ex_and H6 E.",
                        "VernacExtend",
                        "732387d8be42f94a9bbdc621729ca4e1180394b7"
                    ]
                },
                {
                    "command": [
                        "prolong A' C' E' C E.",
                        "VernacExtend",
                        "2da438bd47d42e6e1ee8b9243d594aab97770924"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E D E' D') by ( apply (five_segment_with_def A C E D A' C' E' D');[ unfold OFSC; repeat split;Cong| assumption]).",
                        "VernacExtend",
                        "579e5653d2468fc089d6a0bf909dda0c22b10f3c"
                    ]
                },
                {
                    "command": [
                        "apply (five_segment_with_def E C B D E' C' B' D').",
                        "VernacExtend",
                        "78616c6c15215691cfe851e6d1a5f8164eb05152"
                    ]
                },
                {
                    "command": [
                        "unfold OFSC.",
                        "VernacExtend",
                        "492752124a3e0e575422433695b3cbf9807f06bc"
                    ]
                },
                {
                    "command": [
                        "repeat split; try solve [eBetween| Cong ].",
                        "VernacExtend",
                        "9a23e7c57b4f31d6a8335906499faef3c8199798"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l4_3",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply cong_commutativity.",
                        "VernacExtend",
                        "f9aaaf4e990e42548d094910d661343457891a5f"
                    ]
                },
                {
                    "command": [
                        "apply (l4_2 A B C A A' B' C' A').",
                        "VernacExtend",
                        "a469d13f1e1b5059256682b9f3739785e1296370"
                    ]
                },
                {
                    "command": [
                        "unfold IFSC.",
                        "VernacExtend",
                        "60753f7f761ae39d00e6454af135b7cb414ef7a5"
                    ]
                },
                {
                    "command": [
                        "repeat split;Cong.",
                        "VernacExtend",
                        "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l4_3_1",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply cong_commutativity.",
                        "VernacExtend",
                        "f9aaaf4e990e42548d094910d661343457891a5f"
                    ]
                },
                {
                    "command": [
                        "eapply l4_3;eBetween;Cong.",
                        "VernacExtend",
                        "400db3a536bde46d726cd4b2678cb47e4f1f34cf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l4_6",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "unfold Cong_3.",
                        "VernacExtend",
                        "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C') by (eapply l4_5;intuition).",
                        "VernacExtend",
                        "779d38e51b39d77c88ae9bc82be65c8c982c10e9"
                    ]
                },
                {
                    "command": [
                        "ex_and H1 x.",
                        "VernacExtend",
                        "c361a38a1b27acee6c483cf87a7f204f2e88a370"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3 in *;spliter.",
                        "VernacExtend",
                        "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 A' x C' A' B' C').",
                        "VernacExtend",
                        "a76043ca12a0ca475468215df2a3221c77dc3a14"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3;repeat split; Cong.",
                        "VernacExtend",
                        "5366fc64b85e7e81372578c99bd45fea50441a6c"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with A B; Cong.",
                        "VernacExtend",
                        "20f054835fa3b4ad0c41ee799527047b78569000"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with B C; Cong.",
                        "VernacExtend",
                        "84196df96279b7781915a93b94819a58a3f8a12a"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3 in H7;spliter.",
                        "VernacExtend",
                        "91f2011eba666d3083fe26eb215bb9a5f5f9744e"
                    ]
                },
                {
                    "command": [
                        "assert (IFSC A' x C' x A' x C' B') by (unfold IFSC;repeat split;Cong).",
                        "VernacExtend",
                        "e9f68579712acf334b50eb479982072fc11712d2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong x x x B') by (eapply l4_2;apply H10).",
                        "VernacExtend",
                        "0d7ac815274ef92724c26780eeb778e1cefc0dbb"
                    ]
                },
                {
                    "command": [
                        "Between.",
                        "VernacExtend",
                        "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong3_bet_eq",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "unfold Cong_3.",
                        "VernacExtend",
                        "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert (IFSC A B C B A B C X) by (unfold IFSC;intuition).",
                        "VernacExtend",
                        "ae832fed3fe089b3447deb2a1710991343af16cd"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B B B X) by (apply (l4_2 _ _ _ _ _ _ _ _ H3)).",
                        "VernacExtend",
                        "11916bdc217c3d80e5ec967b3e66ee3a2af3ae7a"
                    ]
                },
                {
                    "command": [
                        "Between.",
                        "VernacExtend",
                        "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}