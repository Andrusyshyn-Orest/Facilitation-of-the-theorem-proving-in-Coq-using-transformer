{
    "filename": "Elements/OriginalProofs/lemma_8_2.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_rightangleNC.",
            "VernacRequire",
            "c4a2d91d24b72e33ae587cc77132fba3f4b85052"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.",
            "VernacRequire",
            "b41d962fe0e15082ca850c781a7005b05625160b"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_supplements.",
            "VernacRequire",
            "ee152459d464de3c6f66bbb3633963bf8c97a3a8"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.",
            "VernacRequire",
            "3d8572a356790eabfa0de91c4f9a3be03ecdf47e"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_8_2 : forall A B C, Per A B C -> Per C B A.",
            "VernacStartTheoremProof",
            "251ea707a46cbfdbe4575d237564459b4cc0492b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.",
            "VernacExtend",
            "21b3c47fc268fc66c06c7322b043d48b4fd5bff5"
        ],
        [
            "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f6de27d2290b224fed0d2ab5b24228893a410ec8"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS C B E /\\ Cong B E B C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "571060af7630b360ad643a770381814901eeefbd"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (nCol A B C) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
        ],
        [
            "assert (Supp A B C C D) by (conclude_def Supp ).",
            "VernacExtend",
            "4c5e6987c431168be256462f453f22ecb56d0788"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Supp C B A A E) by (conclude_def Supp ).",
            "VernacExtend",
            "140bccbb1e9bf6d28652f1ed5ca69c8ea413e66f"
        ],
        [
            "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "adabb930dfa462438b4c67f245952c72a34fba3e"
        ],
        [
            "assert (CongA C B D A B E) by (conclude lemma_supplements).",
            "VernacExtend",
            "9811fa6aad775e9d786684aa9d906fdbd147a171"
        ],
        [
            "assert (Cong B C B E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "8856818e61a27edfb83fed9e2fae6520f8e41976"
        ],
        [
            "assert (Cong B D B A) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "6fd47aa99ab8fed88a61a05ec15a236732a1c560"
        ],
        [
            "assert (~ Col E B A).",
            "VernacExtend",
            "daf0b4d504fb08b6d6923c32c4500166ae3b95a6"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col C B E) by (conclude_def Col ).",
            "VernacExtend",
            "4bf264c5799ae34f0b5a8d6948402bcdc9b81c5e"
        ],
        [
            "assert (Col E B C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5cb17da1d32355001cb25fb8a6ee7748b8f9337b"
        ],
        [
            "assert (neq B E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "33d569a7c9181367345905ba23a4d65f23db0a03"
        ],
        [
            "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "fdcff29c293eec992662c7fb2d6c669edf09d93d"
        ],
        [
            "assert (Col B A C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "f3eed40a6b4eae7191d8ca2c58e9bf0a64032a6d"
        ],
        [
            "assert (Col A B C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "115803ade1f97d11f923db51e034b8a1961d4ba9"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Col A B E).",
            "VernacExtend",
            "7d62da4cc58da856ca60db2bc196325de3192d47"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col E B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "4c5e1f93c7fe9947afff50c1ded8f4ffe0ea9f55"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (CongA A B E E B A) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "a3a2f5ea5f2d38a1d436f88c6cfa351314d63f29"
        ],
        [
            "assert (CongA C B D E B A) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "794fb30d2094e1420f0d57a5362dbb8952ca108d"
        ],
        [
            "assert ((Cong C D E A /\\ CongA B C D B E A /\\ CongA B D C B A E)) by (conclude proposition_04).",
            "VernacExtend",
            "bb9de54bea059b6c05931f5c8792a0b5742decfa"
        ],
        [
            "assert (Cong A C C D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "320b669708e7276c20ccab226531fd8422ca08e4"
        ],
        [
            "assert (Cong A C E A) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "c5fd3c69c40601336ecc02432bbcc585616a11f1"
        ],
        [
            "assert (Cong C A E A) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "ae252e1d6cc05ea56b7f0d71f41546375628dcf7"
        ],
        [
            "assert (Cong C B E B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "94e7fdb57455bb7df12f812bcaf434b319b63cec"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (Per C B A) by (conclude_def Per ).",
            "VernacExtend",
            "9b112f66d98bd28c4ae912e26c637308b044f7b1"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_8_2",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.",
                        "VernacExtend",
                        "21b3c47fc268fc66c06c7322b043d48b4fd5bff5"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f6de27d2290b224fed0d2ab5b24228893a410ec8"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS C B E /\\ Cong B E B C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "571060af7630b360ad643a770381814901eeefbd"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
                    ]
                },
                {
                    "command": [
                        "assert (Supp A B C C D) by (conclude_def Supp ).",
                        "VernacExtend",
                        "4c5e6987c431168be256462f453f22ecb56d0788"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Supp C B A A E) by (conclude_def Supp ).",
                        "VernacExtend",
                        "140bccbb1e9bf6d28652f1ed5ca69c8ea413e66f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "adabb930dfa462438b4c67f245952c72a34fba3e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B D A B E) by (conclude lemma_supplements).",
                        "VernacExtend",
                        "9811fa6aad775e9d786684aa9d906fdbd147a171"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "8856818e61a27edfb83fed9e2fae6520f8e41976"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D B A) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "6fd47aa99ab8fed88a61a05ec15a236732a1c560"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col E B A).",
                        "VernacExtend",
                        "daf0b4d504fb08b6d6923c32c4500166ae3b95a6"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B E) by (conclude_def Col ).",
                        "VernacExtend",
                        "4bf264c5799ae34f0b5a8d6948402bcdc9b81c5e"
                    ]
                },
                {
                    "command": [
                        "assert (Col E B C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5cb17da1d32355001cb25fb8a6ee7748b8f9337b"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "33d569a7c9181367345905ba23a4d65f23db0a03"
                    ]
                },
                {
                    "command": [
                        "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "fdcff29c293eec992662c7fb2d6c669edf09d93d"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "f3eed40a6b4eae7191d8ca2c58e9bf0a64032a6d"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "115803ade1f97d11f923db51e034b8a1961d4ba9"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A B E).",
                        "VernacExtend",
                        "7d62da4cc58da856ca60db2bc196325de3192d47"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col E B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "4c5e1f93c7fe9947afff50c1ded8f4ffe0ea9f55"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B E E B A) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "a3a2f5ea5f2d38a1d436f88c6cfa351314d63f29"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B D E B A) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "794fb30d2094e1420f0d57a5362dbb8952ca108d"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong C D E A /\\ CongA B C D B E A /\\ CongA B D C B A E)) by (conclude proposition_04).",
                        "VernacExtend",
                        "bb9de54bea059b6c05931f5c8792a0b5742decfa"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C C D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "320b669708e7276c20ccab226531fd8422ca08e4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C E A) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "c5fd3c69c40601336ecc02432bbcc585616a11f1"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C A E A) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "ae252e1d6cc05ea56b7f0d71f41546375628dcf7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B E B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "94e7fdb57455bb7df12f812bcaf434b319b63cec"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (Per C B A) by (conclude_def Per ).",
                        "VernacExtend",
                        "9b112f66d98bd28c4ae912e26c637308b044f7b1"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}