{
    "filename": "Elements/OriginalProofs/lemma_parallelsymmetric.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.euclidean_tactics.",
            "VernacRequire",
            "7a5bac876396985958fd41788a10bedaca4e41dd"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral}.",
            "VernacContext",
            "2b23404dca7c933c43ab174476f98a2dd3fed6cf"
        ],
        [
            "Lemma lemma_parallelsymmetric : forall A B C D, Par A B C D -> Par C D A B.",
            "VernacStartTheoremProof",
            "1fae317f1ec4db09117990ecde483d4c0ea90ca9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.",
            "VernacExtend",
            "c0b50e0439768d123ecadbfac424d01b3d3212ea"
        ],
        [
            "assert (~ Meet C D A B).",
            "VernacExtend",
            "9d6aaa38cec082c306b16e4ce78a29599b0d83d2"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (neq C D /\\ neq A B /\\ Col C D P /\\ Col A B P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
            "VernacExtend",
            "47ddedfa83bccbdc4aa3d1f2ce002157e2bd4e2d"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par C D A B) by (conclude_def Par ).",
            "VernacExtend",
            "b826699e9ac73e48cce7c79209d03080238f3e9d"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_parallelsymmetric",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists a b c d m, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a m d /\\ BetS c m b)) by (conclude_def Par );destruct Tf as [a[b[c[d[m]]]]];spliter.",
                        "VernacExtend",
                        "c0b50e0439768d123ecadbfac424d01b3d3212ea"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet C D A B).",
                        "VernacExtend",
                        "9d6aaa38cec082c306b16e4ce78a29599b0d83d2"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (neq C D /\\ neq A B /\\ Col C D P /\\ Col A B P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "47ddedfa83bccbdc4aa3d1f2ce002157e2bd4e2d"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par C D A B) by (conclude_def Par ).",
                        "VernacExtend",
                        "b826699e9ac73e48cce7c79209d03080238f3e9d"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}