{
    "filename": "Elements/OriginalProofs/proposition_17.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.",
            "VernacRequire",
            "27d71a9bed299ed932460cd47291d5181182bf2b"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_16.",
            "VernacRequire",
            "eb16b6740514463d06eab37bbb8ae9f4cd552e84"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_crossbar.",
            "VernacRequire",
            "0106fe97a15011bd08531b64fbb63434c7a191e1"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.",
            "VernacRequire",
            "e464db49a36f1840285875a39e67b1d058d20da3"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.",
            "VernacRequire",
            "45862997789ccb0c1d124a0a45383611fa0cc836"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_17 : forall A B C, Triangle A B C -> exists X Y Z, SumA A B C B C A X Y Z.",
            "VernacStartTheoremProof",
            "64c9953123248d4f256b0e2eb8f1dd6b9a276f8c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists D, (BetS B C D /\\ Cong C D B C)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
            "VernacExtend",
            "2ef5c9e6a655be2161b8dde64155d81f41aa046f"
        ],
        [
            "assert (nCol B C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
        ],
        [
            "assert (Col B C D) by (conclude_def Col ).",
            "VernacExtend",
            "afd1e2d0a6ae54ac1da609fde4731349b531ba6f"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col B C B) by (conclude_def Col ).",
            "VernacExtend",
            "b9712bc9f35cfd97230afedc7bbe6a97f60723fa"
        ],
        [
            "assert (neq B D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "d9a8b449c450d5198c0f3b04d0eb411d7c24763b"
        ],
        [
            "assert (nCol B D A) by (conclude lemma_NChelper).",
            "VernacExtend",
            "c8de7ae8d76998cc6cd6985bc0b30a6b9ec3d486"
        ],
        [
            "assert (nCol A D B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7bfdf40824a4ab71cc0cc2a67e3e3cf3ab8da5cf"
        ],
        [
            "assert (LtA C B A A C D) by (conclude proposition_16).",
            "VernacExtend",
            "403cd9679f7b3ffb8b2ccbec099056841be6df5f"
        ],
        [
            "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "adabb930dfa462438b4c67f245952c72a34fba3e"
        ],
        [
            "assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence2).",
            "VernacExtend",
            "99c58d203867d8e4578a2dd3f5b10644c5eaca83"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists a d e, (BetS a e d /\\ Out C A a /\\ Out C D d /\\ CongA A B C A C e)) by (conclude_def LtA );destruct Tf as [a[d[e]]];spliter.",
            "VernacExtend",
            "336f0e2b1bccf23df6136fcf638e08bb0aa7c91c"
        ],
        [
            "assert (Out C a A) by (conclude lemma_ray5).",
            "VernacExtend",
            "b7d64cfd1b33719a0ab69ad33d1c4b1a361eca64"
        ],
        [
            "assert (Out C d D) by (conclude lemma_ray5).",
            "VernacExtend",
            "c95003135c54e21d95bcfbb6f718780f4cc7069e"
        ],
        [
            "assert (Col B C D) by (conclude_def Col ).",
            "VernacExtend",
            "afd1e2d0a6ae54ac1da609fde4731349b531ba6f"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Col B C C) by (conclude_def Col ).",
            "VernacExtend",
            "180b69e1d75faa9cbd33f7fe6248015c489b30a7"
        ],
        [
            "assert (nCol B C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
        ],
        [
            "assert (neq C D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ec8ed20fd91c966709071dfab476d123976a3733"
        ],
        [
            "assert (nCol C D A) by (conclude lemma_NChelper).",
            "VernacExtend",
            "a783f7db3155e30c1922668924b4d42f2e4d6712"
        ],
        [
            "assert (Col C D C) by (conclude_def Col ).",
            "VernacExtend",
            "a5c3d5eb1771de0bbde081130e12a688964681c9"
        ],
        [
            "assert (Col C D d) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "3cc5c35d5d4c8e0e0bec54bc626de7ca0510ccfe"
        ],
        [
            "assert (neq C d) by (conclude lemma_ray2).",
            "VernacExtend",
            "b3d704414b9cce4263856ed3251cc8160c06478d"
        ],
        [
            "assert (nCol C d A) by (conclude lemma_NChelper).",
            "VernacExtend",
            "112edb33127339d07a5b6bc1d67c89cccb60401e"
        ],
        [
            "assert (nCol C A d) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "fc050d4ad21f190e29eb202bacae05b990b74b15"
        ],
        [
            "assert (Col C A a) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "9655ede0baaf34893f62975f0ae0adc7372b4e70"
        ],
        [
            "assert (Col C A C) by (conclude_def Col ).",
            "VernacExtend",
            "17d30dee14a5b9a3e0b1968da821571370c83435"
        ],
        [
            "assert (neq C a) by (conclude lemma_ray2).",
            "VernacExtend",
            "5c184b49c321dbdc640e03eb4458f190c33ead78"
        ],
        [
            "assert (nCol C a d) by (conclude lemma_NChelper).",
            "VernacExtend",
            "72559e571323022c614cf6e4cfffdaa233a39ca3"
        ],
        [
            "assert (nCol a C d) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "d446139bbebf643e8dd3acaa3917ff639ed50f61"
        ],
        [
            "assert (nCol D A C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "632e62221cf353266526cfd88c3c37e9d8d3c433"
        ],
        [
            "assert (Triangle a C d) by (conclude_def Triangle ).",
            "VernacExtend",
            "f65a451030085b8716fb6f23ee01f46aae38fa30"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (Out C e E /\\ BetS A E D)) by (conclude lemma_crossbar);destruct Tf as [E];spliter.",
            "VernacExtend",
            "3dbe026ba75606e85f2781e79d5af119253141d7"
        ],
        [
            "assert (Out C E e) by (conclude lemma_ray5).",
            "VernacExtend",
            "beb2171e368dc0a874fd60baecf498c61eda722e"
        ],
        [
            "assert (Col A E D) by (conclude_def Col ).",
            "VernacExtend",
            "09ce3cf6c7c038f74468a519c94d24d640a978a8"
        ],
        [
            "assert (Col D A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a86b083608bdcdff75c296635c1ece4f05606712"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Col D A A) by (conclude_def Col ).",
            "VernacExtend",
            "7ce2c6546dd5bf407b10e0b2b629f7ce0ad2c61f"
        ],
        [
            "assert (neq A E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9dc76a35f0423fea77251119a803e21c8f59a255"
        ],
        [
            "assert (neq E A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "5eef00ef1d0a882b209a09f629d7ffc97b7486d2"
        ],
        [
            "assert (nCol E A C) by (conclude lemma_NChelper).",
            "VernacExtend",
            "57b1a835d6775f7b1ba87785d31a6050ef673867"
        ],
        [
            "assert (nCol A C E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "857fe8f205d3e7cc62f35a4499bf11e3bf8c9a64"
        ],
        [
            "assert (nCol C E A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "042d712504b797e36a5c89c303926ee973a2048a"
        ],
        [
            "assert (Col C E e) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "874f970091b6dacd92707d451b47c27172f5f415"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Col C E C) by (conclude_def Col ).",
            "VernacExtend",
            "09c8303cb4ca0cc12170ee84a134146a8e874be6"
        ],
        [
            "assert (neq C e) by (conclude lemma_ray2).",
            "VernacExtend",
            "6298c7b474875b3c26361e6dc5de6f20057b4afa"
        ],
        [
            "assert (nCol C e A) by (conclude lemma_NChelper).",
            "VernacExtend",
            "70996fbca67891b31f821b428ced7f8f128b342e"
        ],
        [
            "assert (nCol A C e) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "f64ce68caeedd2f66e51e9c2c7d69bf21e72304e"
        ],
        [
            "assert (Col C A a) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "9655ede0baaf34893f62975f0ae0adc7372b4e70"
        ],
        [
            "assert (Col A C a) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "dbeeeb8cf7e5e40132caa5c394d27b17ca12f883"
        ],
        [
            "assert (Col A C C) by (conclude_def Col ).",
            "VernacExtend",
            "3068c83efc791ee2a0b851232bbf95facf2cfb45"
        ],
        [
            "assert (neq C a) by (conclude lemma_ray2).",
            "VernacExtend",
            "5c184b49c321dbdc640e03eb4458f190c33ead78"
        ],
        [
            "assert (neq a C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f8f4b001a46e52e88441a0ed3845fba2304c06f1"
        ],
        [
            "assert (nCol a C e) by (conclude lemma_NChelper).",
            "VernacExtend",
            "ebb910ea9b46b4b4589d5ea1b709330841403b01"
        ],
        [
            "assert (nCol E C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "71650a5bbe85c055a46b59ec6b58468211a997c6"
        ],
        [
            "assert (CongA a C e a C e) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "e605d7c19584115ee16d6285b0024019ee841be6"
        ],
        [
            "assert (CongA a C e A C E) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "3ad2d353ca96b01eed81663af7a4d107b51aff8e"
        ],
        [
            "assert (eq e e) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "65c9fd60c38f66050c64cfd2268aa2fee7d9c064"
        ],
        [
            "assert (neq C e) by (conclude lemma_ray2).",
            "VernacExtend",
            "6298c7b474875b3c26361e6dc5de6f20057b4afa"
        ],
        [
            "assert (Out C e e) by (conclude lemma_ray4).",
            "VernacExtend",
            "3b5d53c79432cc1b7d01d42238e434966ecdbe9c"
        ],
        [
            "assert (CongA A C e A C e) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "3465c29c848ad798d02fbc6192acf874f95a5f36"
        ],
        [
            "assert (CongA A C e a C e) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "502c4425ebb18907ed1b96f77db9d293c55b0e81"
        ],
        [
            "assert (CongA A B C a C e) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "1ab2fbd62895f629eb5fc1d0d42894579c22493e"
        ],
        [
            "assert (CongA A B C A C E) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "e9191a90d7b3c0c88b315dddcebf3fa66ef08a53"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS A F C /\\ BetS B F E)) by (conclude postulate_Pasch_inner);destruct Tf as [F];spliter.",
            "VernacExtend",
            "c0d5f0ba45bb258061a6ac65f84392ff7edc662e"
        ],
        [
            "assert (nCol A C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "6fa4d8521101c4cf3f499b7ee679c8ac57247afc"
        ],
        [
            "assert (Col A F C) by (conclude_def Col ).",
            "VernacExtend",
            "b30945f09ee5c7cf424cb1047ea842d067b361b4"
        ],
        [
            "assert (Col A C F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3da193ac60d8a883a048f048e435cafd58321b46"
        ],
        [
            "assert (Col A C C) by (conclude_def Col ).",
            "VernacExtend",
            "3068c83efc791ee2a0b851232bbf95facf2cfb45"
        ],
        [
            "assert (neq F C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ea02f13cf14629ebf47e463db19324326219f289"
        ],
        [
            "assert (nCol F C B) by (conclude lemma_NChelper).",
            "VernacExtend",
            "3d56e991adf4f5faa3c5c681a728caf149e6422b"
        ],
        [
            "assert (nCol B C F) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "2e8037c2e7ef379c48d07016954caf593feeff24"
        ],
        [
            "assert (BetS E F B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "5ce3fb7173596bae71a7b222a99828a2fbfa2932"
        ],
        [
            "assert (CongA A C E E C A) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "1bd8b300204adc6a7b5567d3fa4598037302144f"
        ],
        [
            "assert (CongA A B C E C A) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "a0b7709f9fb1b4a15acac7be3ff3a69e1795b494"
        ],
        [
            "assert (CongA E C A E C A) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "00e6d1e5a16831fe60fad41f281b985eb2b7935e"
        ],
        [
            "assert (BetS C F A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "0168abcdfe0772ac468fdf191838c19d575ac10b"
        ],
        [
            "assert (neq C F) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "3a331b8130423421b78af507ab92e13ccc8d8d61"
        ],
        [
            "assert (Out C F A) by (conclude lemma_ray4).",
            "VernacExtend",
            "709732d89d45918c6ac2207c722891c4c886e07e"
        ],
        [
            "assert (Out C A F) by (conclude lemma_ray5).",
            "VernacExtend",
            "52eb918a7ec851e33316747760276321a02052f4"
        ],
        [
            "assert (eq E E) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "0a1b9ee66843c7930009e2b10ca97e64b288584a"
        ],
        [
            "assert (neq C E) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8feea22005e9017d23304cc1ca571544078ae624"
        ],
        [
            "assert (Out C E E) by (conclude lemma_ray4).",
            "VernacExtend",
            "e86a9899b3899a5975bcc366135d4e8e13b3da1c"
        ],
        [
            "assert (CongA E C A E C F) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "9cb5dda4650906f5eef1e3b537ccfeb180e25fd7"
        ],
        [
            "assert (CongA A B C E C F) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "33c96ad5c520eb450a0a1c872ae1b5b09ffbc7f6"
        ],
        [
            "assert (nCol B C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
        ],
        [
            "assert (CongA B C A B C A) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "f6d3c4ca718cab2deab091404942cd03fcb7e296"
        ],
        [
            "assert (neq C B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "4166f0c0280dc7504e496fe594c5a787d05a54da"
        ],
        [
            "assert (Out C B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "637eb8335a2163c1d041df3535e69682ab03a1ad"
        ],
        [
            "assert (CongA B C A B C F) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "e30e7769b757557f982553472bb07ad949d0e347"
        ],
        [
            "assert (CongA B C F F C B) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "5983d3a0439e1fb2a69ac35cf9a2f5e87141b010"
        ],
        [
            "assert (CongA B C A F C B) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "4fe03d97679be15055618e6388bf9287d1e2ca81"
        ],
        [
            "assert (SumA A B C B C A E C B) by (conclude_def SumA ).",
            "VernacExtend",
            "f507a851767e5e37bf784a0a98c1094b0633d1c4"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_17",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists D, (BetS B C D /\\ Cong C D B C)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
                        "VernacExtend",
                        "2ef5c9e6a655be2161b8dde64155d81f41aa046f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C D) by (conclude_def Col ).",
                        "VernacExtend",
                        "afd1e2d0a6ae54ac1da609fde4731349b531ba6f"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C B) by (conclude_def Col ).",
                        "VernacExtend",
                        "b9712bc9f35cfd97230afedc7bbe6a97f60723fa"
                    ]
                },
                {
                    "command": [
                        "assert (neq B D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "d9a8b449c450d5198c0f3b04d0eb411d7c24763b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B D A) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "c8de7ae8d76998cc6cd6985bc0b30a6b9ec3d486"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A D B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7bfdf40824a4ab71cc0cc2a67e3e3cf3ab8da5cf"
                    ]
                },
                {
                    "command": [
                        "assert (LtA C B A A C D) by (conclude proposition_16).",
                        "VernacExtend",
                        "403cd9679f7b3ffb8b2ccbec099056841be6df5f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "adabb930dfa462438b4c67f245952c72a34fba3e"
                    ]
                },
                {
                    "command": [
                        "assert (LtA A B C A C D) by (conclude lemma_angleorderrespectscongruence2).",
                        "VernacExtend",
                        "99c58d203867d8e4578a2dd3f5b10644c5eaca83"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists a d e, (BetS a e d /\\ Out C A a /\\ Out C D d /\\ CongA A B C A C e)) by (conclude_def LtA );destruct Tf as [a[d[e]]];spliter.",
                        "VernacExtend",
                        "336f0e2b1bccf23df6136fcf638e08bb0aa7c91c"
                    ]
                },
                {
                    "command": [
                        "assert (Out C a A) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "b7d64cfd1b33719a0ab69ad33d1c4b1a361eca64"
                    ]
                },
                {
                    "command": [
                        "assert (Out C d D) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "c95003135c54e21d95bcfbb6f718780f4cc7069e"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C D) by (conclude_def Col ).",
                        "VernacExtend",
                        "afd1e2d0a6ae54ac1da609fde4731349b531ba6f"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C C) by (conclude_def Col ).",
                        "VernacExtend",
                        "180b69e1d75faa9cbd33f7fe6248015c489b30a7"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ec8ed20fd91c966709071dfab476d123976a3733"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C D A) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "a783f7db3155e30c1922668924b4d42f2e4d6712"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D C) by (conclude_def Col ).",
                        "VernacExtend",
                        "a5c3d5eb1771de0bbde081130e12a688964681c9"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D d) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "3cc5c35d5d4c8e0e0bec54bc626de7ca0510ccfe"
                    ]
                },
                {
                    "command": [
                        "assert (neq C d) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "b3d704414b9cce4263856ed3251cc8160c06478d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C d A) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "112edb33127339d07a5b6bc1d67c89cccb60401e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C A d) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "fc050d4ad21f190e29eb202bacae05b990b74b15"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A a) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "9655ede0baaf34893f62975f0ae0adc7372b4e70"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A C) by (conclude_def Col ).",
                        "VernacExtend",
                        "17d30dee14a5b9a3e0b1968da821571370c83435"
                    ]
                },
                {
                    "command": [
                        "assert (neq C a) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "5c184b49c321dbdc640e03eb4458f190c33ead78"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C a d) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "72559e571323022c614cf6e4cfffdaa233a39ca3"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a C d) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "d446139bbebf643e8dd3acaa3917ff639ed50f61"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D A C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "632e62221cf353266526cfd88c3c37e9d8d3c433"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle a C d) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "f65a451030085b8716fb6f23ee01f46aae38fa30"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (Out C e E /\\ BetS A E D)) by (conclude lemma_crossbar);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "3dbe026ba75606e85f2781e79d5af119253141d7"
                    ]
                },
                {
                    "command": [
                        "assert (Out C E e) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "beb2171e368dc0a874fd60baecf498c61eda722e"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E D) by (conclude_def Col ).",
                        "VernacExtend",
                        "09ce3cf6c7c038f74468a519c94d24d640a978a8"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a86b083608bdcdff75c296635c1ece4f05606712"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A A) by (conclude_def Col ).",
                        "VernacExtend",
                        "7ce2c6546dd5bf407b10e0b2b629f7ce0ad2c61f"
                    ]
                },
                {
                    "command": [
                        "assert (neq A E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9dc76a35f0423fea77251119a803e21c8f59a255"
                    ]
                },
                {
                    "command": [
                        "assert (neq E A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "5eef00ef1d0a882b209a09f629d7ffc97b7486d2"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E A C) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "57b1a835d6775f7b1ba87785d31a6050ef673867"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "857fe8f205d3e7cc62f35a4499bf11e3bf8c9a64"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C E A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "042d712504b797e36a5c89c303926ee973a2048a"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E e) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "874f970091b6dacd92707d451b47c27172f5f415"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E C) by (conclude_def Col ).",
                        "VernacExtend",
                        "09c8303cb4ca0cc12170ee84a134146a8e874be6"
                    ]
                },
                {
                    "command": [
                        "assert (neq C e) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "6298c7b474875b3c26361e6dc5de6f20057b4afa"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C e A) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "70996fbca67891b31f821b428ced7f8f128b342e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C e) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "f64ce68caeedd2f66e51e9c2c7d69bf21e72304e"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A a) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "9655ede0baaf34893f62975f0ae0adc7372b4e70"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C a) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "dbeeeb8cf7e5e40132caa5c394d27b17ca12f883"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C C) by (conclude_def Col ).",
                        "VernacExtend",
                        "3068c83efc791ee2a0b851232bbf95facf2cfb45"
                    ]
                },
                {
                    "command": [
                        "assert (neq C a) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "5c184b49c321dbdc640e03eb4458f190c33ead78"
                    ]
                },
                {
                    "command": [
                        "assert (neq a C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f8f4b001a46e52e88441a0ed3845fba2304c06f1"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a C e) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "ebb910ea9b46b4b4589d5ea1b709330841403b01"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "71650a5bbe85c055a46b59ec6b58468211a997c6"
                    ]
                },
                {
                    "command": [
                        "assert (CongA a C e a C e) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "e605d7c19584115ee16d6285b0024019ee841be6"
                    ]
                },
                {
                    "command": [
                        "assert (CongA a C e A C E) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "3ad2d353ca96b01eed81663af7a4d107b51aff8e"
                    ]
                },
                {
                    "command": [
                        "assert (eq e e) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "65c9fd60c38f66050c64cfd2268aa2fee7d9c064"
                    ]
                },
                {
                    "command": [
                        "assert (neq C e) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "6298c7b474875b3c26361e6dc5de6f20057b4afa"
                    ]
                },
                {
                    "command": [
                        "assert (Out C e e) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "3b5d53c79432cc1b7d01d42238e434966ecdbe9c"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C e A C e) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "3465c29c848ad798d02fbc6192acf874f95a5f36"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C e a C e) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "502c4425ebb18907ed1b96f77db9d293c55b0e81"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C a C e) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "1ab2fbd62895f629eb5fc1d0d42894579c22493e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C A C E) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "e9191a90d7b3c0c88b315dddcebf3fa66ef08a53"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS A F C /\\ BetS B F E)) by (conclude postulate_Pasch_inner);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "c0d5f0ba45bb258061a6ac65f84392ff7edc662e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "6fa4d8521101c4cf3f499b7ee679c8ac57247afc"
                    ]
                },
                {
                    "command": [
                        "assert (Col A F C) by (conclude_def Col ).",
                        "VernacExtend",
                        "b30945f09ee5c7cf424cb1047ea842d067b361b4"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3da193ac60d8a883a048f048e435cafd58321b46"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C C) by (conclude_def Col ).",
                        "VernacExtend",
                        "3068c83efc791ee2a0b851232bbf95facf2cfb45"
                    ]
                },
                {
                    "command": [
                        "assert (neq F C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ea02f13cf14629ebf47e463db19324326219f289"
                    ]
                },
                {
                    "command": [
                        "assert (nCol F C B) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "3d56e991adf4f5faa3c5c681a728caf149e6422b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C F) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "2e8037c2e7ef379c48d07016954caf593feeff24"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E F B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "5ce3fb7173596bae71a7b222a99828a2fbfa2932"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C E E C A) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "1bd8b300204adc6a7b5567d3fa4598037302144f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C E C A) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "a0b7709f9fb1b4a15acac7be3ff3a69e1795b494"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C A E C A) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "00e6d1e5a16831fe60fad41f281b985eb2b7935e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C F A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "0168abcdfe0772ac468fdf191838c19d575ac10b"
                    ]
                },
                {
                    "command": [
                        "assert (neq C F) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "3a331b8130423421b78af507ab92e13ccc8d8d61"
                    ]
                },
                {
                    "command": [
                        "assert (Out C F A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "709732d89d45918c6ac2207c722891c4c886e07e"
                    ]
                },
                {
                    "command": [
                        "assert (Out C A F) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "52eb918a7ec851e33316747760276321a02052f4"
                    ]
                },
                {
                    "command": [
                        "assert (eq E E) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "0a1b9ee66843c7930009e2b10ca97e64b288584a"
                    ]
                },
                {
                    "command": [
                        "assert (neq C E) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8feea22005e9017d23304cc1ca571544078ae624"
                    ]
                },
                {
                    "command": [
                        "assert (Out C E E) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "e86a9899b3899a5975bcc366135d4e8e13b3da1c"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C A E C F) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "9cb5dda4650906f5eef1e3b537ccfeb180e25fd7"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C E C F) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "33c96ad5c520eb450a0a1c872ae1b5b09ffbc7f6"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A B C A) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "f6d3c4ca718cab2deab091404942cd03fcb7e296"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "4166f0c0280dc7504e496fe594c5a787d05a54da"
                    ]
                },
                {
                    "command": [
                        "assert (Out C B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "637eb8335a2163c1d041df3535e69682ab03a1ad"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A B C F) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "e30e7769b757557f982553472bb07ad949d0e347"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C F F C B) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "5983d3a0439e1fb2a69ac35cf9a2f5e87141b010"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A F C B) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "4fe03d97679be15055618e6388bf9287d1e2ca81"
                    ]
                },
                {
                    "command": [
                        "assert (SumA A B C B C A E C B) by (conclude_def SumA ).",
                        "VernacExtend",
                        "f507a851767e5e37bf784a0a98c1094b0633d1c4"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}