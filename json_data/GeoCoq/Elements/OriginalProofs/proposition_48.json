{
    "filename": "Elements/OriginalProofs/proposition_48.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_47.",
            "VernacRequire",
            "6a746552fc3aadf90461f360e8445abe614683e0"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_squaresequal.",
            "VernacRequire",
            "e6683b1982a8b0674e92f44376256da90617629e"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_rectanglerotate.",
            "VernacRequire",
            "84323504f87f6dabca1429a24e890477df44fe92"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_paste5.",
            "VernacRequire",
            "e32c6083494dce409f92e244b83a717c06e00fc9"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_48A.",
            "VernacRequire",
            "8d1e1757423f7802aef9272437e0ac3805b79642"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_08.",
            "VernacRequire",
            "92529ab77d41194be7e5c62775ee1361ebc38c74"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_48 : forall A B C D E F G H K L M, Triangle A B C -> SQ A B F G -> SQ A C K H -> SQ B C E D -> BetS B M C -> BetS E L D -> EF A B F G B M L D -> EF A C K H M C E L -> RE M C E L -> Per B A C.",
            "VernacStartTheoremProof",
            "e11712ae583344ac2d3c3690b6972ff9446dd389"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (neq A C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8002a66bdd6f60a99dbf8089a844e1b798b91772"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists R, (BetS B A R /\\ Cong A R A B)) by (conclude lemma_extension);destruct Tf as [R];spliter.",
            "VernacExtend",
            "343285d5f58eff8b4987b1200d5bc93824414442"
        ],
        [
            "assert (Col B A R) by (conclude_def Col ).",
            "VernacExtend",
            "32b79257a189944cc3cbde89c2b235c9afa4be07"
        ],
        [
            "assert (Col A B R) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c7eefb4b5e9464ce353ec6aaf09a61c364b7a32d"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col A B B) by (conclude_def Col ).",
            "VernacExtend",
            "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
        ],
        [
            "assert (neq B R) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e007ddc36df104c5cd37c1a4355e69d12bf3ab5a"
        ],
        [
            "assert (neq R B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "09ab03601e1745dfa369f13e0a69f7650b421d7b"
        ],
        [
            "assert (nCol R B C) by (conclude lemma_NChelper).",
            "VernacExtend",
            "64268857eefc3a3307155e4c16a54d86a03e8b9d"
        ],
        [
            "assert (nCol B R C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "ab556f139a35f9babf55313aaada39801c52eae0"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, (Per B A Q /\\ TS Q B R C)) by (conclude proposition_11B);destruct Tf as [Q];spliter.",
            "VernacExtend",
            "0c452fb6604bcb71a6c1155ca55c265ee90399cb"
        ],
        [
            "assert (nCol B A Q) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "de553d2daff97b6ea713b2eb0f6c6e550c346b0e"
        ],
        [
            "assert (neq A Q) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c7c008594948d841ed2e09325db97068e26330d8"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists c, (Out A Q c /\\ Cong A c A C)) by (conclude lemma_layoff);destruct Tf as [c];spliter.",
            "VernacExtend",
            "4273060cb5c1193ad07efa11497d7ba24f944686"
        ],
        [
            "assert (Per B A c) by (conclude lemma_8_3).",
            "VernacExtend",
            "7fa0a6d043363102f7536c46034c0f447349e718"
        ],
        [
            "assert (nCol B A c) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "9d1514b133ec2524ad98490227db6d9deaf8597d"
        ],
        [
            "assert (nCol A B c) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "913c00a1dbe16c8bb3995e743bd66ce16de31ac2"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists f g, (SQ A B f g /\\ TS g A B c /\\ PG A B f g)) by (conclude proposition_46);destruct Tf as [f[g]];spliter.",
            "VernacExtend",
            "afb19ccb9d79fa66ece113f9b70b8fd48a146b9c"
        ],
        [
            "assert (neq A c) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "6f17dd216872088dadaa650aeb9f4d3836a3959b"
        ],
        [
            "assert (nCol A c B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "79becac5004979dc9f9ec3f9fb992e81386bf86a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists k h, (SQ A c k h /\\ TS h A c B /\\ PG A c k h)) by (conclude proposition_46);destruct Tf as [k[h]];spliter.",
            "VernacExtend",
            "62715b643e0adab23bd48f1d847dff4e5e711651"
        ],
        [
            "assert (neq B c) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8c2d4c024aa2247abb60bcb7922e42fcee8d8d31"
        ],
        [
            "assert (nCol B c A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "d7f2db9600e1c5c89aca427991fedfb8bc600a79"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists e d, (SQ B c e d /\\ TS d B c A /\\ PG B c e d)) by (conclude proposition_46);destruct Tf as [e[d]];spliter.",
            "VernacExtend",
            "b2047c8b30fae148f7b5a66798ff70f0ab9a3e34"
        ],
        [
            "assert (Triangle A B c) by (conclude_def Triangle ).",
            "VernacExtend",
            "491a75c735b213bcc9b5d91366261de0dd67697b"
        ],
        [
            "assert (TS g B A c) by (conclude lemma_oppositesideflip).",
            "VernacExtend",
            "488cd1087d783c8538838e5ff5dd323c6751760b"
        ],
        [
            "assert (TS h c A B) by (conclude lemma_oppositesideflip).",
            "VernacExtend",
            "dea512039d5153586641aa5c8e6041a12eccfff0"
        ],
        [
            "assert (TS d c B A) by (conclude lemma_oppositesideflip).",
            "VernacExtend",
            "643c15815627bb3ab03bafb3e4ff587d9dad42a4"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m l, (PG B m l d /\\ BetS B m c /\\ PG m c e l /\\ BetS d l e /\\ EF A B f g B m l d /\\ EF A c k h m c e l)) by (conclude proposition_47);destruct Tf as [m[l]];spliter.",
            "VernacExtend",
            "1635036d81a4337f044dc7f665585c470bacf976"
        ],
        [
            "assert (Cong A C A c) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "9c9edbcc82c7cbc8246a354848c9bb3ab69a4eb1"
        ],
        [
            "assert (EF A C K H A c k h) by (conclude lemma_squaresequal).",
            "VernacExtend",
            "439ee683ba7e54ede75467f79be4d94da8076262"
        ],
        [
            "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
        ],
        [
            "assert (EF A B F G A B f g) by (conclude lemma_squaresequal).",
            "VernacExtend",
            "66c8b38f4c0718dec5f808a6350542f202ea5fb8"
        ],
        [
            "assert (EF A B F G B m l d) by (conclude axiom_EFtransitive).",
            "VernacExtend",
            "3c5c1bd07ed168226fae0b0cceb71e33f6a1489f"
        ],
        [
            "assert (EF B M L D A B F G) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "724a492e86007fa7d941f29a9e53c143592148d3"
        ],
        [
            "assert (EF B M L D B m l d) by (conclude axiom_EFtransitive).",
            "VernacExtend",
            "1fc2a63f8bd28d6e4b06f3b9ca80b331bd77274b"
        ],
        [
            "assert (EF M C E L A C K H) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "b84d6789d9a7c6f51df46bfeb36042ca0fdf6bd7"
        ],
        [
            "assert (EF M C E L A c k h) by (conclude axiom_EFtransitive).",
            "VernacExtend",
            "196eaa224ec38402631619124459d68db9fb6947"
        ],
        [
            "assert (EF M C E L m c e l) by (conclude axiom_EFtransitive).",
            "VernacExtend",
            "b50f68e27d6c6a773c6b4df659b6abb5068a0cb1"
        ],
        [
            "assert (BetS e l d) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "4ad5ec785300aa026aa19c86cfd7b5e3eda654fc"
        ],
        [
            "assert (Per B c e) by (conclude_def SQ ).",
            "VernacExtend",
            "1c74ca8c8a943b88f6ccbe68bcd9563184d972c3"
        ],
        [
            "assert (neq m c) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
        ],
        [
            "assert (Col B m c) by (conclude_def Col ).",
            "VernacExtend",
            "ab737022b21231b42feeaa16900b552eb1e0cc55"
        ],
        [
            "assert (Col B c m) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "46c92d4e676d0f59b7d8cb68c78e73a96e8fc76b"
        ],
        [
            "assert (Per m c e) by (conclude lemma_collinearright).",
            "VernacExtend",
            "1100474142f9e8dfca35376b7127f8562fb02c4b"
        ],
        [
            "assert (PG c e l m) by (conclude lemma_PGrotate).",
            "VernacExtend",
            "25bfb1e9ac79140c5ceb02cc8a972558a73c27fd"
        ],
        [
            "assert (RE c e l m) by (conclude lemma_PGrectangle).",
            "VernacExtend",
            "5f8249f461b7fcae70401a973ec17a1e740204da"
        ],
        [
            "assert (RE e l m c) by (conclude lemma_rectanglerotate).",
            "VernacExtend",
            "da0b317f3654a48a958631e7b00788eb50ddb78d"
        ],
        [
            "assert (RE l m c e) by (conclude lemma_rectanglerotate).",
            "VernacExtend",
            "dd0ba3d514d55deb942f4b673780ed3d4819cbb8"
        ],
        [
            "assert (RE m c e l) by (conclude lemma_rectanglerotate).",
            "VernacExtend",
            "3cb63fa89d93a7d92fd2e278845b533317164bd8"
        ],
        [
            "assert (EF B C E D B c e d) by (conclude lemma_paste5).",
            "VernacExtend",
            "96c0c624d9259952ee1883481ab0f8d20bf662df"
        ],
        [
            "assert (Cong B C B c) by (conclude proposition_48A).",
            "VernacExtend",
            "8217063c7e0b74bbd48271edd874f1009cad6d2b"
        ],
        [
            "assert (Cong A C A c) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "9c9edbcc82c7cbc8246a354848c9bb3ab69a4eb1"
        ],
        [
            "assert (Triangle A B c) by (conclude_def Triangle ).",
            "VernacExtend",
            "491a75c735b213bcc9b5d91366261de0dd67697b"
        ],
        [
            "assert (CongA B A C B A c) by (apply (proposition_08 A B C A B c);auto).",
            "VernacExtend",
            "845af454a58f776054d715d4dc965b87b4399781"
        ],
        [
            "assert (Per B A C) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "ed20666f80e872a82b28cea10a6679deda4302fc"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_48",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8002a66bdd6f60a99dbf8089a844e1b798b91772"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists R, (BetS B A R /\\ Cong A R A B)) by (conclude lemma_extension);destruct Tf as [R];spliter.",
                        "VernacExtend",
                        "343285d5f58eff8b4987b1200d5bc93824414442"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A R) by (conclude_def Col ).",
                        "VernacExtend",
                        "32b79257a189944cc3cbde89c2b235c9afa4be07"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B R) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c7eefb4b5e9464ce353ec6aaf09a61c364b7a32d"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
                    ]
                },
                {
                    "command": [
                        "assert (neq B R) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e007ddc36df104c5cd37c1a4355e69d12bf3ab5a"
                    ]
                },
                {
                    "command": [
                        "assert (neq R B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "09ab03601e1745dfa369f13e0a69f7650b421d7b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol R B C) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "64268857eefc3a3307155e4c16a54d86a03e8b9d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B R C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "ab556f139a35f9babf55313aaada39801c52eae0"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, (Per B A Q /\\ TS Q B R C)) by (conclude proposition_11B);destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "0c452fb6604bcb71a6c1155ca55c265ee90399cb"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A Q) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "de553d2daff97b6ea713b2eb0f6c6e550c346b0e"
                    ]
                },
                {
                    "command": [
                        "assert (neq A Q) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c7c008594948d841ed2e09325db97068e26330d8"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists c, (Out A Q c /\\ Cong A c A C)) by (conclude lemma_layoff);destruct Tf as [c];spliter.",
                        "VernacExtend",
                        "4273060cb5c1193ad07efa11497d7ba24f944686"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A c) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "7fa0a6d043363102f7536c46034c0f447349e718"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A c) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "9d1514b133ec2524ad98490227db6d9deaf8597d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B c) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "913c00a1dbe16c8bb3995e743bd66ce16de31ac2"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists f g, (SQ A B f g /\\ TS g A B c /\\ PG A B f g)) by (conclude proposition_46);destruct Tf as [f[g]];spliter.",
                        "VernacExtend",
                        "afb19ccb9d79fa66ece113f9b70b8fd48a146b9c"
                    ]
                },
                {
                    "command": [
                        "assert (neq A c) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "6f17dd216872088dadaa650aeb9f4d3836a3959b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A c B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "79becac5004979dc9f9ec3f9fb992e81386bf86a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists k h, (SQ A c k h /\\ TS h A c B /\\ PG A c k h)) by (conclude proposition_46);destruct Tf as [k[h]];spliter.",
                        "VernacExtend",
                        "62715b643e0adab23bd48f1d847dff4e5e711651"
                    ]
                },
                {
                    "command": [
                        "assert (neq B c) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8c2d4c024aa2247abb60bcb7922e42fcee8d8d31"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B c A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "d7f2db9600e1c5c89aca427991fedfb8bc600a79"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists e d, (SQ B c e d /\\ TS d B c A /\\ PG B c e d)) by (conclude proposition_46);destruct Tf as [e[d]];spliter.",
                        "VernacExtend",
                        "b2047c8b30fae148f7b5a66798ff70f0ab9a3e34"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A B c) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "491a75c735b213bcc9b5d91366261de0dd67697b"
                    ]
                },
                {
                    "command": [
                        "assert (TS g B A c) by (conclude lemma_oppositesideflip).",
                        "VernacExtend",
                        "488cd1087d783c8538838e5ff5dd323c6751760b"
                    ]
                },
                {
                    "command": [
                        "assert (TS h c A B) by (conclude lemma_oppositesideflip).",
                        "VernacExtend",
                        "dea512039d5153586641aa5c8e6041a12eccfff0"
                    ]
                },
                {
                    "command": [
                        "assert (TS d c B A) by (conclude lemma_oppositesideflip).",
                        "VernacExtend",
                        "643c15815627bb3ab03bafb3e4ff587d9dad42a4"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m l, (PG B m l d /\\ BetS B m c /\\ PG m c e l /\\ BetS d l e /\\ EF A B f g B m l d /\\ EF A c k h m c e l)) by (conclude proposition_47);destruct Tf as [m[l]];spliter.",
                        "VernacExtend",
                        "1635036d81a4337f044dc7f665585c470bacf976"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A c) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "9c9edbcc82c7cbc8246a354848c9bb3ab69a4eb1"
                    ]
                },
                {
                    "command": [
                        "assert (EF A C K H A c k h) by (conclude lemma_squaresequal).",
                        "VernacExtend",
                        "439ee683ba7e54ede75467f79be4d94da8076262"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
                    ]
                },
                {
                    "command": [
                        "assert (EF A B F G A B f g) by (conclude lemma_squaresequal).",
                        "VernacExtend",
                        "66c8b38f4c0718dec5f808a6350542f202ea5fb8"
                    ]
                },
                {
                    "command": [
                        "assert (EF A B F G B m l d) by (conclude axiom_EFtransitive).",
                        "VernacExtend",
                        "3c5c1bd07ed168226fae0b0cceb71e33f6a1489f"
                    ]
                },
                {
                    "command": [
                        "assert (EF B M L D A B F G) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "724a492e86007fa7d941f29a9e53c143592148d3"
                    ]
                },
                {
                    "command": [
                        "assert (EF B M L D B m l d) by (conclude axiom_EFtransitive).",
                        "VernacExtend",
                        "1fc2a63f8bd28d6e4b06f3b9ca80b331bd77274b"
                    ]
                },
                {
                    "command": [
                        "assert (EF M C E L A C K H) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "b84d6789d9a7c6f51df46bfeb36042ca0fdf6bd7"
                    ]
                },
                {
                    "command": [
                        "assert (EF M C E L A c k h) by (conclude axiom_EFtransitive).",
                        "VernacExtend",
                        "196eaa224ec38402631619124459d68db9fb6947"
                    ]
                },
                {
                    "command": [
                        "assert (EF M C E L m c e l) by (conclude axiom_EFtransitive).",
                        "VernacExtend",
                        "b50f68e27d6c6a773c6b4df659b6abb5068a0cb1"
                    ]
                },
                {
                    "command": [
                        "assert (BetS e l d) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "4ad5ec785300aa026aa19c86cfd7b5e3eda654fc"
                    ]
                },
                {
                    "command": [
                        "assert (Per B c e) by (conclude_def SQ ).",
                        "VernacExtend",
                        "1c74ca8c8a943b88f6ccbe68bcd9563184d972c3"
                    ]
                },
                {
                    "command": [
                        "assert (neq m c) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
                    ]
                },
                {
                    "command": [
                        "assert (Col B m c) by (conclude_def Col ).",
                        "VernacExtend",
                        "ab737022b21231b42feeaa16900b552eb1e0cc55"
                    ]
                },
                {
                    "command": [
                        "assert (Col B c m) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "46c92d4e676d0f59b7d8cb68c78e73a96e8fc76b"
                    ]
                },
                {
                    "command": [
                        "assert (Per m c e) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "1100474142f9e8dfca35376b7127f8562fb02c4b"
                    ]
                },
                {
                    "command": [
                        "assert (PG c e l m) by (conclude lemma_PGrotate).",
                        "VernacExtend",
                        "25bfb1e9ac79140c5ceb02cc8a972558a73c27fd"
                    ]
                },
                {
                    "command": [
                        "assert (RE c e l m) by (conclude lemma_PGrectangle).",
                        "VernacExtend",
                        "5f8249f461b7fcae70401a973ec17a1e740204da"
                    ]
                },
                {
                    "command": [
                        "assert (RE e l m c) by (conclude lemma_rectanglerotate).",
                        "VernacExtend",
                        "da0b317f3654a48a958631e7b00788eb50ddb78d"
                    ]
                },
                {
                    "command": [
                        "assert (RE l m c e) by (conclude lemma_rectanglerotate).",
                        "VernacExtend",
                        "dd0ba3d514d55deb942f4b673780ed3d4819cbb8"
                    ]
                },
                {
                    "command": [
                        "assert (RE m c e l) by (conclude lemma_rectanglerotate).",
                        "VernacExtend",
                        "3cb63fa89d93a7d92fd2e278845b533317164bd8"
                    ]
                },
                {
                    "command": [
                        "assert (EF B C E D B c e d) by (conclude lemma_paste5).",
                        "VernacExtend",
                        "96c0c624d9259952ee1883481ab0f8d20bf662df"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B c) by (conclude proposition_48A).",
                        "VernacExtend",
                        "8217063c7e0b74bbd48271edd874f1009cad6d2b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A c) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "9c9edbcc82c7cbc8246a354848c9bb3ab69a4eb1"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A B c) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "491a75c735b213bcc9b5d91366261de0dd67697b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C B A c) by (apply (proposition_08 A B C A B c);auto).",
                        "VernacExtend",
                        "845af454a58f776054d715d4dc965b87b4399781"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A C) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "ed20666f80e872a82b28cea10a6679deda4302fc"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}