{
    "filename": "Elements/OriginalProofs/lemma_TTtransitive.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthantransitive.",
            "VernacRequire",
            "d67e4b124216ea0a8df8ac53a0f2614f6793259f"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_TTtransitive : forall A B C D E F G H P Q R S, TT A B C D E F G H -> TT E F G H P Q R S -> TT A B C D P Q R S.",
            "VernacStartTheoremProof",
            "06eb1fa8244eabaa13d1062a99872144a0d4ee25"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (BetS E F K /\\ Cong F K G H /\\ TG A B C D E K)) by (conclude_def TT );destruct Tf as [K];spliter.",
            "VernacExtend",
            "0ea5c60aaa0ca39cb16752f18b8c409576ab6bab"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists J, (BetS A B J /\\ Cong B J C D /\\ Lt E K A J)) by (conclude_def TG );destruct Tf as [J];spliter.",
            "VernacExtend",
            "327a8842f180621c143511cc348ee7e5866833d7"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists L, (BetS P Q L /\\ Cong Q L R S /\\ TG E F G H P L)) by (conclude_def TT );destruct Tf as [L];spliter.",
            "VernacExtend",
            "299cffdca5886e1271fc4ebc4f1b559078fc01b4"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS E F M /\\ Cong F M G H /\\ Lt P L E M)) by (conclude_def TG );destruct Tf as [M];spliter.",
            "VernacExtend",
            "dbcec6442054f7bd4973e4ab4e552f3c40a0ab4b"
        ],
        [
            "assert (eq K K) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "89ee1e712221f97ec5067c4595ba2f1f13d3c25c"
        ],
        [
            "assert (neq F K) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "d0d9adba6bfb674c57153ebe6c79acd20215f358"
        ],
        [
            "assert (neq F M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "fb8ff667c1306f35416fd97d1c0c4299b707d732"
        ],
        [
            "assert (Out F K M) by (conclude_def Out ).",
            "VernacExtend",
            "15a6f09e650849323e520ed35a5c4cc570701f4d"
        ],
        [
            "assert (Out F K K) by (conclude lemma_ray4).",
            "VernacExtend",
            "ed7d7a456d7cd70754410f0c1dbe7f189d7e9fc2"
        ],
        [
            "assert (Cong G H F M) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "47211735cddc9be6c4696900f9b71d7970085a9c"
        ],
        [
            "assert (Cong F K F M) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "393ab95174a089c208423f4dc1565252a2fbeb81"
        ],
        [
            "assert (eq K M) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "bd1a303c231e4a3f2a1d559707553351fffffce5"
        ],
        [
            "assert (Lt P L E K) by (conclude cn_equalitysub).",
            "VernacExtend",
            "0985daeaf09d03e837096831a415536ddcb0b371"
        ],
        [
            "assert (Lt P L A J) by (conclude lemma_lessthantransitive).",
            "VernacExtend",
            "eeffe9fecb691a9ee4bd9a61ad0f65ddd571a87c"
        ],
        [
            "assert (TG A B C D P L) by (conclude_def TG ).",
            "VernacExtend",
            "c93b6d02bcdae59a41dc683b34f3958b2aa75fc8"
        ],
        [
            "assert (TT A B C D P Q R S) by (conclude_def TT ).",
            "VernacExtend",
            "eb8ce7475da83e64cd76a748d305a078760fbc58"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_TTtransitive",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (BetS E F K /\\ Cong F K G H /\\ TG A B C D E K)) by (conclude_def TT );destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "0ea5c60aaa0ca39cb16752f18b8c409576ab6bab"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists J, (BetS A B J /\\ Cong B J C D /\\ Lt E K A J)) by (conclude_def TG );destruct Tf as [J];spliter.",
                        "VernacExtend",
                        "327a8842f180621c143511cc348ee7e5866833d7"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists L, (BetS P Q L /\\ Cong Q L R S /\\ TG E F G H P L)) by (conclude_def TT );destruct Tf as [L];spliter.",
                        "VernacExtend",
                        "299cffdca5886e1271fc4ebc4f1b559078fc01b4"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS E F M /\\ Cong F M G H /\\ Lt P L E M)) by (conclude_def TG );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "dbcec6442054f7bd4973e4ab4e552f3c40a0ab4b"
                    ]
                },
                {
                    "command": [
                        "assert (eq K K) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "89ee1e712221f97ec5067c4595ba2f1f13d3c25c"
                    ]
                },
                {
                    "command": [
                        "assert (neq F K) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "d0d9adba6bfb674c57153ebe6c79acd20215f358"
                    ]
                },
                {
                    "command": [
                        "assert (neq F M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "fb8ff667c1306f35416fd97d1c0c4299b707d732"
                    ]
                },
                {
                    "command": [
                        "assert (Out F K M) by (conclude_def Out ).",
                        "VernacExtend",
                        "15a6f09e650849323e520ed35a5c4cc570701f4d"
                    ]
                },
                {
                    "command": [
                        "assert (Out F K K) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "ed7d7a456d7cd70754410f0c1dbe7f189d7e9fc2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G H F M) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "47211735cddc9be6c4696900f9b71d7970085a9c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F K F M) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "393ab95174a089c208423f4dc1565252a2fbeb81"
                    ]
                },
                {
                    "command": [
                        "assert (eq K M) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "bd1a303c231e4a3f2a1d559707553351fffffce5"
                    ]
                },
                {
                    "command": [
                        "assert (Lt P L E K) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "0985daeaf09d03e837096831a415536ddcb0b371"
                    ]
                },
                {
                    "command": [
                        "assert (Lt P L A J) by (conclude lemma_lessthantransitive).",
                        "VernacExtend",
                        "eeffe9fecb691a9ee4bd9a61ad0f65ddd571a87c"
                    ]
                },
                {
                    "command": [
                        "assert (TG A B C D P L) by (conclude_def TG ).",
                        "VernacExtend",
                        "c93b6d02bcdae59a41dc683b34f3958b2aa75fc8"
                    ]
                },
                {
                    "command": [
                        "assert (TT A B C D P Q R S) by (conclude_def TT ).",
                        "VernacExtend",
                        "eb8ce7475da83e64cd76a748d305a078760fbc58"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}