{
    "filename": "Elements/OriginalProofs/proposition_44.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_42B.",
            "VernacRequire",
            "19d8834d94bc3f9ba83a3b85ee280483b22f7f70"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_44A.",
            "VernacRequire",
            "5b66dc96007279b236ed55f3dc635518d9d3d75e"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_44 : forall A B D J N R a b c, Triangle a b c -> nCol J D N -> nCol A B R -> exists X Y Z, PG A B X Y /\\ CongA A B X J D N /\\ EF a b Z c A B X Y /\\ Midpoint b Z c /\\ TS X A B R.",
            "VernacStartTheoremProof",
            "c420f3b4a0d936bd715de2a2f0b70edd6112e841"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (nCol a b c) by (conclude_def Triangle ).",
            "VernacExtend",
            "a9cf1fc5574f616243a1948be9a2ffadf7ab3e9b"
        ],
        [
            "assert (neq b c) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c5acfb5ce0ac187151f826441e75ba7914e22295"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (BetS b m c /\\ Cong m b m c)) by (conclude proposition_10);destruct Tf as [m];spliter.",
            "VernacExtend",
            "39c9e89f2d413f4de36e1bfd80c2ba5ccc04d59a"
        ],
        [
            "assert (Cong b m m c) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "16f210a147772b6176ed9e42c669877e9bf16aa5"
        ],
        [
            "assert (Midpoint b m c) by (conclude_def Midpoint ).",
            "VernacExtend",
            "0c047cbcaaaaec299a048fa90746f305c7e32ce2"
        ],
        [
            "assert (neq m c) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong B E m c)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "d7140b8b0d2ce7d064818d9c31ad60f11f33d1f1"
        ],
        [
            "assert (neq B E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "33d569a7c9181367345905ba23a4d65f23db0a03"
        ],
        [
            "assert (Col A B E) by (conclude_def Col ).",
            "VernacExtend",
            "cb1e4569cbb7ad4caf776e0a6f60f35b634e0870"
        ],
        [
            "assert (Col B A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col B A B) by (conclude_def Col ).",
            "VernacExtend",
            "8917a438ccbb3a05fe88bc6f24f5f23cadd7194f"
        ],
        [
            "assert (nCol B A R) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "b24e8c18090fe8b4f19783d871a5ecce6c557b7f"
        ],
        [
            "assert (nCol B E R) by (conclude lemma_NChelper).",
            "VernacExtend",
            "ad7b9402da127de5137893a4b785af98c3a3da90"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists g e, (Out B E e /\\ CongA g B e J D N /\\ OS g R B E)) by (conclude proposition_23C);destruct Tf as [g[e]];spliter.",
            "VernacExtend",
            "d59c1e64a2aaa0ed3e475b4c458ce5da3c264cf6"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (BetS B A P /\\ Cong A P B A)) by (conclude lemma_extension);destruct Tf as [P];spliter.",
            "VernacExtend",
            "4d9bc09b0774f4a843b0ea866ba61bd2e9398f24"
        ],
        [
            "assert (neq B E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "33d569a7c9181367345905ba23a4d65f23db0a03"
        ],
        [
            "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "fdcff29c293eec992662c7fb2d6c669edf09d93d"
        ],
        [
            "assert (neq b m) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "7f01add6e0ce3428b306d3dff7dbf3c82e011757"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, (BetS E B Q /\\ Cong B Q b m)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
            "VernacExtend",
            "a14a02fdb421440ac851d5453e05287648be4bf4"
        ],
        [
            "assert (Cong b m m c) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "16f210a147772b6176ed9e42c669877e9bf16aa5"
        ],
        [
            "assert (Cong B Q m c) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "aff450c1fc3a2019265613a1972fad0e7381df9d"
        ],
        [
            "assert (Cong m c B E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b77ef4c62275ae6f5088c401841051a9524313d0"
        ],
        [
            "assert (Cong B Q B E) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "28acd309c0f723f1400706e67b0090766057177b"
        ],
        [
            "assert (BetS Q B E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "8e0dea19b0f4b7ce03be1df772498eb2060d11ee"
        ],
        [
            "assert (Cong Q B B E) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "f6aaac36a48a4a7d47e96971b1f835438c194878"
        ],
        [
            "assert (Midpoint Q B E) by (conclude_def Midpoint ).",
            "VernacExtend",
            "87aa2a5e61cfdcf538f894188ec800bf577d24ab"
        ],
        [
            "assert (nCol B A R) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "b24e8c18090fe8b4f19783d871a5ecce6c557b7f"
        ],
        [
            "assert (Col A B E) by (conclude_def Col ).",
            "VernacExtend",
            "cb1e4569cbb7ad4caf776e0a6f60f35b634e0870"
        ],
        [
            "assert (Col B A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
        ],
        [
            "assert (neq B E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "33d569a7c9181367345905ba23a4d65f23db0a03"
        ],
        [
            "assert (nCol B E R) by (conclude lemma_NChelper).",
            "VernacExtend",
            "ad7b9402da127de5137893a4b785af98c3a3da90"
        ],
        [
            "assert (nCol R B E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7b1452c86b32859b064e29e6520f35e96f65b868"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G F, (PG G B E F /\\ EF a b m c G B E F /\\ CongA E B G J D N /\\ OS R G B E)) by (conclude proposition_42B);destruct Tf as [G[F]];spliter.",
            "VernacExtend",
            "e34e2e329ec61a90b55908ccdc4b09aa42dff2d1"
        ],
        [
            "assert (PG B E F G) by (conclude lemma_PGrotate).",
            "VernacExtend",
            "de53ec8bfebcf3e593695bf925ea3974393d0bfa"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M L, (PG A B M L /\\ CongA A B M J D N /\\ EF B E F G L M B A /\\ BetS G B M)) by (conclude proposition_44A);destruct Tf as [M[L]];spliter.",
            "VernacExtend",
            "0a428eb4c845d0c43ecb708b126e49672ad2bd6e"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col A B B) by (conclude_def Col ).",
            "VernacExtend",
            "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
        ],
        [
            "assert (Par G B E F) by (conclude_def PG ).",
            "VernacExtend",
            "baeb9dd1051dab9e4e4db4259a5e622dfa9cdd6f"
        ],
        [
            "assert (nCol G B E) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "67419d1adf842215d9ef7035ef4e433889ee3b08"
        ],
        [
            "assert (nCol E B G) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "5c2161d6a733f70001080615d658239e8ac612b6"
        ],
        [
            "assert (Col E B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "4c5e1f93c7fe9947afff50c1ded8f4ffe0ea9f55"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col E B B) by (conclude_def Col ).",
            "VernacExtend",
            "56c786741aa7e98ffe5eec61f455633580850771"
        ],
        [
            "assert (nCol A B G) by (conclude lemma_NChelper).",
            "VernacExtend",
            "37db0d53353780f031693ff20d2e1c9f49ab13ae"
        ],
        [
            "assert (TS G A B M) by (conclude_def TS ).",
            "VernacExtend",
            "159ad4160d835dbe32df07ed7e5064f2854f556a"
        ],
        [
            "assert (EF a b m c B E F G) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "b8cc6c8d17b8f62879b40bb02d733c3b0d453d8c"
        ],
        [
            "assert (EF a b m c L M B A) by (conclude axiom_EFtransitive).",
            "VernacExtend",
            "5c6014d4c9c3f06f3782ecdba79a632974867795"
        ],
        [
            "assert (EF a b m c A B M L) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "20073c7b2bff359444d359582f6288606f77341f"
        ],
        [
            "assert (Col B E A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "002b0fa977c05d5a6beb6123cfa6b54a2dffd052"
        ],
        [
            "assert (OS R G B A) by (conclude lemma_samesidecollinear).",
            "VernacExtend",
            "0c0a7bed4d6f972a7bf91c05d2e10b2b4150df7d"
        ],
        [
            "assert (OS R G A B) by (conclude lemma_samesideflip).",
            "VernacExtend",
            "279c9d284903d38b1e01c814028091c55c460e05"
        ],
        [
            "assert (TS R A B M) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "0d6512054ff1e779c3347b13a270c7e643d0d13e"
        ],
        [
            "assert (TS M A B R) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "efc21ae4ff42cb83fdbf62ec732d39be00b3525f"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_44",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a b c) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "a9cf1fc5574f616243a1948be9a2ffadf7ab3e9b"
                    ]
                },
                {
                    "command": [
                        "assert (neq b c) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c5acfb5ce0ac187151f826441e75ba7914e22295"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (BetS b m c /\\ Cong m b m c)) by (conclude proposition_10);destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "39c9e89f2d413f4de36e1bfd80c2ba5ccc04d59a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b m m c) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "16f210a147772b6176ed9e42c669877e9bf16aa5"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint b m c) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "0c047cbcaaaaec299a048fa90746f305c7e32ce2"
                    ]
                },
                {
                    "command": [
                        "assert (neq m c) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong B E m c)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "d7140b8b0d2ce7d064818d9c31ad60f11f33d1f1"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "33d569a7c9181367345905ba23a4d65f23db0a03"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B E) by (conclude_def Col ).",
                        "VernacExtend",
                        "cb1e4569cbb7ad4caf776e0a6f60f35b634e0870"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A B) by (conclude_def Col ).",
                        "VernacExtend",
                        "8917a438ccbb3a05fe88bc6f24f5f23cadd7194f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A R) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "b24e8c18090fe8b4f19783d871a5ecce6c557b7f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B E R) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "ad7b9402da127de5137893a4b785af98c3a3da90"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists g e, (Out B E e /\\ CongA g B e J D N /\\ OS g R B E)) by (conclude proposition_23C);destruct Tf as [g[e]];spliter.",
                        "VernacExtend",
                        "d59c1e64a2aaa0ed3e475b4c458ce5da3c264cf6"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (BetS B A P /\\ Cong A P B A)) by (conclude lemma_extension);destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "4d9bc09b0774f4a843b0ea866ba61bd2e9398f24"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "33d569a7c9181367345905ba23a4d65f23db0a03"
                    ]
                },
                {
                    "command": [
                        "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "fdcff29c293eec992662c7fb2d6c669edf09d93d"
                    ]
                },
                {
                    "command": [
                        "assert (neq b m) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "7f01add6e0ce3428b306d3dff7dbf3c82e011757"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, (BetS E B Q /\\ Cong B Q b m)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "a14a02fdb421440ac851d5453e05287648be4bf4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b m m c) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "16f210a147772b6176ed9e42c669877e9bf16aa5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B Q m c) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "aff450c1fc3a2019265613a1972fad0e7381df9d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong m c B E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b77ef4c62275ae6f5088c401841051a9524313d0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B Q B E) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "28acd309c0f723f1400706e67b0090766057177b"
                    ]
                },
                {
                    "command": [
                        "assert (BetS Q B E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "8e0dea19b0f4b7ce03be1df772498eb2060d11ee"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q B B E) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "f6aaac36a48a4a7d47e96971b1f835438c194878"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint Q B E) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "87aa2a5e61cfdcf538f894188ec800bf577d24ab"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A R) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "b24e8c18090fe8b4f19783d871a5ecce6c557b7f"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B E) by (conclude_def Col ).",
                        "VernacExtend",
                        "cb1e4569cbb7ad4caf776e0a6f60f35b634e0870"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "33d569a7c9181367345905ba23a4d65f23db0a03"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B E R) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "ad7b9402da127de5137893a4b785af98c3a3da90"
                    ]
                },
                {
                    "command": [
                        "assert (nCol R B E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7b1452c86b32859b064e29e6520f35e96f65b868"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G F, (PG G B E F /\\ EF a b m c G B E F /\\ CongA E B G J D N /\\ OS R G B E)) by (conclude proposition_42B);destruct Tf as [G[F]];spliter.",
                        "VernacExtend",
                        "e34e2e329ec61a90b55908ccdc4b09aa42dff2d1"
                    ]
                },
                {
                    "command": [
                        "assert (PG B E F G) by (conclude lemma_PGrotate).",
                        "VernacExtend",
                        "de53ec8bfebcf3e593695bf925ea3974393d0bfa"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M L, (PG A B M L /\\ CongA A B M J D N /\\ EF B E F G L M B A /\\ BetS G B M)) by (conclude proposition_44A);destruct Tf as [M[L]];spliter.",
                        "VernacExtend",
                        "0a428eb4c845d0c43ecb708b126e49672ad2bd6e"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
                    ]
                },
                {
                    "command": [
                        "assert (Par G B E F) by (conclude_def PG ).",
                        "VernacExtend",
                        "baeb9dd1051dab9e4e4db4259a5e622dfa9cdd6f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G B E) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "67419d1adf842215d9ef7035ef4e433889ee3b08"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E B G) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "5c2161d6a733f70001080615d658239e8ac612b6"
                    ]
                },
                {
                    "command": [
                        "assert (Col E B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "4c5e1f93c7fe9947afff50c1ded8f4ffe0ea9f55"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col E B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "56c786741aa7e98ffe5eec61f455633580850771"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B G) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "37db0d53353780f031693ff20d2e1c9f49ab13ae"
                    ]
                },
                {
                    "command": [
                        "assert (TS G A B M) by (conclude_def TS ).",
                        "VernacExtend",
                        "159ad4160d835dbe32df07ed7e5064f2854f556a"
                    ]
                },
                {
                    "command": [
                        "assert (EF a b m c B E F G) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "b8cc6c8d17b8f62879b40bb02d733c3b0d453d8c"
                    ]
                },
                {
                    "command": [
                        "assert (EF a b m c L M B A) by (conclude axiom_EFtransitive).",
                        "VernacExtend",
                        "5c6014d4c9c3f06f3782ecdba79a632974867795"
                    ]
                },
                {
                    "command": [
                        "assert (EF a b m c A B M L) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "20073c7b2bff359444d359582f6288606f77341f"
                    ]
                },
                {
                    "command": [
                        "assert (Col B E A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "002b0fa977c05d5a6beb6123cfa6b54a2dffd052"
                    ]
                },
                {
                    "command": [
                        "assert (OS R G B A) by (conclude lemma_samesidecollinear).",
                        "VernacExtend",
                        "0c0a7bed4d6f972a7bf91c05d2e10b2b4150df7d"
                    ]
                },
                {
                    "command": [
                        "assert (OS R G A B) by (conclude lemma_samesideflip).",
                        "VernacExtend",
                        "279c9d284903d38b1e01c814028091c55c460e05"
                    ]
                },
                {
                    "command": [
                        "assert (TS R A B M) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "0d6512054ff1e779c3347b13a270c7e643d0d13e"
                    ]
                },
                {
                    "command": [
                        "assert (TS M A B R) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "efc21ae4ff42cb83fdbf62ec732d39be00b3525f"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}