{
    "filename": "Elements/OriginalProofs/proposition_47B.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_47A.",
            "VernacRequire",
            "a1e59ae08597ba77f2fb91168a28e86f5deefb2e"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_angleaddition.",
            "VernacRequire",
            "e4da070dcee6e9fa80d0bccadf2c35f0d93c8355"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_41.",
            "VernacRequire",
            "d108d858ea96522bd1f6d3a3a774390b65a7f8f3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_47B : forall A B C D E F G, Triangle A B C -> Per B A C -> SQ A B F G -> TS G B A C -> SQ B C E D -> TS D C B A -> exists X Y, PG B X Y D /\\ BetS B X C /\\ PG X C E Y /\\ BetS D Y E /\\ BetS Y X A /\\ Per D Y A /\\ EF A B F G B X Y D.",
            "VernacStartTheoremProof",
            "b9771371c324b35a665e129bf026741858289685"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M L, (PG B M L D /\\ BetS B M C /\\ PG M C E L /\\ BetS D L E /\\ BetS L M A /\\ Per D L A)) by (conclude proposition_47A);destruct Tf as [M[L]];spliter.",
            "VernacExtend",
            "54772ca3fd48b42f8520b504f050f8dc3e743950"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists N, (BetS D N A /\\ Col C B N /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [N];spliter.",
            "VernacExtend",
            "63f5457194ab725afccdd8c39039024a9ec78483"
        ],
        [
            "assert (Per G A B) by (conclude_def SQ ).",
            "VernacExtend",
            "bd504fa0e60071f2fe257f13839ad36c08366261"
        ],
        [
            "assert (BetS G A C) by (conclude lemma_righttogether).",
            "VernacExtend",
            "14d48d402ea6af7bbd5783439898e95b71242bcf"
        ],
        [
            "assert (Per A B F) by (conclude_def SQ ).",
            "VernacExtend",
            "079903d8622a90d408f30994c0a2bda12554eae9"
        ],
        [
            "assert (Per F B A) by (conclude lemma_8_2).",
            "VernacExtend",
            "dc83514d7f57ffc1617047c2da4f680a72777c49"
        ],
        [
            "assert (Per D B C) by (conclude_def SQ ).",
            "VernacExtend",
            "cb740d023fccd2687e859812a64167810710aa6a"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (PG A B F G) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "e6a8e5e1b1acd8a724941014a0054e293fa69a5e"
        ],
        [
            "assert (Par A B F G) by (conclude_def PG ).",
            "VernacExtend",
            "32699145e1373b41071222438488aa1c7c7d2ec6"
        ],
        [
            "assert (Par A B G F) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "79289896230756fe29d07105b23882a6b06e1425"
        ],
        [
            "assert (TP A B G F) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "e17dcbf3b5d1399cca76bcecbff562f75fc009e0"
        ],
        [
            "assert (OS G F A B) by (conclude_def TP ).",
            "VernacExtend",
            "5c5d61e5e725c1d3aa1c4c68dc4614938e792406"
        ],
        [
            "assert (OS F G A B) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "1db50f10fa46b65803aa074ea8a1e363c4a540cf"
        ],
        [
            "assert (TS G A B C) by (conclude lemma_oppositesideflip).",
            "VernacExtend",
            "3876ee7f2c7579dc3733235b7bc3289350fd3d65"
        ],
        [
            "assert (TS F A B C) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "564870fc8f04ae429c76d3eebb7a26b99bc26b14"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists a, (BetS F a C /\\ Col A B a /\\ nCol A B F)) by (conclude_def TS );destruct Tf as [a];spliter.",
            "VernacExtend",
            "a89361a86495c017e3573dec89c80f2da2d0b5c1"
        ],
        [
            "assert (Col B A a) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7ee394b41c41a190aadb38570a23d7d342b681c8"
        ],
        [
            "assert (Par A G B F) by (conclude_def PG ).",
            "VernacExtend",
            "6e1c7bcf19a679c33a556ea47b7ef9f9c4ecf0e5"
        ],
        [
            "assert (Par A G F B) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "d659e3ddaee299c23a308f74f2951e4a98fee539"
        ],
        [
            "assert (Col G A C) by (conclude_def Col ).",
            "VernacExtend",
            "52adff8cab02e01fb70aa2b9e278bc3a521bd2df"
        ],
        [
            "assert (Col A G C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6c06a2dc4a7f9933a0c813815e74e9a6dd179fd5"
        ],
        [
            "assert (neq G C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
        ],
        [
            "assert (neq C G) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "65eb5aeb5fb5f688314a130b770611d49f86d4e7"
        ],
        [
            "assert (Par F B A G) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "39f9319c10d3c01384ac9d774a25e5dc8f5edde4"
        ],
        [
            "assert (Par F B C G) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "3202c035792cca772f49196a2c397fca6b663293"
        ],
        [
            "assert (Par F B G C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "1bfce844d89fa457515067197b5b12072c11603d"
        ],
        [
            "assert (~ Meet F B G C) by (conclude_def Par ).",
            "VernacExtend",
            "05db01ee4b205038b425bf1365401c72d0b943fd"
        ],
        [
            "assert (neq A C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8002a66bdd6f60a99dbf8089a844e1b798b91772"
        ],
        [
            "assert (nCol A B F) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "90c516151fd13ccc110840b63ec1f261e0645933"
        ],
        [
            "assert (neq F A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "b0add413e922b89a45f13bb4a1525c0a406564f1"
        ],
        [
            "assert (neq F B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "87d237b490bf4861bc957016593d3ea866c3c8e1"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col F B B) by (conclude_def Col ).",
            "VernacExtend",
            "d1fa165f6d5caa7d1118d3fac3c13d50c096650e"
        ],
        [
            "assert (BetS B a A) by (conclude lemma_collinearbetween).",
            "VernacExtend",
            "93e7a77f8a296dedc3d55244ef05be9affcc9b60"
        ],
        [
            "assert (neq B a) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "eafe043552e3f09b4427cb547156a813bd0eabe0"
        ],
        [
            "assert (Out B a A) by (conclude lemma_ray4).",
            "VernacExtend",
            "ee77ac142aecb9845761fdcbb5c4b789cbbdeedd"
        ],
        [
            "assert (neq B F) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "01e5044f21fc1e35a75b7c5caf8f6eab20c61552"
        ],
        [
            "assert (eq F F) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
        ],
        [
            "assert (Out B F F) by (conclude lemma_ray4).",
            "VernacExtend",
            "a3fdf4cd6853cccd57f607fa882e728270b367cf"
        ],
        [
            "assert (nCol A B F) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "90c516151fd13ccc110840b63ec1f261e0645933"
        ],
        [
            "assert (nCol F B A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "cd99fe431a7272c8441898162e368546d79d8e20"
        ],
        [
            "assert (CongA F B A F B A) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "2f1337ec317a9429884ca3fb8b01e20fbadef538"
        ],
        [
            "assert (Out B A a) by (conclude lemma_ray5).",
            "VernacExtend",
            "80cce1c0edf6985937b4a592e1adbc647e334909"
        ],
        [
            "assert (CongA F B A F B a) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "eb72f4d5e44c3f345c987ab781eff38d7e6c933b"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "aded022177916f7e4435a874df64d10bc8cdea41"
        ],
        [
            "assert (CongA A B C a B C) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "f23c7cd134676bf8402b62f35f4f5619533cd1a0"
        ],
        [
            "assert (SumA F B A A B C F B C) by (conclude_def SumA ).",
            "VernacExtend",
            "bf9c93b05640bfb0738c6c9fc287e659cd351989"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists c, (BetS D c A /\\ Col C B c /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [c];spliter.",
            "VernacExtend",
            "c05d3a9a9211065979ca75e84089f3181e7d5724"
        ],
        [
            "assert (PG B C E D) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "6e85b6a042d46999eb57f3d44a973dfb2b3b3ea8"
        ],
        [
            "assert (Par B D C E) by (conclude_def PG ).",
            "VernacExtend",
            "0492126efec3f51f3bd2a2e6c35e614cf4fb6c2f"
        ],
        [
            "assert (Par C E B D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "1940a6ab43fb7f4581717f8c8e60ec6db5602df0"
        ],
        [
            "assert (Par C E D B) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "7b229afc0529a7f3e86033cb75b855f41d3c6783"
        ],
        [
            "assert (Col B C c) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "cb3716d3cad23550efce376dadc52d85ccfaaa8e"
        ],
        [
            "assert (Col B M C) by (conclude_def Col ).",
            "VernacExtend",
            "48d3455391aa6042e4c0824a684611b5af7c8a81"
        ],
        [
            "assert (Col C B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c4e234e367413ef16013499457a5aa51ac86ab40"
        ],
        [
            "assert (Col C B c) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "353e1b9d9d6ea0770475d82407b9dbc9a990533d"
        ],
        [
            "assert (neq C B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "4166f0c0280dc7504e496fe594c5a787d05a54da"
        ],
        [
            "assert (Col B M c) by (conclude lemma_collinear4).",
            "VernacExtend",
            "43fbdfbe77171acce6534c9461f2b7fc464ce5c7"
        ],
        [
            "assert (Par B D M L) by (conclude_def PG ).",
            "VernacExtend",
            "aee88383858a45924fc56e448222b71d607ff501"
        ],
        [
            "assert (Col L M A) by (conclude_def Col ).",
            "VernacExtend",
            "416f8b2ed15af42f48f420e944ea4fef057369fa"
        ],
        [
            "assert (Col M L A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3643cb2d7bbe49b04d0e851da53d376ffbaf29ca"
        ],
        [
            "assert (neq L A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "0a7f114577e6a9642dbdd0735c928ea5506eceb5"
        ],
        [
            "assert (neq A L) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "a07f9d728a1a00b7208bf0f44e97f60f564a9063"
        ],
        [
            "assert (Par B D A L) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "2c86f24392de18c433cbf50649b6ea63b69140c5"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Par D B L A) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "ab246860cf8f8d7cfc0adf42a5f5363964f70668"
        ],
        [
            "assert (~ Meet D B L A) by (conclude_def Par ).",
            "VernacExtend",
            "c205e2bf64e1abfc55487a4eb380a40b8ee8739d"
        ],
        [
            "assert (nCol B D L) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "b87647e13cd8a404ea374ddbaa111f5f308b3457"
        ],
        [
            "assert (neq D B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "278d4cf17c0b7243f32819d93ffcba6493b04968"
        ],
        [
            "assert (neq M A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "0ac3d268a02620b358eeae7d01bb41b11f65f1b4"
        ],
        [
            "assert (neq L M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "8cbfbb597291172ccd6e03aec09f99725e271ff0"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Col D B B) by (conclude_def Col ).",
            "VernacExtend",
            "4ae50054336f83aea8911d0c88160933c1cfc984"
        ],
        [
            "assert (BetS B c M) by (conclude lemma_collinearbetween).",
            "VernacExtend",
            "4f053c324bf7827d4188047fbc79a798fb3a2b56"
        ],
        [
            "assert (BetS B c C) by (conclude lemma_3_6b).",
            "VernacExtend",
            "ea5aa793e296c0ec6d5df56939e28edc9e956f1e"
        ],
        [
            "assert (nCol D B A) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "cadd6abc19b6fd3bdd978d6482051b67e128a0f0"
        ],
        [
            "assert (~ eq B c).",
            "VernacExtend",
            "81aec05bcd9026026fffb5261c3f3ec226f348f1"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col D B c) by (conclude_def Col ).",
            "VernacExtend",
            "d165715c516260cfccf2932675640a1a8e81196f"
        ],
        [
            "assert (Col D c A) by (conclude_def Col ).",
            "VernacExtend",
            "88468a6d6e1ad48d8961350f3a29df876dbb2a75"
        ],
        [
            "assert (Col c D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "abc4dbc72a4d01b0fa5147132999ce69fa456391"
        ],
        [
            "assert (Col c D A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f52a929e48b449b0d16f2778db843ba436e2d4a2"
        ],
        [
            "assert (neq D c) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "c7e668c32c98c4cecfafa7227fea1a27b2e89950"
        ],
        [
            "assert (neq c D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "97205d2273f471306b7e4b8311f22121708eaf5b"
        ],
        [
            "assert (Col D B A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "762555a1328860cc0e23c923c12df51a108cb48a"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Out B c C) by (conclude lemma_ray4).",
            "VernacExtend",
            "cf255430eb4cf8af7263e5636a28ac83f1e7031c"
        ],
        [
            "assert (Out B C c) by (conclude lemma_ray5).",
            "VernacExtend",
            "8708937943ab648e81287739ab4d1f40326de725"
        ],
        [
            "assert (nCol C B A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "a4d3eddbdbf0e243199e65bd2fb15e7f1447fc66"
        ],
        [
            "assert (CongA C B A C B A) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "4d0c18eb259db8bae40b878408e3ccb4ca5ad068"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (neq B A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "f05572d51181c9202443ce99ec9c621f00191cb7"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (CongA C B A c B A) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "6aff259e58eefdc458ff57e88367b70ca894934d"
        ],
        [
            "assert (nCol C D B) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "d21a8e551d66b603307f0b95911b88c7c036d012"
        ],
        [
            "assert (nCol D B C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "675be29ea58b035f2007d2984607ba05b4ace55e"
        ],
        [
            "assert (CongA D B C D B C) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "3009bcd48909bd3492c9f28276e8faeef06578f6"
        ],
        [
            "assert (neq B D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "61403d246c7e61a1749f292f3789528cd1ca8507"
        ],
        [
            "assert (Out B D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "9dcb0def0987bcfefce142df69b06d620db93897"
        ],
        [
            "assert (CongA D B C D B c) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "ed1cc61c87904f613445fa9ecf38df57c97b9879"
        ],
        [
            "assert (SumA D B C C B A D B A) by (conclude_def SumA ).",
            "VernacExtend",
            "1b1ba47264bf4fa2e6bdff35e27bcb163377c2bb"
        ],
        [
            "assert (CongA F B A D B C) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "ba5f8431ec0a119a3ff442b198d04ec40168fb41"
        ],
        [
            "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "adabb930dfa462438b4c67f245952c72a34fba3e"
        ],
        [
            "assert (CongA F B C D B A) by (conclude lemma_angleaddition).",
            "VernacExtend",
            "4c5f7f68b9719e6bdf15473a02941b3400264290"
        ],
        [
            "assert (CongA D B A F B C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "90a0cd24056dac65bbac6d0f6a21a4c07fdf69a1"
        ],
        [
            "assert (~ Col C B F).",
            "VernacExtend",
            "561dd5e1fc379b0bb8a53f5f3f6d75c21c1f5e06"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col F B C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b93eb891fe50686fa78429a4baf0bb42a710016a"
        ],
        [
            "assert (Per C B A) by (conclude lemma_collinearright).",
            "VernacExtend",
            "4bdcbc7643d85a1a303278f845f41d8937c3b782"
        ],
        [
            "assert (~ Per C B A) by (conclude lemma_8_7).",
            "VernacExtend",
            "d3f317b5f6c89b949351655ee3e8b20289d76aa7"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (nCol F B C) by (assert (nCol C B F) by auto;forward_using lemma_NCorder).",
            "VernacExtend",
            "62edf46cb61fcbaf579ba583431f0bb45c77f134"
        ],
        [
            "assert (CongA F B C C B F) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "3bae01c12ac41f766e41b14f50a19895d4ee3bee"
        ],
        [
            "assert (CongA D B A C B F) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "5508834ba41edba9b254af51ea75f999f57f2d9f"
        ],
        [
            "assert (Cong A B B F) by (conclude_def SQ ).",
            "VernacExtend",
            "6f4d6f5f19b39e555b04dd07eb0c5c9c1f236c08"
        ],
        [
            "assert (Cong A B F B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2a3c1e2024a156a656388affea258238c142d1c0"
        ],
        [
            "assert (Cong F B A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "7129df95cc134512d4cb6435a1276b6d2fc22662"
        ],
        [
            "assert (Cong B F B A) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "bb17c6202c332acd6ed63a6dab0f7d320407ecc2"
        ],
        [
            "assert (Cong B A B F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b7df9c533296f405dc96f03ec85006729744b3cb"
        ],
        [
            "assert (Cong B C D B) by (conclude_def SQ ).",
            "VernacExtend",
            "975b0216196a48ceb16de602f075f7515df921b6"
        ],
        [
            "assert (Cong D B B C) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "8161585086fb8b1549c0f63c5e2225f4c3abdd20"
        ],
        [
            "assert (Cong B D B C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "d2fc5f585ffa48ce945cd8d99e4242795f038718"
        ],
        [
            "assert ((Cong D A C F /\\ CongA B D A B C F /\\ CongA B A D B F C)) by (conclude proposition_04).",
            "VernacExtend",
            "d101a2d7612fefa4f7c388ab19fb5ccb2a93f2c1"
        ],
        [
            "assert (Cong A D F C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "a89ae93f75f5242f14d91749bd74a577695ab5d8"
        ],
        [
            "assert (CongA B F C B A D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "510aee62877618388715fc1d1653ddc091c57b81"
        ],
        [
            "assert (nCol B A D) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "235b1e414cb2b01aa298e256f52b393603c5f489"
        ],
        [
            "assert (nCol A B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "8d3898c74f026f52b5107597e9ad0834408beec8"
        ],
        [
            "assert (Triangle A B D) by (conclude_def Triangle ).",
            "VernacExtend",
            "fc3c8c2747131318d96fee3f1e453ebc8e51682a"
        ],
        [
            "assert (Cong_3 A B D F B C) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "d2bc4f6d5c79f4a29457348ef9ead6b954275b6a"
        ],
        [
            "assert (ET A B D F B C) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "281db1ba701219a6a850c2fc520e5b0e62012c31"
        ],
        [
            "assert (Par B M L D) by (conclude_def PG ).",
            "VernacExtend",
            "72a149fb257dd0e54bff562c5a5b323732cb846f"
        ],
        [
            "assert (Par B D M L) by (conclude_def PG ).",
            "VernacExtend",
            "aee88383858a45924fc56e448222b71d607ff501"
        ],
        [
            "assert (Par M L B D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "01c382161a164afb0aca90062348525038cf1866"
        ],
        [
            "assert (Par M B D L) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "d12fdc1cf0797a4a907c886cd29178d7518dee7a"
        ],
        [
            "assert (PG M B D L) by (conclude_def PG ).",
            "VernacExtend",
            "46e31595b5102a1a07bbf488f4255329248ed7d6"
        ],
        [
            "assert (Col M L A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3643cb2d7bbe49b04d0e851da53d376ffbaf29ca"
        ],
        [
            "assert (ET M B D A B D) by (conclude proposition_41).",
            "VernacExtend",
            "e00fcffba57316c220ed7e561d9edb53e5030a58"
        ],
        [
            "assert (PG A B F G) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "e6a8e5e1b1acd8a724941014a0054e293fa69a5e"
        ],
        [
            "assert (PG B A G F) by (conclude lemma_PGflip).",
            "VernacExtend",
            "01b0a985ae0e383bc968e8e08fe9dc57a36a3ace"
        ],
        [
            "assert (Col G A C) by (conclude_def Col ).",
            "VernacExtend",
            "52adff8cab02e01fb70aa2b9e278bc3a521bd2df"
        ],
        [
            "assert (Col A G C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6c06a2dc4a7f9933a0c813815e74e9a6dd179fd5"
        ],
        [
            "assert (ET A B F C B F) by (conclude proposition_41).",
            "VernacExtend",
            "69dca0596cc9d4d4cad4a71e1a10daadb983dabc"
        ],
        [
            "assert (ET A B F F B C) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "0021591da46b13e981436348efaffeba01a5ed3a"
        ],
        [
            "assert (ET F B C A B D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "233539b58b135fde5bbc76f93bb7b8c1dae01990"
        ],
        [
            "assert (ET A B F A B D) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "f558edfcdfaceaea1dd9f45121d01bd1f4a15400"
        ],
        [
            "assert (ET A B D M B D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "9a102f8347795d16e8169ef4391f3aafe0cf6a1a"
        ],
        [
            "assert (ET A B F M B D) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "492da7f7d97733cfd7fec480fb3617b1fd6901cb"
        ],
        [
            "assert (Cong_3 A B F F G A) by (conclude proposition_34).",
            "VernacExtend",
            "5d0f59e30a5089d27a43f8507fce6778e3b76568"
        ],
        [
            "assert (ET A B F F G A) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "e8d98636259475fe1a38d511e34ee8d20d5e852a"
        ],
        [
            "assert (PG B M L D) by (conclude lemma_PGflip).",
            "VernacExtend",
            "32a7660f396630a302432962aa1f021fd718cb89"
        ],
        [
            "assert (Cong_3 M B D D L M) by (conclude proposition_34).",
            "VernacExtend",
            "a5c9c68f590268e3a7281167d6a7f4491e3dbe34"
        ],
        [
            "assert (ET M B D D L M) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "c4b299b29bc480e78b27cb4e6bc85414cf9430d3"
        ],
        [
            "assert (ET F G A A B F) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "a730f74ea46ebb484cb2ebd3cd50a468eda050a4"
        ],
        [
            "assert (ET F G A A B D) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "c7ec029448c425cbd4234322f983b6190ccc5ba4"
        ],
        [
            "assert (ET F G A M B D) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "c55c24232808c198df6799d0a464269754390a72"
        ],
        [
            "assert (ET F G A D L M) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "2a165c7d03e04cef61d734ffa14a70031cfd67d5"
        ],
        [
            "assert (ET F G A D M L) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "70ab3aef8144c5302fb8738a5c6e0bfba854b9a0"
        ],
        [
            "assert (ET D M L F G A) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "26f6cfbad09456de483e464a8f07fbe1dfa382b7"
        ],
        [
            "assert (ET D M L F A G) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "55834702838158a5870b426205ac0e28fa372ed2"
        ],
        [
            "assert (ET F A G D M L) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "032bdee3e58195fb1253b561e8cc9a7ca735308a"
        ],
        [
            "assert (ET A B F D M B) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "49c38e6eb2d6d4ae0daf5d0d8ca3d4f4e805a7e9"
        ],
        [
            "assert (ET D M B A B F) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "0ae853dae65ff33efa1f7e34c7db47a3db0571a3"
        ],
        [
            "assert (ET D M B F A B) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "917895b582b7ff31b7691ae79aa822f15f770c79"
        ],
        [
            "assert (ET F A B D M B) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "866ad923477b545befebc0fe9bfbe0eba1eced16"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (Midpoint A m F /\\ Midpoint B m G)) by (conclude lemma_diagonalsbisect);destruct Tf as [m];spliter.",
            "VernacExtend",
            "e09a0181dafacff1b2fe03e540a5ea69ffa4a609"
        ],
        [
            "assert (BetS A m F) by (conclude_def Midpoint ).",
            "VernacExtend",
            "0d7a47644b3cf8794a80abd99d2f073422b44012"
        ],
        [
            "assert (BetS B m G) by (conclude_def Midpoint ).",
            "VernacExtend",
            "837fd947f4cebce49d298f35f8e30347f0a31178"
        ],
        [
            "assert (BetS F m A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "e152c1c4061531d18226ccb246e4badc19f92fec"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists n, (Midpoint B n L /\\ Midpoint M n D)) by (conclude lemma_diagonalsbisect);destruct Tf as [n];spliter.",
            "VernacExtend",
            "f84af4fbad52e1325042bc1122e9fcaf86d2a702"
        ],
        [
            "assert (BetS B n L) by (conclude_def Midpoint ).",
            "VernacExtend",
            "4ef42918607bc2674947c6bdd55c3fc993c51e1f"
        ],
        [
            "assert (BetS M n D) by (conclude_def Midpoint ).",
            "VernacExtend",
            "b67ec42cf61a25c653784dd34c8f64444b5bf559"
        ],
        [
            "assert (BetS D n M) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "d018f0bb5e989816478a95de1228cfefe379f1d4"
        ],
        [
            "assert (Col M n D) by (conclude_def Col ).",
            "VernacExtend",
            "d8eeea51a4839eedb4889c0049dd96b67a26b5df"
        ],
        [
            "assert (Col D M n) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "bacdae856a00d33a0e25cae4370c860dd73a6baa"
        ],
        [
            "assert (nCol B M D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "9141df9e80243357d63b57413ce01822597d19d5"
        ],
        [
            "assert (nCol D M B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "1c10f1d4f278e78e42ef2bbee9120bafdfa133ba"
        ],
        [
            "assert (EF F B A G D B M L) by (conclude axiom_paste3).",
            "VernacExtend",
            "9bcd145e9f4090e3bc50a8f16125683078a42896"
        ],
        [
            "assert (EF F B A G B M L D) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "8f412b97f59ccef79c620478ab6e0220023e54f4"
        ],
        [
            "assert (EF B M L D F B A G) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "75bbb6707248e48981e5d1621be747ebf24a6c4b"
        ],
        [
            "assert (EF B M L D A B F G) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "d92ef3f8d2452d75f4eba6340245826d56d715f6"
        ],
        [
            "assert (EF A B F G B M L D) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "1560e75cbcd1f6a82574912d889de897fba430d8"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_47B",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M L, (PG B M L D /\\ BetS B M C /\\ PG M C E L /\\ BetS D L E /\\ BetS L M A /\\ Per D L A)) by (conclude proposition_47A);destruct Tf as [M[L]];spliter.",
                        "VernacExtend",
                        "54772ca3fd48b42f8520b504f050f8dc3e743950"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists N, (BetS D N A /\\ Col C B N /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [N];spliter.",
                        "VernacExtend",
                        "63f5457194ab725afccdd8c39039024a9ec78483"
                    ]
                },
                {
                    "command": [
                        "assert (Per G A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "bd504fa0e60071f2fe257f13839ad36c08366261"
                    ]
                },
                {
                    "command": [
                        "assert (BetS G A C) by (conclude lemma_righttogether).",
                        "VernacExtend",
                        "14d48d402ea6af7bbd5783439898e95b71242bcf"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B F) by (conclude_def SQ ).",
                        "VernacExtend",
                        "079903d8622a90d408f30994c0a2bda12554eae9"
                    ]
                },
                {
                    "command": [
                        "assert (Per F B A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "dc83514d7f57ffc1617047c2da4f680a72777c49"
                    ]
                },
                {
                    "command": [
                        "assert (Per D B C) by (conclude_def SQ ).",
                        "VernacExtend",
                        "cb740d023fccd2687e859812a64167810710aa6a"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B F G) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "e6a8e5e1b1acd8a724941014a0054e293fa69a5e"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B F G) by (conclude_def PG ).",
                        "VernacExtend",
                        "32699145e1373b41071222438488aa1c7c7d2ec6"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B G F) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "79289896230756fe29d07105b23882a6b06e1425"
                    ]
                },
                {
                    "command": [
                        "assert (TP A B G F) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "e17dcbf3b5d1399cca76bcecbff562f75fc009e0"
                    ]
                },
                {
                    "command": [
                        "assert (OS G F A B) by (conclude_def TP ).",
                        "VernacExtend",
                        "5c5d61e5e725c1d3aa1c4c68dc4614938e792406"
                    ]
                },
                {
                    "command": [
                        "assert (OS F G A B) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "1db50f10fa46b65803aa074ea8a1e363c4a540cf"
                    ]
                },
                {
                    "command": [
                        "assert (TS G A B C) by (conclude lemma_oppositesideflip).",
                        "VernacExtend",
                        "3876ee7f2c7579dc3733235b7bc3289350fd3d65"
                    ]
                },
                {
                    "command": [
                        "assert (TS F A B C) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "564870fc8f04ae429c76d3eebb7a26b99bc26b14"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists a, (BetS F a C /\\ Col A B a /\\ nCol A B F)) by (conclude_def TS );destruct Tf as [a];spliter.",
                        "VernacExtend",
                        "a89361a86495c017e3573dec89c80f2da2d0b5c1"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A a) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7ee394b41c41a190aadb38570a23d7d342b681c8"
                    ]
                },
                {
                    "command": [
                        "assert (Par A G B F) by (conclude_def PG ).",
                        "VernacExtend",
                        "6e1c7bcf19a679c33a556ea47b7ef9f9c4ecf0e5"
                    ]
                },
                {
                    "command": [
                        "assert (Par A G F B) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "d659e3ddaee299c23a308f74f2951e4a98fee539"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A C) by (conclude_def Col ).",
                        "VernacExtend",
                        "52adff8cab02e01fb70aa2b9e278bc3a521bd2df"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6c06a2dc4a7f9933a0c813815e74e9a6dd179fd5"
                    ]
                },
                {
                    "command": [
                        "assert (neq G C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
                    ]
                },
                {
                    "command": [
                        "assert (neq C G) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "65eb5aeb5fb5f688314a130b770611d49f86d4e7"
                    ]
                },
                {
                    "command": [
                        "assert (Par F B A G) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "39f9319c10d3c01384ac9d774a25e5dc8f5edde4"
                    ]
                },
                {
                    "command": [
                        "assert (Par F B C G) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "3202c035792cca772f49196a2c397fca6b663293"
                    ]
                },
                {
                    "command": [
                        "assert (Par F B G C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "1bfce844d89fa457515067197b5b12072c11603d"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet F B G C) by (conclude_def Par ).",
                        "VernacExtend",
                        "05db01ee4b205038b425bf1365401c72d0b943fd"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8002a66bdd6f60a99dbf8089a844e1b798b91772"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B F) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "90c516151fd13ccc110840b63ec1f261e0645933"
                    ]
                },
                {
                    "command": [
                        "assert (neq F A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "b0add413e922b89a45f13bb4a1525c0a406564f1"
                    ]
                },
                {
                    "command": [
                        "assert (neq F B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "87d237b490bf4861bc957016593d3ea866c3c8e1"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col F B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "d1fa165f6d5caa7d1118d3fac3c13d50c096650e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B a A) by (conclude lemma_collinearbetween).",
                        "VernacExtend",
                        "93e7a77f8a296dedc3d55244ef05be9affcc9b60"
                    ]
                },
                {
                    "command": [
                        "assert (neq B a) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "eafe043552e3f09b4427cb547156a813bd0eabe0"
                    ]
                },
                {
                    "command": [
                        "assert (Out B a A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "ee77ac142aecb9845761fdcbb5c4b789cbbdeedd"
                    ]
                },
                {
                    "command": [
                        "assert (neq B F) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "01e5044f21fc1e35a75b7c5caf8f6eab20c61552"
                    ]
                },
                {
                    "command": [
                        "assert (eq F F) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
                    ]
                },
                {
                    "command": [
                        "assert (Out B F F) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a3fdf4cd6853cccd57f607fa882e728270b367cf"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B F) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "90c516151fd13ccc110840b63ec1f261e0645933"
                    ]
                },
                {
                    "command": [
                        "assert (nCol F B A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "cd99fe431a7272c8441898162e368546d79d8e20"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F B A F B A) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "2f1337ec317a9429884ca3fb8b01e20fbadef538"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A a) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "80cce1c0edf6985937b4a592e1adbc647e334909"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F B A F B a) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "eb72f4d5e44c3f345c987ab781eff38d7e6c933b"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "aded022177916f7e4435a874df64d10bc8cdea41"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C a B C) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "f23c7cd134676bf8402b62f35f4f5619533cd1a0"
                    ]
                },
                {
                    "command": [
                        "assert (SumA F B A A B C F B C) by (conclude_def SumA ).",
                        "VernacExtend",
                        "bf9c93b05640bfb0738c6c9fc287e659cd351989"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists c, (BetS D c A /\\ Col C B c /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [c];spliter.",
                        "VernacExtend",
                        "c05d3a9a9211065979ca75e84089f3181e7d5724"
                    ]
                },
                {
                    "command": [
                        "assert (PG B C E D) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "6e85b6a042d46999eb57f3d44a973dfb2b3b3ea8"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D C E) by (conclude_def PG ).",
                        "VernacExtend",
                        "0492126efec3f51f3bd2a2e6c35e614cf4fb6c2f"
                    ]
                },
                {
                    "command": [
                        "assert (Par C E B D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "1940a6ab43fb7f4581717f8c8e60ec6db5602df0"
                    ]
                },
                {
                    "command": [
                        "assert (Par C E D B) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "7b229afc0529a7f3e86033cb75b855f41d3c6783"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C c) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "cb3716d3cad23550efce376dadc52d85ccfaaa8e"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "48d3455391aa6042e4c0824a684611b5af7c8a81"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c4e234e367413ef16013499457a5aa51ac86ab40"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B c) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "353e1b9d9d6ea0770475d82407b9dbc9a990533d"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "4166f0c0280dc7504e496fe594c5a787d05a54da"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M c) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "43fbdfbe77171acce6534c9461f2b7fc464ce5c7"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D M L) by (conclude_def PG ).",
                        "VernacExtend",
                        "aee88383858a45924fc56e448222b71d607ff501"
                    ]
                },
                {
                    "command": [
                        "assert (Col L M A) by (conclude_def Col ).",
                        "VernacExtend",
                        "416f8b2ed15af42f48f420e944ea4fef057369fa"
                    ]
                },
                {
                    "command": [
                        "assert (Col M L A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3643cb2d7bbe49b04d0e851da53d376ffbaf29ca"
                    ]
                },
                {
                    "command": [
                        "assert (neq L A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "0a7f114577e6a9642dbdd0735c928ea5506eceb5"
                    ]
                },
                {
                    "command": [
                        "assert (neq A L) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "a07f9d728a1a00b7208bf0f44e97f60f564a9063"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D A L) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "2c86f24392de18c433cbf50649b6ea63b69140c5"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Par D B L A) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "ab246860cf8f8d7cfc0adf42a5f5363964f70668"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet D B L A) by (conclude_def Par ).",
                        "VernacExtend",
                        "c205e2bf64e1abfc55487a4eb380a40b8ee8739d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B D L) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "b87647e13cd8a404ea374ddbaa111f5f308b3457"
                    ]
                },
                {
                    "command": [
                        "assert (neq D B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "278d4cf17c0b7243f32819d93ffcba6493b04968"
                    ]
                },
                {
                    "command": [
                        "assert (neq M A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "0ac3d268a02620b358eeae7d01bb41b11f65f1b4"
                    ]
                },
                {
                    "command": [
                        "assert (neq L M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "8cbfbb597291172ccd6e03aec09f99725e271ff0"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "4ae50054336f83aea8911d0c88160933c1cfc984"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B c M) by (conclude lemma_collinearbetween).",
                        "VernacExtend",
                        "4f053c324bf7827d4188047fbc79a798fb3a2b56"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B c C) by (conclude lemma_3_6b).",
                        "VernacExtend",
                        "ea5aa793e296c0ec6d5df56939e28edc9e956f1e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D B A) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "cadd6abc19b6fd3bdd978d6482051b67e128a0f0"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B c).",
                        "VernacExtend",
                        "81aec05bcd9026026fffb5261c3f3ec226f348f1"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B c) by (conclude_def Col ).",
                        "VernacExtend",
                        "d165715c516260cfccf2932675640a1a8e81196f"
                    ]
                },
                {
                    "command": [
                        "assert (Col D c A) by (conclude_def Col ).",
                        "VernacExtend",
                        "88468a6d6e1ad48d8961350f3a29df876dbb2a75"
                    ]
                },
                {
                    "command": [
                        "assert (Col c D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "abc4dbc72a4d01b0fa5147132999ce69fa456391"
                    ]
                },
                {
                    "command": [
                        "assert (Col c D A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f52a929e48b449b0d16f2778db843ba436e2d4a2"
                    ]
                },
                {
                    "command": [
                        "assert (neq D c) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "c7e668c32c98c4cecfafa7227fea1a27b2e89950"
                    ]
                },
                {
                    "command": [
                        "assert (neq c D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "97205d2273f471306b7e4b8311f22121708eaf5b"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "762555a1328860cc0e23c923c12df51a108cb48a"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Out B c C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "cf255430eb4cf8af7263e5636a28ac83f1e7031c"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C c) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "8708937943ab648e81287739ab4d1f40326de725"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "a4d3eddbdbf0e243199e65bd2fb15e7f1447fc66"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B A C B A) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "4d0c18eb259db8bae40b878408e3ccb4ca5ad068"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "f05572d51181c9202443ce99ec9c621f00191cb7"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B A c B A) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "6aff259e58eefdc458ff57e88367b70ca894934d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C D B) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "d21a8e551d66b603307f0b95911b88c7c036d012"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D B C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "675be29ea58b035f2007d2984607ba05b4ace55e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D B C D B C) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "3009bcd48909bd3492c9f28276e8faeef06578f6"
                    ]
                },
                {
                    "command": [
                        "assert (neq B D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "61403d246c7e61a1749f292f3789528cd1ca8507"
                    ]
                },
                {
                    "command": [
                        "assert (Out B D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "9dcb0def0987bcfefce142df69b06d620db93897"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D B C D B c) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "ed1cc61c87904f613445fa9ecf38df57c97b9879"
                    ]
                },
                {
                    "command": [
                        "assert (SumA D B C C B A D B A) by (conclude_def SumA ).",
                        "VernacExtend",
                        "1b1ba47264bf4fa2e6bdff35e27bcb163377c2bb"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F B A D B C) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "ba5f8431ec0a119a3ff442b198d04ec40168fb41"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C C B A) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "adabb930dfa462438b4c67f245952c72a34fba3e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F B C D B A) by (conclude lemma_angleaddition).",
                        "VernacExtend",
                        "4c5f7f68b9719e6bdf15473a02941b3400264290"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D B A F B C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "90a0cd24056dac65bbac6d0f6a21a4c07fdf69a1"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col C B F).",
                        "VernacExtend",
                        "561dd5e1fc379b0bb8a53f5f3f6d75c21c1f5e06"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col F B C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b93eb891fe50686fa78429a4baf0bb42a710016a"
                    ]
                },
                {
                    "command": [
                        "assert (Per C B A) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "4bdcbc7643d85a1a303278f845f41d8937c3b782"
                    ]
                },
                {
                    "command": [
                        "assert (~ Per C B A) by (conclude lemma_8_7).",
                        "VernacExtend",
                        "d3f317b5f6c89b949351655ee3e8b20289d76aa7"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (nCol F B C) by (assert (nCol C B F) by auto;forward_using lemma_NCorder).",
                        "VernacExtend",
                        "62edf46cb61fcbaf579ba583431f0bb45c77f134"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F B C C B F) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "3bae01c12ac41f766e41b14f50a19895d4ee3bee"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D B A C B F) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "5508834ba41edba9b254af51ea75f999f57f2d9f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B F) by (conclude_def SQ ).",
                        "VernacExtend",
                        "6f4d6f5f19b39e555b04dd07eb0c5c9c1f236c08"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B F B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2a3c1e2024a156a656388affea258238c142d1c0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F B A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "7129df95cc134512d4cb6435a1276b6d2fc22662"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B F B A) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "bb17c6202c332acd6ed63a6dab0f7d320407ecc2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A B F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b7df9c533296f405dc96f03ec85006729744b3cb"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C D B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "975b0216196a48ceb16de602f075f7515df921b6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D B B C) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "8161585086fb8b1549c0f63c5e2225f4c3abdd20"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D B C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "d2fc5f585ffa48ce945cd8d99e4242795f038718"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong D A C F /\\ CongA B D A B C F /\\ CongA B A D B F C)) by (conclude proposition_04).",
                        "VernacExtend",
                        "d101a2d7612fefa4f7c388ab19fb5ccb2a93f2c1"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D F C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "a89ae93f75f5242f14d91749bd74a577695ab5d8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B F C B A D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "510aee62877618388715fc1d1653ddc091c57b81"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A D) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "235b1e414cb2b01aa298e256f52b393603c5f489"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "8d3898c74f026f52b5107597e9ad0834408beec8"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A B D) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "fc3c8c2747131318d96fee3f1e453ebc8e51682a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 A B D F B C) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "d2bc4f6d5c79f4a29457348ef9ead6b954275b6a"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D F B C) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "281db1ba701219a6a850c2fc520e5b0e62012c31"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M L D) by (conclude_def PG ).",
                        "VernacExtend",
                        "72a149fb257dd0e54bff562c5a5b323732cb846f"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D M L) by (conclude_def PG ).",
                        "VernacExtend",
                        "aee88383858a45924fc56e448222b71d607ff501"
                    ]
                },
                {
                    "command": [
                        "assert (Par M L B D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "01c382161a164afb0aca90062348525038cf1866"
                    ]
                },
                {
                    "command": [
                        "assert (Par M B D L) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "d12fdc1cf0797a4a907c886cd29178d7518dee7a"
                    ]
                },
                {
                    "command": [
                        "assert (PG M B D L) by (conclude_def PG ).",
                        "VernacExtend",
                        "46e31595b5102a1a07bbf488f4255329248ed7d6"
                    ]
                },
                {
                    "command": [
                        "assert (Col M L A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3643cb2d7bbe49b04d0e851da53d376ffbaf29ca"
                    ]
                },
                {
                    "command": [
                        "assert (ET M B D A B D) by (conclude proposition_41).",
                        "VernacExtend",
                        "e00fcffba57316c220ed7e561d9edb53e5030a58"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B F G) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "e6a8e5e1b1acd8a724941014a0054e293fa69a5e"
                    ]
                },
                {
                    "command": [
                        "assert (PG B A G F) by (conclude lemma_PGflip).",
                        "VernacExtend",
                        "01b0a985ae0e383bc968e8e08fe9dc57a36a3ace"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A C) by (conclude_def Col ).",
                        "VernacExtend",
                        "52adff8cab02e01fb70aa2b9e278bc3a521bd2df"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6c06a2dc4a7f9933a0c813815e74e9a6dd179fd5"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F C B F) by (conclude proposition_41).",
                        "VernacExtend",
                        "69dca0596cc9d4d4cad4a71e1a10daadb983dabc"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F F B C) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "0021591da46b13e981436348efaffeba01a5ed3a"
                    ]
                },
                {
                    "command": [
                        "assert (ET F B C A B D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "233539b58b135fde5bbc76f93bb7b8c1dae01990"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F A B D) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "f558edfcdfaceaea1dd9f45121d01bd1f4a15400"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D M B D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "9a102f8347795d16e8169ef4391f3aafe0cf6a1a"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F M B D) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "492da7f7d97733cfd7fec480fb3617b1fd6901cb"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 A B F F G A) by (conclude proposition_34).",
                        "VernacExtend",
                        "5d0f59e30a5089d27a43f8507fce6778e3b76568"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F F G A) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "e8d98636259475fe1a38d511e34ee8d20d5e852a"
                    ]
                },
                {
                    "command": [
                        "assert (PG B M L D) by (conclude lemma_PGflip).",
                        "VernacExtend",
                        "32a7660f396630a302432962aa1f021fd718cb89"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 M B D D L M) by (conclude proposition_34).",
                        "VernacExtend",
                        "a5c9c68f590268e3a7281167d6a7f4491e3dbe34"
                    ]
                },
                {
                    "command": [
                        "assert (ET M B D D L M) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "c4b299b29bc480e78b27cb4e6bc85414cf9430d3"
                    ]
                },
                {
                    "command": [
                        "assert (ET F G A A B F) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "a730f74ea46ebb484cb2ebd3cd50a468eda050a4"
                    ]
                },
                {
                    "command": [
                        "assert (ET F G A A B D) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "c7ec029448c425cbd4234322f983b6190ccc5ba4"
                    ]
                },
                {
                    "command": [
                        "assert (ET F G A M B D) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "c55c24232808c198df6799d0a464269754390a72"
                    ]
                },
                {
                    "command": [
                        "assert (ET F G A D L M) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "2a165c7d03e04cef61d734ffa14a70031cfd67d5"
                    ]
                },
                {
                    "command": [
                        "assert (ET F G A D M L) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "70ab3aef8144c5302fb8738a5c6e0bfba854b9a0"
                    ]
                },
                {
                    "command": [
                        "assert (ET D M L F G A) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "26f6cfbad09456de483e464a8f07fbe1dfa382b7"
                    ]
                },
                {
                    "command": [
                        "assert (ET D M L F A G) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "55834702838158a5870b426205ac0e28fa372ed2"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A G D M L) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "032bdee3e58195fb1253b561e8cc9a7ca735308a"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B F D M B) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "49c38e6eb2d6d4ae0daf5d0d8ca3d4f4e805a7e9"
                    ]
                },
                {
                    "command": [
                        "assert (ET D M B A B F) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "0ae853dae65ff33efa1f7e34c7db47a3db0571a3"
                    ]
                },
                {
                    "command": [
                        "assert (ET D M B F A B) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "917895b582b7ff31b7691ae79aa822f15f770c79"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A B D M B) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "866ad923477b545befebc0fe9bfbe0eba1eced16"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (Midpoint A m F /\\ Midpoint B m G)) by (conclude lemma_diagonalsbisect);destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "e09a0181dafacff1b2fe03e540a5ea69ffa4a609"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A m F) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "0d7a47644b3cf8794a80abd99d2f073422b44012"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B m G) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "837fd947f4cebce49d298f35f8e30347f0a31178"
                    ]
                },
                {
                    "command": [
                        "assert (BetS F m A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "e152c1c4061531d18226ccb246e4badc19f92fec"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists n, (Midpoint B n L /\\ Midpoint M n D)) by (conclude lemma_diagonalsbisect);destruct Tf as [n];spliter.",
                        "VernacExtend",
                        "f84af4fbad52e1325042bc1122e9fcaf86d2a702"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B n L) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "4ef42918607bc2674947c6bdd55c3fc993c51e1f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS M n D) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "b67ec42cf61a25c653784dd34c8f64444b5bf559"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D n M) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "d018f0bb5e989816478a95de1228cfefe379f1d4"
                    ]
                },
                {
                    "command": [
                        "assert (Col M n D) by (conclude_def Col ).",
                        "VernacExtend",
                        "d8eeea51a4839eedb4889c0049dd96b67a26b5df"
                    ]
                },
                {
                    "command": [
                        "assert (Col D M n) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "bacdae856a00d33a0e25cae4370c860dd73a6baa"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B M D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "9141df9e80243357d63b57413ce01822597d19d5"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D M B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "1c10f1d4f278e78e42ef2bbee9120bafdfa133ba"
                    ]
                },
                {
                    "command": [
                        "assert (EF F B A G D B M L) by (conclude axiom_paste3).",
                        "VernacExtend",
                        "9bcd145e9f4090e3bc50a8f16125683078a42896"
                    ]
                },
                {
                    "command": [
                        "assert (EF F B A G B M L D) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "8f412b97f59ccef79c620478ab6e0220023e54f4"
                    ]
                },
                {
                    "command": [
                        "assert (EF B M L D F B A G) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "75bbb6707248e48981e5d1621be747ebf24a6c4b"
                    ]
                },
                {
                    "command": [
                        "assert (EF B M L D A B F G) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "d92ef3f8d2452d75f4eba6340245826d56d715f6"
                    ]
                },
                {
                    "command": [
                        "assert (EF A B F G B M L D) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "1560e75cbcd1f6a82574912d889de897fba430d8"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}