{
    "filename": "Elements/OriginalProofs/lemma_rightreverse.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_congruenceflip.",
            "VernacRequire",
            "f031442025fb7e58fef1a6f0e7748226615bbedb"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_extensionunique.",
            "VernacRequire",
            "b87c5a1a08263e580073f61854544dc50f37b965"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral}.",
            "VernacContext",
            "2fbba6835eae564c0004c876ca3949150abb2ba6"
        ],
        [
            "Lemma lemma_rightreverse : forall A B C D, Per A B C -> BetS A B D -> Cong A B B D -> Cong A C D C.",
            "VernacStartTheoremProof",
            "066a87db15c2caef7a43365a7bf8174f1204d243"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A C E C /\\ neq B C)) by (conclude_def Per );destruct Tf as [E];spliter.",
            "VernacExtend",
            "7f926a36c896b701e5933427c376bbc150da11f2"
        ],
        [
            "assert (Cong B D A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b10e89bf5ee807357183ca3ee2e58abbeb304b96"
        ],
        [
            "assert (Cong B D E B) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "afcb1f5b15f69e6ea319185d9ee59db30ac993d3"
        ],
        [
            "assert (Cong B D B E) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "ba3989136608e9cf53612749c8a6d326a0679899"
        ],
        [
            "assert (eq D E) by (conclude lemma_extensionunique).",
            "VernacExtend",
            "616d6fdb363eb0371f1ce3f060a5cb50f0303965"
        ],
        [
            "assert (Cong A C D C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "d00da212526fb5b4c16d3bb0e4a677e87c513a74"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_rightreverse",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A C E C /\\ neq B C)) by (conclude_def Per );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "7f926a36c896b701e5933427c376bbc150da11f2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b10e89bf5ee807357183ca3ee2e58abbeb304b96"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D E B) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "afcb1f5b15f69e6ea319185d9ee59db30ac993d3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D B E) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "ba3989136608e9cf53612749c8a6d326a0679899"
                    ]
                },
                {
                    "command": [
                        "assert (eq D E) by (conclude lemma_extensionunique).",
                        "VernacExtend",
                        "616d6fdb363eb0371f1ce3f060a5cb50f0303965"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C D C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "d00da212526fb5b4c16d3bb0e4a677e87c513a74"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}