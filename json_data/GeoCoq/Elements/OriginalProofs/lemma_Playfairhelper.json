{
    "filename": "Elements/OriginalProofs/lemma_Playfairhelper.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelNC.",
            "VernacRequire",
            "5f4385a2c77e4b4f2518ca3a6e4d8ec4f628cdd8"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.",
            "VernacRequire",
            "380a5936af7e0007ca86a397621339008584ccda"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29B.",
            "VernacRequire",
            "5d237c3959071079475062a23cb0b770aa2ee5ba"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.",
            "VernacRequire",
            "e464db49a36f1840285875a39e67b1d058d20da3"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidetransitive.",
            "VernacRequire",
            "2529132c89ec14256741e3a67306925f6fa97c17"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma lemma_Playfairhelper : forall A B C D E, Par A B C D -> Par A B C E -> CR A D B C -> CR A E B C -> Col C D E.",
            "VernacStartTheoremProof",
            "1cfad87c4c45f5579fb74a5d79561dfe52852c7b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS B M C)) by (conclude_def CR );destruct Tf as [M];spliter.",
            "VernacExtend",
            "a4e0b0abe71e0da069270092573d1c9e2aefd256"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (BetS A m E /\\ BetS B m C)) by (conclude_def CR );destruct Tf as [m];spliter.",
            "VernacExtend",
            "462e3f48310b9938a657352ca400aad9376e96d0"
        ],
        [
            "assert (neq B C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "f6fdee308c5859b48d3d33e5ee4e6033c868f322"
        ],
        [
            "assert (BetS E m A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "667670c1a78bc2f21dd6e6a89fdc0a4f7b564dfc"
        ],
        [
            "assert (BetS D M A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "ac472cdb78546096ad98f81d0235da2b4dafaac3"
        ],
        [
            "assert (Col B M C) by (conclude_def Col ).",
            "VernacExtend",
            "48d3455391aa6042e4c0824a684611b5af7c8a81"
        ],
        [
            "assert (Col B m C) by (conclude_def Col ).",
            "VernacExtend",
            "6d53f3eb6b033b8cd9fd98d13fd1d3f597d4a17c"
        ],
        [
            "assert (Col C B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c4e234e367413ef16013499457a5aa51ac86ab40"
        ],
        [
            "assert (Col C B m) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ee446bb636cb698f97c13b021cceb46a6939fb9b"
        ],
        [
            "assert (nCol B C E) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "397510e06c3147f41fe17c93533b73115bad451f"
        ],
        [
            "assert (nCol C B E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7408da522b267fb8e93eb1e0fdaa75115f090edf"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "7222425f5c62261cc3318250522969eef3385737"
        ],
        [
            "assert (nCol C B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "9929cc5845363b366a39bb043ec8260c57492012"
        ],
        [
            "assert (TS E C B A) by (conclude_def TS ).",
            "VernacExtend",
            "867a2167b51d81fff373617d8c821c31fd81a407"
        ],
        [
            "assert (TS D C B A) by (conclude_def TS ).",
            "VernacExtend",
            "2217af46f5c3bbe0a20b9b684ba41519f07c965d"
        ],
        [
            "assert (Par C D A B) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "ce8640be6fb122eec488f5cfb6cd2e44b3f51495"
        ],
        [
            "assert (Par C E A B) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "d6c6b0d54973b987171a875b3880b4259f02487c"
        ],
        [
            "assert (Par E C B A) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "2c351d089f4688cea5dc9a0b50aed9a042deb6cf"
        ],
        [
            "assert (Par D C B A) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "b2b40b6957ac7178a7785865b294f85a4bcfa1ac"
        ],
        [
            "assert (CongA E C B C B A) by (conclude proposition_29B).",
            "VernacExtend",
            "2da06664474480de5b250bd54201d49acd0c1c67"
        ],
        [
            "assert (CongA D C B C B A) by (conclude proposition_29B).",
            "VernacExtend",
            "a8efeafb37c631b629f80048436052328a5d2fb4"
        ],
        [
            "assert (CongA C B A D C B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "841abb5617c7eabab55016d72a97e13f72a77e5e"
        ],
        [
            "assert (CongA E C B D C B) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "bcbf1d10ebfb9b6d80f561a7d898e2f5b3ac1062"
        ],
        [
            "assert (neq C E) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8feea22005e9017d23304cc1ca571544078ae624"
        ],
        [
            "assert (neq C D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists e, (Out C E e /\\ Cong C e C D)) by (conclude lemma_layoff);destruct Tf as [e];spliter.",
            "VernacExtend",
            "5c5debc33c9cf90a59d5b2fc8e4bdfcaafc36f0c"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f6de27d2290b224fed0d2ab5b24228893a410ec8"
        ],
        [
            "assert (Out C B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "637eb8335a2163c1d041df3535e69682ab03a1ad"
        ],
        [
            "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
        ],
        [
            "assert (nCol E C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "6f0b74d87837dd9af4a0b443cc2eb9353dd99613"
        ],
        [
            "assert (CongA E C B E C B) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "6cb08842358bf20368b26ed779df91ad6e04843a"
        ],
        [
            "assert (CongA E C B e C B) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "a437ce03a6431bc09e84a0da1bc0dae648f3028a"
        ],
        [
            "assert (CongA e C B E C B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "0de4d45b6263048ba1274544fc901e884519e05a"
        ],
        [
            "assert (CongA e C B D C B) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "9775ba1cd7345d82dee04f4f2f40f822b360733c"
        ],
        [
            "assert (Col C E e) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "874f970091b6dacd92707d451b47c27172f5f415"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Col C E C) by (conclude_def Col ).",
            "VernacExtend",
            "09c8303cb4ca0cc12170ee84a134146a8e874be6"
        ],
        [
            "assert (nCol C E B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "ec1c947e3e63d54d7e8e73364093ef1b6a6efc49"
        ],
        [
            "assert (neq C e) by (conclude lemma_raystrict).",
            "VernacExtend",
            "df8ea8be2f0171e4df0f2653b2ffa8fdd128e0c7"
        ],
        [
            "assert (nCol C e B) by (conclude lemma_NChelper).",
            "VernacExtend",
            "8e81fea2da74fdceb593d610e9580f520bee6ab8"
        ],
        [
            "assert (nCol e C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "0ebefcef0c2348eb888e36191d7371589c68a18e"
        ],
        [
            "assert (Triangle e C B) by (conclude_def Triangle ).",
            "VernacExtend",
            "22fc19f7c26d934b061276da2c78cccd33822404"
        ],
        [
            "assert (nCol D C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "42fa4202075413f8ceea35f10d75ff120a84cd07"
        ],
        [
            "assert (Triangle D C B) by (conclude_def Triangle ).",
            "VernacExtend",
            "085276e32309a794032971782a8f86c2b2063550"
        ],
        [
            "assert (Cong e B D B) by (conclude proposition_04).",
            "VernacExtend",
            "0ba4537b01cd35fb6e1dc641bea4c3f5adafa73c"
        ],
        [
            "assert (nCol B C E) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "397510e06c3147f41fe17c93533b73115bad451f"
        ],
        [
            "assert (nCol C B E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7408da522b267fb8e93eb1e0fdaa75115f090edf"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "7222425f5c62261cc3318250522969eef3385737"
        ],
        [
            "assert (nCol C B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "9929cc5845363b366a39bb043ec8260c57492012"
        ],
        [
            "assert (OS E D C B) by (conclude_def OS ).",
            "VernacExtend",
            "462484d696d647978990a9a4e18f0c31fca8571c"
        ],
        [
            "assert (nCol C B e) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "4501eed1c47763e132e9590c6331ef1cc246819e"
        ],
        [
            "assert (Col C C B) by (conclude_def Col ).",
            "VernacExtend",
            "ca20b4d75f16e9606dbed6f8c3fc6068cc9687f9"
        ],
        [
            "assert (Out C e E) by (conclude lemma_ray5).",
            "VernacExtend",
            "c1dcb72c162382522f597ed411028784c7d06c5c"
        ],
        [
            "assert (OS e e C B) by (conclude lemma_samesidereflexive).",
            "VernacExtend",
            "8ab802cb13825e83f5c4d3644b1ef83397b68a86"
        ],
        [
            "assert (OS e E C B) by (conclude lemma_sameside2).",
            "VernacExtend",
            "1d7a0f03e826ced693af8ab10df78a8b395c311a"
        ],
        [
            "assert (OS e D C B) by (conclude lemma_samesidetransitive).",
            "VernacExtend",
            "3be3ce9b25a7ef7dbdfa07054eb51a566ecce6b8"
        ],
        [
            "assert (Cong e C D C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "213db6f53cbf2f4a902f4d51da951e76dab22b47"
        ],
        [
            "assert (eq e D) by (conclude proposition_07).",
            "VernacExtend",
            "6c1ef76952f82c4bc07eacbf5bb7e316d5cf7787"
        ],
        [
            "assert (Col C E D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "73a0ec8808263ea1679012f8a7c24745946973e6"
        ],
        [
            "assert (Col C D E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5261a666a4057f41bb56b794258442a624629d55"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_Playfairhelper",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS B M C)) by (conclude_def CR );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "a4e0b0abe71e0da069270092573d1c9e2aefd256"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (BetS A m E /\\ BetS B m C)) by (conclude_def CR );destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "462e3f48310b9938a657352ca400aad9376e96d0"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "f6fdee308c5859b48d3d33e5ee4e6033c868f322"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E m A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "667670c1a78bc2f21dd6e6a89fdc0a4f7b564dfc"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D M A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "ac472cdb78546096ad98f81d0235da2b4dafaac3"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "48d3455391aa6042e4c0824a684611b5af7c8a81"
                    ]
                },
                {
                    "command": [
                        "assert (Col B m C) by (conclude_def Col ).",
                        "VernacExtend",
                        "6d53f3eb6b033b8cd9fd98d13fd1d3f597d4a17c"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c4e234e367413ef16013499457a5aa51ac86ab40"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B m) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ee446bb636cb698f97c13b021cceb46a6939fb9b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C E) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "397510e06c3147f41fe17c93533b73115bad451f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7408da522b267fb8e93eb1e0fdaa75115f090edf"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "7222425f5c62261cc3318250522969eef3385737"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "9929cc5845363b366a39bb043ec8260c57492012"
                    ]
                },
                {
                    "command": [
                        "assert (TS E C B A) by (conclude_def TS ).",
                        "VernacExtend",
                        "867a2167b51d81fff373617d8c821c31fd81a407"
                    ]
                },
                {
                    "command": [
                        "assert (TS D C B A) by (conclude_def TS ).",
                        "VernacExtend",
                        "2217af46f5c3bbe0a20b9b684ba41519f07c965d"
                    ]
                },
                {
                    "command": [
                        "assert (Par C D A B) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "ce8640be6fb122eec488f5cfb6cd2e44b3f51495"
                    ]
                },
                {
                    "command": [
                        "assert (Par C E A B) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "d6c6b0d54973b987171a875b3880b4259f02487c"
                    ]
                },
                {
                    "command": [
                        "assert (Par E C B A) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "2c351d089f4688cea5dc9a0b50aed9a042deb6cf"
                    ]
                },
                {
                    "command": [
                        "assert (Par D C B A) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "b2b40b6957ac7178a7785865b294f85a4bcfa1ac"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C B C B A) by (conclude proposition_29B).",
                        "VernacExtend",
                        "2da06664474480de5b250bd54201d49acd0c1c67"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D C B C B A) by (conclude proposition_29B).",
                        "VernacExtend",
                        "a8efeafb37c631b629f80048436052328a5d2fb4"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B A D C B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "841abb5617c7eabab55016d72a97e13f72a77e5e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C B D C B) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "bcbf1d10ebfb9b6d80f561a7d898e2f5b3ac1062"
                    ]
                },
                {
                    "command": [
                        "assert (neq C E) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8feea22005e9017d23304cc1ca571544078ae624"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists e, (Out C E e /\\ Cong C e C D)) by (conclude lemma_layoff);destruct Tf as [e];spliter.",
                        "VernacExtend",
                        "5c5debc33c9cf90a59d5b2fc8e4bdfcaafc36f0c"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f6de27d2290b224fed0d2ab5b24228893a410ec8"
                    ]
                },
                {
                    "command": [
                        "assert (Out C B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "637eb8335a2163c1d041df3535e69682ab03a1ad"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "6f0b74d87837dd9af4a0b443cc2eb9353dd99613"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C B E C B) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "6cb08842358bf20368b26ed779df91ad6e04843a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E C B e C B) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "a437ce03a6431bc09e84a0da1bc0dae648f3028a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA e C B E C B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "0de4d45b6263048ba1274544fc901e884519e05a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA e C B D C B) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "9775ba1cd7345d82dee04f4f2f40f822b360733c"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E e) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "874f970091b6dacd92707d451b47c27172f5f415"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E C) by (conclude_def Col ).",
                        "VernacExtend",
                        "09c8303cb4ca0cc12170ee84a134146a8e874be6"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C E B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "ec1c947e3e63d54d7e8e73364093ef1b6a6efc49"
                    ]
                },
                {
                    "command": [
                        "assert (neq C e) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "df8ea8be2f0171e4df0f2653b2ffa8fdd128e0c7"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C e B) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "8e81fea2da74fdceb593d610e9580f520bee6ab8"
                    ]
                },
                {
                    "command": [
                        "assert (nCol e C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "0ebefcef0c2348eb888e36191d7371589c68a18e"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle e C B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "22fc19f7c26d934b061276da2c78cccd33822404"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "42fa4202075413f8ceea35f10d75ff120a84cd07"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle D C B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "085276e32309a794032971782a8f86c2b2063550"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e B D B) by (conclude proposition_04).",
                        "VernacExtend",
                        "0ba4537b01cd35fb6e1dc641bea4c3f5adafa73c"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C E) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "397510e06c3147f41fe17c93533b73115bad451f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7408da522b267fb8e93eb1e0fdaa75115f090edf"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "7222425f5c62261cc3318250522969eef3385737"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "9929cc5845363b366a39bb043ec8260c57492012"
                    ]
                },
                {
                    "command": [
                        "assert (OS E D C B) by (conclude_def OS ).",
                        "VernacExtend",
                        "462484d696d647978990a9a4e18f0c31fca8571c"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B e) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "4501eed1c47763e132e9590c6331ef1cc246819e"
                    ]
                },
                {
                    "command": [
                        "assert (Col C C B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ca20b4d75f16e9606dbed6f8c3fc6068cc9687f9"
                    ]
                },
                {
                    "command": [
                        "assert (Out C e E) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "c1dcb72c162382522f597ed411028784c7d06c5c"
                    ]
                },
                {
                    "command": [
                        "assert (OS e e C B) by (conclude lemma_samesidereflexive).",
                        "VernacExtend",
                        "8ab802cb13825e83f5c4d3644b1ef83397b68a86"
                    ]
                },
                {
                    "command": [
                        "assert (OS e E C B) by (conclude lemma_sameside2).",
                        "VernacExtend",
                        "1d7a0f03e826ced693af8ab10df78a8b395c311a"
                    ]
                },
                {
                    "command": [
                        "assert (OS e D C B) by (conclude lemma_samesidetransitive).",
                        "VernacExtend",
                        "3be3ce9b25a7ef7dbdfa07054eb51a566ecce6b8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e C D C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "213db6f53cbf2f4a902f4d51da951e76dab22b47"
                    ]
                },
                {
                    "command": [
                        "assert (eq e D) by (conclude proposition_07).",
                        "VernacExtend",
                        "6c1ef76952f82c4bc07eacbf5bb7e316d5cf7787"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "73a0ec8808263ea1679012f8a7c24745946973e6"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5261a666a4057f41bb56b794258442a624629d55"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}