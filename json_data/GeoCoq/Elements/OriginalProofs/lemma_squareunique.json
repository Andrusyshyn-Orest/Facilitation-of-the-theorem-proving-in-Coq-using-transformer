{
    "filename": "Elements/OriginalProofs/lemma_squareunique.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_squareparallelogram.",
            "VernacRequire",
            "fa9ea60772ccc3e3cda81446965b846300e8dc4b"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_euclidean}.",
            "VernacContext",
            "0443c67d18f567ce2b918c970b38dd8e0476662c"
        ],
        [
            "Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.",
            "VernacStartTheoremProof",
            "008e63622dc6d5b29a2ef8d9432e9c97ec7b8a1f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "2148e8d1b3705ba8167af335724ca192a709f62f"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.",
            "VernacExtend",
            "4b80dac59eabbdb62d87141315b43c0c2fc6a56d"
        ],
        [
            "assert (BetS B M D) by (conclude_def Midpoint ).",
            "VernacExtend",
            "3e53672ed4dc299c346b622237ae193028ef729f"
        ],
        [
            "assert (BetS A M C) by (conclude_def Midpoint ).",
            "VernacExtend",
            "95947e69ae03e53b6f11c5b6e3e092cc4bbc6bf5"
        ],
        [
            "assert (Per D A B) by (conclude_def SQ ).",
            "VernacExtend",
            "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
        ],
        [
            "assert (Per E A B) by (conclude_def SQ ).",
            "VernacExtend",
            "f229cf1bf92cc2873448f9b9497694a42359efea"
        ],
        [
            "assert (nCol D A B) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "6accdf93d3e5fcbfa98ecf49f2534bb1950d3db7"
        ],
        [
            "assert (nCol E A B) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "dda40c3e76360df8693e77b55711f7dd4c0fcaaf"
        ],
        [
            "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
        ],
        [
            "assert (Cong A B D A) by (conclude_def SQ ).",
            "VernacExtend",
            "6f9e879d813429cc89b0769fcca082f29c40397a"
        ],
        [
            "assert (Cong A B E A) by (conclude_def SQ ).",
            "VernacExtend",
            "2f0dae01115a978977ec3d0b8e957c5813960f88"
        ],
        [
            "assert (Cong E A A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0f541c9884b1ddd46ae4960e5cd4835e6dfa67fb"
        ],
        [
            "assert (Cong E A D A) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "ec00865021d4e1c52f1505df0e28b8cfbd5ab55d"
        ],
        [
            "assert (Cong A E A D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "65d369c9cc22d32fc46fa66fcbffc3dd131a8765"
        ],
        [
            "assert (CongA E A B D A B) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "f8608bb1ace06647e0f1268e2428c65c2eee3700"
        ],
        [
            "assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).",
            "VernacExtend",
            "257e372b035187606dbee6308ddca43008551ff3"
        ],
        [
            "assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "31c37013f8657565351f26d0ec7b738b61758c3e"
        ],
        [
            "assert (neq B E) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "4dbb01f45ca367df5c5f49f1729f9e038d94a5c4"
        ],
        [
            "assert (neq B M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "0330811a77681401738b0fa424e45f0f19c02786"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.",
            "VernacExtend",
            "ad10013ebe2fe13b4a9ccf91d890eeebeb56684f"
        ],
        [
            "assert (Cong B M B N) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "bdcc52c42c3524d3da7a135bf278985b93fbc509"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (neq B A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "f05572d51181c9202443ce99ec9c621f00191cb7"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Out B M D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5e84acd6137c3e6815850fc82f1e1d23ce0ca508"
        ],
        [
            "assert (Out B D M) by (conclude lemma_ray5).",
            "VernacExtend",
            "bd781a3d241b65af23517ce313cd5e92f4e05698"
        ],
        [
            "assert (nCol A B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "8d3898c74f026f52b5107597e9ad0834408beec8"
        ],
        [
            "assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "b50e2c30e7a00ba914b4a117f975a0c4b011a51f"
        ],
        [
            "assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "94c5cb64f4d4baaee30f8210149fc5a3cb3d73c2"
        ],
        [
            "assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "be792f5cdecad41da37d9e1c1e85735b50cf302b"
        ],
        [
            "assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "4dd3727880a0acfe8850dfbc1f95f7a722b9dbe4"
        ],
        [
            "assert (nCol A B E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "8d1bdfdb6299629f788a613b4a8cf1f08e8a1a56"
        ],
        [
            "assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "d459d4b6465add2988022071a0c3c4268debaf9e"
        ],
        [
            "assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "0587c657f652097b7146832f375a67ffb122c57f"
        ],
        [
            "assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "43fb1e5ed39b0ffc6de1165f1ebfaaf4c9781d5b"
        ],
        [
            "assert (Cong B A B A) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "501dea04bd06be0aa7f4f464411dd482febe3981"
        ],
        [
            "assert (Cong A M A N) by (conclude proposition_04).",
            "VernacExtend",
            "81ab7733e6b47298c2a6cf6aa676fed20d74f90c"
        ],
        [
            "assert (Per B C D) by (conclude_def SQ ).",
            "VernacExtend",
            "81f83cd13819d8ae219c260477b9a06a6536b8db"
        ],
        [
            "assert (Per B C E) by (conclude_def SQ ).",
            "VernacExtend",
            "a639066f96ba39b5b121a9a113526259d993b81b"
        ],
        [
            "assert (CongA B C E B C D) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "b5f5bbf458a0e0ff142490396240c6019f0ebc4f"
        ],
        [
            "assert (Cong A B C D) by (conclude_def SQ ).",
            "VernacExtend",
            "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
        ],
        [
            "assert (Cong A B C E) by (conclude_def SQ ).",
            "VernacExtend",
            "820a5bf51d48ac49faef2a177bd5627ae8c0dc5d"
        ],
        [
            "assert (Cong C E A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "ffcd00d8d99d14943ff099a22f4f7944599eacb9"
        ],
        [
            "assert (Cong C E C D) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "9f735ecefc8bf7eb0f9defb5736d006719b5025d"
        ],
        [
            "assert (nCol B C E) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "704046d27f1d50dab1cbf9d6e4b938e9e60be1cb"
        ],
        [
            "assert (nCol B C D) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
        ],
        [
            "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
        ],
        [
            "assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).",
            "VernacExtend",
            "223dbc0ad645220f3e222be31df9fb6bcf370bea"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (nCol B C D) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
        ],
        [
            "assert (nCol C B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "9929cc5845363b366a39bb043ec8260c57492012"
        ],
        [
            "assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "1e5e5ff36b888c02a178f415ae4cdb02c7d0f40a"
        ],
        [
            "assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "1f0ec8cf8a82e3fe12bb25254827a02b4c4c96aa"
        ],
        [
            "assert (nCol C B E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7408da522b267fb8e93eb1e0fdaa75115f090edf"
        ],
        [
            "assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "b0ca24b578965d47fd531e17a7646fe8643f6994"
        ],
        [
            "assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "5b9ac352eee82cedd82534901076f4188a7859c2"
        ],
        [
            "assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "e0890c986b30e201b318dc89b37c4564754b20a1"
        ],
        [
            "assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "3ddb3289956acabffcb1ae0cd61c14be7531666b"
        ],
        [
            "assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "b616c1a0def3ae8aa9dc3da2a1e3aa876bda56d1"
        ],
        [
            "assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "c685c9f001e56fe970889a6fa6e649f764a3a7c4"
        ],
        [
            "assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "571e667b7edec965df772b565e482f49953fb80e"
        ],
        [
            "assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).",
            "VernacExtend",
            "00b6e0c164df112431413b1bc2e2df4a563d254b"
        ],
        [
            "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
        ],
        [
            "assert (Cong M C N C) by (conclude (proposition_04 B M C B N C)).",
            "VernacExtend",
            "6650ba0da8c60c0777d3107520447f62fc657b38"
        ],
        [
            "assert (Cong A C A C) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "4e03037387b68aae11af367d5b093a719c4a5354"
        ],
        [
            "assert (BetS A N C) by (conclude lemma_betweennesspreserved).",
            "VernacExtend",
            "f4169c2493d11a090cf76f8e4b1c7a9aa73a87e0"
        ],
        [
            "assert (neq A M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "407201e66570093eecf4511ea06ce7ff3751330d"
        ],
        [
            "assert (Out A M C) by (conclude lemma_ray4).",
            "VernacExtend",
            "4b466f32126f1d21edd02447cf3b8b34cbf34fa1"
        ],
        [
            "assert (neq A N) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "7c279690583d30a21b29921bc1f00627effa669f"
        ],
        [
            "assert (Out A N C) by (conclude lemma_ray4).",
            "VernacExtend",
            "b9b36403a999e7e50c2843fb207dac9818a490de"
        ],
        [
            "assert (Out A C N) by (conclude lemma_ray5).",
            "VernacExtend",
            "f5f09cfb5bc1e1ccca37efb0cf524c345721f993"
        ],
        [
            "assert (Out A C M) by (conclude lemma_ray5).",
            "VernacExtend",
            "a894d1e3f1c7ab4e359b99ba3b9b1317ba3a546f"
        ],
        [
            "assert (eq M N) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "10d5eecf67421f539db8c8c62d837181b63460f4"
        ],
        [
            "assert (Out B N E) by (conclude lemma_ray5).",
            "VernacExtend",
            "c2f150e565c0ce191dbc7e07d4d10690e2c3c251"
        ],
        [
            "assert (Out B M D) by (conclude lemma_ray5).",
            "VernacExtend",
            "2fad1343059fe76a9da245f45b5e9fffa27c689d"
        ],
        [
            "assert (Out B M E) by (conclude cn_equalitysub).",
            "VernacExtend",
            "b49bf92ded1737bc45a6cbc03dfa62f23985ca74"
        ],
        [
            "assert (eq E D) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "6ed5f09f209d8b0c6b4047e3463ea8c99b85f84d"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_squareunique",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "2148e8d1b3705ba8167af335724ca192a709f62f"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "4b80dac59eabbdb62d87141315b43c0c2fc6a56d"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B M D) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "3e53672ed4dc299c346b622237ae193028ef729f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A M C) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "95947e69ae03e53b6f11c5b6e3e092cc4bbc6bf5"
                    ]
                },
                {
                    "command": [
                        "assert (Per D A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
                    ]
                },
                {
                    "command": [
                        "assert (Per E A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "f229cf1bf92cc2873448f9b9497694a42359efea"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D A B) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "6accdf93d3e5fcbfa98ecf49f2534bb1950d3db7"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E A B) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "dda40c3e76360df8693e77b55711f7dd4c0fcaaf"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B D A) by (conclude_def SQ ).",
                        "VernacExtend",
                        "6f9e879d813429cc89b0769fcca082f29c40397a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B E A) by (conclude_def SQ ).",
                        "VernacExtend",
                        "2f0dae01115a978977ec3d0b8e957c5813960f88"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E A A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0f541c9884b1ddd46ae4960e5cd4835e6dfa67fb"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E A D A) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "ec00865021d4e1c52f1505df0e28b8cfbd5ab55d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A E A D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "65d369c9cc22d32fc46fa66fcbffc3dd131a8765"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E A B D A B) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "f8608bb1ace06647e0f1268e2428c65c2eee3700"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).",
                        "VernacExtend",
                        "257e372b035187606dbee6308ddca43008551ff3"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "31c37013f8657565351f26d0ec7b738b61758c3e"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "4dbb01f45ca367df5c5f49f1729f9e038d94a5c4"
                    ]
                },
                {
                    "command": [
                        "assert (neq B M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "0330811a77681401738b0fa424e45f0f19c02786"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.",
                        "VernacExtend",
                        "ad10013ebe2fe13b4a9ccf91d890eeebeb56684f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B M B N) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "bdcc52c42c3524d3da7a135bf278985b93fbc509"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "f05572d51181c9202443ce99ec9c621f00191cb7"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Out B M D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5e84acd6137c3e6815850fc82f1e1d23ce0ca508"
                    ]
                },
                {
                    "command": [
                        "assert (Out B D M) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "bd781a3d241b65af23517ce313cd5e92f4e05698"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "8d3898c74f026f52b5107597e9ad0834408beec8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "b50e2c30e7a00ba914b4a117f975a0c4b011a51f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "94c5cb64f4d4baaee30f8210149fc5a3cb3d73c2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "be792f5cdecad41da37d9e1c1e85735b50cf302b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "4dd3727880a0acfe8850dfbc1f95f7a722b9dbe4"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "8d1bdfdb6299629f788a613b4a8cf1f08e8a1a56"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "d459d4b6465add2988022071a0c3c4268debaf9e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "0587c657f652097b7146832f375a67ffb122c57f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "43fb1e5ed39b0ffc6de1165f1ebfaaf4c9781d5b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A B A) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "501dea04bd06be0aa7f4f464411dd482febe3981"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A M A N) by (conclude proposition_04).",
                        "VernacExtend",
                        "81ab7733e6b47298c2a6cf6aa676fed20d74f90c"
                    ]
                },
                {
                    "command": [
                        "assert (Per B C D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "81f83cd13819d8ae219c260477b9a06a6536b8db"
                    ]
                },
                {
                    "command": [
                        "assert (Per B C E) by (conclude_def SQ ).",
                        "VernacExtend",
                        "a639066f96ba39b5b121a9a113526259d993b81b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C E B C D) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "b5f5bbf458a0e0ff142490396240c6019f0ebc4f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C E) by (conclude_def SQ ).",
                        "VernacExtend",
                        "820a5bf51d48ac49faef2a177bd5627ae8c0dc5d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "ffcd00d8d99d14943ff099a22f4f7944599eacb9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E C D) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "9f735ecefc8bf7eb0f9defb5736d006719b5025d"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C E) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "704046d27f1d50dab1cbf9d6e4b938e9e60be1cb"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).",
                        "VernacExtend",
                        "223dbc0ad645220f3e222be31df9fb6bcf370bea"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "9929cc5845363b366a39bb043ec8260c57492012"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "1e5e5ff36b888c02a178f415ae4cdb02c7d0f40a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "1f0ec8cf8a82e3fe12bb25254827a02b4c4c96aa"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7408da522b267fb8e93eb1e0fdaa75115f090edf"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "b0ca24b578965d47fd531e17a7646fe8643f6994"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "5b9ac352eee82cedd82534901076f4188a7859c2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "e0890c986b30e201b318dc89b37c4564754b20a1"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "3ddb3289956acabffcb1ae0cd61c14be7531666b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "b616c1a0def3ae8aa9dc3da2a1e3aa876bda56d1"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "c685c9f001e56fe970889a6fa6e649f764a3a7c4"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "571e667b7edec965df772b565e482f49953fb80e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).",
                        "VernacExtend",
                        "00b6e0c164df112431413b1bc2e2df4a563d254b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M C N C) by (conclude (proposition_04 B M C B N C)).",
                        "VernacExtend",
                        "6650ba0da8c60c0777d3107520447f62fc657b38"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A C) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "4e03037387b68aae11af367d5b093a719c4a5354"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A N C) by (conclude lemma_betweennesspreserved).",
                        "VernacExtend",
                        "f4169c2493d11a090cf76f8e4b1c7a9aa73a87e0"
                    ]
                },
                {
                    "command": [
                        "assert (neq A M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "407201e66570093eecf4511ea06ce7ff3751330d"
                    ]
                },
                {
                    "command": [
                        "assert (Out A M C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "4b466f32126f1d21edd02447cf3b8b34cbf34fa1"
                    ]
                },
                {
                    "command": [
                        "assert (neq A N) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "7c279690583d30a21b29921bc1f00627effa669f"
                    ]
                },
                {
                    "command": [
                        "assert (Out A N C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "b9b36403a999e7e50c2843fb207dac9818a490de"
                    ]
                },
                {
                    "command": [
                        "assert (Out A C N) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "f5f09cfb5bc1e1ccca37efb0cf524c345721f993"
                    ]
                },
                {
                    "command": [
                        "assert (Out A C M) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "a894d1e3f1c7ab4e359b99ba3b9b1317ba3a546f"
                    ]
                },
                {
                    "command": [
                        "assert (eq M N) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "10d5eecf67421f539db8c8c62d837181b63460f4"
                    ]
                },
                {
                    "command": [
                        "assert (Out B N E) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "c2f150e565c0ce191dbc7e07d4d10690e2c3c251"
                    ]
                },
                {
                    "command": [
                        "assert (Out B M D) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "2fad1343059fe76a9da245f45b5e9fffa27c689d"
                    ]
                },
                {
                    "command": [
                        "assert (Out B M E) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "b49bf92ded1737bc45a6cbc03dfa62f23985ca74"
                    ]
                },
                {
                    "command": [
                        "assert (eq E D) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "6ed5f09f209d8b0c6b4047e3463ea8c99b85f84d"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}