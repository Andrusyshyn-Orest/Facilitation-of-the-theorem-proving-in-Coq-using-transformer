{
    "filename": "Elements/OriginalProofs/lemma_lessthancongruence2.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_congruencetransitive.",
            "VernacRequire",
            "51129529bbbc08120ea2ee19d545c7c72dbb9da3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral}.",
            "VernacContext",
            "2b23404dca7c933c43ab174476f98a2dd3fed6cf"
        ],
        [
            "Lemma lemma_lessthancongruence2 : forall A B C D E F, Lt A B C D -> Cong A B E F -> Lt E F C D.",
            "VernacStartTheoremProof",
            "2e3f00dcf670fbcb9148de1d29ba73c3a21af615"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS C G D /\\ Cong C G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
            "VernacExtend",
            "99a21950ff3e34eaa4d5629700a776bfb7e88b0c"
        ],
        [
            "assert (Cong C G E F) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "2b710d1070b323c0497f6b1d259ffaa78169ca28"
        ],
        [
            "assert (Lt E F C D) by (conclude_def Lt ).",
            "VernacExtend",
            "5beb5b544d21fe789959dab0f232bb483bed71d8"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_lessthancongruence2",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS C G D /\\ Cong C G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "99a21950ff3e34eaa4d5629700a776bfb7e88b0c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C G E F) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "2b710d1070b323c0497f6b1d259ffaa78169ca28"
                    ]
                },
                {
                    "command": [
                        "assert (Lt E F C D) by (conclude_def Lt ).",
                        "VernacExtend",
                        "5beb5b544d21fe789959dab0f232bb483bed71d8"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}