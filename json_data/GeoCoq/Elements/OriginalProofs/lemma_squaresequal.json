{
    "filename": "Elements/OriginalProofs/lemma_squaresequal.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_squarerectangle.",
            "VernacRequire",
            "7527953e858e2d8abde8179e7ca95443fca0dc23"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:area}.",
            "VernacContext",
            "48edf41d85e65cd7bccfad58db3b077495160a72"
        ],
        [
            "Lemma lemma_squaresequal : forall A B C D a b c d, Cong A B a b -> SQ A B C D -> SQ a b c d -> EF A B C D a b c d.",
            "VernacStartTheoremProof",
            "80a5ea6d8232a31cdc24b83c2a4fd946b8a62a53"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Per D A B) by (conclude_def SQ ).",
            "VernacExtend",
            "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
        ],
        [
            "assert (Per d a b) by (conclude_def SQ ).",
            "VernacExtend",
            "1e11c3f81468fd7af73132574cdd07928ebdecfc"
        ],
        [
            "assert (CongA D A B d a b) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "8436f623139b4d8a85ce3284f5003d96224a1f92"
        ],
        [
            "assert (Cong A B D A) by (conclude_def SQ ).",
            "VernacExtend",
            "6f9e879d813429cc89b0769fcca082f29c40397a"
        ],
        [
            "assert (Cong a b d a) by (conclude_def SQ ).",
            "VernacExtend",
            "a744a0883c27ec3172cc84634ae7720022f9f726"
        ],
        [
            "assert (Cong D A A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "f94a7779bb8dd2669b8ad2f019fcb0d5048c1f4e"
        ],
        [
            "assert (Cong D A a b) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "a6432f0ebb633a274dc5bfc1abf7b359c79209cb"
        ],
        [
            "assert (Cong D A d a) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "5e2a65664f36df8d9c4fce0f29ac8e263f65c721"
        ],
        [
            "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "2148e8d1b3705ba8167af335724ca192a709f62f"
        ],
        [
            "assert (PG a b c d) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "f9fb320a9c194e8d34506fcd6968951d5ff9e4c6"
        ],
        [
            "assert (Par A B C D) by (conclude_def PG ).",
            "VernacExtend",
            "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
        ],
        [
            "assert (Par a b c d) by (conclude_def PG ).",
            "VernacExtend",
            "e5215e19352a08e53d71f24bae0fb764ced942ba"
        ],
        [
            "assert (nCol A B D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "04388792830e166d186fdd18208f19c1a4f9fe78"
        ],
        [
            "assert (nCol a b d) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "a7c4ddf264677149b821f8d9365546c4c3743f1c"
        ],
        [
            "assert (Cong A D a d) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "f760b299597c25d821012a72ab0dfa33c0209c7b"
        ],
        [
            "assert (Cong D B d b) by (conclude proposition_04).",
            "VernacExtend",
            "cc5f3af0171529e817b9b607ede2237a96fdfa8b"
        ],
        [
            "assert (Cong B D b d) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "51bff3f0e4f5031013bc35ac3988106345bc275a"
        ],
        [
            "assert (Triangle A B D) by (conclude_def Triangle ).",
            "VernacExtend",
            "fc3c8c2747131318d96fee3f1e453ebc8e51682a"
        ],
        [
            "assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "f10b72fd8220c9e54cbd746765ff1c705ce214f3"
        ],
        [
            "assert (ET A B D a b d) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "3739264c8b767b685f4f4c707df0c084219ea46b"
        ],
        [
            "assert (ET A B D b d a) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "9e04b936e55e7b2dd3eec07801913f6d56f0e5e1"
        ],
        [
            "assert (ET b d a A B D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "5528a9ac24c0432233152381cc007a5bb0f80cab"
        ],
        [
            "assert (ET b d a B D A) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "fbfa9e129531f509e4336125191ec1e614b069ea"
        ],
        [
            "assert (ET B D A b d a) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "a02642c4ec3515b0d45209fe0be767a9b32c4738"
        ],
        [
            "assert (Cong A B B C) by (conclude_def SQ ).",
            "VernacExtend",
            "b692bf2ecc3b5b4a96971c3217a968536551d252"
        ],
        [
            "assert (Cong a b b c) by (conclude_def SQ ).",
            "VernacExtend",
            "ba3fef7236940e5652efd3049ce1d5fe2cabe7b8"
        ],
        [
            "assert (Cong A B C D) by (conclude_def SQ ).",
            "VernacExtend",
            "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
        ],
        [
            "assert (Cong a b c d) by (conclude_def SQ ).",
            "VernacExtend",
            "43eb30b64a6c917b3b1d266bb894881092c114bc"
        ],
        [
            "assert (Cong B C A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "c5772ceeb2bf7d39e1347545ce375520a87878e8"
        ],
        [
            "assert (Cong B C a b) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "1bf42fabf53c8f6289c04b67a5c366994331187d"
        ],
        [
            "assert (Cong B C b c) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "58acbcadbe385629c7ef7a379ea08ba65ec4ac3a"
        ],
        [
            "assert (Cong C D A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "5160848b0468422b7ba49fe3a1bae3ea2917ff18"
        ],
        [
            "assert (Cong C D a b) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "c799a49cfd55f1ce54171dfe8d2a0ef96014cf51"
        ],
        [
            "assert (Cong C D c d) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "958777f3ec9b42007bef98b6a953653b080896bb"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "7222425f5c62261cc3318250522969eef3385737"
        ],
        [
            "assert (Triangle B C D) by (conclude_def Triangle ).",
            "VernacExtend",
            "40be11cd41aa12caddaf9318b260de2b0bc8d080"
        ],
        [
            "assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "3fdae5d05104049b51d81a9f05de91deb7d7cd29"
        ],
        [
            "assert (ET B C D b c d) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "09034107ce2409b932d95b94c6b1af4d09edd04d"
        ],
        [
            "assert (ET B C D b d c) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "6e9c80705b27a4dd7f7b1600150913e23a7c83d3"
        ],
        [
            "assert (ET b d c B C D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "389b2706c584e62798e65ade65cad2151bb11e60"
        ],
        [
            "assert (ET b d c B D C) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "3f974a45927e80ef34ec953206f1ba6cd601f0ba"
        ],
        [
            "assert (ET B D C b d c) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "fbdf2dd4a739281247a9d11f00f5682a79eb365a"
        ],
        [
            "assert (RE A B C D) by (conclude lemma_squarerectangle).",
            "VernacExtend",
            "10db7a0068abea819c85edd5e03324d01350445e"
        ],
        [
            "assert (CR A C B D) by (conclude_def RE ).",
            "VernacExtend",
            "f5eeb065818fc9a4de86552abbb4020a4069ae07"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
            "VernacExtend",
            "41751579e3286704b7a7a049b78650364170be4c"
        ],
        [
            "assert (RE a b c d) by (conclude lemma_squarerectangle).",
            "VernacExtend",
            "dbfc194f26d67ec9f5880b0682eb7bd9a6009277"
        ],
        [
            "assert (CR a c b d) by (conclude_def RE ).",
            "VernacExtend",
            "d7d704268051ed4ecacd15f63e4e7f433cd8a883"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.",
            "VernacExtend",
            "36c1334694f63327f3e2e79132e068cf30f07b9a"
        ],
        [
            "assert (EF B A D C b a d c) by (conclude axiom_paste3).",
            "VernacExtend",
            "fbef9279d8507aed9486b2c2ccd45cca6cdeddd2"
        ],
        [
            "assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "8d0dbbe19e2e254a35f0c1b97ca7825fcf2d3b63"
        ],
        [
            "assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "4a177753de13478d910c1e6e82b32b5408d705f7"
        ],
        [
            "assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "e3dba631e996f06bc999c184c0762e3f5f669690"
        ],
        [
            "assert (EF A B C D a b c d) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "bf44314e0f58e6868e2c70963df422f9c80f3ece"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_squaresequal",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Per D A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
                    ]
                },
                {
                    "command": [
                        "assert (Per d a b) by (conclude_def SQ ).",
                        "VernacExtend",
                        "1e11c3f81468fd7af73132574cdd07928ebdecfc"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D A B d a b) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "8436f623139b4d8a85ce3284f5003d96224a1f92"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B D A) by (conclude_def SQ ).",
                        "VernacExtend",
                        "6f9e879d813429cc89b0769fcca082f29c40397a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong a b d a) by (conclude_def SQ ).",
                        "VernacExtend",
                        "a744a0883c27ec3172cc84634ae7720022f9f726"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D A A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "f94a7779bb8dd2669b8ad2f019fcb0d5048c1f4e"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D A a b) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "a6432f0ebb633a274dc5bfc1abf7b359c79209cb"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D A d a) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "5e2a65664f36df8d9c4fce0f29ac8e263f65c721"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "2148e8d1b3705ba8167af335724ca192a709f62f"
                    ]
                },
                {
                    "command": [
                        "assert (PG a b c d) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "f9fb320a9c194e8d34506fcd6968951d5ff9e4c6"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def PG ).",
                        "VernacExtend",
                        "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
                    ]
                },
                {
                    "command": [
                        "assert (Par a b c d) by (conclude_def PG ).",
                        "VernacExtend",
                        "e5215e19352a08e53d71f24bae0fb764ced942ba"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "04388792830e166d186fdd18208f19c1a4f9fe78"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a b d) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "a7c4ddf264677149b821f8d9365546c4c3743f1c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D a d) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "f760b299597c25d821012a72ab0dfa33c0209c7b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D B d b) by (conclude proposition_04).",
                        "VernacExtend",
                        "cc5f3af0171529e817b9b607ede2237a96fdfa8b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D b d) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "51bff3f0e4f5031013bc35ac3988106345bc275a"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A B D) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "fc3c8c2747131318d96fee3f1e453ebc8e51682a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 A B D a b d) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "f10b72fd8220c9e54cbd746765ff1c705ce214f3"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D a b d) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "3739264c8b767b685f4f4c707df0c084219ea46b"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D b d a) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "9e04b936e55e7b2dd3eec07801913f6d56f0e5e1"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d a A B D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "5528a9ac24c0432233152381cc007a5bb0f80cab"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d a B D A) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "fbfa9e129531f509e4336125191ec1e614b069ea"
                    ]
                },
                {
                    "command": [
                        "assert (ET B D A b d a) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "a02642c4ec3515b0d45209fe0be767a9b32c4738"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B C) by (conclude_def SQ ).",
                        "VernacExtend",
                        "b692bf2ecc3b5b4a96971c3217a968536551d252"
                    ]
                },
                {
                    "command": [
                        "assert (Cong a b b c) by (conclude_def SQ ).",
                        "VernacExtend",
                        "ba3fef7236940e5652efd3049ce1d5fe2cabe7b8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
                    ]
                },
                {
                    "command": [
                        "assert (Cong a b c d) by (conclude_def SQ ).",
                        "VernacExtend",
                        "43eb30b64a6c917b3b1d266bb894881092c114bc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "c5772ceeb2bf7d39e1347545ce375520a87878e8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C a b) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "1bf42fabf53c8f6289c04b67a5c366994331187d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C b c) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "58acbcadbe385629c7ef7a379ea08ba65ec4ac3a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "5160848b0468422b7ba49fe3a1bae3ea2917ff18"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D a b) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "c799a49cfd55f1ce54171dfe8d2a0ef96014cf51"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D c d) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "958777f3ec9b42007bef98b6a953653b080896bb"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "7222425f5c62261cc3318250522969eef3385737"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle B C D) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "40be11cd41aa12caddaf9318b260de2b0bc8d080"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 B C D b c d) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "3fdae5d05104049b51d81a9f05de91deb7d7cd29"
                    ]
                },
                {
                    "command": [
                        "assert (ET B C D b c d) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "09034107ce2409b932d95b94c6b1af4d09edd04d"
                    ]
                },
                {
                    "command": [
                        "assert (ET B C D b d c) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "6e9c80705b27a4dd7f7b1600150913e23a7c83d3"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d c B C D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "389b2706c584e62798e65ade65cad2151bb11e60"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d c B D C) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "3f974a45927e80ef34ec953206f1ba6cd601f0ba"
                    ]
                },
                {
                    "command": [
                        "assert (ET B D C b d c) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "fbdf2dd4a739281247a9d11f00f5682a79eb365a"
                    ]
                },
                {
                    "command": [
                        "assert (RE A B C D) by (conclude lemma_squarerectangle).",
                        "VernacExtend",
                        "10db7a0068abea819c85edd5e03324d01350445e"
                    ]
                },
                {
                    "command": [
                        "assert (CR A C B D) by (conclude_def RE ).",
                        "VernacExtend",
                        "f5eeb065818fc9a4de86552abbb4020a4069ae07"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "41751579e3286704b7a7a049b78650364170be4c"
                    ]
                },
                {
                    "command": [
                        "assert (RE a b c d) by (conclude lemma_squarerectangle).",
                        "VernacExtend",
                        "dbfc194f26d67ec9f5880b0682eb7bd9a6009277"
                    ]
                },
                {
                    "command": [
                        "assert (CR a c b d) by (conclude_def RE ).",
                        "VernacExtend",
                        "d7d704268051ed4ecacd15f63e4e7f433cd8a883"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (BetS a m c /\\ BetS b m d)) by (conclude_def CR );destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "36c1334694f63327f3e2e79132e068cf30f07b9a"
                    ]
                },
                {
                    "command": [
                        "assert (EF B A D C b a d c) by (conclude axiom_paste3).",
                        "VernacExtend",
                        "fbef9279d8507aed9486b2c2ccd45cca6cdeddd2"
                    ]
                },
                {
                    "command": [
                        "assert (EF B A D C a b c d) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "8d0dbbe19e2e254a35f0c1b97ca7825fcf2d3b63"
                    ]
                },
                {
                    "command": [
                        "assert (EF a b c d B A D C) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "4a177753de13478d910c1e6e82b32b5408d705f7"
                    ]
                },
                {
                    "command": [
                        "assert (EF a b c d A B C D) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "e3dba631e996f06bc999c184c0762e3f5f669690"
                    ]
                },
                {
                    "command": [
                        "assert (EF A B C D a b c d) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "bf44314e0f58e6868e2c70963df422f9c80f3ece"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}