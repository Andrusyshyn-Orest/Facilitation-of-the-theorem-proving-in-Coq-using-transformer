{
    "filename": "Elements/OriginalProofs/proposition_47A.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_squareparallelogram.",
            "VernacRequire",
            "fa9ea60772ccc3e3cda81446965b846300e8dc4b"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.",
            "VernacRequire",
            "0c2eb96efb1ebf9be576ec12a4a711f713c56ac0"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_erectedperpendicularunique.",
            "VernacRequire",
            "75978cac9c53e375c5ab54780dbc301e58c92499"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_twoperpsparallel.",
            "VernacRequire",
            "81f24059fb7528f4699d0320cf2e2ca545e24a9f"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.",
            "VernacRequire",
            "fc76f0b06e8a9ade925f50f5127befabbc9bbdfe"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_altitudeofrighttriangle.",
            "VernacRequire",
            "bd238004661be4a62e8adbbc74bf0484cf3a92ed"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_47A : forall A B C D E, Triangle A B C -> Per B A C -> SQ B C E D -> TS D C B A -> exists X Y, PG B X Y D /\\ BetS B X C /\\ PG X C E Y /\\ BetS D Y E /\\ BetS Y X A /\\ Per D Y A.",
            "VernacStartTheoremProof",
            "8cac12a43e0dd779c084646546eadb535edfabcc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists N, (BetS D N A /\\ Col C B N /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [N];spliter.",
            "VernacExtend",
            "63f5457194ab725afccdd8c39039024a9ec78483"
        ],
        [
            "assert (Per C A B) by (conclude lemma_8_2).",
            "VernacExtend",
            "581a2ac7aa69a977dddccc1b6608972b8cf95025"
        ],
        [
            "assert (nCol C A B) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "de961bf6743a53ec8900fe2c634b421f29ee60f6"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "assert (Cong B C E D) by (conclude_def SQ ).",
            "VernacExtend",
            "98fe094b5a924f80166893aef884bbc5f1636e3d"
        ],
        [
            "assert (neq E D) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "5cecb8a4149559d4f3cb0802aa9070888fbbd692"
        ],
        [
            "assert (neq D E) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "442089e1669e0153e6cbac0113cb9338319b92ca"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists q, (BetS D q A /\\ Col C B q /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [q];spliter.",
            "VernacExtend",
            "384eb854d1cb5f4e07e6be7caf18f0affc71e5f6"
        ],
        [
            "assert (PG B C E D) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "6e85b6a042d46999eb57f3d44a973dfb2b3b3ea8"
        ],
        [
            "assert (Par B C E D) by (conclude_def PG ).",
            "VernacExtend",
            "a6a12c800fe6d2714d3034e6af7e7d6e2e291b15"
        ],
        [
            "assert (~ Meet B C E D) by (conclude_def Par ).",
            "VernacExtend",
            "24a98f704d6c41d7718d11935a1a38c24a81549e"
        ],
        [
            "assert (~ eq A E).",
            "VernacExtend",
            "4bec86f0fc1a1767aa9cd1975f8f80796815a7e7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS D q E) by (conclude cn_equalitysub).",
            "VernacExtend",
            "852b79497ac22db397c92ee423d955e5f0d05f3e"
        ],
        [
            "assert (Col D q E) by (conclude_def Col ).",
            "VernacExtend",
            "acdcc99d77f2a62e36072e9c592ae9792b677e5f"
        ],
        [
            "assert (Col E D q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "19400314c6f4cc492d4c656fd666a0b5e50104cd"
        ],
        [
            "assert (Col B C q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "74cb69834e34f0647e199445f0fa322e2edcbbb9"
        ],
        [
            "assert (Meet B C E D) by (conclude_def Meet ).",
            "VernacExtend",
            "1e45ccbb441441e269db7e0f520b3f41b473a535"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Col D E A).",
            "VernacExtend",
            "94316e9ac3f0fbf13ed026df7f502b9cbaa3c6af"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col D A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a86b083608bdcdff75c296635c1ece4f05606712"
        ],
        [
            "assert (Col D q A) by (conclude_def Col ).",
            "VernacExtend",
            "8845afbd6b922c26650fdd9d6afbbfb434bb4983"
        ],
        [
            "assert (Col D A q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "42bbba0aa3f59916618cf7afe4c41db86d1d6fba"
        ],
        [
            "assert (neq D A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "838197a1011d387c4f386edd9c052ec4fb690362"
        ],
        [
            "assert (Col A E q) by (conclude lemma_collinear4).",
            "VernacExtend",
            "2c066901f80c9e8bddf18739795ff6681a15f66b"
        ],
        [
            "assert (Col q A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "8ea0f60de9745f22575785c4858bd1526b4155ed"
        ],
        [
            "assert (Col q A D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6e3e51c0760ec8b662819fa92b915fa6994285db"
        ],
        [
            "assert (neq q A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "61c6aa95cdd0ed66c4458be6934f9ef48e463fa9"
        ],
        [
            "assert (Col A E D) by (conclude lemma_collinear4).",
            "VernacExtend",
            "7409cdc201512f81a6b024bec03ee9ad03743937"
        ],
        [
            "assert (Col A E q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "606cff65d74d8aa9348e680516231c491bd12ac8"
        ],
        [
            "assert (Col E D q) by (conclude lemma_collinear4).",
            "VernacExtend",
            "467ebf5857a4d50586d438a22bc0e35ac0fbd45d"
        ],
        [
            "assert (Col B C q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "74cb69834e34f0647e199445f0fa322e2edcbbb9"
        ],
        [
            "assert (Meet B C E D) by (conclude_def Meet ).",
            "VernacExtend",
            "1e45ccbb441441e269db7e0f520b3f41b473a535"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists L, Perp_at A L D E L) by (conclude proposition_12);destruct Tf as [L];spliter.",
            "VernacExtend",
            "ae062dd0a9c152fe1c30a61ec0a354f433f0eafa"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists p, (Col A L L /\\ Col D E L /\\ Col D E p /\\ Per p L A)) by (conclude_def Perp_at );destruct Tf as [p];spliter.",
            "VernacExtend",
            "dd8ddcb4792ad2ee17765c4ff824a12d0a69b341"
        ],
        [
            "assert (Per A L p) by (conclude lemma_8_2).",
            "VernacExtend",
            "4afaff72886f8a6a1f54b3555ecf779c4bcf9cb6"
        ],
        [
            "assert (~ eq B N).",
            "VernacExtend",
            "574cbc0ae3449b4ea5805957dc17b2e05434ef7e"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS D B A) by (conclude cn_equalitysub).",
            "VernacExtend",
            "2c293a79798ba4c97ee8bebcf92ed63e578e8240"
        ],
        [
            "assert (Col D B A) by (conclude_def Col ).",
            "VernacExtend",
            "2b457cbcd5c9139c7590aef2c4d87922dbffe478"
        ],
        [
            "assert (Per D B C) by (conclude_def SQ ).",
            "VernacExtend",
            "cb740d023fccd2687e859812a64167810710aa6a"
        ],
        [
            "assert (Per A B C) by (conclude lemma_collinearright).",
            "VernacExtend",
            "10adb8e0060f7eeceb5071d0b5abb875c3ab7110"
        ],
        [
            "assert (~ Per C A B) by (conclude lemma_8_7).",
            "VernacExtend",
            "67d6acf98dea988277371c60ca98ca55a52e8739"
        ],
        [
            "assert (Per C A B) by (conclude lemma_8_2).",
            "VernacExtend",
            "581a2ac7aa69a977dddccc1b6608972b8cf95025"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par B C E D) by (conclude_def PG ).",
            "VernacExtend",
            "a6a12c800fe6d2714d3034e6af7e7d6e2e291b15"
        ],
        [
            "assert (Par B C D E) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "2f35f72d97a9137886e8d07689383fdd67845ee3"
        ],
        [
            "assert (Par D E B C) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "0a2ba8e3d95cda993df9b3251455d8c5fe05c60f"
        ],
        [
            "assert (Par D E C B) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "0f2088434dce8037c539753fead83c10b3e8b7e0"
        ],
        [
            "assert (neq N B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "8795820648796ae339000222fa60854a8d5c7d45"
        ],
        [
            "assert (Par D E N B) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "6a1ff4cf4253f2e4c2c8f23f7e077f3b213a5afd"
        ],
        [
            "assert (Par D E B N) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "959b7cba56135ddca8bd18ba316cd918a2b08915"
        ],
        [
            "assert (TP D E B N) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "d5846a63b6b9ff7a733aee6d132dc5ceb33f709a"
        ],
        [
            "assert (OS B N D E) by (conclude_def TP ).",
            "VernacExtend",
            "5adb67ddb8cee35fa12e2267ded00f79772f26fa"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Col D D E) by (conclude_def Col ).",
            "VernacExtend",
            "b6e5214419dd71cd0e585c0cab2fbc217a2491ab"
        ],
        [
            "assert (neq D N) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "0192118b85129764a6b16321d24e5fa4fdd75322"
        ],
        [
            "assert (Out D N A) by (conclude lemma_ray4).",
            "VernacExtend",
            "3da04780744f0cb3d471ae77eefe6c2b06a41b69"
        ],
        [
            "assert (OS B A D E) by (conclude lemma_sameside2).",
            "VernacExtend",
            "47d0a0efb8d167327fd2fa62a07a8f036bcc77cd"
        ],
        [
            "assert (OS B A E D) by (conclude lemma_samesideflip).",
            "VernacExtend",
            "767939d5ad19236a338f1334e1e9c42c07df52ea"
        ],
        [
            "assert (OS A B E D) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "b5e18d46aa6f7e48cb898b6fe9e7e7c723768939"
        ],
        [
            "assert (~ eq D L).",
            "VernacExtend",
            "f9eb9f8e7a815f86c08ba416ee438f148e89d45f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Per A D p) by (conclude cn_equalitysub).",
            "VernacExtend",
            "fea65ce6a2f6a569d4653d363dfb6ec5e0e5cea2"
        ],
        [
            "assert (Per p D A) by (conclude lemma_8_2).",
            "VernacExtend",
            "3168884fc0867bee58503bffa06a7bd7f8234401"
        ],
        [
            "assert (Col p D E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "894cdbd32bc561400b40dd35038da38c9241b590"
        ],
        [
            "assert (Per E D A) by (conclude lemma_collinearright).",
            "VernacExtend",
            "6758ac253d4a8c6898c3bcff39118bcaba102086"
        ],
        [
            "assert (Per E D B) by (conclude_def SQ ).",
            "VernacExtend",
            "f79b2df4e53dc29cb51e292d0fbadf97b145991e"
        ],
        [
            "assert (Out D A B) by (conclude lemma_erectedperpendicularunique).",
            "VernacExtend",
            "d483de31a9353dd3d5218228ae56bce1c3525091"
        ],
        [
            "assert (Col D A B) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "827f98a81983711230e24a6c3ddacd27f544ea63"
        ],
        [
            "assert (Col A D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "edc33073f65f8c33396bd233388052f607d9e550"
        ],
        [
            "assert (Col D N A) by (conclude_def Col ).",
            "VernacExtend",
            "f74dde5992814d8ea265d0fc8b9b1eec7f6fd433"
        ],
        [
            "assert (Col A D N) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f22da6fb2510088138aca217810eb7ec1e251c37"
        ],
        [
            "assert (neq D A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "838197a1011d387c4f386edd9c052ec4fb690362"
        ],
        [
            "assert (neq A D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "a92ee1ba0241d520bce35a627b0053c54c563b2f"
        ],
        [
            "assert (Col D B N) by (conclude lemma_collinear4).",
            "VernacExtend",
            "53913efe7d026324469d5ca1171255a2373ca42a"
        ],
        [
            "assert (Col N B C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "1cd8b188e177b4f2f88103d88a123ed80e5f181a"
        ],
        [
            "assert (Col N B D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "0ef33fcb99e878a3b745c89c40e61d8bb12be618"
        ],
        [
            "assert (Col B C D) by (conclude lemma_collinear4).",
            "VernacExtend",
            "e1aa85fef2a9bbe737fa55e517a84ebf4861dca2"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "17673ec00bd63bf4828f17d80d347c13bec5f928"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq L D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "964f79fa1b1e2c0ccd64e361dbbfaba1bf05c64f"
        ],
        [
            "assert (Par B C E D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "0159a1b5b8abe71c4fbd61d1519cb8ed6980090a"
        ],
        [
            "assert (Col E D L) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "182fd9b45330a0718d8ea2a7756c2a36000b728c"
        ],
        [
            "assert (Par B C L D) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "1f4945b6c922fe73551424320ab2e4ba737975a8"
        ],
        [
            "assert (Par L D B C) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "91be8ab5bc61ac5be699cb4cff13c58632906be0"
        ],
        [
            "assert (TP B C L D) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "9ed2efe47359e6e531f76928bc7fbc54c4ad5d43"
        ],
        [
            "assert (OS L D B C) by (conclude_def TP ).",
            "VernacExtend",
            "cbe5202a1beaa910276d8c36124e4560c901fd44"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "7222425f5c62261cc3318250522969eef3385737"
        ],
        [
            "assert (Col B C N) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ddd4d8e1e0e3bcfbd41aaa4e2b5ca69670ebbc41"
        ],
        [
            "assert (TS D B C A) by (conclude_def TS ).",
            "VernacExtend",
            "d2fdc83c319bac02bb39eaf1627bfaf4ff3e9de0"
        ],
        [
            "assert (TS L B C A) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "1f5d74ed14973656f1fd1147df1513c4dbd4477b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS L M A /\\ Col B C M /\\ nCol B C L)) by (conclude_def TS );destruct Tf as [M];spliter.",
            "VernacExtend",
            "cbeaeec55e575fad0a8ead94fa5cbd3d0b48d4d0"
        ],
        [
            "assert (neq D E) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "04b64505fd972a8ffb8ebb03eba3f2849abe1627"
        ],
        [
            "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e61047105ab8e4e585d40360238f2bc08382ae40"
        ],
        [
            "assert (neq L M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "8cbfbb597291172ccd6e03aec09f99725e271ff0"
        ],
        [
            "assert (Out L M A) by (conclude lemma_ray4).",
            "VernacExtend",
            "43ef35ba4693d71d90c3d89a936cfc1f4ca410d2"
        ],
        [
            "assert (Out L A M) by (conclude lemma_ray5).",
            "VernacExtend",
            "758b3a0e573cc05981444dbd7e05e13237da9282"
        ],
        [
            "assert (Per E D B) by (conclude_def SQ ).",
            "VernacExtend",
            "f79b2df4e53dc29cb51e292d0fbadf97b145991e"
        ],
        [
            "assert (Col E D p) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b095ea63a64d99157cbdce5a8441f03f60e27125"
        ],
        [
            "assert (Col E D L) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "182fd9b45330a0718d8ea2a7756c2a36000b728c"
        ],
        [
            "assert (Col D p L) by (conclude lemma_collinear4).",
            "VernacExtend",
            "cc912be982287c15cff4cb09a37c00b92d49dd73"
        ],
        [
            "assert (Col p L D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c5e4e1975ac0fd98bc6b3465484b02b5b0f600b0"
        ],
        [
            "assert (Per D L A) by (conclude lemma_collinearright).",
            "VernacExtend",
            "819b65c71ceecb53302a04be8d06c79e18983d67"
        ],
        [
            "assert (Per D L M) by (conclude lemma_8_3).",
            "VernacExtend",
            "9e5baa7b467fd32d25a166739e1027faed546182"
        ],
        [
            "assert (~ eq B M).",
            "VernacExtend",
            "558ae44d9127874dbc5a1887d43a7e206beb061b"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Per D L B) by (conclude cn_equalitysub).",
            "VernacExtend",
            "b7cdd92a3d2c24383129fcddec1b32e97bef7134"
        ],
        [
            "assert (Per L D B) by (conclude lemma_collinearright).",
            "VernacExtend",
            "cfc51fd5ce0ede5260e3d1a8dd1acd870f63e160"
        ],
        [
            "assert (Per B D L) by (conclude lemma_8_2).",
            "VernacExtend",
            "2311552c35f2e2f96a642bb8fe3eaa4d9d279244"
        ],
        [
            "assert (~ Per B D L) by (conclude lemma_8_7).",
            "VernacExtend",
            "bc1dac7b6f498d0f6ed154f3f1dd7fc2f20beb35"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq M B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "795095023af8ed74cf302ded1f9e7c631fa6155d"
        ],
        [
            "assert (Par L D C B) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "9460ee2db2d933487bc0fc1460b1620bfaf62420"
        ],
        [
            "assert (Col C B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c4e234e367413ef16013499457a5aa51ac86ab40"
        ],
        [
            "assert (Par L D M B) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "25254dfd8cca551e489acffecbbd2213f561f5df"
        ],
        [
            "assert (Par L D B M) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "c777e5a0673a2745158c14e78a4e23bac039f215"
        ],
        [
            "assert (Par B M L D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "a3aba3f7acfeb85d64c8e7c788bd8c739630f7da"
        ],
        [
            "assert (Par B M D L) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "fd5035b9ab40d6012a781d6f6d0a9a3fa0ee34f3"
        ],
        [
            "assert (Par D L B M) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "e9b586409be6283fd63a7f2581d2bd6b05db2fc3"
        ],
        [
            "assert (TP D L B M) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "86230cbd9db0531a6e06f84887c4110255748d52"
        ],
        [
            "assert (OS B M D L) by (conclude_def TP ).",
            "VernacExtend",
            "8b370cf739596545ef2159bc4213d40420e1c40f"
        ],
        [
            "assert (Par B M L D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "a3aba3f7acfeb85d64c8e7c788bd8c739630f7da"
        ],
        [
            "assert (Per L D B) by (conclude lemma_collinearright).",
            "VernacExtend",
            "cfc51fd5ce0ede5260e3d1a8dd1acd870f63e160"
        ],
        [
            "assert (Per B D L) by (conclude lemma_8_2).",
            "VernacExtend",
            "2311552c35f2e2f96a642bb8fe3eaa4d9d279244"
        ],
        [
            "assert (Par B D L M) by (conclude lemma_twoperpsparallel).",
            "VernacExtend",
            "18da081690d370181edc2759b1eafc3a4ef99cac"
        ],
        [
            "assert (Par B D M L) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "c31e5e37e43d0fde18ae6180d2ea819cc2d888f6"
        ],
        [
            "assert (PG B M L D) by (conclude_def PG ).",
            "VernacExtend",
            "8c4d00192e7715c0ebc9f9b3aa1058cd19a19b76"
        ],
        [
            "assert (Par M L B D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "01c382161a164afb0aca90062348525038cf1866"
        ],
        [
            "assert (TP M L B D) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "c99ff4099dc6ae39fadc9272ed256545058ed1d1"
        ],
        [
            "assert (OS B D M L) by (conclude_def TP ).",
            "VernacExtend",
            "43d7173c523efbeeadf91f02e078c2a450637259"
        ],
        [
            "assert (BetS A M L) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "64c069b61ee61b8131ad9f9262cc46286701c98c"
        ],
        [
            "assert (Par M B L D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "51df8bddf357a2308710ea9d9ea08ebe333eabb1"
        ],
        [
            "assert (CongA A M B M L D) by (conclude proposition_29C).",
            "VernacExtend",
            "ee0e39f4163ffe0677b8f44aff632ebdb303b104"
        ],
        [
            "assert (Per M L D) by (conclude lemma_8_2).",
            "VernacExtend",
            "b2f325c1a9d8fa9042311d2acc13a52cf910b04f"
        ],
        [
            "assert (Per A M B) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "06225c49f32355f13c7bc16c984cab7a3eb824a1"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col B C B) by (conclude_def Col ).",
            "VernacExtend",
            "b9712bc9f35cfd97230afedc7bbe6a97f60723fa"
        ],
        [
            "assert (BetS B M C) by (conclude lemma_altitudeofrighttriangle).",
            "VernacExtend",
            "2b312136333ebf242960870e2bf6b0d821e1035f"
        ],
        [
            "assert (~ eq M C).",
            "VernacExtend",
            "c3b3b99cfa368f2ed745851ad05b026001c08318"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Per A C B) by (conclude cn_equalitysub).",
            "VernacExtend",
            "4ea8a44fc4477ff0b8004471849f2253065c054c"
        ],
        [
            "assert (~ Per B A C) by (conclude lemma_8_7).",
            "VernacExtend",
            "25d2388e1decafd72a0843fffc077e69376c767e"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ eq L E).",
            "VernacExtend",
            "c14a9ee477c729939f42b17ebea62ec5c011114f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Par B D C E) by (conclude_def PG ).",
            "VernacExtend",
            "0492126efec3f51f3bd2a2e6c35e614cf4fb6c2f"
        ],
        [
            "assert (Par C E B D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "1940a6ab43fb7f4581717f8c8e60ec6db5602df0"
        ],
        [
            "assert (Par M E B D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "82c749d1162799ceee8091b62bf6f7fe65768c9c"
        ],
        [
            "assert (Par B D M E) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "f8509c4ea67f96b951636e94df752ea8080f32cb"
        ],
        [
            "assert (Par B D C E) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "3e941d5371a450dd1a82ec0aba4289a91242ef24"
        ],
        [
            "assert (Par B D E C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "cb1ce97a98090ac0bea55931b9779fb1f78d97dd"
        ],
        [
            "assert (Par B D E M) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "7561134b6877ec009e21a4cf08759668c9c2cd11"
        ],
        [
            "assert (Col E C M) by (conclude lemma_Playfair).",
            "VernacExtend",
            "c82956a7116b9d3dcdbdffcc99f7818abb365ad0"
        ],
        [
            "assert (Col M C E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f699d0519b4d4dc11e7ebf80ed227bedc6628079"
        ],
        [
            "assert (Col M C B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "36c11ae0ed45e0592664ffa86b3d4a80bbf6aaaa"
        ],
        [
            "assert (Col C E B) by (conclude lemma_collinear4).",
            "VernacExtend",
            "ce7f51ec132cdb598d76f6755960277e04eb023f"
        ],
        [
            "assert (Col B C E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f8b4c03747eb11dc59b3f950807bc383f63bb430"
        ],
        [
            "assert (nCol B C E) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "397510e06c3147f41fe17c93533b73115bad451f"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par B M L D) by (conclude_def PG ).",
            "VernacExtend",
            "72a149fb257dd0e54bff562c5a5b323732cb846f"
        ],
        [
            "assert (Par B M D L) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "fd5035b9ab40d6012a781d6f6d0a9a3fa0ee34f3"
        ],
        [
            "assert (Col D L E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6a31110730796fc76daab6b4e804f36078ff13fe"
        ],
        [
            "assert (neq E L) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e2a5004b9dd188e8e719dd58f57ad52630c514cc"
        ],
        [
            "assert (Par B M E L) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "81cfa781d7f6f01439fe24995a4dabdadc8ef56a"
        ],
        [
            "assert (Par E L B M) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "3ff31a6e9246847124ce2c65cb08a93166abd8c7"
        ],
        [
            "assert (Col B M C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "1642e09fbdd4d69123593e29b778308cf2ef2d1c"
        ],
        [
            "assert (neq C M) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d8c47da8a9142b14f0728721ea797a85bcf6f30c"
        ],
        [
            "assert (Par E L C M) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "9add24ca0d936a4982bb76eff643c171341e811c"
        ],
        [
            "assert (Par C M E L) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "79472ddcd6b553982a6378403aa3232e135d1f07"
        ],
        [
            "assert (Par M C E L) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "47a9c2c60a32a0d727f33092f00120eb9cd3a2cd"
        ],
        [
            "assert (Col D L E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6a31110730796fc76daab6b4e804f36078ff13fe"
        ],
        [
            "assert (Per E L M) by (conclude lemma_collinearright).",
            "VernacExtend",
            "b07ca9b05dd39e88a3e6ddb5c5d0ef662ba17b4f"
        ],
        [
            "assert (Per M L E) by (conclude lemma_8_2).",
            "VernacExtend",
            "f5d91152be08d659998333053289f385220d9272"
        ],
        [
            "assert (Per C E D) by (conclude_def SQ ).",
            "VernacExtend",
            "ed10f1fb8f57f81cbb12ebdc15c04392c0c7fe99"
        ],
        [
            "assert (Per D E C) by (conclude lemma_8_2).",
            "VernacExtend",
            "39568ae30283dbccf519d96bbf2e4b979cf6e2f3"
        ],
        [
            "assert (Per L E C) by (conclude lemma_collinearright).",
            "VernacExtend",
            "aa600872e401d38f59a696f868e7c33780c67dee"
        ],
        [
            "assert (Par M C L E) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "8c18d8d863f0588a529a4e45297f3b9fd42c571a"
        ],
        [
            "assert (Par L E M C) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "ab07395e3b94c03bebbd4efee840843e659135da"
        ],
        [
            "assert (TP L E M C) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "caec121719b8e83f795f9d65f8ac15eb9d494978"
        ],
        [
            "assert (OS M C L E) by (conclude_def TP ).",
            "VernacExtend",
            "003a96ff9a853e5bbfac4300560bdc4a9aee8b49"
        ],
        [
            "assert (Par M L E C) by (conclude lemma_twoperpsparallel).",
            "VernacExtend",
            "ccf42c82d1db6cd8e8b099fb889f1a0e8b622f48"
        ],
        [
            "assert (Par M L C E) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "bfae8de1cc766299f56e933d32c226741d3c6958"
        ],
        [
            "assert (PG M C E L) by (conclude_def PG ).",
            "VernacExtend",
            "1826f82680a76a6650494d7e9dccc1901a59b5e6"
        ],
        [
            "assert (Cong B M D L) by (forward_using proposition_34).",
            "VernacExtend",
            "75d06cb63458dfab5aa11797dabe91b3b2a36145"
        ],
        [
            "assert (Cong M C L E) by (forward_using proposition_34).",
            "VernacExtend",
            "9822ee1a821645013ca892064f3996ae3146f87d"
        ],
        [
            "assert (Cong B C D E) by (forward_using proposition_34).",
            "VernacExtend",
            "30af4dc09e816a4ec09d29fc2c11f9ad7d6e0890"
        ],
        [
            "assert (BetS D L E) by (conclude lemma_betweennesspreserved).",
            "VernacExtend",
            "91ffa2815bbfa00912d825c33e66fedcfc6ae2d7"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_47A",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists N, (BetS D N A /\\ Col C B N /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [N];spliter.",
                        "VernacExtend",
                        "63f5457194ab725afccdd8c39039024a9ec78483"
                    ]
                },
                {
                    "command": [
                        "assert (Per C A B) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "581a2ac7aa69a977dddccc1b6608972b8cf95025"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C A B) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "de961bf6743a53ec8900fe2c634b421f29ee60f6"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C E D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "98fe094b5a924f80166893aef884bbc5f1636e3d"
                    ]
                },
                {
                    "command": [
                        "assert (neq E D) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "5cecb8a4149559d4f3cb0802aa9070888fbbd692"
                    ]
                },
                {
                    "command": [
                        "assert (neq D E) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "442089e1669e0153e6cbac0113cb9338319b92ca"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists q, (BetS D q A /\\ Col C B q /\\ nCol C B D)) by (conclude_def TS );destruct Tf as [q];spliter.",
                        "VernacExtend",
                        "384eb854d1cb5f4e07e6be7caf18f0affc71e5f6"
                    ]
                },
                {
                    "command": [
                        "assert (PG B C E D) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "6e85b6a042d46999eb57f3d44a973dfb2b3b3ea8"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C E D) by (conclude_def PG ).",
                        "VernacExtend",
                        "a6a12c800fe6d2714d3034e6af7e7d6e2e291b15"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet B C E D) by (conclude_def Par ).",
                        "VernacExtend",
                        "24a98f704d6c41d7718d11935a1a38c24a81549e"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq A E).",
                        "VernacExtend",
                        "4bec86f0fc1a1767aa9cd1975f8f80796815a7e7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D q E) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "852b79497ac22db397c92ee423d955e5f0d05f3e"
                    ]
                },
                {
                    "command": [
                        "assert (Col D q E) by (conclude_def Col ).",
                        "VernacExtend",
                        "acdcc99d77f2a62e36072e9c592ae9792b677e5f"
                    ]
                },
                {
                    "command": [
                        "assert (Col E D q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "19400314c6f4cc492d4c656fd666a0b5e50104cd"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "74cb69834e34f0647e199445f0fa322e2edcbbb9"
                    ]
                },
                {
                    "command": [
                        "assert (Meet B C E D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "1e45ccbb441441e269db7e0f520b3f41b473a535"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col D E A).",
                        "VernacExtend",
                        "94316e9ac3f0fbf13ed026df7f502b9cbaa3c6af"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a86b083608bdcdff75c296635c1ece4f05606712"
                    ]
                },
                {
                    "command": [
                        "assert (Col D q A) by (conclude_def Col ).",
                        "VernacExtend",
                        "8845afbd6b922c26650fdd9d6afbbfb434bb4983"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "42bbba0aa3f59916618cf7afe4c41db86d1d6fba"
                    ]
                },
                {
                    "command": [
                        "assert (neq D A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "838197a1011d387c4f386edd9c052ec4fb690362"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E q) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "2c066901f80c9e8bddf18739795ff6681a15f66b"
                    ]
                },
                {
                    "command": [
                        "assert (Col q A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "8ea0f60de9745f22575785c4858bd1526b4155ed"
                    ]
                },
                {
                    "command": [
                        "assert (Col q A D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6e3e51c0760ec8b662819fa92b915fa6994285db"
                    ]
                },
                {
                    "command": [
                        "assert (neq q A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "61c6aa95cdd0ed66c4458be6934f9ef48e463fa9"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E D) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "7409cdc201512f81a6b024bec03ee9ad03743937"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "606cff65d74d8aa9348e680516231c491bd12ac8"
                    ]
                },
                {
                    "command": [
                        "assert (Col E D q) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "467ebf5857a4d50586d438a22bc0e35ac0fbd45d"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "74cb69834e34f0647e199445f0fa322e2edcbbb9"
                    ]
                },
                {
                    "command": [
                        "assert (Meet B C E D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "1e45ccbb441441e269db7e0f520b3f41b473a535"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists L, Perp_at A L D E L) by (conclude proposition_12);destruct Tf as [L];spliter.",
                        "VernacExtend",
                        "ae062dd0a9c152fe1c30a61ec0a354f433f0eafa"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists p, (Col A L L /\\ Col D E L /\\ Col D E p /\\ Per p L A)) by (conclude_def Perp_at );destruct Tf as [p];spliter.",
                        "VernacExtend",
                        "dd8ddcb4792ad2ee17765c4ff824a12d0a69b341"
                    ]
                },
                {
                    "command": [
                        "assert (Per A L p) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "4afaff72886f8a6a1f54b3555ecf779c4bcf9cb6"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B N).",
                        "VernacExtend",
                        "574cbc0ae3449b4ea5805957dc17b2e05434ef7e"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D B A) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "2c293a79798ba4c97ee8bebcf92ed63e578e8240"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B A) by (conclude_def Col ).",
                        "VernacExtend",
                        "2b457cbcd5c9139c7590aef2c4d87922dbffe478"
                    ]
                },
                {
                    "command": [
                        "assert (Per D B C) by (conclude_def SQ ).",
                        "VernacExtend",
                        "cb740d023fccd2687e859812a64167810710aa6a"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B C) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "10adb8e0060f7eeceb5071d0b5abb875c3ab7110"
                    ]
                },
                {
                    "command": [
                        "assert (~ Per C A B) by (conclude lemma_8_7).",
                        "VernacExtend",
                        "67d6acf98dea988277371c60ca98ca55a52e8739"
                    ]
                },
                {
                    "command": [
                        "assert (Per C A B) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "581a2ac7aa69a977dddccc1b6608972b8cf95025"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C E D) by (conclude_def PG ).",
                        "VernacExtend",
                        "a6a12c800fe6d2714d3034e6af7e7d6e2e291b15"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C D E) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "2f35f72d97a9137886e8d07689383fdd67845ee3"
                    ]
                },
                {
                    "command": [
                        "assert (Par D E B C) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "0a2ba8e3d95cda993df9b3251455d8c5fe05c60f"
                    ]
                },
                {
                    "command": [
                        "assert (Par D E C B) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "0f2088434dce8037c539753fead83c10b3e8b7e0"
                    ]
                },
                {
                    "command": [
                        "assert (neq N B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "8795820648796ae339000222fa60854a8d5c7d45"
                    ]
                },
                {
                    "command": [
                        "assert (Par D E N B) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "6a1ff4cf4253f2e4c2c8f23f7e077f3b213a5afd"
                    ]
                },
                {
                    "command": [
                        "assert (Par D E B N) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "959b7cba56135ddca8bd18ba316cd918a2b08915"
                    ]
                },
                {
                    "command": [
                        "assert (TP D E B N) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "d5846a63b6b9ff7a733aee6d132dc5ceb33f709a"
                    ]
                },
                {
                    "command": [
                        "assert (OS B N D E) by (conclude_def TP ).",
                        "VernacExtend",
                        "5adb67ddb8cee35fa12e2267ded00f79772f26fa"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Col D D E) by (conclude_def Col ).",
                        "VernacExtend",
                        "b6e5214419dd71cd0e585c0cab2fbc217a2491ab"
                    ]
                },
                {
                    "command": [
                        "assert (neq D N) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "0192118b85129764a6b16321d24e5fa4fdd75322"
                    ]
                },
                {
                    "command": [
                        "assert (Out D N A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "3da04780744f0cb3d471ae77eefe6c2b06a41b69"
                    ]
                },
                {
                    "command": [
                        "assert (OS B A D E) by (conclude lemma_sameside2).",
                        "VernacExtend",
                        "47d0a0efb8d167327fd2fa62a07a8f036bcc77cd"
                    ]
                },
                {
                    "command": [
                        "assert (OS B A E D) by (conclude lemma_samesideflip).",
                        "VernacExtend",
                        "767939d5ad19236a338f1334e1e9c42c07df52ea"
                    ]
                },
                {
                    "command": [
                        "assert (OS A B E D) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "b5e18d46aa6f7e48cb898b6fe9e7e7c723768939"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq D L).",
                        "VernacExtend",
                        "f9eb9f8e7a815f86c08ba416ee438f148e89d45f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Per A D p) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "fea65ce6a2f6a569d4653d363dfb6ec5e0e5cea2"
                    ]
                },
                {
                    "command": [
                        "assert (Per p D A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "3168884fc0867bee58503bffa06a7bd7f8234401"
                    ]
                },
                {
                    "command": [
                        "assert (Col p D E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "894cdbd32bc561400b40dd35038da38c9241b590"
                    ]
                },
                {
                    "command": [
                        "assert (Per E D A) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "6758ac253d4a8c6898c3bcff39118bcaba102086"
                    ]
                },
                {
                    "command": [
                        "assert (Per E D B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "f79b2df4e53dc29cb51e292d0fbadf97b145991e"
                    ]
                },
                {
                    "command": [
                        "assert (Out D A B) by (conclude lemma_erectedperpendicularunique).",
                        "VernacExtend",
                        "d483de31a9353dd3d5218228ae56bce1c3525091"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A B) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "827f98a81983711230e24a6c3ddacd27f544ea63"
                    ]
                },
                {
                    "command": [
                        "assert (Col A D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "edc33073f65f8c33396bd233388052f607d9e550"
                    ]
                },
                {
                    "command": [
                        "assert (Col D N A) by (conclude_def Col ).",
                        "VernacExtend",
                        "f74dde5992814d8ea265d0fc8b9b1eec7f6fd433"
                    ]
                },
                {
                    "command": [
                        "assert (Col A D N) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f22da6fb2510088138aca217810eb7ec1e251c37"
                    ]
                },
                {
                    "command": [
                        "assert (neq D A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "838197a1011d387c4f386edd9c052ec4fb690362"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "a92ee1ba0241d520bce35a627b0053c54c563b2f"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B N) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "53913efe7d026324469d5ca1171255a2373ca42a"
                    ]
                },
                {
                    "command": [
                        "assert (Col N B C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "1cd8b188e177b4f2f88103d88a123ed80e5f181a"
                    ]
                },
                {
                    "command": [
                        "assert (Col N B D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "0ef33fcb99e878a3b745c89c40e61d8bb12be618"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C D) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "e1aa85fef2a9bbe737fa55e517a84ebf4861dca2"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "17673ec00bd63bf4828f17d80d347c13bec5f928"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq L D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "964f79fa1b1e2c0ccd64e361dbbfaba1bf05c64f"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C E D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "0159a1b5b8abe71c4fbd61d1519cb8ed6980090a"
                    ]
                },
                {
                    "command": [
                        "assert (Col E D L) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "182fd9b45330a0718d8ea2a7756c2a36000b728c"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C L D) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "1f4945b6c922fe73551424320ab2e4ba737975a8"
                    ]
                },
                {
                    "command": [
                        "assert (Par L D B C) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "91be8ab5bc61ac5be699cb4cff13c58632906be0"
                    ]
                },
                {
                    "command": [
                        "assert (TP B C L D) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "9ed2efe47359e6e531f76928bc7fbc54c4ad5d43"
                    ]
                },
                {
                    "command": [
                        "assert (OS L D B C) by (conclude_def TP ).",
                        "VernacExtend",
                        "cbe5202a1beaa910276d8c36124e4560c901fd44"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "7222425f5c62261cc3318250522969eef3385737"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C N) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ddd4d8e1e0e3bcfbd41aaa4e2b5ca69670ebbc41"
                    ]
                },
                {
                    "command": [
                        "assert (TS D B C A) by (conclude_def TS ).",
                        "VernacExtend",
                        "d2fdc83c319bac02bb39eaf1627bfaf4ff3e9de0"
                    ]
                },
                {
                    "command": [
                        "assert (TS L B C A) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "1f5d74ed14973656f1fd1147df1513c4dbd4477b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS L M A /\\ Col B C M /\\ nCol B C L)) by (conclude_def TS );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "cbeaeec55e575fad0a8ead94fa5cbd3d0b48d4d0"
                    ]
                },
                {
                    "command": [
                        "assert (neq D E) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "04b64505fd972a8ffb8ebb03eba3f2849abe1627"
                    ]
                },
                {
                    "command": [
                        "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e61047105ab8e4e585d40360238f2bc08382ae40"
                    ]
                },
                {
                    "command": [
                        "assert (neq L M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "8cbfbb597291172ccd6e03aec09f99725e271ff0"
                    ]
                },
                {
                    "command": [
                        "assert (Out L M A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "43ef35ba4693d71d90c3d89a936cfc1f4ca410d2"
                    ]
                },
                {
                    "command": [
                        "assert (Out L A M) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "758b3a0e573cc05981444dbd7e05e13237da9282"
                    ]
                },
                {
                    "command": [
                        "assert (Per E D B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "f79b2df4e53dc29cb51e292d0fbadf97b145991e"
                    ]
                },
                {
                    "command": [
                        "assert (Col E D p) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b095ea63a64d99157cbdce5a8441f03f60e27125"
                    ]
                },
                {
                    "command": [
                        "assert (Col E D L) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "182fd9b45330a0718d8ea2a7756c2a36000b728c"
                    ]
                },
                {
                    "command": [
                        "assert (Col D p L) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "cc912be982287c15cff4cb09a37c00b92d49dd73"
                    ]
                },
                {
                    "command": [
                        "assert (Col p L D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c5e4e1975ac0fd98bc6b3465484b02b5b0f600b0"
                    ]
                },
                {
                    "command": [
                        "assert (Per D L A) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "819b65c71ceecb53302a04be8d06c79e18983d67"
                    ]
                },
                {
                    "command": [
                        "assert (Per D L M) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "9e5baa7b467fd32d25a166739e1027faed546182"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B M).",
                        "VernacExtend",
                        "558ae44d9127874dbc5a1887d43a7e206beb061b"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Per D L B) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "b7cdd92a3d2c24383129fcddec1b32e97bef7134"
                    ]
                },
                {
                    "command": [
                        "assert (Per L D B) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "cfc51fd5ce0ede5260e3d1a8dd1acd870f63e160"
                    ]
                },
                {
                    "command": [
                        "assert (Per B D L) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "2311552c35f2e2f96a642bb8fe3eaa4d9d279244"
                    ]
                },
                {
                    "command": [
                        "assert (~ Per B D L) by (conclude lemma_8_7).",
                        "VernacExtend",
                        "bc1dac7b6f498d0f6ed154f3f1dd7fc2f20beb35"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq M B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "795095023af8ed74cf302ded1f9e7c631fa6155d"
                    ]
                },
                {
                    "command": [
                        "assert (Par L D C B) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "9460ee2db2d933487bc0fc1460b1620bfaf62420"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c4e234e367413ef16013499457a5aa51ac86ab40"
                    ]
                },
                {
                    "command": [
                        "assert (Par L D M B) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "25254dfd8cca551e489acffecbbd2213f561f5df"
                    ]
                },
                {
                    "command": [
                        "assert (Par L D B M) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "c777e5a0673a2745158c14e78a4e23bac039f215"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M L D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "a3aba3f7acfeb85d64c8e7c788bd8c739630f7da"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M D L) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "fd5035b9ab40d6012a781d6f6d0a9a3fa0ee34f3"
                    ]
                },
                {
                    "command": [
                        "assert (Par D L B M) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "e9b586409be6283fd63a7f2581d2bd6b05db2fc3"
                    ]
                },
                {
                    "command": [
                        "assert (TP D L B M) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "86230cbd9db0531a6e06f84887c4110255748d52"
                    ]
                },
                {
                    "command": [
                        "assert (OS B M D L) by (conclude_def TP ).",
                        "VernacExtend",
                        "8b370cf739596545ef2159bc4213d40420e1c40f"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M L D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "a3aba3f7acfeb85d64c8e7c788bd8c739630f7da"
                    ]
                },
                {
                    "command": [
                        "assert (Per L D B) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "cfc51fd5ce0ede5260e3d1a8dd1acd870f63e160"
                    ]
                },
                {
                    "command": [
                        "assert (Per B D L) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "2311552c35f2e2f96a642bb8fe3eaa4d9d279244"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D L M) by (conclude lemma_twoperpsparallel).",
                        "VernacExtend",
                        "18da081690d370181edc2759b1eafc3a4ef99cac"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D M L) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "c31e5e37e43d0fde18ae6180d2ea819cc2d888f6"
                    ]
                },
                {
                    "command": [
                        "assert (PG B M L D) by (conclude_def PG ).",
                        "VernacExtend",
                        "8c4d00192e7715c0ebc9f9b3aa1058cd19a19b76"
                    ]
                },
                {
                    "command": [
                        "assert (Par M L B D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "01c382161a164afb0aca90062348525038cf1866"
                    ]
                },
                {
                    "command": [
                        "assert (TP M L B D) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "c99ff4099dc6ae39fadc9272ed256545058ed1d1"
                    ]
                },
                {
                    "command": [
                        "assert (OS B D M L) by (conclude_def TP ).",
                        "VernacExtend",
                        "43d7173c523efbeeadf91f02e078c2a450637259"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A M L) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "64c069b61ee61b8131ad9f9262cc46286701c98c"
                    ]
                },
                {
                    "command": [
                        "assert (Par M B L D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "51df8bddf357a2308710ea9d9ea08ebe333eabb1"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A M B M L D) by (conclude proposition_29C).",
                        "VernacExtend",
                        "ee0e39f4163ffe0677b8f44aff632ebdb303b104"
                    ]
                },
                {
                    "command": [
                        "assert (Per M L D) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "b2f325c1a9d8fa9042311d2acc13a52cf910b04f"
                    ]
                },
                {
                    "command": [
                        "assert (Per A M B) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "06225c49f32355f13c7bc16c984cab7a3eb824a1"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C B) by (conclude_def Col ).",
                        "VernacExtend",
                        "b9712bc9f35cfd97230afedc7bbe6a97f60723fa"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B M C) by (conclude lemma_altitudeofrighttriangle).",
                        "VernacExtend",
                        "2b312136333ebf242960870e2bf6b0d821e1035f"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq M C).",
                        "VernacExtend",
                        "c3b3b99cfa368f2ed745851ad05b026001c08318"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C B) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "4ea8a44fc4477ff0b8004471849f2253065c054c"
                    ]
                },
                {
                    "command": [
                        "assert (~ Per B A C) by (conclude lemma_8_7).",
                        "VernacExtend",
                        "25d2388e1decafd72a0843fffc077e69376c767e"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq L E).",
                        "VernacExtend",
                        "c14a9ee477c729939f42b17ebea62ec5c011114f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D C E) by (conclude_def PG ).",
                        "VernacExtend",
                        "0492126efec3f51f3bd2a2e6c35e614cf4fb6c2f"
                    ]
                },
                {
                    "command": [
                        "assert (Par C E B D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "1940a6ab43fb7f4581717f8c8e60ec6db5602df0"
                    ]
                },
                {
                    "command": [
                        "assert (Par M E B D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "82c749d1162799ceee8091b62bf6f7fe65768c9c"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D M E) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "f8509c4ea67f96b951636e94df752ea8080f32cb"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D C E) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "3e941d5371a450dd1a82ec0aba4289a91242ef24"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D E C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "cb1ce97a98090ac0bea55931b9779fb1f78d97dd"
                    ]
                },
                {
                    "command": [
                        "assert (Par B D E M) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "7561134b6877ec009e21a4cf08759668c9c2cd11"
                    ]
                },
                {
                    "command": [
                        "assert (Col E C M) by (conclude lemma_Playfair).",
                        "VernacExtend",
                        "c82956a7116b9d3dcdbdffcc99f7818abb365ad0"
                    ]
                },
                {
                    "command": [
                        "assert (Col M C E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f699d0519b4d4dc11e7ebf80ed227bedc6628079"
                    ]
                },
                {
                    "command": [
                        "assert (Col M C B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "36c11ae0ed45e0592664ffa86b3d4a80bbf6aaaa"
                    ]
                },
                {
                    "command": [
                        "assert (Col C E B) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "ce7f51ec132cdb598d76f6755960277e04eb023f"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f8b4c03747eb11dc59b3f950807bc383f63bb430"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C E) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "397510e06c3147f41fe17c93533b73115bad451f"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M L D) by (conclude_def PG ).",
                        "VernacExtend",
                        "72a149fb257dd0e54bff562c5a5b323732cb846f"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M D L) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "fd5035b9ab40d6012a781d6f6d0a9a3fa0ee34f3"
                    ]
                },
                {
                    "command": [
                        "assert (Col D L E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6a31110730796fc76daab6b4e804f36078ff13fe"
                    ]
                },
                {
                    "command": [
                        "assert (neq E L) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e2a5004b9dd188e8e719dd58f57ad52630c514cc"
                    ]
                },
                {
                    "command": [
                        "assert (Par B M E L) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "81cfa781d7f6f01439fe24995a4dabdadc8ef56a"
                    ]
                },
                {
                    "command": [
                        "assert (Par E L B M) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "3ff31a6e9246847124ce2c65cb08a93166abd8c7"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "1642e09fbdd4d69123593e29b778308cf2ef2d1c"
                    ]
                },
                {
                    "command": [
                        "assert (neq C M) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d8c47da8a9142b14f0728721ea797a85bcf6f30c"
                    ]
                },
                {
                    "command": [
                        "assert (Par E L C M) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "9add24ca0d936a4982bb76eff643c171341e811c"
                    ]
                },
                {
                    "command": [
                        "assert (Par C M E L) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "79472ddcd6b553982a6378403aa3232e135d1f07"
                    ]
                },
                {
                    "command": [
                        "assert (Par M C E L) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "47a9c2c60a32a0d727f33092f00120eb9cd3a2cd"
                    ]
                },
                {
                    "command": [
                        "assert (Col D L E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6a31110730796fc76daab6b4e804f36078ff13fe"
                    ]
                },
                {
                    "command": [
                        "assert (Per E L M) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "b07ca9b05dd39e88a3e6ddb5c5d0ef662ba17b4f"
                    ]
                },
                {
                    "command": [
                        "assert (Per M L E) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "f5d91152be08d659998333053289f385220d9272"
                    ]
                },
                {
                    "command": [
                        "assert (Per C E D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "ed10f1fb8f57f81cbb12ebdc15c04392c0c7fe99"
                    ]
                },
                {
                    "command": [
                        "assert (Per D E C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "39568ae30283dbccf519d96bbf2e4b979cf6e2f3"
                    ]
                },
                {
                    "command": [
                        "assert (Per L E C) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "aa600872e401d38f59a696f868e7c33780c67dee"
                    ]
                },
                {
                    "command": [
                        "assert (Par M C L E) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "8c18d8d863f0588a529a4e45297f3b9fd42c571a"
                    ]
                },
                {
                    "command": [
                        "assert (Par L E M C) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "ab07395e3b94c03bebbd4efee840843e659135da"
                    ]
                },
                {
                    "command": [
                        "assert (TP L E M C) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "caec121719b8e83f795f9d65f8ac15eb9d494978"
                    ]
                },
                {
                    "command": [
                        "assert (OS M C L E) by (conclude_def TP ).",
                        "VernacExtend",
                        "003a96ff9a853e5bbfac4300560bdc4a9aee8b49"
                    ]
                },
                {
                    "command": [
                        "assert (Par M L E C) by (conclude lemma_twoperpsparallel).",
                        "VernacExtend",
                        "ccf42c82d1db6cd8e8b099fb889f1a0e8b622f48"
                    ]
                },
                {
                    "command": [
                        "assert (Par M L C E) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "bfae8de1cc766299f56e933d32c226741d3c6958"
                    ]
                },
                {
                    "command": [
                        "assert (PG M C E L) by (conclude_def PG ).",
                        "VernacExtend",
                        "1826f82680a76a6650494d7e9dccc1901a59b5e6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B M D L) by (forward_using proposition_34).",
                        "VernacExtend",
                        "75d06cb63458dfab5aa11797dabe91b3b2a36145"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M C L E) by (forward_using proposition_34).",
                        "VernacExtend",
                        "9822ee1a821645013ca892064f3996ae3146f87d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C D E) by (forward_using proposition_34).",
                        "VernacExtend",
                        "30af4dc09e816a4ec09d29fc2c11f9ad7d6e0890"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D L E) by (conclude lemma_betweennesspreserved).",
                        "VernacExtend",
                        "91ffa2815bbfa00912d825c33e66fedcfc6ae2d7"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}