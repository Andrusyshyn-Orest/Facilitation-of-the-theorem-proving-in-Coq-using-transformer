{
    "filename": "Elements/OriginalProofs/lemma_equaltorightisright.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_8_3.",
            "VernacRequire",
            "374b4fbea78c394bdfbf28739cbbfb33ede1a8b6"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_8_2.",
            "VernacRequire",
            "e9abf66a9a3cf17ce9402c70267a3e30baf0bce3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.",
            "VernacStartTheoremProof",
            "a2ba6b271809e9b9c2ee066649a543657104e801"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "b2de1d706dffa7878e6376fe99f46a7d512c4372"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.",
            "VernacExtend",
            "8cad72705f0addf4e485d372a6f643eac3cbfbdd"
        ],
        [
            "assert (Per A B F) by (conclude lemma_8_3).",
            "VernacExtend",
            "85173acc20c6be7d4f46822c7bb43c34d5d7246f"
        ],
        [
            "assert (Per F B A) by (conclude lemma_8_2).",
            "VernacExtend",
            "dc83514d7f57ffc1617047c2da4f680a72777c49"
        ],
        [
            "assert (Per F B E) by (conclude lemma_8_3).",
            "VernacExtend",
            "414f8fb0e4c122bd1dfb555d691524d35305d853"
        ],
        [
            "assert (Per E B F) by (conclude lemma_8_2).",
            "VernacExtend",
            "b71c26c9a04c1baffca786e5f438c58809b20b09"
        ],
        [
            "assert (neq B E) by (conclude lemma_raystrict).",
            "VernacExtend",
            "bf6642748dbf98b2c76934f7fea94eb86fc8cd7a"
        ],
        [
            "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "fdcff29c293eec992662c7fb2d6c669edf09d93d"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.",
            "VernacExtend",
            "47342e8b2f498721638041b52f194bab940e43cf"
        ],
        [
            "assert (neq b e) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "7118cc64f27a4de6fe408dd73bd157cdd7ab67e7"
        ],
        [
            "assert (neq e b) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d435840e3609f9d8bc13fa445348cb5e81e246c8"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.",
            "VernacExtend",
            "d108b89d535fcc9a97a747ab5e89faef205cc1af"
        ],
        [
            "assert (Cong e b E B) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "7df2ff2566892179602c2fc582564ff4be71cc99"
        ],
        [
            "assert (Cong b w E B) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "9f4a16feaedfeafd50cfe4b42322779f17ca27f6"
        ],
        [
            "assert (Cong E B B W) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "0818f94a257c6d4810029770d255461f8393bdfe"
        ],
        [
            "assert (Cong b w B W) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "9f316a83b9ff22e55a22dd0c81109d364442595f"
        ],
        [
            "assert (Cong b f B F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0660d075510a53defe35d8e1df08eb6298a6dee9"
        ],
        [
            "assert (Cong e f E F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b62dac48ac850edaca2b460f8cb554ab2f25010e"
        ],
        [
            "assert (Cong e w E W) by (conclude cn_sumofparts).",
            "VernacExtend",
            "09c5ab3caa99f241d4469f74607ed2ab0b9dfdaa"
        ],
        [
            "assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).",
            "VernacExtend",
            "8cc42516b87d72572652296210b645e9846cea2a"
        ],
        [
            "assert (Cong e b B W) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "a09448c556f2cf480225247bfa26ea208574bccc"
        ],
        [
            "assert (Cong B W b w) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "e1b7ddebade2ed2db5eb87245f2cb2cae26eb392"
        ],
        [
            "assert (Cong e b b w) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "9d340a5da83fb30232a9c24ef9feeb0eac629e9d"
        ],
        [
            "assert (Cong e b w b) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "26b20181e3ce87f43764ca40a5228d810cc15a80"
        ],
        [
            "assert (Cong e f W F) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "d6dfbd770d7e7b95e6b15dedb8827b5ab968479a"
        ],
        [
            "assert (Cong W F w f) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "e9137ee36c3c024898fc0be2d6b2d6ef48713da0"
        ],
        [
            "assert (Cong e f w f) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "59d3dc66994ba43ae3a29b58e6e513de018a6b8c"
        ],
        [
            "assert (neq b f) by (conclude lemma_raystrict).",
            "VernacExtend",
            "97b41efc255cec4783d441560e1a42de11a75a19"
        ],
        [
            "assert (Per e b f) by (conclude_def Per ).",
            "VernacExtend",
            "104f949fa0b560636fb9ea147f98887fa095cae4"
        ],
        [
            "assert (Out b f c) by (conclude lemma_ray5).",
            "VernacExtend",
            "d6d15670491ff8a4b3a3eb7bfba0114e8f828a7a"
        ],
        [
            "assert (Per e b c) by (conclude lemma_8_3).",
            "VernacExtend",
            "124d5068dd212c1ba430c00f65243cd22aae42c9"
        ],
        [
            "assert (Per c b e) by (conclude lemma_8_2).",
            "VernacExtend",
            "3b47dfdc587ec0f66e5459ecbec0b501580faf25"
        ],
        [
            "assert (Out b e a) by (conclude lemma_ray5).",
            "VernacExtend",
            "d299cb9b25c4713194f4a83a19ca41162601ccaf"
        ],
        [
            "assert (Per c b a) by (conclude lemma_8_3).",
            "VernacExtend",
            "77920d844b16b752b88c2a73e362a7cd2a7b3ae1"
        ],
        [
            "assert (Per a b c) by (conclude lemma_8_2).",
            "VernacExtend",
            "377978ce4b09003abc03c24ad67281a35a1d81f0"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_equaltorightisright",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "b2de1d706dffa7878e6376fe99f46a7d512c4372"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.",
                        "VernacExtend",
                        "8cad72705f0addf4e485d372a6f643eac3cbfbdd"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B F) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "85173acc20c6be7d4f46822c7bb43c34d5d7246f"
                    ]
                },
                {
                    "command": [
                        "assert (Per F B A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "dc83514d7f57ffc1617047c2da4f680a72777c49"
                    ]
                },
                {
                    "command": [
                        "assert (Per F B E) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "414f8fb0e4c122bd1dfb555d691524d35305d853"
                    ]
                },
                {
                    "command": [
                        "assert (Per E B F) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "b71c26c9a04c1baffca786e5f438c58809b20b09"
                    ]
                },
                {
                    "command": [
                        "assert (neq B E) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "bf6642748dbf98b2c76934f7fea94eb86fc8cd7a"
                    ]
                },
                {
                    "command": [
                        "assert (neq E B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "fdcff29c293eec992662c7fb2d6c669edf09d93d"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.",
                        "VernacExtend",
                        "47342e8b2f498721638041b52f194bab940e43cf"
                    ]
                },
                {
                    "command": [
                        "assert (neq b e) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "7118cc64f27a4de6fe408dd73bd157cdd7ab67e7"
                    ]
                },
                {
                    "command": [
                        "assert (neq e b) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d435840e3609f9d8bc13fa445348cb5e81e246c8"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.",
                        "VernacExtend",
                        "d108b89d535fcc9a97a747ab5e89faef205cc1af"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e b E B) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "7df2ff2566892179602c2fc582564ff4be71cc99"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b w E B) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "9f4a16feaedfeafd50cfe4b42322779f17ca27f6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E B B W) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "0818f94a257c6d4810029770d255461f8393bdfe"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b w B W) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "9f316a83b9ff22e55a22dd0c81109d364442595f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b f B F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0660d075510a53defe35d8e1df08eb6298a6dee9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e f E F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b62dac48ac850edaca2b460f8cb554ab2f25010e"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e w E W) by (conclude cn_sumofparts).",
                        "VernacExtend",
                        "09c5ab3caa99f241d4469f74607ed2ab0b9dfdaa"
                    ]
                },
                {
                    "command": [
                        "assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).",
                        "VernacExtend",
                        "8cc42516b87d72572652296210b645e9846cea2a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e b B W) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "a09448c556f2cf480225247bfa26ea208574bccc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B W b w) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "e1b7ddebade2ed2db5eb87245f2cb2cae26eb392"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e b b w) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "9d340a5da83fb30232a9c24ef9feeb0eac629e9d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e b w b) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "26b20181e3ce87f43764ca40a5228d810cc15a80"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e f W F) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "d6dfbd770d7e7b95e6b15dedb8827b5ab968479a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong W F w f) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "e9137ee36c3c024898fc0be2d6b2d6ef48713da0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong e f w f) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "59d3dc66994ba43ae3a29b58e6e513de018a6b8c"
                    ]
                },
                {
                    "command": [
                        "assert (neq b f) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "97b41efc255cec4783d441560e1a42de11a75a19"
                    ]
                },
                {
                    "command": [
                        "assert (Per e b f) by (conclude_def Per ).",
                        "VernacExtend",
                        "104f949fa0b560636fb9ea147f98887fa095cae4"
                    ]
                },
                {
                    "command": [
                        "assert (Out b f c) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "d6d15670491ff8a4b3a3eb7bfba0114e8f828a7a"
                    ]
                },
                {
                    "command": [
                        "assert (Per e b c) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "124d5068dd212c1ba430c00f65243cd22aae42c9"
                    ]
                },
                {
                    "command": [
                        "assert (Per c b e) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "3b47dfdc587ec0f66e5459ecbec0b501580faf25"
                    ]
                },
                {
                    "command": [
                        "assert (Out b e a) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "d299cb9b25c4713194f4a83a19ca41162601ccaf"
                    ]
                },
                {
                    "command": [
                        "assert (Per c b a) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "77920d844b16b752b88c2a73e362a7cd2a7b3ae1"
                    ]
                },
                {
                    "command": [
                        "assert (Per a b c) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "377978ce4b09003abc03c24ad67281a35a1d81f0"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}