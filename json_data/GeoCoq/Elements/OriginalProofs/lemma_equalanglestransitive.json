{
    "filename": "Elements/OriginalProofs/lemma_equalanglestransitive.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_angledistinct.",
            "VernacRequire",
            "35041ec0812683248c4ac21fe13255158dd2bb86"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_layoff.",
            "VernacRequire",
            "baefce7ca926d6634161dcb580597f9721231f9a"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesNC.",
            "VernacRequire",
            "7fe64c1518036c5e590c30cbb09ea9b94180deab"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalangleshelper.",
            "VernacRequire",
            "484d59c267d34fa259b6d945ad5d62c4828a2fa7"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_04.",
            "VernacRequire",
            "1f34271e524c191125935110cc8447318dde5cfc"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_equalanglestransitive : forall A B C D E F P Q R, CongA A B C D E F -> CongA D E F P Q R -> CongA A B C P Q R.",
            "VernacStartTheoremProof",
            "32ea0df00af8b47a678b6dd8c43f0c4b949a5d16"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq A B) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "9649284df41a2d643c1d265e0d98150c3d8d6a08"
        ],
        [
            "assert (neq D E) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "451fad7b814445b233fba1007e7f5c1854af2acf"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e61047105ab8e4e585d40360238f2bc08382ae40"
        ],
        [
            "assert (neq E F) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "d3f99bc086b2f5aae09400874b91abd319c2dc19"
        ],
        [
            "assert (neq B C) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "6d5e4fac99b0c73e41bcf598f6ed26b740aa3f8b"
        ],
        [
            "assert (neq P Q) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "6d11e93567bd29e2f1681c98a5113d484997c84d"
        ],
        [
            "assert (neq Q P) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f7ccf58e2bdd4eef3580c9330c5b251c2405df8a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists U, (Out E D U /\\ Cong E U B A)) by (conclude lemma_layoff);destruct Tf as [U];spliter.",
            "VernacExtend",
            "ab77c5c4019132c3265d741494741ff5a2d73ab2"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists V, (Out E F V /\\ Cong E V B C)) by (conclude lemma_layoff);destruct Tf as [V];spliter.",
            "VernacExtend",
            "095ed79a543fe557c29932bd129f414e564cf649"
        ],
        [
            "assert (neq E U) by (conclude lemma_raystrict).",
            "VernacExtend",
            "ae7fe85631f46ce6c053898ec976e5757f254849"
        ],
        [
            "assert (neq E V) by (conclude lemma_raystrict).",
            "VernacExtend",
            "fcff43a588d3ad1e8a52e6c7d93afb5ffc1499c8"
        ],
        [
            "assert (CongA P Q R D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "840c3f9e13aac8e413c85200412b98d0daefc582"
        ],
        [
            "assert (neq Q R) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "ddfd79596cb673533da4e6b645ee6ecfcd6fc587"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists u, (Out Q P u /\\ Cong Q u E U)) by (conclude lemma_layoff);destruct Tf as [u];spliter.",
            "VernacExtend",
            "2b8b615cc831604bbf1bb6149353c65314fd5b25"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists v, (Out Q R v /\\ Cong Q v E V)) by (conclude lemma_layoff);destruct Tf as [v];spliter.",
            "VernacExtend",
            "b8bde6f1d3559b2d4e9551bb41235f51fef3e669"
        ],
        [
            "assert (nCol A B C) by (conclude_def CongA ).",
            "VernacExtend",
            "702572e72cfe8797fb55bb37e8ab32f477d5b305"
        ],
        [
            "assert (CongA A B C U E V) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "bd193746ea131a6ce19b2acab620a184dc72a1c5"
        ],
        [
            "assert (Cong B A E U) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "5138910409e09cfcfbe8c22c9e4ac1df3eea0641"
        ],
        [
            "assert (Cong B C E V) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b42bf40d4e4caa0ab0a8160969021e73479cb1af"
        ],
        [
            "assert ((Cong A C U V /\\ CongA B A C E U V /\\ CongA B C A E V U)) by (conclude proposition_04).",
            "VernacExtend",
            "f65cdb7d19e5bcff9c05ac44781277663679fb20"
        ],
        [
            "assert (Cong E U Q u) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a487b34b28e3062811d70418fe001880a6e7b690"
        ],
        [
            "assert (Cong E V Q v) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "52713ce694d979f9005f98f29fba33c737099962"
        ],
        [
            "assert (CongA D E F u Q v) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "0a072a4ae3f1de407ee7e84b68ca5d24b017c9cf"
        ],
        [
            "assert (CongA u Q v D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "bd69b16fabfbf522f7fc50bcbfb2f717181b7d90"
        ],
        [
            "assert (CongA u Q v U E V) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "8ac0d998499b6f86b0e7724658d5fbb070bd5a4a"
        ],
        [
            "assert (CongA U E V u Q v) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "47dc3b4d04e89025bd33d981a099541167c3e55c"
        ],
        [
            "assert ((Cong U V u v /\\ CongA E U V Q u v /\\ CongA E V U Q v u)) by (conclude proposition_04).",
            "VernacExtend",
            "0929ec896baf1e7a6638b60bf49d23604a40d24d"
        ],
        [
            "assert (Cong A C u v) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "d9fa1062c6d0ca2fe0e15e7e41ae1a996852f85a"
        ],
        [
            "assert (Cong B A Q u) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "92e2c380d6d06088263e3a9095120abaa56cafe4"
        ],
        [
            "assert (Cong B C Q v) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "2782977c77b1efa93651936c86771d409eb6f0ab"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (CongA A B C P Q R) by (conclude_def CongA ).",
            "VernacExtend",
            "4ea82175e81b0718f94a39dc5000c20bcc66ed2b"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_equalanglestransitive",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "9649284df41a2d643c1d265e0d98150c3d8d6a08"
                    ]
                },
                {
                    "command": [
                        "assert (neq D E) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "451fad7b814445b233fba1007e7f5c1854af2acf"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e61047105ab8e4e585d40360238f2bc08382ae40"
                    ]
                },
                {
                    "command": [
                        "assert (neq E F) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "d3f99bc086b2f5aae09400874b91abd319c2dc19"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "6d5e4fac99b0c73e41bcf598f6ed26b740aa3f8b"
                    ]
                },
                {
                    "command": [
                        "assert (neq P Q) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "6d11e93567bd29e2f1681c98a5113d484997c84d"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q P) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f7ccf58e2bdd4eef3580c9330c5b251c2405df8a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists U, (Out E D U /\\ Cong E U B A)) by (conclude lemma_layoff);destruct Tf as [U];spliter.",
                        "VernacExtend",
                        "ab77c5c4019132c3265d741494741ff5a2d73ab2"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists V, (Out E F V /\\ Cong E V B C)) by (conclude lemma_layoff);destruct Tf as [V];spliter.",
                        "VernacExtend",
                        "095ed79a543fe557c29932bd129f414e564cf649"
                    ]
                },
                {
                    "command": [
                        "assert (neq E U) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "ae7fe85631f46ce6c053898ec976e5757f254849"
                    ]
                },
                {
                    "command": [
                        "assert (neq E V) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "fcff43a588d3ad1e8a52e6c7d93afb5ffc1499c8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q R D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "840c3f9e13aac8e413c85200412b98d0daefc582"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q R) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "ddfd79596cb673533da4e6b645ee6ecfcd6fc587"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists u, (Out Q P u /\\ Cong Q u E U)) by (conclude lemma_layoff);destruct Tf as [u];spliter.",
                        "VernacExtend",
                        "2b8b615cc831604bbf1bb6149353c65314fd5b25"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists v, (Out Q R v /\\ Cong Q v E V)) by (conclude lemma_layoff);destruct Tf as [v];spliter.",
                        "VernacExtend",
                        "b8bde6f1d3559b2d4e9551bb41235f51fef3e669"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def CongA ).",
                        "VernacExtend",
                        "702572e72cfe8797fb55bb37e8ab32f477d5b305"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C U E V) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "bd193746ea131a6ce19b2acab620a184dc72a1c5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A E U) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "5138910409e09cfcfbe8c22c9e4ac1df3eea0641"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C E V) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b42bf40d4e4caa0ab0a8160969021e73479cb1af"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A C U V /\\ CongA B A C E U V /\\ CongA B C A E V U)) by (conclude proposition_04).",
                        "VernacExtend",
                        "f65cdb7d19e5bcff9c05ac44781277663679fb20"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E U Q u) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a487b34b28e3062811d70418fe001880a6e7b690"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E V Q v) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "52713ce694d979f9005f98f29fba33c737099962"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F u Q v) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "0a072a4ae3f1de407ee7e84b68ca5d24b017c9cf"
                    ]
                },
                {
                    "command": [
                        "assert (CongA u Q v D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "bd69b16fabfbf522f7fc50bcbfb2f717181b7d90"
                    ]
                },
                {
                    "command": [
                        "assert (CongA u Q v U E V) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "8ac0d998499b6f86b0e7724658d5fbb070bd5a4a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA U E V u Q v) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "47dc3b4d04e89025bd33d981a099541167c3e55c"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong U V u v /\\ CongA E U V Q u v /\\ CongA E V U Q v u)) by (conclude proposition_04).",
                        "VernacExtend",
                        "0929ec896baf1e7a6638b60bf49d23604a40d24d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C u v) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "d9fa1062c6d0ca2fe0e15e7e41ae1a996852f85a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A Q u) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "92e2c380d6d06088263e3a9095120abaa56cafe4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C Q v) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "2782977c77b1efa93651936c86771d409eb6f0ab"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C P Q R) by (conclude_def CongA ).",
                        "VernacExtend",
                        "4ea82175e81b0718f94a39dc5000c20bcc66ed2b"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}