{
    "filename": "Elements/OriginalProofs/proposition_26A.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy.",
            "VernacRequire",
            "e17c5c88181ad35ad4f23d3d3470404be4822020"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.",
            "VernacRequire",
            "a5b0c8cd5b25371ea0dedf900d1cff5bba496d16"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy1.",
            "VernacRequire",
            "76416a16164283ab1374b918a987c2c8742633a8"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_26A : forall A B C D E F, Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong B C E F -> Cong A B D E /\\ Cong A C D F /\\ CongA B A C E D F.",
            "VernacStartTheoremProof",
            "d4b7efbfaa0a040c3a2cc9c177de74ca20a2fa0a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (~ eq A B).",
            "VernacExtend",
            "4d33ecdae2e4081df5244e4a21a9919cae1a72e7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (~ eq B C).",
            "VernacExtend",
            "2a4c174d5fcfb07079559ff9be73565058be28f2"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f6de27d2290b224fed0d2ab5b24228893a410ec8"
        ],
        [
            "assert (~ eq A C).",
            "VernacExtend",
            "bac3ad054000c7377a20191ed2a60671ee862b33"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
        ],
        [
            "assert (~ Lt D E A B).",
            "VernacExtend",
            "cb397f4f71c458c51112f470cbaadb16799eeff8"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Cong A B B A) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "ab89526fd97a60b22b04b4cbd23aee1121a24fb0"
        ],
        [
            "assert (Lt D E B A) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "326088304c47e9e8638197bcdab4829c57833fda"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS B G A /\\ Cong B G D E)) by (conclude_def Lt );destruct Tf as [G];spliter.",
            "VernacExtend",
            "4a3cee48caa81ce6074c500e4a515943563fa3c2"
        ],
        [
            "assert (neq B G) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "2d6c7920767599fa499e08f01a22a519ccef363c"
        ],
        [
            "assert (Cong B G E D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "19e35667e71d01ff88f29c22c43a20e21933261a"
        ],
        [
            "assert (Out B A G) by (conclude lemma_ray4).",
            "VernacExtend",
            "f455a86c84a06a67df3c47f84eaa21cf1d073b54"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (Cong G C G C) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "dda043101046d5a1137be391f07514cf73aec309"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (eq G G) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
        ],
        [
            "assert (Out B G G) by (conclude lemma_ray4).",
            "VernacExtend",
            "b764c06be19b3b5428da29e82ff6720e085a163e"
        ],
        [
            "assert (Cong B G B G) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "83eeb25e7063eca71cb953aba2b8f63fa9b7b637"
        ],
        [
            "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
        ],
        [
            "assert (CongA A B C G B C) by (conclude_def CongA ).",
            "VernacExtend",
            "840d3e40a27782af981bd383f3f0b194d8baa4a7"
        ],
        [
            "assert (CongA G B C A B C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "e54accb1b716398c8c57e5ecf2e4b6c1ec21f455"
        ],
        [
            "assert (CongA G B C D E F) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "230b67fe20a1fb01a2b118ee47ad404f11bc7580"
        ],
        [
            "assert ((Cong G C D F /\\ CongA B G C E D F /\\ CongA B C G E F D)) by (conclude proposition_04).",
            "VernacExtend",
            "2ba2f07ea33226c138ac24268d28b6892292c446"
        ],
        [
            "assert (CongA E F D B C A) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "fbbc74e6c07c289c969e4be7d473a57d7557da14"
        ],
        [
            "assert (CongA B C G B C A) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "cfbbad91f9224ec944c7ce5e8fc4f99d9be294db"
        ],
        [
            "assert (CongA B C A B C G) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "dc8bb46962fa29627d7c089a4b017b73ebe9081c"
        ],
        [
            "assert (Out C B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "637eb8335a2163c1d041df3535e69682ab03a1ad"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Out C A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "c5aa51775ac2d6725d437ebc1841e67fe453c920"
        ],
        [
            "assert (LtA B C A B C A) by (conclude_def LtA ).",
            "VernacExtend",
            "f1ddf663d35974687904c5eff02a0af6ca2cf617"
        ],
        [
            "assert (~ LtA B C A B C A) by (conclude lemma_angletrichotomy).",
            "VernacExtend",
            "aa5c2ab399e651f13e5359fab8dffef66c9c7b87"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Lt A B D E).",
            "VernacExtend",
            "6dc44f11e3f3ecc939da0f637d11e9b12fcbb0ff"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Cong D E E D) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "d97c1a0f255b84afc11a2b99942a4104d0c6869a"
        ],
        [
            "assert (Lt A B E D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "08a31538d65059f4020d968758c9c933db5c8d1a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS E G D /\\ Cong E G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
            "VernacExtend",
            "49859999874a7e04d0104f5b2fd4362cd7aa7402"
        ],
        [
            "assert (Cong E G B A) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "d41b7bc0800f3b8a45caf24b94502123c5d91fed"
        ],
        [
            "assert (neq E D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a8953521083819802a3146a18d02061c64859cca"
        ],
        [
            "assert (Out E D G) by (conclude lemma_ray4).",
            "VernacExtend",
            "047ab5dd911ee59b05c0827849e6cb6ec46b345f"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (eq F F) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
        ],
        [
            "assert (nCol D E F) by (conclude_def Triangle ).",
            "VernacExtend",
            "26df002a7f7af47ecd2791a99583c69b2059f45b"
        ],
        [
            "assert (~ eq E F).",
            "VernacExtend",
            "ff5f2368e9bb3ca3669590aaa3af70fea8a5678d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col D E F) by (conclude_def Col ).",
            "VernacExtend",
            "bfcded589e80e9996529cee13105bedb6c2d86c2"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Out E F F) by (conclude lemma_ray4).",
            "VernacExtend",
            "c34082abb500259e2f049c82c9902d9f87b809fe"
        ],
        [
            "assert (Cong G F G F) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "77ffed3577118451cfd9474f7aaa78d7425fcf04"
        ],
        [
            "assert (eq E E) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "0a1b9ee66843c7930009e2b10ca97e64b288584a"
        ],
        [
            "assert (eq G G) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
        ],
        [
            "assert (neq E G) by (conclude lemma_raystrict).",
            "VernacExtend",
            "dcfd06687ff4256e151a4ae80bf66ee9be5a576d"
        ],
        [
            "assert (Out E G G) by (conclude lemma_ray4).",
            "VernacExtend",
            "cf86114286720be9e20e8e41c50088b2ffcf335e"
        ],
        [
            "assert (Cong E G E G) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "7bb4602e98f7bfe86511aec6bf7dbdb0bc1cee84"
        ],
        [
            "assert (Cong E F E F) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "e6c93755e2c6d585d49b2a66e73493df526efd03"
        ],
        [
            "assert (CongA D E F G E F) by (conclude_def CongA ).",
            "VernacExtend",
            "2b511d1ff8316023a073a2495187189cf3dfbddc"
        ],
        [
            "assert (CongA G E F D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "0a3539ab541e96673573dba1d9718a0257918773"
        ],
        [
            "assert (CongA D E F A B C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "07c64536fc75cd0dc5884e04db21d1a55128be4c"
        ],
        [
            "assert (CongA G E F A B C) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "a87e8045e835b4d39986e3bca5ab35869fb4d9da"
        ],
        [
            "assert (Cong E F B C) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "24a239b528fd1fca31a702abf6c330a46f9fd60d"
        ],
        [
            "assert ((Cong G F A C /\\ CongA E G F B A C /\\ CongA E F G B C A)) by (conclude proposition_04).",
            "VernacExtend",
            "d4f2c165d792f2e8bc3e6a37af935944b8a67e17"
        ],
        [
            "assert (CongA E F G E F D) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "9a7a2a1da5abfd08317897255b8183075922d281"
        ],
        [
            "assert (CongA E F D E F G) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "0cdcfd4c62fa374a4f20eb40359dd8333fe8c776"
        ],
        [
            "assert (nCol E F G) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "a0fd8e2ec433143ed58feec6873d3fa909ed5e42"
        ],
        [
            "assert (CongA E F G E F G) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "d0775e0b32063cd2ce1b060c81b7bb238dfba4c8"
        ],
        [
            "assert (neq E F) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "d3f99bc086b2f5aae09400874b91abd319c2dc19"
        ],
        [
            "assert (neq F E) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "c0cd186aa29309ff7497bf8f03906985e3cd35a6"
        ],
        [
            "assert (Out F E E) by (conclude lemma_ray4).",
            "VernacExtend",
            "7424fa436e61a65c541d8b94b37822fd32595043"
        ],
        [
            "assert (neq F D) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "9906de1385839d2bf3dd1345e670ff9c2a45939a"
        ],
        [
            "assert (Out F D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "cba35eb09b58f17227cdb290898b74be02227d67"
        ],
        [
            "assert (LtA E F D E F D) by (conclude_def LtA ).",
            "VernacExtend",
            "c12ba2b5a5b53d04bd3ac8eca0f9763b19bfcac3"
        ],
        [
            "assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).",
            "VernacExtend",
            "a09a3ff0bca842ac3b6b614a6a919bb0fc779f0c"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ eq D E).",
            "VernacExtend",
            "331bf9e14147c716af7f14b12582cb2b3427e507"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col D E F) by (conclude_def Col ).",
            "VernacExtend",
            "bfcded589e80e9996529cee13105bedb6c2d86c2"
        ],
        [
            "assert (nCol D E F) by (conclude_def Triangle ).",
            "VernacExtend",
            "26df002a7f7af47ecd2791a99583c69b2059f45b"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Cong A B D E) by (conclude lemma_trichotomy1).",
            "VernacExtend",
            "7e7a40f5f12b54e2d712a8f69748255f86815f22"
        ],
        [
            "assert (Cong B A E D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "3175fa21f882c9b924c7a7a551249dcea586c92b"
        ],
        [
            "assert ((Cong A C D F /\\ CongA B A C E D F /\\ CongA B C A E F D)) by (conclude proposition_04).",
            "VernacExtend",
            "4b474c150dc21feef87004006759211e806aaa8d"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_26A",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq A B).",
                        "VernacExtend",
                        "4d33ecdae2e4081df5244e4a21a9919cae1a72e7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B C).",
                        "VernacExtend",
                        "2a4c174d5fcfb07079559ff9be73565058be28f2"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f6de27d2290b224fed0d2ab5b24228893a410ec8"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq A C).",
                        "VernacExtend",
                        "bac3ad054000c7377a20191ed2a60671ee862b33"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
                    ]
                },
                {
                    "command": [
                        "assert (~ Lt D E A B).",
                        "VernacExtend",
                        "cb397f4f71c458c51112f470cbaadb16799eeff8"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B A) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "ab89526fd97a60b22b04b4cbd23aee1121a24fb0"
                    ]
                },
                {
                    "command": [
                        "assert (Lt D E B A) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "326088304c47e9e8638197bcdab4829c57833fda"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS B G A /\\ Cong B G D E)) by (conclude_def Lt );destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "4a3cee48caa81ce6074c500e4a515943563fa3c2"
                    ]
                },
                {
                    "command": [
                        "assert (neq B G) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "2d6c7920767599fa499e08f01a22a519ccef363c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B G E D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "19e35667e71d01ff88f29c22c43a20e21933261a"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A G) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "f455a86c84a06a67df3c47f84eaa21cf1d073b54"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G C G C) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "dda043101046d5a1137be391f07514cf73aec309"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (eq G G) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
                    ]
                },
                {
                    "command": [
                        "assert (Out B G G) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "b764c06be19b3b5428da29e82ff6720e085a163e"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B G B G) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "83eeb25e7063eca71cb953aba2b8f63fa9b7b637"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C G B C) by (conclude_def CongA ).",
                        "VernacExtend",
                        "840d3e40a27782af981bd383f3f0b194d8baa4a7"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G B C A B C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "e54accb1b716398c8c57e5ecf2e4b6c1ec21f455"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G B C D E F) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "230b67fe20a1fb01a2b118ee47ad404f11bc7580"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong G C D F /\\ CongA B G C E D F /\\ CongA B C G E F D)) by (conclude proposition_04).",
                        "VernacExtend",
                        "2ba2f07ea33226c138ac24268d28b6892292c446"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E F D B C A) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "fbbc74e6c07c289c969e4be7d473a57d7557da14"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C G B C A) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "cfbbad91f9224ec944c7ce5e8fc4f99d9be294db"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A B C G) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "dc8bb46962fa29627d7c089a4b017b73ebe9081c"
                    ]
                },
                {
                    "command": [
                        "assert (Out C B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "637eb8335a2163c1d041df3535e69682ab03a1ad"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Out C A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c5aa51775ac2d6725d437ebc1841e67fe453c920"
                    ]
                },
                {
                    "command": [
                        "assert (LtA B C A B C A) by (conclude_def LtA ).",
                        "VernacExtend",
                        "f1ddf663d35974687904c5eff02a0af6ca2cf617"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA B C A B C A) by (conclude lemma_angletrichotomy).",
                        "VernacExtend",
                        "aa5c2ab399e651f13e5359fab8dffef66c9c7b87"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Lt A B D E).",
                        "VernacExtend",
                        "6dc44f11e3f3ecc939da0f637d11e9b12fcbb0ff"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D E E D) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "d97c1a0f255b84afc11a2b99942a4104d0c6869a"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B E D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "08a31538d65059f4020d968758c9c933db5c8d1a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS E G D /\\ Cong E G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "49859999874a7e04d0104f5b2fd4362cd7aa7402"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E G B A) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "d41b7bc0800f3b8a45caf24b94502123c5d91fed"
                    ]
                },
                {
                    "command": [
                        "assert (neq E D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a8953521083819802a3146a18d02061c64859cca"
                    ]
                },
                {
                    "command": [
                        "assert (Out E D G) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "047ab5dd911ee59b05c0827849e6cb6ec46b345f"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (eq F F) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D E F) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "26df002a7f7af47ecd2791a99583c69b2059f45b"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq E F).",
                        "VernacExtend",
                        "ff5f2368e9bb3ca3669590aaa3af70fea8a5678d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col D E F) by (conclude_def Col ).",
                        "VernacExtend",
                        "bfcded589e80e9996529cee13105bedb6c2d86c2"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Out E F F) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c34082abb500259e2f049c82c9902d9f87b809fe"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G F G F) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "77ffed3577118451cfd9474f7aaa78d7425fcf04"
                    ]
                },
                {
                    "command": [
                        "assert (eq E E) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "0a1b9ee66843c7930009e2b10ca97e64b288584a"
                    ]
                },
                {
                    "command": [
                        "assert (eq G G) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
                    ]
                },
                {
                    "command": [
                        "assert (neq E G) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "dcfd06687ff4256e151a4ae80bf66ee9be5a576d"
                    ]
                },
                {
                    "command": [
                        "assert (Out E G G) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "cf86114286720be9e20e8e41c50088b2ffcf335e"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E G E G) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "7bb4602e98f7bfe86511aec6bf7dbdb0bc1cee84"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E F E F) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "e6c93755e2c6d585d49b2a66e73493df526efd03"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F G E F) by (conclude_def CongA ).",
                        "VernacExtend",
                        "2b511d1ff8316023a073a2495187189cf3dfbddc"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G E F D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "0a3539ab541e96673573dba1d9718a0257918773"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F A B C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "07c64536fc75cd0dc5884e04db21d1a55128be4c"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G E F A B C) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "a87e8045e835b4d39986e3bca5ab35869fb4d9da"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E F B C) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "24a239b528fd1fca31a702abf6c330a46f9fd60d"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong G F A C /\\ CongA E G F B A C /\\ CongA E F G B C A)) by (conclude proposition_04).",
                        "VernacExtend",
                        "d4f2c165d792f2e8bc3e6a37af935944b8a67e17"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E F G E F D) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "9a7a2a1da5abfd08317897255b8183075922d281"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E F D E F G) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "0cdcfd4c62fa374a4f20eb40359dd8333fe8c776"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E F G) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "a0fd8e2ec433143ed58feec6873d3fa909ed5e42"
                    ]
                },
                {
                    "command": [
                        "assert (CongA E F G E F G) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "d0775e0b32063cd2ce1b060c81b7bb238dfba4c8"
                    ]
                },
                {
                    "command": [
                        "assert (neq E F) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "d3f99bc086b2f5aae09400874b91abd319c2dc19"
                    ]
                },
                {
                    "command": [
                        "assert (neq F E) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "c0cd186aa29309ff7497bf8f03906985e3cd35a6"
                    ]
                },
                {
                    "command": [
                        "assert (Out F E E) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "7424fa436e61a65c541d8b94b37822fd32595043"
                    ]
                },
                {
                    "command": [
                        "assert (neq F D) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "9906de1385839d2bf3dd1345e670ff9c2a45939a"
                    ]
                },
                {
                    "command": [
                        "assert (Out F D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "cba35eb09b58f17227cdb290898b74be02227d67"
                    ]
                },
                {
                    "command": [
                        "assert (LtA E F D E F D) by (conclude_def LtA ).",
                        "VernacExtend",
                        "c12ba2b5a5b53d04bd3ac8eca0f9763b19bfcac3"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA E F D E F D) by (conclude lemma_angletrichotomy).",
                        "VernacExtend",
                        "a09a3ff0bca842ac3b6b614a6a919bb0fc779f0c"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq D E).",
                        "VernacExtend",
                        "331bf9e14147c716af7f14b12582cb2b3427e507"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col D E F) by (conclude_def Col ).",
                        "VernacExtend",
                        "bfcded589e80e9996529cee13105bedb6c2d86c2"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D E F) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "26df002a7f7af47ecd2791a99583c69b2059f45b"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B D E) by (conclude lemma_trichotomy1).",
                        "VernacExtend",
                        "7e7a40f5f12b54e2d712a8f69748255f86815f22"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A E D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "3175fa21f882c9b924c7a7a551249dcea586c92b"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A C D F /\\ CongA B A C E D F /\\ CongA B C A E F D)) by (conclude proposition_04).",
                        "VernacExtend",
                        "4b474c150dc21feef87004006759211e806aaa8d"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}