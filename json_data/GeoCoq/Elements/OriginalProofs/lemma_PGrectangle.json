{
    "filename": "Elements/OriginalProofs/lemma_PGrectangle.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_34.",
            "VernacRequire",
            "41deb1163cc69d0109e8f8c584c8718b6d529795"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.",
            "VernacRequire",
            "e464db49a36f1840285875a39e67b1d058d20da3"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equaltorightisright.",
            "VernacRequire",
            "1d7a3b1b2b2bc4c4aa2c88985320d89ede5752ea"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.",
            "VernacRequire",
            "fc76f0b06e8a9ade925f50f5127befabbc9bbdfe"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_supplementofright.",
            "VernacRequire",
            "334de3480d632fc83c330d54d18ab6f0a0077a00"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma lemma_PGrectangle : forall A B C D, PG A C D B -> Per B A C -> RE A C D B.",
            "VernacStartTheoremProof",
            "fb46f7029020330daa67dfacc6a3b7bf870aed64"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((Cong A B C D /\\ Cong A C B D /\\ CongA C A B B D C /\\ CongA A B D D C A /\\ Cong_3 C A B B D C)) by (conclude proposition_34).",
            "VernacExtend",
            "55fe2e4151fec22f1a6758c75f2d677ce75560ec"
        ],
        [
            "assert (Par A C D B) by (conclude_def PG ).",
            "VernacExtend",
            "60d62fb9ac0fbb693bc53930f7a616ae8625af00"
        ],
        [
            "assert (nCol A C B) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "9f733fbfbf8e0ea3c129395322af21b17fed0ef9"
        ],
        [
            "assert (nCol A B C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "cd01628f57b41b48ea9a56e812a43d2a7c7813d2"
        ],
        [
            "assert (nCol C A B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "e7185bac6af815e2eedf681e13d2558faef5022b"
        ],
        [
            "assert (CongA C A B B A C) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "d32e86d94f4fb6e7d75c60d9f4082722376a87a7"
        ],
        [
            "assert (Per C A B) by (conclude lemma_8_2).",
            "VernacExtend",
            "581a2ac7aa69a977dddccc1b6608972b8cf95025"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (CongA B A C C A B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "9c75cbd8b79afff5b004040e422063403bda4567"
        ],
        [
            "assert (CongA B A C B D C) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "eb88f227ba475e50bafa2ce98da993d7457eb56a"
        ],
        [
            "assert (CongA B D C B A C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "3e491908d44e83201bc0b87fb95aeedd57eea8ec"
        ],
        [
            "assert (Per B D C) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "f684387520f5d1507c67a148724d05cbdba42665"
        ],
        [
            "assert (Per C D B) by (conclude lemma_8_2).",
            "VernacExtend",
            "4405dbe281bf613ba455e4ab4e608a4c0e73908d"
        ],
        [
            "assert (Par A C B D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "198590d70324f2c482f88012ac43c1628ce15804"
        ],
        [
            "assert (Par A B C D) by (conclude_def PG ).",
            "VernacExtend",
            "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
        ],
        [
            "assert (TP A B C D) by (conclude lemma_paralleldef2B).",
            "VernacExtend",
            "02b259fbaa4998ac74d6652897ff5921ef5dd9ac"
        ],
        [
            "assert (OS C D A B) by (conclude_def TP ).",
            "VernacExtend",
            "69133d4a5fa796a881e8a90525869f786b41d307"
        ],
        [
            "assert (neq C A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS B A E /\\ Cong A E A B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "9648c948562953f13ba11b199937b34814a0212f"
        ],
        [
            "assert (BetS E A B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "e66c611b32d479b6be6fdb8bc566786d01b7d411"
        ],
        [
            "assert (RT C A B A B D) by (conclude proposition_29C).",
            "VernacExtend",
            "5f55cc892bd99f8106aad89f8c8833f46807066d"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists p q r s t, (Supp p q r s t /\\ CongA C A B p q r /\\ CongA A B D s q t)) by (conclude_def RT );destruct Tf as [p[q[r[s[t]]]]];spliter.",
            "VernacExtend",
            "ab422617b02663f870fad1e0e07c1163cfaf3be2"
        ],
        [
            "assert (CongA p q r C A B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "7dba73f04f15ebbe435feaa499eb45fab24dad82"
        ],
        [
            "assert (Per p q r) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "db76cb027cc3f9d249e80873326912b4459d0fcb"
        ],
        [
            "assert (Per s q t) by (conclude lemma_supplementofright).",
            "VernacExtend",
            "fcbd4c1754c341f1262fa07164fb244378e35a2f"
        ],
        [
            "assert (CongA s q t A B D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "90881d2f5e9858083c770bf5ad7bafb3e636fb24"
        ],
        [
            "assert (Per A B D) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "edcd7800064000d768b49556b8bef4ef6ef53d45"
        ],
        [
            "assert (Per D B A) by (conclude lemma_8_2).",
            "VernacExtend",
            "f365f6069b5057e1892f28a7a96919d720eb0072"
        ],
        [
            "assert (CongA D C A A B D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "c43324ba414fd6e7f19d676fa8102427fd281ffb"
        ],
        [
            "assert (Per D C A) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "f99fe85265aefb377cb54bb588bc24d3bad552ee"
        ],
        [
            "assert (Per A C D) by (conclude lemma_8_2).",
            "VernacExtend",
            "baa96ec00e459101b2bade746aa8486ba69bc500"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS C M B)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
            "VernacExtend",
            "c189e17a559ccd5e5169d419d2342ea0cf177a6d"
        ],
        [
            "assert (neq A D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
        ],
        [
            "assert (neq C B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "7afd9e17666f6170d930709a4c01bc187dec111d"
        ],
        [
            "assert (CR A D C B) by (conclude_def CR ).",
            "VernacExtend",
            "a519b54f5a7fb612cca123a6be636525be15d653"
        ],
        [
            "assert (RE A C D B) by (conclude_def RE ).",
            "VernacExtend",
            "41ad90897391510f1896bac7a094af84e935a1ca"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_PGrectangle",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A B C D /\\ Cong A C B D /\\ CongA C A B B D C /\\ CongA A B D D C A /\\ Cong_3 C A B B D C)) by (conclude proposition_34).",
                        "VernacExtend",
                        "55fe2e4151fec22f1a6758c75f2d677ce75560ec"
                    ]
                },
                {
                    "command": [
                        "assert (Par A C D B) by (conclude_def PG ).",
                        "VernacExtend",
                        "60d62fb9ac0fbb693bc53930f7a616ae8625af00"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C B) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "9f733fbfbf8e0ea3c129395322af21b17fed0ef9"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "cd01628f57b41b48ea9a56e812a43d2a7c7813d2"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C A B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "e7185bac6af815e2eedf681e13d2558faef5022b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C A B B A C) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "d32e86d94f4fb6e7d75c60d9f4082722376a87a7"
                    ]
                },
                {
                    "command": [
                        "assert (Per C A B) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "581a2ac7aa69a977dddccc1b6608972b8cf95025"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C C A B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "9c75cbd8b79afff5b004040e422063403bda4567"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C B D C) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "eb88f227ba475e50bafa2ce98da993d7457eb56a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B D C B A C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "3e491908d44e83201bc0b87fb95aeedd57eea8ec"
                    ]
                },
                {
                    "command": [
                        "assert (Per B D C) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "f684387520f5d1507c67a148724d05cbdba42665"
                    ]
                },
                {
                    "command": [
                        "assert (Per C D B) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "4405dbe281bf613ba455e4ab4e608a4c0e73908d"
                    ]
                },
                {
                    "command": [
                        "assert (Par A C B D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "198590d70324f2c482f88012ac43c1628ce15804"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def PG ).",
                        "VernacExtend",
                        "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
                    ]
                },
                {
                    "command": [
                        "assert (TP A B C D) by (conclude lemma_paralleldef2B).",
                        "VernacExtend",
                        "02b259fbaa4998ac74d6652897ff5921ef5dd9ac"
                    ]
                },
                {
                    "command": [
                        "assert (OS C D A B) by (conclude_def TP ).",
                        "VernacExtend",
                        "69133d4a5fa796a881e8a90525869f786b41d307"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS B A E /\\ Cong A E A B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "9648c948562953f13ba11b199937b34814a0212f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E A B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "e66c611b32d479b6be6fdb8bc566786d01b7d411"
                    ]
                },
                {
                    "command": [
                        "assert (RT C A B A B D) by (conclude proposition_29C).",
                        "VernacExtend",
                        "5f55cc892bd99f8106aad89f8c8833f46807066d"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists p q r s t, (Supp p q r s t /\\ CongA C A B p q r /\\ CongA A B D s q t)) by (conclude_def RT );destruct Tf as [p[q[r[s[t]]]]];spliter.",
                        "VernacExtend",
                        "ab422617b02663f870fad1e0e07c1163cfaf3be2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA p q r C A B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "7dba73f04f15ebbe435feaa499eb45fab24dad82"
                    ]
                },
                {
                    "command": [
                        "assert (Per p q r) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "db76cb027cc3f9d249e80873326912b4459d0fcb"
                    ]
                },
                {
                    "command": [
                        "assert (Per s q t) by (conclude lemma_supplementofright).",
                        "VernacExtend",
                        "fcbd4c1754c341f1262fa07164fb244378e35a2f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA s q t A B D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "90881d2f5e9858083c770bf5ad7bafb3e636fb24"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B D) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "edcd7800064000d768b49556b8bef4ef6ef53d45"
                    ]
                },
                {
                    "command": [
                        "assert (Per D B A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "f365f6069b5057e1892f28a7a96919d720eb0072"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D C A A B D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "c43324ba414fd6e7f19d676fa8102427fd281ffb"
                    ]
                },
                {
                    "command": [
                        "assert (Per D C A) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "f99fe85265aefb377cb54bb588bc24d3bad552ee"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C D) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "baa96ec00e459101b2bade746aa8486ba69bc500"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS C M B)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "c189e17a559ccd5e5169d419d2342ea0cf177a6d"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "7afd9e17666f6170d930709a4c01bc187dec111d"
                    ]
                },
                {
                    "command": [
                        "assert (CR A D C B) by (conclude_def CR ).",
                        "VernacExtend",
                        "a519b54f5a7fb612cca123a6be636525be15d653"
                    ]
                },
                {
                    "command": [
                        "assert (RE A C D B) by (conclude_def RE ).",
                        "VernacExtend",
                        "41ad90897391510f1896bac7a094af84e935a1ca"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}