{
    "filename": "Elements/OriginalProofs/lemma_21helper.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthanbetween.",
            "VernacRequire",
            "d1e45dbdd75f232ccca8d9f49ace699029b9bb6c"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthanadditive.",
            "VernacRequire",
            "35dc66436d34716d6281037e524629a688698bc0"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_21helper : forall A B C E, TG B A A E B E -> BetS A E C -> TT B A A C B E E C.",
            "VernacStartTheoremProof",
            "f18f8e94b9889b604b5d4572321ee67a4f5b4219"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS B A H /\\ Cong A H A E /\\ Lt B E B H)) by (conclude_def TG );destruct Tf as [H];spliter.",
            "VernacExtend",
            "42b5ce6b52ed63a56c454e62f7eadcb2bea15b4f"
        ],
        [
            "assert (neq B A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "4144b509593be3f43e866bd96a1dd963cc629473"
        ],
        [
            "assert (~ eq B E).",
            "VernacExtend",
            "6ed1b09483a0cb88f77cb8717363a53289ae12bf"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Lt B B B H) by (conclude cn_equalitysub).",
            "VernacExtend",
            "951107c1b923be37e981eccfdd1839c428068524"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (BetS B K H /\\ Cong B K B B)) by (conclude_def Lt );destruct Tf as [K];spliter.",
            "VernacExtend",
            "3159ba6c618146178aca4388f3a0f349e292aa53"
        ],
        [
            "assert (~ neq B K).",
            "VernacExtend",
            "d110c46f33d411dfc0d8bbfad0953985c448bc52"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (neq B B) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "c1b735bd03854773d8791c80605d6a00c164046e"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (BetS B B H) by (conclude cn_equalitysub).",
            "VernacExtend",
            "c639bd92f021c4beaab643deacb274dbe2c677c5"
        ],
        [
            "assert (neq B B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "27ce6694e0c132c8f669a9a07a58dc20ded59b06"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS B A F /\\ Cong A F A C)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
            "VernacExtend",
            "c094dbb86b17fc4f783f1076a296b18ff5d972b2"
        ],
        [
            "assert (neq E C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "11bd8752fbbad03347b69b155e5f87977400b76e"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS B E G /\\ Cong E G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.",
            "VernacExtend",
            "a7c47d9b3dd1429d6113db7f59b3a9bc3dc69ec5"
        ],
        [
            "assert (Cong A C A F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "ae00aae631d157c626c6f8a9fa7e916ce808bf1d"
        ],
        [
            "assert (Cong A E A H) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "fb33abff83a50deb572f42e129c18125977e96b8"
        ],
        [
            "assert (Cong A E A E) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "a2fc621da7bf0656dd427f86546101bbf388793d"
        ],
        [
            "assert (Lt A E A C) by (conclude_def Lt ).",
            "VernacExtend",
            "3f57930d7a7bdbab95140121257b8453bc1aefa3"
        ],
        [
            "assert (Lt A E A F) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "5d0575b70a0a07c8ce8fac38086fe05801616463"
        ],
        [
            "assert (Lt A H A F) by (conclude lemma_lessthancongruence2).",
            "VernacExtend",
            "95fca8b2c006a0572f6b0d29e0bb0a0c4411c255"
        ],
        [
            "assert (Out A H F) by (conclude_def Out ).",
            "VernacExtend",
            "9187a023fb9a442475c7337b8faf34d48c63657e"
        ],
        [
            "assert (BetS A H F) by (conclude lemma_lessthanbetween).",
            "VernacExtend",
            "a6b8f13824a110cfde05b27b58e8f2d71d3411a5"
        ],
        [
            "assert (Cong E C H F) by (conclude lemma_differenceofparts).",
            "VernacExtend",
            "2c239024a42d2d03f3432174f009ee14175a7b25"
        ],
        [
            "assert (Cong E G H F) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "cd3f3dc369f01c9d195df038f1582fbd3986bf8c"
        ],
        [
            "assert (BetS B H F) by (conclude lemma_3_7a).",
            "VernacExtend",
            "68dd7617f75bf419138ea8123eaad03878e798c6"
        ],
        [
            "assert (Lt B G B F) by (conclude lemma_lessthanadditive).",
            "VernacExtend",
            "621e8b6ce00dd14b024b5ccf0298963d48e4f26a"
        ],
        [
            "assert (TG B A A C B G) by (conclude_def TG ).",
            "VernacExtend",
            "45e4692f4fa3c0f921895c70711aa3bcb9d94156"
        ],
        [
            "assert (TT B A A C B E E C) by (conclude_def TT ).",
            "VernacExtend",
            "b55dd667832fa5b069d45e6d86592073d2e1beba"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_21helper",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS B A H /\\ Cong A H A E /\\ Lt B E B H)) by (conclude_def TG );destruct Tf as [H];spliter.",
                        "VernacExtend",
                        "42b5ce6b52ed63a56c454e62f7eadcb2bea15b4f"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "4144b509593be3f43e866bd96a1dd963cc629473"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B E).",
                        "VernacExtend",
                        "6ed1b09483a0cb88f77cb8717363a53289ae12bf"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Lt B B B H) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "951107c1b923be37e981eccfdd1839c428068524"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (BetS B K H /\\ Cong B K B B)) by (conclude_def Lt );destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "3159ba6c618146178aca4388f3a0f349e292aa53"
                    ]
                },
                {
                    "command": [
                        "assert (~ neq B K).",
                        "VernacExtend",
                        "d110c46f33d411dfc0d8bbfad0953985c448bc52"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (neq B B) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "c1b735bd03854773d8791c80605d6a00c164046e"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B B H) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "c639bd92f021c4beaab643deacb274dbe2c677c5"
                    ]
                },
                {
                    "command": [
                        "assert (neq B B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "27ce6694e0c132c8f669a9a07a58dc20ded59b06"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS B A F /\\ Cong A F A C)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "c094dbb86b17fc4f783f1076a296b18ff5d972b2"
                    ]
                },
                {
                    "command": [
                        "assert (neq E C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "11bd8752fbbad03347b69b155e5f87977400b76e"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS B E G /\\ Cong E G E C)) by (conclude lemma_extension);destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "a7c47d9b3dd1429d6113db7f59b3a9bc3dc69ec5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "ae00aae631d157c626c6f8a9fa7e916ce808bf1d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A E A H) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "fb33abff83a50deb572f42e129c18125977e96b8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A E A E) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "a2fc621da7bf0656dd427f86546101bbf388793d"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A E A C) by (conclude_def Lt ).",
                        "VernacExtend",
                        "3f57930d7a7bdbab95140121257b8453bc1aefa3"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A E A F) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "5d0575b70a0a07c8ce8fac38086fe05801616463"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A H A F) by (conclude lemma_lessthancongruence2).",
                        "VernacExtend",
                        "95fca8b2c006a0572f6b0d29e0bb0a0c4411c255"
                    ]
                },
                {
                    "command": [
                        "assert (Out A H F) by (conclude_def Out ).",
                        "VernacExtend",
                        "9187a023fb9a442475c7337b8faf34d48c63657e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A H F) by (conclude lemma_lessthanbetween).",
                        "VernacExtend",
                        "a6b8f13824a110cfde05b27b58e8f2d71d3411a5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E C H F) by (conclude lemma_differenceofparts).",
                        "VernacExtend",
                        "2c239024a42d2d03f3432174f009ee14175a7b25"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E G H F) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "cd3f3dc369f01c9d195df038f1582fbd3986bf8c"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B H F) by (conclude lemma_3_7a).",
                        "VernacExtend",
                        "68dd7617f75bf419138ea8123eaad03878e798c6"
                    ]
                },
                {
                    "command": [
                        "assert (Lt B G B F) by (conclude lemma_lessthanadditive).",
                        "VernacExtend",
                        "621e8b6ce00dd14b024b5ccf0298963d48e4f26a"
                    ]
                },
                {
                    "command": [
                        "assert (TG B A A C B G) by (conclude_def TG ).",
                        "VernacExtend",
                        "45e4692f4fa3c0f921895c70711aa3bcb9d94156"
                    ]
                },
                {
                    "command": [
                        "assert (TT B A A C B E E C) by (conclude_def TT ).",
                        "VernacExtend",
                        "b55dd667832fa5b069d45e6d86592073d2e1beba"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}