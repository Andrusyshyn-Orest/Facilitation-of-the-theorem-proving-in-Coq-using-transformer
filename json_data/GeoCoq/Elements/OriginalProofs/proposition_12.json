{
    "filename": "Elements/OriginalProofs/proposition_12.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_10.",
            "VernacRequire",
            "0ea207e1bc9972bfee8d49dfe86dbf3dfd02f206"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_12 : forall A B C, nCol A B C -> exists X, Perp_at C X A B X.",
            "VernacStartTheoremProof",
            "06e6790ae0a113b56f89a55dc1a500dcd75c2eb5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (~ eq B C).",
            "VernacExtend",
            "2a4c174d5fcfb07079559ff9be73565058be28f2"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f6de27d2290b224fed0d2ab5b24228893a410ec8"
        ],
        [
            "assert (~ eq A B).",
            "VernacExtend",
            "4d33ecdae2e4081df5244e4a21a9919cae1a72e7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS C B E /\\ Cong B E C B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "cd788d8c3a497dc83ffc96757f68b2b21068db56"
        ],
        [
            "assert (neq C E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a8cb02cc27caec779e42911044c466350ef0446a"
        ],
        [
            "assert (neq E C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "69a97d38f6e34162c0ca634999247a17d087318f"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS E C F /\\ Cong C F E C)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
            "VernacExtend",
            "1659f99c2841ecdfe46ae8112d84bd81f9b94e50"
        ],
        [
            "assert (Cong E C C E) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "f6d9ba0d521dc6c9f16b093853c2e99c88c7319b"
        ],
        [
            "assert (Cong C E C E) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "026499ec05eef085ef1ec1249da07cbd626cd411"
        ],
        [
            "assert (Cong C F C E) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "3ddbe9a1346ca28aeac47d78c5d7982e0d9c3fa8"
        ],
        [
            "assert (BetS E B C) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "842867bd8a3f9d1e6dd9948e9c131cad0ffd6a91"
        ],
        [
            "assert (BetS E B F) by (conclude lemma_3_6b).",
            "VernacExtend",
            "d9a695debc2fe00be9f33fe789ee9fc4ad1615bd"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, CI K C C E) by (conclude postulate_Euclid3);destruct Tf as [K];spliter.",
            "VernacExtend",
            "d01c641991376a83f7b98b9f859ddb34cfbcc96a"
        ],
        [
            "assert (Cong C E C E) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "026499ec05eef085ef1ec1249da07cbd626cd411"
        ],
        [
            "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
        ],
        [
            "assert (InCirc B K) by (conclude_def InCirc ).",
            "VernacExtend",
            "8e9b1547540870b5e1d6700cb9e15a97d472cf6f"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P Q, (Col A B P /\\ BetS A B Q /\\ OnCirc P K /\\ OnCirc Q K /\\ BetS P B Q)) by (conclude postulate_line_circle);destruct Tf as [P[Q]];spliter.",
            "VernacExtend",
            "4f3788444d77044e9158388f1409b21ba00060c9"
        ],
        [
            "assert (Col A B Q) by (conclude_def Col ).",
            "VernacExtend",
            "8a362f4f90b801c72b1d5c9f55cff126a81a6380"
        ],
        [
            "assert (Cong C P C E) by (conclude axiom_circle_center_radius).",
            "VernacExtend",
            "15f0d0967251b358735b95851ecfc0d8e9790644"
        ],
        [
            "assert (Cong C Q C E) by (conclude axiom_circle_center_radius).",
            "VernacExtend",
            "6a8dc80b6fd4e0924051c58c201e5bb5a79ef396"
        ],
        [
            "assert (Cong C E C Q) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a8ca74b8408fb43e809958cbcb09e0c25a0cf35f"
        ],
        [
            "assert (Cong C P C Q) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "c5ff3a719fe97574eb9c742a903d455f3510d305"
        ],
        [
            "assert (Cong P C Q C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "53273e6486acf4cb37b720ed6f94c7c58f543a7d"
        ],
        [
            "assert (neq P Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "b7f5ea01f9aa7b01966b69c97263d17144c86762"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS P M Q /\\ Cong M P M Q)) by (conclude proposition_10);destruct Tf as [M];spliter.",
            "VernacExtend",
            "3e72a49089aded60ec58c8930f51bdb6b9b2ed70"
        ],
        [
            "assert (Cong P M Q M) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2a1c3d4dfab693fd91647f963c5c1db5555ee677"
        ],
        [
            "assert (Col P M Q) by (conclude_def Col ).",
            "VernacExtend",
            "1cf2bf733275436eedf68503244cb9b4583e3661"
        ],
        [
            "assert (Col P B Q) by (conclude_def Col ).",
            "VernacExtend",
            "1688f32a9e95cf439c6a0a213f2d4d92c43314ae"
        ],
        [
            "assert (Col P Q B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "65dbda65ed60950d9b21fb25b058a7ec38a42947"
        ],
        [
            "assert (Col P Q M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "9945c4ddde96375e145ae2a149cb6ef236d2854f"
        ],
        [
            "assert (Col Q B M) by (conclude lemma_collinear4).",
            "VernacExtend",
            "890109c2866f61650905f0627e1a743db2df6bf7"
        ],
        [
            "assert (Col Q B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f1f16b56259dbfc9a274803df004922121443e18"
        ],
        [
            "assert (neq B Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e0366e2454a0e7fd2438d9c6382eb99b5574c97b"
        ],
        [
            "assert (neq Q B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "fd740defa466f62735a148da0ddb3f3a282c087c"
        ],
        [
            "assert (Col B M A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "2e3e5ffcf63902dc370e9d6c503aac1624feff3f"
        ],
        [
            "assert (Col A B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "fe9df6fbdbd046fef42c474de214649009067915"
        ],
        [
            "assert (~ eq M C).",
            "VernacExtend",
            "c3b3b99cfa368f2ed745851ad05b026001c08318"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "a542176031ac453a9edd172139510a5bd23f20d4"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Per P M C) by (conclude_def Per ).",
            "VernacExtend",
            "34a18e2bec20f43a7bef02c2d9285b62639369ed"
        ],
        [
            "assert (eq M M) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "916516fe5c9a8a86b775db55e27d0edb471a111f"
        ],
        [
            "assert (Col C M M) by (conclude_def Col ).",
            "VernacExtend",
            "9b8de63ecb52267c9a9d087fbd5b47aabf5f4182"
        ],
        [
            "assert (Perp_at C M A B M) by (conclude_def Perp_at ).",
            "VernacExtend",
            "2be381b7c8bbd834cfe648277e19e025fbe881f8"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_12",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq B C).",
                        "VernacExtend",
                        "2a4c174d5fcfb07079559ff9be73565058be28f2"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f6de27d2290b224fed0d2ab5b24228893a410ec8"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq A B).",
                        "VernacExtend",
                        "4d33ecdae2e4081df5244e4a21a9919cae1a72e7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS C B E /\\ Cong B E C B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "cd788d8c3a497dc83ffc96757f68b2b21068db56"
                    ]
                },
                {
                    "command": [
                        "assert (neq C E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a8cb02cc27caec779e42911044c466350ef0446a"
                    ]
                },
                {
                    "command": [
                        "assert (neq E C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "69a97d38f6e34162c0ca634999247a17d087318f"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS E C F /\\ Cong C F E C)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "1659f99c2841ecdfe46ae8112d84bd81f9b94e50"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E C C E) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "f6d9ba0d521dc6c9f16b093853c2e99c88c7319b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E C E) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "026499ec05eef085ef1ec1249da07cbd626cd411"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C F C E) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "3ddbe9a1346ca28aeac47d78c5d7982e0d9c3fa8"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E B C) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "842867bd8a3f9d1e6dd9948e9c131cad0ffd6a91"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E B F) by (conclude lemma_3_6b).",
                        "VernacExtend",
                        "d9a695debc2fe00be9f33fe789ee9fc4ad1615bd"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, CI K C C E) by (conclude postulate_Euclid3);destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "d01c641991376a83f7b98b9f859ddb34cfbcc96a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E C E) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "026499ec05eef085ef1ec1249da07cbd626cd411"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
                    ]
                },
                {
                    "command": [
                        "assert (InCirc B K) by (conclude_def InCirc ).",
                        "VernacExtend",
                        "8e9b1547540870b5e1d6700cb9e15a97d472cf6f"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P Q, (Col A B P /\\ BetS A B Q /\\ OnCirc P K /\\ OnCirc Q K /\\ BetS P B Q)) by (conclude postulate_line_circle);destruct Tf as [P[Q]];spliter.",
                        "VernacExtend",
                        "4f3788444d77044e9158388f1409b21ba00060c9"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B Q) by (conclude_def Col ).",
                        "VernacExtend",
                        "8a362f4f90b801c72b1d5c9f55cff126a81a6380"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C P C E) by (conclude axiom_circle_center_radius).",
                        "VernacExtend",
                        "15f0d0967251b358735b95851ecfc0d8e9790644"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C Q C E) by (conclude axiom_circle_center_radius).",
                        "VernacExtend",
                        "6a8dc80b6fd4e0924051c58c201e5bb5a79ef396"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E C Q) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a8ca74b8408fb43e809958cbcb09e0c25a0cf35f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C P C Q) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "c5ff3a719fe97574eb9c742a903d455f3510d305"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P C Q C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "53273e6486acf4cb37b720ed6f94c7c58f543a7d"
                    ]
                },
                {
                    "command": [
                        "assert (neq P Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "b7f5ea01f9aa7b01966b69c97263d17144c86762"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS P M Q /\\ Cong M P M Q)) by (conclude proposition_10);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "3e72a49089aded60ec58c8930f51bdb6b9b2ed70"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P M Q M) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2a1c3d4dfab693fd91647f963c5c1db5555ee677"
                    ]
                },
                {
                    "command": [
                        "assert (Col P M Q) by (conclude_def Col ).",
                        "VernacExtend",
                        "1cf2bf733275436eedf68503244cb9b4583e3661"
                    ]
                },
                {
                    "command": [
                        "assert (Col P B Q) by (conclude_def Col ).",
                        "VernacExtend",
                        "1688f32a9e95cf439c6a0a213f2d4d92c43314ae"
                    ]
                },
                {
                    "command": [
                        "assert (Col P Q B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "65dbda65ed60950d9b21fb25b058a7ec38a42947"
                    ]
                },
                {
                    "command": [
                        "assert (Col P Q M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "9945c4ddde96375e145ae2a149cb6ef236d2854f"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q B M) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "890109c2866f61650905f0627e1a743db2df6bf7"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f1f16b56259dbfc9a274803df004922121443e18"
                    ]
                },
                {
                    "command": [
                        "assert (neq B Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e0366e2454a0e7fd2438d9c6382eb99b5574c97b"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "fd740defa466f62735a148da0ddb3f3a282c087c"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "2e3e5ffcf63902dc370e9d6c503aac1624feff3f"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "fe9df6fbdbd046fef42c474de214649009067915"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq M C).",
                        "VernacExtend",
                        "c3b3b99cfa368f2ed745851ad05b026001c08318"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "a542176031ac453a9edd172139510a5bd23f20d4"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Per P M C) by (conclude_def Per ).",
                        "VernacExtend",
                        "34a18e2bec20f43a7bef02c2d9285b62639369ed"
                    ]
                },
                {
                    "command": [
                        "assert (eq M M) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "916516fe5c9a8a86b775db55e27d0edb471a111f"
                    ]
                },
                {
                    "command": [
                        "assert (Col C M M) by (conclude_def Col ).",
                        "VernacExtend",
                        "9b8de63ecb52267c9a9d087fbd5b47aabf5f4182"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_at C M A B M) by (conclude_def Perp_at ).",
                        "VernacExtend",
                        "2be381b7c8bbd834cfe648277e19e025fbe881f8"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}