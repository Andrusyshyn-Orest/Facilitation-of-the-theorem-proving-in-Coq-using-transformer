{
    "filename": "Elements/OriginalProofs/lemma_tarskiparallelflip.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidesymmetric.",
            "VernacRequire",
            "4e53dc1ad6a9b7ecc717014b7170451fe48f6c43"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_inequalitysymmetric.",
            "VernacRequire",
            "091b8bf9100b41766c433d93f2d6a54aefc729f6"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral}.",
            "VernacContext",
            "2b23404dca7c933c43ab174476f98a2dd3fed6cf"
        ],
        [
            "Lemma lemma_tarskiparallelflip : forall A B C D, TP A B C D -> TP B A C D /\\ TP A B D C /\\ TP B A D C.",
            "VernacStartTheoremProof",
            "9d0ef6b40f1ff02ff4cc171f77d8872c1405ab6f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((neq A B /\\ neq C D /\\ ~ Meet A B C D /\\ OS C D A B)) by (conclude_def TP ).",
            "VernacExtend",
            "5317f7cfe69bcd72ad82fb24e8458e862932c64a"
        ],
        [
            "assert (OS D C A B) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "1c1131b10f644e673ca3b08a2944bfcda1de3341"
        ],
        [
            "assert (neq D C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f23eb05481a976a61c3e073657f8e5ca451231f4"
        ],
        [
            "assert (~ Meet A B D C).",
            "VernacExtend",
            "1f656737ae6eb65745f526a1c5c5e8a577a80c56"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists T, (neq A B /\\ neq D C /\\ Col A B T /\\ Col D C T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
            "VernacExtend",
            "84da251fbcd4f21ee780d11695df677ded3b1539"
        ],
        [
            "assert (Col C D T) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "83367098925c350a08baff85e0c3dc9953cda8d0"
        ],
        [
            "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "c7e81de516241ce4e74c736518aa3cecf412e158"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (TP A B D C) by (conclude_def TP ).",
            "VernacExtend",
            "a38c7295ac743fdb11ac790f8b5353e53e04d081"
        ],
        [
            "assert (~ Meet B A C D).",
            "VernacExtend",
            "6dd3bfd03a3fcc58bb6e2a7c7dace359729eee10"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists T, (neq B A /\\ neq C D /\\ Col B A T /\\ Col C D T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
            "VernacExtend",
            "3377e929189cc886037ba45a9b84f15b94be373a"
        ],
        [
            "assert (Col A B T) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6166d862547ee3a50944fd3e8ec3678f30ba7414"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (OS D C A B) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "1c1131b10f644e673ca3b08a2944bfcda1de3341"
        ],
        [
            "assert (OS C D B A) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "1a344084e245c43fd7e61705a8f686d955ec8616"
        ],
        [
            "assert (OS D C B A) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "00889782298ac25886157c70d562c3b686683aed"
        ],
        [
            "assert (TP B A C D) by (conclude_def TP ).",
            "VernacExtend",
            "0872ee1091da1643e22ceb8413df0ab3b06635ce"
        ],
        [
            "assert (~ Meet B A D C).",
            "VernacExtend",
            "0bee8d6bb5db115f3ea7ef6038cc4d36eec7aeea"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists T, (neq B A /\\ neq D C /\\ Col B A T /\\ Col D C T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
            "VernacExtend",
            "940b1e39e746597fc9732e8ce81b60e2644a3a57"
        ],
        [
            "assert (Col A B T) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6166d862547ee3a50944fd3e8ec3678f30ba7414"
        ],
        [
            "assert (Col C D T) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "83367098925c350a08baff85e0c3dc9953cda8d0"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (TP B A D C) by (conclude_def TP ).",
            "VernacExtend",
            "3bcc5eef6f48637c9bc2545760d065bebc0a3378"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q P R, (Col A B P /\\ Col A B R /\\ BetS C P Q /\\ BetS D R Q /\\ nCol A B C /\\ nCol A B D)) by (conclude_def OS );destruct Tf as [P[Q[R]]];spliter.",
            "VernacExtend",
            "e5ce1096e9f6859abd9dd8208ece7e199f1f6c2d"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_tarskiparallelflip",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((neq A B /\\ neq C D /\\ ~ Meet A B C D /\\ OS C D A B)) by (conclude_def TP ).",
                        "VernacExtend",
                        "5317f7cfe69bcd72ad82fb24e8458e862932c64a"
                    ]
                },
                {
                    "command": [
                        "assert (OS D C A B) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "1c1131b10f644e673ca3b08a2944bfcda1de3341"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f23eb05481a976a61c3e073657f8e5ca451231f4"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B D C).",
                        "VernacExtend",
                        "1f656737ae6eb65745f526a1c5c5e8a577a80c56"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists T, (neq A B /\\ neq D C /\\ Col A B T /\\ Col D C T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
                        "VernacExtend",
                        "84da251fbcd4f21ee780d11695df677ded3b1539"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D T) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "83367098925c350a08baff85e0c3dc9953cda8d0"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "c7e81de516241ce4e74c736518aa3cecf412e158"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (TP A B D C) by (conclude_def TP ).",
                        "VernacExtend",
                        "a38c7295ac743fdb11ac790f8b5353e53e04d081"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet B A C D).",
                        "VernacExtend",
                        "6dd3bfd03a3fcc58bb6e2a7c7dace359729eee10"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists T, (neq B A /\\ neq C D /\\ Col B A T /\\ Col C D T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
                        "VernacExtend",
                        "3377e929189cc886037ba45a9b84f15b94be373a"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B T) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6166d862547ee3a50944fd3e8ec3678f30ba7414"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (OS D C A B) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "1c1131b10f644e673ca3b08a2944bfcda1de3341"
                    ]
                },
                {
                    "command": [
                        "assert (OS C D B A) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "1a344084e245c43fd7e61705a8f686d955ec8616"
                    ]
                },
                {
                    "command": [
                        "assert (OS D C B A) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "00889782298ac25886157c70d562c3b686683aed"
                    ]
                },
                {
                    "command": [
                        "assert (TP B A C D) by (conclude_def TP ).",
                        "VernacExtend",
                        "0872ee1091da1643e22ceb8413df0ab3b06635ce"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet B A D C).",
                        "VernacExtend",
                        "0bee8d6bb5db115f3ea7ef6038cc4d36eec7aeea"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists T, (neq B A /\\ neq D C /\\ Col B A T /\\ Col D C T)) by (conclude_def Meet );destruct Tf as [T];spliter.",
                        "VernacExtend",
                        "940b1e39e746597fc9732e8ce81b60e2644a3a57"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B T) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6166d862547ee3a50944fd3e8ec3678f30ba7414"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D T) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "83367098925c350a08baff85e0c3dc9953cda8d0"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (TP B A D C) by (conclude_def TP ).",
                        "VernacExtend",
                        "3bcc5eef6f48637c9bc2545760d065bebc0a3378"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q P R, (Col A B P /\\ Col A B R /\\ BetS C P Q /\\ BetS D R Q /\\ nCol A B C /\\ nCol A B D)) by (conclude_def OS );destruct Tf as [P[Q[R]]];spliter.",
                        "VernacExtend",
                        "e5ce1096e9f6859abd9dd8208ece7e199f1f6c2d"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}