{
    "filename": "Elements/OriginalProofs/lemma_oppositesideflip.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.",
            "VernacRequire",
            "45862997789ccb0c1d124a0a45383611fa0cc836"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral}.",
            "VernacContext",
            "2fbba6835eae564c0004c876ca3949150abb2ba6"
        ],
        [
            "Lemma lemma_oppositesideflip : forall A B P Q, TS P A B Q -> TS P B A Q.",
            "VernacStartTheoremProof",
            "ebe14c8e844fe52cb3ab547ac8935f14dc4265ac"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists r, (BetS P r Q /\\ Col A B r /\\ nCol A B P)) by (conclude_def TS );destruct Tf as [r];spliter.",
            "VernacExtend",
            "d3227bf182efce226dc27db3cba44b77fda8524f"
        ],
        [
            "assert (nCol B A P) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "b2fd8810aacbd22b06eeda092e68d7c18a38a3b0"
        ],
        [
            "assert (Col B A r) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6834901a310b77c8b0ec2ef6a65ac0515d9a2e28"
        ],
        [
            "assert (TS P B A Q) by (conclude_def TS ).",
            "VernacExtend",
            "242082ff25d4752ba11d819368414a1f45f20707"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_oppositesideflip",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists r, (BetS P r Q /\\ Col A B r /\\ nCol A B P)) by (conclude_def TS );destruct Tf as [r];spliter.",
                        "VernacExtend",
                        "d3227bf182efce226dc27db3cba44b77fda8524f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A P) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "b2fd8810aacbd22b06eeda092e68d7c18a38a3b0"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A r) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6834901a310b77c8b0ec2ef6a65ac0515d9a2e28"
                    ]
                },
                {
                    "command": [
                        "assert (TS P B A Q) by (conclude_def TS ).",
                        "VernacExtend",
                        "242082ff25d4752ba11d819368414a1f45f20707"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}