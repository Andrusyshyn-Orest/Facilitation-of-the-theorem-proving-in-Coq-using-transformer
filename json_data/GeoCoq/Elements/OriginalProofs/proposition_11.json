{
    "filename": "Elements/OriginalProofs/proposition_11.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_extension.",
            "VernacRequire",
            "7a395274ff58b809e27cefedbbe9b45804acec33"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearorder.",
            "VernacRequire",
            "34aef7c567861aba437eb51ba850b6bb09ef5e53"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_11 : forall A B C, BetS A C B -> exists X, Per A C X.",
            "VernacStartTheoremProof",
            "10a2873f05a93d3397c47e55efbe202ffbd99fcb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A C E /\\ Cong C E A C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "b8ac681d3a2bd333355b1d1bd0e8b09225c22c57"
        ],
        [
            "assert (neq A E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9dc76a35f0423fea77251119a803e21c8f59a255"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (equilateral A E F /\\ Triangle A E F)) by (conclude proposition_01);destruct Tf as [F];spliter.",
            "VernacExtend",
            "77e4d5312b3fcd7c62e88de151697094caea6811"
        ],
        [
            "assert (Cong E F F A) by (conclude_def equilateral ).",
            "VernacExtend",
            "4044cc0482be1e4fc0fb0a56295e8fd689efd144"
        ],
        [
            "assert (Cong A F F E) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "e36d34c2b65d1883bd2679ea9ae02b6fcacb97a0"
        ],
        [
            "assert (Cong A F E F) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "9bda50bcff47de259b1c2afa08a86b5aa5329fd9"
        ],
        [
            "assert (~ eq C F).",
            "VernacExtend",
            "6d21a329ea6c485ed210b4672775abc0fe9dec3a"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A C E) by (conclude_def Col ).",
            "VernacExtend",
            "f23d09b1396d199c75c2b0c794f57a3b0c5dec98"
        ],
        [
            "assert (Col A F E) by (conclude cn_equalitysub).",
            "VernacExtend",
            "3f4b6ef72d04e042d7d313f4ad4d9a9ce2adaa1a"
        ],
        [
            "assert (Col A E F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "e30fb1aab7bd163e5767a233f42676080566d916"
        ],
        [
            "assert (nCol A E F) by (conclude_def Triangle ).",
            "VernacExtend",
            "f857fef8d6150b3291b566a710a08a89ee34aaec"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Cong C A E C) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "b2ff92adff813fcac5aba26c60a115638300149d"
        ],
        [
            "assert (Cong A C E C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "875dfb0148c79e570bb947425511e70f136e8813"
        ],
        [
            "assert (Per A C F) by (conclude_def Per ).",
            "VernacExtend",
            "416f5700c815d509b0ebb2844acffff543ccde68"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_11",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A C E /\\ Cong C E A C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "b8ac681d3a2bd333355b1d1bd0e8b09225c22c57"
                    ]
                },
                {
                    "command": [
                        "assert (neq A E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9dc76a35f0423fea77251119a803e21c8f59a255"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (equilateral A E F /\\ Triangle A E F)) by (conclude proposition_01);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "77e4d5312b3fcd7c62e88de151697094caea6811"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E F F A) by (conclude_def equilateral ).",
                        "VernacExtend",
                        "4044cc0482be1e4fc0fb0a56295e8fd689efd144"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F F E) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "e36d34c2b65d1883bd2679ea9ae02b6fcacb97a0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F E F) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "9bda50bcff47de259b1c2afa08a86b5aa5329fd9"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq C F).",
                        "VernacExtend",
                        "6d21a329ea6c485ed210b4672775abc0fe9dec3a"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C E) by (conclude_def Col ).",
                        "VernacExtend",
                        "f23d09b1396d199c75c2b0c794f57a3b0c5dec98"
                    ]
                },
                {
                    "command": [
                        "assert (Col A F E) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "3f4b6ef72d04e042d7d313f4ad4d9a9ce2adaa1a"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "e30fb1aab7bd163e5767a233f42676080566d916"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A E F) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "f857fef8d6150b3291b566a710a08a89ee34aaec"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C A E C) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "b2ff92adff813fcac5aba26c60a115638300149d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C E C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "875dfb0148c79e570bb947425511e70f136e8813"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C F) by (conclude_def Per ).",
                        "VernacExtend",
                        "416f5700c815d509b0ebb2844acffff543ccde68"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}