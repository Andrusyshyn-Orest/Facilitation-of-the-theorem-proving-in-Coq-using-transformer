{
    "filename": "Elements/OriginalProofs/proposition_48A.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_squarerectangle.",
            "VernacRequire",
            "7527953e858e2d8abde8179e7ca95443fca0dc23"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_48A : forall A B C D a b c d, SQ A B C D -> SQ a b c d -> EF A B C D a b c d -> Cong A B a b.",
            "VernacStartTheoremProof",
            "19f06eaaf4abe54d5b936db9dc554ac363119502"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "2148e8d1b3705ba8167af335724ca192a709f62f"
        ],
        [
            "assert (PG a b c d) by (conclude lemma_squareparallelogram).",
            "VernacExtend",
            "f9fb320a9c194e8d34506fcd6968951d5ff9e4c6"
        ],
        [
            "assert (Cong_3 B A D D C B) by (conclude proposition_34).",
            "VernacExtend",
            "2dc80d467aa570a0a328f89bd4f6477dac01ae41"
        ],
        [
            "assert (Cong_3 b a d d c b) by (conclude proposition_34).",
            "VernacExtend",
            "b1e55c523e009e07d673e6bb059d1d8d690ea1db"
        ],
        [
            "assert (ET B A D D C B) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "a347872eff77e881cf979f1aab8d3019d94c0105"
        ],
        [
            "assert (ET b a d d c b) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "0afd8e2d77f9e3d52b241ddb5056b2447473fcd2"
        ],
        [
            "assert (ET B A D B D C) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "a138b269a43883b2001341c4c5129cd75a644d74"
        ],
        [
            "assert (ET B D C B A D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "2268b369dda4fcd54b59d21cdfb095ceddc409d5"
        ],
        [
            "assert (ET B D C A B D) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "34bea547a95fe36a175cc06587488464343e43fa"
        ],
        [
            "assert (ET A B D B D C) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "0f8a63a8a35ce8d9cfd42223276c4131950732da"
        ],
        [
            "assert (ET b a d b d c) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "f72873eed5264d8cd8e98bf228c9d4d238d76cc2"
        ],
        [
            "assert (ET b d c b a d) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "b9654dce09fdb739e019c7853884e7176b760c25"
        ],
        [
            "assert (ET b d c a b d) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "9905cc3305b1d75274fbd34e6556ac1e3f44e1ef"
        ],
        [
            "assert (ET a b d b d c) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "cdd4401d0f73ef1f3ddfdcf73feeb9860461d985"
        ],
        [
            "assert (RE A B C D) by (conclude lemma_squarerectangle).",
            "VernacExtend",
            "10db7a0068abea819c85edd5e03324d01350445e"
        ],
        [
            "assert (RE a b c d) by (conclude lemma_squarerectangle).",
            "VernacExtend",
            "dbfc194f26d67ec9f5880b0682eb7bd9a6009277"
        ],
        [
            "assert (CR A C B D) by (conclude_def RE ).",
            "VernacExtend",
            "f5eeb065818fc9a4de86552abbb4020a4069ae07"
        ],
        [
            "assert (CR a c b d) by (conclude_def RE ).",
            "VernacExtend",
            "d7d704268051ed4ecacd15f63e4e7f433cd8a883"
        ],
        [
            "assert (Par A B C D) by (conclude_def PG ).",
            "VernacExtend",
            "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
        ],
        [
            "assert (nCol A B D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "04388792830e166d186fdd18208f19c1a4f9fe78"
        ],
        [
            "assert (Par a b c d) by (conclude_def PG ).",
            "VernacExtend",
            "e5215e19352a08e53d71f24bae0fb764ced942ba"
        ],
        [
            "assert (nCol a b d) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "a7c4ddf264677149b821f8d9365546c4c3743f1c"
        ],
        [
            "assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).",
            "VernacExtend",
            "bb8b57e8723805d603cb2b420fe24dadcb3073e6"
        ],
        [
            "assert (TS a b d c) by (forward_using lemma_crossimpliesopposite).",
            "VernacExtend",
            "110b3cdd68131fd16e00a8738b590be0a9bbca64"
        ],
        [
            "assert (ET A B D a b d) by (conclude axiom_halvesofequals).",
            "VernacExtend",
            "43635477d5e1b778842473be7ea2f3cffa830081"
        ],
        [
            "assert (Cong a b d a) by (conclude_def SQ ).",
            "VernacExtend",
            "a744a0883c27ec3172cc84634ae7720022f9f726"
        ],
        [
            "assert (Cong A B D A) by (conclude_def SQ ).",
            "VernacExtend",
            "6f9e879d813429cc89b0769fcca082f29c40397a"
        ],
        [
            "assert (Cong a b a d) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "3b2d8b676eea0b50723fc54d0c647de825e8ad92"
        ],
        [
            "assert (Cong A B A D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "d6187ae93e3f911479d2a01b3676e4577b12bf43"
        ],
        [
            "assert (~ Lt a b A B).",
            "VernacExtend",
            "58661660c94e425c7f05d25a6148f91abc459c60"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A E B /\\ Cong A E a b)) by (conclude_def Lt );destruct Tf as [E];spliter.",
            "VernacExtend",
            "6d3892b60fff3bb7c34048f51a32fb25cf44adf5"
        ],
        [
            "assert (Lt a d A B) by (conclude lemma_lessthancongruence2).",
            "VernacExtend",
            "784e28f203088f3836187edec8ef668e2a69e93a"
        ],
        [
            "assert (Lt a d A D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "d077e3fc1b6c54debbfb844f659558590cb59cff"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F a d)) by (conclude_def Lt );destruct Tf as [F];spliter.",
            "VernacExtend",
            "bb87d95ef9e8e3b1df30f186f2d3384d69ec9be9"
        ],
        [
            "assert (Per D A B) by (conclude_def SQ ).",
            "VernacExtend",
            "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
        ],
        [
            "assert (Per d a b) by (conclude_def SQ ).",
            "VernacExtend",
            "1e11c3f81468fd7af73132574cdd07928ebdecfc"
        ],
        [
            "assert (neq A D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (Out A D F) by (conclude lemma_ray4).",
            "VernacExtend",
            "b309eb87fcdcc4cc9dbb6e06a4f8c891d3599b42"
        ],
        [
            "assert (Out A B E) by (conclude lemma_ray4).",
            "VernacExtend",
            "0ae1be6203ac5835323473a7c0045d2c9e878152"
        ],
        [
            "assert (nCol D A B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "a77726b707ec91498afd12ec30dd47ebb6a4ddda"
        ],
        [
            "assert (CongA D A B D A B) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "2bdd99da0afa3a20558266f0988228e781d3b1ab"
        ],
        [
            "assert (CongA D A B F A E) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "532b9106be68c40a8a307e6011ede74fd0eeb42d"
        ],
        [
            "assert (CongA F A E D A B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "cb4d9489ff33e132bc3327f5547c383674b02a34"
        ],
        [
            "assert (Per F A E) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "e8642d9b79d7a8183aeb514a569314bd0aec6818"
        ],
        [
            "assert (CongA F A E d a b) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "3dff8dd24152a8f103ab090435d24f4efd11d7c9"
        ],
        [
            "assert (Cong F E d b) by (conclude proposition_04).",
            "VernacExtend",
            "e569ca60e40c98cae5a7c8e20f21b64d9066e6a7"
        ],
        [
            "assert (Cong F A d a) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "7d22916dcf6e5d0669501501ab2c29298a7baff2"
        ],
        [
            "assert (Cong_3 F A E d a b) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "5f18e22ec3c6061c1074adaed4a137e54c03e34e"
        ],
        [
            "assert (ET F A E d a b) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "f85a4571fb67c0376aa0ad359a15ffd13c56c23d"
        ],
        [
            "assert (ET F A E a b d) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "732ae343c5d8ead538f19f939bbacf8c70e068fb"
        ],
        [
            "assert (ET a b d A B D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "9c47941085b5042f40194c537aa0f2b169b7d380"
        ],
        [
            "assert (ET F A E A B D) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "fe321a610ab9e4d1c8c70b5c632fe0ebbf487f92"
        ],
        [
            "assert (ET F A E D A B) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "57ad248bce82197d37b99d8134c06616061e2c70"
        ],
        [
            "assert (ET D A B F A E) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "62c9c43d8d27a8036cd0f6d224ac289a6182716b"
        ],
        [
            "assert (Triangle D A B) by (conclude_def Triangle ).",
            "VernacExtend",
            "8a82d4a77d9c36dbc9193ecccb449b43190a2342"
        ],
        [
            "assert (~ ET D A B F A E) by (conclude axiom_deZolt2).",
            "VernacExtend",
            "5297195610645d2d4ba3fbf28ea823fe47ea50fa"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Lt A B a b).",
            "VernacExtend",
            "1df36e6a76d366197d7772f51af9b1e0f38705af"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists e, (BetS a e b /\\ Cong a e A B)) by (conclude_def Lt );destruct Tf as [e];spliter.",
            "VernacExtend",
            "db58cbbbcc0e0b48aecf84180aac7f6cfa9eb93d"
        ],
        [
            "assert (Lt A D a b) by (conclude lemma_lessthancongruence2).",
            "VernacExtend",
            "ff122eceb2faae51b5fc2560e7ce7ea3b5bca6ac"
        ],
        [
            "assert (Lt A D a d) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "6a9bd78a6213627114fed5adde88652e15ca926c"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists f, (BetS a f d /\\ Cong a f A D)) by (conclude_def Lt );destruct Tf as [f];spliter.",
            "VernacExtend",
            "33fdfd0827c6854f464566f995537a8cd06f8d75"
        ],
        [
            "assert (Per d a b) by (conclude_def SQ ).",
            "VernacExtend",
            "1e11c3f81468fd7af73132574cdd07928ebdecfc"
        ],
        [
            "assert (Per D A B) by (conclude_def SQ ).",
            "VernacExtend",
            "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
        ],
        [
            "assert (neq a d) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "aee314c31c9d917e2bcb908863fe5d80f7d7eb55"
        ],
        [
            "assert (neq a b) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ae5f820355494726092373e744009534b50c4ddc"
        ],
        [
            "assert (Out a d f) by (conclude lemma_ray4).",
            "VernacExtend",
            "c2fdcf36186312ade8b935c68dbd5122b4204866"
        ],
        [
            "assert (Out a b e) by (conclude lemma_ray4).",
            "VernacExtend",
            "9a2f501bdc49f1b0b5861e509c84eb619a9e3c12"
        ],
        [
            "assert (nCol d a b) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "d0bb1fb65af13337d22b64a5e25cb23b53406131"
        ],
        [
            "assert (CongA d a b d a b) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "0bdd1602b34412bf960265457ba2ac5bf7c4cdba"
        ],
        [
            "assert (CongA d a b f a e) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "85b6fe1f6a14893471604fe6ac40dcdabd1847b3"
        ],
        [
            "assert (CongA f a e d a b) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "8985f81138a1bd00c9800cad4a3d3c680505d035"
        ],
        [
            "assert (Per f a e) by (conclude lemma_equaltorightisright).",
            "VernacExtend",
            "d56c21ec364b53027b127912f0d2d2be8f8a01be"
        ],
        [
            "assert (CongA f a e D A B) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "e1f8ad2985981b82b1f0b9847e39c11ab869a8f1"
        ],
        [
            "assert (Cong f e D B) by (conclude proposition_04).",
            "VernacExtend",
            "c1414b82bca751f904af493cece0f4f4c1049291"
        ],
        [
            "assert (Cong f a D A) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "4b5ba58f685ec787c8aff4c2bce4e224bc5fd32b"
        ],
        [
            "assert (Cong_3 f a e D A B) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "2c4f84a81018d585b17fe9764f0943b96b60db00"
        ],
        [
            "assert (ET f a e D A B) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "9fb2ca238b7a9e61089043cf2becb02efcf6df0e"
        ],
        [
            "assert (ET f a e A B D) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "e253de17734303ccf6b3af36046e48054f9adb0f"
        ],
        [
            "assert (ET A B D f a e) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "3f666be723aacb6279ec4eea950c6264a20d5a52"
        ],
        [
            "assert (ET f a e a b d) by (conclude axiom_ETtransitive).",
            "VernacExtend",
            "570921fe38039be008b1f9b155531390b44fc384"
        ],
        [
            "assert (ET f a e d a b) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "38a9d848f8a7a3f255796c02bb26c9badd1913be"
        ],
        [
            "assert (ET d a b f a e) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "f5e42c333078b2ce7e41515724446720fa566b5b"
        ],
        [
            "assert (Triangle d a b) by (conclude_def Triangle ).",
            "VernacExtend",
            "cc8205b24285f0ab38968a251cda4693aba47a93"
        ],
        [
            "assert (~ ET d a b f a e) by (conclude axiom_deZolt2).",
            "VernacExtend",
            "ad7a89066c566faabb9959846f409a84a5498aea"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (neq a b) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "d6d5e1f6e44626abc6ff5f9c52186788c788c90f"
        ],
        [
            "assert (Cong A B a b) by (conclude lemma_trichotomy1).",
            "VernacExtend",
            "5f97d16fad6d9d324764ccffb10c0eb83c725f28"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_48A",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B C D) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "2148e8d1b3705ba8167af335724ca192a709f62f"
                    ]
                },
                {
                    "command": [
                        "assert (PG a b c d) by (conclude lemma_squareparallelogram).",
                        "VernacExtend",
                        "f9fb320a9c194e8d34506fcd6968951d5ff9e4c6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 B A D D C B) by (conclude proposition_34).",
                        "VernacExtend",
                        "2dc80d467aa570a0a328f89bd4f6477dac01ae41"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 b a d d c b) by (conclude proposition_34).",
                        "VernacExtend",
                        "b1e55c523e009e07d673e6bb059d1d8d690ea1db"
                    ]
                },
                {
                    "command": [
                        "assert (ET B A D D C B) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "a347872eff77e881cf979f1aab8d3019d94c0105"
                    ]
                },
                {
                    "command": [
                        "assert (ET b a d d c b) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "0afd8e2d77f9e3d52b241ddb5056b2447473fcd2"
                    ]
                },
                {
                    "command": [
                        "assert (ET B A D B D C) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "a138b269a43883b2001341c4c5129cd75a644d74"
                    ]
                },
                {
                    "command": [
                        "assert (ET B D C B A D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "2268b369dda4fcd54b59d21cdfb095ceddc409d5"
                    ]
                },
                {
                    "command": [
                        "assert (ET B D C A B D) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "34bea547a95fe36a175cc06587488464343e43fa"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D B D C) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "0f8a63a8a35ce8d9cfd42223276c4131950732da"
                    ]
                },
                {
                    "command": [
                        "assert (ET b a d b d c) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "f72873eed5264d8cd8e98bf228c9d4d238d76cc2"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d c b a d) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "b9654dce09fdb739e019c7853884e7176b760c25"
                    ]
                },
                {
                    "command": [
                        "assert (ET b d c a b d) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "9905cc3305b1d75274fbd34e6556ac1e3f44e1ef"
                    ]
                },
                {
                    "command": [
                        "assert (ET a b d b d c) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "cdd4401d0f73ef1f3ddfdcf73feeb9860461d985"
                    ]
                },
                {
                    "command": [
                        "assert (RE A B C D) by (conclude lemma_squarerectangle).",
                        "VernacExtend",
                        "10db7a0068abea819c85edd5e03324d01350445e"
                    ]
                },
                {
                    "command": [
                        "assert (RE a b c d) by (conclude lemma_squarerectangle).",
                        "VernacExtend",
                        "dbfc194f26d67ec9f5880b0682eb7bd9a6009277"
                    ]
                },
                {
                    "command": [
                        "assert (CR A C B D) by (conclude_def RE ).",
                        "VernacExtend",
                        "f5eeb065818fc9a4de86552abbb4020a4069ae07"
                    ]
                },
                {
                    "command": [
                        "assert (CR a c b d) by (conclude_def RE ).",
                        "VernacExtend",
                        "d7d704268051ed4ecacd15f63e4e7f433cd8a883"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def PG ).",
                        "VernacExtend",
                        "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "04388792830e166d186fdd18208f19c1a4f9fe78"
                    ]
                },
                {
                    "command": [
                        "assert (Par a b c d) by (conclude_def PG ).",
                        "VernacExtend",
                        "e5215e19352a08e53d71f24bae0fb764ced942ba"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a b d) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "a7c4ddf264677149b821f8d9365546c4c3743f1c"
                    ]
                },
                {
                    "command": [
                        "assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).",
                        "VernacExtend",
                        "bb8b57e8723805d603cb2b420fe24dadcb3073e6"
                    ]
                },
                {
                    "command": [
                        "assert (TS a b d c) by (forward_using lemma_crossimpliesopposite).",
                        "VernacExtend",
                        "110b3cdd68131fd16e00a8738b590be0a9bbca64"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D a b d) by (conclude axiom_halvesofequals).",
                        "VernacExtend",
                        "43635477d5e1b778842473be7ea2f3cffa830081"
                    ]
                },
                {
                    "command": [
                        "assert (Cong a b d a) by (conclude_def SQ ).",
                        "VernacExtend",
                        "a744a0883c27ec3172cc84634ae7720022f9f726"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B D A) by (conclude_def SQ ).",
                        "VernacExtend",
                        "6f9e879d813429cc89b0769fcca082f29c40397a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong a b a d) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "3b2d8b676eea0b50723fc54d0c647de825e8ad92"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B A D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "d6187ae93e3f911479d2a01b3676e4577b12bf43"
                    ]
                },
                {
                    "command": [
                        "assert (~ Lt a b A B).",
                        "VernacExtend",
                        "58661660c94e425c7f05d25a6148f91abc459c60"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A E B /\\ Cong A E a b)) by (conclude_def Lt );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "6d3892b60fff3bb7c34048f51a32fb25cf44adf5"
                    ]
                },
                {
                    "command": [
                        "assert (Lt a d A B) by (conclude lemma_lessthancongruence2).",
                        "VernacExtend",
                        "784e28f203088f3836187edec8ef668e2a69e93a"
                    ]
                },
                {
                    "command": [
                        "assert (Lt a d A D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "d077e3fc1b6c54debbfb844f659558590cb59cff"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F a d)) by (conclude_def Lt );destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "bb87d95ef9e8e3b1df30f186f2d3384d69ec9be9"
                    ]
                },
                {
                    "command": [
                        "assert (Per D A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
                    ]
                },
                {
                    "command": [
                        "assert (Per d a b) by (conclude_def SQ ).",
                        "VernacExtend",
                        "1e11c3f81468fd7af73132574cdd07928ebdecfc"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (Out A D F) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "b309eb87fcdcc4cc9dbb6e06a4f8c891d3599b42"
                    ]
                },
                {
                    "command": [
                        "assert (Out A B E) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "0ae1be6203ac5835323473a7c0045d2c9e878152"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D A B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "a77726b707ec91498afd12ec30dd47ebb6a4ddda"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D A B D A B) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "2bdd99da0afa3a20558266f0988228e781d3b1ab"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D A B F A E) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "532b9106be68c40a8a307e6011ede74fd0eeb42d"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F A E D A B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "cb4d9489ff33e132bc3327f5547c383674b02a34"
                    ]
                },
                {
                    "command": [
                        "assert (Per F A E) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "e8642d9b79d7a8183aeb514a569314bd0aec6818"
                    ]
                },
                {
                    "command": [
                        "assert (CongA F A E d a b) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "3dff8dd24152a8f103ab090435d24f4efd11d7c9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F E d b) by (conclude proposition_04).",
                        "VernacExtend",
                        "e569ca60e40c98cae5a7c8e20f21b64d9066e6a7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F A d a) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "7d22916dcf6e5d0669501501ab2c29298a7baff2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 F A E d a b) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "5f18e22ec3c6061c1074adaed4a137e54c03e34e"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A E d a b) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "f85a4571fb67c0376aa0ad359a15ffd13c56c23d"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A E a b d) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "732ae343c5d8ead538f19f939bbacf8c70e068fb"
                    ]
                },
                {
                    "command": [
                        "assert (ET a b d A B D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "9c47941085b5042f40194c537aa0f2b169b7d380"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A E A B D) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "fe321a610ab9e4d1c8c70b5c632fe0ebbf487f92"
                    ]
                },
                {
                    "command": [
                        "assert (ET F A E D A B) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "57ad248bce82197d37b99d8134c06616061e2c70"
                    ]
                },
                {
                    "command": [
                        "assert (ET D A B F A E) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "62c9c43d8d27a8036cd0f6d224ac289a6182716b"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle D A B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "8a82d4a77d9c36dbc9193ecccb449b43190a2342"
                    ]
                },
                {
                    "command": [
                        "assert (~ ET D A B F A E) by (conclude axiom_deZolt2).",
                        "VernacExtend",
                        "5297195610645d2d4ba3fbf28ea823fe47ea50fa"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Lt A B a b).",
                        "VernacExtend",
                        "1df36e6a76d366197d7772f51af9b1e0f38705af"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists e, (BetS a e b /\\ Cong a e A B)) by (conclude_def Lt );destruct Tf as [e];spliter.",
                        "VernacExtend",
                        "db58cbbbcc0e0b48aecf84180aac7f6cfa9eb93d"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D a b) by (conclude lemma_lessthancongruence2).",
                        "VernacExtend",
                        "ff122eceb2faae51b5fc2560e7ce7ea3b5bca6ac"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D a d) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "6a9bd78a6213627114fed5adde88652e15ca926c"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists f, (BetS a f d /\\ Cong a f A D)) by (conclude_def Lt );destruct Tf as [f];spliter.",
                        "VernacExtend",
                        "33fdfd0827c6854f464566f995537a8cd06f8d75"
                    ]
                },
                {
                    "command": [
                        "assert (Per d a b) by (conclude_def SQ ).",
                        "VernacExtend",
                        "1e11c3f81468fd7af73132574cdd07928ebdecfc"
                    ]
                },
                {
                    "command": [
                        "assert (Per D A B) by (conclude_def SQ ).",
                        "VernacExtend",
                        "0ae8eb9a960b7e97d4372f016c23fa13f970ae65"
                    ]
                },
                {
                    "command": [
                        "assert (neq a d) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "aee314c31c9d917e2bcb908863fe5d80f7d7eb55"
                    ]
                },
                {
                    "command": [
                        "assert (neq a b) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ae5f820355494726092373e744009534b50c4ddc"
                    ]
                },
                {
                    "command": [
                        "assert (Out a d f) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c2fdcf36186312ade8b935c68dbd5122b4204866"
                    ]
                },
                {
                    "command": [
                        "assert (Out a b e) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "9a2f501bdc49f1b0b5861e509c84eb619a9e3c12"
                    ]
                },
                {
                    "command": [
                        "assert (nCol d a b) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "d0bb1fb65af13337d22b64a5e25cb23b53406131"
                    ]
                },
                {
                    "command": [
                        "assert (CongA d a b d a b) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "0bdd1602b34412bf960265457ba2ac5bf7c4cdba"
                    ]
                },
                {
                    "command": [
                        "assert (CongA d a b f a e) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "85b6fe1f6a14893471604fe6ac40dcdabd1847b3"
                    ]
                },
                {
                    "command": [
                        "assert (CongA f a e d a b) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "8985f81138a1bd00c9800cad4a3d3c680505d035"
                    ]
                },
                {
                    "command": [
                        "assert (Per f a e) by (conclude lemma_equaltorightisright).",
                        "VernacExtend",
                        "d56c21ec364b53027b127912f0d2d2be8f8a01be"
                    ]
                },
                {
                    "command": [
                        "assert (CongA f a e D A B) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "e1f8ad2985981b82b1f0b9847e39c11ab869a8f1"
                    ]
                },
                {
                    "command": [
                        "assert (Cong f e D B) by (conclude proposition_04).",
                        "VernacExtend",
                        "c1414b82bca751f904af493cece0f4f4c1049291"
                    ]
                },
                {
                    "command": [
                        "assert (Cong f a D A) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "4b5ba58f685ec787c8aff4c2bce4e224bc5fd32b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 f a e D A B) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "2c4f84a81018d585b17fe9764f0943b96b60db00"
                    ]
                },
                {
                    "command": [
                        "assert (ET f a e D A B) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "9fb2ca238b7a9e61089043cf2becb02efcf6df0e"
                    ]
                },
                {
                    "command": [
                        "assert (ET f a e A B D) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "e253de17734303ccf6b3af36046e48054f9adb0f"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B D f a e) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "3f666be723aacb6279ec4eea950c6264a20d5a52"
                    ]
                },
                {
                    "command": [
                        "assert (ET f a e a b d) by (conclude axiom_ETtransitive).",
                        "VernacExtend",
                        "570921fe38039be008b1f9b155531390b44fc384"
                    ]
                },
                {
                    "command": [
                        "assert (ET f a e d a b) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "38a9d848f8a7a3f255796c02bb26c9badd1913be"
                    ]
                },
                {
                    "command": [
                        "assert (ET d a b f a e) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "f5e42c333078b2ce7e41515724446720fa566b5b"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle d a b) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "cc8205b24285f0ab38968a251cda4693aba47a93"
                    ]
                },
                {
                    "command": [
                        "assert (~ ET d a b f a e) by (conclude axiom_deZolt2).",
                        "VernacExtend",
                        "ad7a89066c566faabb9959846f409a84a5498aea"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (neq a b) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "d6d5e1f6e44626abc6ff5f9c52186788c788c90f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B a b) by (conclude lemma_trichotomy1).",
                        "VernacExtend",
                        "5f97d16fad6d9d324764ccffb10c0eb83c725f28"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}