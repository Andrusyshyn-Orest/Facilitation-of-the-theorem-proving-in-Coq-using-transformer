{
    "filename": "Elements/OriginalProofs/lemma_diagonalsbisect.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelNC.",
            "VernacRequire",
            "5f4385a2c77e4b4f2518ca3a6e4d8ec4f628cdd8"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_crossimpliesopposite.",
            "VernacRequire",
            "a08dce83a43e7c20f62cfc791dcf1b1024f5ea6a"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_34.",
            "VernacRequire",
            "41deb1163cc69d0109e8f8c584c8718b6d529795"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.",
            "VernacRequire",
            "e464db49a36f1840285875a39e67b1d058d20da3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.",
            "VernacStartTheoremProof",
            "8e58b3ff8e984204aac30edac36c244ca9b34ae9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
            "VernacExtend",
            "e3797cdd292597eeec927bb05a81ba8a436248ca"
        ],
        [
            "assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).",
            "VernacExtend",
            "c77dd17b33f6ec4d8aa9e075e4dc231661c9c7c2"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (neq B D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "d9a8b449c450d5198c0f3b04d0eb411d7c24763b"
        ],
        [
            "assert (CR A C B D) by (conclude_def CR ).",
            "VernacExtend",
            "690ff825e0837fa6df105a6985853130139faa78"
        ],
        [
            "assert (Par A B C D) by (conclude_def PG ).",
            "VernacExtend",
            "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
        ],
        [
            "assert (Par A B D C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "272c57335bfe8805fe397b1a9e51a209b4fd312c"
        ],
        [
            "assert (nCol A B D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "04388792830e166d186fdd18208f19c1a4f9fe78"
        ],
        [
            "assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).",
            "VernacExtend",
            "bb8b57e8723805d603cb2b420fe24dadcb3073e6"
        ],
        [
            "assert (Par B A D C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "745136cdf8f2aeccd713dc5212cbd468bd69dc23"
        ],
        [
            "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "77015f0993e40948997a4b78deeaea35782ca11f"
        ],
        [
            "assert (BetS D M B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "74b412eed2f09b18c6e55a9679a88d7c03f9a77a"
        ],
        [
            "assert (CR B D A C) by (conclude_def CR ).",
            "VernacExtend",
            "9d0db190100e19a1edbfbaed7881e77d9bf5216c"
        ],
        [
            "assert (nCol A B C) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "30b2269e12d3d82d20738e21215d5428affb96f6"
        ],
        [
            "assert (nCol B A C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "b951873b79713cf348046c9ba1ee44f908de78a4"
        ],
        [
            "assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).",
            "VernacExtend",
            "fb21a56f84bfe61fa4cb62bd18145fbf43fed388"
        ],
        [
            "assert (Cong A B D C) by (forward_using proposition_34).",
            "VernacExtend",
            "6626d0a5584069a476e603f9f22271cbaeabd40c"
        ],
        [
            "assert (Cong A B C D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "11fc28471f52743ccb0275cef19824b0159a1fce"
        ],
        [
            "assert (~ Col M A B).",
            "VernacExtend",
            "c32039bf0760bb0e21f10508766968c8726a4288"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A M C) by (conclude_def Col ).",
            "VernacExtend",
            "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
        ],
        [
            "assert (Col M A C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ac2e32a8df78804106fda36ba47914cf472be93e"
        ],
        [
            "assert (neq A M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "407201e66570093eecf4511ea06ce7ff3751330d"
        ],
        [
            "assert (neq M A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "4ef354a6e7b0311428e5a56e1e5728422738823e"
        ],
        [
            "assert (Col A B C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "c7215293ea773f2ac1e4d0c1beeef08eedfcb697"
        ],
        [
            "assert (nCol A B C) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "30b2269e12d3d82d20738e21215d5428affb96f6"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Triangle M A B) by (conclude_def Triangle ).",
            "VernacExtend",
            "a97cadc0aef002a9ef63158b20d2a33ba067951b"
        ],
        [
            "assert (~ Col M C D).",
            "VernacExtend",
            "6d1ccc71239625d022d7c6b92adb96180136763e"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A M C) by (conclude_def Col ).",
            "VernacExtend",
            "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
        ],
        [
            "assert (Col M C A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "157e3bad01c5d5e7c6639b8f38495c6a0c1b4af6"
        ],
        [
            "assert (neq M C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e4e81160a42288216f6278332fd50e638befc3e3"
        ],
        [
            "assert (Col C D A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "b31864c4a732a906a8f13b28bac7c4c23395aa8c"
        ],
        [
            "assert (Col A C D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "dc9cd9e1fbf7d2567adcbf0f4eb3309986f99c10"
        ],
        [
            "assert (nCol A C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "f756b81bb0815333592a3de8e0057ed20e62d72b"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Triangle M C D) by (conclude_def Triangle ).",
            "VernacExtend",
            "9228aa265e87d639f90c5ba74b4f363ae9804701"
        ],
        [
            "assert (Par B A C D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "14b65907bdcf1cccbd23d5103077747723ced963"
        ],
        [
            "assert (CongA B A C A C D) by (conclude proposition_29B).",
            "VernacExtend",
            "fb153e9476d1dd9880eda7b16ac9ce8d98ad1770"
        ],
        [
            "assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "7b25d56040d290a45516c58087301dd50c7fbd27"
        ],
        [
            "assert (Out A C M) by (conclude lemma_ray4).",
            "VernacExtend",
            "dabea54d4593ffc70cd526e1114ff370cfa2b665"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (nCol A B C) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "30b2269e12d3d82d20738e21215d5428affb96f6"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (Out A B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "22813113886dbbdce7acaed310fef3f6d11d8640"
        ],
        [
            "assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "eeeca70dd1b77e7d79b79569657df1ba15ee6d98"
        ],
        [
            "assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "d7f52482000ab1feb03cf705dd9cf91b2cf1a1e7"
        ],
        [
            "assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "019e9cc7d539da30337f0768f185d97b8b23a350"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (nCol A C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "f756b81bb0815333592a3de8e0057ed20e62d72b"
        ],
        [
            "assert (neq C D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
        ],
        [
            "assert (neq C A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
        ],
        [
            "assert (Out C D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
        ],
        [
            "assert (Out C A M) by (conclude lemma_ray4).",
            "VernacExtend",
            "8ad4b402a0ad02aa758899cfc14fec1e74e1f5d5"
        ],
        [
            "assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "8357547270fa04434cb257bca77b96d760190caa"
        ],
        [
            "assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "cac29855a4ffeb449b0993238ab6c0e060ce9e43"
        ],
        [
            "assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "de3fc67166e6209c2245d8c2b93d2babb4cd1c09"
        ],
        [
            "assert (nCol A C D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "f756b81bb0815333592a3de8e0057ed20e62d72b"
        ],
        [
            "assert (Col A M C) by (conclude_def Col ).",
            "VernacExtend",
            "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
        ],
        [
            "assert (Col A C M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "00891ab5f3d81cab8acfa2d030e925250f2ecb95"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Col A C C) by (conclude_def Col ).",
            "VernacExtend",
            "3068c83efc791ee2a0b851232bbf95facf2cfb45"
        ],
        [
            "assert (neq M C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e4e81160a42288216f6278332fd50e638befc3e3"
        ],
        [
            "assert (nCol M C D) by (conclude lemma_NChelper).",
            "VernacExtend",
            "995577509914d44bc4436b5ed6aa757f2424c977"
        ],
        [
            "assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "421ecb12a67458de52f507bf907dbbefad7ff97d"
        ],
        [
            "assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "ccaec5f8306cc5fd8f80af5af78f0c46e77136de"
        ],
        [
            "assert (Par A B D C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "272c57335bfe8805fe397b1a9e51a209b4fd312c"
        ],
        [
            "assert (CongA A B D B D C) by (conclude proposition_29B).",
            "VernacExtend",
            "78f88d0cedf051fb54b007117df02e5c2c9bd110"
        ],
        [
            "assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "b50e2c30e7a00ba914b4a117f975a0c4b011a51f"
        ],
        [
            "assert (Out B D M) by (conclude lemma_ray4).",
            "VernacExtend",
            "46c3d57441647cb53d755e48f11fb59b4c3417f5"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (nCol B A D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "08a07d64bafb1c192626771304c94e7a81ee82ea"
        ],
        [
            "assert (neq B A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "f05572d51181c9202443ce99ec9c621f00191cb7"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "94c5cb64f4d4baaee30f8210149fc5a3cb3d73c2"
        ],
        [
            "assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "be792f5cdecad41da37d9e1c1e85735b50cf302b"
        ],
        [
            "assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "896a7ef52be1dd34b1aa91672e87cf6e4097b7f5"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (nCol B D C) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "0795932313845ab2c7f3cf563ee58847b069136b"
        ],
        [
            "assert (neq D C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "9237553638c0e7a25b7e8c2781363c6b63e4b08e"
        ],
        [
            "assert (neq D B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "278d4cf17c0b7243f32819d93ffcba6493b04968"
        ],
        [
            "assert (Out D C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "f9394b71e33010eec5d0cafe89f03b004392bfb0"
        ],
        [
            "assert (Out D B M) by (conclude lemma_ray4).",
            "VernacExtend",
            "7ea564c0d014b0d004838a938979535a8b2dd262"
        ],
        [
            "assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "fa36ff7dcc385b1d1ac37bbcada92b1ad44749ca"
        ],
        [
            "assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "abb6b89958297ca5bc5140920226d78fc08b6e31"
        ],
        [
            "assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "ca1627bd05f79febaf09e3ec7b3a83a5545ac87a"
        ],
        [
            "assert (nCol B D C) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "0795932313845ab2c7f3cf563ee58847b069136b"
        ],
        [
            "assert (Col B M D) by (conclude_def Col ).",
            "VernacExtend",
            "905f4f61b10c95b2cce05f823ac66e03def42100"
        ],
        [
            "assert (Col B D M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "1461a4ffdcf6598cb074d63edab21fb185ba0944"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Col B D D) by (conclude_def Col ).",
            "VernacExtend",
            "71e8162e6290b2addef43eff4aa70833474a320f"
        ],
        [
            "assert (neq M D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "974ef6a1ef8c0a5b3fee96cab304158caab92bad"
        ],
        [
            "assert (nCol M D C) by (conclude lemma_NChelper).",
            "VernacExtend",
            "49063e3b1fb0811061130dcfc7a67ff895324ccd"
        ],
        [
            "assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "d185dc056912716d3fc7fce533506d559d27b059"
        ],
        [
            "assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "82e88839461dee067c9a0b2067d12a31c82ec685"
        ],
        [
            "assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).",
            "VernacExtend",
            "5bf2357f6b7e2975053e7147792ae76168304f81"
        ],
        [
            "assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).",
            "VernacExtend",
            "f1a1b303d2166fb2ad358f34d43b6ac3d76c7444"
        ],
        [
            "assert (Cong A M M C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "d8a7ec392ae871e365e68348099bb56725fe04d6"
        ],
        [
            "assert (Cong B M M D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "f4ee2e1378707b78fc5b1b6b2b630009b06e5681"
        ],
        [
            "assert (Midpoint A M C) by (conclude_def Midpoint ).",
            "VernacExtend",
            "4b0b7633417472b6da43d3f57098a00889498010"
        ],
        [
            "assert (Midpoint B M D) by (conclude_def Midpoint ).",
            "VernacExtend",
            "01978e39f3d11d01d48eaddbc9ad309526042b6f"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_diagonalsbisect",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "e3797cdd292597eeec927bb05a81ba8a436248ca"
                    ]
                },
                {
                    "command": [
                        "assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).",
                        "VernacExtend",
                        "c77dd17b33f6ec4d8aa9e075e4dc231661c9c7c2"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (neq B D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "d9a8b449c450d5198c0f3b04d0eb411d7c24763b"
                    ]
                },
                {
                    "command": [
                        "assert (CR A C B D) by (conclude_def CR ).",
                        "VernacExtend",
                        "690ff825e0837fa6df105a6985853130139faa78"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def PG ).",
                        "VernacExtend",
                        "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B D C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "272c57335bfe8805fe397b1a9e51a209b4fd312c"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "04388792830e166d186fdd18208f19c1a4f9fe78"
                    ]
                },
                {
                    "command": [
                        "assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).",
                        "VernacExtend",
                        "bb8b57e8723805d603cb2b420fe24dadcb3073e6"
                    ]
                },
                {
                    "command": [
                        "assert (Par B A D C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "745136cdf8f2aeccd713dc5212cbd468bd69dc23"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "77015f0993e40948997a4b78deeaea35782ca11f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D M B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "74b412eed2f09b18c6e55a9679a88d7c03f9a77a"
                    ]
                },
                {
                    "command": [
                        "assert (CR B D A C) by (conclude_def CR ).",
                        "VernacExtend",
                        "9d0db190100e19a1edbfbaed7881e77d9bf5216c"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "30b2269e12d3d82d20738e21215d5428affb96f6"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "b951873b79713cf348046c9ba1ee44f908de78a4"
                    ]
                },
                {
                    "command": [
                        "assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).",
                        "VernacExtend",
                        "fb21a56f84bfe61fa4cb62bd18145fbf43fed388"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B D C) by (forward_using proposition_34).",
                        "VernacExtend",
                        "6626d0a5584069a476e603f9f22271cbaeabd40c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "11fc28471f52743ccb0275cef19824b0159a1fce"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col M A B).",
                        "VernacExtend",
                        "c32039bf0760bb0e21f10508766968c8726a4288"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
                    ]
                },
                {
                    "command": [
                        "assert (Col M A C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ac2e32a8df78804106fda36ba47914cf472be93e"
                    ]
                },
                {
                    "command": [
                        "assert (neq A M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "407201e66570093eecf4511ea06ce7ff3751330d"
                    ]
                },
                {
                    "command": [
                        "assert (neq M A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "4ef354a6e7b0311428e5a56e1e5728422738823e"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "c7215293ea773f2ac1e4d0c1beeef08eedfcb697"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "30b2269e12d3d82d20738e21215d5428affb96f6"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle M A B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "a97cadc0aef002a9ef63158b20d2a33ba067951b"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col M C D).",
                        "VernacExtend",
                        "6d1ccc71239625d022d7c6b92adb96180136763e"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
                    ]
                },
                {
                    "command": [
                        "assert (Col M C A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "157e3bad01c5d5e7c6639b8f38495c6a0c1b4af6"
                    ]
                },
                {
                    "command": [
                        "assert (neq M C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e4e81160a42288216f6278332fd50e638befc3e3"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "b31864c4a732a906a8f13b28bac7c4c23395aa8c"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "dc9cd9e1fbf7d2567adcbf0f4eb3309986f99c10"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "f756b81bb0815333592a3de8e0057ed20e62d72b"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle M C D) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "9228aa265e87d639f90c5ba74b4f363ae9804701"
                    ]
                },
                {
                    "command": [
                        "assert (Par B A C D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "14b65907bdcf1cccbd23d5103077747723ced963"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C A C D) by (conclude proposition_29B).",
                        "VernacExtend",
                        "fb153e9476d1dd9880eda7b16ac9ce8d98ad1770"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "7b25d56040d290a45516c58087301dd50c7fbd27"
                    ]
                },
                {
                    "command": [
                        "assert (Out A C M) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "dabea54d4593ffc70cd526e1114ff370cfa2b665"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "30b2269e12d3d82d20738e21215d5428affb96f6"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (Out A B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "22813113886dbbdce7acaed310fef3f6d11d8640"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "eeeca70dd1b77e7d79b79569657df1ba15ee6d98"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "d7f52482000ab1feb03cf705dd9cf91b2cf1a1e7"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "019e9cc7d539da30337f0768f185d97b8b23a350"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "f756b81bb0815333592a3de8e0057ed20e62d72b"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
                    ]
                },
                {
                    "command": [
                        "assert (Out C D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
                    ]
                },
                {
                    "command": [
                        "assert (Out C A M) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "8ad4b402a0ad02aa758899cfc14fec1e74e1f5d5"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "8357547270fa04434cb257bca77b96d760190caa"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "cac29855a4ffeb449b0993238ab6c0e060ce9e43"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "de3fc67166e6209c2245d8c2b93d2babb4cd1c09"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "f756b81bb0815333592a3de8e0057ed20e62d72b"
                    ]
                },
                {
                    "command": [
                        "assert (Col A M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "9aeb7cf8ba3031dca2b1bc98fb2d819fee3b14f6"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "00891ab5f3d81cab8acfa2d030e925250f2ecb95"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C C) by (conclude_def Col ).",
                        "VernacExtend",
                        "3068c83efc791ee2a0b851232bbf95facf2cfb45"
                    ]
                },
                {
                    "command": [
                        "assert (neq M C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e4e81160a42288216f6278332fd50e638befc3e3"
                    ]
                },
                {
                    "command": [
                        "assert (nCol M C D) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "995577509914d44bc4436b5ed6aa757f2424c977"
                    ]
                },
                {
                    "command": [
                        "assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "421ecb12a67458de52f507bf907dbbefad7ff97d"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "ccaec5f8306cc5fd8f80af5af78f0c46e77136de"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B D C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "272c57335bfe8805fe397b1a9e51a209b4fd312c"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D B D C) by (conclude proposition_29B).",
                        "VernacExtend",
                        "78f88d0cedf051fb54b007117df02e5c2c9bd110"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "b50e2c30e7a00ba914b4a117f975a0c4b011a51f"
                    ]
                },
                {
                    "command": [
                        "assert (Out B D M) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "46c3d57441647cb53d755e48f11fb59b4c3417f5"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "08a07d64bafb1c192626771304c94e7a81ee82ea"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "f05572d51181c9202443ce99ec9c621f00191cb7"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "94c5cb64f4d4baaee30f8210149fc5a3cb3d73c2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "be792f5cdecad41da37d9e1c1e85735b50cf302b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "896a7ef52be1dd34b1aa91672e87cf6e4097b7f5"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B D C) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "0795932313845ab2c7f3cf563ee58847b069136b"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "9237553638c0e7a25b7e8c2781363c6b63e4b08e"
                    ]
                },
                {
                    "command": [
                        "assert (neq D B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "278d4cf17c0b7243f32819d93ffcba6493b04968"
                    ]
                },
                {
                    "command": [
                        "assert (Out D C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "f9394b71e33010eec5d0cafe89f03b004392bfb0"
                    ]
                },
                {
                    "command": [
                        "assert (Out D B M) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "7ea564c0d014b0d004838a938979535a8b2dd262"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "fa36ff7dcc385b1d1ac37bbcada92b1ad44749ca"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "abb6b89958297ca5bc5140920226d78fc08b6e31"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "ca1627bd05f79febaf09e3ec7b3a83a5545ac87a"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B D C) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "0795932313845ab2c7f3cf563ee58847b069136b"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M D) by (conclude_def Col ).",
                        "VernacExtend",
                        "905f4f61b10c95b2cce05f823ac66e03def42100"
                    ]
                },
                {
                    "command": [
                        "assert (Col B D M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "1461a4ffdcf6598cb074d63edab21fb185ba0944"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Col B D D) by (conclude_def Col ).",
                        "VernacExtend",
                        "71e8162e6290b2addef43eff4aa70833474a320f"
                    ]
                },
                {
                    "command": [
                        "assert (neq M D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "974ef6a1ef8c0a5b3fee96cab304158caab92bad"
                    ]
                },
                {
                    "command": [
                        "assert (nCol M D C) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "49063e3b1fb0811061130dcfc7a67ff895324ccd"
                    ]
                },
                {
                    "command": [
                        "assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "d185dc056912716d3fc7fce533506d559d27b059"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "82e88839461dee067c9a0b2067d12a31c82ec685"
                    ]
                },
                {
                    "command": [
                        "assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).",
                        "VernacExtend",
                        "5bf2357f6b7e2975053e7147792ae76168304f81"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).",
                        "VernacExtend",
                        "f1a1b303d2166fb2ad358f34d43b6ac3d76c7444"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A M M C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "d8a7ec392ae871e365e68348099bb56725fe04d6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B M M D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "f4ee2e1378707b78fc5b1b6b2b630009b06e5681"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint A M C) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "4b0b7633417472b6da43d3f57098a00889498010"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint B M D) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "01978e39f3d11d01d48eaddbc9ad309526042b6f"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}