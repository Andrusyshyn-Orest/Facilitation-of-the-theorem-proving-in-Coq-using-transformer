{
    "filename": "Elements/OriginalProofs/lemma_twoperpsparallel.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_Euclid4.",
            "VernacRequire",
            "a029a90d5daf512ffb737a19cbc111bddc7fdb72"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_28C.",
            "VernacRequire",
            "0947effdb24b19455d9708517134a63bd80cebaf"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelflip.",
            "VernacRequire",
            "7e326a39aefef12c19bc0b3c6ce0d726a1c02da9"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "8fa44f4771a9528e103d9f2054b77606cde8225f"
        ],
        [
            "Lemma lemma_twoperpsparallel : forall A B C D, Per A B C -> Per B C D -> OS A D B C -> Par A B C D.",
            "VernacStartTheoremProof",
            "9da2679ff2b963273ab69ee05a9f48014272761c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nCol A B C) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS B C E /\\ Cong C E B C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "a1ee655133283695be55e8922d5a35a6af857b60"
        ],
        [
            "assert (Col B C E) by (conclude_def Col ).",
            "VernacExtend",
            "8da9d55fd7ea5a0f93acb16bf6510ac0facc129b"
        ],
        [
            "assert (neq C E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a8cb02cc27caec779e42911044c466350ef0446a"
        ],
        [
            "assert (neq E C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "69a97d38f6e34162c0ca634999247a17d087318f"
        ],
        [
            "assert (Per E C D) by (conclude lemma_collinearright).",
            "VernacExtend",
            "afcc443777ec7b0b207f0a40397c168a9a630932"
        ],
        [
            "assert (Per D C E) by (conclude lemma_8_2).",
            "VernacExtend",
            "50e3df423cf438d2062d08d4b5a88c44812a8ad8"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (nCol B C D) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
        ],
        [
            "assert (neq C D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
        ],
        [
            "assert (Out C D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
        ],
        [
            "assert (Supp B C D D E) by (conclude_def Supp ).",
            "VernacExtend",
            "eb6a72c4678c33fb74fef56f439953e1645842e8"
        ],
        [
            "assert (CongA A B C B C D) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "bb632cd5c2d95eb17b54a9218d99e5ec19302615"
        ],
        [
            "assert (CongA B C D D C E) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "4b0664e6de5a91b24255fcbf956526c7cad21ac8"
        ],
        [
            "assert (RT A B C B C D) by (conclude_def RT ).",
            "VernacExtend",
            "2e31533398199007e2da77f004a6abe96018b783"
        ],
        [
            "assert (Par B A C D) by (conclude proposition_28C).",
            "VernacExtend",
            "568ebe18882bddb860e60d4953cbd950c5e81341"
        ],
        [
            "assert (Par C D B A) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "5c7b1f0dae09ad66f4b97ac0ae9653cabf3889e9"
        ],
        [
            "assert (Par C D A B) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "aef51269eb6d26b089d5d541ca5a4437c82c9486"
        ],
        [
            "assert (Par A B C D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "25c17144a7fa0b138b6ed715f37cb8b45f13adb9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_twoperpsparallel",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS B C E /\\ Cong C E B C)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "a1ee655133283695be55e8922d5a35a6af857b60"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C E) by (conclude_def Col ).",
                        "VernacExtend",
                        "8da9d55fd7ea5a0f93acb16bf6510ac0facc129b"
                    ]
                },
                {
                    "command": [
                        "assert (neq C E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a8cb02cc27caec779e42911044c466350ef0446a"
                    ]
                },
                {
                    "command": [
                        "assert (neq E C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "69a97d38f6e34162c0ca634999247a17d087318f"
                    ]
                },
                {
                    "command": [
                        "assert (Per E C D) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "afcc443777ec7b0b207f0a40397c168a9a630932"
                    ]
                },
                {
                    "command": [
                        "assert (Per D C E) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "50e3df423cf438d2062d08d4b5a88c44812a8ad8"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
                    ]
                },
                {
                    "command": [
                        "assert (Out C D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
                    ]
                },
                {
                    "command": [
                        "assert (Supp B C D D E) by (conclude_def Supp ).",
                        "VernacExtend",
                        "eb6a72c4678c33fb74fef56f439953e1645842e8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C B C D) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "bb632cd5c2d95eb17b54a9218d99e5ec19302615"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C D D C E) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "4b0664e6de5a91b24255fcbf956526c7cad21ac8"
                    ]
                },
                {
                    "command": [
                        "assert (RT A B C B C D) by (conclude_def RT ).",
                        "VernacExtend",
                        "2e31533398199007e2da77f004a6abe96018b783"
                    ]
                },
                {
                    "command": [
                        "assert (Par B A C D) by (conclude proposition_28C).",
                        "VernacExtend",
                        "568ebe18882bddb860e60d4953cbd950c5e81341"
                    ]
                },
                {
                    "command": [
                        "assert (Par C D B A) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "5c7b1f0dae09ad66f4b97ac0ae9653cabf3889e9"
                    ]
                },
                {
                    "command": [
                        "assert (Par C D A B) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "aef51269eb6d26b089d5d541ca5a4437c82c9486"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "25c17144a7fa0b138b6ed715f37cb8b45f13adb9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}