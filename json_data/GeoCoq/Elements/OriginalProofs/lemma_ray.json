{
    "filename": "Elements/OriginalProofs/lemma_ray.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_ray2.",
            "VernacRequire",
            "4cc2c7bc1ca17a3a5d0a728fa7ccc4e7993fadcd"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence.",
            "VernacRequire",
            "00b9d54a90df13f5b7010ae28f399946381e76c8"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_3_7b.",
            "VernacRequire",
            "d3266827391ba16398cf899abf74b6ea0a060a8a"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_ray : forall A B P, Out A B P -> neq P B -> ~ BetS A P B -> BetS A B P.",
            "VernacStartTheoremProof",
            "0a13500702b7b152d4bb8664bf580760c971de4f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq A B) by (conclude lemma_ray2).",
            "VernacExtend",
            "b249509239b41d0b782c6bc4a9915ef0540e7f7b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS E A P /\\ BetS E A B)) by (conclude_def Out );destruct Tf as [E];spliter.",
            "VernacExtend",
            "af98a3b65d71f2dd672cc6f4fe76a4c9350c1e80"
        ],
        [
            "assert (neq A P) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "d86eb9034fc0fde35affb5c3d6951a200681cdfd"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong B D A P)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
            "VernacExtend",
            "6bcb1e88c6a8ddef7ac84ec9f0a444b3adcc8c76"
        ],
        [
            "assert (Cong D B B D) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "e4ef2432e51518f9b610a3139d7a2b12982d5b5f"
        ],
        [
            "assert (Cong D B A P) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "063e4b37503fd54293a77dfac4cdc76dcd1ccf8e"
        ],
        [
            "assert (BetS D B A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "56f6aa1b1d4b21d0d5ab96243b99877c38a03a49"
        ],
        [
            "assert (Lt A P D A) by (conclude_def Lt ).",
            "VernacExtend",
            "ad18ac2884abadf390d79518ca58b7ef0db26164"
        ],
        [
            "assert (Cong D A A D) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "34391dc4007ad4386f94ddafc83c34a8e093b76e"
        ],
        [
            "assert (Lt A P A D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "0b4147934e89bc4db2ecfa7016229b708d932d0d"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F A P)) by (conclude_def Lt );destruct Tf as [F];spliter.",
            "VernacExtend",
            "78919357b3687156184610447fd300d6a4cc6993"
        ],
        [
            "assert (BetS E A D) by (conclude lemma_3_7b).",
            "VernacExtend",
            "29ad8adddf5a3d8bd8d644c64a3307046e794e13"
        ],
        [
            "assert (BetS E A F) by (conclude axiom_innertransitivity).",
            "VernacExtend",
            "2efe0a3f6d1215dcd8aa6e7aeda19972fb3735c8"
        ],
        [
            "assert (Cong A P A F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "2fc103a0f8c05c4f73aaa043929d6b2fc7a8adeb"
        ],
        [
            "assert (eq P F) by (conclude lemma_extensionunique).",
            "VernacExtend",
            "f6f9be7365910b7a8b656037caeac9d076b40014"
        ],
        [
            "assert (BetS A P D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "6975ac84b487ed4c259ec1307725c0b917aa3112"
        ],
        [
            "assert (~ ~ BetS A B P).",
            "VernacExtend",
            "f06793bc773fdfd67627e9bcc498de9d511f5ab9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (eq B P) by (conclude axiom_connectivity).",
            "VernacExtend",
            "e3c66c0e074101297f58fbb0c22390de5da176a2"
        ],
        [
            "assert (neq B P) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "ecef067c6fd210d486147331a1c578c19a4c9e15"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_ray",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "b249509239b41d0b782c6bc4a9915ef0540e7f7b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS E A P /\\ BetS E A B)) by (conclude_def Out );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "af98a3b65d71f2dd672cc6f4fe76a4c9350c1e80"
                    ]
                },
                {
                    "command": [
                        "assert (neq A P) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "d86eb9034fc0fde35affb5c3d6951a200681cdfd"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong B D A P)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
                        "VernacExtend",
                        "6bcb1e88c6a8ddef7ac84ec9f0a444b3adcc8c76"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D B B D) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "e4ef2432e51518f9b610a3139d7a2b12982d5b5f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D B A P) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "063e4b37503fd54293a77dfac4cdc76dcd1ccf8e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D B A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "56f6aa1b1d4b21d0d5ab96243b99877c38a03a49"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A P D A) by (conclude_def Lt ).",
                        "VernacExtend",
                        "ad18ac2884abadf390d79518ca58b7ef0db26164"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D A A D) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "34391dc4007ad4386f94ddafc83c34a8e093b76e"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A P A D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "0b4147934e89bc4db2ecfa7016229b708d932d0d"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F A P)) by (conclude_def Lt );destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "78919357b3687156184610447fd300d6a4cc6993"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E A D) by (conclude lemma_3_7b).",
                        "VernacExtend",
                        "29ad8adddf5a3d8bd8d644c64a3307046e794e13"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E A F) by (conclude axiom_innertransitivity).",
                        "VernacExtend",
                        "2efe0a3f6d1215dcd8aa6e7aeda19972fb3735c8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A P A F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "2fc103a0f8c05c4f73aaa043929d6b2fc7a8adeb"
                    ]
                },
                {
                    "command": [
                        "assert (eq P F) by (conclude lemma_extensionunique).",
                        "VernacExtend",
                        "f6f9be7365910b7a8b656037caeac9d076b40014"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A P D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "6975ac84b487ed4c259ec1307725c0b917aa3112"
                    ]
                },
                {
                    "command": [
                        "assert (~ ~ BetS A B P).",
                        "VernacExtend",
                        "f06793bc773fdfd67627e9bcc498de9d511f5ab9"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (eq B P) by (conclude axiom_connectivity).",
                        "VernacExtend",
                        "e3c66c0e074101297f58fbb0c22390de5da176a2"
                    ]
                },
                {
                    "command": [
                        "assert (neq B P) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "ecef067c6fd210d486147331a1c578c19a4c9e15"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}