{
    "filename": "Elements/OriginalProofs/lemma_righttogether.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_Euclid4.",
            "VernacRequire",
            "a029a90d5daf512ffb737a19cbc111bddc7fdb72"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_14.",
            "VernacRequire",
            "26dd3b2c4032eb5a65dc8755bb78834dea77901a"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_righttogether : forall A B C G, Per G A B -> Per B A C -> TS G B A C -> RT G A B B A C /\\ BetS G A C.",
            "VernacStartTheoremProof",
            "d5357f77b5a24cc977781824c18d4a1dce8e542d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Per B A G) by (conclude lemma_8_2).",
            "VernacExtend",
            "b9ca610d1f5ae35e201ecd25a5feceda6b74a9bd"
        ],
        [
            "assert (neq A G) by (conclude_def Per ).",
            "VernacExtend",
            "4e6bb5d386687c62efa3b1b4321800c556c05195"
        ],
        [
            "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e2791ae9c412727db671b58f53b6b23174e66732"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists D, (BetS G A D /\\ Cong A D G A)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
            "VernacExtend",
            "1c9ef27ec823fe8a3b4be30fb6779dc076b48860"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (neq A B) by (conclude_def Per ).",
            "VernacExtend",
            "9bd989ab305edcf130cfd4234c2b32da4dc77414"
        ],
        [
            "assert (Out A B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "22813113886dbbdce7acaed310fef3f6d11d8640"
        ],
        [
            "assert (Supp G A B B D) by (conclude_def Supp ).",
            "VernacExtend",
            "ddb66682850308475786744c4366b35239fbf01e"
        ],
        [
            "assert (nCol B A G) by (conclude_def TS ).",
            "VernacExtend",
            "6e29c4aec1c82b2ce0577687279ebf3de7276067"
        ],
        [
            "assert (nCol G A B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "263d3f932ac569d6cd32997c64ec126a9dba28ff"
        ],
        [
            "assert (CongA G A B G A B) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "bd556e3b695c02556e08d42c5afe26d0b64e1485"
        ],
        [
            "assert (Col G A D) by (conclude_def Col ).",
            "VernacExtend",
            "901b7f02211e795c2879e7e931ba3b062cceadb8"
        ],
        [
            "assert (neq A D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
        ],
        [
            "assert (neq D A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "8c2d71a98f48066e4c95be7e226b24641861832e"
        ],
        [
            "assert (Per D A B) by (conclude lemma_collinearright).",
            "VernacExtend",
            "ca52042361e9c576f66d818bcc32038cf17bd100"
        ],
        [
            "assert (Per B A D) by (conclude lemma_8_2).",
            "VernacExtend",
            "4c6a3505d80aa29ddd1dc2c313bae797994e4233"
        ],
        [
            "assert (CongA B A C B A D) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "5cab86455ac61bd983ac060caf8129b0351cb233"
        ],
        [
            "assert (RT G A B B A C) by (conclude_def RT ).",
            "VernacExtend",
            "d54ae392b5794eb26e6a36c67a0f59f0cb55b34a"
        ],
        [
            "assert (TS C B A G) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "c51c484e7cb52d765179e8981cf4cefde3edf00e"
        ],
        [
            "assert (BetS G A C) by (conclude proposition_14).",
            "VernacExtend",
            "208a01ea752214cd35a899bbeba4d8f08ff1c1aa"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_righttogether",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A G) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "b9ca610d1f5ae35e201ecd25a5feceda6b74a9bd"
                    ]
                },
                {
                    "command": [
                        "assert (neq A G) by (conclude_def Per ).",
                        "VernacExtend",
                        "4e6bb5d386687c62efa3b1b4321800c556c05195"
                    ]
                },
                {
                    "command": [
                        "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e2791ae9c412727db671b58f53b6b23174e66732"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists D, (BetS G A D /\\ Cong A D G A)) by (conclude lemma_extension);destruct Tf as [D];spliter.",
                        "VernacExtend",
                        "1c9ef27ec823fe8a3b4be30fb6779dc076b48860"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (conclude_def Per ).",
                        "VernacExtend",
                        "9bd989ab305edcf130cfd4234c2b32da4dc77414"
                    ]
                },
                {
                    "command": [
                        "assert (Out A B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "22813113886dbbdce7acaed310fef3f6d11d8640"
                    ]
                },
                {
                    "command": [
                        "assert (Supp G A B B D) by (conclude_def Supp ).",
                        "VernacExtend",
                        "ddb66682850308475786744c4366b35239fbf01e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A G) by (conclude_def TS ).",
                        "VernacExtend",
                        "6e29c4aec1c82b2ce0577687279ebf3de7276067"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G A B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "263d3f932ac569d6cd32997c64ec126a9dba28ff"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G A B G A B) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "bd556e3b695c02556e08d42c5afe26d0b64e1485"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A D) by (conclude_def Col ).",
                        "VernacExtend",
                        "901b7f02211e795c2879e7e931ba3b062cceadb8"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
                    ]
                },
                {
                    "command": [
                        "assert (neq D A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "8c2d71a98f48066e4c95be7e226b24641861832e"
                    ]
                },
                {
                    "command": [
                        "assert (Per D A B) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "ca52042361e9c576f66d818bcc32038cf17bd100"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A D) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "4c6a3505d80aa29ddd1dc2c313bae797994e4233"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B A C B A D) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "5cab86455ac61bd983ac060caf8129b0351cb233"
                    ]
                },
                {
                    "command": [
                        "assert (RT G A B B A C) by (conclude_def RT ).",
                        "VernacExtend",
                        "d54ae392b5794eb26e6a36c67a0f59f0cb55b34a"
                    ]
                },
                {
                    "command": [
                        "assert (TS C B A G) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "c51c484e7cb52d765179e8981cf4cefde3edf00e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS G A C) by (conclude proposition_14).",
                        "VernacExtend",
                        "208a01ea752214cd35a899bbeba4d8f08ff1c1aa"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}