{
    "filename": "Elements/OriginalProofs/lemma_crossimpliesopposite.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.",
            "VernacRequire",
            "45862997789ccb0c1d124a0a45383611fa0cc836"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.",
            "VernacRequire",
            "4e2011e913226485bed5d882d28dd2a3e317b6e7"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.",
            "VernacStartTheoremProof",
            "a4fc6c8e439ca4357428aefec30b4407e0ee6890"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
            "VernacExtend",
            "baff900477e249c84985a07c1c93d5b1a54789fe"
        ],
        [
            "assert (Col C M D) by (conclude_def Col ).",
            "VernacExtend",
            "5abec8c9b7791669cbc7a630abcd7e70380ed55d"
        ],
        [
            "assert (Col C D M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "0219ee428c378a42289a4a697e9787472c6df92e"
        ],
        [
            "assert (nCol C D A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "828ed7fb044e87146fedeabe1cabfc203ea840dc"
        ],
        [
            "assert (nCol D C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "6959f1cc724f6318bc669f6012eedfae84932d9a"
        ],
        [
            "assert (TS A C D B) by (conclude_def TS ).",
            "VernacExtend",
            "a67dbad144120471abdd6098f7c9e4ebf24e7119"
        ],
        [
            "assert (Col D C M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "36147cec7e414a87f6debdd822d58b866a9faf18"
        ],
        [
            "assert (TS A D C B) by (conclude_def TS ).",
            "VernacExtend",
            "4cf7e6a5528711403a04a25c6e14e69f4e2f86a8"
        ],
        [
            "assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "e9a3022764b4fe3952bd12764d900b8b7efa49fe"
        ],
        [
            "assert (TS B D C A) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "e6dfca0826f56a5f9b2d554619494b20bb847ccd"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_crossimpliesopposite",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "baff900477e249c84985a07c1c93d5b1a54789fe"
                    ]
                },
                {
                    "command": [
                        "assert (Col C M D) by (conclude_def Col ).",
                        "VernacExtend",
                        "5abec8c9b7791669cbc7a630abcd7e70380ed55d"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "0219ee428c378a42289a4a697e9787472c6df92e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C D A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "828ed7fb044e87146fedeabe1cabfc203ea840dc"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "6959f1cc724f6318bc669f6012eedfae84932d9a"
                    ]
                },
                {
                    "command": [
                        "assert (TS A C D B) by (conclude_def TS ).",
                        "VernacExtend",
                        "a67dbad144120471abdd6098f7c9e4ebf24e7119"
                    ]
                },
                {
                    "command": [
                        "assert (Col D C M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "36147cec7e414a87f6debdd822d58b866a9faf18"
                    ]
                },
                {
                    "command": [
                        "assert (TS A D C B) by (conclude_def TS ).",
                        "VernacExtend",
                        "4cf7e6a5528711403a04a25c6e14e69f4e2f86a8"
                    ]
                },
                {
                    "command": [
                        "assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "e9a3022764b4fe3952bd12764d900b8b7efa49fe"
                    ]
                },
                {
                    "command": [
                        "assert (TS B D C A) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "e6dfca0826f56a5f9b2d554619494b20bb847ccd"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}