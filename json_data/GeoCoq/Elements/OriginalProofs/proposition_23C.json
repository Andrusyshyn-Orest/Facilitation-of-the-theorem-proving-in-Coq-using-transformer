{
    "filename": "Elements/OriginalProofs/proposition_23C.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_23B.",
            "VernacRequire",
            "423f04318a7a80972cac4748dd2ff4b33a5cc2e3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_23C : forall A B C D E P, neq A B -> nCol D C E -> nCol A B P -> exists X Y, Out A B Y /\\ CongA X A Y D C E /\\ OS X P A B.",
            "VernacStartTheoremProof",
            "31f0105db82c988a5f323983b7a015e836611006"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (~ eq P A).",
            "VernacExtend",
            "81f8ee1c15d70865111596ee77870fb467cde2e7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (eq A P) by (conclude lemma_equalitysymmetric).",
            "VernacExtend",
            "118f439b9df0ebd6772af1641c1762bf1f3cb92b"
        ],
        [
            "assert (Col A B P) by (conclude_def Col ).",
            "VernacExtend",
            "285be82e82d04cd38c0d8934f4303abb289e8cf2"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, (BetS P A Q /\\ Cong A Q P A)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
            "VernacExtend",
            "171e6acbe67f92245d9b5e1e524a17f5b42ab5c7"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Col A B A) by (conclude_def Col ).",
            "VernacExtend",
            "7fe661a35be4052e3e351decefc3e023ccdb88ad"
        ],
        [
            "assert (~ Col A B Q).",
            "VernacExtend",
            "a7b586afcbc3a572000929aee908b9c94d9b6e3f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col P A Q) by (conclude_def Col ).",
            "VernacExtend",
            "26e42c12053f5135ccd2d839b3b07361675e60eb"
        ],
        [
            "assert (Col Q A B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a21d837aabc918bdc2a665d9965393579e722e97"
        ],
        [
            "assert (Col Q A P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "20f8c7969a4d5862700a0260504e41679f9aa6a0"
        ],
        [
            "assert (neq A Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "4139385529ef0eda0daaf20329f697db80ba6cf1"
        ],
        [
            "assert (neq Q A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "beb700629294874edd4330f535d7540459c2f2fe"
        ],
        [
            "assert (Col A B P) by (conclude lemma_collinear4).",
            "VernacExtend",
            "a8231b20675ee190daab4aabc7315e2e951e9649"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F G, (Out A B G /\\ CongA F A G D C E /\\ TS F A B Q)) by (conclude proposition_23B);destruct Tf as [F[G]];spliter.",
            "VernacExtend",
            "6e488a9e388a295cbbe9209d7cea92a7152a8513"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists J, (BetS F J Q /\\ Col A B J /\\ nCol A B F)) by (conclude_def TS );destruct Tf as [J];spliter.",
            "VernacExtend",
            "c43679ec6134958bb219586f8fdf3dc2a81a0e84"
        ],
        [
            "assert (OS F P A B) by (conclude_def OS ).",
            "VernacExtend",
            "bdfef31ac7c658425fc36b62eaa06be0bd244133"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_23C",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq P A).",
                        "VernacExtend",
                        "81f8ee1c15d70865111596ee77870fb467cde2e7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (eq A P) by (conclude lemma_equalitysymmetric).",
                        "VernacExtend",
                        "118f439b9df0ebd6772af1641c1762bf1f3cb92b"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B P) by (conclude_def Col ).",
                        "VernacExtend",
                        "285be82e82d04cd38c0d8934f4303abb289e8cf2"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, (BetS P A Q /\\ Cong A Q P A)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "171e6acbe67f92245d9b5e1e524a17f5b42ab5c7"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B A) by (conclude_def Col ).",
                        "VernacExtend",
                        "7fe661a35be4052e3e351decefc3e023ccdb88ad"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A B Q).",
                        "VernacExtend",
                        "a7b586afcbc3a572000929aee908b9c94d9b6e3f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col P A Q) by (conclude_def Col ).",
                        "VernacExtend",
                        "26e42c12053f5135ccd2d839b3b07361675e60eb"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q A B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a21d837aabc918bdc2a665d9965393579e722e97"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q A P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "20f8c7969a4d5862700a0260504e41679f9aa6a0"
                    ]
                },
                {
                    "command": [
                        "assert (neq A Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "4139385529ef0eda0daaf20329f697db80ba6cf1"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "beb700629294874edd4330f535d7540459c2f2fe"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B P) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "a8231b20675ee190daab4aabc7315e2e951e9649"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F G, (Out A B G /\\ CongA F A G D C E /\\ TS F A B Q)) by (conclude proposition_23B);destruct Tf as [F[G]];spliter.",
                        "VernacExtend",
                        "6e488a9e388a295cbbe9209d7cea92a7152a8513"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists J, (BetS F J Q /\\ Col A B J /\\ nCol A B F)) by (conclude_def TS );destruct Tf as [J];spliter.",
                        "VernacExtend",
                        "c43679ec6134958bb219586f8fdf3dc2a81a0e84"
                    ]
                },
                {
                    "command": [
                        "assert (OS F P A B) by (conclude_def OS ).",
                        "VernacExtend",
                        "bdfef31ac7c658425fc36b62eaa06be0bd244133"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}