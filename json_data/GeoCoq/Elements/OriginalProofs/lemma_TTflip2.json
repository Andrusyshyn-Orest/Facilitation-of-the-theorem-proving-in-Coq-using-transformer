{
    "filename": "Elements/OriginalProofs/lemma_TTflip2.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_extension.",
            "VernacRequire",
            "7a395274ff58b809e27cefedbbe9b45804acec33"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence2.",
            "VernacRequire",
            "9ea7bc6d614a484da577fe8b249254ad11cf2676"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_TTflip2 : forall A B C D E F G H, TT A B C D E F G H -> TT A B C D H G F E.",
            "VernacStartTheoremProof",
            "da00e9afb13827c6c9735c1ed421d7b245461252"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.",
            "VernacExtend",
            "009bf0dcfc029462b62f3dbb977ec1266dc9ac5f"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (BetS A B K /\\ Cong B K C D /\\ Lt E J A K)) by (conclude_def TG );destruct Tf as [K];spliter.",
            "VernacExtend",
            "dd971de4adb11037f24724195c65376b3d467d71"
        ],
        [
            "assert (neq F J) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "18ef347e0cd6cfe3a10e372bb610bc64dc10940d"
        ],
        [
            "assert (neq G H) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "1b7a5da78a16d747630359bc33ff40acc00f8148"
        ],
        [
            "assert (neq H G) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d9df94dc080eef15b772bb805e3c034674809907"
        ],
        [
            "assert (neq E F) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "24d9090140e0d09ffb9bfc0a8bab177a6d8c8b7d"
        ],
        [
            "assert (neq F E) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "c0cd186aa29309ff7497bf8f03906985e3cd35a6"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists L, (BetS H G L /\\ Cong G L F E)) by (conclude lemma_extension);destruct Tf as [L];spliter.",
            "VernacExtend",
            "5862584e5cd56a467444e4b5cc2ea3394878a5da"
        ],
        [
            "assert (Cong L G E F) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "9bd69ceb40bec2f81843386b2bca5037a6452da3"
        ],
        [
            "assert (Cong G H F J) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0f43df5e7a730e683f6424d7b001e5583ae562e6"
        ],
        [
            "assert (BetS L G H) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "0430bcae78a15e321d0293ffbb66df34df92cd01"
        ],
        [
            "assert (Cong L H E J) by (conclude cn_sumofparts).",
            "VernacExtend",
            "bb2fed147b982562f18b327ae4b34fd42feadb82"
        ],
        [
            "assert (Cong H L L H) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "0a509a5087a26644898f164d797dc59aa4621012"
        ],
        [
            "assert (Cong H L E J) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "1e084621e5528819667f564519894160a24f4f46"
        ],
        [
            "assert (Cong E J H L) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "02425f0795ae4a3e4d30471bf85510417d77621f"
        ],
        [
            "assert (Lt H L A K) by (conclude lemma_lessthancongruence2).",
            "VernacExtend",
            "96477ce3de7e9f9461f477876395c3832c2a8679"
        ],
        [
            "assert (TG A B C D H L) by (conclude_def TG ).",
            "VernacExtend",
            "e0da47916573c71290b66bb62f13d59633735454"
        ],
        [
            "assert (TT A B C D H G F E) by (conclude_def TT ).",
            "VernacExtend",
            "2cde0426f72b086eeb017c0f3d940da6376b9a13"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_TTflip2",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists J, (BetS E F J /\\ Cong F J G H /\\ TG A B C D E J)) by (conclude_def TT );destruct Tf as [J];spliter.",
                        "VernacExtend",
                        "009bf0dcfc029462b62f3dbb977ec1266dc9ac5f"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (BetS A B K /\\ Cong B K C D /\\ Lt E J A K)) by (conclude_def TG );destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "dd971de4adb11037f24724195c65376b3d467d71"
                    ]
                },
                {
                    "command": [
                        "assert (neq F J) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "18ef347e0cd6cfe3a10e372bb610bc64dc10940d"
                    ]
                },
                {
                    "command": [
                        "assert (neq G H) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "1b7a5da78a16d747630359bc33ff40acc00f8148"
                    ]
                },
                {
                    "command": [
                        "assert (neq H G) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d9df94dc080eef15b772bb805e3c034674809907"
                    ]
                },
                {
                    "command": [
                        "assert (neq E F) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "24d9090140e0d09ffb9bfc0a8bab177a6d8c8b7d"
                    ]
                },
                {
                    "command": [
                        "assert (neq F E) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "c0cd186aa29309ff7497bf8f03906985e3cd35a6"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists L, (BetS H G L /\\ Cong G L F E)) by (conclude lemma_extension);destruct Tf as [L];spliter.",
                        "VernacExtend",
                        "5862584e5cd56a467444e4b5cc2ea3394878a5da"
                    ]
                },
                {
                    "command": [
                        "assert (Cong L G E F) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "9bd69ceb40bec2f81843386b2bca5037a6452da3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G H F J) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0f43df5e7a730e683f6424d7b001e5583ae562e6"
                    ]
                },
                {
                    "command": [
                        "assert (BetS L G H) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "0430bcae78a15e321d0293ffbb66df34df92cd01"
                    ]
                },
                {
                    "command": [
                        "assert (Cong L H E J) by (conclude cn_sumofparts).",
                        "VernacExtend",
                        "bb2fed147b982562f18b327ae4b34fd42feadb82"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H L L H) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "0a509a5087a26644898f164d797dc59aa4621012"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H L E J) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "1e084621e5528819667f564519894160a24f4f46"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E J H L) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "02425f0795ae4a3e4d30471bf85510417d77621f"
                    ]
                },
                {
                    "command": [
                        "assert (Lt H L A K) by (conclude lemma_lessthancongruence2).",
                        "VernacExtend",
                        "96477ce3de7e9f9461f477876395c3832c2a8679"
                    ]
                },
                {
                    "command": [
                        "assert (TG A B C D H L) by (conclude_def TG ).",
                        "VernacExtend",
                        "e0da47916573c71290b66bb62f13d59633735454"
                    ]
                },
                {
                    "command": [
                        "assert (TT A B C D H G F E) by (conclude_def TT ).",
                        "VernacExtend",
                        "2cde0426f72b086eeb017c0f3d940da6376b9a13"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}