{
    "filename": "Elements/OriginalProofs/lemma_3_7a.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_betweennotequal.",
            "VernacRequire",
            "860b485c7ef1d58f5629a959297727ab055051b5"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_localextension.",
            "VernacRequire",
            "697d8d6dc65c0d7757837f9e2841595d7c4c985b"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_extensionunique.",
            "VernacRequire",
            "b87c5a1a08263e580073f61854544dc50f37b965"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_3_7a : forall A B C D, BetS A B C -> BetS B C D -> BetS A C D.",
            "VernacStartTheoremProof",
            "fe4a0bcc944dde3aba6abce87749d6cf0828d65a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (neq C D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ec8ed20fd91c966709071dfab476d123976a3733"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A C E /\\ Cong C E C D)) by (conclude lemma_localextension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "8538dd4bfafad2f1b57fab84569a7f1b9608c1db"
        ],
        [
            "assert (Cong C D C E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "392c96bcb13e890c6eb8d1d7de80044d1c7f03b4"
        ],
        [
            "assert (BetS B C E) by (conclude lemma_3_6a).",
            "VernacExtend",
            "2e75fec1aedc70d9da70f66027e765aa64c1d817"
        ],
        [
            "assert (eq D E) by (conclude lemma_extensionunique).",
            "VernacExtend",
            "616d6fdb363eb0371f1ce3f060a5cb50f0303965"
        ],
        [
            "assert (BetS A C D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "3577d7940294224d9400dfd2ba366dd658085357"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_3_7a",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ec8ed20fd91c966709071dfab476d123976a3733"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A C E /\\ Cong C E C D)) by (conclude lemma_localextension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "8538dd4bfafad2f1b57fab84569a7f1b9608c1db"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D C E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "392c96bcb13e890c6eb8d1d7de80044d1c7f03b4"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B C E) by (conclude lemma_3_6a).",
                        "VernacExtend",
                        "2e75fec1aedc70d9da70f66027e765aa64c1d817"
                    ]
                },
                {
                    "command": [
                        "assert (eq D E) by (conclude lemma_extensionunique).",
                        "VernacExtend",
                        "616d6fdb363eb0371f1ce3f060a5cb50f0303965"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A C D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "3577d7940294224d9400dfd2ba366dd658085357"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}