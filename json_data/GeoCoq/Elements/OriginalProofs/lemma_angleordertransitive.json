{
    "filename": "Elements/OriginalProofs/lemma_angleordertransitive.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.",
            "VernacRequire",
            "a5b0c8cd5b25371ea0dedf900d1cff5bba496d16"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence.",
            "VernacRequire",
            "c2bd6e17c765cc0ffa70acda0768e1e750e5c37e"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_crossbar.",
            "VernacRequire",
            "0106fe97a15011bd08531b64fbb63434c7a191e1"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_angleordertransitive : forall A B C D E F P Q R, LtA A B C D E F -> LtA D E F P Q R -> LtA A B C P Q R.",
            "VernacStartTheoremProof",
            "f945c27ca9eb5db557225ba9865f465c7fc5e709"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists U V W, (BetS U W V /\\ Out Q P U /\\ Out Q R V /\\ CongA D E F P Q W)) by (conclude_def LtA );destruct Tf as [U[V[W]]];spliter.",
            "VernacExtend",
            "292388ad30a177a5bdf7a44cae032e4ad12642c8"
        ],
        [
            "assert (CongA P Q W D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "054d8c88781d9e8a9a91f9c13438ea3e1e557e64"
        ],
        [
            "assert (neq D E) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "451fad7b814445b233fba1007e7f5c1854af2acf"
        ],
        [
            "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e61047105ab8e4e585d40360238f2bc08382ae40"
        ],
        [
            "assert (neq E F) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "d3f99bc086b2f5aae09400874b91abd319c2dc19"
        ],
        [
            "assert (neq Q U) by (conclude lemma_raystrict).",
            "VernacExtend",
            "5914880ebda5265710ecd6b57bc9f30a57549571"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (Out E D G /\\ Cong E G Q U)) by (conclude lemma_layoff);destruct Tf as [G];spliter.",
            "VernacExtend",
            "f4fb0610213d99dd08ccebccee1d50f74681de16"
        ],
        [
            "assert (neq Q W) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "5c98726b528779b1b1b1cf319c5282abba5709cb"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists J, (Out E F J /\\ Cong E J Q W)) by (conclude lemma_layoff);destruct Tf as [J];spliter.",
            "VernacExtend",
            "e1845236f39944b3c75f081ae97b3c0e14184970"
        ],
        [
            "assert (nCol D E F) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "513b74e3288991454627123e18d97e4f92730d3b"
        ],
        [
            "assert (CongA D E F D E F) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "da9ea27a5defff6c13d548045072012f1e580d93"
        ],
        [
            "assert (CongA D E F G E J) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "91b2a29f8541b4633c7fb530a18a76920492c4d8"
        ],
        [
            "assert (CongA G E J D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "d5742badbfda636a8eb8187967f4f2c813b875f5"
        ],
        [
            "assert (CongA G E J P Q W) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "9de16c0c02db797fe447b34d48a29412e5d1172c"
        ],
        [
            "assert (eq W W) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "aa0e171254082e9dff1fd12b2be2784e1163434b"
        ],
        [
            "assert (Out Q W W) by (conclude lemma_ray4).",
            "VernacExtend",
            "f1d9c002e94f4e16b4f208a2a17e8ce2eef9a79a"
        ],
        [
            "assert (CongA G E J U Q W) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "1c77b8b438e415c3fd8178a3e3bd79cb46e66c65"
        ],
        [
            "assert (nCol G E J) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "733d3f14a32a19eaf659bf1059f520650fbd3c61"
        ],
        [
            "assert (nCol U Q W) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "26e6470fb0de4fa71c627c960d93e7d38f04f590"
        ],
        [
            "assert (Triangle G E J) by (conclude_def Triangle ).",
            "VernacExtend",
            "e405c7161633644f0a0a38ba6919c8deecfc8536"
        ],
        [
            "assert (Triangle U Q W) by (conclude_def Triangle ).",
            "VernacExtend",
            "fcdcebac14c5ca5c3a0da10835aab763f466d6ac"
        ],
        [
            "assert (Cong G J U W) by (conclude proposition_04).",
            "VernacExtend",
            "f684c441c9980a906bc8002b51aac04cc98fe9bd"
        ],
        [
            "assert (eq W W) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "aa0e171254082e9dff1fd12b2be2784e1163434b"
        ],
        [
            "assert (CongA D E F U Q W) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "62bb3f1ca2185cc3d622f91dd0407977a9aa111f"
        ],
        [
            "assert (CongA U Q W D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "1e80b1a2a979034291c8447c6f3f2a781b5d9f6c"
        ],
        [
            "assert (CongA D E F U Q W) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "62bb3f1ca2185cc3d622f91dd0407977a9aa111f"
        ],
        [
            "assert (LtA A B C U Q W) by (conclude lemma_angleorderrespectscongruence).",
            "VernacExtend",
            "656946ce3a22c08b0755c35bf9ba60fc4a1a4804"
        ],
        [
            "rename_H H; let Tf:=fresh in assert (Tf:exists H S T, (BetS S H T /\\ Out Q U S /\\ Out Q W T /\\ CongA A B C U Q H)) by (conclude_def LtA );destruct Tf as [H[S[T]]];spliter.",
            "VernacExtend",
            "27da08b62b91d504a2c0893807ad67ffed906c32"
        ],
        [
            "assert (Out Q U P) by (conclude lemma_ray5).",
            "VernacExtend",
            "c96803a602e6415499b1896053ed0abb114ae7c1"
        ],
        [
            "assert (neq Q H) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "025a15ef7471b524095d15b825db8331deba6f0e"
        ],
        [
            "assert (eq H H) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "4edcfc35fe1c1eb61e5f33e0efa52ce557093efe"
        ],
        [
            "assert (Out Q H H) by (conclude lemma_ray4).",
            "VernacExtend",
            "44ee5bc1b65f8c3300ffb0571ea135d7f0eef3df"
        ],
        [
            "assert (CongA A B C P Q H) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "179316c12cd413ad7bda6f7cca7c0031282f05e1"
        ],
        [
            "assert (CongA D E F P Q T) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "1f50c155b3bf22129110c75b3d44dd18f35d3f09"
        ],
        [
            "assert (nCol P Q T) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "d3da047340d23a0fd6b1e6370f24dfbb202a705e"
        ],
        [
            "assert (Triangle P Q T) by (conclude_def Triangle ).",
            "VernacExtend",
            "f7b9f4cc45e2be67a08d00a5f46f7d140efd2bda"
        ],
        [
            "assert (neq Q P) by (conclude lemma_ray2).",
            "VernacExtend",
            "af7d1906cb704df78b6b03d186f8f8ed425d9796"
        ],
        [
            "assert (Out Q T W) by (conclude lemma_ray5).",
            "VernacExtend",
            "beb5521c1967edcb80fff23f3481b916e0ca9be1"
        ],
        [
            "assert (~ Col S Q T).",
            "VernacExtend",
            "c9996fb0a104d977f3ab76572fd781fbc8c5f742"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col Q U S) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "8d386c97c579c77895507b5e8da058f35abd9a5a"
        ],
        [
            "assert (Col U Q S) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5cdea4e463403936b26456704fef5b9422952a17"
        ],
        [
            "assert (Col Q P U) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "00e13fbfe4bfdbee068b4024b02c5c36f28f9be7"
        ],
        [
            "assert (Col U Q P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "47996eca56a19f6b6d4a613d6cc810111026c3ee"
        ],
        [
            "assert (neq Q U) by (conclude lemma_raystrict).",
            "VernacExtend",
            "5914880ebda5265710ecd6b57bc9f30a57549571"
        ],
        [
            "assert (neq U Q) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "82503ab32e8d2a23429b52a74aa98deb2e4509ef"
        ],
        [
            "assert (Col Q S P) by (conclude lemma_collinear4).",
            "VernacExtend",
            "ef3f20ad328f81603929ed2f8cd42e04d223bac1"
        ],
        [
            "assert (Col S Q P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "4e1ec0d55c2ca85cc9fd6e619deeb87f24172ba3"
        ],
        [
            "assert (neq Q S) by (conclude lemma_raystrict).",
            "VernacExtend",
            "cc3e9a3e7c4dcc87ed9c56c3b39606e86708fcba"
        ],
        [
            "assert (neq S Q) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "5146babd4590e0def7fe7deae2d04d90ba7c307f"
        ],
        [
            "assert (Col Q T P) by (conclude lemma_collinear4).",
            "VernacExtend",
            "df1b3f22d3a438c875028256861b8e24a16b63cd"
        ],
        [
            "assert (Col P Q T) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c1baebcc92312396278987174aaac3bc90eef501"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Triangle S Q T) by (conclude_def Triangle ).",
            "VernacExtend",
            "3d16c07e664b9c9b904d5ff612baa75704052126"
        ],
        [
            "assert (Out Q S U) by (conclude lemma_ray5).",
            "VernacExtend",
            "f549f0f58865e743188ae1fd73591544dd5b10ef"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (Out Q H K /\\ BetS U K W)) by (conclude lemma_crossbar);destruct Tf as [K];spliter.",
            "VernacExtend",
            "ca8451f0a8ce300e65219bb43038afb0f6e17658"
        ],
        [
            "assert (BetS U K V) by (conclude lemma_3_6b).",
            "VernacExtend",
            "eebe32bccfd26bc3e7e109e33ec8f4fcc0c5c6e6"
        ],
        [
            "assert (eq P P) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "e88188554de7f503b71386a0ce3b6c77c61879af"
        ],
        [
            "assert (Out Q P P) by (conclude lemma_ray4).",
            "VernacExtend",
            "eb123aede5b6ffb8b3c837b04a599f27c2e5078e"
        ],
        [
            "assert (CongA A B C P Q K) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "e9de0187c29b8d6385042549e396710d6cb6f509"
        ],
        [
            "assert (LtA A B C P Q R) by (conclude_def LtA ).",
            "VernacExtend",
            "c75fcff4b2e0e26481cb271d3eadb4efa126d1b8"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_angleordertransitive",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists U V W, (BetS U W V /\\ Out Q P U /\\ Out Q R V /\\ CongA D E F P Q W)) by (conclude_def LtA );destruct Tf as [U[V[W]]];spliter.",
                        "VernacExtend",
                        "292388ad30a177a5bdf7a44cae032e4ad12642c8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q W D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "054d8c88781d9e8a9a91f9c13438ea3e1e557e64"
                    ]
                },
                {
                    "command": [
                        "assert (neq D E) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "451fad7b814445b233fba1007e7f5c1854af2acf"
                    ]
                },
                {
                    "command": [
                        "assert (neq E D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e61047105ab8e4e585d40360238f2bc08382ae40"
                    ]
                },
                {
                    "command": [
                        "assert (neq E F) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "d3f99bc086b2f5aae09400874b91abd319c2dc19"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q U) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "5914880ebda5265710ecd6b57bc9f30a57549571"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (Out E D G /\\ Cong E G Q U)) by (conclude lemma_layoff);destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "f4fb0610213d99dd08ccebccee1d50f74681de16"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q W) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "5c98726b528779b1b1b1cf319c5282abba5709cb"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists J, (Out E F J /\\ Cong E J Q W)) by (conclude lemma_layoff);destruct Tf as [J];spliter.",
                        "VernacExtend",
                        "e1845236f39944b3c75f081ae97b3c0e14184970"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D E F) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "513b74e3288991454627123e18d97e4f92730d3b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F D E F) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "da9ea27a5defff6c13d548045072012f1e580d93"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F G E J) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "91b2a29f8541b4633c7fb530a18a76920492c4d8"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G E J D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "d5742badbfda636a8eb8187967f4f2c813b875f5"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G E J P Q W) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "9de16c0c02db797fe447b34d48a29412e5d1172c"
                    ]
                },
                {
                    "command": [
                        "assert (eq W W) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "aa0e171254082e9dff1fd12b2be2784e1163434b"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q W W) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "f1d9c002e94f4e16b4f208a2a17e8ce2eef9a79a"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G E J U Q W) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "1c77b8b438e415c3fd8178a3e3bd79cb46e66c65"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G E J) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "733d3f14a32a19eaf659bf1059f520650fbd3c61"
                    ]
                },
                {
                    "command": [
                        "assert (nCol U Q W) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "26e6470fb0de4fa71c627c960d93e7d38f04f590"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle G E J) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e405c7161633644f0a0a38ba6919c8deecfc8536"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle U Q W) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "fcdcebac14c5ca5c3a0da10835aab763f466d6ac"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G J U W) by (conclude proposition_04).",
                        "VernacExtend",
                        "f684c441c9980a906bc8002b51aac04cc98fe9bd"
                    ]
                },
                {
                    "command": [
                        "assert (eq W W) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "aa0e171254082e9dff1fd12b2be2784e1163434b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F U Q W) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "62bb3f1ca2185cc3d622f91dd0407977a9aa111f"
                    ]
                },
                {
                    "command": [
                        "assert (CongA U Q W D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "1e80b1a2a979034291c8447c6f3f2a781b5d9f6c"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F U Q W) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "62bb3f1ca2185cc3d622f91dd0407977a9aa111f"
                    ]
                },
                {
                    "command": [
                        "assert (LtA A B C U Q W) by (conclude lemma_angleorderrespectscongruence).",
                        "VernacExtend",
                        "656946ce3a22c08b0755c35bf9ba60fc4a1a4804"
                    ]
                },
                {
                    "command": [
                        "rename_H H; let Tf:=fresh in assert (Tf:exists H S T, (BetS S H T /\\ Out Q U S /\\ Out Q W T /\\ CongA A B C U Q H)) by (conclude_def LtA );destruct Tf as [H[S[T]]];spliter.",
                        "VernacExtend",
                        "27da08b62b91d504a2c0893807ad67ffed906c32"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q U P) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "c96803a602e6415499b1896053ed0abb114ae7c1"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q H) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "025a15ef7471b524095d15b825db8331deba6f0e"
                    ]
                },
                {
                    "command": [
                        "assert (eq H H) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "4edcfc35fe1c1eb61e5f33e0efa52ce557093efe"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q H H) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "44ee5bc1b65f8c3300ffb0571ea135d7f0eef3df"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C P Q H) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "179316c12cd413ad7bda6f7cca7c0031282f05e1"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D E F P Q T) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "1f50c155b3bf22129110c75b3d44dd18f35d3f09"
                    ]
                },
                {
                    "command": [
                        "assert (nCol P Q T) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "d3da047340d23a0fd6b1e6370f24dfbb202a705e"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle P Q T) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "f7b9f4cc45e2be67a08d00a5f46f7d140efd2bda"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q P) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "af7d1906cb704df78b6b03d186f8f8ed425d9796"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q T W) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "beb5521c1967edcb80fff23f3481b916e0ca9be1"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col S Q T).",
                        "VernacExtend",
                        "c9996fb0a104d977f3ab76572fd781fbc8c5f742"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q U S) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "8d386c97c579c77895507b5e8da058f35abd9a5a"
                    ]
                },
                {
                    "command": [
                        "assert (Col U Q S) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5cdea4e463403936b26456704fef5b9422952a17"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q P U) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "00e13fbfe4bfdbee068b4024b02c5c36f28f9be7"
                    ]
                },
                {
                    "command": [
                        "assert (Col U Q P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "47996eca56a19f6b6d4a613d6cc810111026c3ee"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q U) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "5914880ebda5265710ecd6b57bc9f30a57549571"
                    ]
                },
                {
                    "command": [
                        "assert (neq U Q) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "82503ab32e8d2a23429b52a74aa98deb2e4509ef"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q S P) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "ef3f20ad328f81603929ed2f8cd42e04d223bac1"
                    ]
                },
                {
                    "command": [
                        "assert (Col S Q P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "4e1ec0d55c2ca85cc9fd6e619deeb87f24172ba3"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q S) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "cc3e9a3e7c4dcc87ed9c56c3b39606e86708fcba"
                    ]
                },
                {
                    "command": [
                        "assert (neq S Q) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "5146babd4590e0def7fe7deae2d04d90ba7c307f"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q T P) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "df1b3f22d3a438c875028256861b8e24a16b63cd"
                    ]
                },
                {
                    "command": [
                        "assert (Col P Q T) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c1baebcc92312396278987174aaac3bc90eef501"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle S Q T) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "3d16c07e664b9c9b904d5ff612baa75704052126"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q S U) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "f549f0f58865e743188ae1fd73591544dd5b10ef"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (Out Q H K /\\ BetS U K W)) by (conclude lemma_crossbar);destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "ca8451f0a8ce300e65219bb43038afb0f6e17658"
                    ]
                },
                {
                    "command": [
                        "assert (BetS U K V) by (conclude lemma_3_6b).",
                        "VernacExtend",
                        "eebe32bccfd26bc3e7e109e33ec8f4fcc0c5c6e6"
                    ]
                },
                {
                    "command": [
                        "assert (eq P P) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "e88188554de7f503b71386a0ce3b6c77c61879af"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q P P) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "eb123aede5b6ffb8b3c837b04a599f27c2e5078e"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C P Q K) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "e9de0187c29b8d6385042549e396710d6cb6f509"
                    ]
                },
                {
                    "command": [
                        "assert (LtA A B C P Q R) by (conclude_def LtA ).",
                        "VernacExtend",
                        "c75fcff4b2e0e26481cb271d3eadb4efa126d1b8"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}