{
    "filename": "Elements/OriginalProofs/proposition_37.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_triangletoparallelogram.",
            "VernacRequire",
            "5e152ef4e5c604875c2cd9ae7fec10f81d845999"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_PGrotate.",
            "VernacRequire",
            "17bb59d77feb0e07635bca0a444781548dd7123d"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_35.",
            "VernacRequire",
            "7b66973815222aa79fdd9ed3761d94162027f68b"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_37 : forall A B C D, Par A D B C -> ET A B C D B C.",
            "VernacStartTheoremProof",
            "6d690b872c2258ef7b04be8eb8bf7e705caae483"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Par B C A D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "9293b6a2d3afdc1e2dacfbb39c26ab8ec1fce45f"
        ],
        [
            "assert (Par C B A D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "2d7c73cf3c31ac53b52b0f56629f67a09bee0ebe"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Col A D A) by (conclude_def Col ).",
            "VernacExtend",
            "55d256bdc258444c2f6db57dfce71e5bf2e31d88"
        ],
        [
            "assert (Col A D D) by (conclude_def Col ).",
            "VernacExtend",
            "f1df087c3a106a6e7039b8d1f9ef8fe564e0604c"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (PG A E B C /\\ Col A D E)) by (conclude lemma_triangletoparallelogram);destruct Tf as [E];spliter.",
            "VernacExtend",
            "54d5ecb18edf8e4ac23515caa1b4ba817f4ce3bc"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (PG D F B C /\\ Col A D F)) by (conclude lemma_triangletoparallelogram);destruct Tf as [F];spliter.",
            "VernacExtend",
            "19d5007a6bfc5fbc19aef76838bee4819d49b2e2"
        ],
        [
            "assert (PG E B C A) by (conclude lemma_PGrotate).",
            "VernacExtend",
            "355ee31e89135fa62abf2ddaf758bef4f97e1365"
        ],
        [
            "assert (PG F B C D) by (conclude lemma_PGrotate).",
            "VernacExtend",
            "8b77ff4e301914117051a84fc507acfb36206583"
        ],
        [
            "assert (Col D A F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "81e219b7f0669f8cb6b9917af8d2c9dc323a7b67"
        ],
        [
            "assert (Col D A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a86b083608bdcdff75c296635c1ece4f05606712"
        ],
        [
            "assert (nCol C A D) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "1f3e84b61c06ec4ccfb17caa69424dd684649df8"
        ],
        [
            "assert (neq A D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "3b96af8ab9fddde4f358b7b7ca0a2caaf9675c51"
        ],
        [
            "assert (neq D A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "8c2d71a98f48066e4c95be7e226b24641861832e"
        ],
        [
            "assert (Col A F E) by (conclude lemma_collinear4).",
            "VernacExtend",
            "77e90de0ac3bc8e4c31bd6613633cc36a7d7dc59"
        ],
        [
            "assert (Col E A D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "e658df24fa088a681362f35fb5b2d2e8b0c68852"
        ],
        [
            "assert (Col E A F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "88f5f98cbc6380ec2cf60cd1f8c8d24bf019a1f1"
        ],
        [
            "assert (EF E B C A F B C D) by (conclude proposition_35).",
            "VernacExtend",
            "eaf2324dd914872c98f762cbe01cc9cf9eb2aec9"
        ],
        [
            "assert (Cong_3 B E A A C B) by (conclude proposition_34).",
            "VernacExtend",
            "badf2bdb2945121a948bc1e04fdd8496ec35df67"
        ],
        [
            "assert (Cong_3 B F D D C B) by (conclude proposition_34).",
            "VernacExtend",
            "e61f559f15588a35728873950737a6551eda386a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS E M C /\\ BetS B M A)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
            "VernacExtend",
            "1585116c94d2627744571a8491a3626826ab8846"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (BetS F m C /\\ BetS B m D)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.",
            "VernacExtend",
            "8159d91bff21ef8b3f4c0fe0277392a3aad54944"
        ],
        [
            "assert (Col B M A) by (conclude_def Col ).",
            "VernacExtend",
            "0f062c0152a5ccd5a45410e45f9bcdfe45a88d46"
        ],
        [
            "assert (Col B m D) by (conclude_def Col ).",
            "VernacExtend",
            "ee61565be46a784bf8338835d6d96d37f7daa529"
        ],
        [
            "assert (Col B A M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
        ],
        [
            "assert (Col B D m) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c8a818ebe67a50b81907bfe5fca68d7819f88ddc"
        ],
        [
            "assert (Par E B C A) by (conclude_def PG ).",
            "VernacExtend",
            "b278554362a70fd1915d5cd9e3d8b9615ac323fd"
        ],
        [
            "assert (nCol E B A) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "8818c0ade856ba42f9244027bef68e98338c8bd4"
        ],
        [
            "assert (nCol B A E) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "b3bbff5193ce38768a29a1014ea3a94da7f0d557"
        ],
        [
            "assert (TS E B A C) by (conclude_def TS ).",
            "VernacExtend",
            "280cd68a0669115b3da153c507c128ab38a472e1"
        ],
        [
            "assert (TS C B A E) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "6c4738cd9d5b2fcf05010187d66a6ba385787be0"
        ],
        [
            "assert (Par D F B C) by (conclude_def PG ).",
            "VernacExtend",
            "959e0056346af1478e90aecf419cc36d6016ef80"
        ],
        [
            "assert (nCol D F B) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "02bc599a8cd868034cfa6e026e4b68df66ada471"
        ],
        [
            "assert (nCol B D F) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "3864628849a067332a9df5ba17947fdafa85aff7"
        ],
        [
            "assert (TS F B D C) by (conclude_def TS ).",
            "VernacExtend",
            "a3acb33db5d8cf566d391a7e8076ffb692ec5e94"
        ],
        [
            "assert (TS C B D F) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "189c12bce50976e03b54fcd7500facb9e87acd47"
        ],
        [
            "assert (ET B E A A C B) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "421e8dd4b6a66514739a27923fad3dc276cdd42b"
        ],
        [
            "assert (ET B E A C B A) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "c5073a10b601f8655e7743441ca2b2041a9a9fc5"
        ],
        [
            "assert (ET C B A B E A) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "93e4979ad82e20b4462cdf15191fc667607701e9"
        ],
        [
            "assert (ET C B A B A E) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "1e2478a71e898741293bb2281c39c67ada274131"
        ],
        [
            "assert (ET B F D D C B) by (conclude axiom_congruentequal).",
            "VernacExtend",
            "be8cd8f7fb57ed10cd800086b63a25ba9b9372ab"
        ],
        [
            "assert (ET B F D C B D) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "dc41607c976a7617834138726fc102b0e1c92290"
        ],
        [
            "assert (ET C B D B F D) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "80ffe87266e28fa4c80a7dfa8b0aae6e656acacf"
        ],
        [
            "assert (ET C B D B D F) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "18e9c8734b7a86f28ecf186fc68386d1f171ae48"
        ],
        [
            "assert (EF E B C A C B F D) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "fa9f429cd604acec0fe5f96ca6737f346879230f"
        ],
        [
            "assert (EF C B F D E B C A) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "2527bd9900d13e86fcbd8ef2e19fe1093eb37039"
        ],
        [
            "assert (EF C B F D C B E A) by (forward_using axiom_EFpermutation).",
            "VernacExtend",
            "af15692479659211ba6fc5303c01ae145319bfd3"
        ],
        [
            "assert (EF C B E A C B F D) by (conclude axiom_EFsymmetric).",
            "VernacExtend",
            "403d7079c690408935f712119b25cf51c9c38882"
        ],
        [
            "assert (ET C B A C B D) by (conclude axiom_halvesofequals).",
            "VernacExtend",
            "536f1e95fde159c829bd9dff99e652da1a9dae7e"
        ],
        [
            "assert (ET C B A D B C) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "ce493079b27788d3112fd4d38a542984d5e75673"
        ],
        [
            "assert (ET D B C C B A) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "a6d7b44ca8518a45fdb42f2e1cfa8f46a70c0c96"
        ],
        [
            "assert (ET D B C A B C) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "af49d0de95fc70f26faab19d7088fde5e683b3cf"
        ],
        [
            "assert (ET A B C D B C) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "781144375a309f45225ec3d32c282f9c54bb2ddd"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_37",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C A D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "9293b6a2d3afdc1e2dacfbb39c26ab8ec1fce45f"
                    ]
                },
                {
                    "command": [
                        "assert (Par C B A D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "2d7c73cf3c31ac53b52b0f56629f67a09bee0ebe"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Col A D A) by (conclude_def Col ).",
                        "VernacExtend",
                        "55d256bdc258444c2f6db57dfce71e5bf2e31d88"
                    ]
                },
                {
                    "command": [
                        "assert (Col A D D) by (conclude_def Col ).",
                        "VernacExtend",
                        "f1df087c3a106a6e7039b8d1f9ef8fe564e0604c"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (PG A E B C /\\ Col A D E)) by (conclude lemma_triangletoparallelogram);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "54d5ecb18edf8e4ac23515caa1b4ba817f4ce3bc"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (PG D F B C /\\ Col A D F)) by (conclude lemma_triangletoparallelogram);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "19d5007a6bfc5fbc19aef76838bee4819d49b2e2"
                    ]
                },
                {
                    "command": [
                        "assert (PG E B C A) by (conclude lemma_PGrotate).",
                        "VernacExtend",
                        "355ee31e89135fa62abf2ddaf758bef4f97e1365"
                    ]
                },
                {
                    "command": [
                        "assert (PG F B C D) by (conclude lemma_PGrotate).",
                        "VernacExtend",
                        "8b77ff4e301914117051a84fc507acfb36206583"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "81e219b7f0669f8cb6b9917af8d2c9dc323a7b67"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a86b083608bdcdff75c296635c1ece4f05606712"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C A D) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "1f3e84b61c06ec4ccfb17caa69424dd684649df8"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "3b96af8ab9fddde4f358b7b7ca0a2caaf9675c51"
                    ]
                },
                {
                    "command": [
                        "assert (neq D A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "8c2d71a98f48066e4c95be7e226b24641861832e"
                    ]
                },
                {
                    "command": [
                        "assert (Col A F E) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "77e90de0ac3bc8e4c31bd6613633cc36a7d7dc59"
                    ]
                },
                {
                    "command": [
                        "assert (Col E A D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "e658df24fa088a681362f35fb5b2d2e8b0c68852"
                    ]
                },
                {
                    "command": [
                        "assert (Col E A F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "88f5f98cbc6380ec2cf60cd1f8c8d24bf019a1f1"
                    ]
                },
                {
                    "command": [
                        "assert (EF E B C A F B C D) by (conclude proposition_35).",
                        "VernacExtend",
                        "eaf2324dd914872c98f762cbe01cc9cf9eb2aec9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 B E A A C B) by (conclude proposition_34).",
                        "VernacExtend",
                        "badf2bdb2945121a948bc1e04fdd8496ec35df67"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 B F D D C B) by (conclude proposition_34).",
                        "VernacExtend",
                        "e61f559f15588a35728873950737a6551eda386a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS E M C /\\ BetS B M A)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "1585116c94d2627744571a8491a3626826ab8846"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (BetS F m C /\\ BetS B m D)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "8159d91bff21ef8b3f4c0fe0277392a3aad54944"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M A) by (conclude_def Col ).",
                        "VernacExtend",
                        "0f062c0152a5ccd5a45410e45f9bcdfe45a88d46"
                    ]
                },
                {
                    "command": [
                        "assert (Col B m D) by (conclude_def Col ).",
                        "VernacExtend",
                        "ee61565be46a784bf8338835d6d96d37f7daa529"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
                    ]
                },
                {
                    "command": [
                        "assert (Col B D m) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c8a818ebe67a50b81907bfe5fca68d7819f88ddc"
                    ]
                },
                {
                    "command": [
                        "assert (Par E B C A) by (conclude_def PG ).",
                        "VernacExtend",
                        "b278554362a70fd1915d5cd9e3d8b9615ac323fd"
                    ]
                },
                {
                    "command": [
                        "assert (nCol E B A) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "8818c0ade856ba42f9244027bef68e98338c8bd4"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B A E) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "b3bbff5193ce38768a29a1014ea3a94da7f0d557"
                    ]
                },
                {
                    "command": [
                        "assert (TS E B A C) by (conclude_def TS ).",
                        "VernacExtend",
                        "280cd68a0669115b3da153c507c128ab38a472e1"
                    ]
                },
                {
                    "command": [
                        "assert (TS C B A E) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "6c4738cd9d5b2fcf05010187d66a6ba385787be0"
                    ]
                },
                {
                    "command": [
                        "assert (Par D F B C) by (conclude_def PG ).",
                        "VernacExtend",
                        "959e0056346af1478e90aecf419cc36d6016ef80"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D F B) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "02bc599a8cd868034cfa6e026e4b68df66ada471"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B D F) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "3864628849a067332a9df5ba17947fdafa85aff7"
                    ]
                },
                {
                    "command": [
                        "assert (TS F B D C) by (conclude_def TS ).",
                        "VernacExtend",
                        "a3acb33db5d8cf566d391a7e8076ffb692ec5e94"
                    ]
                },
                {
                    "command": [
                        "assert (TS C B D F) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "189c12bce50976e03b54fcd7500facb9e87acd47"
                    ]
                },
                {
                    "command": [
                        "assert (ET B E A A C B) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "421e8dd4b6a66514739a27923fad3dc276cdd42b"
                    ]
                },
                {
                    "command": [
                        "assert (ET B E A C B A) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "c5073a10b601f8655e7743441ca2b2041a9a9fc5"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B A B E A) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "93e4979ad82e20b4462cdf15191fc667607701e9"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B A B A E) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "1e2478a71e898741293bb2281c39c67ada274131"
                    ]
                },
                {
                    "command": [
                        "assert (ET B F D D C B) by (conclude axiom_congruentequal).",
                        "VernacExtend",
                        "be8cd8f7fb57ed10cd800086b63a25ba9b9372ab"
                    ]
                },
                {
                    "command": [
                        "assert (ET B F D C B D) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "dc41607c976a7617834138726fc102b0e1c92290"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B D B F D) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "80ffe87266e28fa4c80a7dfa8b0aae6e656acacf"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B D B D F) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "18e9c8734b7a86f28ecf186fc68386d1f171ae48"
                    ]
                },
                {
                    "command": [
                        "assert (EF E B C A C B F D) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "fa9f429cd604acec0fe5f96ca6737f346879230f"
                    ]
                },
                {
                    "command": [
                        "assert (EF C B F D E B C A) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "2527bd9900d13e86fcbd8ef2e19fe1093eb37039"
                    ]
                },
                {
                    "command": [
                        "assert (EF C B F D C B E A) by (forward_using axiom_EFpermutation).",
                        "VernacExtend",
                        "af15692479659211ba6fc5303c01ae145319bfd3"
                    ]
                },
                {
                    "command": [
                        "assert (EF C B E A C B F D) by (conclude axiom_EFsymmetric).",
                        "VernacExtend",
                        "403d7079c690408935f712119b25cf51c9c38882"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B A C B D) by (conclude axiom_halvesofequals).",
                        "VernacExtend",
                        "536f1e95fde159c829bd9dff99e652da1a9dae7e"
                    ]
                },
                {
                    "command": [
                        "assert (ET C B A D B C) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "ce493079b27788d3112fd4d38a542984d5e75673"
                    ]
                },
                {
                    "command": [
                        "assert (ET D B C C B A) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "a6d7b44ca8518a45fdb42f2e1cfa8f46a70c0c96"
                    ]
                },
                {
                    "command": [
                        "assert (ET D B C A B C) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "af49d0de95fc70f26faab19d7088fde5e683b3cf"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B C D B C) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "781144375a309f45225ec3d32c282f9c54bb2ddd"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}