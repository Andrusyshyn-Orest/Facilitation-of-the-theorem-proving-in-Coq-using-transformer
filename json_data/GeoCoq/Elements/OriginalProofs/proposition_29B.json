{
    "filename": "Elements/OriginalProofs/proposition_29B.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29.",
            "VernacRequire",
            "5a62595bdaa8d7b7227f03051fc7729c87131e90"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma proposition_29B : forall A D G H, Par A G H D -> TS A G H D -> CongA A G H G H D.",
            "VernacStartTheoremProof",
            "11fd915e37a27c92efe00a3c5a0a26b6ee20d189"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists a d g h m, (neq A G /\\ neq H D /\\ Col A G a /\\ Col A G g /\\ neq a g /\\ Col H D h /\\ Col H D d /\\ neq h d /\\ ~ Meet A G H D /\\ BetS a m d /\\ BetS h m g)) by (conclude_def Par );destruct Tf as [a[d[g[h[m]]]]];spliter.",
            "VernacExtend",
            "08a2a71d54a403f69f4fe623c1f562eb2171218b"
        ],
        [
            "assert (neq D H) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "dc5376309c0aa2d188260e61ec1684122345b3fe"
        ],
        [
            "assert (~ eq H G).",
            "VernacExtend",
            "3b61b0b439a31ab395ff6aee8b4c193299386bf4"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (eq H H) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "4edcfc35fe1c1eb61e5f33e0efa52ce557093efe"
        ],
        [
            "assert (Col H D H) by (conclude_def Col ).",
            "VernacExtend",
            "24c6955c7d3d5057d6ab99bf925668c7f978cc9e"
        ],
        [
            "assert (eq G G) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
        ],
        [
            "assert (Col A G G) by (conclude_def Col ).",
            "VernacExtend",
            "f80e32cc3ceaf1e6309547162e3ae229d74da585"
        ],
        [
            "assert (Col A G H) by (conclude cn_equalitysub).",
            "VernacExtend",
            "c18397b09c928d735cd9fd3b675335d9561b58a0"
        ],
        [
            "assert (Meet A G H D) by (conclude_def Meet ).",
            "VernacExtend",
            "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists B, (BetS A G B /\\ Cong G B A G)) by (conclude lemma_extension);destruct Tf as [B];spliter.",
            "VernacExtend",
            "5fd1609b38b00d644d1d3429fa44b2c94c38fa73"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists C, (BetS D H C /\\ Cong H C D H)) by (conclude lemma_extension);destruct Tf as [C];spliter.",
            "VernacExtend",
            "b21c87826be1b7c36353bb0fd8a17fc0edfecb90"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS H G E /\\ Cong G E H G)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "5d7c03734e2dee2adb49af01b3cca83f513d4a6b"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (neq D C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "dac741e71be8778833d3135c1db363ed1412abfc"
        ],
        [
            "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "c7e81de516241ce4e74c736518aa3cecf412e158"
        ],
        [
            "assert (Col A G B) by (conclude_def Col ).",
            "VernacExtend",
            "2f55b58ec77a5a8623e4cd5ec3d180029dddb67a"
        ],
        [
            "assert (Col G A B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7faaa20e85da645b8560f5681321c46156e4943c"
        ],
        [
            "assert (Col G A a) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "cd70edece217b9401255366b9d85ff058c90cae5"
        ],
        [
            "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e2791ae9c412727db671b58f53b6b23174e66732"
        ],
        [
            "assert (Col A B a) by (conclude lemma_collinear4).",
            "VernacExtend",
            "5584f5ac530a2e03ce67956fd38559d5c6320cf8"
        ],
        [
            "assert (Col G A g) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "35b0a0fe74f88f9563930cb44a2fc422099b9097"
        ],
        [
            "assert (Col A B g) by (conclude lemma_collinear4).",
            "VernacExtend",
            "50b0ade2a24a5b8f43697e124261d0e1243e9b86"
        ],
        [
            "assert (Col D H C) by (conclude_def Col ).",
            "VernacExtend",
            "59b032539d394c54e7e6a47eaa4e0089fe7a1821"
        ],
        [
            "assert (Col H D C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b020340d2074c303bdd56057fa10e1d66df33704"
        ],
        [
            "assert (Col D C h) by (conclude lemma_collinear4).",
            "VernacExtend",
            "db19ff3c5edb42aa8c0791cfc57f5754535b6d4c"
        ],
        [
            "assert (Col C D h) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "e0f740af9487824c88b6d45f6a508f477515d96a"
        ],
        [
            "assert (Col D d C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "b2a455a903a6da894db121503d58bb43b2299b41"
        ],
        [
            "assert (Col C D d) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "d8e1cea0364782b42b17580c07a3f9bd0101cff4"
        ],
        [
            "assert (~ Meet A B C D).",
            "VernacExtend",
            "03378f4145e3d326f8d303da475716ec3954a985"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (neq A B /\\ neq C D /\\ Col A B M /\\ Col C D M)) by (conclude_def Meet );destruct Tf as [M];spliter.",
            "VernacExtend",
            "210c64f1d82ce154cbb8b52e4650276c8d641620"
        ],
        [
            "assert (Col B A G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "dfb63bcc139465b1f07969b6b87aa36803939eb6"
        ],
        [
            "assert (Col B A M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
        ],
        [
            "assert (Col A G M) by (conclude lemma_collinear4).",
            "VernacExtend",
            "bd020af97f1c830f906cb7eed60b21bddfaca3e7"
        ],
        [
            "assert (Col C D H) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c37391ab06fdb7e8b361dff1f973b717af621be8"
        ],
        [
            "assert (Col D H M) by (conclude lemma_collinear4).",
            "VernacExtend",
            "8878c4ed92de78c9beeec3cc04695ad8115c7ee7"
        ],
        [
            "assert (Col H D M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "0aad957c7306ed0c0e279d094de057d10ec943be"
        ],
        [
            "assert (Meet A G H D) by (conclude_def Meet ).",
            "VernacExtend",
            "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par A B C D) by (conclude_def Par ).",
            "VernacExtend",
            "dc5bba64feddcf48da4479f4af56ca5f9818465e"
        ],
        [
            "assert (BetS C H D) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "79d4ea8b54f3dd71e79a151e47053b0754dd1c73"
        ],
        [
            "assert (BetS E G H) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "2a90dedc24abe75fbf7b8134bbae894637fb942d"
        ],
        [
            "assert ((CongA A G H G H D /\\ CongA E G B G H D /\\ RT B G H G H D)) by (conclude proposition_29).",
            "VernacExtend",
            "7078f180438150879fece00572ba3a70a3844bed"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_29B",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists a d g h m, (neq A G /\\ neq H D /\\ Col A G a /\\ Col A G g /\\ neq a g /\\ Col H D h /\\ Col H D d /\\ neq h d /\\ ~ Meet A G H D /\\ BetS a m d /\\ BetS h m g)) by (conclude_def Par );destruct Tf as [a[d[g[h[m]]]]];spliter.",
                        "VernacExtend",
                        "08a2a71d54a403f69f4fe623c1f562eb2171218b"
                    ]
                },
                {
                    "command": [
                        "assert (neq D H) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "dc5376309c0aa2d188260e61ec1684122345b3fe"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq H G).",
                        "VernacExtend",
                        "3b61b0b439a31ab395ff6aee8b4c193299386bf4"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (eq H H) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "4edcfc35fe1c1eb61e5f33e0efa52ce557093efe"
                    ]
                },
                {
                    "command": [
                        "assert (Col H D H) by (conclude_def Col ).",
                        "VernacExtend",
                        "24c6955c7d3d5057d6ab99bf925668c7f978cc9e"
                    ]
                },
                {
                    "command": [
                        "assert (eq G G) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G G) by (conclude_def Col ).",
                        "VernacExtend",
                        "f80e32cc3ceaf1e6309547162e3ae229d74da585"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G H) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "c18397b09c928d735cd9fd3b675335d9561b58a0"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A G H D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists B, (BetS A G B /\\ Cong G B A G)) by (conclude lemma_extension);destruct Tf as [B];spliter.",
                        "VernacExtend",
                        "5fd1609b38b00d644d1d3429fa44b2c94c38fa73"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists C, (BetS D H C /\\ Cong H C D H)) by (conclude lemma_extension);destruct Tf as [C];spliter.",
                        "VernacExtend",
                        "b21c87826be1b7c36353bb0fd8a17fc0edfecb90"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS H G E /\\ Cong G E H G)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "5d7c03734e2dee2adb49af01b3cca83f513d4a6b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "dac741e71be8778833d3135c1db363ed1412abfc"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "c7e81de516241ce4e74c736518aa3cecf412e158"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G B) by (conclude_def Col ).",
                        "VernacExtend",
                        "2f55b58ec77a5a8623e4cd5ec3d180029dddb67a"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7faaa20e85da645b8560f5681321c46156e4943c"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A a) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "cd70edece217b9401255366b9d85ff058c90cae5"
                    ]
                },
                {
                    "command": [
                        "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e2791ae9c412727db671b58f53b6b23174e66732"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B a) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "5584f5ac530a2e03ce67956fd38559d5c6320cf8"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A g) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "35b0a0fe74f88f9563930cb44a2fc422099b9097"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B g) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "50b0ade2a24a5b8f43697e124261d0e1243e9b86"
                    ]
                },
                {
                    "command": [
                        "assert (Col D H C) by (conclude_def Col ).",
                        "VernacExtend",
                        "59b032539d394c54e7e6a47eaa4e0089fe7a1821"
                    ]
                },
                {
                    "command": [
                        "assert (Col H D C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b020340d2074c303bdd56057fa10e1d66df33704"
                    ]
                },
                {
                    "command": [
                        "assert (Col D C h) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "db19ff3c5edb42aa8c0791cfc57f5754535b6d4c"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D h) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "e0f740af9487824c88b6d45f6a508f477515d96a"
                    ]
                },
                {
                    "command": [
                        "assert (Col D d C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "b2a455a903a6da894db121503d58bb43b2299b41"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D d) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "d8e1cea0364782b42b17580c07a3f9bd0101cff4"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B C D).",
                        "VernacExtend",
                        "03378f4145e3d326f8d303da475716ec3954a985"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (neq A B /\\ neq C D /\\ Col A B M /\\ Col C D M)) by (conclude_def Meet );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "210c64f1d82ce154cbb8b52e4650276c8d641620"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "dfb63bcc139465b1f07969b6b87aa36803939eb6"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G M) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "bd020af97f1c830f906cb7eed60b21bddfaca3e7"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D H) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c37391ab06fdb7e8b361dff1f973b717af621be8"
                    ]
                },
                {
                    "command": [
                        "assert (Col D H M) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "8878c4ed92de78c9beeec3cc04695ad8115c7ee7"
                    ]
                },
                {
                    "command": [
                        "assert (Col H D M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "0aad957c7306ed0c0e279d094de057d10ec943be"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A G H D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "dc5bba64feddcf48da4479f4af56ca5f9818465e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C H D) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "79d4ea8b54f3dd71e79a151e47053b0754dd1c73"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E G H) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "2a90dedc24abe75fbf7b8134bbae894637fb942d"
                    ]
                },
                {
                    "command": [
                        "assert ((CongA A G H G H D /\\ CongA E G B G H D /\\ RT B G H G H D)) by (conclude proposition_29).",
                        "VernacExtend",
                        "7078f180438150879fece00572ba3a70a3844bed"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}