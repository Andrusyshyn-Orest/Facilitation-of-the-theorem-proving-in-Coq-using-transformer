{
    "filename": "Elements/OriginalProofs/lemma_droppedperpendicularunique.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearright.",
            "VernacRequire",
            "dcb4e24b71b07160e132efd845ac2e8f36cc7074"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_rightreverse.",
            "VernacRequire",
            "2ec89da849c67e9b9698875caadd4b39e14886cf"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_altitudebisectsbase.",
            "VernacRequire",
            "a90ebe8ec09b8f11acd165b97504364eaf5490f4"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_droppedperpendicularunique : forall A J M P, Per A M P -> Per A J P -> Col A M J -> eq M J.",
            "VernacStartTheoremProof",
            "6ad8c17133f74c1d2bcb6aed6a4383b2b3afd2d2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (~ neq M J).",
            "VernacExtend",
            "0ad4089266a48e6b25edba40eeab8360dce18c2d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (neq J M) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "2b699eb95af85e470b1c6fde27ac1d60a0d0493e"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS M J E /\\ Cong J E M J)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "1a14f3fc1c766a8d85e918e108e8b17b3c67766b"
        ],
        [
            "assert (neq M E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ac165432a84cc40494a433c6004609e38f34b8e1"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS J M F /\\ Cong M F M E)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
            "VernacExtend",
            "8f6c92c2810763234ae6cecf0cfd89db559af9b3"
        ],
        [
            "assert (BetS E J M) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "ff70d0111af0200cc46755ef19ad75ade97c9e87"
        ],
        [
            "assert (BetS E J F) by (conclude lemma_3_7b).",
            "VernacExtend",
            "3b5af5df2fefc81793245106530a08a6faf97f88"
        ],
        [
            "assert (BetS F J E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "8f255bce1572e283e814c2a43248cc239a074622"
        ],
        [
            "assert (BetS E M F) by (conclude lemma_3_7a).",
            "VernacExtend",
            "b0ee381af1bc0a4578ff3ab7eda21474be99510b"
        ],
        [
            "assert (neq J F) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "88a0fb094388e4d175440c2df33a413620212ee7"
        ],
        [
            "assert (neq F J) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "ab966d8f6bbd1411e664c6c9b0b0dd3e36c65835"
        ],
        [
            "assert (Col J M F) by (conclude_def Col ).",
            "VernacExtend",
            "e9ee8f80761ea616f9693d788ef9bfc6c2ff1855"
        ],
        [
            "assert (Col M J F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5daf4c9372018fe256032b695b06a9d02c57a549"
        ],
        [
            "assert (Col M J A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b14feed7aacb1489f83aa622b67e32ab9ecf9a44"
        ],
        [
            "assert (neq J M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "522f421ee74a2afa9c0b17cdd855f07f8a11c467"
        ],
        [
            "assert (neq M J) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "07722fe44fc68d366975851bf1a717b161885ec4"
        ],
        [
            "assert (Col J F A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "82cd1c7074d589a9235e4f5c896ea7b2aad27de6"
        ],
        [
            "assert (Col A J F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "bc9d897b9f1368b2b5202b529aab45affe49976f"
        ],
        [
            "assert (Per F J P) by (conclude lemma_collinearright).",
            "VernacExtend",
            "38706bca54da6fde1b1e79eff9de6b701d0ff47a"
        ],
        [
            "assert (Col J M F) by (conclude_def Col ).",
            "VernacExtend",
            "e9ee8f80761ea616f9693d788ef9bfc6c2ff1855"
        ],
        [
            "assert (Col J M A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "360354970cd7273dcd256f5ba3f2aad91720e702"
        ],
        [
            "assert (Col M F A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "98192f33324344fc65c52e28e7e9af0ae6f1002d"
        ],
        [
            "assert (Col A M F) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "eb4db8909e73a29f511490f1d452efa7c543815f"
        ],
        [
            "assert (neq M F) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "bda6dd2bfb73fdeae87563286a2a0cf51bb4813e"
        ],
        [
            "assert (neq F M) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "7bf09e736b02ee44fde4fb037e35d24926aef7d1"
        ],
        [
            "assert (Per F M P) by (conclude lemma_collinearright).",
            "VernacExtend",
            "e9a89dea203246ec9ec05613b0b84520ba9cc2a4"
        ],
        [
            "assert (Cong F M M E) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2c9424f1b47d2410d862ad9b921f377de3331c37"
        ],
        [
            "assert (Per F M P) by (conclude lemma_collinearright).",
            "VernacExtend",
            "e9a89dea203246ec9ec05613b0b84520ba9cc2a4"
        ],
        [
            "assert (BetS F M E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "584a7991bcccdcceb5117e0d99fc7b45a88cba9f"
        ],
        [
            "assert (Cong F P E P) by (conclude lemma_rightreverse).",
            "VernacExtend",
            "cf035bba8ee8d0c7f55c4c4a7a779f1ca3df854a"
        ],
        [
            "assert (Midpoint F J E) by (conclude lemma_altitudebisectsbase).",
            "VernacExtend",
            "ab9fe60f6608c2a61723304d876e5f1d8e8d62ac"
        ],
        [
            "assert (BetS F M E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "584a7991bcccdcceb5117e0d99fc7b45a88cba9f"
        ],
        [
            "assert (Cong F M M E) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2c9424f1b47d2410d862ad9b921f377de3331c37"
        ],
        [
            "assert (Midpoint F M E) by (conclude_def Midpoint ).",
            "VernacExtend",
            "2f641f4357540a789e0cb28d4bd5e50d762926a8"
        ],
        [
            "assert (eq J M) by (conclude lemma_midpointunique).",
            "VernacExtend",
            "2ba8b828be49f2d4c0070521a3944711b024de20"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_droppedperpendicularunique",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (~ neq M J).",
                        "VernacExtend",
                        "0ad4089266a48e6b25edba40eeab8360dce18c2d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (neq J M) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "2b699eb95af85e470b1c6fde27ac1d60a0d0493e"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS M J E /\\ Cong J E M J)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "1a14f3fc1c766a8d85e918e108e8b17b3c67766b"
                    ]
                },
                {
                    "command": [
                        "assert (neq M E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ac165432a84cc40494a433c6004609e38f34b8e1"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS J M F /\\ Cong M F M E)) by (conclude lemma_extension);destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "8f6c92c2810763234ae6cecf0cfd89db559af9b3"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E J M) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "ff70d0111af0200cc46755ef19ad75ade97c9e87"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E J F) by (conclude lemma_3_7b).",
                        "VernacExtend",
                        "3b5af5df2fefc81793245106530a08a6faf97f88"
                    ]
                },
                {
                    "command": [
                        "assert (BetS F J E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "8f255bce1572e283e814c2a43248cc239a074622"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E M F) by (conclude lemma_3_7a).",
                        "VernacExtend",
                        "b0ee381af1bc0a4578ff3ab7eda21474be99510b"
                    ]
                },
                {
                    "command": [
                        "assert (neq J F) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "88a0fb094388e4d175440c2df33a413620212ee7"
                    ]
                },
                {
                    "command": [
                        "assert (neq F J) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "ab966d8f6bbd1411e664c6c9b0b0dd3e36c65835"
                    ]
                },
                {
                    "command": [
                        "assert (Col J M F) by (conclude_def Col ).",
                        "VernacExtend",
                        "e9ee8f80761ea616f9693d788ef9bfc6c2ff1855"
                    ]
                },
                {
                    "command": [
                        "assert (Col M J F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5daf4c9372018fe256032b695b06a9d02c57a549"
                    ]
                },
                {
                    "command": [
                        "assert (Col M J A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b14feed7aacb1489f83aa622b67e32ab9ecf9a44"
                    ]
                },
                {
                    "command": [
                        "assert (neq J M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "522f421ee74a2afa9c0b17cdd855f07f8a11c467"
                    ]
                },
                {
                    "command": [
                        "assert (neq M J) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "07722fe44fc68d366975851bf1a717b161885ec4"
                    ]
                },
                {
                    "command": [
                        "assert (Col J F A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "82cd1c7074d589a9235e4f5c896ea7b2aad27de6"
                    ]
                },
                {
                    "command": [
                        "assert (Col A J F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "bc9d897b9f1368b2b5202b529aab45affe49976f"
                    ]
                },
                {
                    "command": [
                        "assert (Per F J P) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "38706bca54da6fde1b1e79eff9de6b701d0ff47a"
                    ]
                },
                {
                    "command": [
                        "assert (Col J M F) by (conclude_def Col ).",
                        "VernacExtend",
                        "e9ee8f80761ea616f9693d788ef9bfc6c2ff1855"
                    ]
                },
                {
                    "command": [
                        "assert (Col J M A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "360354970cd7273dcd256f5ba3f2aad91720e702"
                    ]
                },
                {
                    "command": [
                        "assert (Col M F A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "98192f33324344fc65c52e28e7e9af0ae6f1002d"
                    ]
                },
                {
                    "command": [
                        "assert (Col A M F) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "eb4db8909e73a29f511490f1d452efa7c543815f"
                    ]
                },
                {
                    "command": [
                        "assert (neq M F) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "bda6dd2bfb73fdeae87563286a2a0cf51bb4813e"
                    ]
                },
                {
                    "command": [
                        "assert (neq F M) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "7bf09e736b02ee44fde4fb037e35d24926aef7d1"
                    ]
                },
                {
                    "command": [
                        "assert (Per F M P) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "e9a89dea203246ec9ec05613b0b84520ba9cc2a4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F M M E) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2c9424f1b47d2410d862ad9b921f377de3331c37"
                    ]
                },
                {
                    "command": [
                        "assert (Per F M P) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "e9a89dea203246ec9ec05613b0b84520ba9cc2a4"
                    ]
                },
                {
                    "command": [
                        "assert (BetS F M E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "584a7991bcccdcceb5117e0d99fc7b45a88cba9f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F P E P) by (conclude lemma_rightreverse).",
                        "VernacExtend",
                        "cf035bba8ee8d0c7f55c4c4a7a779f1ca3df854a"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint F J E) by (conclude lemma_altitudebisectsbase).",
                        "VernacExtend",
                        "ab9fe60f6608c2a61723304d876e5f1d8e8d62ac"
                    ]
                },
                {
                    "command": [
                        "assert (BetS F M E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "584a7991bcccdcceb5117e0d99fc7b45a88cba9f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F M M E) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2c9424f1b47d2410d862ad9b921f377de3331c37"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint F M E) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "2f641f4357540a789e0cb28d4bd5e50d762926a8"
                    ]
                },
                {
                    "command": [
                        "assert (eq J M) by (conclude lemma_midpointunique).",
                        "VernacExtend",
                        "2ba8b828be49f2d4c0070521a3944711b024de20"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}