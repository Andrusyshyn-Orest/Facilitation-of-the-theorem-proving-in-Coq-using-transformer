{
    "filename": "Elements/OriginalProofs/lemma_squareparallelogram.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_46.",
            "VernacRequire",
            "680475f9b5962fabe32045774dfc498bebbb94f3"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesideflip.",
            "VernacRequire",
            "759105637b6b39d3139341dfed1abe1f303c9973"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_righttogether.",
            "VernacRequire",
            "e81aaf706f5927b1b86c1386040fab1f266bd637"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_diagonalsbisect.",
            "VernacRequire",
            "9b158a4b46a3e1f5152ddb9647efe19032ed056a"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma lemma_squareparallelogram : forall A B C D, SQ A B C D -> PG A B C D.",
            "VernacStartTheoremProof",
            "e52dced666af41e9a772bb8812fa672c34f2dfa5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((Cong A B C D /\\ Cong A B B C /\\ Cong A B D A /\\ Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A)) by (conclude_def SQ ).",
            "VernacExtend",
            "f4c133f892aafc3ce771233943308adcd267abe8"
        ],
        [
            "assert (nCol D A B) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "6accdf93d3e5fcbfa98ecf49f2534bb1950d3db7"
        ],
        [
            "assert (neq D A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "1e36ce44687f0338d7e01a634a931e2d718c5880"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists R, (BetS D A R /\\ Cong A R D A)) by (conclude lemma_extension);destruct Tf as [R];spliter.",
            "VernacExtend",
            "76c12bace161b38539f831ceec56d66e1c0a035c"
        ],
        [
            "assert (BetS R A D) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "66740ac9cde865b0b6714acb9b159ddc8ea53f8d"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (Col D A R) by (conclude_def Col ).",
            "VernacExtend",
            "e0b8e7779a77ad0c909c29558313e94c0c96b609"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Col D A A) by (conclude_def Col ).",
            "VernacExtend",
            "7ce2c6546dd5bf407b10e0b2b629f7ce0ad2c61f"
        ],
        [
            "assert (neq R A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "7d469b89c8fa5cfadfde481b31571bbc9c8b7366"
        ],
        [
            "assert (nCol R A B) by (conclude lemma_NChelper).",
            "VernacExtend",
            "6034e2e35516df81d0a204dfefaa232f5634a0aa"
        ],
        [
            "assert (nCol A B R) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "ed52daca5b704281769fc4f41735e6732da9cc46"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists c E, (SQ A B c E /\\ TS E A B R /\\ PG A B c E)) by (conclude proposition_46);destruct Tf as [c[E]];spliter.",
            "VernacExtend",
            "ebabe09edc0ca26818bddafaa21c571e9258e554"
        ],
        [
            "assert ((Cong A B c E /\\ Cong A B B c /\\ Cong A B E A /\\ Per E A B /\\ Per A B c /\\ Per B c E /\\ Per c E A)) by (conclude_def SQ ).",
            "VernacExtend",
            "bc6d363a53e3cdefd492715a3b70ee4d17e09d2e"
        ],
        [
            "assert (Col R A D) by (conclude_def Col ).",
            "VernacExtend",
            "52d18ed34a82a9b5d3eb5db4cd0cccc37bdb7950"
        ],
        [
            "assert (Col D A R) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "afa1f3ad1e89b036ae1452fdf02232881fd1c262"
        ],
        [
            "assert (Per R A B) by (conclude lemma_collinearright).",
            "VernacExtend",
            "01d93f6e29384d6870f46a33845e3d7806db8f26"
        ],
        [
            "assert (Per B A R) by (conclude lemma_8_2).",
            "VernacExtend",
            "a1ff74ed5fb92e21d8185026c655edf794cb84d0"
        ],
        [
            "assert (TS E B A R) by (conclude lemma_oppositesideflip).",
            "VernacExtend",
            "da888b072a3aac4265b2f3ee09c6873cd546d918"
        ],
        [
            "assert (BetS E A R) by (conclude lemma_righttogether).",
            "VernacExtend",
            "ef3c2a971b3ae46437abc61bbf174f6f6fd8855e"
        ],
        [
            "assert (BetS R A E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "1b4adae3a437221dcabc4e7bac8a452bfb1ebd36"
        ],
        [
            "assert (Out A D E) by (conclude_def Out ).",
            "VernacExtend",
            "ac05272d0ad3fdb1ba649f6b887e596f8b761802"
        ],
        [
            "assert (Cong A B E A) by (conclude_def SQ ).",
            "VernacExtend",
            "2f0dae01115a978977ec3d0b8e957c5813960f88"
        ],
        [
            "assert (Cong E A A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0f541c9884b1ddd46ae4960e5cd4835e6dfa67fb"
        ],
        [
            "assert (Cong E A D A) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "ec00865021d4e1c52f1505df0e28b8cfbd5ab55d"
        ],
        [
            "assert (Cong A E A D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "65d369c9cc22d32fc46fa66fcbffc3dd131a8765"
        ],
        [
            "assert (neq A D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Out A D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5bfbfb8c5a7f7d3b2b8ce75cf3745b9f680909dc"
        ],
        [
            "assert (eq E D) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "6ed5f09f209d8b0c6b4047e3463ea8c99b85f84d"
        ],
        [
            "assert (PG A B c D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "473ea2e648a70f5566f5bf426cde18ecea2e6cf8"
        ],
        [
            "assert (Cong A B C D) by (conclude_def SQ ).",
            "VernacExtend",
            "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
        ],
        [
            "assert (SQ A B c D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "967f796a685589aa965309a26c75facff15f41dc"
        ],
        [
            "assert (Cong A B c D) by (conclude_def SQ ).",
            "VernacExtend",
            "700a95619d7bdd46fab9b10355fd2cfb619c2d22"
        ],
        [
            "assert (Cong c D A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a628e6100fce623576d481617a5c2a258860cf85"
        ],
        [
            "assert (Cong c D C D) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "4ed26472951f463aeeb571146b6a91ef9e282721"
        ],
        [
            "assert (Cong A B B C) by (conclude_def SQ ).",
            "VernacExtend",
            "b692bf2ecc3b5b4a96971c3217a968536551d252"
        ],
        [
            "assert (Cong A B B c) by (conclude_def SQ ).",
            "VernacExtend",
            "48c61d049cde344ed61e5fe6f6bbb91567271b72"
        ],
        [
            "assert (Cong B c A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "65a0d1519b387c34d3960cc015699fc04afdb452"
        ],
        [
            "assert (Cong B c B C) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "21c9e846e0a786661d68ca256da105d55be920b8"
        ],
        [
            "assert (Cong c B C B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "aac2d412edc7e74fb6d004e00bd4aada69dade7a"
        ],
        [
            "assert (Per B C D) by (conclude_def SQ ).",
            "VernacExtend",
            "81f83cd13819d8ae219c260477b9a06a6536b8db"
        ],
        [
            "assert (Per B c D) by (conclude_def SQ ).",
            "VernacExtend",
            "da1ef7745f48f3c35396d5a66c724ae870fa8318"
        ],
        [
            "assert (CongA B c D B C D) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "938c5f16d326f3625d54fdea75798f7770c44d78"
        ],
        [
            "assert ((Cong B D B D /\\ CongA c B D C B D /\\ CongA c D B C D B)) by (conclude proposition_04).",
            "VernacExtend",
            "ac74a47b49cdf888a79e469c18a01a601f69e39a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists m, (Midpoint A m c /\\ Midpoint B m D)) by (conclude lemma_diagonalsbisect);destruct Tf as [m];spliter.",
            "VernacExtend",
            "0259cea2566f92d778c66d33ea8587e940da3e98"
        ],
        [
            "assert ((BetS A m c /\\ Cong A m m c)) by (conclude_def Midpoint ).",
            "VernacExtend",
            "1f886f0551d71793ac5c6387aa6d7c0c768cec8e"
        ],
        [
            "assert ((BetS B m D /\\ Cong B m m D)) by (conclude_def Midpoint ).",
            "VernacExtend",
            "575accf653ee55897cd60d83a46dd94d785056de"
        ],
        [
            "assert (CongA C D B c D B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "63ae4e1c0abd005e2eaad4639839b707bea35082"
        ],
        [
            "assert (Cong D m D m) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "348a5cec27c85f8146b0832b399c3000ab734084"
        ],
        [
            "assert (Cong D c D C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2c6a9296240bbae6d5ca72f13e21f982d1ecbb42"
        ],
        [
            "assert (nCol C D A) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "220c9d07a910f20ff9b0e24adf23eceff8519ff1"
        ],
        [
            "assert (Per c D A) by (conclude cn_equalitysub).",
            "VernacExtend",
            "54fdb77a1006f9b9f5c21fde6e026b67f8872673"
        ],
        [
            "assert (nCol c D A) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "f478bf0c48b82fed0973896d38965d5fc83e5bb7"
        ],
        [
            "assert (nCol A c D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "2215a622d27ed4767427e3dcef3ac93490452e6b"
        ],
        [
            "assert (eq c c) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "916a0cf6a7760772073fa60385f36a27038fed41"
        ],
        [
            "assert (Col A c c) by (conclude_def Col ).",
            "VernacExtend",
            "38d0ec057781cf0ef67b48b7a6fb7733fb7504cd"
        ],
        [
            "assert (Col A m c) by (conclude_def Col ).",
            "VernacExtend",
            "4d97236293bb4ceeb877b58f9dfbddeaccaf3554"
        ],
        [
            "assert (Col A c m) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "48369bdf5c9e7c32406476349acc3f2de3ed75f7"
        ],
        [
            "assert (neq m c) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
        ],
        [
            "assert (nCol m c D) by (conclude lemma_NChelper).",
            "VernacExtend",
            "1f7eaeeba79997e3080543516104396f350e64b7"
        ],
        [
            "assert (nCol c D m) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "a2768c16c3eb1f80d188e07be340054d666dbe35"
        ],
        [
            "assert (~ Col C D m).",
            "VernacExtend",
            "af056f2536e0f3c5a437edb561a5f2296bc71ded"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col B m D) by (conclude_def Col ).",
            "VernacExtend",
            "ee61565be46a784bf8338835d6d96d37f7daa529"
        ],
        [
            "assert (Col m D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "9432f9534b86b7a2c2b98265c009b74ff3baa4c7"
        ],
        [
            "assert (Col m D C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f7ff92a6591ce6cc5d51f203e7ac607fbc72d1f1"
        ],
        [
            "assert (neq m D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "8a91a2de3613475218d8a73140826d9b267fe8f4"
        ],
        [
            "assert (Col D B C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "9a6c7c9fcb04af52b32740b66aa4fe0bde9c818e"
        ],
        [
            "assert (Col B C D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "2bbf76051c5820b160a3d5e27a58112ff361d8b6"
        ],
        [
            "assert (nCol B C D) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (CongA c D B C D B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "1392b9f0b176f5b9f9032b323959bb4f930a86d9"
        ],
        [
            "assert (BetS D m B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "086899aae960aeb0288808f87ca47ef6b7588983"
        ],
        [
            "assert (neq D B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a07d0c5d501eb8abdaae8b01735301982ee47af1"
        ],
        [
            "assert (Out D B m) by (conclude lemma_ray4).",
            "VernacExtend",
            "e3f006afdb005e75cf8d09378973aea3ad8f2eb2"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (neq D C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "9237553638c0e7a25b7e8c2781363c6b63e4b08e"
        ],
        [
            "assert (Out D C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "f9394b71e33010eec5d0cafe89f03b004392bfb0"
        ],
        [
            "assert (CongA c D B C D m) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "ba5663319eca67cac217d4af9b3172e88237b763"
        ],
        [
            "assert (CongA C D m c D B) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "f0bcf55cbf9add3d6133ba000bbfbf66fca3c617"
        ],
        [
            "assert (eq c c) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "916a0cf6a7760772073fa60385f36a27038fed41"
        ],
        [
            "assert (neq D c) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8ed5dd28518d1c1ff0b4b059ab5f0bc253734941"
        ],
        [
            "assert (Out D c c) by (conclude lemma_ray4).",
            "VernacExtend",
            "413f07e9a6aeab31e351fef13ab365c77c87c2b5"
        ],
        [
            "assert (CongA C D m c D m) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "cef1618a67ffcbe3f28bd02951a9650987bb1010"
        ],
        [
            "assert (CongA c D m C D m) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "e64ce5ab951ff54c80052aaa9d4732e8ba0711ce"
        ],
        [
            "assert (Cong c m C m) by (conclude proposition_04).",
            "VernacExtend",
            "544350a63d929acb3ddb6df1ad6141557a76c83f"
        ],
        [
            "assert (Cong m c m C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "c043a26229894d3c1d6c11531d64d86be29e85e4"
        ],
        [
            "assert (Cong A m A m) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "4faa1dac2ff434f7419a9ccf6fd82775cdecb5d3"
        ],
        [
            "assert (Cong D A D A) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "948feb782f230e13dcf1a0e255799206b21a01b1"
        ],
        [
            "assert (Per c D A) by (conclude cn_equalitysub).",
            "VernacExtend",
            "54fdb77a1006f9b9f5c21fde6e026b67f8872673"
        ],
        [
            "assert (Per A D c) by (conclude lemma_8_2).",
            "VernacExtend",
            "fe7bc4e49507afcf7a053013705d388f379207c0"
        ],
        [
            "assert (Per A D C) by (conclude lemma_8_2).",
            "VernacExtend",
            "53444c0589647e2e28885976260985b84b3e4862"
        ],
        [
            "assert (CongA A D C A D c) by (conclude lemma_Euclid4).",
            "VernacExtend",
            "8d2d220a4fc517f7e065023b752f8993fcf03e8a"
        ],
        [
            "assert (Cong D C D c) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "21199d876e73f3a2c4f37b35a778bf870dfaf0a6"
        ],
        [
            "assert (Cong A C A c) by (conclude proposition_04).",
            "VernacExtend",
            "b141fe2d3a1884530f03e82f2d9f1f55f3735c9c"
        ],
        [
            "assert (Cong A c A C) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a87ef61992a42ceaa6e44e7d4698ca4b741b426f"
        ],
        [
            "assert (BetS A m C) by (conclude lemma_betweennesspreserved).",
            "VernacExtend",
            "afb752ecc097681e1aaeacaa77ec13258f3fa15b"
        ],
        [
            "assert (neq A m) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "480dc789a93753989e01715c9ff963de2a42c779"
        ],
        [
            "assert (Out A m c) by (conclude lemma_ray4).",
            "VernacExtend",
            "d3ece9cd141b9b2f6151f6a8576935b9ea0df1dc"
        ],
        [
            "assert (Out A m C) by (conclude lemma_ray4).",
            "VernacExtend",
            "62f7defbe1e6b0f1a0484cd07c6f782494fba4bc"
        ],
        [
            "assert (eq c C) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "f1f9142e9ebf9f096edc5677edca0e94577f405b"
        ],
        [
            "assert (PG A B C D) by (conclude cn_equalitysub).",
            "VernacExtend",
            "6f12243cb94622dc96337f9035b700dfa2c05252"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_squareparallelogram",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A B C D /\\ Cong A B B C /\\ Cong A B D A /\\ Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A)) by (conclude_def SQ ).",
                        "VernacExtend",
                        "f4c133f892aafc3ce771233943308adcd267abe8"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D A B) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "6accdf93d3e5fcbfa98ecf49f2534bb1950d3db7"
                    ]
                },
                {
                    "command": [
                        "assert (neq D A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "1e36ce44687f0338d7e01a634a931e2d718c5880"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists R, (BetS D A R /\\ Cong A R D A)) by (conclude lemma_extension);destruct Tf as [R];spliter.",
                        "VernacExtend",
                        "76c12bace161b38539f831ceec56d66e1c0a035c"
                    ]
                },
                {
                    "command": [
                        "assert (BetS R A D) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "66740ac9cde865b0b6714acb9b159ddc8ea53f8d"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A R) by (conclude_def Col ).",
                        "VernacExtend",
                        "e0b8e7779a77ad0c909c29558313e94c0c96b609"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A A) by (conclude_def Col ).",
                        "VernacExtend",
                        "7ce2c6546dd5bf407b10e0b2b629f7ce0ad2c61f"
                    ]
                },
                {
                    "command": [
                        "assert (neq R A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "7d469b89c8fa5cfadfde481b31571bbc9c8b7366"
                    ]
                },
                {
                    "command": [
                        "assert (nCol R A B) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "6034e2e35516df81d0a204dfefaa232f5634a0aa"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B R) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "ed52daca5b704281769fc4f41735e6732da9cc46"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists c E, (SQ A B c E /\\ TS E A B R /\\ PG A B c E)) by (conclude proposition_46);destruct Tf as [c[E]];spliter.",
                        "VernacExtend",
                        "ebabe09edc0ca26818bddafaa21c571e9258e554"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A B c E /\\ Cong A B B c /\\ Cong A B E A /\\ Per E A B /\\ Per A B c /\\ Per B c E /\\ Per c E A)) by (conclude_def SQ ).",
                        "VernacExtend",
                        "bc6d363a53e3cdefd492715a3b70ee4d17e09d2e"
                    ]
                },
                {
                    "command": [
                        "assert (Col R A D) by (conclude_def Col ).",
                        "VernacExtend",
                        "52d18ed34a82a9b5d3eb5db4cd0cccc37bdb7950"
                    ]
                },
                {
                    "command": [
                        "assert (Col D A R) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "afa1f3ad1e89b036ae1452fdf02232881fd1c262"
                    ]
                },
                {
                    "command": [
                        "assert (Per R A B) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "01d93f6e29384d6870f46a33845e3d7806db8f26"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A R) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "a1ff74ed5fb92e21d8185026c655edf794cb84d0"
                    ]
                },
                {
                    "command": [
                        "assert (TS E B A R) by (conclude lemma_oppositesideflip).",
                        "VernacExtend",
                        "da888b072a3aac4265b2f3ee09c6873cd546d918"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E A R) by (conclude lemma_righttogether).",
                        "VernacExtend",
                        "ef3c2a971b3ae46437abc61bbf174f6f6fd8855e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS R A E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "1b4adae3a437221dcabc4e7bac8a452bfb1ebd36"
                    ]
                },
                {
                    "command": [
                        "assert (Out A D E) by (conclude_def Out ).",
                        "VernacExtend",
                        "ac05272d0ad3fdb1ba649f6b887e596f8b761802"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B E A) by (conclude_def SQ ).",
                        "VernacExtend",
                        "2f0dae01115a978977ec3d0b8e957c5813960f88"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E A A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0f541c9884b1ddd46ae4960e5cd4835e6dfa67fb"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E A D A) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "ec00865021d4e1c52f1505df0e28b8cfbd5ab55d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A E A D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "65d369c9cc22d32fc46fa66fcbffc3dd131a8765"
                    ]
                },
                {
                    "command": [
                        "assert (neq A D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9593f1c3c73c1d514f6587ea75e30afd86ddb38b"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Out A D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5bfbfb8c5a7f7d3b2b8ce75cf3745b9f680909dc"
                    ]
                },
                {
                    "command": [
                        "assert (eq E D) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "6ed5f09f209d8b0c6b4047e3463ea8c99b85f84d"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B c D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "473ea2e648a70f5566f5bf426cde18ecea2e6cf8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "ec2ec18197fc5e068d60d1e8b3c23942c1c5ad95"
                    ]
                },
                {
                    "command": [
                        "assert (SQ A B c D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "967f796a685589aa965309a26c75facff15f41dc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B c D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "700a95619d7bdd46fab9b10355fd2cfb619c2d22"
                    ]
                },
                {
                    "command": [
                        "assert (Cong c D A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a628e6100fce623576d481617a5c2a258860cf85"
                    ]
                },
                {
                    "command": [
                        "assert (Cong c D C D) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "4ed26472951f463aeeb571146b6a91ef9e282721"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B C) by (conclude_def SQ ).",
                        "VernacExtend",
                        "b692bf2ecc3b5b4a96971c3217a968536551d252"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B c) by (conclude_def SQ ).",
                        "VernacExtend",
                        "48c61d049cde344ed61e5fe6f6bbb91567271b72"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B c A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "65a0d1519b387c34d3960cc015699fc04afdb452"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B c B C) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "21c9e846e0a786661d68ca256da105d55be920b8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong c B C B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "aac2d412edc7e74fb6d004e00bd4aada69dade7a"
                    ]
                },
                {
                    "command": [
                        "assert (Per B C D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "81f83cd13819d8ae219c260477b9a06a6536b8db"
                    ]
                },
                {
                    "command": [
                        "assert (Per B c D) by (conclude_def SQ ).",
                        "VernacExtend",
                        "da1ef7745f48f3c35396d5a66c724ae870fa8318"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B c D B C D) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "938c5f16d326f3625d54fdea75798f7770c44d78"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong B D B D /\\ CongA c B D C B D /\\ CongA c D B C D B)) by (conclude proposition_04).",
                        "VernacExtend",
                        "ac74a47b49cdf888a79e469c18a01a601f69e39a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists m, (Midpoint A m c /\\ Midpoint B m D)) by (conclude lemma_diagonalsbisect);destruct Tf as [m];spliter.",
                        "VernacExtend",
                        "0259cea2566f92d778c66d33ea8587e940da3e98"
                    ]
                },
                {
                    "command": [
                        "assert ((BetS A m c /\\ Cong A m m c)) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "1f886f0551d71793ac5c6387aa6d7c0c768cec8e"
                    ]
                },
                {
                    "command": [
                        "assert ((BetS B m D /\\ Cong B m m D)) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "575accf653ee55897cd60d83a46dd94d785056de"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C D B c D B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "63ae4e1c0abd005e2eaad4639839b707bea35082"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D m D m) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "348a5cec27c85f8146b0832b399c3000ab734084"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D c D C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2c6a9296240bbae6d5ca72f13e21f982d1ecbb42"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C D A) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "220c9d07a910f20ff9b0e24adf23eceff8519ff1"
                    ]
                },
                {
                    "command": [
                        "assert (Per c D A) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "54fdb77a1006f9b9f5c21fde6e026b67f8872673"
                    ]
                },
                {
                    "command": [
                        "assert (nCol c D A) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "f478bf0c48b82fed0973896d38965d5fc83e5bb7"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A c D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "2215a622d27ed4767427e3dcef3ac93490452e6b"
                    ]
                },
                {
                    "command": [
                        "assert (eq c c) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "916a0cf6a7760772073fa60385f36a27038fed41"
                    ]
                },
                {
                    "command": [
                        "assert (Col A c c) by (conclude_def Col ).",
                        "VernacExtend",
                        "38d0ec057781cf0ef67b48b7a6fb7733fb7504cd"
                    ]
                },
                {
                    "command": [
                        "assert (Col A m c) by (conclude_def Col ).",
                        "VernacExtend",
                        "4d97236293bb4ceeb877b58f9dfbddeaccaf3554"
                    ]
                },
                {
                    "command": [
                        "assert (Col A c m) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "48369bdf5c9e7c32406476349acc3f2de3ed75f7"
                    ]
                },
                {
                    "command": [
                        "assert (neq m c) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "81fdeb6ad1fa23ee8c967b195a8acdef2795ee9b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol m c D) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "1f7eaeeba79997e3080543516104396f350e64b7"
                    ]
                },
                {
                    "command": [
                        "assert (nCol c D m) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "a2768c16c3eb1f80d188e07be340054d666dbe35"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col C D m).",
                        "VernacExtend",
                        "af056f2536e0f3c5a437edb561a5f2296bc71ded"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col B m D) by (conclude_def Col ).",
                        "VernacExtend",
                        "ee61565be46a784bf8338835d6d96d37f7daa529"
                    ]
                },
                {
                    "command": [
                        "assert (Col m D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "9432f9534b86b7a2c2b98265c009b74ff3baa4c7"
                    ]
                },
                {
                    "command": [
                        "assert (Col m D C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f7ff92a6591ce6cc5d51f203e7ac607fbc72d1f1"
                    ]
                },
                {
                    "command": [
                        "assert (neq m D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "8a91a2de3613475218d8a73140826d9b267fe8f4"
                    ]
                },
                {
                    "command": [
                        "assert (Col D B C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "9a6c7c9fcb04af52b32740b66aa4fe0bde9c818e"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "2bbf76051c5820b160a3d5e27a58112ff361d8b6"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "c9f2843576e45b36fd595dbb2c8f8312e427ad55"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (CongA c D B C D B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "1392b9f0b176f5b9f9032b323959bb4f930a86d9"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D m B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "086899aae960aeb0288808f87ca47ef6b7588983"
                    ]
                },
                {
                    "command": [
                        "assert (neq D B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a07d0c5d501eb8abdaae8b01735301982ee47af1"
                    ]
                },
                {
                    "command": [
                        "assert (Out D B m) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "e3f006afdb005e75cf8d09378973aea3ad8f2eb2"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "9237553638c0e7a25b7e8c2781363c6b63e4b08e"
                    ]
                },
                {
                    "command": [
                        "assert (Out D C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "f9394b71e33010eec5d0cafe89f03b004392bfb0"
                    ]
                },
                {
                    "command": [
                        "assert (CongA c D B C D m) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "ba5663319eca67cac217d4af9b3172e88237b763"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C D m c D B) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "f0bcf55cbf9add3d6133ba000bbfbf66fca3c617"
                    ]
                },
                {
                    "command": [
                        "assert (eq c c) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "916a0cf6a7760772073fa60385f36a27038fed41"
                    ]
                },
                {
                    "command": [
                        "assert (neq D c) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8ed5dd28518d1c1ff0b4b059ab5f0bc253734941"
                    ]
                },
                {
                    "command": [
                        "assert (Out D c c) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "413f07e9a6aeab31e351fef13ab365c77c87c2b5"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C D m c D m) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "cef1618a67ffcbe3f28bd02951a9650987bb1010"
                    ]
                },
                {
                    "command": [
                        "assert (CongA c D m C D m) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "e64ce5ab951ff54c80052aaa9d4732e8ba0711ce"
                    ]
                },
                {
                    "command": [
                        "assert (Cong c m C m) by (conclude proposition_04).",
                        "VernacExtend",
                        "544350a63d929acb3ddb6df1ad6141557a76c83f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong m c m C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "c043a26229894d3c1d6c11531d64d86be29e85e4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A m A m) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "4faa1dac2ff434f7419a9ccf6fd82775cdecb5d3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D A D A) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "948feb782f230e13dcf1a0e255799206b21a01b1"
                    ]
                },
                {
                    "command": [
                        "assert (Per c D A) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "54fdb77a1006f9b9f5c21fde6e026b67f8872673"
                    ]
                },
                {
                    "command": [
                        "assert (Per A D c) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "fe7bc4e49507afcf7a053013705d388f379207c0"
                    ]
                },
                {
                    "command": [
                        "assert (Per A D C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "53444c0589647e2e28885976260985b84b3e4862"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A D C A D c) by (conclude lemma_Euclid4).",
                        "VernacExtend",
                        "8d2d220a4fc517f7e065023b752f8993fcf03e8a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D C D c) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "21199d876e73f3a2c4f37b35a778bf870dfaf0a6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A c) by (conclude proposition_04).",
                        "VernacExtend",
                        "b141fe2d3a1884530f03e82f2d9f1f55f3735c9c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A c A C) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a87ef61992a42ceaa6e44e7d4698ca4b741b426f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A m C) by (conclude lemma_betweennesspreserved).",
                        "VernacExtend",
                        "afb752ecc097681e1aaeacaa77ec13258f3fa15b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A m) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "480dc789a93753989e01715c9ff963de2a42c779"
                    ]
                },
                {
                    "command": [
                        "assert (Out A m c) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "d3ece9cd141b9b2f6151f6a8576935b9ea0df1dc"
                    ]
                },
                {
                    "command": [
                        "assert (Out A m C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "62f7defbe1e6b0f1a0484cd07c6f782494fba4bc"
                    ]
                },
                {
                    "command": [
                        "assert (eq c C) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "f1f9142e9ebf9f096edc5677edca0e94577f405b"
                    ]
                },
                {
                    "command": [
                        "assert (PG A B C D) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "6f12243cb94622dc96337f9035b700dfa2c05252"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}