{
    "filename": "Elements/OriginalProofs/lemma_parallelflip.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearorder.",
            "VernacRequire",
            "34aef7c567861aba437eb51ba850b6bb09ef5e53"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_inequalitysymmetric.",
            "VernacRequire",
            "091b8bf9100b41766c433d93f2d6a54aefc729f6"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral}.",
            "VernacContext",
            "2fbba6835eae564c0004c876ca3949150abb2ba6"
        ],
        [
            "Lemma lemma_parallelflip : forall A B C D, Par A B C D -> Par B A C D /\\ Par A B D C /\\ Par B A D C.",
            "VernacStartTheoremProof",
            "d3b52d1d7ae4abac5c02a71dd18ec92f7c05fcd7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M a b c d, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a M d /\\ BetS c M b)) by (conclude_def Par );destruct Tf as [M[a[b[c[d]]]]];spliter.",
            "VernacExtend",
            "4a085614584e000812fe3d9076796722ba485178"
        ],
        [
            "assert (Col B A a) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7ee394b41c41a190aadb38570a23d7d342b681c8"
        ],
        [
            "assert (Col B A b) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b3e381c0a7e2add85f3e715f9e14d00b8eba91d7"
        ],
        [
            "assert (Col D C c) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3d91976c545965390b45dba1837374187ffe9cb4"
        ],
        [
            "assert (Col D C d) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "0735d58abccdbb737368951b76756af643d1f05b"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (neq D C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f23eb05481a976a61c3e073657f8e5ca451231f4"
        ],
        [
            "assert (BetS d M a) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "14d4b13bffe9e96db911b90b987dfb3d11477d18"
        ],
        [
            "assert (BetS b M c) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "835d49128532cb9a697de0d06461e19e55950047"
        ],
        [
            "assert (neq d c) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "bf140f5d0d467cc41497ae50da73e8efa49185bb"
        ],
        [
            "assert (neq b a) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d3f7b3d00cb58bd6a64b833e947d6b23e946dcca"
        ],
        [
            "assert (~ Meet A B D C).",
            "VernacExtend",
            "1f656737ae6eb65745f526a1c5c5e8a577a80c56"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (neq A B /\\ neq D C /\\ Col A B P /\\ Col D C P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
            "VernacExtend",
            "0904f644d20576079574762958e59156d4a84319"
        ],
        [
            "assert (Col C D P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "46e2a17e45ab1dfa96a642ccf015ac6a789435db"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Meet B A C D).",
            "VernacExtend",
            "6dd3bfd03a3fcc58bb6e2a7c7dace359729eee10"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (neq B A /\\ neq C D /\\ Col B A P /\\ Col C D P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
            "VernacExtend",
            "0ec26ea63b56ab3e3431d0e2d6571b52de6e8df9"
        ],
        [
            "assert (Col A B P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5af9169c1bf2150991c1493326870658d4e6da80"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Meet B A D C).",
            "VernacExtend",
            "0bee8d6bb5db115f3ea7ef6038cc4d36eec7aeea"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (neq B A /\\ neq D C /\\ Col B A P /\\ Col D C P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
            "VernacExtend",
            "3619ccc83ee99a6819cd618edded23d2d5e4b9e8"
        ],
        [
            "assert (Col A B P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5af9169c1bf2150991c1493326870658d4e6da80"
        ],
        [
            "assert (Col C D P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "46e2a17e45ab1dfa96a642ccf015ac6a789435db"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par B A C D) by (conclude_def Par ).",
            "VernacExtend",
            "ae4983c6d3d58c368b4b94e38d18648bba05f0e0"
        ],
        [
            "assert (Par A B D C) by (conclude_def Par ).",
            "VernacExtend",
            "b2578c4e1c2655a2663b53f91119acd5be26d931"
        ],
        [
            "assert (Par B A D C) by (conclude_def Par ).",
            "VernacExtend",
            "4a233f92ff9d107cd3cc36bb5daf0fae11261b90"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_parallelflip",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M a b c d, (neq A B /\\ neq C D /\\ Col A B a /\\ Col A B b /\\ neq a b /\\ Col C D c /\\ Col C D d /\\ neq c d /\\ ~ Meet A B C D /\\ BetS a M d /\\ BetS c M b)) by (conclude_def Par );destruct Tf as [M[a[b[c[d]]]]];spliter.",
                        "VernacExtend",
                        "4a085614584e000812fe3d9076796722ba485178"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A a) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7ee394b41c41a190aadb38570a23d7d342b681c8"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A b) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b3e381c0a7e2add85f3e715f9e14d00b8eba91d7"
                    ]
                },
                {
                    "command": [
                        "assert (Col D C c) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3d91976c545965390b45dba1837374187ffe9cb4"
                    ]
                },
                {
                    "command": [
                        "assert (Col D C d) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "0735d58abccdbb737368951b76756af643d1f05b"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f23eb05481a976a61c3e073657f8e5ca451231f4"
                    ]
                },
                {
                    "command": [
                        "assert (BetS d M a) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "14d4b13bffe9e96db911b90b987dfb3d11477d18"
                    ]
                },
                {
                    "command": [
                        "assert (BetS b M c) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "835d49128532cb9a697de0d06461e19e55950047"
                    ]
                },
                {
                    "command": [
                        "assert (neq d c) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "bf140f5d0d467cc41497ae50da73e8efa49185bb"
                    ]
                },
                {
                    "command": [
                        "assert (neq b a) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d3f7b3d00cb58bd6a64b833e947d6b23e946dcca"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B D C).",
                        "VernacExtend",
                        "1f656737ae6eb65745f526a1c5c5e8a577a80c56"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (neq A B /\\ neq D C /\\ Col A B P /\\ Col D C P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "0904f644d20576079574762958e59156d4a84319"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "46e2a17e45ab1dfa96a642ccf015ac6a789435db"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet B A C D).",
                        "VernacExtend",
                        "6dd3bfd03a3fcc58bb6e2a7c7dace359729eee10"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (neq B A /\\ neq C D /\\ Col B A P /\\ Col C D P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "0ec26ea63b56ab3e3431d0e2d6571b52de6e8df9"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5af9169c1bf2150991c1493326870658d4e6da80"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet B A D C).",
                        "VernacExtend",
                        "0bee8d6bb5db115f3ea7ef6038cc4d36eec7aeea"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (neq B A /\\ neq D C /\\ Col B A P /\\ Col D C P)) by (conclude_def Meet );destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "3619ccc83ee99a6819cd618edded23d2d5e4b9e8"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5af9169c1bf2150991c1493326870658d4e6da80"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "46e2a17e45ab1dfa96a642ccf015ac6a789435db"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par B A C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "ae4983c6d3d58c368b4b94e38d18648bba05f0e0"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B D C) by (conclude_def Par ).",
                        "VernacExtend",
                        "b2578c4e1c2655a2663b53f91119acd5be26d931"
                    ]
                },
                {
                    "command": [
                        "assert (Par B A D C) by (conclude_def Par ).",
                        "VernacExtend",
                        "4a233f92ff9d107cd3cc36bb5daf0fae11261b90"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}