{
    "filename": "Elements/OriginalProofs/lemma_Pasch_outer2.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_collinear4.",
            "VernacRequire",
            "31c94163fec0c65e806705b552c4ddb0c11450a8"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "8fa44f4771a9528e103d9f2054b77606cde8225f"
        ],
        [
            "Lemma lemma_Pasch_outer2 : forall A B C P Q, BetS A P C -> BetS B C Q -> nCol B P A -> exists X, BetS A X Q /\\ BetS B P X.",
            "VernacStartTheoremProof",
            "031c84585353a746853d9a003646996d3daa4aff"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (~ Col B Q A).",
            "VernacExtend",
            "21fabfdc1e6f556aa05ed85d52ee03ca1d8ac38a"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A P C) by (conclude_def Col ).",
            "VernacExtend",
            "f8b28a2ed5f08af491c2406f99a322a5904a0d02"
        ],
        [
            "assert (Col B C Q) by (conclude_def Col ).",
            "VernacExtend",
            "024339d95d3c154fc524efea72192c9d1e52db0d"
        ],
        [
            "assert (Col B Q C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "12f9c0545986293d2988d999c7e8ea2b109da849"
        ],
        [
            "assert (~ eq Q A).",
            "VernacExtend",
            "22b2b62fe3eae45d7b9fae59a341776138a9a3ec"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col B A C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "c87d9b81b7153ddc97bd29fcb64cdc1d8bc037fd"
        ],
        [
            "assert (Col C A B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "d35ebb1043dd7432ad79ad3ae0470fa825b1f871"
        ],
        [
            "assert (Col C A P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "937cf8fce0c7674cd0dde6c078f9c624578180f7"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
        ],
        [
            "assert (Col A B P) by (conclude lemma_collinear4).",
            "VernacExtend",
            "a8231b20675ee190daab4aabc7315e2e951e9649"
        ],
        [
            "assert (Col B P A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "03b8ad06f0115b444c39820d6868561d04f6f05e"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Col B Q C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "12f9c0545986293d2988d999c7e8ea2b109da849"
        ],
        [
            "assert (neq B Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e0366e2454a0e7fd2438d9c6382eb99b5574c97b"
        ],
        [
            "assert (Col Q A C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "eaba6e7cf31a1043d3a1f44fd91d31c881a7b9da"
        ],
        [
            "assert (Col A C Q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "6d8cfd37f38ca0c7430201aa3e7933a9f67b420a"
        ],
        [
            "assert (Col A C P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "547d5a4bf988af402b4dbef0436b7d3a7dc94d43"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (Col C Q P) by (conclude lemma_collinear4).",
            "VernacExtend",
            "09e1f8dc0523f85eddb3ed5c6cfb76b1c3d2bcca"
        ],
        [
            "assert (Col C Q B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "678353debb35285e813812493e6c522969f48fef"
        ],
        [
            "assert (neq C Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "406a517b14bb905cc15fa7abe76de9ee4f682d3a"
        ],
        [
            "assert (Col Q P B) by (conclude lemma_collinear4).",
            "VernacExtend",
            "f4e3b10df0bf2024c724f4f8e3dd544d46c3ffa1"
        ],
        [
            "assert (Col Q B P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ae2024c7bee04ecbf16772d7f760ab879fa6c637"
        ],
        [
            "assert (Col Q B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f1f16b56259dbfc9a274803df004922121443e18"
        ],
        [
            "assert (neq Q B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "fd740defa466f62735a148da0ddb3f3a282c087c"
        ],
        [
            "assert (Col B P A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "6be7bf340acc3a2ea8297cf4ee53daa210e4d215"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A E Q /\\ BetS B P E)) by (conclude postulate_Pasch_outer);destruct Tf as [E];spliter.",
            "VernacExtend",
            "927a459a8bb374725115646ae9f0b3a4fedd0d08"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_Pasch_outer2",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col B Q A).",
                        "VernacExtend",
                        "21fabfdc1e6f556aa05ed85d52ee03ca1d8ac38a"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A P C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f8b28a2ed5f08af491c2406f99a322a5904a0d02"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C Q) by (conclude_def Col ).",
                        "VernacExtend",
                        "024339d95d3c154fc524efea72192c9d1e52db0d"
                    ]
                },
                {
                    "command": [
                        "assert (Col B Q C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "12f9c0545986293d2988d999c7e8ea2b109da849"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq Q A).",
                        "VernacExtend",
                        "22b2b62fe3eae45d7b9fae59a341776138a9a3ec"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "c87d9b81b7153ddc97bd29fcb64cdc1d8bc037fd"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "d35ebb1043dd7432ad79ad3ae0470fa825b1f871"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "937cf8fce0c7674cd0dde6c078f9c624578180f7"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B P) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "a8231b20675ee190daab4aabc7315e2e951e9649"
                    ]
                },
                {
                    "command": [
                        "assert (Col B P A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "03b8ad06f0115b444c39820d6868561d04f6f05e"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Col B Q C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "12f9c0545986293d2988d999c7e8ea2b109da849"
                    ]
                },
                {
                    "command": [
                        "assert (neq B Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e0366e2454a0e7fd2438d9c6382eb99b5574c97b"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q A C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "eaba6e7cf31a1043d3a1f44fd91d31c881a7b9da"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C Q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "6d8cfd37f38ca0c7430201aa3e7933a9f67b420a"
                    ]
                },
                {
                    "command": [
                        "assert (Col A C P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "547d5a4bf988af402b4dbef0436b7d3a7dc94d43"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (Col C Q P) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "09e1f8dc0523f85eddb3ed5c6cfb76b1c3d2bcca"
                    ]
                },
                {
                    "command": [
                        "assert (Col C Q B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "678353debb35285e813812493e6c522969f48fef"
                    ]
                },
                {
                    "command": [
                        "assert (neq C Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "406a517b14bb905cc15fa7abe76de9ee4f682d3a"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q P B) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "f4e3b10df0bf2024c724f4f8e3dd544d46c3ffa1"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q B P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ae2024c7bee04ecbf16772d7f760ab879fa6c637"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f1f16b56259dbfc9a274803df004922121443e18"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "fd740defa466f62735a148da0ddb3f3a282c087c"
                    ]
                },
                {
                    "command": [
                        "assert (Col B P A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "6be7bf340acc3a2ea8297cf4ee53daa210e4d215"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A E Q /\\ BetS B P E)) by (conclude postulate_Pasch_outer);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "927a459a8bb374725115646ae9f0b3a4fedd0d08"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}