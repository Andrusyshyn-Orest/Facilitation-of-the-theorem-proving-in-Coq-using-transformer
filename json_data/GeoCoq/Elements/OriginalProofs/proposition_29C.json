{
    "filename": "Elements/OriginalProofs/proposition_29C.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelNC.",
            "VernacRequire",
            "5f4385a2c77e4b4f2518ca3a6e4d8ec4f628cdd8"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.",
            "VernacRequire",
            "380a5936af7e0007ca86a397621339008584ccda"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel.",
            "VernacRequire",
            "6a771fcd6e2f1b0bfb49807cb56ed3946cdf7c62"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29.",
            "VernacRequire",
            "5a62595bdaa8d7b7227f03051fc7729c87131e90"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma proposition_29C : forall B D E G H, Par G B H D -> OS B D G H -> BetS E G H -> CongA E G B G H D /\\ RT B G H G H D.",
            "VernacStartTheoremProof",
            "45074e7aaf7ce3dad9958ad4f9eb1e9d9e7621ea"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (nCol G B H) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "18e08bbf5db305e4951c7566a24ccc2fa8497587"
        ],
        [
            "assert (~ eq G B).",
            "VernacExtend",
            "d6d91c1849e19e34fda89c80be5bcfd42dc2a000"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col G B H) by (conclude_def Col ).",
            "VernacExtend",
            "e0c742fb01c855b8a4629e1a4eaa4e7480e64080"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq B G) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "7e9aefc5ade8aeb56f89e17834b919a157b8aec0"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists A, (BetS B G A /\\ Cong G A B G)) by (conclude lemma_extension);destruct Tf as [A];spliter.",
            "VernacExtend",
            "42d32e9abcfd216ea24add991fa85c9d462927c0"
        ],
        [
            "assert (BetS A G B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "db11e5f38858b88a542eb80e32246abccc7795f7"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (Col A B G) by (conclude_def Col ).",
            "VernacExtend",
            "82671153cfccf2c68064dbbd38c4dc9e8df00f67"
        ],
        [
            "assert (Col G B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f96cb78eb3a08d2995f43d315b6af3cd8e52f029"
        ],
        [
            "assert (Par H D G B) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "2fb9278d26f119f3f366f94b00c61763d0bfeeec"
        ],
        [
            "assert (Par H D A B) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "e5e3852ee56ae01d9c783048b5a0c9470ced360b"
        ],
        [
            "assert (Par H D B A) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "33932f0e9058922e78f3d1ab6a25e469b0e22483"
        ],
        [
            "assert (Col B A G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "dfb63bcc139465b1f07969b6b87aa36803939eb6"
        ],
        [
            "assert (neq G A) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "4e711ff258b9647c2ff13bff291012bbd1c335d0"
        ],
        [
            "assert (Par H D G A) by (conclude lemma_collinearparallel).",
            "VernacExtend",
            "c614f16cba0ec120042a97b784ce4edf2af23d8e"
        ],
        [
            "assert (Par H D A G) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "bd132cbc8b1f57741f681cc071d9f35fd3e4c2f6"
        ],
        [
            "assert (Par A G H D) by (conclude lemma_parallelsymmetric).",
            "VernacExtend",
            "ae5bfba6a9eaa766317800669a824a965a1215af"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists a g h d m, (neq A G /\\ neq H D /\\ Col A G a /\\ Col A G g /\\ neq a g /\\ Col H D h /\\ Col H D d /\\ neq h d /\\ ~ Meet A G H D /\\ BetS a m d /\\ BetS h m g)) by (conclude_def Par );destruct Tf as [a[g[h[d[m]]]]];spliter.",
            "VernacExtend",
            "5d907137cb19e4546f9ce420dc3efb4948cacd60"
        ],
        [
            "assert (neq D H) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "dc5376309c0aa2d188260e61ec1684122345b3fe"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists C, (BetS D H C /\\ Cong H C D H)) by (conclude lemma_extension);destruct Tf as [C];spliter.",
            "VernacExtend",
            "b21c87826be1b7c36353bb0fd8a17fc0edfecb90"
        ],
        [
            "assert (BetS H G E) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "066d43f33ca9ab1285e640908762568b5503296a"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (neq D C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "dac741e71be8778833d3135c1db363ed1412abfc"
        ],
        [
            "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "c7e81de516241ce4e74c736518aa3cecf412e158"
        ],
        [
            "assert (Col A G B) by (conclude_def Col ).",
            "VernacExtend",
            "2f55b58ec77a5a8623e4cd5ec3d180029dddb67a"
        ],
        [
            "assert (Col G A B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7faaa20e85da645b8560f5681321c46156e4943c"
        ],
        [
            "assert (Col G A a) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "cd70edece217b9401255366b9d85ff058c90cae5"
        ],
        [
            "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e2791ae9c412727db671b58f53b6b23174e66732"
        ],
        [
            "assert (Col A B a) by (conclude lemma_collinear4).",
            "VernacExtend",
            "5584f5ac530a2e03ce67956fd38559d5c6320cf8"
        ],
        [
            "assert (Col G A g) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "35b0a0fe74f88f9563930cb44a2fc422099b9097"
        ],
        [
            "assert (Col A B g) by (conclude lemma_collinear4).",
            "VernacExtend",
            "50b0ade2a24a5b8f43697e124261d0e1243e9b86"
        ],
        [
            "assert (Col D H C) by (conclude_def Col ).",
            "VernacExtend",
            "59b032539d394c54e7e6a47eaa4e0089fe7a1821"
        ],
        [
            "assert (Col H D C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "b020340d2074c303bdd56057fa10e1d66df33704"
        ],
        [
            "assert (Col D C h) by (conclude lemma_collinear4).",
            "VernacExtend",
            "db19ff3c5edb42aa8c0791cfc57f5754535b6d4c"
        ],
        [
            "assert (Col C D h) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "e0f740af9487824c88b6d45f6a508f477515d96a"
        ],
        [
            "assert (Col D d C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "b2a455a903a6da894db121503d58bb43b2299b41"
        ],
        [
            "assert (Col C D d) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "d8e1cea0364782b42b17580c07a3f9bd0101cff4"
        ],
        [
            "assert (~ Meet A B C D).",
            "VernacExtend",
            "03378f4145e3d326f8d303da475716ec3954a985"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (neq A B /\\ neq C D /\\ Col A B M /\\ Col C D M)) by (conclude_def Meet );destruct Tf as [M];spliter.",
            "VernacExtend",
            "210c64f1d82ce154cbb8b52e4650276c8d641620"
        ],
        [
            "assert (Col B A G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "dfb63bcc139465b1f07969b6b87aa36803939eb6"
        ],
        [
            "assert (Col B A M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
        ],
        [
            "assert (Col A G M) by (conclude lemma_collinear4).",
            "VernacExtend",
            "bd020af97f1c830f906cb7eed60b21bddfaca3e7"
        ],
        [
            "assert (Col C D H) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c37391ab06fdb7e8b361dff1f973b717af621be8"
        ],
        [
            "assert (Col D H M) by (conclude lemma_collinear4).",
            "VernacExtend",
            "8878c4ed92de78c9beeec3cc04695ad8115c7ee7"
        ],
        [
            "assert (Col H D M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "0aad957c7306ed0c0e279d094de057d10ec943be"
        ],
        [
            "assert (Meet A G H D) by (conclude_def Meet ).",
            "VernacExtend",
            "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Par A B C D) by (conclude_def Par ).",
            "VernacExtend",
            "dc5bba64feddcf48da4479f4af56ca5f9818465e"
        ],
        [
            "assert (BetS C H D) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "79d4ea8b54f3dd71e79a151e47053b0754dd1c73"
        ],
        [
            "assert (BetS E G H) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "2a90dedc24abe75fbf7b8134bbae894637fb942d"
        ],
        [
            "assert (eq G G) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
        ],
        [
            "assert (Col G H G) by (conclude_def Col ).",
            "VernacExtend",
            "087ad4e46922f1209cf97725fc10d113a6fc9c57"
        ],
        [
            "assert (nCol G B H) by (forward_using lemma_parallelNC).",
            "VernacExtend",
            "18e08bbf5db305e4951c7566a24ccc2fa8497587"
        ],
        [
            "assert (nCol G H B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "ddc44edd0d4ee1bcbe535513c8169af03066a1d2"
        ],
        [
            "assert (OS D B G H) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "f2219f2f326f947ab2eabd87492ad7ffb4ccd9d0"
        ],
        [
            "assert (TS B G H A) by (conclude_def TS ).",
            "VernacExtend",
            "e3358e0b7f326413eec58175f19d9f285243dad7"
        ],
        [
            "assert (TS D G H A) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "22169f48e4c9b0a8f377f64c9763e88a4ec98b14"
        ],
        [
            "assert (TS A G H D) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "1c3b9b02dca9c0f807a2e944a155bf671b1e4c05"
        ],
        [
            "assert ((CongA A G H G H D /\\ CongA E G B G H D /\\ RT B G H G H D)) by (conclude proposition_29).",
            "VernacExtend",
            "7078f180438150879fece00572ba3a70a3844bed"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_29C",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G B H) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "18e08bbf5db305e4951c7566a24ccc2fa8497587"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq G B).",
                        "VernacExtend",
                        "d6d91c1849e19e34fda89c80be5bcfd42dc2a000"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col G B H) by (conclude_def Col ).",
                        "VernacExtend",
                        "e0c742fb01c855b8a4629e1a4eaa4e7480e64080"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq B G) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "7e9aefc5ade8aeb56f89e17834b919a157b8aec0"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists A, (BetS B G A /\\ Cong G A B G)) by (conclude lemma_extension);destruct Tf as [A];spliter.",
                        "VernacExtend",
                        "42d32e9abcfd216ea24add991fa85c9d462927c0"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A G B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "db11e5f38858b88a542eb80e32246abccc7795f7"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B G) by (conclude_def Col ).",
                        "VernacExtend",
                        "82671153cfccf2c68064dbbd38c4dc9e8df00f67"
                    ]
                },
                {
                    "command": [
                        "assert (Col G B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f96cb78eb3a08d2995f43d315b6af3cd8e52f029"
                    ]
                },
                {
                    "command": [
                        "assert (Par H D G B) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "2fb9278d26f119f3f366f94b00c61763d0bfeeec"
                    ]
                },
                {
                    "command": [
                        "assert (Par H D A B) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "e5e3852ee56ae01d9c783048b5a0c9470ced360b"
                    ]
                },
                {
                    "command": [
                        "assert (Par H D B A) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "33932f0e9058922e78f3d1ab6a25e469b0e22483"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "dfb63bcc139465b1f07969b6b87aa36803939eb6"
                    ]
                },
                {
                    "command": [
                        "assert (neq G A) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "4e711ff258b9647c2ff13bff291012bbd1c335d0"
                    ]
                },
                {
                    "command": [
                        "assert (Par H D G A) by (conclude lemma_collinearparallel).",
                        "VernacExtend",
                        "c614f16cba0ec120042a97b784ce4edf2af23d8e"
                    ]
                },
                {
                    "command": [
                        "assert (Par H D A G) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "bd132cbc8b1f57741f681cc071d9f35fd3e4c2f6"
                    ]
                },
                {
                    "command": [
                        "assert (Par A G H D) by (conclude lemma_parallelsymmetric).",
                        "VernacExtend",
                        "ae5bfba6a9eaa766317800669a824a965a1215af"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists a g h d m, (neq A G /\\ neq H D /\\ Col A G a /\\ Col A G g /\\ neq a g /\\ Col H D h /\\ Col H D d /\\ neq h d /\\ ~ Meet A G H D /\\ BetS a m d /\\ BetS h m g)) by (conclude_def Par );destruct Tf as [a[g[h[d[m]]]]];spliter.",
                        "VernacExtend",
                        "5d907137cb19e4546f9ce420dc3efb4948cacd60"
                    ]
                },
                {
                    "command": [
                        "assert (neq D H) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "dc5376309c0aa2d188260e61ec1684122345b3fe"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists C, (BetS D H C /\\ Cong H C D H)) by (conclude lemma_extension);destruct Tf as [C];spliter.",
                        "VernacExtend",
                        "b21c87826be1b7c36353bb0fd8a17fc0edfecb90"
                    ]
                },
                {
                    "command": [
                        "assert (BetS H G E) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "066d43f33ca9ab1285e640908762568b5503296a"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (neq D C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "dac741e71be8778833d3135c1db363ed1412abfc"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "c7e81de516241ce4e74c736518aa3cecf412e158"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G B) by (conclude_def Col ).",
                        "VernacExtend",
                        "2f55b58ec77a5a8623e4cd5ec3d180029dddb67a"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7faaa20e85da645b8560f5681321c46156e4943c"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A a) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "cd70edece217b9401255366b9d85ff058c90cae5"
                    ]
                },
                {
                    "command": [
                        "assert (neq G A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e2791ae9c412727db671b58f53b6b23174e66732"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B a) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "5584f5ac530a2e03ce67956fd38559d5c6320cf8"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A g) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "35b0a0fe74f88f9563930cb44a2fc422099b9097"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B g) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "50b0ade2a24a5b8f43697e124261d0e1243e9b86"
                    ]
                },
                {
                    "command": [
                        "assert (Col D H C) by (conclude_def Col ).",
                        "VernacExtend",
                        "59b032539d394c54e7e6a47eaa4e0089fe7a1821"
                    ]
                },
                {
                    "command": [
                        "assert (Col H D C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "b020340d2074c303bdd56057fa10e1d66df33704"
                    ]
                },
                {
                    "command": [
                        "assert (Col D C h) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "db19ff3c5edb42aa8c0791cfc57f5754535b6d4c"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D h) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "e0f740af9487824c88b6d45f6a508f477515d96a"
                    ]
                },
                {
                    "command": [
                        "assert (Col D d C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "b2a455a903a6da894db121503d58bb43b2299b41"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D d) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "d8e1cea0364782b42b17580c07a3f9bd0101cff4"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B C D).",
                        "VernacExtend",
                        "03378f4145e3d326f8d303da475716ec3954a985"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (neq A B /\\ neq C D /\\ Col A B M /\\ Col C D M)) by (conclude_def Meet );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "210c64f1d82ce154cbb8b52e4650276c8d641620"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "dfb63bcc139465b1f07969b6b87aa36803939eb6"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "20d71deeb49a9dd3130caa7e6c2a12dc211fcb66"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G M) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "bd020af97f1c830f906cb7eed60b21bddfaca3e7"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D H) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c37391ab06fdb7e8b361dff1f973b717af621be8"
                    ]
                },
                {
                    "command": [
                        "assert (Col D H M) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "8878c4ed92de78c9beeec3cc04695ad8115c7ee7"
                    ]
                },
                {
                    "command": [
                        "assert (Col H D M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "0aad957c7306ed0c0e279d094de057d10ec943be"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A G H D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "5618af577c508dd4e4e71c44e6174a6c8b65eb9f"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "dc5bba64feddcf48da4479f4af56ca5f9818465e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C H D) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "79d4ea8b54f3dd71e79a151e47053b0754dd1c73"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E G H) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "2a90dedc24abe75fbf7b8134bbae894637fb942d"
                    ]
                },
                {
                    "command": [
                        "assert (eq G G) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "ceec5da855388b0cfaa07a6b0ade9e68d09baace"
                    ]
                },
                {
                    "command": [
                        "assert (Col G H G) by (conclude_def Col ).",
                        "VernacExtend",
                        "087ad4e46922f1209cf97725fc10d113a6fc9c57"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G B H) by (forward_using lemma_parallelNC).",
                        "VernacExtend",
                        "18e08bbf5db305e4951c7566a24ccc2fa8497587"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G H B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "ddc44edd0d4ee1bcbe535513c8169af03066a1d2"
                    ]
                },
                {
                    "command": [
                        "assert (OS D B G H) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "f2219f2f326f947ab2eabd87492ad7ffb4ccd9d0"
                    ]
                },
                {
                    "command": [
                        "assert (TS B G H A) by (conclude_def TS ).",
                        "VernacExtend",
                        "e3358e0b7f326413eec58175f19d9f285243dad7"
                    ]
                },
                {
                    "command": [
                        "assert (TS D G H A) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "22169f48e4c9b0a8f377f64c9763e88a4ec98b14"
                    ]
                },
                {
                    "command": [
                        "assert (TS A G H D) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "1c3b9b02dca9c0f807a2e944a155bf671b1e4c05"
                    ]
                },
                {
                    "command": [
                        "assert ((CongA A G H G H D /\\ CongA E G B G H D /\\ RT B G H G H D)) by (conclude proposition_29).",
                        "VernacExtend",
                        "7078f180438150879fece00572ba3a70a3844bed"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}