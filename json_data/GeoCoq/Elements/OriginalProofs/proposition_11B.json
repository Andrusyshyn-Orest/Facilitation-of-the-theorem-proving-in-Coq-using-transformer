{
    "filename": "Elements/OriginalProofs/proposition_11B.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_notperp.",
            "VernacRequire",
            "fb7db3d2075fe101b115f35fb0fd2f44e2d0b94e"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_pointreflectionisometry.",
            "VernacRequire",
            "4a00f255fd5dc8efc5b1d42979ed621af0cc08fc"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_planeseparation.",
            "VernacRequire",
            "dfb172c878e868c4e95a00e2960ea7a0533a4c16"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.",
            "VernacRequire",
            "4e2011e913226485bed5d882d28dd2a3e317b6e7"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma proposition_11B : forall A B C P, BetS A C B -> nCol A B P -> exists X, Per A C X /\\ TS X A B P.",
            "VernacStartTheoremProof",
            "35eaad9275f4e8f65f1e89f682abf728752245ca"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (nCol A B M /\\ OS M P A B /\\ ~ Per A C M)) by (conclude lemma_notperp);destruct Tf as [M];spliter.",
            "VernacExtend",
            "fea127d4ee3739e93c9845e79ac0b38ae12b0563"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, Perp_at M Q A B Q) by (conclude proposition_12);destruct Tf as [Q];spliter.",
            "VernacExtend",
            "1ca47d3dfa3995ad343d79e471f8d3d9b73bddb6"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (Col M Q Q /\\ Col A B Q /\\ Col A B E /\\ Per E Q M)) by (conclude_def Perp_at );destruct Tf as [E];spliter.",
            "VernacExtend",
            "759b14ccde008d74da1180f5e680b3a0d2f7f0ff"
        ],
        [
            "assert (~ eq M Q).",
            "VernacExtend",
            "5881b9e7cb41df8c32b832ccf5cb1ea38f815bdc"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B M) by (conclude cn_equalitysub).",
            "VernacExtend",
            "508360a16f6231b0a25d184e8578a6b33c3cd40a"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq Q M) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "6fe681d319d974570a36cf320ba86a41b7482f12"
        ],
        [
            "assert (Col A B C) by (conclude_def Col ).",
            "VernacExtend",
            "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
        ],
        [
            "assert (Col B A E) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
        ],
        [
            "assert (Col B A C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "31b8c23c71769cdc91e8b8f8a630a2ce0bfb6516"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (~ eq C Q).",
            "VernacExtend",
            "158c632c17833fe831043b580d330f03927ccef8"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Per E C M) by (conclude cn_equalitysub).",
            "VernacExtend",
            "93b9e5f1d1eb7833b6abd2d7c772fcad345247b9"
        ],
        [
            "assert (Col A E C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "fa5a26aff77cb5a05481eb152f41c00b092b9a66"
        ],
        [
            "assert (Col E C A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "5f8f922854f481f296fb5d1b1962a85f3756b2d9"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (Per A C M) by (conclude lemma_collinearright).",
            "VernacExtend",
            "db94e871b7ce5a07a50e395dc71a9414ec141d06"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Col C Q E) by (conclude lemma_collinear5).",
            "VernacExtend",
            "2ef02621b614bfa21770f419f66148cb6d60174b"
        ],
        [
            "assert (Col E Q C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "96be3704a007951fe18cf71bef943a569f42c53f"
        ],
        [
            "assert (Per C Q M) by (conclude lemma_collinearright).",
            "VernacExtend",
            "d78dfe2982c76de5c55c501edabe9bbdd5a30278"
        ],
        [
            "assert (neq Q C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "b4691a91c9542eb9d309cd41361a33b3c937e74a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS Q G C /\\ Cong G Q G C)) by (conclude proposition_10);destruct Tf as [G];spliter.",
            "VernacExtend",
            "12498716fcbd1c4a4501d7f7a79b0149ccd69524"
        ],
        [
            "assert (~ eq M G).",
            "VernacExtend",
            "601efb2f492b6c9a32cec2537f4ecfd399b679dd"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS Q M C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "bc9e39ceff3349acc6e98e2ec65d18904d9f0b6b"
        ],
        [
            "assert (Col Q M C) by (conclude_def Col ).",
            "VernacExtend",
            "fd4a8668ed487191ab81e2ea574eba2399cd0a24"
        ],
        [
            "assert (Col B Q C) by (conclude lemma_collinear4).",
            "VernacExtend",
            "122bcc18c45c8aea003a1bfaacf1293ccb8f5527"
        ],
        [
            "assert (Col Q C M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "d87f5346990ea4f42cdeecc7a5c508c3e3df8312"
        ],
        [
            "assert (Col Q C B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ca0a1bf91b78f1ea4bfe488806627f9b0e926cdf"
        ],
        [
            "assert (neq Q C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "229736231f3170cc4fec5236d37630fb8a3be718"
        ],
        [
            "assert (Col C M B) by (conclude lemma_collinear4).",
            "VernacExtend",
            "ed0e3bce29fd8f28d11282dead9046c9335f17c9"
        ],
        [
            "assert (Col C B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c4e234e367413ef16013499457a5aa51ac86ab40"
        ],
        [
            "assert (Col C B A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "2fb748db5cf6487f38aa69b0c7b0694eb615be5e"
        ],
        [
            "assert (neq C B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "7afd9e17666f6170d930709a4c01bc187dec111d"
        ],
        [
            "assert (Col B M A) by (conclude lemma_collinear4).",
            "VernacExtend",
            "2e3e5ffcf63902dc370e9d6c503aac1624feff3f"
        ],
        [
            "assert (Col A B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "fe9df6fbdbd046fef42c474de214649009067915"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS M G H /\\ Cong G H M G)) by (conclude lemma_extension);destruct Tf as [H];spliter.",
            "VernacExtend",
            "570fd7c85eae277583a7c6ace502f81692abb055"
        ],
        [
            "assert (Cong M G G H) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "1596db9390f28e7abafd71869ccc9a93a90422a8"
        ],
        [
            "assert (Midpoint M G H) by (conclude_def Midpoint ).",
            "VernacExtend",
            "c07d56689841f29c71d69b79ce45824b4bb4e240"
        ],
        [
            "assert (Cong Q G G C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "7be7e604b8a1a1eb823f543c9138b74e8f87c95e"
        ],
        [
            "assert (Midpoint Q G C) by (conclude_def Midpoint ).",
            "VernacExtend",
            "283038c9631f0cf1208e22ebb23cc7a9c18bd078"
        ],
        [
            "assert (Col Q G C) by (conclude_def Col ).",
            "VernacExtend",
            "cbc5b41ce4b957d01087bcc4c5823dda2cde8994"
        ],
        [
            "assert (Col C Q G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "2e0992c5f04f3c638fe0e48f752233818c6f276e"
        ],
        [
            "assert (neq Q G) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "3b8ada5b17849ee8c9c41e1589c7a311dd6629a8"
        ],
        [
            "assert (neq G Q) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "8d0fd0722a30c0eb3be9ceb2e89bb627c9cee3be"
        ],
        [
            "assert (Per G Q M) by (conclude lemma_collinearright).",
            "VernacExtend",
            "aba814c0de028fa8eb6ba8523d28b349085f44b0"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists J, (BetS M Q J /\\ Cong Q J M Q)) by (conclude lemma_extension);destruct Tf as [J];spliter.",
            "VernacExtend",
            "f41cec95827dfa612939364740bd768e8a2de740"
        ],
        [
            "assert (Cong M Q Q J) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "68071d67eeac36d3d86ba95dd69fe993822654af"
        ],
        [
            "assert (Per M Q G) by (conclude lemma_8_2).",
            "VernacExtend",
            "c4fe9131b0a420f3f298ed34ae254f8943bbb289"
        ],
        [
            "assert (Cong M G J G) by (conclude lemma_rightreverse).",
            "VernacExtend",
            "9780aaf58d110d5fc8ebd2350761109a7427ba80"
        ],
        [
            "assert (BetS J Q M) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "cb77985bca006c5c023d8e0d18422fb24ae6ac64"
        ],
        [
            "assert (Cong J Q M Q) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "dcac5befe8fe5cea72496811bf93bfe915678cc6"
        ],
        [
            "assert (Cong J G M G) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "7a5750f95a1f06cf0bb2630d5018f77dbfdef92a"
        ],
        [
            "assert (Per J Q G) by (conclude_def Per ).",
            "VernacExtend",
            "65a36f96979476a62479ccf9998c3051900035ca"
        ],
        [
            "assert (~ eq J G).",
            "VernacExtend",
            "1e56a5646881a6a0d1b69f804ce4bdf0a6c5997f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col J Q G) by (conclude_def Col ).",
            "VernacExtend",
            "1f2d28c17f5eed72f35731ff18e4f26803887a79"
        ],
        [
            "assert (nCol J Q G) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "d212758b5b46f2b9428e660919626daba709b3d0"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (BetS J G K /\\ Cong G K J G)) by (conclude lemma_extension);destruct Tf as [K];spliter.",
            "VernacExtend",
            "e0b7d5fb0edc88efb8a6bda7c3dab8596577a192"
        ],
        [
            "assert (Cong J G G K) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "1e3e655f0d273dd73994a2045be450cc0f100987"
        ],
        [
            "assert (Midpoint J G K) by (conclude_def Midpoint ).",
            "VernacExtend",
            "89bfa4fbd0f1b6aa0688fbd93ca9444377e78199"
        ],
        [
            "assert (Cong M Q H C) by (conclude lemma_pointreflectionisometry).",
            "VernacExtend",
            "ba877de0e0495174e7d1a598fe198652619d6573"
        ],
        [
            "assert (neq J Q) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "390660a671acf5c7b16a287abf86e5a09581d4b0"
        ],
        [
            "assert (neq Q J) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "e9c07fd622992f749da485381052b715866eefc5"
        ],
        [
            "assert (neq M J) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "0b8d720fafe39e1f67248c69b5c229fddfe7a768"
        ],
        [
            "assert (Cong Q J C K) by (conclude lemma_pointreflectionisometry).",
            "VernacExtend",
            "005306e80caf219e8a1811f5cbe389c08d193441"
        ],
        [
            "assert (Cong M J H K) by (conclude lemma_pointreflectionisometry).",
            "VernacExtend",
            "a894ff2b0bc1bfb48f4e02a165043ad4e7a9840e"
        ],
        [
            "assert (BetS H C K) by (conclude lemma_betweennesspreserved).",
            "VernacExtend",
            "b1819f7974ee8c899a24eab1e2deee9d9d949d9d"
        ],
        [
            "assert (Cong H G G M) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "991c2484b726cfe511f89ee31f4c7cd091f1d6b2"
        ],
        [
            "assert (Cong G M J G) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "19b2de72722a508206d37ba23d846a4de5523824"
        ],
        [
            "assert (Cong H G J G) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "0bfedbfd9e6ee311e69bc6911f0a8d4f3abe580f"
        ],
        [
            "assert (Cong J G G K) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "1e3e655f0d273dd73994a2045be450cc0f100987"
        ],
        [
            "assert (Cong H G G K) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "4696292974181bc837e04c85dd1de8396324693a"
        ],
        [
            "assert (Cong H G K G) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "0929e470bd0fe0f35b1210d33d94a1337317a75c"
        ],
        [
            "assert (neq G C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
        ],
        [
            "assert (Cong H C M Q) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "187cd3d9d64963f30ddb93d9be593117a697893c"
        ],
        [
            "assert (Cong M Q Q J) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "68071d67eeac36d3d86ba95dd69fe993822654af"
        ],
        [
            "assert (Cong H C Q J) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "ed38e57cb1bbf32936d9e4d40d28a6010fad90e4"
        ],
        [
            "assert (Cong H C C K) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "b98814e05866be7f723cc9aa1ee9dca851c741dd"
        ],
        [
            "assert (Cong H C K C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "437d4cf98a43440467afc796f5c149aff8216580"
        ],
        [
            "assert (neq G C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
        ],
        [
            "assert (neq C G) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "65eb5aeb5fb5f688314a130b770611d49f86d4e7"
        ],
        [
            "assert (Per H C G) by (conclude_def Per ).",
            "VernacExtend",
            "fd0ae307a13226511c7aefc0fd48d2152c815139"
        ],
        [
            "assert (Per G C H) by (conclude lemma_8_2).",
            "VernacExtend",
            "4a48f7ebbc92d85dc7f7250cc002ea9fb04d58d1"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Col A B A) by (conclude_def Col ).",
            "VernacExtend",
            "7fe661a35be4052e3e351decefc3e023ccdb88ad"
        ],
        [
            "assert (Col Q C A) by (conclude lemma_collinear5).",
            "VernacExtend",
            "9d15b0f3e8c824d0c16ace6b84545e55982997f1"
        ],
        [
            "assert (Col Q C G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "aabae7f9c9fd7107399d96a0f2362845825ab4ce"
        ],
        [
            "assert (Col C A G) by (conclude lemma_collinear4).",
            "VernacExtend",
            "91bbcc8eb00b16ee8fd5ff716f78267e5922e1f8"
        ],
        [
            "assert (Col G C A) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3b1b21b9c9ffa6d5aacf98e1b973145d5993d55b"
        ],
        [
            "assert (neq A C) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "9ccac948939c7ef6427ba87db5086f0baccd3662"
        ],
        [
            "assert (Per A C H) by (conclude lemma_collinearright).",
            "VernacExtend",
            "2a73c87220a9582a7f013204082c43a06539571e"
        ],
        [
            "assert (Col C A B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "d35ebb1043dd7432ad79ad3ae0470fa825b1f871"
        ],
        [
            "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
        ],
        [
            "assert (Col A G B) by (conclude lemma_collinear4).",
            "VernacExtend",
            "7d7f66933956c989084c4017470eb0e6edcd56d5"
        ],
        [
            "assert (Col A B G) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a8c97d860e0a3d798f8aa055ea9a373034990276"
        ],
        [
            "assert (OS P M A B) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "5881aeed3cd11c972f4901cb93e2d8d6d8103f23"
        ],
        [
            "assert (TS M A B H) by (conclude_def TS ).",
            "VernacExtend",
            "ffbe87bc6d2be97cec9476c7fb9a8884be3d3905"
        ],
        [
            "assert (TS P A B H) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "e35d421326b88a890b679e31f7f6f9da045398f2"
        ],
        [
            "assert (TS H A B P) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "98c7b9c8c11e0c13a459767f56e021577d6c1eda"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_11B",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (nCol A B M /\\ OS M P A B /\\ ~ Per A C M)) by (conclude lemma_notperp);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "fea127d4ee3739e93c9845e79ac0b38ae12b0563"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, Perp_at M Q A B Q) by (conclude proposition_12);destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "1ca47d3dfa3995ad343d79e471f8d3d9b73bddb6"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (Col M Q Q /\\ Col A B Q /\\ Col A B E /\\ Per E Q M)) by (conclude_def Perp_at );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "759b14ccde008d74da1180f5e680b3a0d2f7f0ff"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq M Q).",
                        "VernacExtend",
                        "5881b9e7cb41df8c32b832ccf5cb1ea38f815bdc"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B M) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "508360a16f6231b0a25d184e8578a6b33c3cd40a"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q M) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "6fe681d319d974570a36cf320ba86a41b7482f12"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (conclude_def Col ).",
                        "VernacExtend",
                        "f3d4ff9f932d6fc74e273c31f7e3cc76be423f52"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A E) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7d8a81edfc37556bec3712d2e7f3d1754b2593f6"
                    ]
                },
                {
                    "command": [
                        "assert (Col B A C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "31b8c23c71769cdc91e8b8f8a630a2ce0bfb6516"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq C Q).",
                        "VernacExtend",
                        "158c632c17833fe831043b580d330f03927ccef8"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Per E C M) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "93b9e5f1d1eb7833b6abd2d7c772fcad345247b9"
                    ]
                },
                {
                    "command": [
                        "assert (Col A E C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "fa5a26aff77cb5a05481eb152f41c00b092b9a66"
                    ]
                },
                {
                    "command": [
                        "assert (Col E C A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "5f8f922854f481f296fb5d1b1962a85f3756b2d9"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C M) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "db94e871b7ce5a07a50e395dc71a9414ec141d06"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Col C Q E) by (conclude lemma_collinear5).",
                        "VernacExtend",
                        "2ef02621b614bfa21770f419f66148cb6d60174b"
                    ]
                },
                {
                    "command": [
                        "assert (Col E Q C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "96be3704a007951fe18cf71bef943a569f42c53f"
                    ]
                },
                {
                    "command": [
                        "assert (Per C Q M) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "d78dfe2982c76de5c55c501edabe9bbdd5a30278"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "b4691a91c9542eb9d309cd41361a33b3c937e74a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS Q G C /\\ Cong G Q G C)) by (conclude proposition_10);destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "12498716fcbd1c4a4501d7f7a79b0149ccd69524"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq M G).",
                        "VernacExtend",
                        "601efb2f492b6c9a32cec2537f4ecfd399b679dd"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS Q M C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "bc9e39ceff3349acc6e98e2ec65d18904d9f0b6b"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "fd4a8668ed487191ab81e2ea574eba2399cd0a24"
                    ]
                },
                {
                    "command": [
                        "assert (Col B Q C) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "122bcc18c45c8aea003a1bfaacf1293ccb8f5527"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q C M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "d87f5346990ea4f42cdeecc7a5c508c3e3df8312"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q C B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ca0a1bf91b78f1ea4bfe488806627f9b0e926cdf"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "229736231f3170cc4fec5236d37630fb8a3be718"
                    ]
                },
                {
                    "command": [
                        "assert (Col C M B) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "ed0e3bce29fd8f28d11282dead9046c9335f17c9"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c4e234e367413ef16013499457a5aa51ac86ab40"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "2fb748db5cf6487f38aa69b0c7b0694eb615be5e"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "7afd9e17666f6170d930709a4c01bc187dec111d"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M A) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "2e3e5ffcf63902dc370e9d6c503aac1624feff3f"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "fe9df6fbdbd046fef42c474de214649009067915"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS M G H /\\ Cong G H M G)) by (conclude lemma_extension);destruct Tf as [H];spliter.",
                        "VernacExtend",
                        "570fd7c85eae277583a7c6ace502f81692abb055"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M G G H) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "1596db9390f28e7abafd71869ccc9a93a90422a8"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint M G H) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "c07d56689841f29c71d69b79ce45824b4bb4e240"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q G G C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "7be7e604b8a1a1eb823f543c9138b74e8f87c95e"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint Q G C) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "283038c9631f0cf1208e22ebb23cc7a9c18bd078"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q G C) by (conclude_def Col ).",
                        "VernacExtend",
                        "cbc5b41ce4b957d01087bcc4c5823dda2cde8994"
                    ]
                },
                {
                    "command": [
                        "assert (Col C Q G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "2e0992c5f04f3c638fe0e48f752233818c6f276e"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q G) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "3b8ada5b17849ee8c9c41e1589c7a311dd6629a8"
                    ]
                },
                {
                    "command": [
                        "assert (neq G Q) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "8d0fd0722a30c0eb3be9ceb2e89bb627c9cee3be"
                    ]
                },
                {
                    "command": [
                        "assert (Per G Q M) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "aba814c0de028fa8eb6ba8523d28b349085f44b0"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists J, (BetS M Q J /\\ Cong Q J M Q)) by (conclude lemma_extension);destruct Tf as [J];spliter.",
                        "VernacExtend",
                        "f41cec95827dfa612939364740bd768e8a2de740"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M Q Q J) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "68071d67eeac36d3d86ba95dd69fe993822654af"
                    ]
                },
                {
                    "command": [
                        "assert (Per M Q G) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "c4fe9131b0a420f3f298ed34ae254f8943bbb289"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M G J G) by (conclude lemma_rightreverse).",
                        "VernacExtend",
                        "9780aaf58d110d5fc8ebd2350761109a7427ba80"
                    ]
                },
                {
                    "command": [
                        "assert (BetS J Q M) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "cb77985bca006c5c023d8e0d18422fb24ae6ac64"
                    ]
                },
                {
                    "command": [
                        "assert (Cong J Q M Q) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "dcac5befe8fe5cea72496811bf93bfe915678cc6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong J G M G) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "7a5750f95a1f06cf0bb2630d5018f77dbfdef92a"
                    ]
                },
                {
                    "command": [
                        "assert (Per J Q G) by (conclude_def Per ).",
                        "VernacExtend",
                        "65a36f96979476a62479ccf9998c3051900035ca"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq J G).",
                        "VernacExtend",
                        "1e56a5646881a6a0d1b69f804ce4bdf0a6c5997f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col J Q G) by (conclude_def Col ).",
                        "VernacExtend",
                        "1f2d28c17f5eed72f35731ff18e4f26803887a79"
                    ]
                },
                {
                    "command": [
                        "assert (nCol J Q G) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "d212758b5b46f2b9428e660919626daba709b3d0"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (BetS J G K /\\ Cong G K J G)) by (conclude lemma_extension);destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "e0b7d5fb0edc88efb8a6bda7c3dab8596577a192"
                    ]
                },
                {
                    "command": [
                        "assert (Cong J G G K) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "1e3e655f0d273dd73994a2045be450cc0f100987"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint J G K) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "89bfa4fbd0f1b6aa0688fbd93ca9444377e78199"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M Q H C) by (conclude lemma_pointreflectionisometry).",
                        "VernacExtend",
                        "ba877de0e0495174e7d1a598fe198652619d6573"
                    ]
                },
                {
                    "command": [
                        "assert (neq J Q) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "390660a671acf5c7b16a287abf86e5a09581d4b0"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q J) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "e9c07fd622992f749da485381052b715866eefc5"
                    ]
                },
                {
                    "command": [
                        "assert (neq M J) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "0b8d720fafe39e1f67248c69b5c229fddfe7a768"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q J C K) by (conclude lemma_pointreflectionisometry).",
                        "VernacExtend",
                        "005306e80caf219e8a1811f5cbe389c08d193441"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M J H K) by (conclude lemma_pointreflectionisometry).",
                        "VernacExtend",
                        "a894ff2b0bc1bfb48f4e02a165043ad4e7a9840e"
                    ]
                },
                {
                    "command": [
                        "assert (BetS H C K) by (conclude lemma_betweennesspreserved).",
                        "VernacExtend",
                        "b1819f7974ee8c899a24eab1e2deee9d9d949d9d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H G G M) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "991c2484b726cfe511f89ee31f4c7cd091f1d6b2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G M J G) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "19b2de72722a508206d37ba23d846a4de5523824"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H G J G) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "0bfedbfd9e6ee311e69bc6911f0a8d4f3abe580f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong J G G K) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "1e3e655f0d273dd73994a2045be450cc0f100987"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H G G K) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "4696292974181bc837e04c85dd1de8396324693a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H G K G) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "0929e470bd0fe0f35b1210d33d94a1337317a75c"
                    ]
                },
                {
                    "command": [
                        "assert (neq G C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H C M Q) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "187cd3d9d64963f30ddb93d9be593117a697893c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M Q Q J) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "68071d67eeac36d3d86ba95dd69fe993822654af"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H C Q J) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "ed38e57cb1bbf32936d9e4d40d28a6010fad90e4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H C C K) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "b98814e05866be7f723cc9aa1ee9dca851c741dd"
                    ]
                },
                {
                    "command": [
                        "assert (Cong H C K C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "437d4cf98a43440467afc796f5c149aff8216580"
                    ]
                },
                {
                    "command": [
                        "assert (neq G C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "63dd458d3b8a273f0a5fdd40789229c1f65e7e1a"
                    ]
                },
                {
                    "command": [
                        "assert (neq C G) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "65eb5aeb5fb5f688314a130b770611d49f86d4e7"
                    ]
                },
                {
                    "command": [
                        "assert (Per H C G) by (conclude_def Per ).",
                        "VernacExtend",
                        "fd0ae307a13226511c7aefc0fd48d2152c815139"
                    ]
                },
                {
                    "command": [
                        "assert (Per G C H) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "4a48f7ebbc92d85dc7f7250cc002ea9fb04d58d1"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B A) by (conclude_def Col ).",
                        "VernacExtend",
                        "7fe661a35be4052e3e351decefc3e023ccdb88ad"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q C A) by (conclude lemma_collinear5).",
                        "VernacExtend",
                        "9d15b0f3e8c824d0c16ace6b84545e55982997f1"
                    ]
                },
                {
                    "command": [
                        "assert (Col Q C G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "aabae7f9c9fd7107399d96a0f2362845825ab4ce"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A G) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "91bbcc8eb00b16ee8fd5ff716f78267e5922e1f8"
                    ]
                },
                {
                    "command": [
                        "assert (Col G C A) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3b1b21b9c9ffa6d5aacf98e1b973145d5993d55b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "9ccac948939c7ef6427ba87db5086f0baccd3662"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C H) by (conclude lemma_collinearright).",
                        "VernacExtend",
                        "2a73c87220a9582a7f013204082c43a06539571e"
                    ]
                },
                {
                    "command": [
                        "assert (Col C A B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "d35ebb1043dd7432ad79ad3ae0470fa825b1f871"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
                    ]
                },
                {
                    "command": [
                        "assert (Col A G B) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "7d7f66933956c989084c4017470eb0e6edcd56d5"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B G) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a8c97d860e0a3d798f8aa055ea9a373034990276"
                    ]
                },
                {
                    "command": [
                        "assert (OS P M A B) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "5881aeed3cd11c972f4901cb93e2d8d6d8103f23"
                    ]
                },
                {
                    "command": [
                        "assert (TS M A B H) by (conclude_def TS ).",
                        "VernacExtend",
                        "ffbe87bc6d2be97cec9476c7fb9a8884be3d3905"
                    ]
                },
                {
                    "command": [
                        "assert (TS P A B H) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "e35d421326b88a890b679e31f7f6f9da045398f2"
                    ]
                },
                {
                    "command": [
                        "assert (TS H A B P) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "98c7b9c8c11e0c13a459767f56e021577d6c1eda"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}