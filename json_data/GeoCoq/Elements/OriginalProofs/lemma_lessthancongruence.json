{
    "filename": "Elements/OriginalProofs/lemma_lessthancongruence.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_extension.",
            "VernacRequire",
            "7a395274ff58b809e27cefedbbe9b45804acec33"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_betweennesspreserved.",
            "VernacRequire",
            "214aafc96dcc534d4527975611353b664081ec66"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax1:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "8fa44f4771a9528e103d9f2054b77606cde8225f"
        ],
        [
            "Lemma lemma_lessthancongruence : forall A B C D E F, Lt A B C D -> Cong C D E F -> Lt A B E F.",
            "VernacStartTheoremProof",
            "d6c8f7108a42cc24964e608bea68455335af4e83"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (BetS C G D /\\ Cong C G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
            "VernacExtend",
            "99a21950ff3e34eaa4d5629700a776bfb7e88b0c"
        ],
        [
            "assert (neq C D) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ec8ed20fd91c966709071dfab476d123976a3733"
        ],
        [
            "assert (neq E F) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "9582be2f799cedc4cac961a80fd5ab49d3b1adf7"
        ],
        [
            "assert (~ eq F E).",
            "VernacExtend",
            "e755adcf32147043d6dcf274a56ae921e8c4cfa5"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (eq E F) by (conclude lemma_equalitysymmetric).",
            "VernacExtend",
            "ea51642636251ca395de5a5dc3bd3e959a4f8def"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (BetS F E P /\\ Cong E P F E)) by (conclude lemma_extension);destruct Tf as [P];spliter.",
            "VernacExtend",
            "7c961ab8eeae44f37f8785b47de60c3007da0fd7"
        ],
        [
            "assert (BetS P E F) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "42fa25c957c5f9aca2894abcc4449324b2ef0684"
        ],
        [
            "assert (neq P E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a77e630f6c3f95dddf7d654915904777b97f8390"
        ],
        [
            "assert (neq C G) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "fdfa8129cc6959925f83269b6da8d85fc4b0b7b8"
        ],
        [
            "assert (neq A B) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "74b3f358aec9dccdf56a2e00fbcb86d09560bd9f"
        ],
        [
            "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P E H /\\ Cong E H A B)) by (conclude lemma_extension);destruct Tf as [H];spliter.",
            "VernacExtend",
            "7f90f7cb6eeee5a15b242b29b02ad325aea8aef6"
        ],
        [
            "assert (~ eq D C).",
            "VernacExtend",
            "882f84790e5a10c12d952aded87f171c8926ada1"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS C G C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "a8679044285fa22abc5e9a0f1d2d97a94e53d5dc"
        ],
        [
            "assert (~ BetS C G C) by (conclude axiom_betweennessidentity).",
            "VernacExtend",
            "a43fbac8152c475e9fb9a0139b12c9c4a440c994"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq P E) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "a77e630f6c3f95dddf7d654915904777b97f8390"
        ],
        [
            "assert (neq E P) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "b9c7d078a627f3d03166f07e4f8744f3b15f4878"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, (BetS D C Q /\\ Cong C Q E P)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
            "VernacExtend",
            "1e1cf7e36daabd7c2206001bec1375a254680014"
        ],
        [
            "assert (BetS Q C D) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "81cb28a884a4a219ffa49b205fb2131e5ab67919"
        ],
        [
            "assert (Cong Q C C Q) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "84050d9f9f485840a88f113421c6cae9be30bb1f"
        ],
        [
            "assert (Cong Q C E P) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "2781c0a72f1efa0caba05fc15d553acce30111cc"
        ],
        [
            "assert (Cong E P P E) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "80eaf895c65bc9e37f395455099fa0fc933eed68"
        ],
        [
            "assert (Cong Q C P E) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "482d7485759065cdebb279fca4bbd58dc755a483"
        ],
        [
            "assert (Cong Q D P F) by (conclude cn_sumofparts).",
            "VernacExtend",
            "3db862a4def3458f174ef94320a6d292051a71b4"
        ],
        [
            "assert (Cong A B E H) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "f540c5ef327da60bc7c92c59a37ee1e4569bc560"
        ],
        [
            "assert (Cong C G E H) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "e9c25e1852d0886d64085cd9852e7d185e6e04f9"
        ],
        [
            "assert (BetS Q C G) by (conclude axiom_innertransitivity).",
            "VernacExtend",
            "6ce17013cdba87106966a10dd772cae5cc695a48"
        ],
        [
            "assert (Cong D G F H) by (conclude axiom_5_line).",
            "VernacExtend",
            "7f3e2655f066b4541224f53640e4d47fc88189d0"
        ],
        [
            "assert (Cong G D H F) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "5c9bbb9a064f4a925bc3c2493be74348a930507b"
        ],
        [
            "assert (BetS E H F) by (conclude lemma_betweennesspreserved).",
            "VernacExtend",
            "0e6d6014057dbe527eb1834045dbaff0c4cc5ab1"
        ],
        [
            "assert (Lt A B E F) by (conclude_def Lt ).",
            "VernacExtend",
            "cd0ce9b0bdc9f2c7e73715b995ed35ffcea3569c"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_lessthancongruence",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (BetS C G D /\\ Cong C G A B)) by (conclude_def Lt );destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "99a21950ff3e34eaa4d5629700a776bfb7e88b0c"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ec8ed20fd91c966709071dfab476d123976a3733"
                    ]
                },
                {
                    "command": [
                        "assert (neq E F) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "9582be2f799cedc4cac961a80fd5ab49d3b1adf7"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq F E).",
                        "VernacExtend",
                        "e755adcf32147043d6dcf274a56ae921e8c4cfa5"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (eq E F) by (conclude lemma_equalitysymmetric).",
                        "VernacExtend",
                        "ea51642636251ca395de5a5dc3bd3e959a4f8def"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (BetS F E P /\\ Cong E P F E)) by (conclude lemma_extension);destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "7c961ab8eeae44f37f8785b47de60c3007da0fd7"
                    ]
                },
                {
                    "command": [
                        "assert (BetS P E F) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "42fa25c957c5f9aca2894abcc4449324b2ef0684"
                    ]
                },
                {
                    "command": [
                        "assert (neq P E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a77e630f6c3f95dddf7d654915904777b97f8390"
                    ]
                },
                {
                    "command": [
                        "assert (neq C G) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "fdfa8129cc6959925f83269b6da8d85fc4b0b7b8"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "74b3f358aec9dccdf56a2e00fbcb86d09560bd9f"
                    ]
                },
                {
                    "command": [
                        "rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P E H /\\ Cong E H A B)) by (conclude lemma_extension);destruct Tf as [H];spliter.",
                        "VernacExtend",
                        "7f90f7cb6eeee5a15b242b29b02ad325aea8aef6"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq D C).",
                        "VernacExtend",
                        "882f84790e5a10c12d952aded87f171c8926ada1"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C G C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "a8679044285fa22abc5e9a0f1d2d97a94e53d5dc"
                    ]
                },
                {
                    "command": [
                        "assert (~ BetS C G C) by (conclude axiom_betweennessidentity).",
                        "VernacExtend",
                        "a43fbac8152c475e9fb9a0139b12c9c4a440c994"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq P E) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "a77e630f6c3f95dddf7d654915904777b97f8390"
                    ]
                },
                {
                    "command": [
                        "assert (neq E P) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "b9c7d078a627f3d03166f07e4f8744f3b15f4878"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, (BetS D C Q /\\ Cong C Q E P)) by (conclude lemma_extension);destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "1e1cf7e36daabd7c2206001bec1375a254680014"
                    ]
                },
                {
                    "command": [
                        "assert (BetS Q C D) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "81cb28a884a4a219ffa49b205fb2131e5ab67919"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q C C Q) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "84050d9f9f485840a88f113421c6cae9be30bb1f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q C E P) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "2781c0a72f1efa0caba05fc15d553acce30111cc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E P P E) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "80eaf895c65bc9e37f395455099fa0fc933eed68"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q C P E) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "482d7485759065cdebb279fca4bbd58dc755a483"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q D P F) by (conclude cn_sumofparts).",
                        "VernacExtend",
                        "3db862a4def3458f174ef94320a6d292051a71b4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B E H) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "f540c5ef327da60bc7c92c59a37ee1e4569bc560"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C G E H) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "e9c25e1852d0886d64085cd9852e7d185e6e04f9"
                    ]
                },
                {
                    "command": [
                        "assert (BetS Q C G) by (conclude axiom_innertransitivity).",
                        "VernacExtend",
                        "6ce17013cdba87106966a10dd772cae5cc695a48"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D G F H) by (conclude axiom_5_line).",
                        "VernacExtend",
                        "7f3e2655f066b4541224f53640e4d47fc88189d0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G D H F) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "5c9bbb9a064f4a925bc3c2493be74348a930507b"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E H F) by (conclude lemma_betweennesspreserved).",
                        "VernacExtend",
                        "0e6d6014057dbe527eb1834045dbaff0c4cc5ab1"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B E F) by (conclude_def Lt ).",
                        "VernacExtend",
                        "cd0ce9b0bdc9f2c7e73715b995ed35ffcea3569c"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}