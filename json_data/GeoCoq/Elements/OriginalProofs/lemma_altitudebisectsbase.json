{
    "filename": "Elements/OriginalProofs/lemma_altitudebisectsbase.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_8_2.",
            "VernacRequire",
            "e9abf66a9a3cf17ce9402c70267a3e30baf0bce3"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_8_3.",
            "VernacRequire",
            "374b4fbea78c394bdfbf28739cbbfb33ede1a8b6"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_altitudebisectsbase : forall A B M P, BetS A M B -> Cong A P B P -> Per A M P -> Midpoint A M B.",
            "VernacStartTheoremProof",
            "d6f922c1649c2a93c8a69476b2ae951a9105e343"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists C, (BetS A M C /\\ Cong A M C M /\\ Cong A P C P /\\ neq M P)) by (conclude_def Per );destruct Tf as [C];spliter.",
            "VernacExtend",
            "10f1d9c10c7f248980d835e9065bdd4cb216e453"
        ],
        [
            "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "77015f0993e40948997a4b78deeaea35782ca11f"
        ],
        [
            "assert (Cong C M A M) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0f833744236185b1f54b2d195d80c5fa06be0a70"
        ],
        [
            "assert (Cong C P A P) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "6a5ead00f830c59ad49aabbc893f856fcc5597ed"
        ],
        [
            "assert (Per C M P) by (conclude_def Per ).",
            "VernacExtend",
            "8cd57b1231ae7c0fa53e59f00ebee2db17e0fd6c"
        ],
        [
            "assert (Per P M A) by (conclude lemma_8_2).",
            "VernacExtend",
            "0962b8b59a60ed718187c67af13e2433985d3323"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists Q, (BetS P M Q /\\ Cong P M Q M /\\ Cong P A Q A /\\ neq M A)) by (conclude_def Per );destruct Tf as [Q];spliter.",
            "VernacExtend",
            "659fc4f444089c28d18da5f3041c5ea1046f8988"
        ],
        [
            "assert (Cong Q M P M) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b63e77fe16eeffa15cf7417cf296d68cbf183655"
        ],
        [
            "assert (Per P M C) by (conclude lemma_8_2).",
            "VernacExtend",
            "e5bd62600835dcdc5886b104fb4dcf49a6d81d32"
        ],
        [
            "assert (Out M C B) by (conclude_def Out ).",
            "VernacExtend",
            "6498d021d2163e3d4b0eeea27bf5e98451aa001d"
        ],
        [
            "assert (Per P M B) by (conclude lemma_8_3).",
            "VernacExtend",
            "60e6868b3af15ff86505114b1e4742c7a634b920"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS P M E /\\ Cong P M E M /\\ Cong P B E B /\\ neq M B)) by (conclude_def Per );destruct Tf as [E];spliter.",
            "VernacExtend",
            "2ed1b3ea6601d4cf8b5c2d8f249c7a4f0a675a77"
        ],
        [
            "assert (Cong P A P B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "3856b615f2842d9bcfe9fc8b27081b9f1a8967d1"
        ],
        [
            "assert (Cong M Q P M) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "18b5e44b32fcccf01968864c947c67e9ff5d95d0"
        ],
        [
            "assert (Cong P M M Q) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "1cb9416cf7685b9e75a8bb9a4bfc17df0e9269bc"
        ],
        [
            "assert (Cong E M P M) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a6411f76e456d3643abccab9c4f1ba6136e411bd"
        ],
        [
            "assert (Cong E M M Q) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "53a9717423257a7ea8bab824e1b6adbb6414a4c6"
        ],
        [
            "assert (Cong M E M Q) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "70a8481eaaf566e7ec785c43e4b1e3cedf3ff103"
        ],
        [
            "assert (Cong M Q M E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "3a20b1430d9bce7f90ef86ceb01854b8a9d2ad98"
        ],
        [
            "assert (neq P M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "e233598c09bc124cf8bff5e031aef8c7f362f038"
        ],
        [
            "assert (eq Q E) by (conclude lemma_extensionunique).",
            "VernacExtend",
            "47403faa0949a142b64edb3c31a8e3a40a52ad25"
        ],
        [
            "assert (Cong P B Q B) by (conclude cn_equalitysub).",
            "VernacExtend",
            "0d5a980c47fdbdccca73383445bbf7de29c07d7f"
        ],
        [
            "assert (Cong A P P B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "23b7774bfaa161fe9de7f6383527b8705750bfcf"
        ],
        [
            "assert (Cong A P Q B) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "73659292ea841397832daed586bbb44e7fbf7611"
        ],
        [
            "assert (Cong A Q A P) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "e3f072ec45d77ae93082c0565b69aafa6bf30aea"
        ],
        [
            "assert (Cong A Q Q B) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "7fd24dcd09f5b410dc00538e54d19e10808d10ff"
        ],
        [
            "assert (Cong A Q B Q) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "5c09df49c63a828d1f72316eef0efc9aa036d2f6"
        ],
        [
            "assert (Cong P Q P Q) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "0594440ae4fe8c0eb9ed4eac4facdfc8aba7312a"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (nCol A M P) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "355d6736215ed604246a7d0711f4d71bf11ed044"
        ],
        [
            "assert (~ Col A P M).",
            "VernacExtend",
            "1884bbeb8dce6595787a58dd19e0f3d6c188e6d4"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A M P) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "ab3657d867a553119fd0a55c12cf6e2a81374bc9"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ eq A P).",
            "VernacExtend",
            "c6df804058cf29701492dcc856cddbfdfc04ddae"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A P M) by (conclude_def Col ).",
            "VernacExtend",
            "1871f0351768267b2a4b935bea4481025c252a69"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (neq P A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "89aef120537308b48b9a13e0f2c13e1e6d648441"
        ],
        [
            "assert (Out P A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "c9cff85183df1eef2077f124014082801167b367"
        ],
        [
            "assert (~ eq P B).",
            "VernacExtend",
            "450d2d959e4cb9be90481efa025495b6fb5b4fd5"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Cong A P B B) by (conclude cn_equalitysub).",
            "VernacExtend",
            "da992ef6a75e68499e67e12d0a0be8fe383932b2"
        ],
        [
            "assert (~ neq A P).",
            "VernacExtend",
            "2e03d84c2b9f8741d36f0c367be7fee55a4cbecd"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (neq B B) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "c1b735bd03854773d8791c80605d6a00c164046e"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Out P B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "596749273a69793b1f4028582ab8420cb67b382d"
        ],
        [
            "assert (Out P M Q) by (conclude lemma_ray4).",
            "VernacExtend",
            "c6b72f787835e1da69ebf5fafc31100ee4ec44be"
        ],
        [
            "assert (CongA A P M B P M) by (conclude_def CongA ).",
            "VernacExtend",
            "3f517616587b0a10ccedba3044c0e3047c922ea4"
        ],
        [
            "assert (Cong P M P M) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "adb0740b00dff7e22e14bd72478eece4210b8e0b"
        ],
        [
            "assert ((Cong A M B M /\\ CongA P A M P B M /\\ CongA P M A P M B)) by (conclude proposition_04).",
            "VernacExtend",
            "acc0a628426ab50c646ae869a8fb2523f981d76f"
        ],
        [
            "assert (Cong A M M B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "5557da7f89380a4191e0dc85a4cea334106674cb"
        ],
        [
            "assert (Midpoint A M B) by (conclude_def Midpoint ).",
            "VernacExtend",
            "7c1918150559972f05d3b5059ec4a6c38d72a8b2"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_altitudebisectsbase",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists C, (BetS A M C /\\ Cong A M C M /\\ Cong A P C P /\\ neq M P)) by (conclude_def Per );destruct Tf as [C];spliter.",
                        "VernacExtend",
                        "10f1d9c10c7f248980d835e9065bdd4cb216e453"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "77015f0993e40948997a4b78deeaea35782ca11f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C M A M) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0f833744236185b1f54b2d195d80c5fa06be0a70"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C P A P) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "6a5ead00f830c59ad49aabbc893f856fcc5597ed"
                    ]
                },
                {
                    "command": [
                        "assert (Per C M P) by (conclude_def Per ).",
                        "VernacExtend",
                        "8cd57b1231ae7c0fa53e59f00ebee2db17e0fd6c"
                    ]
                },
                {
                    "command": [
                        "assert (Per P M A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "0962b8b59a60ed718187c67af13e2433985d3323"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists Q, (BetS P M Q /\\ Cong P M Q M /\\ Cong P A Q A /\\ neq M A)) by (conclude_def Per );destruct Tf as [Q];spliter.",
                        "VernacExtend",
                        "659fc4f444089c28d18da5f3041c5ea1046f8988"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q M P M) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b63e77fe16eeffa15cf7417cf296d68cbf183655"
                    ]
                },
                {
                    "command": [
                        "assert (Per P M C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "e5bd62600835dcdc5886b104fb4dcf49a6d81d32"
                    ]
                },
                {
                    "command": [
                        "assert (Out M C B) by (conclude_def Out ).",
                        "VernacExtend",
                        "6498d021d2163e3d4b0eeea27bf5e98451aa001d"
                    ]
                },
                {
                    "command": [
                        "assert (Per P M B) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "60e6868b3af15ff86505114b1e4742c7a634b920"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS P M E /\\ Cong P M E M /\\ Cong P B E B /\\ neq M B)) by (conclude_def Per );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "2ed1b3ea6601d4cf8b5c2d8f249c7a4f0a675a77"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P A P B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "3856b615f2842d9bcfe9fc8b27081b9f1a8967d1"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M Q P M) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "18b5e44b32fcccf01968864c947c67e9ff5d95d0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P M M Q) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "1cb9416cf7685b9e75a8bb9a4bfc17df0e9269bc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E M P M) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a6411f76e456d3643abccab9c4f1ba6136e411bd"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E M M Q) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "53a9717423257a7ea8bab824e1b6adbb6414a4c6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M E M Q) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "70a8481eaaf566e7ec785c43e4b1e3cedf3ff103"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M Q M E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "3a20b1430d9bce7f90ef86ceb01854b8a9d2ad98"
                    ]
                },
                {
                    "command": [
                        "assert (neq P M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "e233598c09bc124cf8bff5e031aef8c7f362f038"
                    ]
                },
                {
                    "command": [
                        "assert (eq Q E) by (conclude lemma_extensionunique).",
                        "VernacExtend",
                        "47403faa0949a142b64edb3c31a8e3a40a52ad25"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P B Q B) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "0d5a980c47fdbdccca73383445bbf7de29c07d7f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A P P B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "23b7774bfaa161fe9de7f6383527b8705750bfcf"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A P Q B) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "73659292ea841397832daed586bbb44e7fbf7611"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A Q A P) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "e3f072ec45d77ae93082c0565b69aafa6bf30aea"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A Q Q B) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "7fd24dcd09f5b410dc00538e54d19e10808d10ff"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A Q B Q) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "5c09df49c63a828d1f72316eef0efc9aa036d2f6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P Q P Q) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "0594440ae4fe8c0eb9ed4eac4facdfc8aba7312a"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A M P) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "355d6736215ed604246a7d0711f4d71bf11ed044"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A P M).",
                        "VernacExtend",
                        "1884bbeb8dce6595787a58dd19e0f3d6c188e6d4"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A M P) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "ab3657d867a553119fd0a55c12cf6e2a81374bc9"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq A P).",
                        "VernacExtend",
                        "c6df804058cf29701492dcc856cddbfdfc04ddae"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A P M) by (conclude_def Col ).",
                        "VernacExtend",
                        "1871f0351768267b2a4b935bea4481025c252a69"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (neq P A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "89aef120537308b48b9a13e0f2c13e1e6d648441"
                    ]
                },
                {
                    "command": [
                        "assert (Out P A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c9cff85183df1eef2077f124014082801167b367"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq P B).",
                        "VernacExtend",
                        "450d2d959e4cb9be90481efa025495b6fb5b4fd5"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A P B B) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "da992ef6a75e68499e67e12d0a0be8fe383932b2"
                    ]
                },
                {
                    "command": [
                        "assert (~ neq A P).",
                        "VernacExtend",
                        "2e03d84c2b9f8741d36f0c367be7fee55a4cbecd"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (neq B B) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "c1b735bd03854773d8791c80605d6a00c164046e"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Out P B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "596749273a69793b1f4028582ab8420cb67b382d"
                    ]
                },
                {
                    "command": [
                        "assert (Out P M Q) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c6b72f787835e1da69ebf5fafc31100ee4ec44be"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A P M B P M) by (conclude_def CongA ).",
                        "VernacExtend",
                        "3f517616587b0a10ccedba3044c0e3047c922ea4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P M P M) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "adb0740b00dff7e22e14bd72478eece4210b8e0b"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A M B M /\\ CongA P A M P B M /\\ CongA P M A P M B)) by (conclude proposition_04).",
                        "VernacExtend",
                        "acc0a628426ab50c646ae869a8fb2523f981d76f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A M M B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "5557da7f89380a4191e0dc85a4cea334106674cb"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint A M B) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "7c1918150559972f05d3b5059ec4a6c38d72a8b2"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}