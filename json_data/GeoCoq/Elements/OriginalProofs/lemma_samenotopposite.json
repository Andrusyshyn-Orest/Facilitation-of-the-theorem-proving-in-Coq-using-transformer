{
    "filename": "Elements/OriginalProofs/lemma_samenotopposite.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidesymmetric.",
            "VernacRequire",
            "4e53dc1ad6a9b7ecc717014b7170451fe48f6c43"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_planeseparation.",
            "VernacRequire",
            "dfb172c878e868c4e95a00e2960ea7a0533a4c16"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_samenotopposite : forall A B C D, OS A B C D -> ~ TS A C D B.",
            "VernacStartTheoremProof",
            "79b351286ac24347783a27a01dafcf84cfcad3ad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (OS B A C D) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "718f0380d5de31c52f71f83d64effa2e6a5fa6ce"
        ],
        [
            "assert (~ TS A C D B).",
            "VernacExtend",
            "981770fad4c679bf29caadc10368537e01cf93ae"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (TS B C D B) by (conclude lemma_planeseparation).",
            "VernacExtend",
            "b3988da7a010c716213bbc54a14925d13159ff97"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, BetS B M B) by (conclude_def TS );destruct Tf as [M];spliter.",
            "VernacExtend",
            "333fe251877703cd1803a36dd831a5a4bb99ea24"
        ],
        [
            "assert (~ BetS B M B) by (conclude axiom_betweennessidentity).",
            "VernacExtend",
            "2cea09722ef0653544109c2d277f8ca708523f14"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_samenotopposite",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (OS B A C D) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "718f0380d5de31c52f71f83d64effa2e6a5fa6ce"
                    ]
                },
                {
                    "command": [
                        "assert (~ TS A C D B).",
                        "VernacExtend",
                        "981770fad4c679bf29caadc10368537e01cf93ae"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (TS B C D B) by (conclude lemma_planeseparation).",
                        "VernacExtend",
                        "b3988da7a010c716213bbc54a14925d13159ff97"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, BetS B M B) by (conclude_def TS );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "333fe251877703cd1803a36dd831a5a4bb99ea24"
                    ]
                },
                {
                    "command": [
                        "assert (~ BetS B M B) by (conclude axiom_betweennessidentity).",
                        "VernacExtend",
                        "2cea09722ef0653544109c2d277f8ca708523f14"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}