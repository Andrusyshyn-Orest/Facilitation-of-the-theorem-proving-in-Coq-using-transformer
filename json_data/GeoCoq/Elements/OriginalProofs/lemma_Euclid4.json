{
    "filename": "Elements/OriginalProofs/lemma_Euclid4.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_20.",
            "VernacRequire",
            "f3b3b2cebd8ae9e572b7319bcb7831f571f27732"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_TGflip.",
            "VernacRequire",
            "6de86c086cfa11678cbbc168bd6e95ecf5796922"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_TGsymmetric.",
            "VernacRequire",
            "084bd7a9e4ac03a7a97e28d8ffce34f7d86e085a"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_22.",
            "VernacRequire",
            "71b762aafbe3a929249422ab9e7b015f6fd2531b"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_10_12.",
            "VernacRequire",
            "1018b926b2fb028b36a964bae3e697e1d6533d01"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_Euclid4 : forall A B C a b c, Per A B C -> Per a b c -> CongA A B C a b c.",
            "VernacStartTheoremProof",
            "0751ab8d5fa6b38fdbc99d938abe8b1fd85786d2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.",
            "VernacExtend",
            "21b3c47fc268fc66c06c7322b043d48b4fd5bff5"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.",
            "VernacExtend",
            "c3119d0b602d34df2d55d8a2ad2c04ffc5b699bb"
        ],
        [
            "assert (neq a b) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "ae5f820355494726092373e744009534b50c4ddc"
        ],
        [
            "assert (neq b a) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d3f7b3d00cb58bd6a64b833e947d6b23e946dcca"
        ],
        [
            "assert (neq A B) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "729d99d00883cb65929e87e6a48ea0634ac9dc68"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.",
            "VernacExtend",
            "5c6d62a0d51c4b7f20b0cbca3febdff1ef7b8916"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.",
            "VernacExtend",
            "c4f3e22fe7af8624520ac55720cc837e51cb6abb"
        ],
        [
            "assert (Per a b q) by (conclude lemma_8_3).",
            "VernacExtend",
            "82fea0211daa627d0e4407f6531cac4234564f87"
        ],
        [
            "assert (Per q b a) by (conclude lemma_8_2).",
            "VernacExtend",
            "ae9454eb3aa772104c31b9ab21d7e2eefcd2b6fd"
        ],
        [
            "assert (Per q b p) by (conclude lemma_8_3).",
            "VernacExtend",
            "04df684a54b02a734bf6031ca2a7d8fec196ecd4"
        ],
        [
            "assert (Per p b q) by (conclude lemma_8_2).",
            "VernacExtend",
            "15cc99d81f3a10e6e3307d2a6f76a285c00f5581"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.",
            "VernacExtend",
            "1d1d1d090f2a63722605c8dd976fc3a296bb6598"
        ],
        [
            "assert (Cong q p q r) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "f00fd3301af81e35d31bad8e52bf85b570267d4a"
        ],
        [
            "assert (nCol p b q) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "3a570bd3c4ffb640a80ca845420bce622b2913a6"
        ],
        [
            "assert (~ Col b q p).",
            "VernacExtend",
            "986aafe1cfa108e6a67e386d85e12d1f66dee2b5"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col p b q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a4a29f96bf7598fc9b5e583322b4d9f7855854e3"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ Col q p b).",
            "VernacExtend",
            "4aa4e8f39f439b7b7ac5315409e93cd0a8b7d331"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col p b q) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "a4a29f96bf7598fc9b5e583322b4d9f7855854e3"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Triangle p b q) by (conclude_def Triangle ).",
            "VernacExtend",
            "5f3d4960b3edd8829b871b48f29b839ffde58631"
        ],
        [
            "assert (Triangle b q p) by (conclude_def Triangle ).",
            "VernacExtend",
            "f72d6026fff40f67e910b940058bbd86177f7563"
        ],
        [
            "assert (Triangle q p b) by (conclude_def Triangle ).",
            "VernacExtend",
            "6a57f689e8cf70e045421b7cede911c58bfbf53e"
        ],
        [
            "assert (TG b p p q b q) by (conclude proposition_20).",
            "VernacExtend",
            "0727957f40d235c4349cacd71e2f397bb2fdd85a"
        ],
        [
            "assert (TG q b b p q p) by (conclude proposition_20).",
            "VernacExtend",
            "0e1982f24112e516733030967276f2a61929e79b"
        ],
        [
            "assert (TG p q q b p b) by (conclude proposition_20).",
            "VernacExtend",
            "3b8f1841ab2e79d2a4e8ba7a407c09ffbae7e48a"
        ],
        [
            "assert (TG b q b p q p) by (forward_using lemma_TGflip).",
            "VernacExtend",
            "1e40d379c1363d147e3cbfb49b6c064d8ccfac40"
        ],
        [
            "assert (TG b q b p p q) by (forward_using lemma_TGflip).",
            "VernacExtend",
            "07c57645a9ee75293e1fc133336dae3329184383"
        ],
        [
            "assert (TG q b p q p b) by (conclude lemma_TGsymmetric).",
            "VernacExtend",
            "e741d290932f05392cd7e2eaa96aac091033fc9a"
        ],
        [
            "assert (TG b q p q p b) by (forward_using lemma_TGflip).",
            "VernacExtend",
            "033b671cd8904bee141c4d4dc73d22498884240a"
        ],
        [
            "assert (TG b q p q b p) by (forward_using lemma_TGflip).",
            "VernacExtend",
            "23ef99fc31a8c9fd24772fb4f23cd354c74f5b5c"
        ],
        [
            "assert (TG b p p q q b) by (forward_using lemma_TGflip).",
            "VernacExtend",
            "f0a14570d095b623cc2db39af949e82462a0dc9a"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.",
            "VernacExtend",
            "82317bd1281c3a8e03c1fcd6da7cb118d63da062"
        ],
        [
            "assert (BetS D B A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "56f6aa1b1d4b21d0d5ab96243b99877c38a03a49"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Cong B E B A) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "dee42b316076ff22310afd522cd9173b462b0857"
        ],
        [
            "assert (eq E A) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "8cf050aced0a182df78031ebeea679419cccd822"
        ],
        [
            "assert (Cong B A b p) by (conclude cn_equalitysub).",
            "VernacExtend",
            "dae9aec24a9924cc26aab1a2b95ad95a462e58c7"
        ],
        [
            "assert (Cong A F p q) by (conclude cn_equalitysub).",
            "VernacExtend",
            "5bcf408d4ccdba848c5dd789295b2a26022689b6"
        ],
        [
            "assert (~ eq p b).",
            "VernacExtend",
            "68c10d096bd13b7358e29b9f65d80c7b3e76d364"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col p b q) by (conclude_def Col ).",
            "VernacExtend",
            "34d87284ec7b5c81ff0da6ef4becc8686675ac1f"
        ],
        [
            "assert (nCol p b q) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "3a570bd3c4ffb640a80ca845420bce622b2913a6"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Cong r b p b) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "33394b52324de9bd3cba0d1999d6357228f78702"
        ],
        [
            "assert (Cong b r p b) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "8e10c3ee6c0ef68aa562fc0f06ec20de3ba56df5"
        ],
        [
            "assert (Cong b p B E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "b23032d485519756cd11900c0f9e0251d2f45130"
        ],
        [
            "assert (neq b p) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "42bb7cf2faea31006af86a74891f6b54a06b024b"
        ],
        [
            "assert (Cong B A A B) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "ff97827ecde45fe0bf609cc9e02472a1c03a1a68"
        ],
        [
            "assert (Cong p b b r) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "7fa0590a9440ec4004b97b8ae446fdb529e2dfa6"
        ],
        [
            "assert (Cong p q r q) by (conclude lemma_rightreverse).",
            "VernacExtend",
            "32a9c021c6d83fafb9a91196273d1d87fcabf0e2"
        ],
        [
            "assert (Cong p b A B) by (forward_using lemma_doublereverse).",
            "VernacExtend",
            "85d49b16a125948e349e0496e02c9d28608dd096"
        ],
        [
            "assert (Cong b r p b) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "045c400968bbcbef04097610227375f62cc03bb9"
        ],
        [
            "assert (Cong b r A B) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "84b6f2ca225fee323e16fce1b523219b2708e41a"
        ],
        [
            "assert (Cong A B B D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "ad6fc7390168acf2282c6512d7082e7cdfb7f76c"
        ],
        [
            "assert (Cong b r B D) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "d6d8b77f338fd01ef739a2b5be28018fa500e1d3"
        ],
        [
            "assert (Cong b q B F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "396cd0ea7680c424d4224dcfa09d5787889dfa41"
        ],
        [
            "assert (Cong p q A F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "5b3ea1c0421d2b89e7fe093b5fc08b4c32458ce6"
        ],
        [
            "assert (Cong q r F D) by (conclude axiom_5_line).",
            "VernacExtend",
            "35f3caaa04c0d75af846e1c68116453545a005c3"
        ],
        [
            "assert (Cong A F r q) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "99bfb59c369f4b2a86956b8e92d03c6b3198ab37"
        ],
        [
            "assert (Cong A F q r) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "d487dffe86bf3a179657c56228d72d9bf84989a2"
        ],
        [
            "assert (Cong A F F D) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "7f22964d29a82c7f5417f29fc84a1e4bdad62a3c"
        ],
        [
            "assert (Cong A F D F) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "fe3719bf9c6ce78c6b425ff36ec2717ffab05a9d"
        ],
        [
            "assert (neq b q) by (conclude_def Per ).",
            "VernacExtend",
            "1f1e4543518be0eeeb3af76fd8c533a2780d4b0d"
        ],
        [
            "assert (Cong q b b q) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "1ed94c91f1d56fd031da20fcb947888b602585fc"
        ],
        [
            "assert (Cong q b B F) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "a8276ff645b3fe942c275ddc5073801974f7e2ff"
        ],
        [
            "assert (neq B F) by (conclude axiom_nocollapse).",
            "VernacExtend",
            "02da5aa7433f494aa9b2bfb3ce186c9722bcb392"
        ],
        [
            "assert (Per A B F) by (conclude_def Per ).",
            "VernacExtend",
            "3b7cb2c5627a84d8ff9e71bf5fe051dfa07d95b6"
        ],
        [
            "assert (Cong b q B F) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "396cd0ea7680c424d4224dcfa09d5787889dfa41"
        ],
        [
            "assert (Cong B C b q) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "03ad6d32fd3ad2c2d4952b07b9c7a4cafa0f82d1"
        ],
        [
            "assert (Cong B C B F) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "7665af30e6657bc796ff453e75503c0b77da4f7d"
        ],
        [
            "assert (Cong A C A F) by (conclude lemma_10_12).",
            "VernacExtend",
            "6da57c419a7f565ef961a375e386fadfa257632d"
        ],
        [
            "assert (eq F F) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Out B F F) by (conclude lemma_ray4).",
            "VernacExtend",
            "a3fdf4cd6853cccd57f607fa882e728270b367cf"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Cong B A B A) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "501dea04bd06be0aa7f4f464411dd482febe3981"
        ],
        [
            "assert (nCol A B C) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
        ],
        [
            "assert (CongA A B C A B F) by (conclude_def CongA ).",
            "VernacExtend",
            "605c21b32deb589eb2d7e2598883aa876510d4c3"
        ],
        [
            "assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).",
            "VernacExtend",
            "aded022177916f7e4435a874df64d10bc8cdea41"
        ],
        [
            "assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "0946556ba23c237ba37d07416aab61e79e79b4b8"
        ],
        [
            "assert (eq p p) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "8e39c422133003e1d1418196cf8815d39b52d4cf"
        ],
        [
            "assert (eq q q) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "1b2794cf48e80ec760579eace61c8ea4e105fdcb"
        ],
        [
            "assert (Out b p p) by (conclude lemma_ray4).",
            "VernacExtend",
            "5d5792176eb701043bf8c7a8e054c4dcbe5c131e"
        ],
        [
            "assert (Out b q q) by (conclude lemma_ray4).",
            "VernacExtend",
            "e5a1d987cf92288bab41e438f3c46899ce96e0ba"
        ],
        [
            "assert (Out B F F) by (conclude lemma_ray4).",
            "VernacExtend",
            "a3fdf4cd6853cccd57f607fa882e728270b367cf"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Cong B A b p) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "335341c3d2914304948d3be07aa28536a8d2260c"
        ],
        [
            "assert (Cong B A p b) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "6e16473da1414342615d43aaf5af0cc1666acea1"
        ],
        [
            "assert (nCol A B F) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "524b5484d041650103cd1b437855ad4ac64d236b"
        ],
        [
            "assert (CongA A B F p b q) by (conclude_def CongA ).",
            "VernacExtend",
            "837dd18e8973bb412ea5e76915f30dd1c885b652"
        ],
        [
            "assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "c996c0a34f9ae680a20c21d132f51c4b63b090d0"
        ],
        [
            "assert (nCol a b c) by (conclude lemma_rightangleNC).",
            "VernacExtend",
            "7e5cdd22ae6b36e1385cb3dd9498fbef3fb97c5d"
        ],
        [
            "assert (Out b p p) by (conclude lemma_ray4).",
            "VernacExtend",
            "5d5792176eb701043bf8c7a8e054c4dcbe5c131e"
        ],
        [
            "assert (Out b q q) by (conclude lemma_ray4).",
            "VernacExtend",
            "e5a1d987cf92288bab41e438f3c46899ce96e0ba"
        ],
        [
            "assert (Cong b p b p) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "2fc6291df6a9c6b35f854c6760a595556cc3c396"
        ],
        [
            "assert (Cong b q b q) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "1ebe020d8ce2318d78e7f6b446b6629bd9d3bc58"
        ],
        [
            "assert (Cong p q p q) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "cd08f4c6c491a51a9dfe8c879b71febd98c148c6"
        ],
        [
            "assert (CongA a b c p b q) by (conclude_def CongA ).",
            "VernacExtend",
            "e30d37f2b058134ff83a94660c7938de397cc754"
        ],
        [
            "assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "b674119bda8155ce22c3964203327310923e6123"
        ],
        [
            "assert (CongA A B C a b c) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "f15f84b6a54e72911f38406defea09dda113a59e"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_Euclid4",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists D, (BetS A B D /\\ Cong A B D B /\\ Cong A C D C /\\ neq B C)) by (conclude_def Per );destruct Tf as [D];spliter.",
                        "VernacExtend",
                        "21b3c47fc268fc66c06c7322b043d48b4fd5bff5"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists d, (BetS a b d /\\ Cong a b d b /\\ Cong a c d c /\\ neq b c)) by (conclude_def Per );destruct Tf as [d];spliter.",
                        "VernacExtend",
                        "c3119d0b602d34df2d55d8a2ad2c04ffc5b699bb"
                    ]
                },
                {
                    "command": [
                        "assert (neq a b) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "ae5f820355494726092373e744009534b50c4ddc"
                    ]
                },
                {
                    "command": [
                        "assert (neq b a) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d3f7b3d00cb58bd6a64b833e947d6b23e946dcca"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "729d99d00883cb65929e87e6a48ea0634ac9dc68"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists p, (Out b a p /\\ Cong b p B A)) by (conclude lemma_layoff);destruct Tf as [p];spliter.",
                        "VernacExtend",
                        "5c6d62a0d51c4b7f20b0cbca3febdff1ef7b8916"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists q, (Out b c q /\\ Cong b q B C)) by (conclude lemma_layoff);destruct Tf as [q];spliter.",
                        "VernacExtend",
                        "c4f3e22fe7af8624520ac55720cc837e51cb6abb"
                    ]
                },
                {
                    "command": [
                        "assert (Per a b q) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "82fea0211daa627d0e4407f6531cac4234564f87"
                    ]
                },
                {
                    "command": [
                        "assert (Per q b a) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "ae9454eb3aa772104c31b9ab21d7e2eefcd2b6fd"
                    ]
                },
                {
                    "command": [
                        "assert (Per q b p) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "04df684a54b02a734bf6031ca2a7d8fec196ecd4"
                    ]
                },
                {
                    "command": [
                        "assert (Per p b q) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "15cc99d81f3a10e6e3307d2a6f76a285c00f5581"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists r, (BetS p b r /\\ Cong p b r b /\\ Cong p q r q /\\ neq b q)) by (conclude_def Per );destruct Tf as [r];spliter.",
                        "VernacExtend",
                        "1d1d1d090f2a63722605c8dd976fc3a296bb6598"
                    ]
                },
                {
                    "command": [
                        "assert (Cong q p q r) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "f00fd3301af81e35d31bad8e52bf85b570267d4a"
                    ]
                },
                {
                    "command": [
                        "assert (nCol p b q) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "3a570bd3c4ffb640a80ca845420bce622b2913a6"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col b q p).",
                        "VernacExtend",
                        "986aafe1cfa108e6a67e386d85e12d1f66dee2b5"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col p b q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a4a29f96bf7598fc9b5e583322b4d9f7855854e3"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col q p b).",
                        "VernacExtend",
                        "4aa4e8f39f439b7b7ac5315409e93cd0a8b7d331"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col p b q) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "a4a29f96bf7598fc9b5e583322b4d9f7855854e3"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle p b q) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "5f3d4960b3edd8829b871b48f29b839ffde58631"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle b q p) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "f72d6026fff40f67e910b940058bbd86177f7563"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle q p b) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "6a57f689e8cf70e045421b7cede911c58bfbf53e"
                    ]
                },
                {
                    "command": [
                        "assert (TG b p p q b q) by (conclude proposition_20).",
                        "VernacExtend",
                        "0727957f40d235c4349cacd71e2f397bb2fdd85a"
                    ]
                },
                {
                    "command": [
                        "assert (TG q b b p q p) by (conclude proposition_20).",
                        "VernacExtend",
                        "0e1982f24112e516733030967276f2a61929e79b"
                    ]
                },
                {
                    "command": [
                        "assert (TG p q q b p b) by (conclude proposition_20).",
                        "VernacExtend",
                        "3b8f1841ab2e79d2a4e8ba7a407c09ffbae7e48a"
                    ]
                },
                {
                    "command": [
                        "assert (TG b q b p q p) by (forward_using lemma_TGflip).",
                        "VernacExtend",
                        "1e40d379c1363d147e3cbfb49b6c064d8ccfac40"
                    ]
                },
                {
                    "command": [
                        "assert (TG b q b p p q) by (forward_using lemma_TGflip).",
                        "VernacExtend",
                        "07c57645a9ee75293e1fc133336dae3329184383"
                    ]
                },
                {
                    "command": [
                        "assert (TG q b p q p b) by (conclude lemma_TGsymmetric).",
                        "VernacExtend",
                        "e741d290932f05392cd7e2eaa96aac091033fc9a"
                    ]
                },
                {
                    "command": [
                        "assert (TG b q p q p b) by (forward_using lemma_TGflip).",
                        "VernacExtend",
                        "033b671cd8904bee141c4d4dc73d22498884240a"
                    ]
                },
                {
                    "command": [
                        "assert (TG b q p q b p) by (forward_using lemma_TGflip).",
                        "VernacExtend",
                        "23ef99fc31a8c9fd24772fb4f23cd354c74f5b5c"
                    ]
                },
                {
                    "command": [
                        "assert (TG b p p q q b) by (forward_using lemma_TGflip).",
                        "VernacExtend",
                        "f0a14570d095b623cc2db39af949e82462a0dc9a"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E F, (Cong B E b p /\\ Cong B F b q /\\ Cong E F p q /\\ Out B A E /\\ Triangle B E F)) by (conclude proposition_22);destruct Tf as [E[F]];spliter.",
                        "VernacExtend",
                        "82317bd1281c3a8e03c1fcd6da7cb118d63da062"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D B A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "56f6aa1b1d4b21d0d5ab96243b99877c38a03a49"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B E B A) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "dee42b316076ff22310afd522cd9173b462b0857"
                    ]
                },
                {
                    "command": [
                        "assert (eq E A) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "8cf050aced0a182df78031ebeea679419cccd822"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A b p) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "dae9aec24a9924cc26aab1a2b95ad95a462e58c7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F p q) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "5bcf408d4ccdba848c5dd789295b2a26022689b6"
                    ]
                },
                {
                    "command": [
                        "assert (~ eq p b).",
                        "VernacExtend",
                        "68c10d096bd13b7358e29b9f65d80c7b3e76d364"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col p b q) by (conclude_def Col ).",
                        "VernacExtend",
                        "34d87284ec7b5c81ff0da6ef4becc8686675ac1f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol p b q) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "3a570bd3c4ffb640a80ca845420bce622b2913a6"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong r b p b) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "33394b52324de9bd3cba0d1999d6357228f78702"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b r p b) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "8e10c3ee6c0ef68aa562fc0f06ec20de3ba56df5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b p B E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "b23032d485519756cd11900c0f9e0251d2f45130"
                    ]
                },
                {
                    "command": [
                        "assert (neq b p) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "42bb7cf2faea31006af86a74891f6b54a06b024b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A A B) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "ff97827ecde45fe0bf609cc9e02472a1c03a1a68"
                    ]
                },
                {
                    "command": [
                        "assert (Cong p b b r) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "7fa0590a9440ec4004b97b8ae446fdb529e2dfa6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong p q r q) by (conclude lemma_rightreverse).",
                        "VernacExtend",
                        "32a9c021c6d83fafb9a91196273d1d87fcabf0e2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong p b A B) by (forward_using lemma_doublereverse).",
                        "VernacExtend",
                        "85d49b16a125948e349e0496e02c9d28608dd096"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b r p b) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "045c400968bbcbef04097610227375f62cc03bb9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b r A B) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "84b6f2ca225fee323e16fce1b523219b2708e41a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B B D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "ad6fc7390168acf2282c6512d7082e7cdfb7f76c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b r B D) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "d6d8b77f338fd01ef739a2b5be28018fa500e1d3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b q B F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "396cd0ea7680c424d4224dcfa09d5787889dfa41"
                    ]
                },
                {
                    "command": [
                        "assert (Cong p q A F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "5b3ea1c0421d2b89e7fe093b5fc08b4c32458ce6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong q r F D) by (conclude axiom_5_line).",
                        "VernacExtend",
                        "35f3caaa04c0d75af846e1c68116453545a005c3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F r q) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "99bfb59c369f4b2a86956b8e92d03c6b3198ab37"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F q r) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "d487dffe86bf3a179657c56228d72d9bf84989a2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F F D) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "7f22964d29a82c7f5417f29fc84a1e4bdad62a3c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A F D F) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "fe3719bf9c6ce78c6b425ff36ec2717ffab05a9d"
                    ]
                },
                {
                    "command": [
                        "assert (neq b q) by (conclude_def Per ).",
                        "VernacExtend",
                        "1f1e4543518be0eeeb3af76fd8c533a2780d4b0d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong q b b q) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "1ed94c91f1d56fd031da20fcb947888b602585fc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong q b B F) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "a8276ff645b3fe942c275ddc5073801974f7e2ff"
                    ]
                },
                {
                    "command": [
                        "assert (neq B F) by (conclude axiom_nocollapse).",
                        "VernacExtend",
                        "02da5aa7433f494aa9b2bfb3ce186c9722bcb392"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B F) by (conclude_def Per ).",
                        "VernacExtend",
                        "3b7cb2c5627a84d8ff9e71bf5fe051dfa07d95b6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b q B F) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "396cd0ea7680c424d4224dcfa09d5787889dfa41"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C b q) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "03ad6d32fd3ad2c2d4952b07b9c7a4cafa0f82d1"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B F) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "7665af30e6657bc796ff453e75503c0b77da4f7d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C A F) by (conclude lemma_10_12).",
                        "VernacExtend",
                        "6da57c419a7f565ef961a375e386fadfa257632d"
                    ]
                },
                {
                    "command": [
                        "assert (eq F F) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "cd7369e97bff33bc7fe0b8e2ac14b88c5ad7e2e2"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Out B F F) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a3fdf4cd6853cccd57f607fa882e728270b367cf"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A B A) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "501dea04bd06be0aa7f4f464411dd482febe3981"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "f2cdc7cb572e9c7235b56c018ed5cae23c323020"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C A B F) by (conclude_def CongA ).",
                        "VernacExtend",
                        "605c21b32deb589eb2d7e2598883aa876510d4c3"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C A B C) by (conclude lemma_equalanglesreflexive).",
                        "VernacExtend",
                        "aded022177916f7e4435a874df64d10bc8cdea41"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C A B F) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "0946556ba23c237ba37d07416aab61e79e79b4b8"
                    ]
                },
                {
                    "command": [
                        "assert (eq p p) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "8e39c422133003e1d1418196cf8815d39b52d4cf"
                    ]
                },
                {
                    "command": [
                        "assert (eq q q) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "1b2794cf48e80ec760579eace61c8ea4e105fdcb"
                    ]
                },
                {
                    "command": [
                        "assert (Out b p p) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5d5792176eb701043bf8c7a8e054c4dcbe5c131e"
                    ]
                },
                {
                    "command": [
                        "assert (Out b q q) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "e5a1d987cf92288bab41e438f3c46899ce96e0ba"
                    ]
                },
                {
                    "command": [
                        "assert (Out B F F) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a3fdf4cd6853cccd57f607fa882e728270b367cf"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A b p) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "335341c3d2914304948d3be07aa28536a8d2260c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A p b) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "6e16473da1414342615d43aaf5af0cc1666acea1"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B F) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "524b5484d041650103cd1b437855ad4ac64d236b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B F p b q) by (conclude_def CongA ).",
                        "VernacExtend",
                        "837dd18e8973bb412ea5e76915f30dd1c885b652"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C p b q) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "c996c0a34f9ae680a20c21d132f51c4b63b090d0"
                    ]
                },
                {
                    "command": [
                        "assert (nCol a b c) by (conclude lemma_rightangleNC).",
                        "VernacExtend",
                        "7e5cdd22ae6b36e1385cb3dd9498fbef3fb97c5d"
                    ]
                },
                {
                    "command": [
                        "assert (Out b p p) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5d5792176eb701043bf8c7a8e054c4dcbe5c131e"
                    ]
                },
                {
                    "command": [
                        "assert (Out b q q) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "e5a1d987cf92288bab41e438f3c46899ce96e0ba"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b p b p) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "2fc6291df6a9c6b35f854c6760a595556cc3c396"
                    ]
                },
                {
                    "command": [
                        "assert (Cong b q b q) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "1ebe020d8ce2318d78e7f6b446b6629bd9d3bc58"
                    ]
                },
                {
                    "command": [
                        "assert (Cong p q p q) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "cd08f4c6c491a51a9dfe8c879b71febd98c148c6"
                    ]
                },
                {
                    "command": [
                        "assert (CongA a b c p b q) by (conclude_def CongA ).",
                        "VernacExtend",
                        "e30d37f2b058134ff83a94660c7938de397cc754"
                    ]
                },
                {
                    "command": [
                        "assert (CongA p b q a b c) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "b674119bda8155ce22c3964203327310923e6123"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C a b c) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "f15f84b6a54e72911f38406defea09dda113a59e"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}