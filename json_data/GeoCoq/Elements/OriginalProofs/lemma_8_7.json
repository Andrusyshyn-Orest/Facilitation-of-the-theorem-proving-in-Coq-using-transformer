{
    "filename": "Elements/OriginalProofs/lemma_8_7.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_droppedperpendicularunique.",
            "VernacRequire",
            "4386587bcae10e80121908abd99d0f48960e12cf"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_8_7 : forall A B C, Per C B A -> ~ Per A C B.",
            "VernacStartTheoremProof",
            "79d8dc362c1373c1faffcac534c3c63f268f5338"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (neq B A) by (conclude_def Per ).",
            "VernacExtend",
            "affff3df34170428c78a66f74e17e6c5275ef67c"
        ],
        [
            "assert (Per A B C) by (conclude lemma_8_2).",
            "VernacExtend",
            "feb56f9b2b03788e0ce5c7076b5d9f99b6d0e0e1"
        ],
        [
            "assert (neq B C) by (conclude_def Per ).",
            "VernacExtend",
            "d041bc953c8782cd878701b3fef8e11fbb6ce4b4"
        ],
        [
            "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f6de27d2290b224fed0d2ab5b24228893a410ec8"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS B C E /\\ Cong C E C B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
            "VernacExtend",
            "3eec58b0c6460bebe2f820ba307756fe76b57dd5"
        ],
        [
            "assert (Col B C E) by (conclude_def Col ).",
            "VernacExtend",
            "8da9d55fd7ea5a0f93acb16bf6510ac0facc129b"
        ],
        [
            "assert (Col E C B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "719226fedabf65a2db4f0cde2b96bf44cea1a9ed"
        ],
        [
            "assert (Per A B C) by (conclude lemma_8_2).",
            "VernacExtend",
            "feb56f9b2b03788e0ce5c7076b5d9f99b6d0e0e1"
        ],
        [
            "assert (Out B C E) by (conclude lemma_ray4).",
            "VernacExtend",
            "8aed1f44672f0989858efb5387bd8ddbabdf078d"
        ],
        [
            "assert (Per A B E) by (conclude lemma_8_3).",
            "VernacExtend",
            "1bc3815a64af0072090e0aedca5c1b2eefd0cd1d"
        ],
        [
            "assert (Per E B A) by (conclude lemma_8_2).",
            "VernacExtend",
            "7dda5d880333ebdad72a84bebe9c3c8dfbbdc5ac"
        ],
        [
            "assert (~ Per A C B).",
            "VernacExtend",
            "a31dd514ab0d9f8f9a00145153c43374245f0f40"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Per B C A) by (conclude lemma_8_2).",
            "VernacExtend",
            "aa5a8c14db4c4332ddfd93ba947e8375fb3f5407"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS B C F /\\ Cong B C F C /\\ Cong B A F A /\\ neq C A)) by (conclude_def Per );destruct Tf as [F];spliter.",
            "VernacExtend",
            "20c1f2c0c1bdf5cb052138102c695812c4df76c5"
        ],
        [
            "assert (Cong F C B C) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "9851fc1dd64e7efb0002c8a4d5485d357d81e8d0"
        ],
        [
            "assert (Cong C F B C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "ab41a9ffc6f742794fb55bb111c14f0a024bde82"
        ],
        [
            "assert (Cong C E B C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "2d8e1ae2a5e0d8b0370879eba2ac0994431e0625"
        ],
        [
            "assert (Cong B C C E) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "760543013d3a855b87b1de43ff49fce77478d81c"
        ],
        [
            "assert (Cong C F C E) by (conclude lemma_congruencetransitive).",
            "VernacExtend",
            "3ddbe9a1346ca28aeac47d78c5d7982e0d9c3fa8"
        ],
        [
            "assert (eq F E) by (conclude lemma_extensionunique).",
            "VernacExtend",
            "65e99160aecf0f0c618c1b8b2e07c0160fb7b458"
        ],
        [
            "assert (BetS E C B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "42879eabdef9f206b24b7446ed1a28c35f3107a8"
        ],
        [
            "assert (Cong F A B A) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "232583cfacc8e831a0750421d6190fb485a85ebe"
        ],
        [
            "assert (Cong E A B A) by (conclude cn_equalitysub).",
            "VernacExtend",
            "fdced21302c274a89ec48ee90475c8164db45b43"
        ],
        [
            "assert (Cong E C B C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "5b09ae98be1952d071a2a77e8bbacb27259018c2"
        ],
        [
            "assert (Per E C A) by (conclude_def Per ).",
            "VernacExtend",
            "a084da251cd0deb6aa805b84a711cc5b47c0ad74"
        ],
        [
            "assert (eq C B) by (conclude lemma_droppedperpendicularunique).",
            "VernacExtend",
            "986ae0961fed921fb252b9de2b18974d62bcbed0"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_8_7",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude_def Per ).",
                        "VernacExtend",
                        "affff3df34170428c78a66f74e17e6c5275ef67c"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "feb56f9b2b03788e0ce5c7076b5d9f99b6d0e0e1"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (conclude_def Per ).",
                        "VernacExtend",
                        "d041bc953c8782cd878701b3fef8e11fbb6ce4b4"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f6de27d2290b224fed0d2ab5b24228893a410ec8"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS B C E /\\ Cong C E C B)) by (conclude lemma_extension);destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "3eec58b0c6460bebe2f820ba307756fe76b57dd5"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C E) by (conclude_def Col ).",
                        "VernacExtend",
                        "8da9d55fd7ea5a0f93acb16bf6510ac0facc129b"
                    ]
                },
                {
                    "command": [
                        "assert (Col E C B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "719226fedabf65a2db4f0cde2b96bf44cea1a9ed"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "feb56f9b2b03788e0ce5c7076b5d9f99b6d0e0e1"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C E) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "8aed1f44672f0989858efb5387bd8ddbabdf078d"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B E) by (conclude lemma_8_3).",
                        "VernacExtend",
                        "1bc3815a64af0072090e0aedca5c1b2eefd0cd1d"
                    ]
                },
                {
                    "command": [
                        "assert (Per E B A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "7dda5d880333ebdad72a84bebe9c3c8dfbbdc5ac"
                    ]
                },
                {
                    "command": [
                        "assert (~ Per A C B).",
                        "VernacExtend",
                        "a31dd514ab0d9f8f9a00145153c43374245f0f40"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Per B C A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "aa5a8c14db4c4332ddfd93ba947e8375fb3f5407"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS B C F /\\ Cong B C F C /\\ Cong B A F A /\\ neq C A)) by (conclude_def Per );destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "20c1f2c0c1bdf5cb052138102c695812c4df76c5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F C B C) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "9851fc1dd64e7efb0002c8a4d5485d357d81e8d0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C F B C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "ab41a9ffc6f742794fb55bb111c14f0a024bde82"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C E B C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "2d8e1ae2a5e0d8b0370879eba2ac0994431e0625"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C C E) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "760543013d3a855b87b1de43ff49fce77478d81c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C F C E) by (conclude lemma_congruencetransitive).",
                        "VernacExtend",
                        "3ddbe9a1346ca28aeac47d78c5d7982e0d9c3fa8"
                    ]
                },
                {
                    "command": [
                        "assert (eq F E) by (conclude lemma_extensionunique).",
                        "VernacExtend",
                        "65e99160aecf0f0c618c1b8b2e07c0160fb7b458"
                    ]
                },
                {
                    "command": [
                        "assert (BetS E C B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "42879eabdef9f206b24b7446ed1a28c35f3107a8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong F A B A) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "232583cfacc8e831a0750421d6190fb485a85ebe"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E A B A) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "fdced21302c274a89ec48ee90475c8164db45b43"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E C B C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "5b09ae98be1952d071a2a77e8bbacb27259018c2"
                    ]
                },
                {
                    "command": [
                        "assert (Per E C A) by (conclude_def Per ).",
                        "VernacExtend",
                        "a084da251cd0deb6aa805b84a711cc5b47c0ad74"
                    ]
                },
                {
                    "command": [
                        "assert (eq C B) by (conclude lemma_droppedperpendicularunique).",
                        "VernacExtend",
                        "986ae0961fed921fb252b9de2b18974d62bcbed0"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}