{
    "filename": "Elements/OriginalProofs/lemma_trapezoiddiagonals.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_diagonalsbisect.",
            "VernacRequire",
            "9b158a4b46a3e1f5152ddb9647efe19032ed056a"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma lemma_trapezoiddiagonals : forall A B C D E, PG A B C D -> BetS A E D -> exists X, BetS B X D /\\ BetS C X E.",
            "VernacStartTheoremProof",
            "79520e417615a3fbea12bbd5cb396494ee72f6ac"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Par A B C D) by (conclude_def PG ).",
            "VernacExtend",
            "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
        ],
        [
            "assert (Par A D B C) by (conclude_def PG ).",
            "VernacExtend",
            "4378c3668a23c6fe646376559fe981073d0d0838"
        ],
        [
            "assert (~ Meet A B C D) by (conclude_def Par ).",
            "VernacExtend",
            "4df950904e10e6c02dbd93543a6b743e3e012346"
        ],
        [
            "assert (neq A B) by (conclude_def Par ).",
            "VernacExtend",
            "0f5f92f16271f51f680b940c1d6320e437cdd5fa"
        ],
        [
            "assert (neq C D) by (conclude_def Par ).",
            "VernacExtend",
            "a3656b868962e035aceb5e09bbfe0b66fd969ee4"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.",
            "VernacExtend",
            "4b80dac59eabbdb62d87141315b43c0c2fc6a56d"
        ],
        [
            "assert (BetS A M C) by (conclude_def Midpoint ).",
            "VernacExtend",
            "95947e69ae03e53b6f11c5b6e3e092cc4bbc6bf5"
        ],
        [
            "assert (Cong A M M C) by (conclude_def Midpoint ).",
            "VernacExtend",
            "d8f697fc4427c56a9d8c6d0b73cc12c935441cb1"
        ],
        [
            "assert (BetS B M D) by (conclude_def Midpoint ).",
            "VernacExtend",
            "3e53672ed4dc299c346b622237ae193028ef729f"
        ],
        [
            "assert (Cong B M M D) by (conclude_def Midpoint ).",
            "VernacExtend",
            "a4a5eb0eeaaa3fb1c56fb884cf0cc06d8f7cd18c"
        ],
        [
            "assert (Cong B M D M) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "e217f93c6b31a4c735f0b9a8ebb80c4127e69eca"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (~ Col B D C).",
            "VernacExtend",
            "5a63985ba29fbea3fb97727dba568051c69fd279"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col C D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
        ],
        [
            "assert (Col A B B) by (conclude_def Col ).",
            "VernacExtend",
            "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Cong M A M C) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "300ab432188aed780a33295c195a6f19fc974121"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists P, (BetS B E P /\\ BetS C D P)) by (conclude postulate_Euclid5);destruct Tf as [P];spliter.",
            "VernacExtend",
            "fab98c326fa0240e8d6a19309aed43a3935beee7"
        ],
        [
            "assert (~ Col B P C).",
            "VernacExtend",
            "9de19f9f9b4ccca3cdaa5e5bd3ff8a0f49a3f891"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col P C B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c8586adcec46e65ef46397dae70329bd1c3f70ca"
        ],
        [
            "assert (Col C D P) by (conclude_def Col ).",
            "VernacExtend",
            "203bb4d94ce44edae5abde22362ad693d82879b9"
        ],
        [
            "assert (Col P C D) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "657a41612eb29b27a772da58d65781adeea446ed"
        ],
        [
            "assert (neq C P) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "1d76641bd41055c320e8194ca8765476d70b8ae2"
        ],
        [
            "assert (neq P C) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "b16ef73f0f6edee1d0251a9b49a3476450d91876"
        ],
        [
            "assert (Col C B D) by (conclude lemma_collinear4).",
            "VernacExtend",
            "41d54ba23d06fa3204e7bdda73416f4de4c80031"
        ],
        [
            "assert (Col C D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
        ],
        [
            "assert (Col A B B) by (conclude_def Col ).",
            "VernacExtend",
            "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists H', (BetS B H' D /\\ BetS C H' E)) by (conclude postulate_Pasch_inner);destruct Tf as [H'];spliter.",
            "VernacExtend",
            "210b8e2bf2ed43e05ff0e8c8c2350fc61fd36b05"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_trapezoiddiagonals",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (conclude_def PG ).",
                        "VernacExtend",
                        "29dfcd8a524d61e9547a05f7df7e8cb0e3cc1b50"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D B C) by (conclude_def PG ).",
                        "VernacExtend",
                        "4378c3668a23c6fe646376559fe981073d0d0838"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "4df950904e10e6c02dbd93543a6b743e3e012346"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (conclude_def Par ).",
                        "VernacExtend",
                        "0f5f92f16271f51f680b940c1d6320e437cdd5fa"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "a3656b868962e035aceb5e09bbfe0b66fd969ee4"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "4b80dac59eabbdb62d87141315b43c0c2fc6a56d"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A M C) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "95947e69ae03e53b6f11c5b6e3e092cc4bbc6bf5"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A M M C) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "d8f697fc4427c56a9d8c6d0b73cc12c935441cb1"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B M D) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "3e53672ed4dc299c346b622237ae193028ef729f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B M M D) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "a4a5eb0eeaaa3fb1c56fb884cf0cc06d8f7cd18c"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B M D M) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "e217f93c6b31a4c735f0b9a8ebb80c4127e69eca"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col B D C).",
                        "VernacExtend",
                        "5a63985ba29fbea3fb97727dba568051c69fd279"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Cong M A M C) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "300ab432188aed780a33295c195a6f19fc974121"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists P, (BetS B E P /\\ BetS C D P)) by (conclude postulate_Euclid5);destruct Tf as [P];spliter.",
                        "VernacExtend",
                        "fab98c326fa0240e8d6a19309aed43a3935beee7"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col B P C).",
                        "VernacExtend",
                        "9de19f9f9b4ccca3cdaa5e5bd3ff8a0f49a3f891"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col P C B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c8586adcec46e65ef46397dae70329bd1c3f70ca"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D P) by (conclude_def Col ).",
                        "VernacExtend",
                        "203bb4d94ce44edae5abde22362ad693d82879b9"
                    ]
                },
                {
                    "command": [
                        "assert (Col P C D) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "657a41612eb29b27a772da58d65781adeea446ed"
                    ]
                },
                {
                    "command": [
                        "assert (neq C P) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "1d76641bd41055c320e8194ca8765476d70b8ae2"
                    ]
                },
                {
                    "command": [
                        "assert (neq P C) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "b16ef73f0f6edee1d0251a9b49a3476450d91876"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B D) by (conclude lemma_collinear4).",
                        "VernacExtend",
                        "41d54ba23d06fa3204e7bdda73416f4de4c80031"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists H', (BetS B H' D /\\ BetS C H' E)) by (conclude postulate_Pasch_inner);destruct Tf as [H'];spliter.",
                        "VernacExtend",
                        "210b8e2bf2ed43e05ff0e8c8c2350fc61fd36b05"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}