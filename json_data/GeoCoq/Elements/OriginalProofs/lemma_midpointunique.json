{
    "filename": "Elements/OriginalProofs/lemma_midpointunique.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthantransitive.",
            "VernacRequire",
            "d67e4b124216ea0a8df8ac53a0f2614f6793259f"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_midpointunique : forall A B C D, Midpoint A B C -> Midpoint A D C -> eq B D.",
            "VernacStartTheoremProof",
            "5f487d1a7f04f6b60fcc90a7565db85fec98a136"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((BetS A B C /\\ Cong A B B C)) by (conclude_def Midpoint ).",
            "VernacExtend",
            "199a9f203db6c33fff7b42f727dfd652683630e0"
        ],
        [
            "assert ((BetS A D C /\\ Cong A D D C)) by (conclude_def Midpoint ).",
            "VernacExtend",
            "2e952727ec6b813135d54abc30a492806c97a65e"
        ],
        [
            "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
        ],
        [
            "assert (~ BetS C D B).",
            "VernacExtend",
            "3ef6c38a1d4e7c86e260219aa5ac56bb30542af1"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS B D C) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "43393c9eb19808ef1e8dec32924a47bcb417b295"
        ],
        [
            "assert (BetS A B D) by (conclude axiom_innertransitivity).",
            "VernacExtend",
            "67a88d059a7f284e8c9742bb33046a1d75d8d4eb"
        ],
        [
            "assert (Lt A B A D) by (conclude_def Lt ).",
            "VernacExtend",
            "1e8f03039d2c2590da2fad68ee31b3e92cd36e89"
        ],
        [
            "assert (Cong A D C D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "ae94ec2cb5f3e16a1f65acda3181c62e32822d01"
        ],
        [
            "assert (Lt A B C D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "116a0038554030a66fd78041ac6d97fdece79ff0"
        ],
        [
            "assert (BetS C D B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "67aceef298c22c69e948d0247e420bee6d8584e7"
        ],
        [
            "assert (Cong C D C D) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "7a3832ccb0af3710e81f82cf8871a4ea6001dc42"
        ],
        [
            "assert (Lt C D C B) by (conclude_def Lt ).",
            "VernacExtend",
            "f03060ef38e15ca2b860859da4cd7a39efcf643d"
        ],
        [
            "assert (Lt A B C B) by (conclude lemma_lessthantransitive).",
            "VernacExtend",
            "358b94cdf7a8519d29b433fb6106e0b24f9abf02"
        ],
        [
            "assert (Cong C B B C) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "8cbef651e274a4cca2f2efce0af3c2dbd3990d60"
        ],
        [
            "assert (Lt A B B C) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "288687390859ff321c4f5e2401e27de986810edc"
        ],
        [
            "assert (Cong B C A B) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "c5772ceeb2bf7d39e1347545ce375520a87878e8"
        ],
        [
            "assert (Lt A B A B) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "66704f3b0a35e0a68e2e343466d96a73c70f9071"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists E, (BetS A E B /\\ Cong A E A B)) by (conclude_def Lt );destruct Tf as [E];spliter.",
            "VernacExtend",
            "3117faa976fe68bb14fba6b7a32c7125080822f5"
        ],
        [
            "assert (~ Cong A E A B) by (conclude lemma_partnotequalwhole).",
            "VernacExtend",
            "b126e6a0b3e5e5074b75500bfb09d56eb49d366d"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ BetS C B D).",
            "VernacExtend",
            "c71d7c3774f45e5b4ad1e84a472cffe906766639"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (BetS D B C) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "6e2d65955fdc85866bd4f2ea0bc42ace4d4b4fb7"
        ],
        [
            "assert (BetS A D B) by (conclude axiom_innertransitivity).",
            "VernacExtend",
            "9a167986b0a366fb76d17faa89f2b41113eca18d"
        ],
        [
            "assert (Cong A D A D) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "1465b34fffe097d262260f574623ec9b44776b8e"
        ],
        [
            "assert (Lt A D A B) by (conclude_def Lt ).",
            "VernacExtend",
            "7cefd471cc41822171f07faacdf383e1c17cfa9d"
        ],
        [
            "assert (Cong A B C B) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "7bbe8eee30ca6fb40946b6ab92d67e50a68d34e2"
        ],
        [
            "assert (Lt A D C B) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "95b50e0828c90ad788e06e3365b2f7e8d621d945"
        ],
        [
            "assert (BetS C B D) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "c73d3dde9279ba02c6ae0d646d92dc7ef221b7f0"
        ],
        [
            "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
        ],
        [
            "assert (Lt C B C D) by (conclude_def Lt ).",
            "VernacExtend",
            "f9ef64fb935558bf981c724321129433d13dff3d"
        ],
        [
            "assert (Lt A D C D) by (conclude lemma_lessthantransitive).",
            "VernacExtend",
            "a44c47ee487e568ca94b5a1141cec08ee73601c3"
        ],
        [
            "assert (Cong C D D C) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "1ada171f4df7289ff18cbce8ba20c3761fee8e5d"
        ],
        [
            "assert (Lt A D D C) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "fe77e79f11dd41aff3fae47589b323370ec8455f"
        ],
        [
            "assert (Cong D C C D) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "350348ab5f0c98cea1281a1ad1907f1d980377d6"
        ],
        [
            "assert (Lt A D C D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "9959d79c660cb620873cee71a603557df9642be8"
        ],
        [
            "assert (Cong D C A D) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "0891c25fab99ff471f7c0139b1de457f6737f230"
        ],
        [
            "assert (Cong C D A D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "b1b73820d501638e11861292b12a82a97a9d688c"
        ],
        [
            "assert (Lt A D A D) by (conclude lemma_lessthancongruence).",
            "VernacExtend",
            "a0cc935b902afa62dc52b817d3266c81e533e08c"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F A D)) by (conclude_def Lt );destruct Tf as [F];spliter.",
            "VernacExtend",
            "4d48fe8cef9462a9ffcb3669c30f90cdc1fa4799"
        ],
        [
            "assert (~ Cong A F A D) by (conclude lemma_partnotequalwhole).",
            "VernacExtend",
            "a7f47b77e489f10bbf1a4b033522a3bcc46691e3"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (BetS C D A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "a328aa404e3dd620dfdec7f222b2b7882076de4f"
        ],
        [
            "assert (BetS C B A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "2f4c35330fe4c7c49c3511750b6abf8c81fa3e01"
        ],
        [
            "assert (eq B D) by (conclude axiom_connectivity).",
            "VernacExtend",
            "b1b1d8d5537307fe685229b456f02ba1a3febbbe"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_midpointunique",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((BetS A B C /\\ Cong A B B C)) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "199a9f203db6c33fff7b42f727dfd652683630e0"
                    ]
                },
                {
                    "command": [
                        "assert ((BetS A D C /\\ Cong A D D C)) by (conclude_def Midpoint ).",
                        "VernacExtend",
                        "2e952727ec6b813135d54abc30a492806c97a65e"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B A B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "761ea9cec76c4e2f15b6c8b8fcfbf58ea93071ec"
                    ]
                },
                {
                    "command": [
                        "assert (~ BetS C D B).",
                        "VernacExtend",
                        "3ef6c38a1d4e7c86e260219aa5ac56bb30542af1"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B D C) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "43393c9eb19808ef1e8dec32924a47bcb417b295"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A B D) by (conclude axiom_innertransitivity).",
                        "VernacExtend",
                        "67a88d059a7f284e8c9742bb33046a1d75d8d4eb"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B A D) by (conclude_def Lt ).",
                        "VernacExtend",
                        "1e8f03039d2c2590da2fad68ee31b3e92cd36e89"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D C D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "ae94ec2cb5f3e16a1f65acda3181c62e32822d01"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B C D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "116a0038554030a66fd78041ac6d97fdece79ff0"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C D B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "67aceef298c22c69e948d0247e420bee6d8584e7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D C D) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "7a3832ccb0af3710e81f82cf8871a4ea6001dc42"
                    ]
                },
                {
                    "command": [
                        "assert (Lt C D C B) by (conclude_def Lt ).",
                        "VernacExtend",
                        "f03060ef38e15ca2b860859da4cd7a39efcf643d"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B C B) by (conclude lemma_lessthantransitive).",
                        "VernacExtend",
                        "358b94cdf7a8519d29b433fb6106e0b24f9abf02"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B B C) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "8cbef651e274a4cca2f2efce0af3c2dbd3990d60"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B B C) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "288687390859ff321c4f5e2401e27de986810edc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C A B) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "c5772ceeb2bf7d39e1347545ce375520a87878e8"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A B A B) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "66704f3b0a35e0a68e2e343466d96a73c70f9071"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists E, (BetS A E B /\\ Cong A E A B)) by (conclude_def Lt );destruct Tf as [E];spliter.",
                        "VernacExtend",
                        "3117faa976fe68bb14fba6b7a32c7125080822f5"
                    ]
                },
                {
                    "command": [
                        "assert (~ Cong A E A B) by (conclude lemma_partnotequalwhole).",
                        "VernacExtend",
                        "b126e6a0b3e5e5074b75500bfb09d56eb49d366d"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ BetS C B D).",
                        "VernacExtend",
                        "c71d7c3774f45e5b4ad1e84a472cffe906766639"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D B C) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "6e2d65955fdc85866bd4f2ea0bc42ace4d4b4fb7"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A D B) by (conclude axiom_innertransitivity).",
                        "VernacExtend",
                        "9a167986b0a366fb76d17faa89f2b41113eca18d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D A D) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "1465b34fffe097d262260f574623ec9b44776b8e"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D A B) by (conclude_def Lt ).",
                        "VernacExtend",
                        "7cefd471cc41822171f07faacdf383e1c17cfa9d"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C B) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "7bbe8eee30ca6fb40946b6ab92d67e50a68d34e2"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D C B) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "95b50e0828c90ad788e06e3365b2f7e8d621d945"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C B D) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "c73d3dde9279ba02c6ae0d646d92dc7ef221b7f0"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B C B) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "25bc289b66363b0f3f94bd1e3a8fe3eb867f3605"
                    ]
                },
                {
                    "command": [
                        "assert (Lt C B C D) by (conclude_def Lt ).",
                        "VernacExtend",
                        "f9ef64fb935558bf981c724321129433d13dff3d"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D C D) by (conclude lemma_lessthantransitive).",
                        "VernacExtend",
                        "a44c47ee487e568ca94b5a1141cec08ee73601c3"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D D C) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "1ada171f4df7289ff18cbce8ba20c3761fee8e5d"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D D C) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "fe77e79f11dd41aff3fae47589b323370ec8455f"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D C C D) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "350348ab5f0c98cea1281a1ad1907f1d980377d6"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D C D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "9959d79c660cb620873cee71a603557df9642be8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong D C A D) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "0891c25fab99ff471f7c0139b1de457f6737f230"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C D A D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "b1b73820d501638e11861292b12a82a97a9d688c"
                    ]
                },
                {
                    "command": [
                        "assert (Lt A D A D) by (conclude lemma_lessthancongruence).",
                        "VernacExtend",
                        "a0cc935b902afa62dc52b817d3266c81e533e08c"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists F, (BetS A F D /\\ Cong A F A D)) by (conclude_def Lt );destruct Tf as [F];spliter.",
                        "VernacExtend",
                        "4d48fe8cef9462a9ffcb3669c30f90cdc1fa4799"
                    ]
                },
                {
                    "command": [
                        "assert (~ Cong A F A D) by (conclude lemma_partnotequalwhole).",
                        "VernacExtend",
                        "a7f47b77e489f10bbf1a4b033522a3bcc46691e3"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C D A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "a328aa404e3dd620dfdec7f222b2b7882076de4f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C B A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "2f4c35330fe4c7c49c3511750b6abf8c81fa3e01"
                    ]
                },
                {
                    "command": [
                        "assert (eq B D) by (conclude axiom_connectivity).",
                        "VernacExtend",
                        "b1b1d8d5537307fe685229b456f02ba1a3febbbe"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}