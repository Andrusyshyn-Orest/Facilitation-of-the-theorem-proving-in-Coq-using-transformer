{
    "filename": "Elements/OriginalProofs/proposition_39.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.",
            "VernacRequire",
            "0c2eb96efb1ebf9be576ec12a4a711f713c56ac0"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_39A.",
            "VernacRequire",
            "274449237c74e6ab9ec0bc57df04399e2869c260"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:area}.",
            "VernacContext",
            "81ffa005c6d27ee71f963c56f9847264efce50bb"
        ],
        [
            "Lemma proposition_39 : forall A B C D, Triangle A B C -> Triangle D B C -> OS A D B C -> ET A B C D B C -> neq A D -> Par A D B C.",
            "VernacStartTheoremProof",
            "5f19536a09c1161d91ce1ed1a311bf891f0de390"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (OS D A B C) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "9880ecc4c8ec4070333acbea7adcac11876a008f"
        ],
        [
            "assert (OS A D C B) by (conclude lemma_samesideflip).",
            "VernacExtend",
            "9a374c557ad8c1648eb601a62c71416aa08e4093"
        ],
        [
            "assert (OS D A C B) by (forward_using lemma_samesidesymmetric).",
            "VernacExtend",
            "f1c0bb75295d03f02e06c00d0216a6fe03bd826b"
        ],
        [
            "assert (nCol A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e83b920a984fbfb905afe6317242c70bce914c01"
        ],
        [
            "assert (nCol D B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "03a08b075872077342f8f45d6f4e1f2e8fbae7fe"
        ],
        [
            "assert (neq A B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "8734c6c62963acc25b4886dfc0a545d19560b2ba"
        ],
        [
            "assert (neq B D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c40ffb6f7c7ef362fa0ff361c6c3970adcfe852e"
        ],
        [
            "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "d75f90193cbf0f3e92de057e91d772e7f4222c89"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "assert (neq C A) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
        ],
        [
            "assert (neq C B) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "4166f0c0280dc7504e496fe594c5a787d05a54da"
        ],
        [
            "assert (neq C D) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Out B C C) by (conclude lemma_ray4).",
            "VernacExtend",
            "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Out B D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "9dcb0def0987bcfefce142df69b06d620db93897"
        ],
        [
            "assert (Out C B B) by (conclude lemma_ray4).",
            "VernacExtend",
            "637eb8335a2163c1d041df3535e69682ab03a1ad"
        ],
        [
            "assert (Out C A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "c5aa51775ac2d6725d437ebc1841e67fe453c920"
        ],
        [
            "assert (Out C D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
        ],
        [
            "assert (~ ~ Par A D B C).",
            "VernacExtend",
            "7dd8845b461c2b8cf24a0cd29be8d1a4a46252d5"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (~ LtA C B D C B A).",
            "VernacExtend",
            "e8e6d3c939ae4928ae7eff028f686437b8af6e06"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ Out B D M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
            "VernacExtend",
            "b278f2d7c698df2fdfd6c9539d750986876a1b87"
        ],
        [
            "assert (Par A D B C) by (conclude proposition_39A).",
            "VernacExtend",
            "5e90b9639b2a553564dca51263fe2c0e075fb095"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ LtA C B A C B D).",
            "VernacExtend",
            "0bfdc95143acee2498da029eedc49af807d797d7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS D M C /\\ Out B A M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
            "VernacExtend",
            "2205528de4050e014edb0d7eb5be907c4de72eb8"
        ],
        [
            "assert (ET D B C A B C) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "1852685a82187fd2530203c1dc751bcd12681d88"
        ],
        [
            "assert (Par D A B C) by (conclude proposition_39A).",
            "VernacExtend",
            "6d002548175dfde08e710d5155bb8e287ebfd4ba"
        ],
        [
            "assert (Par A D B C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "9d44b6a167df5bdc9cc929955f06c58551421212"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ ~ CongA C B D C B A).",
            "VernacExtend",
            "232a8ae5cf71f6c291a07ff8e200e8923501422d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (nCol C B A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "a4d3eddbdbf0e243199e65bd2fb15e7f1447fc66"
        ],
        [
            "assert (nCol C B D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "9929cc5845363b366a39bb043ec8260c57492012"
        ],
        [
            "assert (LtA C B D C B A) by (conclude lemma_angletrichotomy2).",
            "VernacExtend",
            "c7e7f9ba8c132ae8c8d14986ced147c21adf5ec1"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (nCol A C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "6fa4d8521101c4cf3f499b7ee679c8ac57247afc"
        ],
        [
            "assert (Triangle A C B) by (conclude_def Triangle ).",
            "VernacExtend",
            "be35450d79b2ec7ec0258c474916f7b9e6560530"
        ],
        [
            "assert (nCol D C B) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "42fa4202075413f8ceea35f10d75ff120a84cd07"
        ],
        [
            "assert (Triangle D C B) by (conclude_def Triangle ).",
            "VernacExtend",
            "085276e32309a794032971782a8f86c2b2063550"
        ],
        [
            "assert (OS A D C B) by (conclude lemma_samesideflip).",
            "VernacExtend",
            "9a374c557ad8c1648eb601a62c71416aa08e4093"
        ],
        [
            "assert (ET A B C D C B) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "ccc812838d69496d27092ac74ea9668dc5882a21"
        ],
        [
            "assert (ET D C B A B C) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "6e176f4b23dccb22f685872c8f1356396c28ce87"
        ],
        [
            "assert (ET D C B A C B) by (forward_using axiom_ETpermutation).",
            "VernacExtend",
            "956f1d778800e0b8335c5282a120aeb0821cf318"
        ],
        [
            "assert (ET A C B D C B) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "ab28730586717d233a1200172dbf0da3561cf0fe"
        ],
        [
            "assert (~ LtA B C D B C A).",
            "VernacExtend",
            "88ae4632abddd83fb0d40be21a0037a3abe78292"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ Out C D M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
            "VernacExtend",
            "eb7c8d97af9b0a6050883c3fb28bacd0b7c73894"
        ],
        [
            "assert (Par A D C B) by (conclude proposition_39A).",
            "VernacExtend",
            "0f1a14e1ede92bf62cf1d069cc832bfe08f59f9f"
        ],
        [
            "assert (Par A D B C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "9d44b6a167df5bdc9cc929955f06c58551421212"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ LtA B C A B C D).",
            "VernacExtend",
            "c023b5e7cb4f41667805aef89dc37daf43decd76"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS D M B /\\ Out C A M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
            "VernacExtend",
            "db01819e042c692a341d75deb04d867d56688886"
        ],
        [
            "assert (ET D C B A C B) by (conclude axiom_ETsymmetric).",
            "VernacExtend",
            "5942f7c70700ac365438f26eea0c9f7ee8bced74"
        ],
        [
            "assert (Par D A C B) by (conclude proposition_39A).",
            "VernacExtend",
            "a1b09e10069e6408496cf854e05a76dd744025de"
        ],
        [
            "assert (Par A D B C) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "9d44b6a167df5bdc9cc929955f06c58551421212"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (~ ~ CongA B C D B C A).",
            "VernacExtend",
            "489640885d9ae1415b99b6460eee32824218467e"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (nCol B C A) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
        ],
        [
            "assert (nCol B C D) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "17673ec00bd63bf4828f17d80d347c13bec5f928"
        ],
        [
            "assert (LtA B C D B C A) by (conclude lemma_angletrichotomy2).",
            "VernacExtend",
            "265c075594a50119cf67dfa9f70a88f5a63b8c3d"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (CongA B C A B C D) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "fc3696c0ccdb7528c878555137e61899e8ce4e69"
        ],
        [
            "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
            "VernacExtend",
            "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
        ],
        [
            "assert (CongA D B C A B C) by (conclude lemma_equalanglesflip).",
            "VernacExtend",
            "7a2ff6da3aae7485be7ff79beb5a657f196ee334"
        ],
        [
            "assert (CongA A B C D B C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "c9602c2d7fa372cb94114e6368f1e1651e5abd92"
        ],
        [
            "assert ((Cong A B D B /\\ Cong A C D C /\\ CongA B A C B D C)) by (conclude proposition_26A).",
            "VernacExtend",
            "2ef935a5d5d6dac7d4210b5f2927e251d8273eb9"
        ],
        [
            "assert (neq B C) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "0bb577205eb42d8f9fe7d193058e6055102c5a78"
        ],
        [
            "assert (eq A D) by (conclude proposition_07).",
            "VernacExtend",
            "9a4361e1a98ada865c183460a243a7d2d526506b"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_39",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (OS D A B C) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "9880ecc4c8ec4070333acbea7adcac11876a008f"
                    ]
                },
                {
                    "command": [
                        "assert (OS A D C B) by (conclude lemma_samesideflip).",
                        "VernacExtend",
                        "9a374c557ad8c1648eb601a62c71416aa08e4093"
                    ]
                },
                {
                    "command": [
                        "assert (OS D A C B) by (forward_using lemma_samesidesymmetric).",
                        "VernacExtend",
                        "f1c0bb75295d03f02e06c00d0216a6fe03bd826b"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e83b920a984fbfb905afe6317242c70bce914c01"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "03a08b075872077342f8f45d6f4e1f2e8fbae7fe"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "8734c6c62963acc25b4886dfc0a545d19560b2ba"
                    ]
                },
                {
                    "command": [
                        "assert (neq B D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c40ffb6f7c7ef362fa0ff361c6c3970adcfe852e"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "d75f90193cbf0f3e92de057e91d772e7f4222c89"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "c8c6037c8dc0e793c06fbcbf31a6f2299782d479"
                    ]
                },
                {
                    "command": [
                        "assert (neq C B) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "4166f0c0280dc7504e496fe594c5a787d05a54da"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "3c15a0cca9b4ed2a86186532871fa9f0d4bd5578"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Out B C C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "a9badce1d2d93b32a5fe3eae0965bd326aa9fa41"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Out B D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "9dcb0def0987bcfefce142df69b06d620db93897"
                    ]
                },
                {
                    "command": [
                        "assert (Out C B B) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "637eb8335a2163c1d041df3535e69682ab03a1ad"
                    ]
                },
                {
                    "command": [
                        "assert (Out C A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c5aa51775ac2d6725d437ebc1841e67fe453c920"
                    ]
                },
                {
                    "command": [
                        "assert (Out C D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
                    ]
                },
                {
                    "command": [
                        "assert (~ ~ Par A D B C).",
                        "VernacExtend",
                        "7dd8845b461c2b8cf24a0cd29be8d1a4a46252d5"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA C B D C B A).",
                        "VernacExtend",
                        "e8e6d3c939ae4928ae7eff028f686437b8af6e06"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ Out B D M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "b278f2d7c698df2fdfd6c9539d750986876a1b87"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D B C) by (conclude proposition_39A).",
                        "VernacExtend",
                        "5e90b9639b2a553564dca51263fe2c0e075fb095"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA C B A C B D).",
                        "VernacExtend",
                        "0bfdc95143acee2498da029eedc49af807d797d7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS D M C /\\ Out B A M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "2205528de4050e014edb0d7eb5be907c4de72eb8"
                    ]
                },
                {
                    "command": [
                        "assert (ET D B C A B C) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "1852685a82187fd2530203c1dc751bcd12681d88"
                    ]
                },
                {
                    "command": [
                        "assert (Par D A B C) by (conclude proposition_39A).",
                        "VernacExtend",
                        "6d002548175dfde08e710d5155bb8e287ebfd4ba"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D B C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "9d44b6a167df5bdc9cc929955f06c58551421212"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ ~ CongA C B D C B A).",
                        "VernacExtend",
                        "232a8ae5cf71f6c291a07ff8e200e8923501422d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "a4d3eddbdbf0e243199e65bd2fb15e7f1447fc66"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "9929cc5845363b366a39bb043ec8260c57492012"
                    ]
                },
                {
                    "command": [
                        "assert (LtA C B D C B A) by (conclude lemma_angletrichotomy2).",
                        "VernacExtend",
                        "c7e7f9ba8c132ae8c8d14986ced147c21adf5ec1"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "6fa4d8521101c4cf3f499b7ee679c8ac57247afc"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A C B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "be35450d79b2ec7ec0258c474916f7b9e6560530"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D C B) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "42fa4202075413f8ceea35f10d75ff120a84cd07"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle D C B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "085276e32309a794032971782a8f86c2b2063550"
                    ]
                },
                {
                    "command": [
                        "assert (OS A D C B) by (conclude lemma_samesideflip).",
                        "VernacExtend",
                        "9a374c557ad8c1648eb601a62c71416aa08e4093"
                    ]
                },
                {
                    "command": [
                        "assert (ET A B C D C B) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "ccc812838d69496d27092ac74ea9668dc5882a21"
                    ]
                },
                {
                    "command": [
                        "assert (ET D C B A B C) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "6e176f4b23dccb22f685872c8f1356396c28ce87"
                    ]
                },
                {
                    "command": [
                        "assert (ET D C B A C B) by (forward_using axiom_ETpermutation).",
                        "VernacExtend",
                        "956f1d778800e0b8335c5282a120aeb0821cf318"
                    ]
                },
                {
                    "command": [
                        "assert (ET A C B D C B) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "ab28730586717d233a1200172dbf0da3561cf0fe"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA B C D B C A).",
                        "VernacExtend",
                        "88ae4632abddd83fb0d40be21a0037a3abe78292"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ Out C D M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "eb7c8d97af9b0a6050883c3fb28bacd0b7c73894"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D C B) by (conclude proposition_39A).",
                        "VernacExtend",
                        "0f1a14e1ede92bf62cf1d069cc832bfe08f59f9f"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D B C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "9d44b6a167df5bdc9cc929955f06c58551421212"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ LtA B C A B C D).",
                        "VernacExtend",
                        "c023b5e7cb4f41667805aef89dc37daf43decd76"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS D M B /\\ Out C A M)) by (conclude lemma_crossbar2);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "db01819e042c692a341d75deb04d867d56688886"
                    ]
                },
                {
                    "command": [
                        "assert (ET D C B A C B) by (conclude axiom_ETsymmetric).",
                        "VernacExtend",
                        "5942f7c70700ac365438f26eea0c9f7ee8bced74"
                    ]
                },
                {
                    "command": [
                        "assert (Par D A C B) by (conclude proposition_39A).",
                        "VernacExtend",
                        "a1b09e10069e6408496cf854e05a76dd744025de"
                    ]
                },
                {
                    "command": [
                        "assert (Par A D B C) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "9d44b6a167df5bdc9cc929955f06c58551421212"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (~ ~ CongA B C D B C A).",
                        "VernacExtend",
                        "489640885d9ae1415b99b6460eee32824218467e"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C A) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "08abc6c2b49fca606fde82afd7a7faa19e5ae589"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C D) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "17673ec00bd63bf4828f17d80d347c13bec5f928"
                    ]
                },
                {
                    "command": [
                        "assert (LtA B C D B C A) by (conclude lemma_angletrichotomy2).",
                        "VernacExtend",
                        "265c075594a50119cf67dfa9f70a88f5a63b8c3d"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A B C D) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "fc3696c0ccdb7528c878555137e61899e8ce4e69"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C B C) by (conclude cn_congruencereflexive).",
                        "VernacExtend",
                        "ed142e8fbde6a84529bd4c830f851b89eb3843f0"
                    ]
                },
                {
                    "command": [
                        "assert (CongA D B C A B C) by (conclude lemma_equalanglesflip).",
                        "VernacExtend",
                        "7a2ff6da3aae7485be7ff79beb5a657f196ee334"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C D B C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "c9602c2d7fa372cb94114e6368f1e1651e5abd92"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A B D B /\\ Cong A C D C /\\ CongA B A C B D C)) by (conclude proposition_26A).",
                        "VernacExtend",
                        "2ef935a5d5d6dac7d4210b5f2927e251d8273eb9"
                    ]
                },
                {
                    "command": [
                        "assert (neq B C) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "0bb577205eb42d8f9fe7d193058e6055102c5a78"
                    ]
                },
                {
                    "command": [
                        "assert (eq A D) by (conclude proposition_07).",
                        "VernacExtend",
                        "9a4361e1a98ada865c183460a243a7d2d526506b"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}