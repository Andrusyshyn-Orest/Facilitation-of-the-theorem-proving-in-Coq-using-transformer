{
    "filename": "Elements/OriginalProofs/proposition_34.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_diagonalsmeet.",
            "VernacRequire",
            "a26839d02d8bb7e872a26816dfd76e8b7c89066a"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_29B.",
            "VernacRequire",
            "5d237c3959071079475062a23cb0b770aa2ee5ba"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_26A.",
            "VernacRequire",
            "718ed539d54f98d8f8f8d306b4a53e7ba0af941f"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_euclidean}.",
            "VernacContext",
            "46d5a1bab5cb652e851ee1112917f2bf32229649"
        ],
        [
            "Lemma proposition_34 : forall A B C D, PG A C D B -> Cong A B C D /\\ Cong A C B D /\\ CongA C A B B D C /\\ CongA A B D D C A /\\ Cong_3 C A B B D C.",
            "VernacStartTheoremProof",
            "36761fc434b68791980474270aac6453520782d4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((Par A C D B /\\ Par A B C D)) by (conclude_def PG ).",
            "VernacExtend",
            "e1e2aba94897824bbe74077d5ea1631f8a80cbb7"
        ],
        [
            "assert (Par A C B D) by (forward_using lemma_parallelflip).",
            "VernacExtend",
            "198590d70324f2c482f88012ac43c1628ce15804"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS C M B)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
            "VernacExtend",
            "c189e17a559ccd5e5169d419d2342ea0cf177a6d"
        ],
        [
            "assert (BetS B M C) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "ef59dc3b4f96f14f20e5c1410e767e762987ba2c"
        ],
        [
            "assert (Col B M C) by (conclude_def Col ).",
            "VernacExtend",
            "48d3455391aa6042e4c0824a684611b5af7c8a81"
        ],
        [
            "assert (Col B C M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "7063a14b6a5e5d46df26c1e86a2f3057b87e3bb9"
        ],
        [
            "assert (~ Meet A B C D) by (conclude_def Par ).",
            "VernacExtend",
            "4df950904e10e6c02dbd93543a6b743e3e012346"
        ],
        [
            "assert (neq A B) by (conclude_def Par ).",
            "VernacExtend",
            "0f5f92f16271f51f680b940c1d6320e437cdd5fa"
        ],
        [
            "assert (neq C D) by (conclude_def Par ).",
            "VernacExtend",
            "a3656b868962e035aceb5e09bbfe0b66fd969ee4"
        ],
        [
            "assert (~ Col B C A).",
            "VernacExtend",
            "f2ccde2b3f06377cdf6767f60a87564e90095b27"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col A B C) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "115803ade1f97d11f923db51e034b8a1961d4ba9"
        ],
        [
            "assert (eq C C) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "58ac3652b8294144f672cd30eb3468a526751f38"
        ],
        [
            "assert (Col C D C) by (conclude_def Col ).",
            "VernacExtend",
            "a5c3d5eb1771de0bbde081130e12a688964681c9"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (TS A B C D) by (conclude_def TS ).",
            "VernacExtend",
            "e53ac596655ae152cf1133e6003c737d6995db2b"
        ],
        [
            "assert (CongA A B C B C D) by (conclude proposition_29B).",
            "VernacExtend",
            "7875cf4bc359676f8f4dd94584177c90f33d00cb"
        ],
        [
            "assert (~ Col B C D).",
            "VernacExtend",
            "1f400b0de914ae951dba021fa809d8f95a2c5c27"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (Col C D B) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
        ],
        [
            "assert (eq B B) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "00ae07b3d0c590585c3f543859688f9bdbb4d207"
        ],
        [
            "assert (Col A B B) by (conclude_def Col ).",
            "VernacExtend",
            "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "assert (~ Meet A B C D) by (conclude_def Par ).",
            "VernacExtend",
            "4df950904e10e6c02dbd93543a6b743e3e012346"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (CongA B C D D C B) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "6edea578a4bc6ca18488d9506cbb73bee1d82ccf"
        ],
        [
            "assert (CongA A B C D C B) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "79a8d84468c0b792b5611b7e791f70118180cddb"
        ],
        [
            "assert (Col C B M) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "c4e234e367413ef16013499457a5aa51ac86ab40"
        ],
        [
            "assert (nCol C B A).",
            "VernacExtend",
            "8dcc44307ebc97d0b3c6bc582bdd948dc53c2059"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (nCol B C A) by auto.",
            "VernacExtend",
            "bb94e1a70a7f9d1c57acfecbbf140043e38e3cbe"
        ],
        [
            "forward_using lemma_NCorder.",
            "VernacExtend",
            "d24008778cc02d3199e271648fbd0735d6835f44"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (TS A C B D) by (conclude_def TS ).",
            "VernacExtend",
            "c379f2537ceb527f3eac696cae6b35e9a681c952"
        ],
        [
            "assert (CongA A C B C B D) by (conclude proposition_29B).",
            "VernacExtend",
            "965db1cee401bd3daae9d66e35be6cc7b3b23a67"
        ],
        [
            "assert (nCol A B C) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "cd01628f57b41b48ea9a56e812a43d2a7c7813d2"
        ],
        [
            "assert (CongA B C A A C B) by (conclude lemma_ABCequalsCBA).",
            "VernacExtend",
            "75c7a8ed71ec0c2c1ab6810ae39b2eedb30caa17"
        ],
        [
            "assert (CongA B C A C B D) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "d4122cf4fa3b524164e9cbdf31bf2af487c3e157"
        ],
        [
            "assert (Triangle A B C) by (conclude_def Triangle ).",
            "VernacExtend",
            "e214dba186dfa4662bfacc313daed8b05f69ce75"
        ],
        [
            "assert (nCol D C B) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "ff825bd66fbebf80ecfa0c7ab813fcef66469eff"
        ],
        [
            "assert (Triangle D C B) by (conclude_def Triangle ).",
            "VernacExtend",
            "085276e32309a794032971782a8f86c2b2063550"
        ],
        [
            "assert (Cong B C C B) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "160cd2a9209d9b5a8c658c4c8051ae3146a0e8a3"
        ],
        [
            "assert ((Cong A B D C /\\ Cong A C D B /\\ CongA B A C C D B)) by (conclude proposition_26A).",
            "VernacExtend",
            "84dcf665abc37c86af8c4859ccd330065c4272ab"
        ],
        [
            "assert (Cong A B C D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "11fc28471f52743ccb0275cef19824b0159a1fce"
        ],
        [
            "assert (Cong A C B D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "b1debfcf261146f894ebecb469d4414913f1eb92"
        ],
        [
            "assert (Cong C A B D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "840515bc4985bfd0aeee699db95c05bc0905f6b7"
        ],
        [
            "assert (Cong C B B C) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "8cbef651e274a4cca2f2efce0af3c2dbd3990d60"
        ],
        [
            "assert (Cong_3 C A B B D C) by (conclude_def Cong_3 ).",
            "VernacExtend",
            "feb2cfc67cea6c563f6d0560730880699caf875d"
        ],
        [
            "assert (CongA C A B B D C) by (conclude lemma_equalanglesflip).",
            "VernacExtend",
            "047ee0f16ffb5074d7c21227dd6baf39db153732"
        ],
        [
            "assert (Cong A D D A) by (conclude cn_equalityreverse).",
            "VernacExtend",
            "833a2d89143c7187994309d9c3a50fb3547e1d06"
        ],
        [
            "assert (eq A A) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "61d4f27cc63449a4c835629f7da173ce519b7510"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (neq A C) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "fb1bbf8304c14f46b4fe3e830a007c5b66466470"
        ],
        [
            "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
        ],
        [
            "assert (neq C D) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "60ef787212d1e50f17c06cd6c1e425552182b5e5"
        ],
        [
            "assert (neq B A) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "edc0a33eb672e37cf423b1cc6edb20b0f06f7159"
        ],
        [
            "assert (neq D B) by (forward_using lemma_angledistinct).",
            "VernacExtend",
            "e3c216e36af84a67b286a04acb34e136a9ab5769"
        ],
        [
            "assert (neq B D) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "61403d246c7e61a1749f292f3789528cd1ca8507"
        ],
        [
            "assert (Out C A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "c5aa51775ac2d6725d437ebc1841e67fe453c920"
        ],
        [
            "assert (Out C D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
        ],
        [
            "assert (Out B A A) by (conclude lemma_ray4).",
            "VernacExtend",
            "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
        ],
        [
            "assert (Out B D D) by (conclude lemma_ray4).",
            "VernacExtend",
            "9dcb0def0987bcfefce142df69b06d620db93897"
        ],
        [
            "assert (Cong B A C D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "5b14881e6a377e1f67f365fddd1460bf9ec7f7a4"
        ],
        [
            "assert (Cong C A B D) by (forward_using lemma_congruenceflip).",
            "VernacExtend",
            "840515bc4985bfd0aeee699db95c05bc0905f6b7"
        ],
        [
            "assert (Cong B D C A) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "a1e08c85356bfda2aeb25f0f34b58751ef8026d7"
        ],
        [
            "assert (~ Col A B D).",
            "VernacExtend",
            "ffc0da0a0d65cc00c93dfb4c1e8c861b87b50798"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (eq D D) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "d0129992dde00ccde6907626e22196fb7717fb0b"
        ],
        [
            "assert (Col C D D) by (conclude_def Col ).",
            "VernacExtend",
            "d83231adb51ebdd8e8993f4fca06332c909ac166"
        ],
        [
            "assert (Meet A B C D) by (conclude_def Meet ).",
            "VernacExtend",
            "3841d60693b9b925aa29ab7795a09f1a233bc444"
        ],
        [
            "contradict.",
            "VernacExtend",
            "90406671bca524c80afc86c1ad59fdd000404b65"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (CongA A B D D C A) by (conclude_def CongA ).",
            "VernacExtend",
            "dfff10dd116bb40596dd049b51909fc29cc97a50"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "proposition_34",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((Par A C D B /\\ Par A B C D)) by (conclude_def PG ).",
                        "VernacExtend",
                        "e1e2aba94897824bbe74077d5ea1631f8a80cbb7"
                    ]
                },
                {
                    "command": [
                        "assert (Par A C B D) by (forward_using lemma_parallelflip).",
                        "VernacExtend",
                        "198590d70324f2c482f88012ac43c1628ce15804"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M D /\\ BetS C M B)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "c189e17a559ccd5e5169d419d2342ea0cf177a6d"
                    ]
                },
                {
                    "command": [
                        "assert (BetS B M C) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "ef59dc3b4f96f14f20e5c1410e767e762987ba2c"
                    ]
                },
                {
                    "command": [
                        "assert (Col B M C) by (conclude_def Col ).",
                        "VernacExtend",
                        "48d3455391aa6042e4c0824a684611b5af7c8a81"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "7063a14b6a5e5d46df26c1e86a2f3057b87e3bb9"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "4df950904e10e6c02dbd93543a6b743e3e012346"
                    ]
                },
                {
                    "command": [
                        "assert (neq A B) by (conclude_def Par ).",
                        "VernacExtend",
                        "0f5f92f16271f51f680b940c1d6320e437cdd5fa"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "a3656b868962e035aceb5e09bbfe0b66fd969ee4"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col B C A).",
                        "VernacExtend",
                        "f2ccde2b3f06377cdf6767f60a87564e90095b27"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B C) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "115803ade1f97d11f923db51e034b8a1961d4ba9"
                    ]
                },
                {
                    "command": [
                        "assert (eq C C) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "58ac3652b8294144f672cd30eb3468a526751f38"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D C) by (conclude_def Col ).",
                        "VernacExtend",
                        "a5c3d5eb1771de0bbde081130e12a688964681c9"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (TS A B C D) by (conclude_def TS ).",
                        "VernacExtend",
                        "e53ac596655ae152cf1133e6003c737d6995db2b"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C B C D) by (conclude proposition_29B).",
                        "VernacExtend",
                        "7875cf4bc359676f8f4dd94584177c90f33d00cb"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col B C D).",
                        "VernacExtend",
                        "1f400b0de914ae951dba021fa809d8f95a2c5c27"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D B) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "55f469aa33fdb3f1b33b588b41418f49f4e15fe4"
                    ]
                },
                {
                    "command": [
                        "assert (eq B B) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "00ae07b3d0c590585c3f543859688f9bdbb4d207"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B B) by (conclude_def Col ).",
                        "VernacExtend",
                        "ac6fe831a1522e9592f37d8b3ffd3c4256b9b8b4"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "assert (~ Meet A B C D) by (conclude_def Par ).",
                        "VernacExtend",
                        "4df950904e10e6c02dbd93543a6b743e3e012346"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C D D C B) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "6edea578a4bc6ca18488d9506cbb73bee1d82ccf"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B C D C B) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "79a8d84468c0b792b5611b7e791f70118180cddb"
                    ]
                },
                {
                    "command": [
                        "assert (Col C B M) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "c4e234e367413ef16013499457a5aa51ac86ab40"
                    ]
                },
                {
                    "command": [
                        "assert (nCol C B A).",
                        "VernacExtend",
                        "8dcc44307ebc97d0b3c6bc582bdd948dc53c2059"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (nCol B C A) by auto.",
                        "VernacExtend",
                        "bb94e1a70a7f9d1c57acfecbbf140043e38e3cbe"
                    ]
                },
                {
                    "command": [
                        "forward_using lemma_NCorder.",
                        "VernacExtend",
                        "d24008778cc02d3199e271648fbd0735d6835f44"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (TS A C B D) by (conclude_def TS ).",
                        "VernacExtend",
                        "c379f2537ceb527f3eac696cae6b35e9a681c952"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A C B C B D) by (conclude proposition_29B).",
                        "VernacExtend",
                        "965db1cee401bd3daae9d66e35be6cc7b3b23a67"
                    ]
                },
                {
                    "command": [
                        "assert (nCol A B C) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "cd01628f57b41b48ea9a56e812a43d2a7c7813d2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A A C B) by (conclude lemma_ABCequalsCBA).",
                        "VernacExtend",
                        "75c7a8ed71ec0c2c1ab6810ae39b2eedb30caa17"
                    ]
                },
                {
                    "command": [
                        "assert (CongA B C A C B D) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "d4122cf4fa3b524164e9cbdf31bf2af487c3e157"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle A B C) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "e214dba186dfa4662bfacc313daed8b05f69ce75"
                    ]
                },
                {
                    "command": [
                        "assert (nCol D C B) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "ff825bd66fbebf80ecfa0c7ab813fcef66469eff"
                    ]
                },
                {
                    "command": [
                        "assert (Triangle D C B) by (conclude_def Triangle ).",
                        "VernacExtend",
                        "085276e32309a794032971782a8f86c2b2063550"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B C C B) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "160cd2a9209d9b5a8c658c4c8051ae3146a0e8a3"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong A B D C /\\ Cong A C D B /\\ CongA B A C C D B)) by (conclude proposition_26A).",
                        "VernacExtend",
                        "84dcf665abc37c86af8c4859ccd330065c4272ab"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A B C D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "11fc28471f52743ccb0275cef19824b0159a1fce"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A C B D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "b1debfcf261146f894ebecb469d4414913f1eb92"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C A B D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "840515bc4985bfd0aeee699db95c05bc0905f6b7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C B B C) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "8cbef651e274a4cca2f2efce0af3c2dbd3990d60"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 C A B B D C) by (conclude_def Cong_3 ).",
                        "VernacExtend",
                        "feb2cfc67cea6c563f6d0560730880699caf875d"
                    ]
                },
                {
                    "command": [
                        "assert (CongA C A B B D C) by (conclude lemma_equalanglesflip).",
                        "VernacExtend",
                        "047ee0f16ffb5074d7c21227dd6baf39db153732"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D D A) by (conclude cn_equalityreverse).",
                        "VernacExtend",
                        "833a2d89143c7187994309d9c3a50fb3547e1d06"
                    ]
                },
                {
                    "command": [
                        "assert (eq A A) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "61d4f27cc63449a4c835629f7da173ce519b7510"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (neq A C) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "fb1bbf8304c14f46b4fe3e830a007c5b66466470"
                    ]
                },
                {
                    "command": [
                        "assert (neq C A) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "3e0de460aa8733a502d4f01459ffc0ac21de17d3"
                    ]
                },
                {
                    "command": [
                        "assert (neq C D) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "60ef787212d1e50f17c06cd6c1e425552182b5e5"
                    ]
                },
                {
                    "command": [
                        "assert (neq B A) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "edc0a33eb672e37cf423b1cc6edb20b0f06f7159"
                    ]
                },
                {
                    "command": [
                        "assert (neq D B) by (forward_using lemma_angledistinct).",
                        "VernacExtend",
                        "e3c216e36af84a67b286a04acb34e136a9ab5769"
                    ]
                },
                {
                    "command": [
                        "assert (neq B D) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "61403d246c7e61a1749f292f3789528cd1ca8507"
                    ]
                },
                {
                    "command": [
                        "assert (Out C A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "c5aa51775ac2d6725d437ebc1841e67fe453c920"
                    ]
                },
                {
                    "command": [
                        "assert (Out C D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "5edaa1cc05e74baaf8ca5eff45ab4cd858d1f9e7"
                    ]
                },
                {
                    "command": [
                        "assert (Out B A A) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "6c6ec3ac616495dbfa731f8b969ff3f1e02b3fce"
                    ]
                },
                {
                    "command": [
                        "assert (Out B D D) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "9dcb0def0987bcfefce142df69b06d620db93897"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B A C D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "5b14881e6a377e1f67f365fddd1460bf9ec7f7a4"
                    ]
                },
                {
                    "command": [
                        "assert (Cong C A B D) by (forward_using lemma_congruenceflip).",
                        "VernacExtend",
                        "840515bc4985bfd0aeee699db95c05bc0905f6b7"
                    ]
                },
                {
                    "command": [
                        "assert (Cong B D C A) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "a1e08c85356bfda2aeb25f0f34b58751ef8026d7"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A B D).",
                        "VernacExtend",
                        "ffc0da0a0d65cc00c93dfb4c1e8c861b87b50798"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (eq D D) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "d0129992dde00ccde6907626e22196fb7717fb0b"
                    ]
                },
                {
                    "command": [
                        "assert (Col C D D) by (conclude_def Col ).",
                        "VernacExtend",
                        "d83231adb51ebdd8e8993f4fca06332c909ac166"
                    ]
                },
                {
                    "command": [
                        "assert (Meet A B C D) by (conclude_def Meet ).",
                        "VernacExtend",
                        "3841d60693b9b925aa29ab7795a09f1a233bc444"
                    ]
                },
                {
                    "command": [
                        "contradict.",
                        "VernacExtend",
                        "90406671bca524c80afc86c1ad59fdd000404b65"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (CongA A B D D C A) by (conclude_def CongA ).",
                        "VernacExtend",
                        "dfff10dd116bb40596dd049b51909fc29cc97a50"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}