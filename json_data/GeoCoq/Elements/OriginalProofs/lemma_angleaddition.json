{
    "filename": "Elements/OriginalProofs/lemma_angleaddition.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesflip.",
            "VernacRequire",
            "470aa48ca885fca5e8fb8e040de779235668ecc4"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_9_5.",
            "VernacRequire",
            "4fd58b0597a5ce8aa925d3dcba7188a6ae1c5a96"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.proposition_14.",
            "VernacRequire",
            "26dd3b2c4032eb5a65dc8755bb78834dea77901a"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_angleaddition : forall A B C D E F P Q R a b c d e f p q r, SumA A B C D E F P Q R -> CongA A B C a b c -> CongA D E F d e f -> SumA a b c d e f p q r -> CongA P Q R p q r.",
            "VernacStartTheoremProof",
            "43f8b159c64906e0bd1ab8231373107584c2ce58"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists S, (CongA A B C P Q S /\\ CongA D E F S Q R /\\ BetS P S R)) by (conclude_def SumA );destruct Tf as [S];spliter.",
            "VernacExtend",
            "e1a20b17ec875d61ba826b2d91e3c87071148ca0"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists s, (CongA a b c p q s /\\ CongA d e f s q r /\\ BetS p s r)) by (conclude_def SumA );destruct Tf as [s];spliter.",
            "VernacExtend",
            "05e364a6257cc9c0456f5dac23301ef3ebc04c76"
        ],
        [
            "assert (nCol P Q S) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "958a59ae5790550a90c1b4223e7143d95deb724a"
        ],
        [
            "assert (nCol S Q R) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "0ec662de94b143914753cd64c69945f892d73bb5"
        ],
        [
            "assert (neq Q P) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "fc39b3364ef33fb07cbd251181b0f58b04352c53"
        ],
        [
            "assert (neq Q S) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "498bd6bd96eb4c54ff16c70163989877ec7673f9"
        ],
        [
            "assert (neq Q R) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "04ff0714b800831ff0abe50a8b27d1dd6f755b4e"
        ],
        [
            "assert (nCol p q s) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "30e5abf44a6c5a1182f02659be7d4401ef2de29e"
        ],
        [
            "assert (nCol s q r) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "034318fb4b6d9d88caf647cfb64d59b6884f937f"
        ],
        [
            "assert (neq q p) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "d97be936a74868b059e786c927188786d42e8c38"
        ],
        [
            "assert (neq q r) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "4f4de7194c6cd6fe1fb293a58b34bc0a6ed62808"
        ],
        [
            "assert (neq q s) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "03242edbcf626737bb59c7042814530b646aa7fe"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists G, (Out q p G /\\ Cong q G Q P)) by (conclude lemma_layoff);destruct Tf as [G];spliter.",
            "VernacExtend",
            "367bb22f5eabc26c7e8d4bbf1d9f5f925c6555f1"
        ],
        [
            "rename_H H;let Tf:=fresh in assert (Tf:exists H, (Out q s H /\\ Cong q H Q S)) by (conclude lemma_layoff);destruct Tf as [H];spliter.",
            "VernacExtend",
            "7b5c1770930542dfca6f0b42ef2da2b658f38230"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists K, (Out q r K /\\ Cong q K Q R)) by (conclude lemma_layoff);destruct Tf as [K];spliter.",
            "VernacExtend",
            "88751b9e4d8a0a9a945d8d83b9349450c73c3ca1"
        ],
        [
            "assert (CongA P Q S A B C) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "910a67bdc95419cf01444a403ffce1e92f5d07b7"
        ],
        [
            "assert (CongA P Q S a b c) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "8cf365459f05533c9ffdf6e3768edc34fc6bf909"
        ],
        [
            "assert (CongA P Q S p q s) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "c9e22ef91238977a9df3f32a6f21097ed8e78edd"
        ],
        [
            "assert (CongA P Q S G q H) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "24ee265241bf01db227db2a5c39a8da2c9b2c8ce"
        ],
        [
            "assert (CongA S Q R D E F) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "d5411831f6e0e372bdc3015a78f6e7697d60313d"
        ],
        [
            "assert (CongA S Q R d e f) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "937e31fdbdfe076e8fda4df63062560131c74018"
        ],
        [
            "assert (CongA S Q R s q r) by (conclude lemma_equalanglestransitive).",
            "VernacExtend",
            "93e06d60decc360fc0dfc1da4692f4d5dd81c87d"
        ],
        [
            "assert (CongA S Q R H q K) by (conclude lemma_equalangleshelper).",
            "VernacExtend",
            "b9e9df605354c46af570a35720507a465324d52f"
        ],
        [
            "assert (nCol G q H) by (conclude lemma_equalanglesNC).",
            "VernacExtend",
            "0aee6bbee37ef0df674511f32684b48b26bfbfe2"
        ],
        [
            "assert (CongA G q H P Q S) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "f3bdf67f83fbeffeb59d42ef98dfe688ddee67b8"
        ],
        [
            "assert ((Cong G H P S /\\ CongA q G H Q P S /\\ CongA q H G Q S P)) by (conclude proposition_04).",
            "VernacExtend",
            "a6967b76b56272d1d6a06963ed397fdd96376ea5"
        ],
        [
            "assert (CongA H q K S Q R) by (conclude lemma_equalanglessymmetric).",
            "VernacExtend",
            "e764c2714bc98831cfee216e835fd83cf55e43bc"
        ],
        [
            "assert ((Cong H K S R /\\ CongA q H K Q S R /\\ CongA q K H Q R S)) by (conclude proposition_04).",
            "VernacExtend",
            "b45c729473bd5cbb4b38e198106ea0ba52e601ca"
        ],
        [
            "assert (CongA G H q P S Q) by (conclude lemma_equalanglesflip).",
            "VernacExtend",
            "b6094978d7b1e8bfa19555530f7f0a7b73fd97bd"
        ],
        [
            "assert (eq Q Q) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "5b7edb63097c1388a6b5f7cdca8f660723b0d8c0"
        ],
        [
            "assert (neq S Q) by (forward_using lemma_NCdistinct).",
            "VernacExtend",
            "a556c687b6eb14afd6021db4e281507f46babbbd"
        ],
        [
            "assert (Out S Q Q) by (conclude lemma_ray4).",
            "VernacExtend",
            "228412f405d12506995741b69ba3f421b2b21af9"
        ],
        [
            "assert (Supp P S Q Q R) by (conclude_def Supp ).",
            "VernacExtend",
            "79942fcf32f13f0ba1b305d40338cf27c72da7a1"
        ],
        [
            "assert (RT G H q q H K) by (conclude_def RT ).",
            "VernacExtend",
            "fc02cdf1f2eac32b9802cbde76422e3af71c8949"
        ],
        [
            "assert (Col q s H) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "b5b7629548e1f5a5aa3b33d2233adc35c39ace3e"
        ],
        [
            "assert (Col q H s) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "3e22d3ce3356a7ba057bf885d11b451dcceaa4a5"
        ],
        [
            "assert (Col q p G) by (conclude lemma_rayimpliescollinear).",
            "VernacExtend",
            "d3549d9cb1854d27599106a2cd3c403ca5380b4d"
        ],
        [
            "assert (Col G q p) by (forward_using lemma_collinearorder).",
            "VernacExtend",
            "f426b224c38a67754dfab71d9656cf449852745f"
        ],
        [
            "assert (eq q q) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "1b2794cf48e80ec760579eace61c8ea4e105fdcb"
        ],
        [
            "assert (Col G q q) by (conclude_def Col ).",
            "VernacExtend",
            "e44e04844a054eb4a1e94d08a0b8809866fca566"
        ],
        [
            "assert (neq q p) by (conclude lemma_ray2).",
            "VernacExtend",
            "d36fd8f2dbb6b70d0f12f1f669e2a89a8287e96b"
        ],
        [
            "assert (neq p q) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "5626275d8d84e4f2aa2a623c9841a9d651b265f6"
        ],
        [
            "assert (nCol p q H) by (conclude lemma_NChelper).",
            "VernacExtend",
            "b1769c77cd90598cf2bad925cd85b24d18cc2e97"
        ],
        [
            "assert (nCol q H p) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "735803539201a92b142cb26f9d0a3a269c56e8a3"
        ],
        [
            "assert (TS p q H r) by (conclude_def TS ).",
            "VernacExtend",
            "87e0db3d13290e0eb7c2399063e673b57ebbcd17"
        ],
        [
            "assert (TS r q H p) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "f52feab2415d3e17f11e0accf4142ce02192a542"
        ],
        [
            "assert (Col q H q) by (conclude_def Col ).",
            "VernacExtend",
            "743fe5f1a665b7d1ee1d82cd2020c28d4289a8e3"
        ],
        [
            "assert (Out q K r) by (conclude lemma_ray5).",
            "VernacExtend",
            "83a7f46bdf63f9f0d29b7e05981c49de9c98a114"
        ],
        [
            "assert (TS K q H p) by (conclude lemma_9_5).",
            "VernacExtend",
            "d2a0110bc7c01e6ea4108fb49a1264f232a17c92"
        ],
        [
            "assert (TS p q H K) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "4dd85fb9a305d2434b36ddec9c14490868d39642"
        ],
        [
            "assert (Out q G p) by (conclude lemma_ray5).",
            "VernacExtend",
            "f0213b7a9b78dc15a730ff57d72d143b738733a0"
        ],
        [
            "assert (TS G q H K) by (conclude lemma_9_5).",
            "VernacExtend",
            "e45782153a62615181d1b407f6cbcf5daf2354b7"
        ],
        [
            "assert (TS K q H G) by (conclude lemma_oppositesidesymmetric).",
            "VernacExtend",
            "81b0ce1ff5954d085b143eb27e528d43c0c68b68"
        ],
        [
            "assert (neq q H) by (conclude lemma_raystrict).",
            "VernacExtend",
            "a4eb2224600bf7a29c57285d5109209319ec8591"
        ],
        [
            "assert (neq H q) by (conclude lemma_inequalitysymmetric).",
            "VernacExtend",
            "f4da475032657104457dc86b3dc92adf41f5e38f"
        ],
        [
            "assert (Out H q q) by (conclude lemma_ray4).",
            "VernacExtend",
            "3f43dd74e2dab332f2501c7ab8e7f80dc93c86bc"
        ],
        [
            "assert (BetS G H K) by (conclude proposition_14).",
            "VernacExtend",
            "562706bcc5c714abe7733eb8cf67192d8bb9a9b8"
        ],
        [
            "assert (Cong G K P R) by (conclude cn_sumofparts).",
            "VernacExtend",
            "e842abcbd44725f443e06a012aaf55c8ee881e40"
        ],
        [
            "assert (eq P P) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "e88188554de7f503b71386a0ce3b6c77c61879af"
        ],
        [
            "assert (eq R R) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "5717b4ce5380408a24b2f5d5ee26a24a214afe7d"
        ],
        [
            "assert (Out Q P P) by (conclude lemma_ray4).",
            "VernacExtend",
            "eb123aede5b6ffb8b3c837b04a599f27c2e5078e"
        ],
        [
            "assert (Out Q R R) by (conclude lemma_ray4).",
            "VernacExtend",
            "ff08466b7e3782fdd686822b0590bb94ec410133"
        ],
        [
            "assert (nCol P S Q) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7e464c87c3e4b74d41280bf397eea08b4a98fd34"
        ],
        [
            "assert (Col P S R) by (conclude_def Col ).",
            "VernacExtend",
            "0cab75d6574d5eecd07a88c94f40c12bf20daf3c"
        ],
        [
            "assert (eq P P) by (conclude cn_equalityreflexive).",
            "VernacExtend",
            "e88188554de7f503b71386a0ce3b6c77c61879af"
        ],
        [
            "assert (Col P S P) by (conclude_def Col ).",
            "VernacExtend",
            "ee02f9e21b446633e9a98f42046d6c4a0cd81679"
        ],
        [
            "assert (neq P R) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "36129bb6f9b9aceb049c0d515723b8a21d47eff0"
        ],
        [
            "assert (nCol P R Q) by (conclude lemma_NChelper).",
            "VernacExtend",
            "4fcca0b9779bb767985da9246c9186f82aa03383"
        ],
        [
            "assert (nCol P Q R) by (forward_using lemma_NCorder).",
            "VernacExtend",
            "7e4ff4ed9fe23d27fde30b5ffcae857cfb8f4814"
        ],
        [
            "assert (Cong Q P q G) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "c14fdfa5224ecbc8bc8bf822d44425a24968facc"
        ],
        [
            "assert (Cong Q R q K) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "51aaa12a52aca2d1e344de0838c18754b8709061"
        ],
        [
            "assert (Cong P R G K) by (conclude lemma_congruencesymmetric).",
            "VernacExtend",
            "51442f22b82120fab1ec25e22117832dee972839"
        ],
        [
            "assert (CongA P Q R p q r) by (conclude_def CongA ).",
            "VernacExtend",
            "8cc2a362cb67297d1750cfa1e1c4e78bae59c348"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_angleaddition",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists S, (CongA A B C P Q S /\\ CongA D E F S Q R /\\ BetS P S R)) by (conclude_def SumA );destruct Tf as [S];spliter.",
                        "VernacExtend",
                        "e1a20b17ec875d61ba826b2d91e3c87071148ca0"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists s, (CongA a b c p q s /\\ CongA d e f s q r /\\ BetS p s r)) by (conclude_def SumA );destruct Tf as [s];spliter.",
                        "VernacExtend",
                        "05e364a6257cc9c0456f5dac23301ef3ebc04c76"
                    ]
                },
                {
                    "command": [
                        "assert (nCol P Q S) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "958a59ae5790550a90c1b4223e7143d95deb724a"
                    ]
                },
                {
                    "command": [
                        "assert (nCol S Q R) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "0ec662de94b143914753cd64c69945f892d73bb5"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q P) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "fc39b3364ef33fb07cbd251181b0f58b04352c53"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q S) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "498bd6bd96eb4c54ff16c70163989877ec7673f9"
                    ]
                },
                {
                    "command": [
                        "assert (neq Q R) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "04ff0714b800831ff0abe50a8b27d1dd6f755b4e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol p q s) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "30e5abf44a6c5a1182f02659be7d4401ef2de29e"
                    ]
                },
                {
                    "command": [
                        "assert (nCol s q r) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "034318fb4b6d9d88caf647cfb64d59b6884f937f"
                    ]
                },
                {
                    "command": [
                        "assert (neq q p) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "d97be936a74868b059e786c927188786d42e8c38"
                    ]
                },
                {
                    "command": [
                        "assert (neq q r) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "4f4de7194c6cd6fe1fb293a58b34bc0a6ed62808"
                    ]
                },
                {
                    "command": [
                        "assert (neq q s) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "03242edbcf626737bb59c7042814530b646aa7fe"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists G, (Out q p G /\\ Cong q G Q P)) by (conclude lemma_layoff);destruct Tf as [G];spliter.",
                        "VernacExtend",
                        "367bb22f5eabc26c7e8d4bbf1d9f5f925c6555f1"
                    ]
                },
                {
                    "command": [
                        "rename_H H;let Tf:=fresh in assert (Tf:exists H, (Out q s H /\\ Cong q H Q S)) by (conclude lemma_layoff);destruct Tf as [H];spliter.",
                        "VernacExtend",
                        "7b5c1770930542dfca6f0b42ef2da2b658f38230"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists K, (Out q r K /\\ Cong q K Q R)) by (conclude lemma_layoff);destruct Tf as [K];spliter.",
                        "VernacExtend",
                        "88751b9e4d8a0a9a945d8d83b9349450c73c3ca1"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q S A B C) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "910a67bdc95419cf01444a403ffce1e92f5d07b7"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q S a b c) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "8cf365459f05533c9ffdf6e3768edc34fc6bf909"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q S p q s) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "c9e22ef91238977a9df3f32a6f21097ed8e78edd"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q S G q H) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "24ee265241bf01db227db2a5c39a8da2c9b2c8ce"
                    ]
                },
                {
                    "command": [
                        "assert (CongA S Q R D E F) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "d5411831f6e0e372bdc3015a78f6e7697d60313d"
                    ]
                },
                {
                    "command": [
                        "assert (CongA S Q R d e f) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "937e31fdbdfe076e8fda4df63062560131c74018"
                    ]
                },
                {
                    "command": [
                        "assert (CongA S Q R s q r) by (conclude lemma_equalanglestransitive).",
                        "VernacExtend",
                        "93e06d60decc360fc0dfc1da4692f4d5dd81c87d"
                    ]
                },
                {
                    "command": [
                        "assert (CongA S Q R H q K) by (conclude lemma_equalangleshelper).",
                        "VernacExtend",
                        "b9e9df605354c46af570a35720507a465324d52f"
                    ]
                },
                {
                    "command": [
                        "assert (nCol G q H) by (conclude lemma_equalanglesNC).",
                        "VernacExtend",
                        "0aee6bbee37ef0df674511f32684b48b26bfbfe2"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G q H P Q S) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "f3bdf67f83fbeffeb59d42ef98dfe688ddee67b8"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong G H P S /\\ CongA q G H Q P S /\\ CongA q H G Q S P)) by (conclude proposition_04).",
                        "VernacExtend",
                        "a6967b76b56272d1d6a06963ed397fdd96376ea5"
                    ]
                },
                {
                    "command": [
                        "assert (CongA H q K S Q R) by (conclude lemma_equalanglessymmetric).",
                        "VernacExtend",
                        "e764c2714bc98831cfee216e835fd83cf55e43bc"
                    ]
                },
                {
                    "command": [
                        "assert ((Cong H K S R /\\ CongA q H K Q S R /\\ CongA q K H Q R S)) by (conclude proposition_04).",
                        "VernacExtend",
                        "b45c729473bd5cbb4b38e198106ea0ba52e601ca"
                    ]
                },
                {
                    "command": [
                        "assert (CongA G H q P S Q) by (conclude lemma_equalanglesflip).",
                        "VernacExtend",
                        "b6094978d7b1e8bfa19555530f7f0a7b73fd97bd"
                    ]
                },
                {
                    "command": [
                        "assert (eq Q Q) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "5b7edb63097c1388a6b5f7cdca8f660723b0d8c0"
                    ]
                },
                {
                    "command": [
                        "assert (neq S Q) by (forward_using lemma_NCdistinct).",
                        "VernacExtend",
                        "a556c687b6eb14afd6021db4e281507f46babbbd"
                    ]
                },
                {
                    "command": [
                        "assert (Out S Q Q) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "228412f405d12506995741b69ba3f421b2b21af9"
                    ]
                },
                {
                    "command": [
                        "assert (Supp P S Q Q R) by (conclude_def Supp ).",
                        "VernacExtend",
                        "79942fcf32f13f0ba1b305d40338cf27c72da7a1"
                    ]
                },
                {
                    "command": [
                        "assert (RT G H q q H K) by (conclude_def RT ).",
                        "VernacExtend",
                        "fc02cdf1f2eac32b9802cbde76422e3af71c8949"
                    ]
                },
                {
                    "command": [
                        "assert (Col q s H) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "b5b7629548e1f5a5aa3b33d2233adc35c39ace3e"
                    ]
                },
                {
                    "command": [
                        "assert (Col q H s) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "3e22d3ce3356a7ba057bf885d11b451dcceaa4a5"
                    ]
                },
                {
                    "command": [
                        "assert (Col q p G) by (conclude lemma_rayimpliescollinear).",
                        "VernacExtend",
                        "d3549d9cb1854d27599106a2cd3c403ca5380b4d"
                    ]
                },
                {
                    "command": [
                        "assert (Col G q p) by (forward_using lemma_collinearorder).",
                        "VernacExtend",
                        "f426b224c38a67754dfab71d9656cf449852745f"
                    ]
                },
                {
                    "command": [
                        "assert (eq q q) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "1b2794cf48e80ec760579eace61c8ea4e105fdcb"
                    ]
                },
                {
                    "command": [
                        "assert (Col G q q) by (conclude_def Col ).",
                        "VernacExtend",
                        "e44e04844a054eb4a1e94d08a0b8809866fca566"
                    ]
                },
                {
                    "command": [
                        "assert (neq q p) by (conclude lemma_ray2).",
                        "VernacExtend",
                        "d36fd8f2dbb6b70d0f12f1f669e2a89a8287e96b"
                    ]
                },
                {
                    "command": [
                        "assert (neq p q) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "5626275d8d84e4f2aa2a623c9841a9d651b265f6"
                    ]
                },
                {
                    "command": [
                        "assert (nCol p q H) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "b1769c77cd90598cf2bad925cd85b24d18cc2e97"
                    ]
                },
                {
                    "command": [
                        "assert (nCol q H p) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "735803539201a92b142cb26f9d0a3a269c56e8a3"
                    ]
                },
                {
                    "command": [
                        "assert (TS p q H r) by (conclude_def TS ).",
                        "VernacExtend",
                        "87e0db3d13290e0eb7c2399063e673b57ebbcd17"
                    ]
                },
                {
                    "command": [
                        "assert (TS r q H p) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "f52feab2415d3e17f11e0accf4142ce02192a542"
                    ]
                },
                {
                    "command": [
                        "assert (Col q H q) by (conclude_def Col ).",
                        "VernacExtend",
                        "743fe5f1a665b7d1ee1d82cd2020c28d4289a8e3"
                    ]
                },
                {
                    "command": [
                        "assert (Out q K r) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "83a7f46bdf63f9f0d29b7e05981c49de9c98a114"
                    ]
                },
                {
                    "command": [
                        "assert (TS K q H p) by (conclude lemma_9_5).",
                        "VernacExtend",
                        "d2a0110bc7c01e6ea4108fb49a1264f232a17c92"
                    ]
                },
                {
                    "command": [
                        "assert (TS p q H K) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "4dd85fb9a305d2434b36ddec9c14490868d39642"
                    ]
                },
                {
                    "command": [
                        "assert (Out q G p) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "f0213b7a9b78dc15a730ff57d72d143b738733a0"
                    ]
                },
                {
                    "command": [
                        "assert (TS G q H K) by (conclude lemma_9_5).",
                        "VernacExtend",
                        "e45782153a62615181d1b407f6cbcf5daf2354b7"
                    ]
                },
                {
                    "command": [
                        "assert (TS K q H G) by (conclude lemma_oppositesidesymmetric).",
                        "VernacExtend",
                        "81b0ce1ff5954d085b143eb27e528d43c0c68b68"
                    ]
                },
                {
                    "command": [
                        "assert (neq q H) by (conclude lemma_raystrict).",
                        "VernacExtend",
                        "a4eb2224600bf7a29c57285d5109209319ec8591"
                    ]
                },
                {
                    "command": [
                        "assert (neq H q) by (conclude lemma_inequalitysymmetric).",
                        "VernacExtend",
                        "f4da475032657104457dc86b3dc92adf41f5e38f"
                    ]
                },
                {
                    "command": [
                        "assert (Out H q q) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "3f43dd74e2dab332f2501c7ab8e7f80dc93c86bc"
                    ]
                },
                {
                    "command": [
                        "assert (BetS G H K) by (conclude proposition_14).",
                        "VernacExtend",
                        "562706bcc5c714abe7733eb8cf67192d8bb9a9b8"
                    ]
                },
                {
                    "command": [
                        "assert (Cong G K P R) by (conclude cn_sumofparts).",
                        "VernacExtend",
                        "e842abcbd44725f443e06a012aaf55c8ee881e40"
                    ]
                },
                {
                    "command": [
                        "assert (eq P P) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "e88188554de7f503b71386a0ce3b6c77c61879af"
                    ]
                },
                {
                    "command": [
                        "assert (eq R R) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "5717b4ce5380408a24b2f5d5ee26a24a214afe7d"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q P P) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "eb123aede5b6ffb8b3c837b04a599f27c2e5078e"
                    ]
                },
                {
                    "command": [
                        "assert (Out Q R R) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "ff08466b7e3782fdd686822b0590bb94ec410133"
                    ]
                },
                {
                    "command": [
                        "assert (nCol P S Q) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7e464c87c3e4b74d41280bf397eea08b4a98fd34"
                    ]
                },
                {
                    "command": [
                        "assert (Col P S R) by (conclude_def Col ).",
                        "VernacExtend",
                        "0cab75d6574d5eecd07a88c94f40c12bf20daf3c"
                    ]
                },
                {
                    "command": [
                        "assert (eq P P) by (conclude cn_equalityreflexive).",
                        "VernacExtend",
                        "e88188554de7f503b71386a0ce3b6c77c61879af"
                    ]
                },
                {
                    "command": [
                        "assert (Col P S P) by (conclude_def Col ).",
                        "VernacExtend",
                        "ee02f9e21b446633e9a98f42046d6c4a0cd81679"
                    ]
                },
                {
                    "command": [
                        "assert (neq P R) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "36129bb6f9b9aceb049c0d515723b8a21d47eff0"
                    ]
                },
                {
                    "command": [
                        "assert (nCol P R Q) by (conclude lemma_NChelper).",
                        "VernacExtend",
                        "4fcca0b9779bb767985da9246c9186f82aa03383"
                    ]
                },
                {
                    "command": [
                        "assert (nCol P Q R) by (forward_using lemma_NCorder).",
                        "VernacExtend",
                        "7e4ff4ed9fe23d27fde30b5ffcae857cfb8f4814"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q P q G) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "c14fdfa5224ecbc8bc8bf822d44425a24968facc"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q R q K) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "51aaa12a52aca2d1e344de0838c18754b8709061"
                    ]
                },
                {
                    "command": [
                        "assert (Cong P R G K) by (conclude lemma_congruencesymmetric).",
                        "VernacExtend",
                        "51442f22b82120fab1ec25e22117832dee972839"
                    ]
                },
                {
                    "command": [
                        "assert (CongA P Q R p q r) by (conclude_def CongA ).",
                        "VernacExtend",
                        "8cc2a362cb67297d1750cfa1e1c4e78bae59c348"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}