{
    "filename": "Elements/OriginalProofs/lemma_lessthanbetween.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_ray5.",
            "VernacRequire",
            "8939dbe9243f062c6c64f3cf41cffbe849572870"
        ],
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_layoffunique.",
            "VernacRequire",
            "4b20bc5449b42902e35b442dfd079e69212b7bee"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_lessthanbetween : forall A B C, Lt A B A C -> Out A B C -> BetS A B C.",
            "VernacStartTheoremProof",
            "2dde720656e0992486ac177ecf55b7890d353247"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ Cong A M A B)) by (conclude_def Lt );destruct Tf as [M];spliter.",
            "VernacExtend",
            "b318244a371eca533d4b9ead2e452d51c2b5c8b3"
        ],
        [
            "assert (neq A M) by (forward_using lemma_betweennotequal).",
            "VernacExtend",
            "407201e66570093eecf4511ea06ce7ff3751330d"
        ],
        [
            "assert (Out A M C) by (conclude lemma_ray4).",
            "VernacExtend",
            "4b466f32126f1d21edd02447cf3b8b34cbf34fa1"
        ],
        [
            "assert (Out A C M) by (conclude lemma_ray5).",
            "VernacExtend",
            "a894d1e3f1c7ab4e359b99ba3b9b1317ba3a546f"
        ],
        [
            "assert (Out A C B) by (conclude lemma_ray5).",
            "VernacExtend",
            "76d14e7058f7185ac47127bf0b0c742d60898d60"
        ],
        [
            "assert (eq M B) by (conclude lemma_layoffunique).",
            "VernacExtend",
            "e38cae1fd330e1e6cd3f003079e32bddd66409e1"
        ],
        [
            "assert (BetS A B C) by (conclude cn_equalitysub).",
            "VernacExtend",
            "5869026fbe9591c129a81775f276dfdd706f5b1f"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_lessthanbetween",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ Cong A M A B)) by (conclude_def Lt );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "b318244a371eca533d4b9ead2e452d51c2b5c8b3"
                    ]
                },
                {
                    "command": [
                        "assert (neq A M) by (forward_using lemma_betweennotequal).",
                        "VernacExtend",
                        "407201e66570093eecf4511ea06ce7ff3751330d"
                    ]
                },
                {
                    "command": [
                        "assert (Out A M C) by (conclude lemma_ray4).",
                        "VernacExtend",
                        "4b466f32126f1d21edd02447cf3b8b34cbf34fa1"
                    ]
                },
                {
                    "command": [
                        "assert (Out A C M) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "a894d1e3f1c7ab4e359b99ba3b9b1317ba3a546f"
                    ]
                },
                {
                    "command": [
                        "assert (Out A C B) by (conclude lemma_ray5).",
                        "VernacExtend",
                        "76d14e7058f7185ac47127bf0b0c742d60898d60"
                    ]
                },
                {
                    "command": [
                        "assert (eq M B) by (conclude lemma_layoffunique).",
                        "VernacExtend",
                        "e38cae1fd330e1e6cd3f003079e32bddd66409e1"
                    ]
                },
                {
                    "command": [
                        "assert (BetS A B C) by (conclude cn_equalitysub).",
                        "VernacExtend",
                        "5869026fbe9591c129a81775f276dfdd706f5b1f"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}