{
    "filename": "Elements/OriginalProofs/lemma_rectanglereverse.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Elements.OriginalProofs.lemma_8_2.",
            "VernacRequire",
            "e9abf66a9a3cf17ce9402c70267a3e30baf0bce3"
        ],
        [
            "Section Euclid.",
            "VernacBeginSection",
            "e8e50ec22d132b98ae0c09eb2dc73d111e653cbb"
        ],
        [
            "Context `{Ax:euclidean_neutral_ruler_compass}.",
            "VernacContext",
            "bcd71c14b86cc5f40746e4240ceb67f5195dfb04"
        ],
        [
            "Lemma lemma_rectanglereverse : forall A B C D, RE A B C D -> RE D C B A.",
            "VernacStartTheoremProof",
            "aeda0a36d90047ae2b568485b1b1a9e49d3ed032"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).",
            "VernacExtend",
            "8c433dfcdf3d662bb0cadd2a1302790a9b6c157e"
        ],
        [
            "assert (Per A D C) by (conclude lemma_8_2).",
            "VernacExtend",
            "53444c0589647e2e28885976260985b84b3e4862"
        ],
        [
            "assert (Per D C B) by (conclude lemma_8_2).",
            "VernacExtend",
            "eaad1229164df19c995b29d875b85475e2e45125"
        ],
        [
            "assert (Per C B A) by (conclude lemma_8_2).",
            "VernacExtend",
            "3bc22b960a66ceb679922c391fdd15e68be9557f"
        ],
        [
            "assert (Per B A D) by (conclude lemma_8_2).",
            "VernacExtend",
            "4c6a3505d80aa29ddd1dc2c313bae797994e4233"
        ],
        [
            "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
            "VernacExtend",
            "41751579e3286704b7a7a049b78650364170be4c"
        ],
        [
            "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "77015f0993e40948997a4b78deeaea35782ca11f"
        ],
        [
            "assert (BetS D M B) by (conclude axiom_betweennesssymmetry).",
            "VernacExtend",
            "74b412eed2f09b18c6e55a9679a88d7c03f9a77a"
        ],
        [
            "assert (CR D B C A) by (conclude_def CR ).",
            "VernacExtend",
            "73dc5640b6f6cba4b819e6e42e6bb82f0c73a4f1"
        ],
        [
            "assert (RE D C B A) by (conclude_def RE ).",
            "VernacExtend",
            "240d16fe8c1a196c5d08d965347c4d8334feb110"
        ],
        [
            "close.",
            "VernacExtend",
            "46b53d211ce6c67d71299973c45589a8146396aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euclid.",
            "VernacEndSegment",
            "e81693cf20769b179ed48dc8060a53ad2401f040"
        ]
    ],
    "proofs": [
        {
            "name": "lemma_rectanglereverse",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).",
                        "VernacExtend",
                        "8c433dfcdf3d662bb0cadd2a1302790a9b6c157e"
                    ]
                },
                {
                    "command": [
                        "assert (Per A D C) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "53444c0589647e2e28885976260985b84b3e4862"
                    ]
                },
                {
                    "command": [
                        "assert (Per D C B) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "eaad1229164df19c995b29d875b85475e2e45125"
                    ]
                },
                {
                    "command": [
                        "assert (Per C B A) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "3bc22b960a66ceb679922c391fdd15e68be9557f"
                    ]
                },
                {
                    "command": [
                        "assert (Per B A D) by (conclude lemma_8_2).",
                        "VernacExtend",
                        "4c6a3505d80aa29ddd1dc2c313bae797994e4233"
                    ]
                },
                {
                    "command": [
                        "let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.",
                        "VernacExtend",
                        "41751579e3286704b7a7a049b78650364170be4c"
                    ]
                },
                {
                    "command": [
                        "assert (BetS C M A) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "77015f0993e40948997a4b78deeaea35782ca11f"
                    ]
                },
                {
                    "command": [
                        "assert (BetS D M B) by (conclude axiom_betweennesssymmetry).",
                        "VernacExtend",
                        "74b412eed2f09b18c6e55a9679a88d7c03f9a77a"
                    ]
                },
                {
                    "command": [
                        "assert (CR D B C A) by (conclude_def CR ).",
                        "VernacExtend",
                        "73dc5640b6f6cba4b819e6e42e6bb82f0c73a4f1"
                    ]
                },
                {
                    "command": [
                        "assert (RE D C B A) by (conclude_def RE ).",
                        "VernacExtend",
                        "240d16fe8c1a196c5d08d965347c4d8334feb110"
                    ]
                },
                {
                    "command": [
                        "close.",
                        "VernacExtend",
                        "46b53d211ce6c67d71299973c45589a8146396aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}