{
    "filename": "Meta_theory/Parallel_postulates/TCP_tarski.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Import GeoCoq.Axioms.parallel_postulates.",
            "VernacRequire",
            "7a0c16ded886b7215c8fe9fa66b079628545bc0e"
        ],
        [
            "Require Import GeoCoq.Meta_theory.Parallel_postulates.tarski_s_euclid_remove_degenerated_cases.",
            "VernacRequire",
            "c4a3e621f9db67626d77985647185065e086bdc4"
        ],
        [
            "Require Import GeoCoq.Tarski_dev.Annexes.perp_bisect.",
            "VernacRequire",
            "65d2293994b95e0348a36e61d0e32a2815273c43"
        ],
        [
            "Require Import GeoCoq.Tarski_dev.Ch12_parallel.",
            "VernacRequire",
            "5991b999496c8ab182b50b358d0c9b4e247ca365"
        ],
        [
            "Section TCP_tarski.",
            "VernacBeginSection",
            "2f77727ed5585f0b7d1dc1f877d334c4a45fe91b"
        ],
        [
            "Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.",
            "VernacContext",
            "c652196849f972e656c6c0437bc0c834b4161ae1"
        ],
        [
            "Lemma impossible_case_1 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet A B x -> Bet C y A -> Bet x T y -> Par_strict B C x y -> False.",
            "VernacStartTheoremProof",
            "be191e8fed60d94489cedb92fe8ab40ec22e17ab"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HADT HBCT HBDC HABx HACy HxTy HPar.",
            "VernacExtend",
            "9637eec1f44bbe553cb8e6a4ec4e24be80be9ba5"
        ],
        [
            "apply between_symmetry in HABx.",
            "VernacExtend",
            "20995f64a4794e4f4f9da4bad978c32b19f19e1d"
        ],
        [
            "assert (HI := inner_pasch x C A B y HABx HACy); destruct HI as [I [HBCI HIxy]].",
            "VernacExtend",
            "75a8115ffac7a6a66c95afd38d14e7a9187055d7"
        ],
        [
            "apply HPar; exists I; assert_cols; Col.",
            "VernacExtend",
            "a8a7e9b7d7ac970dd0262ce563ea3407a4cfb177"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_case_2 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Col A B x -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet y A C -> Bet x T y -> False.",
            "VernacStartTheoremProof",
            "fdf0c3bca0c77093a25376a51763312e7975386f"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HABx HADT HBCT HBDC HACy HxTy.",
            "VernacExtend",
            "5b342a7ea0bd1805c0aec3640ad9665f574d9412"
        ],
        [
            "apply between_symmetry in HACy.",
            "VernacExtend",
            "35cbd68583fdaff51310f9d70a2cdcab070829e3"
        ],
        [
            "assert (HI := inner_pasch C x y A T HACy HxTy); destruct HI as [I [HAIx HICT]].",
            "VernacExtend",
            "6885bc833c858711072ae5b644b751487ef4c118"
        ],
        [
            "assert (HAx : A <> x) by (intro; treat_equalities; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "a0d99142f6847cf10699ddc1ffc509334bba4a35"
        ],
        [
            "assert (HTS : TS A B C T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists I; split; Between; assert_cols; ColR); apply l9_9 in HTS.",
            "VernacExtend",
            "80724c7d8fe59d651475a128888406d93b18301f"
        ],
        [
            "apply HTS; apply one_side_transitivity with D.",
            "VernacExtend",
            "a72e32f34bf8a90dc7a6f1340fa6a743795c5a56"
        ],
        [
            "assert (HABB : Col A B B) by Col.",
            "VernacExtend",
            "768b4a65d7f125141a46a1e9167e5e9dea48441c"
        ],
        [
            "assert (HBDC' : Col C D B) by (assert_cols; Col).",
            "VernacExtend",
            "2f0d250fcd95f2cc773844c1641c9a4b20e2096a"
        ],
        [
            "assert (H := l9_19 A B C D B HABB HBDC'); rewrite H.",
            "VernacExtend",
            "eb3e636d706ff20803bc9fe3e61365979cf3e701"
        ],
        [
            "split; try (intro; apply HABC; Col).",
            "VernacExtend",
            "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "assert (HABA : Col A B A) by Col.",
            "VernacExtend",
            "fa568b67997f5a579b6a1d39eaa251f2f65c0a46"
        ],
        [
            "assert (HDTA : Col D T A) by (assert_cols; Col).",
            "VernacExtend",
            "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
        ],
        [
            "assert (H := l9_19 A B D T A HABA HDTA); rewrite H.",
            "VernacExtend",
            "db0d8801aaecf700e23ed4b6870b100990d8d8c9"
        ],
        [
            "split; try (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "782664dd5d7b53bb7464b635470e331a4165f121"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_case_3 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet B x A -> Bet x T y -> Par_strict B C x y -> False.",
            "VernacStartTheoremProof",
            "4549b0b08b255ee1b6baf592c137a4903787a157"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HADT HBCT HBDC HABx HxTy HPar.",
            "VernacExtend",
            "8f814e6d077b9fc7d0be3bf486cff2fd76f4ce8b"
        ],
        [
            "apply between_symmetry in HADT.",
            "VernacExtend",
            "e22f031ffcde1116723e6515ba23aed4a317c453"
        ],
        [
            "assert (HI := inner_pasch B T A x D HABx HADT); destruct HI as [I [HITx HBDI]].",
            "VernacExtend",
            "ceb2729258e65c8b6a0c72422aeb92fa14707c58"
        ],
        [
            "assert (HTx : T <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "bb1245f03d23fa63dde10f6d56a97d33d3533335"
        ],
        [
            "assert (HPar' : Par_strict B D x T) by (apply par_strict_col_par_strict with y; assert_cols; Col; apply par_strict_symmetry; apply par_strict_col_par_strict with C; Col; Par).",
            "VernacExtend",
            "79fb048107b18585cd9b00794a8b28f71f77e51b"
        ],
        [
            "apply HPar'; exists I; assert_cols; Col.",
            "VernacExtend",
            "1d517dac5886f6f2c61f66f268c9703d9c0b7466"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_case_4_1 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Col A C y -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet A x B \\/ Bet A B x -> Bet T y x -> False.",
            "VernacStartTheoremProof",
            "6ed0f8569698d4e2c2609a08cf9ed001fd1a366f"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HACy HADT HBCT HBDC HABx HTyx.",
            "VernacExtend",
            "42371cbfb4817ddfb7753444f67e9317fd4cd609"
        ],
        [
            "assert (HTS : TS A C x T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists y; split; assert_cols; Col; Between).",
            "VernacExtend",
            "f2a59466a91dceef6fd80a3fc5b891b8e4f6c640"
        ],
        [
            "assert (HAx : A <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "5d081b29e4df3fafda990563821155044a123cf0"
        ],
        [
            "assert (HOS : OS A C x B).",
            "VernacExtend",
            "d372d917a7743b6e62c35170d9bd76b4cd01d03d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HACA : Col A C A) by Col.",
            "VernacExtend",
            "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
        ],
        [
            "assert (HABx' : Col x B A) by (induction HABx; assert_cols; Col).",
            "VernacExtend",
            "0190e094ace28c7f13c1c75f31e0c4b32fc22ace"
        ],
        [
            "assert (H := l9_19 A C x B A HACA HABx'); rewrite H.",
            "VernacExtend",
            "57ea7cee8a946d40fefc7e840a8d11c3e50ff431"
        ],
        [
            "split; try (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "782664dd5d7b53bb7464b635470e331a4165f121"
        ],
        [
            "repeat (split; auto).",
            "VernacExtend",
            "fbc5463ee8164c7d7a0414a82c6ea4aa4f8c6b04"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HTS' : TS A C B T) by (apply l9_8_2 with x; assumption); clear HTS; clear HOS; rename HTS' into HTS; apply l9_9 in HTS.",
            "VernacExtend",
            "94304facebec9f9b74a9497aae8688d9497d246b"
        ],
        [
            "apply HTS; apply one_side_transitivity with D.",
            "VernacExtend",
            "a72e32f34bf8a90dc7a6f1340fa6a743795c5a56"
        ],
        [
            "assert (HACC : Col A C C) by Col.",
            "VernacExtend",
            "1848855770e4b1ef84c86eb7654f7d8ff4aa75f8"
        ],
        [
            "assert (HBDC' : Col B D C) by (assert_cols; Col).",
            "VernacExtend",
            "96b8f86d41403623616c7690c5ce54d04b01ecd4"
        ],
        [
            "assert (H := l9_19 A C B D C HACC HBDC'); rewrite H.",
            "VernacExtend",
            "bce9436094b7a670de460f07d372505241e2068e"
        ],
        [
            "split; try (intro; apply HABC; Col).",
            "VernacExtend",
            "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "assert (HACA : Col A C A) by Col.",
            "VernacExtend",
            "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
        ],
        [
            "assert (HDTA : Col D T A) by (assert_cols; Col).",
            "VernacExtend",
            "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
        ],
        [
            "assert (H := l9_19 A C D T A HACA HDTA); rewrite H.",
            "VernacExtend",
            "3a4465316ab00767f8c207dd968fd5b6cb3b18fb"
        ],
        [
            "split; try (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "782664dd5d7b53bb7464b635470e331a4165f121"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_case_4_2 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Col A C y -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet B A x -> Bet T y x -> Par_strict B C x y -> False.",
            "VernacStartTheoremProof",
            "15d13987ea32b99c08d98ad5f8dbd7e8b9c985ba"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HACy HADT HBCT HBDC HABx HTyx HPar.",
            "VernacExtend",
            "216b588308fa77833a18c2613c5418f7bca8818b"
        ],
        [
            "assert (HTS : TS B C A T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists D; split; assert_cols; Col; Between).",
            "VernacExtend",
            "4f1246848e6d408ed996cea5cdff3ad73d16fa4d"
        ],
        [
            "assert (HOS : OS B C A x).",
            "VernacExtend",
            "cad5f9eb44bf5ef203b9abcdb936ff61189e954d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HBCB : Col B C B) by Col.",
            "VernacExtend",
            "c82546176f978154b17b30a2621492efbee6ed45"
        ],
        [
            "assert (HABx' : Col A x B) by Col.",
            "VernacExtend",
            "9f0c804e23b5cbfe55dc0f412103c572dc28d31f"
        ],
        [
            "assert (H := l9_19 B C A x B HBCB HABx'); rewrite H.",
            "VernacExtend",
            "fca8aa951285a547efeeaebef9405ce62fffe035"
        ],
        [
            "split; try (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "782664dd5d7b53bb7464b635470e331a4165f121"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "intro; treat_equalities; intuition.",
            "VernacExtend",
            "ec6dd07543b097ef619459be05fce0ea8dd7a282"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HTS' : TS B C x T) by (apply l9_8_2 with A; assumption); clear HTS; clear HOS; destruct HTS' as [Hclear [Hclear' [I [HBCI HITx]]]]; clear Hclear; clear Hclear'.",
            "VernacExtend",
            "854aba9082109405d7b6d87e758fdef7363d7df3"
        ],
        [
            "assert (HTx : T <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "bb1245f03d23fa63dde10f6d56a97d33d3533335"
        ],
        [
            "assert (HPar' : Par_strict B C x T) by (apply par_strict_col_par_strict with y; assert_cols; Col).",
            "VernacExtend",
            "6580a5a3b4a90aab117b2a2e3b84dae45f397bfc"
        ],
        [
            "apply HPar'; exists I; assert_cols; Col.",
            "VernacExtend",
            "1d517dac5886f6f2c61f66f268c9703d9c0b7466"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_case_4 : forall A B C D T x y, A <> B -> A <> C -> A <> D -> A <> T -> B <> C -> B <> D -> B <> T -> C <> D -> C <> T -> D <> T -> x <> y -> ~ Col A B C -> Col A C y -> Bet A D T -> ~ Col B C T -> Bet B D C -> Col A B x -> Bet T y x -> Par_strict B C x y -> False.",
            "VernacStartTheoremProof",
            "16c99cf4776b16971661382b8030d59c0226f67e"
        ],
        [
            "intros A B C D T x y.",
            "VernacExtend",
            "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
        ],
        [
            "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
            "VernacExtend",
            "d05a515ad498dec41730231ea795c8ab1ab330f8"
        ],
        [
            "intros HABC HACy HADT HBCT HBDC HABx HTyx HPar.",
            "VernacExtend",
            "216b588308fa77833a18c2613c5418f7bca8818b"
        ],
        [
            "elim HABx; clear HABx; intro HABx.",
            "VernacExtend",
            "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
        ],
        [
            "apply impossible_case_4_1 with A B C D T x y; Col.",
            "VernacExtend",
            "1ea792c2f2968ed37b74bc153e2af788ddeb928f"
        ],
        [
            "elim HABx; clear HABx; intro HABx.",
            "VernacExtend",
            "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
        ],
        [
            "apply impossible_case_4_1 with A B C D T x y; Between.",
            "VernacExtend",
            "af3e23ece721edfefe725e8129df4efd606864b2"
        ],
        [
            "apply impossible_case_4_2 with A B C D T x y; Between.",
            "VernacExtend",
            "07f6f6fe879da0f2cb2a2512a625f6425556e724"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impossible_two_sides_not_col : forall A B C D T Y, A <> B -> A <> C -> A <> D -> A <> T -> A <> Y -> B <> C -> B <> D -> B <> T -> B <> Y -> C <> D -> C <> T -> C <> Y -> D <> T -> T <> Y -> ~ Col A B C -> Bet A D T -> ~ Col B C T -> Bet B D C -> Bet B Y T -> ~ Col A C Y.",
            "VernacStartTheoremProof",
            "f33d3807f87044bbf2d07fd0cb21ba48f390dde7"
        ],
        [
            "intros A B C D T Y HAB HAC HAD HAT HAY HBC HBD HBT HBY HCD HCT HCY HDT HTY.",
            "VernacExtend",
            "73f06c4c0b96fc50bf786b69ac78b067c9e89c97"
        ],
        [
            "intros HABC HADT HBCT HBDC HBYT.",
            "VernacExtend",
            "3aa2b7e9bc1ee46b07cc1da2bd03f978fb2faf73"
        ],
        [
            "intro HACY.",
            "VernacExtend",
            "2cee57dabec2a0f1811fc40b58b6f264636295a9"
        ],
        [
            "assert (HTS : TS A C B T) by (repeat (split; Col); try (intro; apply HABC; assert_cols; ColR); exists Y; split; Col; Between).",
            "VernacExtend",
            "01f354d340228c5e60e90204aac73c145dc3cc9c"
        ],
        [
            "apply l9_9 in HTS; apply HTS; apply one_side_transitivity with D.",
            "VernacExtend",
            "ab8e8eb7ad153d68b112d61ae95f4b4127a46c0b"
        ],
        [
            "assert (HACC : Col A C C) by Col.",
            "VernacExtend",
            "1848855770e4b1ef84c86eb7654f7d8ff4aa75f8"
        ],
        [
            "assert (HBDC' : Col B D C) by (assert_cols; Col).",
            "VernacExtend",
            "96b8f86d41403623616c7690c5ce54d04b01ecd4"
        ],
        [
            "assert (H := l9_19 A C B D C HACC HBDC'); rewrite H.",
            "VernacExtend",
            "bce9436094b7a670de460f07d372505241e2068e"
        ],
        [
            "split; try (intro; apply HABC; Col).",
            "VernacExtend",
            "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "assert (HACA : Col A C A) by Col.",
            "VernacExtend",
            "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
        ],
        [
            "assert (HDTA : Col D T A) by (assert_cols; Col).",
            "VernacExtend",
            "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
        ],
        [
            "assert (H := l9_19 A C D T A HACA HDTA); rewrite H.",
            "VernacExtend",
            "3a4465316ab00767f8c207dd968fd5b6cb3b18fb"
        ],
        [
            "split; try (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "782664dd5d7b53bb7464b635470e331a4165f121"
        ],
        [
            "repeat (split; Between).",
            "VernacExtend",
            "766936a2293f193b89ab69d482488557e41a9f77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle_circumscription_implies_tarski_s_euclid_aux : forall A B C D T X Y Z M1 Z1 M2 Z2, triangle_circumscription_principle -> A <> B -> A <> C -> A <> D -> A <> T -> A <> Y -> B <> C -> B <> D -> B <> T -> B <> Y -> C <> D -> C <> T -> C <> Y -> D <> T -> T <> X -> T <> Y -> X <> Y -> Y <> Z1 -> Y <> Z2 -> ~ Col A B C -> Col A B M1 -> Col A C M2 -> Bet A D T -> ~ Col B C T -> Bet B D C -> Col T Y Z -> Bet Y T X -> Bet Y M1 Z1 -> Bet Y M2 Z2 -> Cong Y T T X -> Cong Y M1 M1 Z1 -> Cong Y M2 M2 Z2 -> Perp B C T Z -> Perp A B Y Z1 -> Perp A C Y Z2 -> exists x, exists y, Bet A B x /\\ Bet A C y /\\ Bet x T y.",
            "VernacStartTheoremProof",
            "dca0f23c56c8ad6f555bfc2b18687286dd48ed3d"
        ],
        [
            "intros A B C D T X Y Z M1 Z1 M2 Z2; intro HTC.",
            "VernacExtend",
            "2a72fd5c0329855906359f5a9b3b3a86c04355ed"
        ],
        [
            "intros HAB HAC HAD HAT HAY HBC HBD HBT HBY HCD HCT HCY HDT HTX HTY HXY HYZ1 HYZ2.",
            "VernacExtend",
            "dceac55db54aee3f0e584af22adb8d511a63e837"
        ],
        [
            "intros HABC HABM1 HACM2 HADT HBCT HBDC HTYZ HYTX HYM1Z1.",
            "VernacExtend",
            "0a79824ed0816e88e6c9dcec99e303cd69929635"
        ],
        [
            "intros HYM2Z2 HCong5 HCong6 HCong7 HPerp1 HPerp2 HPerp3.",
            "VernacExtend",
            "2c0b54df55459fd75ca202a440eb3b63af233539"
        ],
        [
            "elim (col_dec X Y Z1); intro HXYZ1; elim (col_dec X Y Z2); intro HXYZ2.",
            "VernacExtend",
            "a7b360666d6665595e6bc95eedf562615061320f"
        ],
        [
            "exfalso; apply HABC; apply par_id.",
            "VernacExtend",
            "99304e0c6beaedd221edb977d28141a6b8480773"
        ],
        [
            "apply l12_9 with Y Z1; Perp.",
            "VernacExtend",
            "8ed3d9a78733946705041b4cf181f3389398bef1"
        ],
        [
            "exists A; right; left; split; Col.",
            "VernacExtend",
            "48c62ff8aaebfff68ae1bfadd540c81056289831"
        ],
        [
            "apply coplanar_perm_16, col_cop__cop with Z2; Cop; ColR.",
            "VernacExtend",
            "107e4ad518d580add3ff884b5a5aa7a64a2e4316"
        ],
        [
            "Cop.",
            "VernacExtend",
            "803603ff97b5917ad5ce603838c3939f775c8077"
        ],
        [
            "assert_diffs; apply coplanar_perm_16, col2_cop__cop with T Z; Cop; ColR.",
            "VernacExtend",
            "241ff39288f41e4e24eddae72a0322b61d91966a"
        ],
        [
            "apply perp_col1 with Z2; assert_diffs; Perp; ColR.",
            "VernacExtend",
            "a8d6003dd8e9e8986d0bc7205ed822a3c4f8d228"
        ],
        [
            "exfalso; apply HABC; apply par_id_1.",
            "VernacExtend",
            "840a9c4529bc3775065f61ecaee5a82b75bde95f"
        ],
        [
            "assert (Coplanar B C Y Z1) by (assert_diffs; apply col2_cop__cop with T Z; Cop; ColR).",
            "VernacExtend",
            "ed0d049041697a7be1ae4346f9de11e113615fc5"
        ],
        [
            "apply l12_9 with Y Z1; [Cop..| |Perp|].",
            "VernacExtend",
            "9d0c429b0f02eddcf5cf96f74e9516caab5efadc"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; [assumption|..|Cop].",
            "VernacExtend",
            "6c2f213075b11c646a07afbcd29873075018ca4f"
        ],
        [
            "assert_diffs; apply col_cop__cop with Z; Col; Cop.",
            "VernacExtend",
            "d0c1162b5e1f6a0710729d93fabdcfab805314c9"
        ],
        [
            "assert_diffs; apply col_cop__cop with Z; Cop; ColR.",
            "VernacExtend",
            "f7e8989261efd2692836f2e7043e4dbc42c32fa0"
        ],
        [
            "exists D; left; split; Col.",
            "VernacExtend",
            "730eba5d4f3293212ae93d6c576daa6d1d0b726b"
        ],
        [
            "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
            "VernacExtend",
            "41077067ea98e02a10200f591c8becb7cdf78ff4"
        ],
        [
            "exfalso; apply HABC; apply par_id_2.",
            "VernacExtend",
            "433d838ff1078498151a5f833eeacf77265b5284"
        ],
        [
            "assert (Coplanar B C Y Z2) by (assert_diffs; apply col2_cop__cop with T Z; Cop; ColR).",
            "VernacExtend",
            "bdc3e858193b0a5f41a16100ca458ddeefa2a992"
        ],
        [
            "apply l12_9 with Y Z2; [Cop..| |Perp|].",
            "VernacExtend",
            "470e9d0f094eec36d277ea9f61ae11f11831f43f"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; [assumption|..|Cop].",
            "VernacExtend",
            "6c2f213075b11c646a07afbcd29873075018ca4f"
        ],
        [
            "assert_diffs; apply col_cop__cop with Z; Col; Cop.",
            "VernacExtend",
            "d0c1162b5e1f6a0710729d93fabdcfab805314c9"
        ],
        [
            "assert_diffs; apply col_cop__cop with Z; Cop; ColR.",
            "VernacExtend",
            "f7e8989261efd2692836f2e7043e4dbc42c32fa0"
        ],
        [
            "exists D; left; split; Col.",
            "VernacExtend",
            "730eba5d4f3293212ae93d6c576daa6d1d0b726b"
        ],
        [
            "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
            "VernacExtend",
            "41077067ea98e02a10200f591c8becb7cdf78ff4"
        ],
        [
            "assert (H := HXYZ1); apply HTC in H; destruct H as [x [HCong1 [HCong2 HCop1]]]; exists x; assert (H := HXYZ2); apply HTC in H; destruct H as [y [HCong3 [HCong4 HCop2]]]; exists y.",
            "VernacExtend",
            "10a8418b7b0a6c03e151bf98d7fbe48d352893b6"
        ],
        [
            "assert (HYM1 : Y <> M1) by (intro; treat_equalities; auto).",
            "VernacExtend",
            "02c987d637f18677a4f53ba48bb32b6ce56975e5"
        ],
        [
            "assert (HYM2 : Y <> M2) by (intro; treat_equalities; auto).",
            "VernacExtend",
            "0d31590eb5151f1a313b457e477cdd6d51f087d8"
        ],
        [
            "assert (HCopA : Coplanar B C T A) by (exists D; left; split; Col).",
            "VernacExtend",
            "c5941d5742bc987d360ef19aa7c1b95363ea8101"
        ],
        [
            "assert (HCopB : Coplanar B C T B) by Cop.",
            "VernacExtend",
            "16c7ac2e5981ab14350151818031a8c1eb698046"
        ],
        [
            "assert (HCopC : Coplanar B C T C) by Cop.",
            "VernacExtend",
            "145800985a2aa011b646eb6a0a132d3e0ee3574c"
        ],
        [
            "assert (HCopT : Coplanar B C T T) by Cop.",
            "VernacExtend",
            "8ae210d65d4d7fc0d36e5b71bb36475cbee6f80a"
        ],
        [
            "assert (HCopZ : Coplanar B C T Z) by Cop.",
            "VernacExtend",
            "9ea89e2db1cf068e32d29acabe193c936e3d95f9"
        ],
        [
            "assert (HCopY : Coplanar B C T Y) by (assert_diffs; apply col_cop__cop with Z; Col).",
            "VernacExtend",
            "eb59173b926c9f260096e12d2fe17899c09f7569"
        ],
        [
            "assert (HCopX : Coplanar B C T X) by (apply col_cop__cop with Y; Col).",
            "VernacExtend",
            "adef66fb062bc4c7cafe821e500be0076f7712eb"
        ],
        [
            "assert (HCopZ1 : Coplanar B C T Z1).",
            "VernacExtend",
            "d44fa50fa7fcd164016695e77b22852d6b0ea910"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (~ Col A B Y).",
            "VernacExtend",
            "81662888905c92204ad36d39722ec957707b2dfb"
        ],
        [
            "intro; destruct (perp_not_col2 A B Y Z1) as [|HNCol]; Perp; apply HNCol; ColR.",
            "VernacExtend",
            "8ea4aaff749468e7fcce0b563b7c3ef614f449bd"
        ],
        [
            "apply coplanar_pseudo_trans with A B Y; [| |apply coplanar_pseudo_trans with B C T..|]; Cop.",
            "VernacExtend",
            "ddd15e682dbfd034657862ae0bf45d828d7c10ca"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HCopZ2 : Coplanar B C T Z2).",
            "VernacExtend",
            "716d0656124b45e1c4d638d69d2b3ccc4b87a204"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (~ Col A C Y).",
            "VernacExtend",
            "80baa839764d0b7d77439b5344fdc3a66b0bc4b2"
        ],
        [
            "intro; destruct (perp_not_col2 A C Y Z2) as [|HNCol]; Perp; apply HNCol; ColR.",
            "VernacExtend",
            "75023c6917d302508d42ce2b06374e47a672ece4"
        ],
        [
            "apply coplanar_pseudo_trans with A C Y; [|apply coplanar_pseudo_trans with B C T| |apply coplanar_pseudo_trans with B C T|]; Cop.",
            "VernacExtend",
            "98bf969905d49c517a548fc99696aa736df48444"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HCopx : Coplanar B C T x).",
            "VernacExtend",
            "530384b933e8fc75fc4d82a53b4518efb7f1f6a0"
        ],
        [
            "apply coplanar_pseudo_trans with X Y Z1; trivial; apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "646c117292874149ef4b33de8c92adcba14be9c2"
        ],
        [
            "assert (HCopy : Coplanar B C T y).",
            "VernacExtend",
            "e8c69f18ef68a59d6ba55915a64792c70eefc0a7"
        ],
        [
            "apply coplanar_pseudo_trans with X Y Z2; trivial; apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "906b5522869267cd6a54a174452666f645cd4dd9"
        ],
        [
            "assert (HCop : Coplanar X Y x y).",
            "VernacExtend",
            "5634f3303c29e4f641166ceb4d22cc11be8cb75e"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
        ],
        [
            "assert (HxTy : Col x T y) by (elim (eq_dec_points T x); intro; elim (eq_dec_points T y); intro; try (subst; Col); apply col_permutation_4; apply cop_perp2__col with X Y; trivial; apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong; Cop).",
            "VernacExtend",
            "46c894f9f209be9c94f61c5f5e999b94fbe8ea6a"
        ],
        [
            "assert (HABx : Col A B x).",
            "VernacExtend",
            "fa796b2df5f7e6039b99856d54983c1f73d2aa75"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "elim (eq_dec_points A M1); intro HAM1; subst.",
            "VernacExtend",
            "6659ed3430c53340665e588faf65736dcea94a3a"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply cong_cop2_perp_bisect_col with Y Z1; trivial.",
            "VernacExtend",
            "34046f3f61326fceaf9eea85d6d1aecc76f594e0"
        ],
        [
            "exists M1; left; split; Col.",
            "VernacExtend",
            "1d0e97287cc87d6f9e4dbfd718c17a695248b2b6"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
        ],
        [
            "apply cong_transitivity with X x; Cong.",
            "VernacExtend",
            "cea7761695b21ed7ed5bc5e645477c45ca19a0f9"
        ],
        [
            "apply perp_mid_perp_bisect; try split; Cong.",
            "VernacExtend",
            "9e44a79964541e4d6ff276577ce85972a1bc520a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Col M1 A x).",
            "VernacExtend",
            "097c56d05e4129d3cb77c5f82e48e895af37139e"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply cong_cop2_perp_bisect_col with Y Z1; trivial.",
            "VernacExtend",
            "34046f3f61326fceaf9eea85d6d1aecc76f594e0"
        ],
        [
            "exists M1; left; split; Col.",
            "VernacExtend",
            "1d0e97287cc87d6f9e4dbfd718c17a695248b2b6"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
        ],
        [
            "apply cong_transitivity with X x; Cong.",
            "VernacExtend",
            "cea7761695b21ed7ed5bc5e645477c45ca19a0f9"
        ],
        [
            "apply perp_mid_perp_bisect; try split; Cong.",
            "VernacExtend",
            "9e44a79964541e4d6ff276577ce85972a1bc520a"
        ],
        [
            "apply perp_left_comm; apply perp_col with B; Col.",
            "VernacExtend",
            "febc842d73f740d267a140c635e220aee29c1d91"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "ColR.",
            "VernacExtend",
            "0b35ec58454f3477d058acbaeb25f2751768cf91"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HACy : Col A C y).",
            "VernacExtend",
            "036eaf78a3c9d5f0e94b5f45c17e47710d1dfe03"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "elim (eq_dec_points A M2); intro HAM1; subst.",
            "VernacExtend",
            "021f28bca0fc78414d20fff01a8a94397293af7d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply cong_cop2_perp_bisect_col with Y Z2; trivial.",
            "VernacExtend",
            "5c293e57ed87cf851dc3381849c3ae2ef5694f8c"
        ],
        [
            "exists M2; left; split; Col.",
            "VernacExtend",
            "9853e7f82d5ab29706d74f933736391963ccc40a"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
        ],
        [
            "apply cong_transitivity with X y; Cong.",
            "VernacExtend",
            "03f550915d8c5e49a742b121485ed11d49151c08"
        ],
        [
            "apply perp_mid_perp_bisect; try split; Cong.",
            "VernacExtend",
            "9e44a79964541e4d6ff276577ce85972a1bc520a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Col M2 A y).",
            "VernacExtend",
            "a2a36a4d410484353deb271b75a0ff9b048d5f88"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply cong_cop2_perp_bisect_col with Y Z2; trivial.",
            "VernacExtend",
            "5c293e57ed87cf851dc3381849c3ae2ef5694f8c"
        ],
        [
            "exists M2; left; split; Col.",
            "VernacExtend",
            "9853e7f82d5ab29706d74f933736391963ccc40a"
        ],
        [
            "apply coplanar_pseudo_trans with B C T; assumption.",
            "VernacExtend",
            "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
        ],
        [
            "apply cong_transitivity with X y; Cong.",
            "VernacExtend",
            "03f550915d8c5e49a742b121485ed11d49151c08"
        ],
        [
            "apply perp_mid_perp_bisect; try split; Cong.",
            "VernacExtend",
            "9e44a79964541e4d6ff276577ce85972a1bc520a"
        ],
        [
            "apply perp_left_comm; apply perp_col with C; Col.",
            "VernacExtend",
            "004e3a2fd4a9cc866339d73ed49bfeebad04586a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "ColR.",
            "VernacExtend",
            "0b35ec58454f3477d058acbaeb25f2751768cf91"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Hxy : x <> y).",
            "VernacExtend",
            "752b4229abc27991e4ed5e7e3aa1fdd78aab20be"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro; treat_equalities.",
            "VernacExtend",
            "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
        ],
        [
            "assert (A = x) by (apply l6_21 with A B C A; Col); treat_equalities.",
            "VernacExtend",
            "5e49190ced5bb12e307b6d04671ca2de11525b56"
        ],
        [
            "assert (H : Par B C A T).",
            "VernacExtend",
            "c696b10ba0b0293bda6363438d32e1f5cabbf98c"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply l12_9 with X Y; try (apply coplanar_pseudo_trans with B C T; assumption).",
            "VernacExtend",
            "d9e0ff2a26929638bc13f1b76fa657ce750fe8e1"
        ],
        [
            "apply perp_sym; apply perp_col2 with Z T; Perp; assert_cols; ColR.",
            "VernacExtend",
            "ca6fec57bc3c4ec667db095751707578bc3185ef"
        ],
        [
            "apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong.",
            "VernacExtend",
            "b090c9dd0a46f8aac10dfc0b58bba4e9256937ec"
        ],
        [
            "exists T; left; split; Col.",
            "VernacExtend",
            "cb1d3ffb59ce1a1752f068696730d13d7e64ed5a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "elim H; clear H; intro H.",
            "VernacExtend",
            "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
        ],
        [
            "apply H; exists D; assert_cols; Col.",
            "VernacExtend",
            "7ea2be297d6454ee2c33d74fe741d9cd835ac145"
        ],
        [
            "spliter; apply HABC; assert_cols; ColR.",
            "VernacExtend",
            "f588da60875093dc52c01810d34fa0adb0d06aa2"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HPar : Par B C x y).",
            "VernacExtend",
            "8e4eb486721f099631d2b57a57cfbfc08b83707e"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply l12_9 with X Y; try (apply coplanar_pseudo_trans with B C T; assumption).",
            "VernacExtend",
            "d9e0ff2a26929638bc13f1b76fa657ce750fe8e1"
        ],
        [
            "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
            "VernacExtend",
            "41077067ea98e02a10200f591c8becb7cdf78ff4"
        ],
        [
            "apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong; Cop.",
            "VernacExtend",
            "03297892fa01b7f41433ed384d4cbe9da836cdd3"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "clear HPerp1; clear HPerp2; clear HPerp3.",
            "VernacExtend",
            "412448dac350908c336e95e3f8163defcce84c6c"
        ],
        [
            "clear HCong1; clear HCong2; clear HCong3; clear HCong4.",
            "VernacExtend",
            "bbd704c6c443e33c5025af8a3bdccc7d7b517b8b"
        ],
        [
            "assert (HPar' : Par_strict B C x y) by (elim HPar; clear HPar; intro HPar; try assumption; spliter; exfalso; apply HABC; assert_cols; ColR); clear HPar; rename HPar' into HPar.",
            "VernacExtend",
            "16476834b25be08ba518e09863f91dad4116c311"
        ],
        [
            "elim HxTy; clear HxTy; intro HxTy.",
            "VernacExtend",
            "af0ff8cc442b494c40ba0dc18ed327b9d7e64ae8"
        ],
        [
            "elim HABx; clear HABx; intro HABx.",
            "VernacExtend",
            "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
        ],
        [
            "elim HACy; clear HACy; intro HACy; auto.",
            "VernacExtend",
            "6addc762901cb6c69c15f6dab4061ad9ae2b8e94"
        ],
        [
            "elim HACy; clear HACy; intro HACy.",
            "VernacExtend",
            "2ef26063c00132c282d4a2e614c2188b06eb1e81"
        ],
        [
            "exfalso; apply impossible_case_1 with A B C D T x y; assumption.",
            "VernacExtend",
            "1a592411ed0da78e824b88da874326d9534a7e66"
        ],
        [
            "exfalso; apply impossible_case_2 with A B C D T x y; assert_cols; Col.",
            "VernacExtend",
            "0f65f3861d8492f808cc154f8a63eb102fc5a26c"
        ],
        [
            "elim HABx; clear HABx; intro HABx.",
            "VernacExtend",
            "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
        ],
        [
            "exfalso; apply impossible_case_3 with A B C D T x y; assumption.",
            "VernacExtend",
            "d43608008cf3ec106009136537b2fab0e03f3ef3"
        ],
        [
            "exfalso; apply impossible_case_2 with A C B D T y x; assert_cols; Col; Between.",
            "VernacExtend",
            "e57b3ccaef1e96f15f1e8ef3eed73e58bbaf4fc7"
        ],
        [
            "elim HxTy; clear HxTy; intro HxTy.",
            "VernacExtend",
            "af0ff8cc442b494c40ba0dc18ed327b9d7e64ae8"
        ],
        [
            "exfalso; apply impossible_case_4 with A B C D T x y; assumption.",
            "VernacExtend",
            "dba2ce2f7cdd9a972dc3380928eca084a441d437"
        ],
        [
            "exfalso; apply impossible_case_4 with A C B D T y x; Between; Col; Par.",
            "VernacExtend",
            "91d9a63f728df4834ac9bfb9b9d689530ceb1bfe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle_circumscription_implies_tarski_s_euclid : triangle_circumscription_principle -> tarski_s_parallel_postulate.",
            "VernacStartTheoremProof",
            "72d903f5c99780c2d66a1949aea3da1d2d4a03c0"
        ],
        [
            "unfold tarski_s_parallel_postulate.",
            "VernacExtend",
            "8a2a6e351107e83ae56436a24ff6e3de68149110"
        ],
        [
            "intro HTC; apply tarski_s_euclid_remove_degenerated_cases.",
            "VernacExtend",
            "ec858db623b54359ca8a6dd3a3df87d2e0454984"
        ],
        [
            "intros A B C D T HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT HABC HADT HBDC; assert (HBCT : ~ Col B C T) by (intro; apply HABC; assert_cols; ColR).",
            "VernacExtend",
            "8b02c9014770c4c79b9d767221fad18dc9bb8d7e"
        ],
        [
            "assert (HY := l8_18_existence B C T HBCT); destruct HY as [Y [HBCY HPerp]].",
            "VernacExtend",
            "08cbe65f47fb543529dca93f703d1fa2161e6862"
        ],
        [
            "elim (eq_dec_points B Y); intro HBY; elim (eq_dec_points C Y); intro HCY; treat_equalities.",
            "VernacExtend",
            "eb8e1b0d10e46cde6c81b3fa6350f6c90da9db10"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "exfalso; apply HBCT; Col.",
            "VernacExtend",
            "baba53056d131f5fd6d1f015ef662be63c7a016f"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HY := midpoint_existence B T); destruct HY as [Y HY].",
            "VernacExtend",
            "6acdd41af8295d013ba60ccb541e4ddb5fd600c4"
        ],
        [
            "assert (HAY : A <> Y) by (intro; treat_equalities; assert_cols; apply HABC; ColR).",
            "VernacExtend",
            "1a0dab00fcd0b60edd00ad24c768276d25d17a44"
        ],
        [
            "assert (H := midpoint_distinct_1 Y B T HBT HY); destruct H as [HBY HTY]; apply not_eq_sym in HBY; apply not_eq_sym in HTY.",
            "VernacExtend",
            "286b27f7ac3e4e8c110233c0c3cbbf70753c6762"
        ],
        [
            "assert (HCY : C <> Y) by (intro; subst; apply HBCT; assert_cols; Col).",
            "VernacExtend",
            "f871db9c4c75947765ab852638586dfa2e7fa371"
        ],
        [
            "destruct HY as [HBTY HBYTY].",
            "VernacExtend",
            "34344e6621d6597bb615fe50afdbe1ce37e9dcad"
        ],
        [
            "assert (HACY : ~ Col A C Y) by (apply impossible_two_sides_not_col with B D T; assumption).",
            "VernacExtend",
            "331f351dda28db993e9e6455ff91c891c23eca83"
        ],
        [
            "assert (HX := symmetric_point_construction Y T); destruct HX as [X HX].",
            "VernacExtend",
            "7e6f9855197e6e8a0a4fc086802347ca1ced48e5"
        ],
        [
            "assert (H := midpoint_distinct_2 T Y X HTY HX); destruct H as [HTX HXY]; apply not_eq_sym in HTX.",
            "VernacExtend",
            "f75dd543a7e7c55a856797b25fb6c06a9d17a638"
        ],
        [
            "destruct HX as [HXTY HXTYT].",
            "VernacExtend",
            "c5a77667c95d3bd9ea1be4f5892f96383d34b5a7"
        ],
        [
            "assert (HZ1 := l10_2_existence A B Y); destruct HZ1 as [Z1 HZ1].",
            "VernacExtend",
            "3a444c0e16c97de95da43482fa128574049615c8"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; destruct HZ1 as [Hclear HZ1]; try contradiction; clear Hclear.",
            "VernacExtend",
            "fb26ddb7714e297f2d866c2e7546c2419cd992f1"
        ],
        [
            "destruct HZ1 as [[M1 [[HXM1Z1 HM1XM1Z1] HABM1]] HZ1].",
            "VernacExtend",
            "64fa52fc64ac378930b74fa228ef354bc2c8d9fd"
        ],
        [
            "assert (HZ2 := l10_2_existence A C Y); destruct HZ2 as [Z2 HZ2].",
            "VernacExtend",
            "468b888bb7492fae66917094a4aebb4eaa1177a7"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; destruct HZ2 as [Hclear HZ2]; try contradiction; clear Hclear.",
            "VernacExtend",
            "50b493574b5ed1cb165d6d56eed1ad7873e4112c"
        ],
        [
            "destruct HZ2 as [[M2 [[HXM2Z2 HM2XM2Z2] HACM2]] HZ2].",
            "VernacExtend",
            "6e40977d7e5b08d174c2fc92b0d5f1f120eda02a"
        ],
        [
            "elim (eq_dec_points Y Z1); intro HYZ1; treat_equalities.",
            "VernacExtend",
            "e5f364ef520978b49a270971730a3878eb79941f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HFalse : Col A B C) by (assert_cols; ColR); contradiction.",
            "VernacExtend",
            "577e75ddb5f275bd7446e01550902f7b35e7b54c"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; try contradiction.",
            "VernacExtend",
            "3f4c10985609fa3069d24b958b0ae83ed7250ae1"
        ],
        [
            "elim (eq_dec_points Y Z2); intro HYZ2; treat_equalities; try contradiction.",
            "VernacExtend",
            "5eb21e47197d8848cd64b9bf364e80baa49f48b7"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; try contradiction.",
            "VernacExtend",
            "90f96c502848eb37b36efec22a7fd84a98ebccbe"
        ],
        [
            "apply triangle_circumscription_implies_tarski_s_euclid_aux with D X Y B M1 Z1 M2 Z2; try assumption.",
            "VernacExtend",
            "ed0862ea3bde089b6e58987a58711a5e31835363"
        ],
        [
            "assert_cols; Col.",
            "VernacExtend",
            "62b83865510088e0ab540dddf5a920fe7db9e4b5"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HY := midpoint_existence C T); destruct HY as [Y HY].",
            "VernacExtend",
            "198adbd169ab59afa378717359220123df13309e"
        ],
        [
            "assert (HAY : A <> Y) by (intro; treat_equalities; assert_cols; apply HABC; ColR).",
            "VernacExtend",
            "1a0dab00fcd0b60edd00ad24c768276d25d17a44"
        ],
        [
            "assert (H := midpoint_distinct_1 Y C T HCT HY); destruct H as [HCY HTY]; apply not_eq_sym in HCY; apply not_eq_sym in HTY.",
            "VernacExtend",
            "3965acfe3b581ed1ef041c900662caad0095e182"
        ],
        [
            "assert (HBY : B <> Y) by (intro; subst; apply HBCT; assert_cols; Col).",
            "VernacExtend",
            "3740a70c7f55b4fad12d27742670939a3c177af2"
        ],
        [
            "destruct HY as [HCTY HCYTY].",
            "VernacExtend",
            "ba5fe3a7f7030a3f763e68e5d3e745ffbd68d991"
        ],
        [
            "assert (HACY : ~ Col A B Y) by (apply impossible_two_sides_not_col with C D T; Between; Col).",
            "VernacExtend",
            "7a148a32dde438b5f9501bb16f29a495bd969e51"
        ],
        [
            "assert (HX := symmetric_point_construction Y T); destruct HX as [X HX].",
            "VernacExtend",
            "7e6f9855197e6e8a0a4fc086802347ca1ced48e5"
        ],
        [
            "assert (H := midpoint_distinct_2 T Y X HTY HX); destruct H as [HTX HXY]; apply not_eq_sym in HTX.",
            "VernacExtend",
            "f75dd543a7e7c55a856797b25fb6c06a9d17a638"
        ],
        [
            "destruct HX as [HXTY HXTYT].",
            "VernacExtend",
            "c5a77667c95d3bd9ea1be4f5892f96383d34b5a7"
        ],
        [
            "assert (HZ1 := l10_2_existence A B Y); destruct HZ1 as [Z1 HZ1].",
            "VernacExtend",
            "3a444c0e16c97de95da43482fa128574049615c8"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; destruct HZ1 as [Hclear HZ1]; try contradiction; clear Hclear.",
            "VernacExtend",
            "fb26ddb7714e297f2d866c2e7546c2419cd992f1"
        ],
        [
            "destruct HZ1 as [[M1 [[HXM1Z1 HM1XM1Z1] HABM1]] HZ1].",
            "VernacExtend",
            "64fa52fc64ac378930b74fa228ef354bc2c8d9fd"
        ],
        [
            "assert (HZ2 := l10_2_existence A C Y); destruct HZ2 as [Z2 HZ2].",
            "VernacExtend",
            "468b888bb7492fae66917094a4aebb4eaa1177a7"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; destruct HZ2 as [Hclear HZ2]; try contradiction; clear Hclear.",
            "VernacExtend",
            "50b493574b5ed1cb165d6d56eed1ad7873e4112c"
        ],
        [
            "destruct HZ2 as [[M2 [[HXM2Z2 HM2XM2Z2] HACM2]] HZ2].",
            "VernacExtend",
            "6e40977d7e5b08d174c2fc92b0d5f1f120eda02a"
        ],
        [
            "elim (eq_dec_points Y Z2); intro HYZ2; treat_equalities.",
            "VernacExtend",
            "12c5bfefbe3b3efce3b7a0880514f362d6c45ad5"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HFalse : Col A B C) by (assert_cols; ColR); contradiction.",
            "VernacExtend",
            "577e75ddb5f275bd7446e01550902f7b35e7b54c"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; try contradiction.",
            "VernacExtend",
            "90f96c502848eb37b36efec22a7fd84a98ebccbe"
        ],
        [
            "elim (eq_dec_points Y Z1); intro HYZ1; treat_equalities; try contradiction.",
            "VernacExtend",
            "ec3673d9373b6c2f26dd150e08e4babe1bf97c46"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; try contradiction.",
            "VernacExtend",
            "3f4c10985609fa3069d24b958b0ae83ed7250ae1"
        ],
        [
            "apply triangle_circumscription_implies_tarski_s_euclid_aux with D X Y C M1 Z1 M2 Z2; try assumption.",
            "VernacExtend",
            "55f20634ae73b44513356853198e4579a0136bdc"
        ],
        [
            "assert_cols; Col.",
            "VernacExtend",
            "62b83865510088e0ab540dddf5a920fe7db9e4b5"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (HAY : A <> Y) by (intro; treat_equalities; assert_cols; apply HABC; ColR).",
            "VernacExtend",
            "1a0dab00fcd0b60edd00ad24c768276d25d17a44"
        ],
        [
            "assert (HX := symmetric_point_construction Y T); destruct HX as [X HX].",
            "VernacExtend",
            "7e6f9855197e6e8a0a4fc086802347ca1ced48e5"
        ],
        [
            "assert (H := perp_distinct B C T Y HPerp); destruct H as [Hclear HTY]; clear Hclear.",
            "VernacExtend",
            "667a8e15ed0c345a1eaecf8d6ac9c1479b79a651"
        ],
        [
            "assert (H := midpoint_distinct_2 T Y X HTY HX); destruct H as [HTX HXY]; apply not_eq_sym in HTX.",
            "VernacExtend",
            "f75dd543a7e7c55a856797b25fb6c06a9d17a638"
        ],
        [
            "destruct HX as [HXTY HXTYT].",
            "VernacExtend",
            "c5a77667c95d3bd9ea1be4f5892f96383d34b5a7"
        ],
        [
            "assert (HZ1 := l10_2_existence A B Y); destruct HZ1 as [Z1 HZ1].",
            "VernacExtend",
            "3a444c0e16c97de95da43482fa128574049615c8"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; destruct HZ1 as [Hclear HZ1]; try contradiction; clear Hclear.",
            "VernacExtend",
            "fb26ddb7714e297f2d866c2e7546c2419cd992f1"
        ],
        [
            "destruct HZ1 as [[M1 [[HXM1Z1 HM1XM1Z1] HABM1]] HZ1].",
            "VernacExtend",
            "64fa52fc64ac378930b74fa228ef354bc2c8d9fd"
        ],
        [
            "assert (HZ2 := l10_2_existence A C Y); destruct HZ2 as [Z2 HZ2].",
            "VernacExtend",
            "468b888bb7492fae66917094a4aebb4eaa1177a7"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; destruct HZ2 as [Hclear HZ2]; try contradiction; clear Hclear.",
            "VernacExtend",
            "50b493574b5ed1cb165d6d56eed1ad7873e4112c"
        ],
        [
            "destruct HZ2 as [[M2 [[HXM2Z2 HM2XM2Z2] HACM2]] HZ2].",
            "VernacExtend",
            "6e40977d7e5b08d174c2fc92b0d5f1f120eda02a"
        ],
        [
            "assert (HABY : ~ Col A B Y) by (intro; apply HBY; apply l6_21 with A B C B; assert_cols; Col).",
            "VernacExtend",
            "9d33a1d42fbd7b4808f42bc7a3471da0f73d114a"
        ],
        [
            "assert (HACY : ~ Col A C Y) by (intro; apply HCY; apply l6_21 with A C B C; assert_cols; Col).",
            "VernacExtend",
            "9aba5e5fc3bccb5ead4181beb93dbb54c87a22f6"
        ],
        [
            "elim (eq_dec_points Y Z1); intro HYZ1; treat_equalities; try contradiction.",
            "VernacExtend",
            "ec3673d9373b6c2f26dd150e08e4babe1bf97c46"
        ],
        [
            "elim HZ1; clear HZ1; intro HZ1; try contradiction.",
            "VernacExtend",
            "3f4c10985609fa3069d24b958b0ae83ed7250ae1"
        ],
        [
            "elim (eq_dec_points Y Z2); intro HYZ2; treat_equalities; try contradiction.",
            "VernacExtend",
            "5eb21e47197d8848cd64b9bf364e80baa49f48b7"
        ],
        [
            "elim HZ2; clear HZ2; intro HZ2; try contradiction.",
            "VernacExtend",
            "90f96c502848eb37b36efec22a7fd84a98ebccbe"
        ],
        [
            "apply triangle_circumscription_implies_tarski_s_euclid_aux with D X Y Y M1 Z1 M2 Z2; Col.",
            "VernacExtend",
            "1e1faa0755c5275d7513cbd8a8397926897e1f55"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TCP_tarski.",
            "VernacEndSegment",
            "3652f63e57f4b234f90b13bb75696cb3fd8b34f4"
        ]
    ],
    "proofs": [
        {
            "name": "impossible_case_1",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HADT HBCT HBDC HABx HACy HxTy HPar.",
                        "VernacExtend",
                        "9637eec1f44bbe553cb8e6a4ec4e24be80be9ba5"
                    ]
                },
                {
                    "command": [
                        "apply between_symmetry in HABx.",
                        "VernacExtend",
                        "20995f64a4794e4f4f9da4bad978c32b19f19e1d"
                    ]
                },
                {
                    "command": [
                        "assert (HI := inner_pasch x C A B y HABx HACy); destruct HI as [I [HBCI HIxy]].",
                        "VernacExtend",
                        "75a8115ffac7a6a66c95afd38d14e7a9187055d7"
                    ]
                },
                {
                    "command": [
                        "apply HPar; exists I; assert_cols; Col.",
                        "VernacExtend",
                        "a8a7e9b7d7ac970dd0262ce563ea3407a4cfb177"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_case_2",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HABx HADT HBCT HBDC HACy HxTy.",
                        "VernacExtend",
                        "5b342a7ea0bd1805c0aec3640ad9665f574d9412"
                    ]
                },
                {
                    "command": [
                        "apply between_symmetry in HACy.",
                        "VernacExtend",
                        "35cbd68583fdaff51310f9d70a2cdcab070829e3"
                    ]
                },
                {
                    "command": [
                        "assert (HI := inner_pasch C x y A T HACy HxTy); destruct HI as [I [HAIx HICT]].",
                        "VernacExtend",
                        "6885bc833c858711072ae5b644b751487ef4c118"
                    ]
                },
                {
                    "command": [
                        "assert (HAx : A <> x) by (intro; treat_equalities; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "a0d99142f6847cf10699ddc1ffc509334bba4a35"
                    ]
                },
                {
                    "command": [
                        "assert (HTS : TS A B C T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists I; split; Between; assert_cols; ColR); apply l9_9 in HTS.",
                        "VernacExtend",
                        "80724c7d8fe59d651475a128888406d93b18301f"
                    ]
                },
                {
                    "command": [
                        "apply HTS; apply one_side_transitivity with D.",
                        "VernacExtend",
                        "a72e32f34bf8a90dc7a6f1340fa6a743795c5a56"
                    ]
                },
                {
                    "command": [
                        "assert (HABB : Col A B B) by Col.",
                        "VernacExtend",
                        "768b4a65d7f125141a46a1e9167e5e9dea48441c"
                    ]
                },
                {
                    "command": [
                        "assert (HBDC' : Col C D B) by (assert_cols; Col).",
                        "VernacExtend",
                        "2f0d250fcd95f2cc773844c1641c9a4b20e2096a"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A B C D B HABB HBDC'); rewrite H.",
                        "VernacExtend",
                        "eb3e636d706ff20803bc9fe3e61365979cf3e701"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; Col).",
                        "VernacExtend",
                        "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "assert (HABA : Col A B A) by Col.",
                        "VernacExtend",
                        "fa568b67997f5a579b6a1d39eaa251f2f65c0a46"
                    ]
                },
                {
                    "command": [
                        "assert (HDTA : Col D T A) by (assert_cols; Col).",
                        "VernacExtend",
                        "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A B D T A HABA HDTA); rewrite H.",
                        "VernacExtend",
                        "db0d8801aaecf700e23ed4b6870b100990d8d8c9"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "782664dd5d7b53bb7464b635470e331a4165f121"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_case_3",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HADT HBCT HBDC HABx HxTy HPar.",
                        "VernacExtend",
                        "8f814e6d077b9fc7d0be3bf486cff2fd76f4ce8b"
                    ]
                },
                {
                    "command": [
                        "apply between_symmetry in HADT.",
                        "VernacExtend",
                        "e22f031ffcde1116723e6515ba23aed4a317c453"
                    ]
                },
                {
                    "command": [
                        "assert (HI := inner_pasch B T A x D HABx HADT); destruct HI as [I [HITx HBDI]].",
                        "VernacExtend",
                        "ceb2729258e65c8b6a0c72422aeb92fa14707c58"
                    ]
                },
                {
                    "command": [
                        "assert (HTx : T <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "bb1245f03d23fa63dde10f6d56a97d33d3533335"
                    ]
                },
                {
                    "command": [
                        "assert (HPar' : Par_strict B D x T) by (apply par_strict_col_par_strict with y; assert_cols; Col; apply par_strict_symmetry; apply par_strict_col_par_strict with C; Col; Par).",
                        "VernacExtend",
                        "79fb048107b18585cd9b00794a8b28f71f77e51b"
                    ]
                },
                {
                    "command": [
                        "apply HPar'; exists I; assert_cols; Col.",
                        "VernacExtend",
                        "1d517dac5886f6f2c61f66f268c9703d9c0b7466"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_case_4_1",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HACy HADT HBCT HBDC HABx HTyx.",
                        "VernacExtend",
                        "42371cbfb4817ddfb7753444f67e9317fd4cd609"
                    ]
                },
                {
                    "command": [
                        "assert (HTS : TS A C x T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists y; split; assert_cols; Col; Between).",
                        "VernacExtend",
                        "f2a59466a91dceef6fd80a3fc5b891b8e4f6c640"
                    ]
                },
                {
                    "command": [
                        "assert (HAx : A <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "5d081b29e4df3fafda990563821155044a123cf0"
                    ]
                },
                {
                    "command": [
                        "assert (HOS : OS A C x B).",
                        "VernacExtend",
                        "d372d917a7743b6e62c35170d9bd76b4cd01d03d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (HACA : Col A C A) by Col.",
                        "VernacExtend",
                        "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
                    ]
                },
                {
                    "command": [
                        "assert (HABx' : Col x B A) by (induction HABx; assert_cols; Col).",
                        "VernacExtend",
                        "0190e094ace28c7f13c1c75f31e0c4b32fc22ace"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A C x B A HACA HABx'); rewrite H.",
                        "VernacExtend",
                        "57ea7cee8a946d40fefc7e840a8d11c3e50ff431"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "782664dd5d7b53bb7464b635470e331a4165f121"
                    ]
                },
                {
                    "command": [
                        "repeat (split; auto).",
                        "VernacExtend",
                        "fbc5463ee8164c7d7a0414a82c6ea4aa4f8c6b04"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HTS' : TS A C B T) by (apply l9_8_2 with x; assumption); clear HTS; clear HOS; rename HTS' into HTS; apply l9_9 in HTS.",
                        "VernacExtend",
                        "94304facebec9f9b74a9497aae8688d9497d246b"
                    ]
                },
                {
                    "command": [
                        "apply HTS; apply one_side_transitivity with D.",
                        "VernacExtend",
                        "a72e32f34bf8a90dc7a6f1340fa6a743795c5a56"
                    ]
                },
                {
                    "command": [
                        "assert (HACC : Col A C C) by Col.",
                        "VernacExtend",
                        "1848855770e4b1ef84c86eb7654f7d8ff4aa75f8"
                    ]
                },
                {
                    "command": [
                        "assert (HBDC' : Col B D C) by (assert_cols; Col).",
                        "VernacExtend",
                        "96b8f86d41403623616c7690c5ce54d04b01ecd4"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A C B D C HACC HBDC'); rewrite H.",
                        "VernacExtend",
                        "bce9436094b7a670de460f07d372505241e2068e"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; Col).",
                        "VernacExtend",
                        "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "assert (HACA : Col A C A) by Col.",
                        "VernacExtend",
                        "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
                    ]
                },
                {
                    "command": [
                        "assert (HDTA : Col D T A) by (assert_cols; Col).",
                        "VernacExtend",
                        "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A C D T A HACA HDTA); rewrite H.",
                        "VernacExtend",
                        "3a4465316ab00767f8c207dd968fd5b6cb3b18fb"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "782664dd5d7b53bb7464b635470e331a4165f121"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_case_4_2",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HACy HADT HBCT HBDC HABx HTyx HPar.",
                        "VernacExtend",
                        "216b588308fa77833a18c2613c5418f7bca8818b"
                    ]
                },
                {
                    "command": [
                        "assert (HTS : TS B C A T) by (repeat (split; Col); try (intro; apply HBCT; assert_cols; ColR); exists D; split; assert_cols; Col; Between).",
                        "VernacExtend",
                        "4f1246848e6d408ed996cea5cdff3ad73d16fa4d"
                    ]
                },
                {
                    "command": [
                        "assert (HOS : OS B C A x).",
                        "VernacExtend",
                        "cad5f9eb44bf5ef203b9abcdb936ff61189e954d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (HBCB : Col B C B) by Col.",
                        "VernacExtend",
                        "c82546176f978154b17b30a2621492efbee6ed45"
                    ]
                },
                {
                    "command": [
                        "assert (HABx' : Col A x B) by Col.",
                        "VernacExtend",
                        "9f0c804e23b5cbfe55dc0f412103c572dc28d31f"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 B C A x B HBCB HABx'); rewrite H.",
                        "VernacExtend",
                        "fca8aa951285a547efeeaebef9405ce62fffe035"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "782664dd5d7b53bb7464b635470e331a4165f121"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "intro; treat_equalities; intuition.",
                        "VernacExtend",
                        "ec6dd07543b097ef619459be05fce0ea8dd7a282"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HTS' : TS B C x T) by (apply l9_8_2 with A; assumption); clear HTS; clear HOS; destruct HTS' as [Hclear [Hclear' [I [HBCI HITx]]]]; clear Hclear; clear Hclear'.",
                        "VernacExtend",
                        "854aba9082109405d7b6d87e758fdef7363d7df3"
                    ]
                },
                {
                    "command": [
                        "assert (HTx : T <> x) by (intro; subst; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "bb1245f03d23fa63dde10f6d56a97d33d3533335"
                    ]
                },
                {
                    "command": [
                        "assert (HPar' : Par_strict B C x T) by (apply par_strict_col_par_strict with y; assert_cols; Col).",
                        "VernacExtend",
                        "6580a5a3b4a90aab117b2a2e3b84dae45f397bfc"
                    ]
                },
                {
                    "command": [
                        "apply HPar'; exists I; assert_cols; Col.",
                        "VernacExtend",
                        "1d517dac5886f6f2c61f66f268c9703d9c0b7466"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_case_4",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "intros A B C D T x y.",
                        "VernacExtend",
                        "9b7d603fd035cd5450058ca033b2f0bc9e0c34bd"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HBC HBD HBT HCD HCT HDT Hxy.",
                        "VernacExtend",
                        "d05a515ad498dec41730231ea795c8ab1ab330f8"
                    ]
                },
                {
                    "command": [
                        "intros HABC HACy HADT HBCT HBDC HABx HTyx HPar.",
                        "VernacExtend",
                        "216b588308fa77833a18c2613c5418f7bca8818b"
                    ]
                },
                {
                    "command": [
                        "elim HABx; clear HABx; intro HABx.",
                        "VernacExtend",
                        "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
                    ]
                },
                {
                    "command": [
                        "apply impossible_case_4_1 with A B C D T x y; Col.",
                        "VernacExtend",
                        "1ea792c2f2968ed37b74bc153e2af788ddeb928f"
                    ]
                },
                {
                    "command": [
                        "elim HABx; clear HABx; intro HABx.",
                        "VernacExtend",
                        "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
                    ]
                },
                {
                    "command": [
                        "apply impossible_case_4_1 with A B C D T x y; Between.",
                        "VernacExtend",
                        "af3e23ece721edfefe725e8129df4efd606864b2"
                    ]
                },
                {
                    "command": [
                        "apply impossible_case_4_2 with A B C D T x y; Between.",
                        "VernacExtend",
                        "07f6f6fe879da0f2cb2a2512a625f6425556e724"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impossible_two_sides_not_col",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros A B C D T Y HAB HAC HAD HAT HAY HBC HBD HBT HBY HCD HCT HCY HDT HTY.",
                        "VernacExtend",
                        "73f06c4c0b96fc50bf786b69ac78b067c9e89c97"
                    ]
                },
                {
                    "command": [
                        "intros HABC HADT HBCT HBDC HBYT.",
                        "VernacExtend",
                        "3aa2b7e9bc1ee46b07cc1da2bd03f978fb2faf73"
                    ]
                },
                {
                    "command": [
                        "intro HACY.",
                        "VernacExtend",
                        "2cee57dabec2a0f1811fc40b58b6f264636295a9"
                    ]
                },
                {
                    "command": [
                        "assert (HTS : TS A C B T) by (repeat (split; Col); try (intro; apply HABC; assert_cols; ColR); exists Y; split; Col; Between).",
                        "VernacExtend",
                        "01f354d340228c5e60e90204aac73c145dc3cc9c"
                    ]
                },
                {
                    "command": [
                        "apply l9_9 in HTS; apply HTS; apply one_side_transitivity with D.",
                        "VernacExtend",
                        "ab8e8eb7ad153d68b112d61ae95f4b4127a46c0b"
                    ]
                },
                {
                    "command": [
                        "assert (HACC : Col A C C) by Col.",
                        "VernacExtend",
                        "1848855770e4b1ef84c86eb7654f7d8ff4aa75f8"
                    ]
                },
                {
                    "command": [
                        "assert (HBDC' : Col B D C) by (assert_cols; Col).",
                        "VernacExtend",
                        "96b8f86d41403623616c7690c5ce54d04b01ecd4"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A C B D C HACC HBDC'); rewrite H.",
                        "VernacExtend",
                        "bce9436094b7a670de460f07d372505241e2068e"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; Col).",
                        "VernacExtend",
                        "8142827f3befc370bc1e9cfd6f77d7ae1751b65c"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "assert (HACA : Col A C A) by Col.",
                        "VernacExtend",
                        "57a4469ae0632a7f446560e51ba0e0ffd75d77b2"
                    ]
                },
                {
                    "command": [
                        "assert (HDTA : Col D T A) by (assert_cols; Col).",
                        "VernacExtend",
                        "7b79239ee9d82fa1cb3a1bc979d3fec7fd9a0949"
                    ]
                },
                {
                    "command": [
                        "assert (H := l9_19 A C D T A HACA HDTA); rewrite H.",
                        "VernacExtend",
                        "3a4465316ab00767f8c207dd968fd5b6cb3b18fb"
                    ]
                },
                {
                    "command": [
                        "split; try (intro; apply HABC; assert_cols; ColR).",
                        "VernacExtend",
                        "782664dd5d7b53bb7464b635470e331a4165f121"
                    ]
                },
                {
                    "command": [
                        "repeat (split; Between).",
                        "VernacExtend",
                        "766936a2293f193b89ab69d482488557e41a9f77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangle_circumscription_implies_tarski_s_euclid_aux",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros A B C D T X Y Z M1 Z1 M2 Z2; intro HTC.",
                        "VernacExtend",
                        "2a72fd5c0329855906359f5a9b3b3a86c04355ed"
                    ]
                },
                {
                    "command": [
                        "intros HAB HAC HAD HAT HAY HBC HBD HBT HBY HCD HCT HCY HDT HTX HTY HXY HYZ1 HYZ2.",
                        "VernacExtend",
                        "dceac55db54aee3f0e584af22adb8d511a63e837"
                    ]
                },
                {
                    "command": [
                        "intros HABC HABM1 HACM2 HADT HBCT HBDC HTYZ HYTX HYM1Z1.",
                        "VernacExtend",
                        "0a79824ed0816e88e6c9dcec99e303cd69929635"
                    ]
                },
                {
                    "command": [
                        "intros HYM2Z2 HCong5 HCong6 HCong7 HPerp1 HPerp2 HPerp3.",
                        "VernacExtend",
                        "2c0b54df55459fd75ca202a440eb3b63af233539"
                    ]
                },
                {
                    "command": [
                        "elim (col_dec X Y Z1); intro HXYZ1; elim (col_dec X Y Z2); intro HXYZ2.",
                        "VernacExtend",
                        "a7b360666d6665595e6bc95eedf562615061320f"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply HABC; apply par_id.",
                        "VernacExtend",
                        "99304e0c6beaedd221edb977d28141a6b8480773"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with Y Z1; Perp.",
                        "VernacExtend",
                        "8ed3d9a78733946705041b4cf181f3389398bef1"
                    ]
                },
                {
                    "command": [
                        "exists A; right; left; split; Col.",
                        "VernacExtend",
                        "48c62ff8aaebfff68ae1bfadd540c81056289831"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_perm_16, col_cop__cop with Z2; Cop; ColR.",
                        "VernacExtend",
                        "107e4ad518d580add3ff884b5a5aa7a64a2e4316"
                    ]
                },
                {
                    "command": [
                        "Cop.",
                        "VernacExtend",
                        "803603ff97b5917ad5ce603838c3939f775c8077"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; apply coplanar_perm_16, col2_cop__cop with T Z; Cop; ColR.",
                        "VernacExtend",
                        "241ff39288f41e4e24eddae72a0322b61d91966a"
                    ]
                },
                {
                    "command": [
                        "apply perp_col1 with Z2; assert_diffs; Perp; ColR.",
                        "VernacExtend",
                        "a8d6003dd8e9e8986d0bc7205ed822a3c4f8d228"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply HABC; apply par_id_1.",
                        "VernacExtend",
                        "840a9c4529bc3775065f61ecaee5a82b75bde95f"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar B C Y Z1) by (assert_diffs; apply col2_cop__cop with T Z; Cop; ColR).",
                        "VernacExtend",
                        "ed0d049041697a7be1ae4346f9de11e113615fc5"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with Y Z1; [Cop..| |Perp|].",
                        "VernacExtend",
                        "9d0c429b0f02eddcf5cf96f74e9516caab5efadc"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; [assumption|..|Cop].",
                        "VernacExtend",
                        "6c2f213075b11c646a07afbcd29873075018ca4f"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; apply col_cop__cop with Z; Col; Cop.",
                        "VernacExtend",
                        "d0c1162b5e1f6a0710729d93fabdcfab805314c9"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; apply col_cop__cop with Z; Cop; ColR.",
                        "VernacExtend",
                        "f7e8989261efd2692836f2e7043e4dbc42c32fa0"
                    ]
                },
                {
                    "command": [
                        "exists D; left; split; Col.",
                        "VernacExtend",
                        "730eba5d4f3293212ae93d6c576daa6d1d0b726b"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
                        "VernacExtend",
                        "41077067ea98e02a10200f591c8becb7cdf78ff4"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply HABC; apply par_id_2.",
                        "VernacExtend",
                        "433d838ff1078498151a5f833eeacf77265b5284"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar B C Y Z2) by (assert_diffs; apply col2_cop__cop with T Z; Cop; ColR).",
                        "VernacExtend",
                        "bdc3e858193b0a5f41a16100ca458ddeefa2a992"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with Y Z2; [Cop..| |Perp|].",
                        "VernacExtend",
                        "470e9d0f094eec36d277ea9f61ae11f11831f43f"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; [assumption|..|Cop].",
                        "VernacExtend",
                        "6c2f213075b11c646a07afbcd29873075018ca4f"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; apply col_cop__cop with Z; Col; Cop.",
                        "VernacExtend",
                        "d0c1162b5e1f6a0710729d93fabdcfab805314c9"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; apply col_cop__cop with Z; Cop; ColR.",
                        "VernacExtend",
                        "f7e8989261efd2692836f2e7043e4dbc42c32fa0"
                    ]
                },
                {
                    "command": [
                        "exists D; left; split; Col.",
                        "VernacExtend",
                        "730eba5d4f3293212ae93d6c576daa6d1d0b726b"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
                        "VernacExtend",
                        "41077067ea98e02a10200f591c8becb7cdf78ff4"
                    ]
                },
                {
                    "command": [
                        "assert (H := HXYZ1); apply HTC in H; destruct H as [x [HCong1 [HCong2 HCop1]]]; exists x; assert (H := HXYZ2); apply HTC in H; destruct H as [y [HCong3 [HCong4 HCop2]]]; exists y.",
                        "VernacExtend",
                        "10a8418b7b0a6c03e151bf98d7fbe48d352893b6"
                    ]
                },
                {
                    "command": [
                        "assert (HYM1 : Y <> M1) by (intro; treat_equalities; auto).",
                        "VernacExtend",
                        "02c987d637f18677a4f53ba48bb32b6ce56975e5"
                    ]
                },
                {
                    "command": [
                        "assert (HYM2 : Y <> M2) by (intro; treat_equalities; auto).",
                        "VernacExtend",
                        "0d31590eb5151f1a313b457e477cdd6d51f087d8"
                    ]
                },
                {
                    "command": [
                        "assert (HCopA : Coplanar B C T A) by (exists D; left; split; Col).",
                        "VernacExtend",
                        "c5941d5742bc987d360ef19aa7c1b95363ea8101"
                    ]
                },
                {
                    "command": [
                        "assert (HCopB : Coplanar B C T B) by Cop.",
                        "VernacExtend",
                        "16c7ac2e5981ab14350151818031a8c1eb698046"
                    ]
                },
                {
                    "command": [
                        "assert (HCopC : Coplanar B C T C) by Cop.",
                        "VernacExtend",
                        "145800985a2aa011b646eb6a0a132d3e0ee3574c"
                    ]
                },
                {
                    "command": [
                        "assert (HCopT : Coplanar B C T T) by Cop.",
                        "VernacExtend",
                        "8ae210d65d4d7fc0d36e5b71bb36475cbee6f80a"
                    ]
                },
                {
                    "command": [
                        "assert (HCopZ : Coplanar B C T Z) by Cop.",
                        "VernacExtend",
                        "9ea89e2db1cf068e32d29acabe193c936e3d95f9"
                    ]
                },
                {
                    "command": [
                        "assert (HCopY : Coplanar B C T Y) by (assert_diffs; apply col_cop__cop with Z; Col).",
                        "VernacExtend",
                        "eb59173b926c9f260096e12d2fe17899c09f7569"
                    ]
                },
                {
                    "command": [
                        "assert (HCopX : Coplanar B C T X) by (apply col_cop__cop with Y; Col).",
                        "VernacExtend",
                        "adef66fb062bc4c7cafe821e500be0076f7712eb"
                    ]
                },
                {
                    "command": [
                        "assert (HCopZ1 : Coplanar B C T Z1).",
                        "VernacExtend",
                        "d44fa50fa7fcd164016695e77b22852d6b0ea910"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A B Y).",
                        "VernacExtend",
                        "81662888905c92204ad36d39722ec957707b2dfb"
                    ]
                },
                {
                    "command": [
                        "intro; destruct (perp_not_col2 A B Y Z1) as [|HNCol]; Perp; apply HNCol; ColR.",
                        "VernacExtend",
                        "8ea4aaff749468e7fcce0b563b7c3ef614f449bd"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with A B Y; [| |apply coplanar_pseudo_trans with B C T..|]; Cop.",
                        "VernacExtend",
                        "ddd15e682dbfd034657862ae0bf45d828d7c10ca"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HCopZ2 : Coplanar B C T Z2).",
                        "VernacExtend",
                        "716d0656124b45e1c4d638d69d2b3ccc4b87a204"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A C Y).",
                        "VernacExtend",
                        "80baa839764d0b7d77439b5344fdc3a66b0bc4b2"
                    ]
                },
                {
                    "command": [
                        "intro; destruct (perp_not_col2 A C Y Z2) as [|HNCol]; Perp; apply HNCol; ColR.",
                        "VernacExtend",
                        "75023c6917d302508d42ce2b06374e47a672ece4"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with A C Y; [|apply coplanar_pseudo_trans with B C T| |apply coplanar_pseudo_trans with B C T|]; Cop.",
                        "VernacExtend",
                        "98bf969905d49c517a548fc99696aa736df48444"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HCopx : Coplanar B C T x).",
                        "VernacExtend",
                        "530384b933e8fc75fc4d82a53b4518efb7f1f6a0"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with X Y Z1; trivial; apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "646c117292874149ef4b33de8c92adcba14be9c2"
                    ]
                },
                {
                    "command": [
                        "assert (HCopy : Coplanar B C T y).",
                        "VernacExtend",
                        "e8c69f18ef68a59d6ba55915a64792c70eefc0a7"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with X Y Z2; trivial; apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "906b5522869267cd6a54a174452666f645cd4dd9"
                    ]
                },
                {
                    "command": [
                        "assert (HCop : Coplanar X Y x y).",
                        "VernacExtend",
                        "5634f3303c29e4f641166ceb4d22cc11be8cb75e"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
                    ]
                },
                {
                    "command": [
                        "assert (HxTy : Col x T y) by (elim (eq_dec_points T x); intro; elim (eq_dec_points T y); intro; try (subst; Col); apply col_permutation_4; apply cop_perp2__col with X Y; trivial; apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong; Cop).",
                        "VernacExtend",
                        "46c894f9f209be9c94f61c5f5e999b94fbe8ea6a"
                    ]
                },
                {
                    "command": [
                        "assert (HABx : Col A B x).",
                        "VernacExtend",
                        "fa796b2df5f7e6039b99856d54983c1f73d2aa75"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A M1); intro HAM1; subst.",
                        "VernacExtend",
                        "6659ed3430c53340665e588faf65736dcea94a3a"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply cong_cop2_perp_bisect_col with Y Z1; trivial.",
                        "VernacExtend",
                        "34046f3f61326fceaf9eea85d6d1aecc76f594e0"
                    ]
                },
                {
                    "command": [
                        "exists M1; left; split; Col.",
                        "VernacExtend",
                        "1d0e97287cc87d6f9e4dbfd718c17a695248b2b6"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with X x; Cong.",
                        "VernacExtend",
                        "cea7761695b21ed7ed5bc5e645477c45ca19a0f9"
                    ]
                },
                {
                    "command": [
                        "apply perp_mid_perp_bisect; try split; Cong.",
                        "VernacExtend",
                        "9e44a79964541e4d6ff276577ce85972a1bc520a"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (Col M1 A x).",
                        "VernacExtend",
                        "097c56d05e4129d3cb77c5f82e48e895af37139e"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply cong_cop2_perp_bisect_col with Y Z1; trivial.",
                        "VernacExtend",
                        "34046f3f61326fceaf9eea85d6d1aecc76f594e0"
                    ]
                },
                {
                    "command": [
                        "exists M1; left; split; Col.",
                        "VernacExtend",
                        "1d0e97287cc87d6f9e4dbfd718c17a695248b2b6"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with X x; Cong.",
                        "VernacExtend",
                        "cea7761695b21ed7ed5bc5e645477c45ca19a0f9"
                    ]
                },
                {
                    "command": [
                        "apply perp_mid_perp_bisect; try split; Cong.",
                        "VernacExtend",
                        "9e44a79964541e4d6ff276577ce85972a1bc520a"
                    ]
                },
                {
                    "command": [
                        "apply perp_left_comm; apply perp_col with B; Col.",
                        "VernacExtend",
                        "febc842d73f740d267a140c635e220aee29c1d91"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "ColR.",
                        "VernacExtend",
                        "0b35ec58454f3477d058acbaeb25f2751768cf91"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HACy : Col A C y).",
                        "VernacExtend",
                        "036eaf78a3c9d5f0e94b5f45c17e47710d1dfe03"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A M2); intro HAM1; subst.",
                        "VernacExtend",
                        "021f28bca0fc78414d20fff01a8a94397293af7d"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply cong_cop2_perp_bisect_col with Y Z2; trivial.",
                        "VernacExtend",
                        "5c293e57ed87cf851dc3381849c3ae2ef5694f8c"
                    ]
                },
                {
                    "command": [
                        "exists M2; left; split; Col.",
                        "VernacExtend",
                        "9853e7f82d5ab29706d74f933736391963ccc40a"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with X y; Cong.",
                        "VernacExtend",
                        "03f550915d8c5e49a742b121485ed11d49151c08"
                    ]
                },
                {
                    "command": [
                        "apply perp_mid_perp_bisect; try split; Cong.",
                        "VernacExtend",
                        "9e44a79964541e4d6ff276577ce85972a1bc520a"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (Col M2 A y).",
                        "VernacExtend",
                        "a2a36a4d410484353deb271b75a0ff9b048d5f88"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply cong_cop2_perp_bisect_col with Y Z2; trivial.",
                        "VernacExtend",
                        "5c293e57ed87cf851dc3381849c3ae2ef5694f8c"
                    ]
                },
                {
                    "command": [
                        "exists M2; left; split; Col.",
                        "VernacExtend",
                        "9853e7f82d5ab29706d74f933736391963ccc40a"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_pseudo_trans with B C T; assumption.",
                        "VernacExtend",
                        "e24e1d20761a421ba3edee593bc0a0dffadb2f16"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with X y; Cong.",
                        "VernacExtend",
                        "03f550915d8c5e49a742b121485ed11d49151c08"
                    ]
                },
                {
                    "command": [
                        "apply perp_mid_perp_bisect; try split; Cong.",
                        "VernacExtend",
                        "9e44a79964541e4d6ff276577ce85972a1bc520a"
                    ]
                },
                {
                    "command": [
                        "apply perp_left_comm; apply perp_col with C; Col.",
                        "VernacExtend",
                        "004e3a2fd4a9cc866339d73ed49bfeebad04586a"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "ColR.",
                        "VernacExtend",
                        "0b35ec58454f3477d058acbaeb25f2751768cf91"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Hxy : x <> y).",
                        "VernacExtend",
                        "752b4229abc27991e4ed5e7e3aa1fdd78aab20be"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro; treat_equalities.",
                        "VernacExtend",
                        "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
                    ]
                },
                {
                    "command": [
                        "assert (A = x) by (apply l6_21 with A B C A; Col); treat_equalities.",
                        "VernacExtend",
                        "5e49190ced5bb12e307b6d04671ca2de11525b56"
                    ]
                },
                {
                    "command": [
                        "assert (H : Par B C A T).",
                        "VernacExtend",
                        "c696b10ba0b0293bda6363438d32e1f5cabbf98c"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with X Y; try (apply coplanar_pseudo_trans with B C T; assumption).",
                        "VernacExtend",
                        "d9e0ff2a26929638bc13f1b76fa657ce750fe8e1"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col2 with Z T; Perp; assert_cols; ColR.",
                        "VernacExtend",
                        "ca6fec57bc3c4ec667db095751707578bc3185ef"
                    ]
                },
                {
                    "command": [
                        "apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong.",
                        "VernacExtend",
                        "b090c9dd0a46f8aac10dfc0b58bba4e9256937ec"
                    ]
                },
                {
                    "command": [
                        "exists T; left; split; Col.",
                        "VernacExtend",
                        "cb1d3ffb59ce1a1752f068696730d13d7e64ed5a"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intro H.",
                        "VernacExtend",
                        "1aa5ba826b7a8c54b37617ae3540ebfddb05544e"
                    ]
                },
                {
                    "command": [
                        "apply H; exists D; assert_cols; Col.",
                        "VernacExtend",
                        "7ea2be297d6454ee2c33d74fe741d9cd835ac145"
                    ]
                },
                {
                    "command": [
                        "spliter; apply HABC; assert_cols; ColR.",
                        "VernacExtend",
                        "f588da60875093dc52c01810d34fa0adb0d06aa2"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HPar : Par B C x y).",
                        "VernacExtend",
                        "8e4eb486721f099631d2b57a57cfbfc08b83707e"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with X Y; try (apply coplanar_pseudo_trans with B C T; assumption).",
                        "VernacExtend",
                        "d9e0ff2a26929638bc13f1b76fa657ce750fe8e1"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col2 with T Z; Perp; assert_cols; ColR.",
                        "VernacExtend",
                        "41077067ea98e02a10200f591c8becb7cdf78ff4"
                    ]
                },
                {
                    "command": [
                        "apply perp_bisect_perp; apply cong_cop_perp_bisect; Cong; Cop.",
                        "VernacExtend",
                        "03297892fa01b7f41433ed384d4cbe9da836cdd3"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "clear HPerp1; clear HPerp2; clear HPerp3.",
                        "VernacExtend",
                        "412448dac350908c336e95e3f8163defcce84c6c"
                    ]
                },
                {
                    "command": [
                        "clear HCong1; clear HCong2; clear HCong3; clear HCong4.",
                        "VernacExtend",
                        "bbd704c6c443e33c5025af8a3bdccc7d7b517b8b"
                    ]
                },
                {
                    "command": [
                        "assert (HPar' : Par_strict B C x y) by (elim HPar; clear HPar; intro HPar; try assumption; spliter; exfalso; apply HABC; assert_cols; ColR); clear HPar; rename HPar' into HPar.",
                        "VernacExtend",
                        "16476834b25be08ba518e09863f91dad4116c311"
                    ]
                },
                {
                    "command": [
                        "elim HxTy; clear HxTy; intro HxTy.",
                        "VernacExtend",
                        "af0ff8cc442b494c40ba0dc18ed327b9d7e64ae8"
                    ]
                },
                {
                    "command": [
                        "elim HABx; clear HABx; intro HABx.",
                        "VernacExtend",
                        "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
                    ]
                },
                {
                    "command": [
                        "elim HACy; clear HACy; intro HACy; auto.",
                        "VernacExtend",
                        "6addc762901cb6c69c15f6dab4061ad9ae2b8e94"
                    ]
                },
                {
                    "command": [
                        "elim HACy; clear HACy; intro HACy.",
                        "VernacExtend",
                        "2ef26063c00132c282d4a2e614c2188b06eb1e81"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_1 with A B C D T x y; assumption.",
                        "VernacExtend",
                        "1a592411ed0da78e824b88da874326d9534a7e66"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_2 with A B C D T x y; assert_cols; Col.",
                        "VernacExtend",
                        "0f65f3861d8492f808cc154f8a63eb102fc5a26c"
                    ]
                },
                {
                    "command": [
                        "elim HABx; clear HABx; intro HABx.",
                        "VernacExtend",
                        "f3e516c5975e3c16cc0fe2aa02583ef6957d665a"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_3 with A B C D T x y; assumption.",
                        "VernacExtend",
                        "d43608008cf3ec106009136537b2fab0e03f3ef3"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_2 with A C B D T y x; assert_cols; Col; Between.",
                        "VernacExtend",
                        "e57b3ccaef1e96f15f1e8ef3eed73e58bbaf4fc7"
                    ]
                },
                {
                    "command": [
                        "elim HxTy; clear HxTy; intro HxTy.",
                        "VernacExtend",
                        "af0ff8cc442b494c40ba0dc18ed327b9d7e64ae8"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_4 with A B C D T x y; assumption.",
                        "VernacExtend",
                        "dba2ce2f7cdd9a972dc3380928eca084a441d437"
                    ]
                },
                {
                    "command": [
                        "exfalso; apply impossible_case_4 with A C B D T y x; Between; Col; Par.",
                        "VernacExtend",
                        "91d9a63f728df4834ac9bfb9b9d689530ceb1bfe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}