{
    "filename": "Meta_theory/Parallel_postulates/tarski_playfair.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Import GeoCoq.Axioms.parallel_postulates.",
            "VernacRequire",
            "7a0c16ded886b7215c8fe9fa66b079628545bc0e"
        ],
        [
            "Require Import GeoCoq.Tarski_dev.Ch12_parallel.",
            "VernacRequire",
            "5991b999496c8ab182b50b358d0c9b4e247ca365"
        ],
        [
            "Section tarski_playfair.",
            "VernacBeginSection",
            "123fa253841ee516c28a5712cdca5493baa08a13"
        ],
        [
            "Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.",
            "VernacContext",
            "c652196849f972e656c6c0437bc0c834b4161ae1"
        ],
        [
            "Lemma tarski_s_euclid_implies_playfair : tarski_s_parallel_postulate -> playfair_s_postulate.",
            "VernacStartTheoremProof",
            "615b1f92a5026173a085a551f498645a393b74ee"
        ],
        [
            "assert (HAux: tarski_s_parallel_postulate -> forall A1 A2 B1 B2 C1 C2 P, ~ Col P A1 A2 -> Par A1 A2 B1 B2 -> Col P B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2 /\\ Col C2 B1 B2).",
            "VernacExtend",
            "235f812a60b0281f06f6a377d9b174d08223523f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros HTE; intros.",
            "VernacExtend",
            "0a4266b3a78f090404c9e257a6550d639b39a465"
        ],
        [
            "apply par_distincts in H0.",
            "VernacExtend",
            "b7f95559c96fc8fb28f762c427845257478388de"
        ],
        [
            "apply par_distincts in H2.",
            "VernacExtend",
            "b02557e44b7413aa9869058b9c122fdef0b14443"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert(HPar1 : Par_strict A1 A2 B1 B2) by (apply (par_not_col_strict _ _ _ _ P); Col; intro; apply H; Col).",
            "VernacExtend",
            "ac14138a6325285201fbb4b05c6dc3c8378f40c0"
        ],
        [
            "assert(HPar2 : Par_strict A1 A2 C1 C2) by (apply (par_not_col_strict _ _ _ _ P); Col; intro; apply H; Col).",
            "VernacExtend",
            "099ae7c58f5b70a3d93545ab88a7e40ddf2d1e86"
        ],
        [
            "elim (line_dec B1 B2 C1 C2); intro HLine.",
            "VernacExtend",
            "c1918da3b161a2466041392aea256f9945cf35fd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (HLineNew : ~ Col C1 B1 B2 \\/ ~ Col C2 B1 B2) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2);tauto).",
            "VernacExtend",
            "6a1ac4be2b890d5087f7c650f2a37bd62047377a"
        ],
        [
            "clear HLine; rename HLineNew into HLine.",
            "VernacExtend",
            "17ea91f6831c2d4dfa7d10f13710714407a8c374"
        ],
        [
            "assert(HC' : exists C', Col C1 C2 C' /\\ TS B1 B2 A1 C').",
            "VernacExtend",
            "36bde9534a61db491a36626ce3d39541b7dbf745"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Coplanar A1 A2 P A1) by (exists A1; left; split; Col).",
            "VernacExtend",
            "717c3faaaba4c80b6d3b2cbcc0893a31451c80c8"
        ],
        [
            "apply par__coplanar in H0.",
            "VernacExtend",
            "a0944a90b923a2813eabecb9007eead1fcd8d524"
        ],
        [
            "apply par__coplanar in H2.",
            "VernacExtend",
            "c2e6c43cd6472959cf6c750f1f04431c6796c308"
        ],
        [
            "assert (Coplanar A1 A2 P B1) by (apply coplanar_perm_1, col_cop__cop with B2; Col).",
            "VernacExtend",
            "f28a77709e470f261a5d783c4051f596fb2ffc76"
        ],
        [
            "assert (Coplanar A1 A2 P B2) by (apply coplanar_perm_1, col_cop__cop with B1; Col; Cop).",
            "VernacExtend",
            "b42f2c47d1fd29662399793678374c8bf07aeec7"
        ],
        [
            "assert (Coplanar A1 A2 P C1) by (apply coplanar_perm_1, col_cop__cop with C2; Col).",
            "VernacExtend",
            "4c98eb4d2b157f6f97d80e0ec524a65af3537962"
        ],
        [
            "assert (Coplanar A1 A2 P C2) by (apply coplanar_perm_1, col_cop__cop with C1; Col; Cop).",
            "VernacExtend",
            "f85ff113b90533d23a5420e0ba92a8b5b0773835"
        ],
        [
            "elim HLine; clear HLine; intro HNC; [destruct (cop_not_par_other_side B1 B2 C1 C2 P A1) as [C' [HCol HTS]]| destruct (cop_not_par_other_side B1 B2 C2 C1 P A1) as [C' [HCol HTS]]]; try exists C'; Col; try (intro; apply HPar1; exists A1; Col); apply coplanar_pseudo_trans with A1 A2 P; Col.",
            "VernacExtend",
            "5fd0328cd83c99b7c83d5194de9b80953e907909"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "ex_and HC' C'.",
            "VernacExtend",
            "d8b3a244f969b2e3ea4739697d612afd59bfc877"
        ],
        [
            "unfold TS in H9.",
            "VernacExtend",
            "33c05717809dd9341b5027dd01c726a82df2d781"
        ],
        [
            "assert (~ Col A1 B1 B2) by (spliter; auto).",
            "VernacExtend",
            "824c7b0f41703df367575dd8dab4cc85619333e2"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "ex_and H12 B.",
            "VernacExtend",
            "df4519094fa25342649176fb70b54631c931ed41"
        ],
        [
            "double C' P C.",
            "VernacExtend",
            "c65907b64971f97a6ec4d502f7945d0383359ba1"
        ],
        [
            "unfold Midpoint in H14.",
            "VernacExtend",
            "235e048a0804977a7b1b1288222e177ad9871ad8"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert(HD : exists D, Bet B D C /\\ Bet P D A1) by (apply inner_pasch with C'; Between).",
            "VernacExtend",
            "0434247197ed53caeb4c9cbec49782acd1a78564"
        ],
        [
            "ex_and HD D.",
            "VernacExtend",
            "a1a40a8c21ef131c0c21373b795f3a5dd2eccdfe"
        ],
        [
            "assert(C' <> P) by (intro; subst C'; contradiction).",
            "VernacExtend",
            "93661fe1852b8a56b2260d0acff395ec364e6aec"
        ],
        [
            "assert (Par A1 A2 C' P) by (apply par_col2_par with C1 C2; Col).",
            "VernacExtend",
            "340ea50024bd22f3f53e5822480ec3d108ce1a11"
        ],
        [
            "assert(HPar3 : Par_strict A1 A2 C' P) by (apply (par_not_col_strict _ _ _ _ P); Col).",
            "VernacExtend",
            "de5965770f4f809ae92f6a747b9aa0eacbf5cbb9"
        ],
        [
            "assert(B <> P).",
            "VernacExtend",
            "071de7574839baf9590f111c5e6834c84589113e"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "subst B.",
            "VernacExtend",
            "f890d24f78b8f44f1ebf2571edce25267b4aed11"
        ],
        [
            "apply (par_not_col _ _ _ _ A1) in HPar3.",
            "VernacExtend",
            "537f51ec0b4e88e321dbc14f95d91d3552adb50c"
        ],
        [
            "apply HPar3; Col.",
            "VernacExtend",
            "46ac5291fc9da00235be0b70f980f0656f769618"
        ],
        [
            "Col.",
            "VernacExtend",
            "92aede71f403ba291e696d87cdf45f5aca69909a"
        ],
        [
            "assert(P <> C).",
            "VernacExtend",
            "53c30fb8e37db8b6130e865fbf539a4114b881c7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "treat_equalities.",
            "VernacExtend",
            "0d9f12669aa7857d816d5247f75bab1bd3b63660"
        ],
        [
            "absurde.",
            "VernacExtend",
            "9c75d1eb6f29cca56b1c0e3559fe56a0be383999"
        ],
        [
            "assert(Col B P B1) by ColR.",
            "VernacExtend",
            "c958e6b6982c63c31b559ad405a4d92c58dc4e0a"
        ],
        [
            "assert(Col B P B2) by ColR.",
            "VernacExtend",
            "53155f4ca43291c5cc994bea27e27aca7b6cfeec"
        ],
        [
            "assert(Col C' P C1) by ColR.",
            "VernacExtend",
            "06f97cf3943f52dacab8e200177c216b632dc145"
        ],
        [
            "assert(Col C P C1) by (assert_cols;ColR).",
            "VernacExtend",
            "a9117193e111592a8dbe02038236c123aec3605a"
        ],
        [
            "assert(Col C' P C2) by ColR.",
            "VernacExtend",
            "f777b4d83454ca1d3168b250922b6b942d2b8f58"
        ],
        [
            "assert(Col C P C2) by (assert_cols;ColR).",
            "VernacExtend",
            "363721f66be151bb56fd5d90ad48b3f863e1c7f4"
        ],
        [
            "assert(~Col B P C) by (intro;apply H11;assert_cols;ColR).",
            "VernacExtend",
            "9aa3aa9790805bb72b72d4c9b49d110ef041bea6"
        ],
        [
            "assert(P <> D) by (intro; subst D; apply bet_col in H16; contradiction).",
            "VernacExtend",
            "2c6731148ee689f55128227bf5a2ba0b4614ece7"
        ],
        [
            "assert(HE := HTE P B C D A1 H17 H16 H29).",
            "VernacExtend",
            "9095a184c6cb7828c7563be1d655a1478634c9d3"
        ],
        [
            "ex_and HE X; ex_and H30 Y.",
            "VernacExtend",
            "06c5945521eb7e5e008f23396b8dd3fb65067a1a"
        ],
        [
            "assert(Hx := l12_6 A1 A2 P X).",
            "VernacExtend",
            "6639532fb051cb964cbf5e9ed282e1354fe2467e"
        ],
        [
            "assert (P<>X) by (intro;treat_equalities;intuition).",
            "VernacExtend",
            "2c8601d5b3753e555f0c238f1872a4fabec13805"
        ],
        [
            "assert(Par_strict A1 A2 P X) by (apply (par_strict_col2_par_strict _ _ B1 B2); Col; apply col3 with B P; Col).",
            "VernacExtend",
            "908fdc8d83fca532809cbc11a426f704f663bba7"
        ],
        [
            "apply Hx in H34.",
            "VernacExtend",
            "3103367f4aca9f9b526ca97107d8d3e52656330d"
        ],
        [
            "assert(Hy := l12_6 A1 A2 P Y).",
            "VernacExtend",
            "da2f723b20e05e70cbc769dd470195e3d51f6939"
        ],
        [
            "assert (P<>Y) by (intro;treat_equalities;intuition).",
            "VernacExtend",
            "0cc4b6c36691872bb292cfb0cf3ec12b15f203bf"
        ],
        [
            "assert(HPar4 : Par_strict A1 A2 P Y) by (apply (par_strict_col2_par_strict _ _ C1 C2); Col; apply (col3 C P); Col).",
            "VernacExtend",
            "8a71e831ef334a789c96e9c999ddff92e283162e"
        ],
        [
            "apply Hy in HPar4.",
            "VernacExtend",
            "b23e9e12a88a423dd123880345ca5b12451b0858"
        ],
        [
            "assert(HOS : OS A1 A2 X Y) by (apply one_side_transitivity with P; try assumption; unfold OS in *; ex_and H34 Z; exists Z; split; assumption).",
            "VernacExtend",
            "f01b118c30e91458ad8ad24a35fcd990c1fd54b3"
        ],
        [
            "assert(Ho := HOS).",
            "VernacExtend",
            "3e34d36bc3f83210702dd5a70fa128de98135c00"
        ],
        [
            "unfold OS in HOS.",
            "VernacExtend",
            "4924237c45752e16e46e606d51be9ae01b721c29"
        ],
        [
            "ex_and HOS Z.",
            "VernacExtend",
            "22b1936b2da07c4acbe38bc55f0a21ad7be933e5"
        ],
        [
            "unfold TS in H36.",
            "VernacExtend",
            "da192badd1fc575825dea3f43385c828321c6f3b"
        ],
        [
            "unfold TS in H37.",
            "VernacExtend",
            "f4b89ac9eab28cf9407c45b64e2200169086cbec"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert(HTS : TS A1 A2 X Y) by (unfold TS; repeat split; try assumption; exists A1; split; Col).",
            "VernacExtend",
            "84f642c43fa654025b2a35451ad6d3fe4ab43817"
        ],
        [
            "apply l9_9 in HTS.",
            "VernacExtend",
            "a048d5dba30eef09fa647b08de712d35ee54a5de"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "intros HTE A1; intros.",
            "VernacExtend",
            "d3c26063e65c46e1b171403c98577c9d1bb05bd8"
        ],
        [
            "assert( A1 <> A2 /\\ B1 <> B2) by (apply par_distinct;auto).",
            "VernacExtend",
            "5d74150c5250827be2525c756f727e189a48c18f"
        ],
        [
            "assert( A1 <> A2 /\\ C1 <> C2) by (apply par_distinct;auto).",
            "VernacExtend",
            "46fc00b252701e633865359f8952430ba6d6cc72"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "induction(col_dec P A1 A2).",
            "VernacExtend",
            "d6cb7c16a2af7cb0f41384bc4483d4f94d6ff7be"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "exfalso.",
            "VernacExtend",
            "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "exists P.",
            "VernacExtend",
            "22b7dea980d440fc518fb5c50eb57b72554716c3"
        ],
        [
            "split; Col.",
            "VernacExtend",
            "aa5cae43f030df753431c4227d6e2b42d3c89c38"
        ],
        [
            "induction H1.",
            "VernacExtend",
            "2e7754b8626e84404f5bc663332beef2a7c01b81"
        ],
        [
            "exfalso.",
            "VernacExtend",
            "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "exists P.",
            "VernacExtend",
            "22b7dea980d440fc518fb5c50eb57b72554716c3"
        ],
        [
            "split; Col.",
            "VernacExtend",
            "aa5cae43f030df753431c4227d6e2b42d3c89c38"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "split;ColR.",
            "VernacExtend",
            "054cb6aad3caf5943c35c6d1f7b72687bf4af889"
        ],
        [
            "apply (HAux HTE A1 A2 _ _ _ _ P); auto.",
            "VernacExtend",
            "c8221baed93221559de44983fc3e84ccc8794e28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End tarski_playfair.",
            "VernacEndSegment",
            "42dfcc92a95615ed19a5d7a2e10ff494ca860c71"
        ]
    ],
    "proofs": [
        {
            "name": "tarski_s_euclid_implies_playfair",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "assert (HAux: tarski_s_parallel_postulate -> forall A1 A2 B1 B2 C1 C2 P, ~ Col P A1 A2 -> Par A1 A2 B1 B2 -> Col P B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2 /\\ Col C2 B1 B2).",
                        "VernacExtend",
                        "235f812a60b0281f06f6a377d9b174d08223523f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intros HTE; intros.",
                        "VernacExtend",
                        "0a4266b3a78f090404c9e257a6550d639b39a465"
                    ]
                },
                {
                    "command": [
                        "apply par_distincts in H0.",
                        "VernacExtend",
                        "b7f95559c96fc8fb28f762c427845257478388de"
                    ]
                },
                {
                    "command": [
                        "apply par_distincts in H2.",
                        "VernacExtend",
                        "b02557e44b7413aa9869058b9c122fdef0b14443"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert(HPar1 : Par_strict A1 A2 B1 B2) by (apply (par_not_col_strict _ _ _ _ P); Col; intro; apply H; Col).",
                        "VernacExtend",
                        "ac14138a6325285201fbb4b05c6dc3c8378f40c0"
                    ]
                },
                {
                    "command": [
                        "assert(HPar2 : Par_strict A1 A2 C1 C2) by (apply (par_not_col_strict _ _ _ _ P); Col; intro; apply H; Col).",
                        "VernacExtend",
                        "099ae7c58f5b70a3d93545ab88a7e40ddf2d1e86"
                    ]
                },
                {
                    "command": [
                        "elim (line_dec B1 B2 C1 C2); intro HLine.",
                        "VernacExtend",
                        "c1918da3b161a2466041392aea256f9945cf35fd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (HLineNew : ~ Col C1 B1 B2 \\/ ~ Col C2 B1 B2) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2);tauto).",
                        "VernacExtend",
                        "6a1ac4be2b890d5087f7c650f2a37bd62047377a"
                    ]
                },
                {
                    "command": [
                        "clear HLine; rename HLineNew into HLine.",
                        "VernacExtend",
                        "17ea91f6831c2d4dfa7d10f13710714407a8c374"
                    ]
                },
                {
                    "command": [
                        "assert(HC' : exists C', Col C1 C2 C' /\\ TS B1 B2 A1 C').",
                        "VernacExtend",
                        "36bde9534a61db491a36626ce3d39541b7dbf745"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar A1 A2 P A1) by (exists A1; left; split; Col).",
                        "VernacExtend",
                        "717c3faaaba4c80b6d3b2cbcc0893a31451c80c8"
                    ]
                },
                {
                    "command": [
                        "apply par__coplanar in H0.",
                        "VernacExtend",
                        "a0944a90b923a2813eabecb9007eead1fcd8d524"
                    ]
                },
                {
                    "command": [
                        "apply par__coplanar in H2.",
                        "VernacExtend",
                        "c2e6c43cd6472959cf6c750f1f04431c6796c308"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar A1 A2 P B1) by (apply coplanar_perm_1, col_cop__cop with B2; Col).",
                        "VernacExtend",
                        "f28a77709e470f261a5d783c4051f596fb2ffc76"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar A1 A2 P B2) by (apply coplanar_perm_1, col_cop__cop with B1; Col; Cop).",
                        "VernacExtend",
                        "b42f2c47d1fd29662399793678374c8bf07aeec7"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar A1 A2 P C1) by (apply coplanar_perm_1, col_cop__cop with C2; Col).",
                        "VernacExtend",
                        "4c98eb4d2b157f6f97d80e0ec524a65af3537962"
                    ]
                },
                {
                    "command": [
                        "assert (Coplanar A1 A2 P C2) by (apply coplanar_perm_1, col_cop__cop with C1; Col; Cop).",
                        "VernacExtend",
                        "f85ff113b90533d23a5420e0ba92a8b5b0773835"
                    ]
                },
                {
                    "command": [
                        "elim HLine; clear HLine; intro HNC; [destruct (cop_not_par_other_side B1 B2 C1 C2 P A1) as [C' [HCol HTS]]| destruct (cop_not_par_other_side B1 B2 C2 C1 P A1) as [C' [HCol HTS]]]; try exists C'; Col; try (intro; apply HPar1; exists A1; Col); apply coplanar_pseudo_trans with A1 A2 P; Col.",
                        "VernacExtend",
                        "5fd0328cd83c99b7c83d5194de9b80953e907909"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "ex_and HC' C'.",
                        "VernacExtend",
                        "d8b3a244f969b2e3ea4739697d612afd59bfc877"
                    ]
                },
                {
                    "command": [
                        "unfold TS in H9.",
                        "VernacExtend",
                        "33c05717809dd9341b5027dd01c726a82df2d781"
                    ]
                },
                {
                    "command": [
                        "assert (~ Col A1 B1 B2) by (spliter; auto).",
                        "VernacExtend",
                        "824c7b0f41703df367575dd8dab4cc85619333e2"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "ex_and H12 B.",
                        "VernacExtend",
                        "df4519094fa25342649176fb70b54631c931ed41"
                    ]
                },
                {
                    "command": [
                        "double C' P C.",
                        "VernacExtend",
                        "c65907b64971f97a6ec4d502f7945d0383359ba1"
                    ]
                },
                {
                    "command": [
                        "unfold Midpoint in H14.",
                        "VernacExtend",
                        "235e048a0804977a7b1b1288222e177ad9871ad8"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert(HD : exists D, Bet B D C /\\ Bet P D A1) by (apply inner_pasch with C'; Between).",
                        "VernacExtend",
                        "0434247197ed53caeb4c9cbec49782acd1a78564"
                    ]
                },
                {
                    "command": [
                        "ex_and HD D.",
                        "VernacExtend",
                        "a1a40a8c21ef131c0c21373b795f3a5dd2eccdfe"
                    ]
                },
                {
                    "command": [
                        "assert(C' <> P) by (intro; subst C'; contradiction).",
                        "VernacExtend",
                        "93661fe1852b8a56b2260d0acff395ec364e6aec"
                    ]
                },
                {
                    "command": [
                        "assert (Par A1 A2 C' P) by (apply par_col2_par with C1 C2; Col).",
                        "VernacExtend",
                        "340ea50024bd22f3f53e5822480ec3d108ce1a11"
                    ]
                },
                {
                    "command": [
                        "assert(HPar3 : Par_strict A1 A2 C' P) by (apply (par_not_col_strict _ _ _ _ P); Col).",
                        "VernacExtend",
                        "de5965770f4f809ae92f6a747b9aa0eacbf5cbb9"
                    ]
                },
                {
                    "command": [
                        "assert(B <> P).",
                        "VernacExtend",
                        "071de7574839baf9590f111c5e6834c84589113e"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "subst B.",
                        "VernacExtend",
                        "f890d24f78b8f44f1ebf2571edce25267b4aed11"
                    ]
                },
                {
                    "command": [
                        "apply (par_not_col _ _ _ _ A1) in HPar3.",
                        "VernacExtend",
                        "537f51ec0b4e88e321dbc14f95d91d3552adb50c"
                    ]
                },
                {
                    "command": [
                        "apply HPar3; Col.",
                        "VernacExtend",
                        "46ac5291fc9da00235be0b70f980f0656f769618"
                    ]
                },
                {
                    "command": [
                        "Col.",
                        "VernacExtend",
                        "92aede71f403ba291e696d87cdf45f5aca69909a"
                    ]
                },
                {
                    "command": [
                        "assert(P <> C).",
                        "VernacExtend",
                        "53c30fb8e37db8b6130e865fbf539a4114b881c7"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "treat_equalities.",
                        "VernacExtend",
                        "0d9f12669aa7857d816d5247f75bab1bd3b63660"
                    ]
                },
                {
                    "command": [
                        "absurde.",
                        "VernacExtend",
                        "9c75d1eb6f29cca56b1c0e3559fe56a0be383999"
                    ]
                },
                {
                    "command": [
                        "assert(Col B P B1) by ColR.",
                        "VernacExtend",
                        "c958e6b6982c63c31b559ad405a4d92c58dc4e0a"
                    ]
                },
                {
                    "command": [
                        "assert(Col B P B2) by ColR.",
                        "VernacExtend",
                        "53155f4ca43291c5cc994bea27e27aca7b6cfeec"
                    ]
                },
                {
                    "command": [
                        "assert(Col C' P C1) by ColR.",
                        "VernacExtend",
                        "06f97cf3943f52dacab8e200177c216b632dc145"
                    ]
                },
                {
                    "command": [
                        "assert(Col C P C1) by (assert_cols;ColR).",
                        "VernacExtend",
                        "a9117193e111592a8dbe02038236c123aec3605a"
                    ]
                },
                {
                    "command": [
                        "assert(Col C' P C2) by ColR.",
                        "VernacExtend",
                        "f777b4d83454ca1d3168b250922b6b942d2b8f58"
                    ]
                },
                {
                    "command": [
                        "assert(Col C P C2) by (assert_cols;ColR).",
                        "VernacExtend",
                        "363721f66be151bb56fd5d90ad48b3f863e1c7f4"
                    ]
                },
                {
                    "command": [
                        "assert(~Col B P C) by (intro;apply H11;assert_cols;ColR).",
                        "VernacExtend",
                        "9aa3aa9790805bb72b72d4c9b49d110ef041bea6"
                    ]
                },
                {
                    "command": [
                        "assert(P <> D) by (intro; subst D; apply bet_col in H16; contradiction).",
                        "VernacExtend",
                        "2c6731148ee689f55128227bf5a2ba0b4614ece7"
                    ]
                },
                {
                    "command": [
                        "assert(HE := HTE P B C D A1 H17 H16 H29).",
                        "VernacExtend",
                        "9095a184c6cb7828c7563be1d655a1478634c9d3"
                    ]
                },
                {
                    "command": [
                        "ex_and HE X; ex_and H30 Y.",
                        "VernacExtend",
                        "06c5945521eb7e5e008f23396b8dd3fb65067a1a"
                    ]
                },
                {
                    "command": [
                        "assert(Hx := l12_6 A1 A2 P X).",
                        "VernacExtend",
                        "6639532fb051cb964cbf5e9ed282e1354fe2467e"
                    ]
                },
                {
                    "command": [
                        "assert (P<>X) by (intro;treat_equalities;intuition).",
                        "VernacExtend",
                        "2c8601d5b3753e555f0c238f1872a4fabec13805"
                    ]
                },
                {
                    "command": [
                        "assert(Par_strict A1 A2 P X) by (apply (par_strict_col2_par_strict _ _ B1 B2); Col; apply col3 with B P; Col).",
                        "VernacExtend",
                        "908fdc8d83fca532809cbc11a426f704f663bba7"
                    ]
                },
                {
                    "command": [
                        "apply Hx in H34.",
                        "VernacExtend",
                        "3103367f4aca9f9b526ca97107d8d3e52656330d"
                    ]
                },
                {
                    "command": [
                        "assert(Hy := l12_6 A1 A2 P Y).",
                        "VernacExtend",
                        "da2f723b20e05e70cbc769dd470195e3d51f6939"
                    ]
                },
                {
                    "command": [
                        "assert (P<>Y) by (intro;treat_equalities;intuition).",
                        "VernacExtend",
                        "0cc4b6c36691872bb292cfb0cf3ec12b15f203bf"
                    ]
                },
                {
                    "command": [
                        "assert(HPar4 : Par_strict A1 A2 P Y) by (apply (par_strict_col2_par_strict _ _ C1 C2); Col; apply (col3 C P); Col).",
                        "VernacExtend",
                        "8a71e831ef334a789c96e9c999ddff92e283162e"
                    ]
                },
                {
                    "command": [
                        "apply Hy in HPar4.",
                        "VernacExtend",
                        "b23e9e12a88a423dd123880345ca5b12451b0858"
                    ]
                },
                {
                    "command": [
                        "assert(HOS : OS A1 A2 X Y) by (apply one_side_transitivity with P; try assumption; unfold OS in *; ex_and H34 Z; exists Z; split; assumption).",
                        "VernacExtend",
                        "f01b118c30e91458ad8ad24a35fcd990c1fd54b3"
                    ]
                },
                {
                    "command": [
                        "assert(Ho := HOS).",
                        "VernacExtend",
                        "3e34d36bc3f83210702dd5a70fa128de98135c00"
                    ]
                },
                {
                    "command": [
                        "unfold OS in HOS.",
                        "VernacExtend",
                        "4924237c45752e16e46e606d51be9ae01b721c29"
                    ]
                },
                {
                    "command": [
                        "ex_and HOS Z.",
                        "VernacExtend",
                        "22b1936b2da07c4acbe38bc55f0a21ad7be933e5"
                    ]
                },
                {
                    "command": [
                        "unfold TS in H36.",
                        "VernacExtend",
                        "da192badd1fc575825dea3f43385c828321c6f3b"
                    ]
                },
                {
                    "command": [
                        "unfold TS in H37.",
                        "VernacExtend",
                        "f4b89ac9eab28cf9407c45b64e2200169086cbec"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert(HTS : TS A1 A2 X Y) by (unfold TS; repeat split; try assumption; exists A1; split; Col).",
                        "VernacExtend",
                        "84f642c43fa654025b2a35451ad6d3fe4ab43817"
                    ]
                },
                {
                    "command": [
                        "apply l9_9 in HTS.",
                        "VernacExtend",
                        "a048d5dba30eef09fa647b08de712d35ee54a5de"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "intros HTE A1; intros.",
                        "VernacExtend",
                        "d3c26063e65c46e1b171403c98577c9d1bb05bd8"
                    ]
                },
                {
                    "command": [
                        "assert( A1 <> A2 /\\ B1 <> B2) by (apply par_distinct;auto).",
                        "VernacExtend",
                        "5d74150c5250827be2525c756f727e189a48c18f"
                    ]
                },
                {
                    "command": [
                        "assert( A1 <> A2 /\\ C1 <> C2) by (apply par_distinct;auto).",
                        "VernacExtend",
                        "46fc00b252701e633865359f8952430ba6d6cc72"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "clear H4.",
                        "VernacExtend",
                        "b63698fbba7b38f68086944744e776a2fb5bc886"
                    ]
                },
                {
                    "command": [
                        "induction(col_dec P A1 A2).",
                        "VernacExtend",
                        "d6cb7c16a2af7cb0f41384bc4483d4f94d6ff7be"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "exfalso.",
                        "VernacExtend",
                        "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "exists P.",
                        "VernacExtend",
                        "22b7dea980d440fc518fb5c50eb57b72554716c3"
                    ]
                },
                {
                    "command": [
                        "split; Col.",
                        "VernacExtend",
                        "aa5cae43f030df753431c4227d6e2b42d3c89c38"
                    ]
                },
                {
                    "command": [
                        "induction H1.",
                        "VernacExtend",
                        "2e7754b8626e84404f5bc663332beef2a7c01b81"
                    ]
                },
                {
                    "command": [
                        "exfalso.",
                        "VernacExtend",
                        "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "exists P.",
                        "VernacExtend",
                        "22b7dea980d440fc518fb5c50eb57b72554716c3"
                    ]
                },
                {
                    "command": [
                        "split; Col.",
                        "VernacExtend",
                        "aa5cae43f030df753431c4227d6e2b42d3c89c38"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "split;ColR.",
                        "VernacExtend",
                        "054cb6aad3caf5943c35c6d1f7b72687bf4af889"
                    ]
                },
                {
                    "command": [
                        "apply (HAux HTE A1 A2 _ _ _ _ P); auto.",
                        "VernacExtend",
                        "c8221baed93221559de44983fc3e84ccc8794e28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}