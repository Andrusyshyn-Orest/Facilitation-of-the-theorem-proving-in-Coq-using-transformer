{
    "filename": "Meta_theory/Decidability/equivalence_between_decidability_properties_of_basic_relations.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Tarski_dev.Ch04_col.",
            "VernacRequire",
            "c9d35345003f6ed76c920325dfca504be04d3e77"
        ],
        [
            "Require Import GeoCoq.Utils.all_equiv.",
            "VernacRequire",
            "077142922cbda4cad6ba1c92c9f724aae83bdd28"
        ],
        [
            "Section Equivalence_between_decidability_properties_of_basic_relations.",
            "VernacBeginSection",
            "0db8fa153873364eda378c7434ef476eb45f5051"
        ],
        [
            "Context `{Tn:Tarski_neutral_dimensionless}.",
            "VernacContext",
            "19982cdd2d307fcea7f3b23e9bd1bd6ebb36d5bb"
        ],
        [
            "Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).",
            "VernacStartTheoremProof",
            "ae7ef44fe49501a2fa034a7696f3a543f1ce9c06"
        ],
        [
            "intros H A B.",
            "VernacExtend",
            "fa33b8a1e57e78433e4390c1b7b5b234efa4deb7"
        ],
        [
            "elim (H A B A A); intro HCong.",
            "VernacExtend",
            "7f9f4adaf42256bcb1988f497a1be73218611672"
        ],
        [
            "left; apply cong_identity with A; assumption.",
            "VernacExtend",
            "bd8ea5cc4f8f3c5e669e0de2530e9d6033e50985"
        ],
        [
            "right; intro; subst; apply HCong.",
            "VernacExtend",
            "7d8bbbba173de9e5778376c058bb258152de842b"
        ],
        [
            "apply cong_pseudo_reflexivity.",
            "VernacExtend",
            "487306551e28f43f75beffe7e8fa32f00c95dd25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.",
            "VernacStartTheoremProof",
            "5127c31c11d3ea9665176a26271e08e2e5be373b"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "induction (eq_dec A B).",
            "VernacExtend",
            "3b5ab89300b5b9fff6c1863572d7deef7abacd85"
        ],
        [
            "subst B.",
            "VernacExtend",
            "f890d24f78b8f44f1ebf2571edce25267b4aed11"
        ],
        [
            "assert (A' = B') by (apply (cong_identity A' B' A); Cong).",
            "VernacExtend",
            "b8fa1d972caefe6ab79137d81b91e788fe15f4a0"
        ],
        [
            "subst; Cong.",
            "VernacExtend",
            "0ea00a8a6d2f87ad3e1f743baa48ec903c55189a"
        ],
        [
            "apply cong_commutativity; apply (five_segment A A' B B' C C' A A'); Cong.",
            "VernacExtend",
            "a9acf46acc7e691b494753e9ebf9ca667ada494a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.",
            "VernacStartTheoremProof",
            "2fc1166d3b67aaa8d17032ef5edb7a4509c3a9b1"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "assert (Cong A X A Y) by eCong.",
            "VernacExtend",
            "cfdaef5f4753e36c71a9622f3891c74abb8ba7f6"
        ],
        [
            "assert (Cong Q X Q Y) by (apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y);Cong).",
            "VernacExtend",
            "a097306cdd950b2d922aa0cab2b8f679f266d01b"
        ],
        [
            "assert(OFSC Q A X Y Q A X X) by (unfold OFSC;repeat split;Cong).",
            "VernacExtend",
            "236722c19c65cd503ec8be2e0977c82d30255011"
        ],
        [
            "apply five_segment_with_def in H6; try assumption.",
            "VernacExtend",
            "654786cea9ff34c63242f79003a46cd335048e76"
        ],
        [
            "apply cong_identity with X; Cong.",
            "VernacExtend",
            "3d4e0143bf7a3f0f1e666cbba68b27c3623c9d3c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.",
            "VernacStartTheoremProof",
            "70c3ac8d387a346dc32e93fdc2227d6f49ae52fd"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "prolong A C x C D.",
            "VernacExtend",
            "ccc626b4d3869401365057442b267ac836ae8063"
        ],
        [
            "assert (x = D) by (apply (eq_dec_implies_construction_uniqueness eq_dec B C C D); try apply (between_exchange3 A B C x); Cong).",
            "VernacExtend",
            "7e861a107de1817a1cb91701ac2bd76fd9be11fe"
        ],
        [
            "subst x;assumption.",
            "VernacExtend",
            "1da2d8d6ffd5f417004e58b68b44888d629db6d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.",
            "VernacStartTheoremProof",
            "84caab6ae6eb26c980837b4e636a705ac2c7004e"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "induction (eq_dec B C); [subst; auto|].",
            "VernacExtend",
            "3655c7fd4d7ee3adf6bd2048cd414ee36a4c2d0e"
        ],
        [
            "apply between_symmetry; apply eq_dec_implies_outer_transitivity_between2 with C; eBetween.",
            "VernacExtend",
            "0c6f08e6ffeea5bffd391f9349ae7ed733a0007a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.",
            "VernacStartTheoremProof",
            "76b14b087b985150653d0b304ba7661beae16b8d"
        ],
        [
            "intro eq_dec.",
            "VernacExtend",
            "776c940428a2276355fae3b044b1d5b135f9f4f6"
        ],
        [
            "assert (ld:=lower_dim_ex).",
            "VernacExtend",
            "3f723c866dee2e000b8ce600c3f7490b6a621f51"
        ],
        [
            "ex_elim ld A.",
            "VernacExtend",
            "8a18c8f7df13c4266ef28717644e3f374d4bb194"
        ],
        [
            "ex_elim H B.",
            "VernacExtend",
            "6e33c7007c8463ac101cba00243870b7e612dcfc"
        ],
        [
            "ex_elim H0 C.",
            "VernacExtend",
            "3b3d7d094f6244c805e592b227f17e22f04bd0a2"
        ],
        [
            "induction (eq_dec A B).",
            "VernacExtend",
            "3b5ab89300b5b9fff6c1863572d7deef7abacd85"
        ],
        [
            "subst A; exists B; exists C; Between.",
            "VernacExtend",
            "e653a0a82a9fce8ca008258f8c6f55c6e74616d9"
        ],
        [
            "exists A; exists B; assumption.",
            "VernacExtend",
            "09c6e2c6c2eae00f5fbf63fb0d7bfc53ddb3e8a8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.",
            "VernacStartTheoremProof",
            "9b8f96395b747d67ede38ced40fb22c9c5c91d88"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "assert (tdp := eq_dec_implies_two_distinct_points eq_dec).",
            "VernacExtend",
            "e5c11432c032def09fec613ec7622a492b85ea19"
        ],
        [
            "ex_elim tdp x.",
            "VernacExtend",
            "dce50e31a4016c8f01269830ec3bf7081de19b6e"
        ],
        [
            "ex_elim H y.",
            "VernacExtend",
            "2c009f9c7a36e36d4a3d38f9e9b384bb5ac11ccf"
        ],
        [
            "prolong A B F x y.",
            "VernacExtend",
            "904a4cf95197d788ced486237252206603b5d275"
        ],
        [
            "exists F.",
            "VernacExtend",
            "ac6e44a491cbe4c7695107c0907318c2b2fae9f7"
        ],
        [
            "show_distinct B F.",
            "VernacExtend",
            "d284519a4695ba322cff09c3487ffb29e025e6e1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.",
            "VernacStartTheoremProof",
            "ad26cd990e9cd5bdac266704436ad7663408cf35"
        ],
        [
            "unfold IFSC.",
            "VernacExtend",
            "60753f7f761ae39d00e6454af135b7cb414ef7a5"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "induction (eq_dec A C).",
            "VernacExtend",
            "bab4b3d6c4673a368a6fef6237087fdec4abe009"
        ],
        [
            "treat_equalities;assumption.",
            "VernacExtend",
            "1de2a51775ad72f97b3cb8e5d10010adcfc011d7"
        ],
        [
            "assert (exists E, Bet A C E /\\ C <> E) by (apply eq_dec_implies_point_construction_different; auto).",
            "VernacExtend",
            "ec85cccd18a396fd3a0ab9941e63bb20ca276e78"
        ],
        [
            "ex_and H6 E.",
            "VernacExtend",
            "732387d8be42f94a9bbdc621729ca4e1180394b7"
        ],
        [
            "prolong A' C' E' C E.",
            "VernacExtend",
            "2da438bd47d42e6e1ee8b9243d594aab97770924"
        ],
        [
            "assert (Cong E D E' D') by ( apply (five_segment_with_def A C E D A' C' E' D');[ unfold OFSC; repeat split;Cong| assumption]).",
            "VernacExtend",
            "579e5653d2468fc089d6a0bf909dda0c22b10f3c"
        ],
        [
            "apply (five_segment_with_def E C B D E' C' B' D').",
            "VernacExtend",
            "78616c6c15215691cfe851e6d1a5f8164eb05152"
        ],
        [
            "unfold OFSC.",
            "VernacExtend",
            "492752124a3e0e575422433695b3cbf9807f06bc"
        ],
        [
            "repeat split; try solve [eBetween| Cong ].",
            "VernacExtend",
            "9a23e7c57b4f31d6a8335906499faef3c8199798"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.",
            "VernacStartTheoremProof",
            "43ade6c8d2aae2303faffd526036541e3965e5e9"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "assert (exists D', Bet C' A' D' /\\ A' <> D') by (apply eq_dec_implies_point_construction_different; auto).",
            "VernacExtend",
            "12df77da900e668a965d2f29096a4bcb479d1197"
        ],
        [
            "ex_and H1 x'.",
            "VernacExtend",
            "80b8ea576dea940d212455624cca7326dda51963"
        ],
        [
            "prolong x' A' B' A B.",
            "VernacExtend",
            "33cd2e99a2eaa352e3b6d2a6ea02834e45afe255"
        ],
        [
            "prolong x' B' C'' B C.",
            "VernacExtend",
            "10796423cc45f74fff54423da3f9ed57100a47af"
        ],
        [
            "assert (Bet A' B' C'') by eBetween.",
            "VernacExtend",
            "838be2c0dafc35897693deedd46bf0095229230e"
        ],
        [
            "assert (C'' = C').",
            "VernacExtend",
            "710e5d4b4a3610a7f6dbcc84594ad1f656e9d967"
        ],
        [
            "eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).",
            "VernacExtend",
            "32c4b4a3d24f7b8ed90c9a0bca57c46da10ed2f8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with B'; auto.",
            "VernacExtend",
            "1aac001e5309a6b36ab486f1e1ff54f403e7a997"
        ],
        [
            "apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C);Between.",
            "VernacExtend",
            "02e1b695f9ceb3660fb9da1d6d874467f4cdc2df"
        ],
        [
            "eBetween.",
            "VernacExtend",
            "7b31bcfa7dadd14c68b56ddf144f7ee645de2c81"
        ],
        [
            "Cong.",
            "VernacExtend",
            "38071831c795d703a75f51b6d65fc147487103cc"
        ],
        [
            "subst C''.",
            "VernacExtend",
            "baf9e25f24f7f72e069af1c7b2831385b5536daa"
        ],
        [
            "exists B'.",
            "VernacExtend",
            "bcb20d6cf63fc499dc5f940bb4e74610c8e37255"
        ],
        [
            "repeat split;Cong.",
            "VernacExtend",
            "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.",
            "VernacStartTheoremProof",
            "52c3284a10c8740cc31964b061cf08d2d0b91b78"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C') by (eapply eq_dec_implies_l4_5;intuition).",
            "VernacExtend",
            "f12219b8be7181b4fa249ce7c33bb5702ffa9b3e"
        ],
        [
            "ex_and H1 x.",
            "VernacExtend",
            "c361a38a1b27acee6c483cf87a7f204f2e88a370"
        ],
        [
            "unfold Cong_3 in *;spliter.",
            "VernacExtend",
            "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
        ],
        [
            "assert (Cong_3 A' x C' A' B' C') by (unfold Cong_3;repeat split;eCong).",
            "VernacExtend",
            "509cb97dcaf1ecf5f9d5e568439c879655c8b4f7"
        ],
        [
            "unfold Cong_3 in H7;spliter.",
            "VernacExtend",
            "91f2011eba666d3083fe26eb215bb9a5f5f9744e"
        ],
        [
            "assert (IFSC A' x C' x A' x C' B') by (unfold IFSC;repeat split;Cong).",
            "VernacExtend",
            "e9f68579712acf334b50eb479982072fc11712d2"
        ],
        [
            "assert (Cong x x x B') by (eapply eq_dec_implies_l4_2; try apply H10; auto).",
            "VernacExtend",
            "99a274164651607845cec0a05e496582fe6c3927"
        ],
        [
            "Between.",
            "VernacExtend",
            "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.",
            "VernacStartTheoremProof",
            "da0cfa091b06bad972c208cb78957e91642288e8"
        ],
        [
            "unfold FSC.",
            "VernacExtend",
            "d005f9205539e89bf245b71bab47bc97d7daa39f"
        ],
        [
            "unfold Col.",
            "VernacExtend",
            "6fc83dffc68036bd3d1b4e0319a8f1b0b6f4ec13"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "decompose [or and] H; clear H.",
            "VernacExtend",
            "f5be567bda90dd452d4e37de85d0d0c2519a5e43"
        ],
        [
            "assert (Bet A' B' C') by (eapply eq_dec_implies_l4_6;eauto).",
            "VernacExtend",
            "8e44dbe67cbca502e83330a6485df6d226005142"
        ],
        [
            "unfold Cong_3 in *; spliter.",
            "VernacExtend",
            "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
        ],
        [
            "assert(OFSC A B C D A' B' C' D') by (unfold OFSC;repeat split; assumption).",
            "VernacExtend",
            "1eb8caac63f7b26f591f5e5923c09d63c1391ee1"
        ],
        [
            "eapply five_segment_with_def; eauto.",
            "VernacExtend",
            "d5f24cd9f916c301110d09c7e4467875056d4a59"
        ],
        [
            "assert(Bet B' C' A') by (apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A'); Cong;auto with cong3).",
            "VernacExtend",
            "d0b6d329b462befd3adf23689101fdf25a429d31"
        ],
        [
            "apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').",
            "VernacExtend",
            "85fed99d186f9c356e3a9678b2aaf7161ead230d"
        ],
        [
            "unfold IFSC; unfold Cong_3 in *; spliter; repeat split;Between;Cong.",
            "VernacExtend",
            "6a661018fcb01cc56163c9063dec802f16616b79"
        ],
        [
            "assert (Bet C' A' B') by (eapply (eq_dec_implies_l4_6 eq_dec C A B C' A' B'); auto with cong3).",
            "VernacExtend",
            "c28291d9c67ad35c4e93696a3245640f654a1d11"
        ],
        [
            "eapply (five_segment_with_def B A C D B' A'); unfold OFSC; unfold Cong_3 in *; spliter; repeat split; Between; Cong.",
            "VernacExtend",
            "74aabf544dfd7959bd2e53c6d03275b8b56034f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.",
            "VernacStartTheoremProof",
            "51c5f47e4cf9a2a17e8f8b24877e3a33c5bd1840"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (FSC A B C P A B C Q) by (unfold FSC; unfold Cong_3; repeat split;Cong).",
            "VernacExtend",
            "38a5495dcb7d22aa801c2ce91fcc162fb397b03f"
        ],
        [
            "eapply eq_dec_implies_l4_16; eauto.",
            "VernacExtend",
            "7583a3cdf6715d15ce3bc6a19150b394277cff4b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.",
            "VernacStartTheoremProof",
            "a12fa1723187eacc1efcca7f3a5bbf056c94d034"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "prolong A D C' C D.",
            "VernacExtend",
            "fd515ed6d8df3ef8870ce52c01c782cd623040f3"
        ],
        [
            "prolong A C D' C D.",
            "VernacExtend",
            "6b924d76def97c7bc0e688ec6138ee0b5f3a6842"
        ],
        [
            "prolong A C' B' C B.",
            "VernacExtend",
            "762252240d7f6af72ef26fd77edf5bb1276d65bc"
        ],
        [
            "prolong A D' B'' D B.",
            "VernacExtend",
            "fa5040aec230472ce5f9ccb236d6027c1b9fbaa3"
        ],
        [
            "assert (Cong B C' B'' C).",
            "VernacExtend",
            "8cac1c4219bc2e34b9a0986d19a8633dff788e37"
        ],
        [
            "apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).",
            "VernacExtend",
            "95ce8f1cdb24ce9f5e50ac397522744c6e299eea"
        ],
        [
            "apply between_exchange3 with A; Between.",
            "VernacExtend",
            "cfc41061aeca510f037469550ae73e10e3aba9d9"
        ],
        [
            "apply between_inner_transitivity with A; Between.",
            "VernacExtend",
            "3ee4cfbde76214f59355a5253fd0bb5f05725236"
        ],
        [
            "Cong.",
            "VernacExtend",
            "38071831c795d703a75f51b6d65fc147487103cc"
        ],
        [
            "apply cong_transitivity with C D; Cong.",
            "VernacExtend",
            "bff5b3aa387bb8d59555ad1506791884c2fc4d6c"
        ],
        [
            "assert (Cong B B' B'' B).",
            "VernacExtend",
            "5139935fc383f981ce3c50de5d2980e2edfbdd0f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B); Cong.",
            "VernacExtend",
            "0f3ef2a9424a82d5e4f77960550fe837ce7a62f8"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Bet A B C'); [|eBetween].",
            "VernacExtend",
            "1225b9d189a6370528a836ba8cc300a76c0a7f64"
        ],
        [
            "induction (eq_dec B D); [treat_equalities; auto|].",
            "VernacExtend",
            "9b709b2cf019a4b15a90a4b8c5ca347921983cdd"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "apply eq_dec_implies_outer_transitivity_between2 with D; eBetween.",
            "VernacExtend",
            "48ec4544a5349ba9be847a1226d5223625e9394f"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "induction (eq_dec C D'); [treat_equalities; eBetween|].",
            "VernacExtend",
            "c5821a7d286e18439e43722abb2ba98918b5e623"
        ],
        [
            "apply eq_dec_implies_outer_transitivity_between2 with D'; eBetween.",
            "VernacExtend",
            "f082a50dd5961a847f662c58a3eeab3d23dedeb0"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert(B'' = B').",
            "VernacExtend",
            "e969ad95abc69b7563623e6e1ff7732486f2b660"
        ],
        [
            "apply (eq_dec_implies_construction_uniqueness eq_dec A B B B''); try Cong.",
            "VernacExtend",
            "00858f73c34ef6bdf1f689d298d3518cfd54d052"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with D'; Between; apply eq_dec_implies_between_exchange4 with C; Between.",
            "VernacExtend",
            "4614af282e1d666b4353317643f9b50ec8e62b5f"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with C'; Between; apply eq_dec_implies_between_exchange4 with D; Between.",
            "VernacExtend",
            "95de1b90799b49eec3d90a2dbbede0b0a5a160db"
        ],
        [
            "subst B''.",
            "VernacExtend",
            "cba3adffb1d3a34ee9f908cf8ba0b96f43616125"
        ],
        [
            "assert (FSC B C D' C' B' C' D C).",
            "VernacExtend",
            "6d54c8027d3afe4143253d72ef6ad9039bb25255"
        ],
        [
            "unfold FSC.",
            "VernacExtend",
            "d005f9205539e89bf245b71bab47bc97d7daa39f"
        ],
        [
            "repeat split; unfold Col; try Cong.",
            "VernacExtend",
            "6da655640c99492fc651647a1aa9783953591d43"
        ],
        [
            "left; apply between_exchange3 with A; Between.",
            "VernacExtend",
            "de85465eb5da01fb3a00a75e2f58538946a2f629"
        ],
        [
            "apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D); Cong.",
            "VernacExtend",
            "2df317746bb9020b16f5292d5633e8fd09ae798e"
        ],
        [
            "apply between_exchange3 with A; assumption.",
            "VernacExtend",
            "4cf188a6df0e9e0aef7c02d2c732e8e2aa9af1e2"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "apply between_exchange3 with A; assumption.",
            "VernacExtend",
            "4cf188a6df0e9e0aef7c02d2c732e8e2aa9af1e2"
        ],
        [
            "apply cong_transitivity with C D; Cong.",
            "VernacExtend",
            "bff5b3aa387bb8d59555ad1506791884c2fc4d6c"
        ],
        [
            "apply cong_transitivity with C D; Cong.",
            "VernacExtend",
            "bff5b3aa387bb8d59555ad1506791884c2fc4d6c"
        ],
        [
            "induction (eq_dec B C).",
            "VernacExtend",
            "b82dfbd2ac199c4bf2ae52d46800b346ab53f44c"
        ],
        [
            "subst C; auto.",
            "VernacExtend",
            "b9650d0989c853d39facb547c15c443ae77e9eb4"
        ],
        [
            "assert (Cong D' C' D C) by (eapply eq_dec_implies_l4_16; try apply H12; assumption).",
            "VernacExtend",
            "762545d51c0074c4aff9004061c5edf9dfeee445"
        ],
        [
            "assert (exists E, Bet C E C' /\\ Bet D E D') by (apply inner_pasch with A; Between).",
            "VernacExtend",
            "86183243ae9be788f3687a548146c6e2ab1001e5"
        ],
        [
            "ex_and H15 E.",
            "VernacExtend",
            "ab0d755478bc3246bfe823212ec00110ad4f5007"
        ],
        [
            "assert (IFSC D E D' C D E D' C') by (unfold IFSC; repeat split; Cong; apply cong_transitivity with C D; Cong).",
            "VernacExtend",
            "be7d71dd84032ef9cf0848182ff2fcda1fc03909"
        ],
        [
            "assert (IFSC C E C' D C E C' D') by (unfold IFSC; repeat split; Cong; apply cong_transitivity with C D; Cong).",
            "VernacExtend",
            "d4adaf35b1d9f4f611291a12386957fef521429c"
        ],
        [
            "assert (Cong E C E C') by (eapply eq_dec_implies_l4_2; try apply H17; auto).",
            "VernacExtend",
            "ebf5d991eeb600acc4c2914db6ebf7edc2ef0e79"
        ],
        [
            "assert (Cong E D E D') by (eapply eq_dec_implies_l4_2; try apply H18; auto).",
            "VernacExtend",
            "5b6869de87b2523c0a3f3717f36d5ff7b207255c"
        ],
        [
            "induction (eq_dec C C').",
            "VernacExtend",
            "0eae7647c936b9180b3587766a0cd5d4331361ad"
        ],
        [
            "subst C'; right; assumption.",
            "VernacExtend",
            "df1a8d74e7ce4e796c8c7ec35358ac928da07742"
        ],
        [
            "show_distinct C D'; intuition.",
            "VernacExtend",
            "1b15a3ca1a3a42df070e9979c8a2f510783cfc7d"
        ],
        [
            "prolong C' C P C D'.",
            "VernacExtend",
            "496dc452218a5283ef65b6c033fa7d8d21498e5a"
        ],
        [
            "prolong D' C R C E.",
            "VernacExtend",
            "59b5f41382ff2582dbbfed929c6d26096c13afca"
        ],
        [
            "prolong P R Q R P.",
            "VernacExtend",
            "57ab7f31d996d9094ffd1a0b1124f21322b4d39d"
        ],
        [
            "assert (FSC D' C R P P C E D').",
            "VernacExtend",
            "16761978a1191717fa0a01b5cfe9144475531ef0"
        ],
        [
            "unfold FSC.",
            "VernacExtend",
            "d005f9205539e89bf245b71bab47bc97d7daa39f"
        ],
        [
            "unfold Cong_3.",
            "VernacExtend",
            "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
        ],
        [
            "assert_cols.",
            "VernacExtend",
            "031d7df0508efc81572acb10c507042760b719fa"
        ],
        [
            "repeat split; Cong.",
            "VernacExtend",
            "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
        ],
        [
            "apply eq_dec_implies_l2_11 with C C; Cong.",
            "VernacExtend",
            "b49ebd060dc28301d37e8af2677bcc024f97970f"
        ],
        [
            "apply between_inner_transitivity with C'; Between.",
            "VernacExtend",
            "35d4d135723b23e95f619b6ab5529dc93c876b49"
        ],
        [
            "assert (Cong R P E D') by (eauto using eq_dec_implies_l4_16).",
            "VernacExtend",
            "30daacd65ed06fbb7aa69d0e2100effd82564335"
        ],
        [
            "assert (Cong R Q E D).",
            "VernacExtend",
            "852aa3ef2b4eb98f2395b798c83d09c10b8d2579"
        ],
        [
            "eapply cong_transitivity.",
            "VernacExtend",
            "99678d0c23f143de076a065c43c15805aaae09ae"
        ],
        [
            "apply cong_transitivity with R P; Cong.",
            "VernacExtend",
            "0739fd1aea7aa0f0fe7f7270ab9e1a9723157648"
        ],
        [
            "apply cong_transitivity with E D'; Cong.",
            "VernacExtend",
            "f1eff07b9834afa56da07461c185ebee4968300b"
        ],
        [
            "assert (FSC D' E D C P R Q C).",
            "VernacExtend",
            "128fbe6c5f0a9a83f8cfaaa34fa7b8d12644428d"
        ],
        [
            "unfold FSC.",
            "VernacExtend",
            "d005f9205539e89bf245b71bab47bc97d7daa39f"
        ],
        [
            "repeat split; Cong.",
            "VernacExtend",
            "ec8f370e0576f6cb30131105b6e9f74e7f035f5d"
        ],
        [
            "unfold Col; Between.",
            "VernacExtend",
            "909f2df547c1f8e19dd73c3055722a43d216eaea"
        ],
        [
            "eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q); Between; Cong.",
            "VernacExtend",
            "86b582875a998f4575ce2ccedbfba44750cf44e4"
        ],
        [
            "assert (Cong D C Q C).",
            "VernacExtend",
            "e8c071403cd18ae9f7035abbf6f9ce011fcfc742"
        ],
        [
            "induction (eq_dec D' E).",
            "VernacExtend",
            "313109c5a7350d161f883cda2536713865869c00"
        ],
        [
            "unfold FSC, IFSC, Cong_3 in *; spliter; treat_equalities; Cong.",
            "VernacExtend",
            "bebeae240dae9ece95e0ee73a7d51c5612f7c0fd"
        ],
        [
            "apply eq_dec_implies_l4_16 with D' E P R; assumption.",
            "VernacExtend",
            "d6033c25c709b891b9246ae9e8c4a76881eb2869"
        ],
        [
            "assert (Cong C P C Q).",
            "VernacExtend",
            "42c588e05d7755b838d1f75607a0ddb539c7b43f"
        ],
        [
            "unfold FSC in *;unfold Cong_3 in *.",
            "VernacExtend",
            "c85662b13dcf5b678c3f4c1f176bf5f39dd25654"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "apply cong_transitivity with C D.",
            "VernacExtend",
            "f8fadacb3d740075845c39bdb2d3d7f71411c356"
        ],
        [
            "apply cong_transitivity with C D'; Cong.",
            "VernacExtend",
            "41f42419b0e566e6ebe3e0a62b15a4866fd773f1"
        ],
        [
            "Cong.",
            "VernacExtend",
            "38071831c795d703a75f51b6d65fc147487103cc"
        ],
        [
            "show_distinct R C.",
            "VernacExtend",
            "1268a6ba918160a4a82d7aca72f51b0a2404c50c"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Cong D' P D' Q) by (apply (eq_dec_implies_l4_17 eq_dec R C); unfold Col; Between; Cong).",
            "VernacExtend",
            "98daedcaf799e915c89ed235bcf40ae239e34a94"
        ],
        [
            "assert (Cong B P B Q).",
            "VernacExtend",
            "35931cf0ff60021b28d47ff0810f20ae3efb9894"
        ],
        [
            "apply eq_dec_implies_l4_17 with C D'; try assumption.",
            "VernacExtend",
            "a7a3dd3670e9b51bbb382239bdc24da4e07b3caa"
        ],
        [
            "unfold Col; right;right.",
            "VernacExtend",
            "ff22a87146634e6e2818a783d0a857c0f8979318"
        ],
        [
            "apply between_exchange3 with A; assumption.",
            "VernacExtend",
            "4cf188a6df0e9e0aef7c02d2c732e8e2aa9af1e2"
        ],
        [
            "assert (Cong B' P B' Q).",
            "VernacExtend",
            "36cc73d12e9ce76c41af8c6188614590f3d0e713"
        ],
        [
            "eapply (eq_dec_implies_l4_17 eq_dec C D'); Cong.",
            "VernacExtend",
            "c7e2c702313e972bec5aa547960d47f4f006497e"
        ],
        [
            "unfold Col; left.",
            "VernacExtend",
            "6a0b04dbcabf69d602a58acb07ea72401e9f66f0"
        ],
        [
            "apply between_exchange3 with A; assumption.",
            "VernacExtend",
            "4cf188a6df0e9e0aef7c02d2c732e8e2aa9af1e2"
        ],
        [
            "assert (Cong C' P C' Q).",
            "VernacExtend",
            "be9b9ff0b9b565e8bd1dacc06c10c18274019bd7"
        ],
        [
            "induction(eq_dec B B').",
            "VernacExtend",
            "ee32cded706b3754303a232e861ec16fe339fcdf"
        ],
        [
            "subst B'.",
            "VernacExtend",
            "8cde9e92b7e45a08022881a785185790cfb3adef"
        ],
        [
            "unfold IFSC,FSC, Cong_3 in *.",
            "VernacExtend",
            "51114eaa4973ea29f7ae6a9234b70706f2ee0ce3"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "clean_duplicated_hyps.",
            "VernacExtend",
            "a57d89098f9c8297e7d23a96a3d1bd41c0672502"
        ],
        [
            "clean_trivial_hyps.",
            "VernacExtend",
            "ac97f941a1a2a1c1aa41d983627aedf3348ee9a7"
        ],
        [
            "apply eq_dec_implies_l4_17 with C D'; try assumption.",
            "VernacExtend",
            "a7a3dd3670e9b51bbb382239bdc24da4e07b3caa"
        ],
        [
            "unfold Col; left.",
            "VernacExtend",
            "6a0b04dbcabf69d602a58acb07ea72401e9f66f0"
        ],
        [
            "apply between_exchange3 with A; try assumption.",
            "VernacExtend",
            "67e1601c27f348064322b70f5de18ef661a38910"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with B; try assumption.",
            "VernacExtend",
            "601b8f632b9b3be0ece51410db24acbfd0adcede"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with D; assumption.",
            "VernacExtend",
            "6d652e503b4e10f42279133bb51e12521b5dd349"
        ],
        [
            "eapply eq_dec_implies_l4_17 with B B'; Cong.",
            "VernacExtend",
            "12ec6ab23390871647741fe349aa0082780f8923"
        ],
        [
            "unfold Col; right; left.",
            "VernacExtend",
            "cf30d1bd4198c67a5973a9b46ebabb8f1ee4697a"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "apply between_exchange3 with A; try assumption.",
            "VernacExtend",
            "67e1601c27f348064322b70f5de18ef661a38910"
        ],
        [
            "apply eq_dec_implies_between_exchange4 with D; assumption.",
            "VernacExtend",
            "6d652e503b4e10f42279133bb51e12521b5dd349"
        ],
        [
            "assert (Cong P P P Q).",
            "VernacExtend",
            "f17fe0fecb9146e50226b387d142fe63ad3e5784"
        ],
        [
            "apply eq_dec_implies_l4_17 with C C'; try assumption.",
            "VernacExtend",
            "17189e86f926f2274b91600efe62de335090bc88"
        ],
        [
            "unfold Col; right; right.",
            "VernacExtend",
            "ff22a87146634e6e2818a783d0a857c0f8979318"
        ],
        [
            "apply between_symmetry; assumption.",
            "VernacExtend",
            "0d68899f0ea5267756cd3ff8dee513c935bd9c19"
        ],
        [
            "unfold IFSC,FSC, Cong_3 in *; spliter.",
            "VernacExtend",
            "19d062c4ba357193e7f251165b4eca1fe70b8182"
        ],
        [
            "treat_equalities.",
            "VernacExtend",
            "0d9f12669aa7857d816d5247f75bab1bd3b63660"
        ],
        [
            "Between.",
            "VernacExtend",
            "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.",
            "VernacStartTheoremProof",
            "31c6348a06a2ace084ff72d06764a78d7a612ba6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Bet A C D \\/ Bet A D C) by (eapply eq_dec_implies_l5_1; eauto).",
            "VernacExtend",
            "4c90bdf68cb60b610574aef3957b80083fcd2553"
        ],
        [
            "induction H3.",
            "VernacExtend",
            "3139d12347d024ef0d73e7a4ac9234d4e721869a"
        ],
        [
            "left; eBetween.",
            "VernacExtend",
            "f7f732b155ec8e7622ef372a00a25b3c64d00020"
        ],
        [
            "right; eBetween.",
            "VernacExtend",
            "7c915af97a2fa72fbd1e415171c071fcc7331656"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.",
            "VernacStartTheoremProof",
            "ad1fa8303ce50a17a03a7454f8fa6becd9a9f5fb"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "prolong A Q A' A Q.",
            "VernacExtend",
            "8c33717c12447114c932b6a5efc4c63e8e8658c7"
        ],
        [
            "prolong A' Q X B C.",
            "VernacExtend",
            "7a592faafd543ef0a32c9a7f5239c52e0814b2c3"
        ],
        [
            "exists X.",
            "VernacExtend",
            "199ac60d0a22b88b3af3f4f4b7e49636d72d9970"
        ],
        [
            "show_distinct A' Q.",
            "VernacExtend",
            "75ad0cf029ac740986fe06b088c489c3eef7f1a9"
        ],
        [
            "solve [intuition].",
            "VernacExtend",
            "a44c77fe0ad6731ace858e9158278f1620dc35f8"
        ],
        [
            "split; try assumption.",
            "VernacExtend",
            "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
        ],
        [
            "eapply (eq_dec_implies_l5_2 eq_dec A' Q); Between.",
            "VernacExtend",
            "9c1a8743b0009ed9c468f8ee7524635f7ea02612"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.",
            "VernacStartTheoremProof",
            "16b5c7559944357ebed832a2937eb1c50feda433"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Bet A B C).",
            "VernacExtend",
            "60da74f2570859e683c315b7d09210471a9c3658"
        ],
        [
            "eapply eq_dec_implies_l4_6 with A C B; unfold Cong_3; repeat split; Cong.",
            "VernacExtend",
            "b2411d5c9331917f08238eb774d3ae1ec3ca1865"
        ],
        [
            "eapply between_equality; eBetween.",
            "VernacExtend",
            "ac2ab3f19d08f3305c358d73d5fde28d9708b04a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).",
            "VernacStartTheoremProof",
            "44c2f0f52ce3e6928971b10385224c74c58deec5"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "elim (eq_dec A B); intro; subst; elim (eq_dec C D); intro; subst.",
            "VernacExtend",
            "3cfc2a6a2da4fcca3a2e4676e6e35a2be20c4971"
        ],
        [
            "left; Cong.",
            "VernacExtend",
            "3444341d74b75db3efd64d25429637258519cabf"
        ],
        [
            "right; intro; apply H; apply cong_identity with B; Cong.",
            "VernacExtend",
            "0ff6b6a1048e94cf92510c0613b8ad2a9352fe5c"
        ],
        [
            "right; intro; apply H; apply cong_identity with D; Cong.",
            "VernacExtend",
            "df549906d62f7e1f63b20eae5f1fdc9542e94c5a"
        ],
        [
            "elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).",
            "VernacExtend",
            "44baa64b74b44ae62ab19d94338167359ad728ba"
        ],
        [
            "intros D' HD'.",
            "VernacExtend",
            "ee96ffcb5191492633a35b1c7c782d8595474dd7"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "elim (eq_dec B D');intro.",
            "VernacExtend",
            "ca113f5d7ab979032eee6a54dbcc9d25ec75026c"
        ],
        [
            "subst; left; assumption.",
            "VernacExtend",
            "365ba5b8eb0a8782da5a9fa369ed658a100b2734"
        ],
        [
            "right; intro.",
            "VernacExtend",
            "0fd4b34386435b5a8272d82b153513f11dc07023"
        ],
        [
            "assert (Cong A D' A B) by eCong.",
            "VernacExtend",
            "b8858f8f2c1758216a778ad240355becfb4e0a9e"
        ],
        [
            "elim H1; intro; clear H1.",
            "VernacExtend",
            "6b1036b6f774c67c76067d6ff225e7d48ea608eb"
        ],
        [
            "assert (B = D') by (apply (eq_dec_implies_between_cong eq_dec A D' B); Cong).",
            "VernacExtend",
            "538dfd99816e35719df3b177b8f6f0744e5b11f7"
        ],
        [
            "subst;intuition.",
            "VernacExtend",
            "996f8c91c6df59eb32d913a2132e15c6011e125f"
        ],
        [
            "assert (D'=B) by (apply (eq_dec_implies_between_cong eq_dec A B D');assumption).",
            "VernacExtend",
            "5bfbd3eaefcab00f8641bbdabb4ad7e4593f30e6"
        ],
        [
            "subst;intuition.",
            "VernacExtend",
            "996f8c91c6df59eb32d913a2132e15c6011e125f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).",
            "VernacStartTheoremProof",
            "fe0c18a3e418ed6707e87c5bd2bf4deac651f9aa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (H A B A).",
            "VernacExtend",
            "d5360e7c511f2202f9e7bf6ecaa84b69152f02b8"
        ],
        [
            "left; apply between_identity; assumption.",
            "VernacExtend",
            "ff6cc67d626975b27d76ad044479ed8e83a0edec"
        ],
        [
            "right; intro; subst; apply H0; apply between_trivial.",
            "VernacExtend",
            "47c535cef705f908e463bc0c234929a4afb9e9d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.",
            "VernacStartTheoremProof",
            "92dac6675240ba8ac0aa4e6b8436a34d39713eba"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).",
            "VernacExtend",
            "75e76907ac3e5a4cb32d2bc54d538ed321181d98"
        ],
        [
            "elim T; intro; clear T.",
            "VernacExtend",
            "95d89dc4009bd739f297e661b52a906d795ac66d"
        ],
        [
            "apply eq_dec_implies_between_cong with B; Cong.",
            "VernacExtend",
            "92b7ae083e0d095f879102d9493a0cdaf2cc7291"
        ],
        [
            "symmetry; apply eq_dec_implies_between_cong with B; Cong.",
            "VernacExtend",
            "cf4b86f42cbe88e5b8ed975974df138b8665ceb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).",
            "VernacStartTheoremProof",
            "228d89f90ff153a71e20b84b427c0942d6ffb94e"
        ],
        [
            "intro eq_dec; intros.",
            "VernacExtend",
            "bb405daed9adfc0ecec95727c58c1792381d737a"
        ],
        [
            "elim (segment_construction A B B C); intros C' HC'.",
            "VernacExtend",
            "636744d71bb8faf3f578b9644b61a506909b0652"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "elim (eq_dec C C'); intro.",
            "VernacExtend",
            "b7e2a967308446eb021f675e03cd8f1e8358e2c5"
        ],
        [
            "subst; tauto.",
            "VernacExtend",
            "242b88ac37f1205319ab9d9cd58773501a7271b8"
        ],
        [
            "elim (eq_dec A B);intro.",
            "VernacExtend",
            "a824b62b510e6edd0a4e512a0e03e0a95c632598"
        ],
        [
            "left; subst; Between.",
            "VernacExtend",
            "977c64501d7230bb20e39cbe4becf5c91c38964c"
        ],
        [
            "right; intro; apply H1; apply eq_dec_implies_between_cong_3 with A B; Cong.",
            "VernacExtend",
            "2766ecdadaea216bcdd9183352fa7fdd95e391d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition decidability_of_equality_of_points := forall A B:Tpoint, A=B \\/ A<>B.",
            "VernacDefinition",
            "f94595bff11f0afce49730f7fb6465c8ea321a43"
        ],
        [
            "Definition decidability_of_congruence_of_points := forall A B C D:Tpoint, Cong A B C D \\/ ~ Cong A B C D.",
            "VernacDefinition",
            "5e5d1a51f4d79b48d12883933de4d84e4baa4146"
        ],
        [
            "Definition decidability_of_betweenness_of_points := forall A B C:Tpoint, Bet A B C \\/ ~ Bet A B C.",
            "VernacDefinition",
            "0762126ae72a6263cbdbd1ddb797af5bbabb9bca"
        ],
        [
            "Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).",
            "VernacStartTheoremProof",
            "443554014fc26ec168bddcd2ab7f8d50d7e49ab6"
        ],
        [
            "unfold all_equiv.",
            "VernacExtend",
            "de65e79c49fb1a89ae522f6ccd7726b4c77aa355"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (P:=cong_dec_eq_dec).",
            "VernacExtend",
            "556c85198819cd74bed7831964ff64709aa5ccf7"
        ],
        [
            "assert (Q:=eq_dec_cong_dec).",
            "VernacExtend",
            "acdc6408b5fac4c05d82517fa664099ef5cb1996"
        ],
        [
            "assert (R:=bet_dec_eq_dec).",
            "VernacExtend",
            "2a069b24db09dfd24d00bad57aa32f4b0bf71930"
        ],
        [
            "assert (S:=eq_dec_bet_dec).",
            "VernacExtend",
            "e0ef2d8b3e4cefdecc2e1d8389255ac2c07b3ff2"
        ],
        [
            "decompose [or] H;clear H;decompose [or] H0;clear H0;subst; tauto.",
            "VernacExtend",
            "ee7dc4e916c85b839bf5378982f44bec14d3af2d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Equivalence_between_decidability_properties_of_basic_relations.",
            "VernacEndSegment",
            "0d8327f5f00e3262b3549f97d284257a7ea2ce7c"
        ]
    ],
    "proofs": [
        {
            "name": "cong_dec_eq_dec",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros H A B.",
                        "VernacExtend",
                        "fa33b8a1e57e78433e4390c1b7b5b234efa4deb7"
                    ]
                },
                {
                    "command": [
                        "elim (H A B A A); intro HCong.",
                        "VernacExtend",
                        "7f9f4adaf42256bcb1988f497a1be73218611672"
                    ]
                },
                {
                    "command": [
                        "left; apply cong_identity with A; assumption.",
                        "VernacExtend",
                        "bd8ea5cc4f8f3c5e669e0de2530e9d6033e50985"
                    ]
                },
                {
                    "command": [
                        "right; intro; subst; apply HCong.",
                        "VernacExtend",
                        "7d8bbbba173de9e5778376c058bb258152de842b"
                    ]
                },
                {
                    "command": [
                        "apply cong_pseudo_reflexivity.",
                        "VernacExtend",
                        "487306551e28f43f75beffe7e8fa32f00c95dd25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l2_11",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec A B).",
                        "VernacExtend",
                        "3b5ab89300b5b9fff6c1863572d7deef7abacd85"
                    ]
                },
                {
                    "command": [
                        "subst B.",
                        "VernacExtend",
                        "f890d24f78b8f44f1ebf2571edce25267b4aed11"
                    ]
                },
                {
                    "command": [
                        "assert (A' = B') by (apply (cong_identity A' B' A); Cong).",
                        "VernacExtend",
                        "b8fa1d972caefe6ab79137d81b91e788fe15f4a0"
                    ]
                },
                {
                    "command": [
                        "subst; Cong.",
                        "VernacExtend",
                        "0ea00a8a6d2f87ad3e1f743baa48ec903c55189a"
                    ]
                },
                {
                    "command": [
                        "apply cong_commutativity; apply (five_segment A A' B B' C C' A A'); Cong.",
                        "VernacExtend",
                        "a9acf46acc7e691b494753e9ebf9ca667ada494a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_construction_uniqueness",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A X A Y) by eCong.",
                        "VernacExtend",
                        "cfdaef5f4753e36c71a9622f3891c74abb8ba7f6"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q X Q Y) by (apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y);Cong).",
                        "VernacExtend",
                        "a097306cdd950b2d922aa0cab2b8f679f266d01b"
                    ]
                },
                {
                    "command": [
                        "assert(OFSC Q A X Y Q A X X) by (unfold OFSC;repeat split;Cong).",
                        "VernacExtend",
                        "236722c19c65cd503ec8be2e0977c82d30255011"
                    ]
                },
                {
                    "command": [
                        "apply five_segment_with_def in H6; try assumption.",
                        "VernacExtend",
                        "654786cea9ff34c63242f79003a46cd335048e76"
                    ]
                },
                {
                    "command": [
                        "apply cong_identity with X; Cong.",
                        "VernacExtend",
                        "3d4e0143bf7a3f0f1e666cbba68b27c3623c9d3c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_outer_transitivity_between2",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "prolong A C x C D.",
                        "VernacExtend",
                        "ccc626b4d3869401365057442b267ac836ae8063"
                    ]
                },
                {
                    "command": [
                        "assert (x = D) by (apply (eq_dec_implies_construction_uniqueness eq_dec B C C D); try apply (between_exchange3 A B C x); Cong).",
                        "VernacExtend",
                        "7e861a107de1817a1cb91701ac2bd76fd9be11fe"
                    ]
                },
                {
                    "command": [
                        "subst x;assumption.",
                        "VernacExtend",
                        "1da2d8d6ffd5f417004e58b68b44888d629db6d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_between_exchange4",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec B C); [subst; auto|].",
                        "VernacExtend",
                        "3655c7fd4d7ee3adf6bd2048cd414ee36a4c2d0e"
                    ]
                },
                {
                    "command": [
                        "apply between_symmetry; apply eq_dec_implies_outer_transitivity_between2 with C; eBetween.",
                        "VernacExtend",
                        "0c6f08e6ffeea5bffd391f9349ae7ed733a0007a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_two_distinct_points",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "intro eq_dec.",
                        "VernacExtend",
                        "776c940428a2276355fae3b044b1d5b135f9f4f6"
                    ]
                },
                {
                    "command": [
                        "assert (ld:=lower_dim_ex).",
                        "VernacExtend",
                        "3f723c866dee2e000b8ce600c3f7490b6a621f51"
                    ]
                },
                {
                    "command": [
                        "ex_elim ld A.",
                        "VernacExtend",
                        "8a18c8f7df13c4266ef28717644e3f374d4bb194"
                    ]
                },
                {
                    "command": [
                        "ex_elim H B.",
                        "VernacExtend",
                        "6e33c7007c8463ac101cba00243870b7e612dcfc"
                    ]
                },
                {
                    "command": [
                        "ex_elim H0 C.",
                        "VernacExtend",
                        "3b3d7d094f6244c805e592b227f17e22f04bd0a2"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec A B).",
                        "VernacExtend",
                        "3b5ab89300b5b9fff6c1863572d7deef7abacd85"
                    ]
                },
                {
                    "command": [
                        "subst A; exists B; exists C; Between.",
                        "VernacExtend",
                        "e653a0a82a9fce8ca008258f8c6f55c6e74616d9"
                    ]
                },
                {
                    "command": [
                        "exists A; exists B; assumption.",
                        "VernacExtend",
                        "09c6e2c6c2eae00f5fbf63fb0d7bfc53ddb3e8a8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_point_construction_different",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "assert (tdp := eq_dec_implies_two_distinct_points eq_dec).",
                        "VernacExtend",
                        "e5c11432c032def09fec613ec7622a492b85ea19"
                    ]
                },
                {
                    "command": [
                        "ex_elim tdp x.",
                        "VernacExtend",
                        "dce50e31a4016c8f01269830ec3bf7081de19b6e"
                    ]
                },
                {
                    "command": [
                        "ex_elim H y.",
                        "VernacExtend",
                        "2c009f9c7a36e36d4a3d38f9e9b384bb5ac11ccf"
                    ]
                },
                {
                    "command": [
                        "prolong A B F x y.",
                        "VernacExtend",
                        "904a4cf95197d788ced486237252206603b5d275"
                    ]
                },
                {
                    "command": [
                        "exists F.",
                        "VernacExtend",
                        "ac6e44a491cbe4c7695107c0907318c2b2fae9f7"
                    ]
                },
                {
                    "command": [
                        "show_distinct B F.",
                        "VernacExtend",
                        "d284519a4695ba322cff09c3487ffb29e025e6e1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l4_2",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "unfold IFSC.",
                        "VernacExtend",
                        "60753f7f761ae39d00e6454af135b7cb414ef7a5"
                    ]
                },
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec A C).",
                        "VernacExtend",
                        "bab4b3d6c4673a368a6fef6237087fdec4abe009"
                    ]
                },
                {
                    "command": [
                        "treat_equalities;assumption.",
                        "VernacExtend",
                        "1de2a51775ad72f97b3cb8e5d10010adcfc011d7"
                    ]
                },
                {
                    "command": [
                        "assert (exists E, Bet A C E /\\ C <> E) by (apply eq_dec_implies_point_construction_different; auto).",
                        "VernacExtend",
                        "ec85cccd18a396fd3a0ab9941e63bb20ca276e78"
                    ]
                },
                {
                    "command": [
                        "ex_and H6 E.",
                        "VernacExtend",
                        "732387d8be42f94a9bbdc621729ca4e1180394b7"
                    ]
                },
                {
                    "command": [
                        "prolong A' C' E' C E.",
                        "VernacExtend",
                        "2da438bd47d42e6e1ee8b9243d594aab97770924"
                    ]
                },
                {
                    "command": [
                        "assert (Cong E D E' D') by ( apply (five_segment_with_def A C E D A' C' E' D');[ unfold OFSC; repeat split;Cong| assumption]).",
                        "VernacExtend",
                        "579e5653d2468fc089d6a0bf909dda0c22b10f3c"
                    ]
                },
                {
                    "command": [
                        "apply (five_segment_with_def E C B D E' C' B' D').",
                        "VernacExtend",
                        "78616c6c15215691cfe851e6d1a5f8164eb05152"
                    ]
                },
                {
                    "command": [
                        "unfold OFSC.",
                        "VernacExtend",
                        "492752124a3e0e575422433695b3cbf9807f06bc"
                    ]
                },
                {
                    "command": [
                        "repeat split; try solve [eBetween| Cong ].",
                        "VernacExtend",
                        "9a23e7c57b4f31d6a8335906499faef3c8199798"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l4_6",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "unfold Cong_3.",
                        "VernacExtend",
                        "f5f1db9d08b9a2715bf9f408af8cf93a751994f8"
                    ]
                },
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C') by (eapply eq_dec_implies_l4_5;intuition).",
                        "VernacExtend",
                        "f12219b8be7181b4fa249ce7c33bb5702ffa9b3e"
                    ]
                },
                {
                    "command": [
                        "ex_and H1 x.",
                        "VernacExtend",
                        "c361a38a1b27acee6c483cf87a7f204f2e88a370"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3 in *;spliter.",
                        "VernacExtend",
                        "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
                    ]
                },
                {
                    "command": [
                        "assert (Cong_3 A' x C' A' B' C') by (unfold Cong_3;repeat split;eCong).",
                        "VernacExtend",
                        "509cb97dcaf1ecf5f9d5e568439c879655c8b4f7"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3 in H7;spliter.",
                        "VernacExtend",
                        "91f2011eba666d3083fe26eb215bb9a5f5f9744e"
                    ]
                },
                {
                    "command": [
                        "assert (IFSC A' x C' x A' x C' B') by (unfold IFSC;repeat split;Cong).",
                        "VernacExtend",
                        "e9f68579712acf334b50eb479982072fc11712d2"
                    ]
                },
                {
                    "command": [
                        "assert (Cong x x x B') by (eapply eq_dec_implies_l4_2; try apply H10; auto).",
                        "VernacExtend",
                        "99a274164651607845cec0a05e496582fe6c3927"
                    ]
                },
                {
                    "command": [
                        "Between.",
                        "VernacExtend",
                        "88a845b6dcd1b885edf5ca6925c47a8a43fa26f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l4_16",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "unfold FSC.",
                        "VernacExtend",
                        "d005f9205539e89bf245b71bab47bc97d7daa39f"
                    ]
                },
                {
                    "command": [
                        "unfold Col.",
                        "VernacExtend",
                        "6fc83dffc68036bd3d1b4e0319a8f1b0b6f4ec13"
                    ]
                },
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "decompose [or and] H; clear H.",
                        "VernacExtend",
                        "f5be567bda90dd452d4e37de85d0d0c2519a5e43"
                    ]
                },
                {
                    "command": [
                        "assert (Bet A' B' C') by (eapply eq_dec_implies_l4_6;eauto).",
                        "VernacExtend",
                        "8e44dbe67cbca502e83330a6485df6d226005142"
                    ]
                },
                {
                    "command": [
                        "unfold Cong_3 in *; spliter.",
                        "VernacExtend",
                        "62adb5ac05639cc6a6cbf6f81c918bd7ece2f904"
                    ]
                },
                {
                    "command": [
                        "assert(OFSC A B C D A' B' C' D') by (unfold OFSC;repeat split; assumption).",
                        "VernacExtend",
                        "1eb8caac63f7b26f591f5e5923c09d63c1391ee1"
                    ]
                },
                {
                    "command": [
                        "eapply five_segment_with_def; eauto.",
                        "VernacExtend",
                        "d5f24cd9f916c301110d09c7e4467875056d4a59"
                    ]
                },
                {
                    "command": [
                        "assert(Bet B' C' A') by (apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A'); Cong;auto with cong3).",
                        "VernacExtend",
                        "d0b6d329b462befd3adf23689101fdf25a429d31"
                    ]
                },
                {
                    "command": [
                        "apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').",
                        "VernacExtend",
                        "85fed99d186f9c356e3a9678b2aaf7161ead230d"
                    ]
                },
                {
                    "command": [
                        "unfold IFSC; unfold Cong_3 in *; spliter; repeat split;Between;Cong.",
                        "VernacExtend",
                        "6a661018fcb01cc56163c9063dec802f16616b79"
                    ]
                },
                {
                    "command": [
                        "assert (Bet C' A' B') by (eapply (eq_dec_implies_l4_6 eq_dec C A B C' A' B'); auto with cong3).",
                        "VernacExtend",
                        "c28291d9c67ad35c4e93696a3245640f654a1d11"
                    ]
                },
                {
                    "command": [
                        "eapply (five_segment_with_def B A C D B' A'); unfold OFSC; unfold Cong_3 in *; spliter; repeat split; Between; Cong.",
                        "VernacExtend",
                        "74aabf544dfd7959bd2e53c6d03275b8b56034f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l4_17",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (FSC A B C P A B C Q) by (unfold FSC; unfold Cong_3; repeat split;Cong).",
                        "VernacExtend",
                        "38a5495dcb7d22aa801c2ce91fcc162fb397b03f"
                    ]
                },
                {
                    "command": [
                        "eapply eq_dec_implies_l4_16; eauto.",
                        "VernacExtend",
                        "7583a3cdf6715d15ce3bc6a19150b394277cff4b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_l5_2",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Bet A C D \\/ Bet A D C) by (eapply eq_dec_implies_l5_1; eauto).",
                        "VernacExtend",
                        "4c90bdf68cb60b610574aef3957b80083fcd2553"
                    ]
                },
                {
                    "command": [
                        "induction H3.",
                        "VernacExtend",
                        "3139d12347d024ef0d73e7a4ac9234d4e721869a"
                    ]
                },
                {
                    "command": [
                        "left; eBetween.",
                        "VernacExtend",
                        "f7f732b155ec8e7622ef372a00a25b3c64d00020"
                    ]
                },
                {
                    "command": [
                        "right; eBetween.",
                        "VernacExtend",
                        "7c915af97a2fa72fbd1e415171c071fcc7331656"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_segment_construction_2",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "prolong A Q A' A Q.",
                        "VernacExtend",
                        "8c33717c12447114c932b6a5efc4c63e8e8658c7"
                    ]
                },
                {
                    "command": [
                        "prolong A' Q X B C.",
                        "VernacExtend",
                        "7a592faafd543ef0a32c9a7f5239c52e0814b2c3"
                    ]
                },
                {
                    "command": [
                        "exists X.",
                        "VernacExtend",
                        "199ac60d0a22b88b3af3f4f4b7e49636d72d9970"
                    ]
                },
                {
                    "command": [
                        "show_distinct A' Q.",
                        "VernacExtend",
                        "75ad0cf029ac740986fe06b088c489c3eef7f1a9"
                    ]
                },
                {
                    "command": [
                        "solve [intuition].",
                        "VernacExtend",
                        "a44c77fe0ad6731ace858e9158278f1620dc35f8"
                    ]
                },
                {
                    "command": [
                        "split; try assumption.",
                        "VernacExtend",
                        "7aec98fbbf52695c4dbe780a98e3c8166b58320f"
                    ]
                },
                {
                    "command": [
                        "eapply (eq_dec_implies_l5_2 eq_dec A' Q); Between.",
                        "VernacExtend",
                        "9c1a8743b0009ed9c468f8ee7524635f7ea02612"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_between_cong",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Bet A B C).",
                        "VernacExtend",
                        "60da74f2570859e683c315b7d09210471a9c3658"
                    ]
                },
                {
                    "command": [
                        "eapply eq_dec_implies_l4_6 with A C B; unfold Cong_3; repeat split; Cong.",
                        "VernacExtend",
                        "b2411d5c9331917f08238eb774d3ae1ec3ca1865"
                    ]
                },
                {
                    "command": [
                        "eapply between_equality; eBetween.",
                        "VernacExtend",
                        "ac2ab3f19d08f3305c358d73d5fde28d9708b04a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_cong_dec",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec A B); intro; subst; elim (eq_dec C D); intro; subst.",
                        "VernacExtend",
                        "3cfc2a6a2da4fcca3a2e4676e6e35a2be20c4971"
                    ]
                },
                {
                    "command": [
                        "left; Cong.",
                        "VernacExtend",
                        "3444341d74b75db3efd64d25429637258519cabf"
                    ]
                },
                {
                    "command": [
                        "right; intro; apply H; apply cong_identity with B; Cong.",
                        "VernacExtend",
                        "0ff6b6a1048e94cf92510c0613b8ad2a9352fe5c"
                    ]
                },
                {
                    "command": [
                        "right; intro; apply H; apply cong_identity with D; Cong.",
                        "VernacExtend",
                        "df549906d62f7e1f63b20eae5f1fdc9542e94c5a"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).",
                        "VernacExtend",
                        "44baa64b74b44ae62ab19d94338167359ad728ba"
                    ]
                },
                {
                    "command": [
                        "intros D' HD'.",
                        "VernacExtend",
                        "ee96ffcb5191492633a35b1c7c782d8595474dd7"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec B D');intro.",
                        "VernacExtend",
                        "ca113f5d7ab979032eee6a54dbcc9d25ec75026c"
                    ]
                },
                {
                    "command": [
                        "subst; left; assumption.",
                        "VernacExtend",
                        "365ba5b8eb0a8782da5a9fa369ed658a100b2734"
                    ]
                },
                {
                    "command": [
                        "right; intro.",
                        "VernacExtend",
                        "0fd4b34386435b5a8272d82b153513f11dc07023"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A D' A B) by eCong.",
                        "VernacExtend",
                        "b8858f8f2c1758216a778ad240355becfb4e0a9e"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro; clear H1.",
                        "VernacExtend",
                        "6b1036b6f774c67c76067d6ff225e7d48ea608eb"
                    ]
                },
                {
                    "command": [
                        "assert (B = D') by (apply (eq_dec_implies_between_cong eq_dec A D' B); Cong).",
                        "VernacExtend",
                        "538dfd99816e35719df3b177b8f6f0744e5b11f7"
                    ]
                },
                {
                    "command": [
                        "subst;intuition.",
                        "VernacExtend",
                        "996f8c91c6df59eb32d913a2132e15c6011e125f"
                    ]
                },
                {
                    "command": [
                        "assert (D'=B) by (apply (eq_dec_implies_between_cong eq_dec A B D');assumption).",
                        "VernacExtend",
                        "5bfbd3eaefcab00f8641bbdabb4ad7e4593f30e6"
                    ]
                },
                {
                    "command": [
                        "subst;intuition.",
                        "VernacExtend",
                        "996f8c91c6df59eb32d913a2132e15c6011e125f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bet_dec_eq_dec",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction (H A B A).",
                        "VernacExtend",
                        "d5360e7c511f2202f9e7bf6ecaa84b69152f02b8"
                    ]
                },
                {
                    "command": [
                        "left; apply between_identity; assumption.",
                        "VernacExtend",
                        "ff6cc67d626975b27d76ad044479ed8e83a0edec"
                    ]
                },
                {
                    "command": [
                        "right; intro; subst; apply H0; apply between_trivial.",
                        "VernacExtend",
                        "47c535cef705f908e463bc0c234929a4afb9e9d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_implies_between_cong_3",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).",
                        "VernacExtend",
                        "75e76907ac3e5a4cb32d2bc54d538ed321181d98"
                    ]
                },
                {
                    "command": [
                        "elim T; intro; clear T.",
                        "VernacExtend",
                        "95d89dc4009bd739f297e661b52a906d795ac66d"
                    ]
                },
                {
                    "command": [
                        "apply eq_dec_implies_between_cong with B; Cong.",
                        "VernacExtend",
                        "92b7ae083e0d095f879102d9493a0cdaf2cc7291"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply eq_dec_implies_between_cong with B; Cong.",
                        "VernacExtend",
                        "cf4b86f42cbe88e5b8ed975974df138b8665ceb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_dec_bet_dec",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "intro eq_dec; intros.",
                        "VernacExtend",
                        "bb405daed9adfc0ecec95727c58c1792381d737a"
                    ]
                },
                {
                    "command": [
                        "elim (segment_construction A B B C); intros C' HC'.",
                        "VernacExtend",
                        "636744d71bb8faf3f578b9644b61a506909b0652"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec C C'); intro.",
                        "VernacExtend",
                        "b7e2a967308446eb021f675e03cd8f1e8358e2c5"
                    ]
                },
                {
                    "command": [
                        "subst; tauto.",
                        "VernacExtend",
                        "242b88ac37f1205319ab9d9cd58773501a7271b8"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec A B);intro.",
                        "VernacExtend",
                        "a824b62b510e6edd0a4e512a0e03e0a95c632598"
                    ]
                },
                {
                    "command": [
                        "left; subst; Between.",
                        "VernacExtend",
                        "977c64501d7230bb20e39cbe4becf5c91c38964c"
                    ]
                },
                {
                    "command": [
                        "right; intro; apply H1; apply eq_dec_implies_between_cong_3 with A B; Cong.",
                        "VernacExtend",
                        "2766ecdadaea216bcdd9183352fa7fdd95e391d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivalence_between_decidability_properties_of_basic_relations",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "unfold all_equiv.",
                        "VernacExtend",
                        "de65e79c49fb1a89ae522f6ccd7726b4c77aa355"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (P:=cong_dec_eq_dec).",
                        "VernacExtend",
                        "556c85198819cd74bed7831964ff64709aa5ccf7"
                    ]
                },
                {
                    "command": [
                        "assert (Q:=eq_dec_cong_dec).",
                        "VernacExtend",
                        "acdc6408b5fac4c05d82517fa664099ef5cb1996"
                    ]
                },
                {
                    "command": [
                        "assert (R:=bet_dec_eq_dec).",
                        "VernacExtend",
                        "2a069b24db09dfd24d00bad57aa32f4b0bf71930"
                    ]
                },
                {
                    "command": [
                        "assert (S:=eq_dec_bet_dec).",
                        "VernacExtend",
                        "e0ef2d8b3e4cefdecc2e1d8389255ac2c07b3ff2"
                    ]
                },
                {
                    "command": [
                        "decompose [or] H;clear H;decompose [or] H0;clear H0;subst; tauto.",
                        "VernacExtend",
                        "ee7dc4e916c85b839bf5378982f44bec14d3af2d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}