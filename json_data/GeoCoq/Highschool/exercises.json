{
    "filename": "Highschool/exercises.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.",
            "VernacRequire",
            "4f1ca5a986929d4b5b2085546b9505025d6934c5"
        ],
        [
            "Require Export GeoCoq.Highschool.varignon.",
            "VernacRequire",
            "32cf7894842a31fee9fc2b17f3b348596d040ac4"
        ],
        [
            "Section Exercises.",
            "VernacBeginSection",
            "9bc0367aa087e965ae2236929857ff815e22d5d5"
        ],
        [
            "Context `{TE:Tarski_euclidean}.",
            "VernacContext",
            "9fd335af20abfff76684a72421eb66bd4501d389"
        ],
        [
            "Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.",
            "VernacStartTheoremProof",
            "3a921d0b3bb07fdea8ecd3c6a3b5aab32e521f08"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "assert_cols.",
            "VernacExtend",
            "031d7df0508efc81572acb10c507042760b719fa"
        ],
        [
            "elim (eq_dec_points A C); intro; apply plg_per_rect.",
            "VernacExtend",
            "d0c8120f1cad68a0faa9e88e304f4c98954b5476"
        ],
        [
            "treat_equalities.",
            "VernacExtend",
            "0d9f12669aa7857d816d5247f75bab1bd3b63660"
        ],
        [
            "assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.",
            "VernacExtend",
            "dfca38cc97158c0751b06cc12d96412a6b7ef450"
        ],
        [
            "treat_equalities; intuition.",
            "VernacExtend",
            "f53281d353df22ef04776a73fed27eaf145b9ab5"
        ],
        [
            "assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).",
            "VernacExtend",
            "8b7cdb0fc82c51b7fff8fde0bed50212c0186d5d"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "elim (col_dec A B C); intro; assert_diffs.",
            "VernacExtend",
            "54feb1595b2abdfe370aa521abfce999c9f8c3b8"
        ],
        [
            "apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.",
            "VernacExtend",
            "98ea7f112439b6d417b641689543e47de9168466"
        ],
        [
            "ColR.",
            "VernacExtend",
            "0b35ec58454f3477d058acbaeb25f2751768cf91"
        ],
        [
            "ColR.",
            "VernacExtend",
            "0b35ec58454f3477d058acbaeb25f2751768cf91"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.",
            "VernacExtend",
            "3dbd1c5a56b6a00663efa287430298553ee1ee62"
        ],
        [
            "apply pars_par_plg.",
            "VernacExtend",
            "cea2d66e11a61b940c909c6773a6d50c56e3fb95"
        ],
        [
            "assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).",
            "VernacExtend",
            "ab49b9051ec9140047f6a9ffc7181c18e4b261e3"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "apply par_strict_symmetry; apply par_strict_col_par_strict with C; intuition; apply par_strict_symmetry; apply par_strict_right_comm; assumption; Col.",
            "VernacExtend",
            "602797454809303582425890f28f5e0f4f92e77a"
        ],
        [
            "Par.",
            "VernacExtend",
            "204d3bc48478a206fd337c12d856085317b90ede"
        ],
        [
            "Col.",
            "VernacExtend",
            "92aede71f403ba291e696d87cdf45f5aca69909a"
        ],
        [
            "assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).",
            "VernacExtend",
            "ab49b9051ec9140047f6a9ffc7181c18e4b261e3"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "apply par_symmetry; apply par_col_par with B; intuition; apply par_symmetry; apply par_strict_par; assumption.",
            "VernacExtend",
            "e8f5b296af83066fa4851cea914e79872a9f7e0c"
        ],
        [
            "left; apply l8_3 with B; try apply l8_2; try apply l8_3 with C; try apply l8_2; try assumption; intuition; Col.",
            "VernacExtend",
            "3254f0672cb15542193c814f8a4ffaebaee0312f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac assert_diffs_by_cases := repeat match goal with | A: Tpoint, B: Tpoint |- _ => not_exist_hyp_comm A B;induction (eq_dec_points A B);[treat_equalities;solve [finish|trivial] |idtac] end.",
            "VernacExtend",
            "5c3102e25094b72dd3404ba98843dff2fc75b25f"
        ],
        [
            "Lemma quadrileral_midpoints: forall A B C D I J K L X Y, ~ Col I J K -> Midpoint I A B -> Midpoint J B C -> Midpoint K C D -> Midpoint L A D -> Midpoint X I K -> Midpoint Y J L -> X = Y.",
            "VernacStartTheoremProof",
            "fc80ac6e7b9c27d4819c29fe199718faea22a50b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert_diffs_by_cases.",
            "VernacExtend",
            "957fd23210ec5ff55b9950f4df9820f0cbd9c941"
        ],
        [
            "assert (Parallelogram I J K L) by (apply (varignon A B C D I J K L);finish).",
            "VernacExtend",
            "4adadec7ad0d2bdc695ba0dbc5a7cee80bb4bb3e"
        ],
        [
            "assert (Midpoint X J L) by (perm_apply (plg_mid_2 I J K L X)).",
            "VernacExtend",
            "2e643c37ba08dbdd4a834340059e0a9c7d5f09b7"
        ],
        [
            "treat_equalities;trivial.",
            "VernacExtend",
            "ef6206381b0fcf4a295216dca4935431c615f417"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Exercises.",
            "VernacEndSegment",
            "b879cbf45a8a2af59fa8efe1d05882dda3498955"
        ]
    ],
    "proofs": [
        {
            "name": "Per_mid_rectangle",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "assert_cols.",
                        "VernacExtend",
                        "031d7df0508efc81572acb10c507042760b719fa"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A C); intro; apply plg_per_rect.",
                        "VernacExtend",
                        "d0c8120f1cad68a0faa9e88e304f4c98954b5476"
                    ]
                },
                {
                    "command": [
                        "treat_equalities.",
                        "VernacExtend",
                        "0d9f12669aa7857d816d5247f75bab1bd3b63660"
                    ]
                },
                {
                    "command": [
                        "assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.",
                        "VernacExtend",
                        "dfca38cc97158c0751b06cc12d96412a6b7ef450"
                    ]
                },
                {
                    "command": [
                        "treat_equalities; intuition.",
                        "VernacExtend",
                        "f53281d353df22ef04776a73fed27eaf145b9ab5"
                    ]
                },
                {
                    "command": [
                        "assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).",
                        "VernacExtend",
                        "8b7cdb0fc82c51b7fff8fde0bed50212c0186d5d"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "elim (col_dec A B C); intro; assert_diffs.",
                        "VernacExtend",
                        "54feb1595b2abdfe370aa521abfce999c9f8c3b8"
                    ]
                },
                {
                    "command": [
                        "apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.",
                        "VernacExtend",
                        "98ea7f112439b6d417b641689543e47de9168466"
                    ]
                },
                {
                    "command": [
                        "ColR.",
                        "VernacExtend",
                        "0b35ec58454f3477d058acbaeb25f2751768cf91"
                    ]
                },
                {
                    "command": [
                        "ColR.",
                        "VernacExtend",
                        "0b35ec58454f3477d058acbaeb25f2751768cf91"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.",
                        "VernacExtend",
                        "3dbd1c5a56b6a00663efa287430298553ee1ee62"
                    ]
                },
                {
                    "command": [
                        "apply pars_par_plg.",
                        "VernacExtend",
                        "cea2d66e11a61b940c909c6773a6d50c56e3fb95"
                    ]
                },
                {
                    "command": [
                        "assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).",
                        "VernacExtend",
                        "ab49b9051ec9140047f6a9ffc7181c18e4b261e3"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "apply par_strict_symmetry; apply par_strict_col_par_strict with C; intuition; apply par_strict_symmetry; apply par_strict_right_comm; assumption; Col.",
                        "VernacExtend",
                        "602797454809303582425890f28f5e0f4f92e77a"
                    ]
                },
                {
                    "command": [
                        "Par.",
                        "VernacExtend",
                        "204d3bc48478a206fd337c12d856085317b90ede"
                    ]
                },
                {
                    "command": [
                        "Col.",
                        "VernacExtend",
                        "92aede71f403ba291e696d87cdf45f5aca69909a"
                    ]
                },
                {
                    "command": [
                        "assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).",
                        "VernacExtend",
                        "ab49b9051ec9140047f6a9ffc7181c18e4b261e3"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "apply par_symmetry; apply par_col_par with B; intuition; apply par_symmetry; apply par_strict_par; assumption.",
                        "VernacExtend",
                        "e8f5b296af83066fa4851cea914e79872a9f7e0c"
                    ]
                },
                {
                    "command": [
                        "left; apply l8_3 with B; try apply l8_2; try apply l8_3 with C; try apply l8_2; try assumption; intuition; Col.",
                        "VernacExtend",
                        "3254f0672cb15542193c814f8a4ffaebaee0312f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quadrileral_midpoints",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert_diffs_by_cases.",
                        "VernacExtend",
                        "957fd23210ec5ff55b9950f4df9820f0cbd9c941"
                    ]
                },
                {
                    "command": [
                        "assert (Parallelogram I J K L) by (apply (varignon A B C D I J K L);finish).",
                        "VernacExtend",
                        "4adadec7ad0d2bdc695ba0dbc5a7cee80bb4bb3e"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint X J L) by (perm_apply (plg_mid_2 I J K L X)).",
                        "VernacExtend",
                        "2e643c37ba08dbdd4a834340059e0a9c7d5f09b7"
                    ]
                },
                {
                    "command": [
                        "treat_equalities;trivial.",
                        "VernacExtend",
                        "ef6206381b0fcf4a295216dca4935431c615f417"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}