{
    "filename": "Highschool/orthocenter.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Highschool.circumcenter.",
            "VernacRequire",
            "740b315f5c923b540a329a6010f73426d892465a"
        ],
        [
            "Section Orthocenter.",
            "VernacBeginSection",
            "fea6a100dca15c0dd31d13d7455547e9c3dabb85"
        ],
        [
            "Context `{TE:Tarski_euclidean}.",
            "VernacContext",
            "9fd335af20abfff76684a72421eb66bd4501d389"
        ],
        [
            "Definition is_orthocenter H A B C := ~ Col A B C /\\ Perp A H B C /\\ Perp B H A C /\\ Perp C H A B.",
            "VernacDefinition",
            "fabc7beb5d0b0111e56f202aab0355df154c3dd7"
        ],
        [
            "Lemma construct_intersection : forall A B C X1 X2 X3, ~ Col A B C -> Par A C B X1 -> Par A B C X2 -> Par B C A X3 -> exists E, Col E A X3 /\\ Col E B X1.",
            "VernacStartTheoremProof",
            "05d3a46c082a2487c621b0543fd53a7822bd33a8"
        ],
        [
            "Proof with finish.",
            "VernacProof",
            "8229c64bbd7d728892a861381b24bf20c998d385"
        ],
        [
            "intros A B C X1 X2 X3 HNC HPar1 HPar2 HPar3.",
            "VernacExtend",
            "f373aaf20fbef3260462e3f04c9fb4737fe15f8e"
        ],
        [
            "apply cop_npar__inter_exists.",
            "VernacExtend",
            "58acb87c3780d172920740c28f20afbc587913bd"
        ],
        [
            "apply coplanar_perm_2, coplanar_trans_1 with C; Col; Cop.",
            "VernacExtend",
            "9e061fdffae4c0e84fb8ffdfcb3415901ad8535d"
        ],
        [
            "intro HNPar; apply HNC.",
            "VernacExtend",
            "0421c06410ca930ded18da11a4fc08e809519686"
        ],
        [
            "assert (HFalsePar : Par B C A C) by (apply (par_trans B C B X1 A C); finish; apply (par_trans B C A X3 B); finish).",
            "VernacExtend",
            "5babf1fac487b83b986a6ff0166ebe14b64ebd21"
        ],
        [
            "apply par_id_2...",
            "VernacExtend",
            "6d93f78cafe56e907a83f148fd2d8974267944fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_col_par_col2_diff : forall A B C D E F, ~ Col A B C -> Par A B C D -> Col C D E -> Col A E F -> A <> E.",
            "VernacStartTheoremProof",
            "e9b34a1dcee53046a6180f383f33db11e4a5e5a2"
        ],
        [
            "intros A B C D E F HNC HPar HC1 HC2.",
            "VernacExtend",
            "e8ec40d52af566a7f8a45ef7700760622d88b336"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "apply HNC; apply not_strict_par1 with D E; finish.",
            "VernacExtend",
            "244194a354daf12cd275f0227aaedd335cf17642"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma construct_triangle : forall A B C, ~ Col A B C -> exists D, exists E, exists F, Col B D F /\\ Col A E F /\\ Col C D E /\\ Par A B C D /\\ Par A C B D /\\ Par B C A E /\\ Par A B C E /\\ Par A C B F /\\ Par B C A F /\\ D <> E /\\ D <> F /\\ E <> F.",
            "VernacStartTheoremProof",
            "8567347fb6857df34a114521fdba1e76116186a6"
        ],
        [
            "intros A B C HNC.",
            "VernacExtend",
            "214d2955dbcf0dd677690e77ddcb9c65767f2bbf"
        ],
        [
            "assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.",
            "VernacExtend",
            "fc6247dc0758a244e09f85375db670c9f0ca5536"
        ],
        [
            "elim (parallel_existence1 A B C HAB);intros X1 HX1.",
            "VernacExtend",
            "5e7f77b7fc7dcf866ed7893fc6806d4a6c6b4c90"
        ],
        [
            "elim (parallel_existence1 A C B HAC);intros X2 HX2.",
            "VernacExtend",
            "b64c38b994cdc79434edaac43e67fa2cb3799b79"
        ],
        [
            "elim (parallel_existence1 B C A HBC);intros X3 HX3.",
            "VernacExtend",
            "f9c9fd0fc818e1bf3c03b99359c8ebe4dddbb7db"
        ],
        [
            "assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.",
            "VernacExtend",
            "da7ad61999e75022b4e60df04f342a0f3acdc123"
        ],
        [
            "assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.",
            "VernacExtend",
            "ad5c1424f3507c57533735242226bb433c5eb34a"
        ],
        [
            "assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.",
            "VernacExtend",
            "a5a23dbc11050d501455c7b540542c4b512fbbee"
        ],
        [
            "assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).",
            "VernacExtend",
            "2a12eb850f5d1cd16cad336747d163a88bd9741e"
        ],
        [
            "assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).",
            "VernacExtend",
            "bfcf940f091638eb536c1a9be7e14dea9c4c6991"
        ],
        [
            "assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).",
            "VernacExtend",
            "b0fcadeb86b9dd92dbe4b59279a4a33d9010902c"
        ],
        [
            "assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).",
            "VernacExtend",
            "f7bd637cc39a2c6a5da657efadced0a7e016cf89"
        ],
        [
            "assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).",
            "VernacExtend",
            "8fda56ad15e4411b22fd77f8cb369d42ef0c397d"
        ],
        [
            "assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).",
            "VernacExtend",
            "3589174ffe4623677b52928f1b9505d2ac76ca9f"
        ],
        [
            "assert (Par A B C D) by (apply par_col_par with X1; finish).",
            "VernacExtend",
            "b820f0c42a470784620193846ff8a36a5ff6988c"
        ],
        [
            "assert (Par A C B D) by (apply par_col_par with X2; finish).",
            "VernacExtend",
            "51058992a726b2159b2a529c04390c98310c2709"
        ],
        [
            "assert (Par B C A E) by (apply par_col_par with X3; finish).",
            "VernacExtend",
            "0fbab4c1103e2a6ee262c178d1dedabb6a17ee52"
        ],
        [
            "assert (Par A B C E) by (apply par_col_par with X1; finish).",
            "VernacExtend",
            "f45f9f73bc2f3f800d0996a216a5cb1dbc133749"
        ],
        [
            "assert (Par A C B F) by (apply par_col_par with X2; finish).",
            "VernacExtend",
            "200d721acdaf8acb1dd42093dc6b51360bb0c63b"
        ],
        [
            "assert (Par B C A F) by (apply par_col_par with X3; finish).",
            "VernacExtend",
            "65fc437ae03a7cfa200aa63f071c9101d12f7fc6"
        ],
        [
            "assert (~ (D = E /\\ D = F)).",
            "VernacExtend",
            "457400ee1ae4affb2011e07557a32a4234b1bb35"
        ],
        [
            "intro; spliter; treat_equalities.",
            "VernacExtend",
            "e8f79738b982b474318e1c8f8a83390deedbf002"
        ],
        [
            "assert_paras_perm.",
            "VernacExtend",
            "2f278c7c78514bf85590356a6bb68c5eeb210b39"
        ],
        [
            "assert_nparas_perm.",
            "VernacExtend",
            "611774c19d9d74dc37f3c92996b2b16cc7650da9"
        ],
        [
            "permutation_intro_in_hyps.",
            "VernacExtend",
            "000c04c724bb2cca01d903be6c37ef03600040aa"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "exists D; exists E; exists F.",
            "VernacExtend",
            "f2ba50e5d4b5d09a0e7357241d601e4f3dbeab7c"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "repeat split; finish; try ColR.",
            "VernacExtend",
            "57331cff09e69e78ce8a8b5dafa2523a4f89522f"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "assert (E <> F) by (intro; subst; intuition).",
            "VernacExtend",
            "441c23e095eb0dd7aca7038a9b4adc1a2ee0f691"
        ],
        [
            "apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.",
            "VernacExtend",
            "0846da8345fb62f4393771c4d81de7e8f2702b74"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "assert (E <> F) by (intro; subst; intuition).",
            "VernacExtend",
            "441c23e095eb0dd7aca7038a9b4adc1a2ee0f691"
        ],
        [
            "apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.",
            "VernacExtend",
            "95e51aa16926203adf04daef025c9e2c76c644bb"
        ],
        [
            "intro; subst.",
            "VernacExtend",
            "9021e22274b6259ff513a190b208a4a3aa9b2ede"
        ],
        [
            "assert (D <> F) by (intro; subst; intuition).",
            "VernacExtend",
            "3352e2e4646b7183f2504db464ddd594669ef47b"
        ],
        [
            "apply HNC; apply not_strict_par1 with D B; sfinish.",
            "VernacExtend",
            "85b1196e5f6637fde5d4afcf77e37fbe260ad09c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diff_not_col_col_par4_mid: forall A B C D E, D <> E -> ~ Col A B C -> Col C D E -> Par A B C D -> Par A B C E -> Par A E B C -> Par A C B D -> Midpoint C D E.",
            "VernacStartTheoremProof",
            "cd85e9df33816d236435134afb73db457fd6436f"
        ],
        [
            "intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.",
            "VernacExtend",
            "792c977bda07e357635314f73c6f6bfa08b3e7d1"
        ],
        [
            "assert (HPara1 : Parallelogram_strict A B C E) by (apply parallel_2_plg; finish).",
            "VernacExtend",
            "881539bfcb373d4d7d77c5e6980d1ee28083a06c"
        ],
        [
            "assert (HPara2 : Parallelogram_strict C A B D) by (apply parallel_2_plg; finish).",
            "VernacExtend",
            "0c7c05e498c49024084de26a3d309a5467cbcf21"
        ],
        [
            "assert_congs_perm.",
            "VernacExtend",
            "8c6812acf12bb64f145256b928e11d6446048a66"
        ],
        [
            "apply cong_col_mid; Col; eCong.",
            "VernacExtend",
            "e7e585515489ef02a6738ea1f90de2970e53f7ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma altitude_is_perp_bisect : forall A B C O A1 E F, A <> O -> E <> F -> Perp A A1 B C -> Col O A1 A -> Col A E F -> Par B C A E -> Midpoint A E F -> Perp_bisect A O E F.",
            "VernacStartTheoremProof",
            "6fd0ff76d1811a386913b62d069cc54bf576f855"
        ],
        [
            "Proof with finish.",
            "VernacProof",
            "8229c64bbd7d728892a861381b24bf20c998d385"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply perp_mid_perp_bisect...",
            "VernacExtend",
            "de4fc38e7452ad3ff3859efc3254da092cdf223b"
        ],
        [
            "apply perp_sym.",
            "VernacExtend",
            "6ffb8a5ce8bd3f2edbf495264722c5c7b6eebd74"
        ],
        [
            "apply cop_par_perp__perp with B C...",
            "VernacExtend",
            "8413adcc4b89d96fc5eb0c7b34f5a5806efef8bc"
        ],
        [
            "apply par_col_par with A...",
            "VernacExtend",
            "4a2e0397746a487c57d4e8b55cf7aa3771d4878b"
        ],
        [
            "apply perp_col1 with A1...",
            "VernacExtend",
            "e0f81deec71512857b467671c08d7277b7a1bf8e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma altitude_intersect: forall A A1 B B1 C C1 O: Tpoint, ~ Col A B C -> Perp A A1 B C -> Perp B B1 A C -> Perp C C1 A B -> Col O A A1 -> Col O B B1 -> Col O C C1.",
            "VernacStartTheoremProof",
            "9eaa92efcaee2833b5fb8aa9e589c71b08fd5b8a"
        ],
        [
            "Proof with finish.",
            "VernacProof",
            "8229c64bbd7d728892a861381b24bf20c998d385"
        ],
        [
            "intros A A1 B B1 C C1 O HNC HPerp1 HPerp2 HPerp3 HC1 HC2.",
            "VernacExtend",
            "49af602a27508f04624dff3d2ba15696a24275d4"
        ],
        [
            "assert (HT := HNC).",
            "VernacExtend",
            "837f384a12821014951a2b8f8a9af04da8df4de4"
        ],
        [
            "apply construct_triangle in HT.",
            "VernacExtend",
            "b4f78488e55b8cefb7367a57828ca5799402d5f7"
        ],
        [
            "destruct HT as [D [E [F HT]]].",
            "VernacExtend",
            "5af9711cba0793781261e99521a841dd0dc8a4b0"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert (Midpoint A E F) by (apply diff_not_col_col_par4_mid with B C; finish).",
            "VernacExtend",
            "523e8b096dc73a087c72525e94646124617ed27f"
        ],
        [
            "assert (Midpoint B D F) by (apply diff_not_col_col_par4_mid with A C; finish).",
            "VernacExtend",
            "3520f414e1f48a698a9450e130ccb56ce0a3d9b5"
        ],
        [
            "assert (Midpoint C D E) by (apply diff_not_col_col_par4_mid with A B; finish).",
            "VernacExtend",
            "d46e0ad0ce5fe382babb3b42084473616a696f84"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "elim (eq_dec_points A O); intro.",
            "VernacExtend",
            "bd0beb47247fad0519da0c818494cf0c78f63a0f"
        ],
        [
            "treat_equalities; apply col_permutation_4; apply cop_perp2__col with A B...",
            "VernacExtend",
            "57934c09e1a3416d832da989558b018f6b0851cd"
        ],
        [
            "apply perp_right_comm; apply perp_col1 with B1...",
            "VernacExtend",
            "e86036e0221937d33a2aa9c5a10e5c1bf302c781"
        ],
        [
            "elim (eq_dec_points B O); intro.",
            "VernacExtend",
            "1aa303c67080c761ec2ca53fbad41477cd27218e"
        ],
        [
            "treat_equalities; apply col_permutation_4; apply cop_perp2__col with A B...",
            "VernacExtend",
            "57934c09e1a3416d832da989558b018f6b0851cd"
        ],
        [
            "apply perp_col1 with A1...",
            "VernacExtend",
            "e0f81deec71512857b467671c08d7277b7a1bf8e"
        ],
        [
            "elim (eq_dec_points C O); intro.",
            "VernacExtend",
            "a86edc7c564b5368c973978fba8ba8de39461092"
        ],
        [
            "subst; Col.",
            "VernacExtend",
            "ebcceb06b522e50c76934f9b4ac1ae1106b66af8"
        ],
        [
            "assert (Perp_bisect A O E F) by (apply altitude_is_perp_bisect with B C A1; finish).",
            "VernacExtend",
            "c4532f1a3c260c4bac80483420ea225dd7518478"
        ],
        [
            "assert (Perp_bisect B O D F) by (apply altitude_is_perp_bisect with A C B1; finish).",
            "VernacExtend",
            "c3c9e60df5cde97235056624b7f8fe1902d13c99"
        ],
        [
            "assert (Perp O C D E).",
            "VernacExtend",
            "f41a8a89dfef0d71c3de7a7d0d91f2f5202c8568"
        ],
        [
            "apply circumcenter_intersect with F A B; finish.",
            "VernacExtend",
            "cd8c46f0ff30db7cd64a129a21c78693d3db3709"
        ],
        [
            "apply perp_bisect_sym_1; assumption.",
            "VernacExtend",
            "3d8566f74f03db2a61cb0e8548010312c1f272b0"
        ],
        [
            "apply perp_bisect_sym_1; assumption.",
            "VernacExtend",
            "3d8566f74f03db2a61cb0e8548010312c1f272b0"
        ],
        [
            "assert (Perp C1 C D E).",
            "VernacExtend",
            "2716ce374332879cf35291dfc10c996d4b90a9e2"
        ],
        [
            "apply perp_sym; apply cop_par_perp__perp with A B...",
            "VernacExtend",
            "95a619d699e1847f2474ca90c68c21e0b1cde4d0"
        ],
        [
            "apply par_symmetry; apply par_col_par_2 with C...",
            "VernacExtend",
            "8424203b352abb90a69b2468a9a1afb242d81f08"
        ],
        [
            "apply col_permutation_2; apply cop_perp2__col with D E; Perp.",
            "VernacExtend",
            "e7553894edbbfa5d2c0f3aaa4872c86b53d1de17"
        ],
        [
            "apply coplanar_pseudo_trans with A B C.",
            "VernacExtend",
            "20a36c6aa9cd808adda8376a7a4bf66259313e94"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Cop.",
            "VernacExtend",
            "803603ff97b5917ad5ce603838c3939f775c8077"
        ],
        [
            "apply col_cop__cop with D; Col; Cop.",
            "VernacExtend",
            "3843e71eade5e5e90b14c78898eac28d0edf3417"
        ],
        [
            "Cop.",
            "VernacExtend",
            "803603ff97b5917ad5ce603838c3939f775c8077"
        ],
        [
            "apply coplanar_perm_2, col_cop__cop with B1; Col; Cop.",
            "VernacExtend",
            "e2580b7f1b19b8e29a81ba21296c9112a088fe76"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_cases : forall A B C G, is_orthocenter G A B C \\/ is_orthocenter G A C B \\/ is_orthocenter G B A C \\/ is_orthocenter G B C A \\/ is_orthocenter G C A B \\/ is_orthocenter G C B A -> is_orthocenter G A B C.",
            "VernacStartTheoremProof",
            "a584965d14e227eb1f0c2e8ee6ec4f8267f76e28"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "decompose [or] H;clear H; unfold is_orthocenter in *;spliter; repeat (split; finish).",
            "VernacExtend",
            "08a52bef9d805833d02df4c89fe936df13803859"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A B C /\\ is_orthocenter G A C B /\\ is_orthocenter G B A C /\\ is_orthocenter G B C A /\\ is_orthocenter G C A B /\\ is_orthocenter G C B A.",
            "VernacStartTheoremProof",
            "0d0fb2018b606123ea60d36d89dae599b1b7819a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_orthocenter in *.",
            "VernacExtend",
            "78fdfe169c65c146aef72faaffa7dbfbe905700f"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "repeat split;finish.",
            "VernacExtend",
            "266c72449c644693452ceb961ccb5e75e6b1f622"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm_1 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G A C B.",
            "VernacStartTheoremProof",
            "32b0143edf16e052deb7d9889b98c005ccb4fa5f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_perm in H;intuition.",
            "VernacExtend",
            "4c892e4a6a682e2316e641a596f36ad6fcc07143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm_2 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B A C.",
            "VernacStartTheoremProof",
            "16c2301391952784d02949e66e935a70c272251e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_perm in H;intuition.",
            "VernacExtend",
            "4c892e4a6a682e2316e641a596f36ad6fcc07143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm_3 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G B C A.",
            "VernacStartTheoremProof",
            "4194f3ac5d70f8ad3954ab4c3eef9e935c66e32f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_perm in H;intuition.",
            "VernacExtend",
            "4c892e4a6a682e2316e641a596f36ad6fcc07143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm_4 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C A B.",
            "VernacStartTheoremProof",
            "32c48202714d0fe236d57949e334033712077da5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_perm in H;intuition.",
            "VernacExtend",
            "4c892e4a6a682e2316e641a596f36ad6fcc07143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_perm_5 : forall A B C G, is_orthocenter G A B C -> is_orthocenter G C B A.",
            "VernacStartTheoremProof",
            "a41f510b5be16e7cd0aea0859ba1e6f2ab67fa87"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_perm in H;intuition.",
            "VernacExtend",
            "4c892e4a6a682e2316e641a596f36ad6fcc07143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthocenter_per : forall A B C H, Per A B C -> is_orthocenter H A B C -> H=B.",
            "VernacStartTheoremProof",
            "9f49e271c45c0d82cf20f9a8a5699e448f043648"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_orthocenter in *;spliter.",
            "VernacExtend",
            "01f31f1b49a8a5c6f706c84f2473ef08fc28b105"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "assert (Perp A B B C) by (apply per_perp;finish).",
            "VernacExtend",
            "a94f16ff43e8a4ac924e022816f6b7eda4a9a83d"
        ],
        [
            "assert (Par A H A B) by (apply l12_9 with B C;Cop).",
            "VernacExtend",
            "fc7f60d97c74b9852e98ae4aeea447e9a1a72fe7"
        ],
        [
            "assert (Col A B H) by (perm_apply (par_id A B H)).",
            "VernacExtend",
            "111109fae7d831b0c8986f742f7f03edd427b030"
        ],
        [
            "assert (Par C H B C) by (apply l12_9 with A B;finish).",
            "VernacExtend",
            "6b72eff63e5b248bbbdac640eb45e2dbb06c49c9"
        ],
        [
            "assert (Col B C H) by (perm_apply (par_id C B H)).",
            "VernacExtend",
            "71c0203b84ba3c7bc4fb5baaf686bc415ba3d31f"
        ],
        [
            "apply l6_21 with A B C B;finish.",
            "VernacExtend",
            "4306284b4cc48236d932fdd67ffb0dc6d4dee700"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthocenter_col : forall A B C H, Col H B C -> is_orthocenter H A B C -> H = B \\/ H = C.",
            "VernacStartTheoremProof",
            "68642308ea35ae8337f3e82f98b726788cd88fa9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_orthocenter in *.",
            "VernacExtend",
            "78fdfe169c65c146aef72faaffa7dbfbe905700f"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert (Perp_at H B C A H).",
            "VernacExtend",
            "745097eacf56495bcce94da1beef31ce9b73b679"
        ],
        [
            "apply l8_14_2_1b_bis;finish.",
            "VernacExtend",
            "4903bda1ddea9a920c0d6825a60eaba4ee5a8ffe"
        ],
        [
            "induction (eq_dec_points B H).",
            "VernacExtend",
            "d0326d361f8dce5c250f927aed2a92f0d92f1a14"
        ],
        [
            "subst;auto.",
            "VernacExtend",
            "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
        ],
        [
            "assert (Perp A H B H) by (apply (perp_col1 A H B C H);finish).",
            "VernacExtend",
            "e54553fdb1f61e30acd6d0ed29a173453e4e996f"
        ],
        [
            "assert (Par A H A C) by (apply l12_9 with B H;finish).",
            "VernacExtend",
            "68e7c4297f4756f9813f8b92c930e54db12c0b58"
        ],
        [
            "assert (Col H A C) by (perm_apply (par_id A C H)).",
            "VernacExtend",
            "c1f7b12f8011738b171b27d9da098450ef1c1a32"
        ],
        [
            "assert (H=C).",
            "VernacExtend",
            "ca061c84fc2d4417196bcb068bb9d6d22cec7521"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "apply l6_21 with B C A C;finish.",
            "VernacExtend",
            "7b27c4bd4abb3567dce22572fdc76fb77d9d3dd0"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Orthocenter.",
            "VernacEndSegment",
            "0a5a8a925716340a7212d7aced50d143d4ab23ac"
        ],
        [
            "Hint Resolve is_orthocenter_perm_1 is_orthocenter_perm_2 is_orthocenter_perm_3 is_orthocenter_perm_4 is_orthocenter_perm_5 : Orthocenter.",
            "VernacHints",
            "f127a0fab2a7d359611aa3137fc7cbf108332b07"
        ]
    ],
    "proofs": [
        {
            "name": "not_col_par_col2_diff",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros A B C D E F HNC HPar HC1 HC2.",
                        "VernacExtend",
                        "e8ec40d52af566a7f8a45ef7700760622d88b336"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "apply HNC; apply not_strict_par1 with D E; finish.",
                        "VernacExtend",
                        "244194a354daf12cd275f0227aaedd335cf17642"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "construct_triangle",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros A B C HNC.",
                        "VernacExtend",
                        "214d2955dbcf0dd677690e77ddcb9c65767f2bbf"
                    ]
                },
                {
                    "command": [
                        "assert_diffs; rename H2 into HAB; rename H1 into HBC; rename H4 into HAC.",
                        "VernacExtend",
                        "fc6247dc0758a244e09f85375db670c9f0ca5536"
                    ]
                },
                {
                    "command": [
                        "elim (parallel_existence1 A B C HAB);intros X1 HX1.",
                        "VernacExtend",
                        "5e7f77b7fc7dcf866ed7893fc6806d4a6c6b4c90"
                    ]
                },
                {
                    "command": [
                        "elim (parallel_existence1 A C B HAC);intros X2 HX2.",
                        "VernacExtend",
                        "b64c38b994cdc79434edaac43e67fa2cb3799b79"
                    ]
                },
                {
                    "command": [
                        "elim (parallel_existence1 B C A HBC);intros X3 HX3.",
                        "VernacExtend",
                        "f9c9fd0fc818e1bf3c03b99359c8ebe4dddbb7db"
                    ]
                },
                {
                    "command": [
                        "assert (T : exists D, Col D B X2 /\\ Col D C X1) by (apply construct_intersection with A X3; finish); DecompExAnd T D.",
                        "VernacExtend",
                        "da7ad61999e75022b4e60df04f342a0f3acdc123"
                    ]
                },
                {
                    "command": [
                        "assert (T : exists E, Col E A X3 /\\ Col E C X1) by (apply construct_intersection with B X2; finish); DecompExAnd T E.",
                        "VernacExtend",
                        "ad5c1424f3507c57533735242226bb433c5eb34a"
                    ]
                },
                {
                    "command": [
                        "assert (T : exists F, Col F A X3 /\\ Col F B X2) by (apply construct_intersection with C X1; finish); DecompExAnd T F.",
                        "VernacExtend",
                        "a5a23dbc11050d501455c7b540542c4b512fbbee"
                    ]
                },
                {
                    "command": [
                        "assert (A <> E) by (apply not_col_par_col2_diff with B C X1 X3; finish).",
                        "VernacExtend",
                        "2a12eb850f5d1cd16cad336747d163a88bd9741e"
                    ]
                },
                {
                    "command": [
                        "assert (A <> F) by (apply not_col_par_col2_diff with C B X2 X3; finish).",
                        "VernacExtend",
                        "bfcf940f091638eb536c1a9be7e14dea9c4c6991"
                    ]
                },
                {
                    "command": [
                        "assert (B <> D) by (apply not_col_par_col2_diff with A C X1 X2; finish).",
                        "VernacExtend",
                        "b0fcadeb86b9dd92dbe4b59279a4a33d9010902c"
                    ]
                },
                {
                    "command": [
                        "assert (B <> F) by (apply not_col_par_col2_diff with C A X3 X2; finish).",
                        "VernacExtend",
                        "f7bd637cc39a2c6a5da657efadced0a7e016cf89"
                    ]
                },
                {
                    "command": [
                        "assert (C <> D) by (apply not_col_par_col2_diff with A B X2 X1; finish).",
                        "VernacExtend",
                        "8fda56ad15e4411b22fd77f8cb369d42ef0c397d"
                    ]
                },
                {
                    "command": [
                        "assert (C <> E) by (apply not_col_par_col2_diff with B A X3 X1; finish).",
                        "VernacExtend",
                        "3589174ffe4623677b52928f1b9505d2ac76ca9f"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C D) by (apply par_col_par with X1; finish).",
                        "VernacExtend",
                        "b820f0c42a470784620193846ff8a36a5ff6988c"
                    ]
                },
                {
                    "command": [
                        "assert (Par A C B D) by (apply par_col_par with X2; finish).",
                        "VernacExtend",
                        "51058992a726b2159b2a529c04390c98310c2709"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C A E) by (apply par_col_par with X3; finish).",
                        "VernacExtend",
                        "0fbab4c1103e2a6ee262c178d1dedabb6a17ee52"
                    ]
                },
                {
                    "command": [
                        "assert (Par A B C E) by (apply par_col_par with X1; finish).",
                        "VernacExtend",
                        "f45f9f73bc2f3f800d0996a216a5cb1dbc133749"
                    ]
                },
                {
                    "command": [
                        "assert (Par A C B F) by (apply par_col_par with X2; finish).",
                        "VernacExtend",
                        "200d721acdaf8acb1dd42093dc6b51360bb0c63b"
                    ]
                },
                {
                    "command": [
                        "assert (Par B C A F) by (apply par_col_par with X3; finish).",
                        "VernacExtend",
                        "65fc437ae03a7cfa200aa63f071c9101d12f7fc6"
                    ]
                },
                {
                    "command": [
                        "assert (~ (D = E /\\ D = F)).",
                        "VernacExtend",
                        "457400ee1ae4affb2011e07557a32a4234b1bb35"
                    ]
                },
                {
                    "command": [
                        "intro; spliter; treat_equalities.",
                        "VernacExtend",
                        "e8f79738b982b474318e1c8f8a83390deedbf002"
                    ]
                },
                {
                    "command": [
                        "assert_paras_perm.",
                        "VernacExtend",
                        "2f278c7c78514bf85590356a6bb68c5eeb210b39"
                    ]
                },
                {
                    "command": [
                        "assert_nparas_perm.",
                        "VernacExtend",
                        "611774c19d9d74dc37f3c92996b2b16cc7650da9"
                    ]
                },
                {
                    "command": [
                        "permutation_intro_in_hyps.",
                        "VernacExtend",
                        "000c04c724bb2cca01d903be6c37ef03600040aa"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "exists D; exists E; exists F.",
                        "VernacExtend",
                        "f2ba50e5d4b5d09a0e7357241d601e4f3dbeab7c"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "repeat split; finish; try ColR.",
                        "VernacExtend",
                        "57331cff09e69e78ce8a8b5dafa2523a4f89522f"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "assert (E <> F) by (intro; subst; intuition).",
                        "VernacExtend",
                        "441c23e095eb0dd7aca7038a9b4adc1a2ee0f691"
                    ]
                },
                {
                    "command": [
                        "apply HNC; apply col_permutation_1; apply not_strict_par1 with E A; sfinish.",
                        "VernacExtend",
                        "0846da8345fb62f4393771c4d81de7e8f2702b74"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "assert (E <> F) by (intro; subst; intuition).",
                        "VernacExtend",
                        "441c23e095eb0dd7aca7038a9b4adc1a2ee0f691"
                    ]
                },
                {
                    "command": [
                        "apply HNC; apply col_permutation_2; apply not_strict_par1 with E C; sfinish.",
                        "VernacExtend",
                        "95e51aa16926203adf04daef025c9e2c76c644bb"
                    ]
                },
                {
                    "command": [
                        "intro; subst.",
                        "VernacExtend",
                        "9021e22274b6259ff513a190b208a4a3aa9b2ede"
                    ]
                },
                {
                    "command": [
                        "assert (D <> F) by (intro; subst; intuition).",
                        "VernacExtend",
                        "3352e2e4646b7183f2504db464ddd594669ef47b"
                    ]
                },
                {
                    "command": [
                        "apply HNC; apply not_strict_par1 with D B; sfinish.",
                        "VernacExtend",
                        "85b1196e5f6637fde5d4afcf77e37fbe260ad09c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diff_not_col_col_par4_mid",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros A B C D E HD HNC HC HPar1 HPar2 HPar3 HPar4.",
                        "VernacExtend",
                        "792c977bda07e357635314f73c6f6bfa08b3e7d1"
                    ]
                },
                {
                    "command": [
                        "assert (HPara1 : Parallelogram_strict A B C E) by (apply parallel_2_plg; finish).",
                        "VernacExtend",
                        "881539bfcb373d4d7d77c5e6980d1ee28083a06c"
                    ]
                },
                {
                    "command": [
                        "assert (HPara2 : Parallelogram_strict C A B D) by (apply parallel_2_plg; finish).",
                        "VernacExtend",
                        "0c7c05e498c49024084de26a3d309a5467cbcf21"
                    ]
                },
                {
                    "command": [
                        "assert_congs_perm.",
                        "VernacExtend",
                        "8c6812acf12bb64f145256b928e11d6446048a66"
                    ]
                },
                {
                    "command": [
                        "apply cong_col_mid; Col; eCong.",
                        "VernacExtend",
                        "e7e585515489ef02a6738ea1f90de2970e53f7ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_cases",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "decompose [or] H;clear H; unfold is_orthocenter in *;spliter; repeat (split; finish).",
                        "VernacExtend",
                        "08a52bef9d805833d02df4c89fe936df13803859"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *.",
                        "VernacExtend",
                        "78fdfe169c65c146aef72faaffa7dbfbe905700f"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "repeat split;finish.",
                        "VernacExtend",
                        "266c72449c644693452ceb961ccb5e75e6b1f622"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm_1",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_perm in H;intuition.",
                        "VernacExtend",
                        "4c892e4a6a682e2316e641a596f36ad6fcc07143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm_2",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_perm in H;intuition.",
                        "VernacExtend",
                        "4c892e4a6a682e2316e641a596f36ad6fcc07143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm_3",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_perm in H;intuition.",
                        "VernacExtend",
                        "4c892e4a6a682e2316e641a596f36ad6fcc07143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm_4",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_perm in H;intuition.",
                        "VernacExtend",
                        "4c892e4a6a682e2316e641a596f36ad6fcc07143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_perm_5",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_perm in H;intuition.",
                        "VernacExtend",
                        "4c892e4a6a682e2316e641a596f36ad6fcc07143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthocenter_per",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *;spliter.",
                        "VernacExtend",
                        "01f31f1b49a8a5c6f706c84f2473ef08fc28b105"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "assert (Perp A B B C) by (apply per_perp;finish).",
                        "VernacExtend",
                        "a94f16ff43e8a4ac924e022816f6b7eda4a9a83d"
                    ]
                },
                {
                    "command": [
                        "assert (Par A H A B) by (apply l12_9 with B C;Cop).",
                        "VernacExtend",
                        "fc7f60d97c74b9852e98ae4aeea447e9a1a72fe7"
                    ]
                },
                {
                    "command": [
                        "assert (Col A B H) by (perm_apply (par_id A B H)).",
                        "VernacExtend",
                        "111109fae7d831b0c8986f742f7f03edd427b030"
                    ]
                },
                {
                    "command": [
                        "assert (Par C H B C) by (apply l12_9 with A B;finish).",
                        "VernacExtend",
                        "6b72eff63e5b248bbbdac640eb45e2dbb06c49c9"
                    ]
                },
                {
                    "command": [
                        "assert (Col B C H) by (perm_apply (par_id C B H)).",
                        "VernacExtend",
                        "71c0203b84ba3c7bc4fb5baaf686bc415ba3d31f"
                    ]
                },
                {
                    "command": [
                        "apply l6_21 with A B C B;finish.",
                        "VernacExtend",
                        "4306284b4cc48236d932fdd67ffb0dc6d4dee700"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthocenter_col",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *.",
                        "VernacExtend",
                        "78fdfe169c65c146aef72faaffa7dbfbe905700f"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_at H B C A H).",
                        "VernacExtend",
                        "745097eacf56495bcce94da1beef31ce9b73b679"
                    ]
                },
                {
                    "command": [
                        "apply l8_14_2_1b_bis;finish.",
                        "VernacExtend",
                        "4903bda1ddea9a920c0d6825a60eaba4ee5a8ffe"
                    ]
                },
                {
                    "command": [
                        "induction (eq_dec_points B H).",
                        "VernacExtend",
                        "d0326d361f8dce5c250f927aed2a92f0d92f1a14"
                    ]
                },
                {
                    "command": [
                        "subst;auto.",
                        "VernacExtend",
                        "0dfc636d3b0c9fb40074fb6c1c1b90bf77fecdc8"
                    ]
                },
                {
                    "command": [
                        "assert (Perp A H B H) by (apply (perp_col1 A H B C H);finish).",
                        "VernacExtend",
                        "e54553fdb1f61e30acd6d0ed29a173453e4e996f"
                    ]
                },
                {
                    "command": [
                        "assert (Par A H A C) by (apply l12_9 with B H;finish).",
                        "VernacExtend",
                        "68e7c4297f4756f9813f8b92c930e54db12c0b58"
                    ]
                },
                {
                    "command": [
                        "assert (Col H A C) by (perm_apply (par_id A C H)).",
                        "VernacExtend",
                        "c1f7b12f8011738b171b27d9da098450ef1c1a32"
                    ]
                },
                {
                    "command": [
                        "assert (H=C).",
                        "VernacExtend",
                        "ca061c84fc2d4417196bcb068bb9d6d22cec7521"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "apply l6_21 with B C A C;finish.",
                        "VernacExtend",
                        "7b27c4bd4abb3567dce22572fdc76fb77d9d3dd0"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}