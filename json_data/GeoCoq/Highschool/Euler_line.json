{
    "filename": "Highschool/Euler_line.v",
    "coq_project": "GeoCoq",
    "vernac_cmds": [
        [
            "Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.",
            "VernacRequire",
            "4f1ca5a986929d4b5b2085546b9505025d6934c5"
        ],
        [
            "Require Export GeoCoq.Highschool.circumcenter.",
            "VernacRequire",
            "740b315f5c923b540a329a6010f73426d892465a"
        ],
        [
            "Require Export GeoCoq.Highschool.orthocenter.",
            "VernacRequire",
            "5767396a8c67b1182e6bd2332fd5cf25f889e81d"
        ],
        [
            "Require Export GeoCoq.Highschool.midpoint_thales.",
            "VernacRequire",
            "1c43f52e9e2bcc4498f43dec462115c7edb48b44"
        ],
        [
            "Require Export GeoCoq.Highschool.concyclic.",
            "VernacRequire",
            "3172967381f2d57b69992d100e872aee4eefb94f"
        ],
        [
            "Require Export GeoCoq.Highschool.gravityCenter.",
            "VernacRequire",
            "0e892188feb19db690fc7b1a792bd640b542d07a"
        ],
        [
            "Section Euler_line.",
            "VernacBeginSection",
            "e90c866d87155de9616801fb7e859dafea510b5e"
        ],
        [
            "Context `{TE:Tarski_euclidean}.",
            "VernacContext",
            "9fd335af20abfff76684a72421eb66bd4501d389"
        ],
        [
            "Lemma concyclic_not_col_or_eq_aux : forall A B C D, Concyclic A B C D -> A = B \\/ A = C \\/ B = C \\/ ~ Col A B C.",
            "VernacStartTheoremProof",
            "c6575efeec8d216949e08a856469287e0e8cc9f4"
        ],
        [
            "intros A B C D HC.",
            "VernacExtend",
            "d23abf6883425f7195064aa68a0d531781364fdc"
        ],
        [
            "elim (eq_dec_points A B); intro HAB; Col.",
            "VernacExtend",
            "20fe99c0d2f6f279c567ca044f4f6f1cf29a2577"
        ],
        [
            "elim (eq_dec_points A C); intro HAC; Col.",
            "VernacExtend",
            "0e5f5dc79510a2fdcf30f5a396b742981f2ca2b3"
        ],
        [
            "elim (eq_dec_points B C); intro HBC; Col5.",
            "VernacExtend",
            "5d9769bf35ca096e6ee59a659dcc1e86b92c3744"
        ],
        [
            "right; right; right; intro HCol.",
            "VernacExtend",
            "56b186cf9812f24d04e2bb5bdc3cf99a35247da8"
        ],
        [
            "destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].",
            "VernacExtend",
            "4d9532fd94f6dde73dfe9aed43172f9af247ec34"
        ],
        [
            "assert (H := midpoint_existence A B); destruct H as [M1 HMid1].",
            "VernacExtend",
            "e3c8b8a2d9e9c34727aaee2e1f6bd122a8e0ea4c"
        ],
        [
            "assert (HOM1 : O <> M1).",
            "VernacExtend",
            "06b8975654e683deef413480dfb2aec16022b698"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro; treat_equalities.",
            "VernacExtend",
            "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
        ],
        [
            "assert (H := l7_20 O A C); elim H; clear H; try intro H; Cong; try (apply HBC; apply symmetric_point_uniqueness with A O; Col); assert_cols; ColR.",
            "VernacExtend",
            "af3d0d462ce0076936f749a861e6cd975bed7122"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (H := midpoint_existence A C); destruct H as [M2 HMid2].",
            "VernacExtend",
            "a045de86410ba089045f98c5cb3e3fa39a16d673"
        ],
        [
            "assert (HOM2 : O <> M2).",
            "VernacExtend",
            "3fc0e3c6c11f672a773f62697d0aa5422c10a3d1"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro; treat_equalities.",
            "VernacExtend",
            "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
        ],
        [
            "assert (H := l7_20 O A B); elim H; clear H; try intro H; Cong; try (apply HBC; apply symmetric_point_uniqueness with A O; Col); assert_cols; ColR.",
            "VernacExtend",
            "b87b12ac1dad12e7f7e59667dc557cdb2b737221"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HM1M2 : M1 <> M2) by (intro; treat_equalities; Col).",
            "VernacExtend",
            "0c7699bc7f6d98881cf4b0d8f704064a69e2b93f"
        ],
        [
            "assert (HPerp1 : Perp_bisect O M1 A B) by (apply cong_cop_perp_bisect; spliter; Cong; Cop).",
            "VernacExtend",
            "788441a610a68765939c7c5a8890c3b756934d27"
        ],
        [
            "assert (HPerp2 : Perp_bisect O M2 A C) by (apply cong_cop_perp_bisect; spliter; Cong; Cop).",
            "VernacExtend",
            "f893e74bfa7856b5bc9baf0c8273cdf97b16de09"
        ],
        [
            "assert (HOM1M2 : ~ Col O M1 M2).",
            "VernacExtend",
            "e52f079ac81edc5cae12741ea243a98c38ebc903"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro HOM1M2; assert (H := l7_20 O A B); elim H; clear H; try intro H; Cong; try (apply HOM1; apply l7_17 with A B; Col); assert_diffs; assert_cols; ColR.",
            "VernacExtend",
            "2db0e5e6f44dcb011c99ded8f13cbd8531d7e4d2"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (HPar_strict : Par_strict O M1 O M2).",
            "VernacExtend",
            "cd954df4465fcc3c746b3f6a346b3ef11a9334ac"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply par_not_col_strict with M2; Col.",
            "VernacExtend",
            "8dbccf72e055252c98fa5fe08e032a68024f5e67"
        ],
        [
            "apply l12_9 with A B; [Cop| |Cop..| |].",
            "VernacExtend",
            "1db094547dc0f2b4659e92a8a9891a66553f7753"
        ],
        [
            "apply coplanar_perm_16, col_cop__cop with C; Col; Cop.",
            "VernacExtend",
            "3b2a65cac65aeca050690ff919b9ed8003bd59e4"
        ],
        [
            "apply perp_bisect_perp; Col.",
            "VernacExtend",
            "38077ac96fedcbd07835447a6833a21ae8f504fa"
        ],
        [
            "apply perp_col0 with A C; Col; perm_apply perp_bisect_perp.",
            "VernacExtend",
            "22658c09136744b915bbc39779830ae55c07da35"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (H := not_par_strict_id O M1 M2); Col.",
            "VernacExtend",
            "f407a863965d93710049dae1509cb780054e304d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concyclic_not_col_or_eq : forall A B C A', Concyclic A B C A' -> A'=C \\/ A'=B \\/ A=B \\/ A=C \\/ A=A' \\/ (~ Col A B A' /\\ ~ Col A C A').",
            "VernacStartTheoremProof",
            "7b4823c6c5de65682737292784fb7e265729764b"
        ],
        [
            "intros A B C A' H.",
            "VernacExtend",
            "b2f90e23a0f11550060718da24324836239bbec2"
        ],
        [
            "assert (H' := H); apply concyclic_perm_1 in H; apply concyclic_perm_3 in H'.",
            "VernacExtend",
            "0f276415649ff4ca9e27168eeb8f71917765c9bc"
        ],
        [
            "apply concyclic_not_col_or_eq_aux in H; apply concyclic_not_col_or_eq_aux in H'.",
            "VernacExtend",
            "dae1b4e7d9b22e89b3ed49d6c4e62c0d17d15f7f"
        ],
        [
            "elim (eq_dec_points A' C); intro; try tauto.",
            "VernacExtend",
            "04fa575ce4709f2cd53f58f930eeefae18a77cc5"
        ],
        [
            "elim (eq_dec_points A' B); intro; try tauto.",
            "VernacExtend",
            "839d58e281ef658e68952700b084f61cd3e3d8a9"
        ],
        [
            "elim (eq_dec_points A B); intro; try tauto.",
            "VernacExtend",
            "8babe846fbdbd5a6816b3b328be1edbda4ab93d6"
        ],
        [
            "elim (eq_dec_points A C); intro; try tauto.",
            "VernacExtend",
            "d037461ca523e410f492eb8e3572ac3a4b3cd68f"
        ],
        [
            "elim (eq_dec_points A A'); intro; try tauto.",
            "VernacExtend",
            "16253d6b048ee4e740e2a8ec69db5a213f2746f4"
        ],
        [
            "do 3 (elim H; clear H; intro H; try tauto); Col.",
            "VernacExtend",
            "f993f0690a389aff219613b48f1f8690a01aa996"
        ],
        [
            "do 3 (elim H'; clear H'; intro H'; try tauto); Col.",
            "VernacExtend",
            "8c8dfc43c4e20dd21cbffb6311fe0c9a45d8b939"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Euler_line_special_case : forall A B C G H O, Per A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.",
            "VernacStartTheoremProof",
            "773fc7b7773b23fe6d7c34ea643f208634e574d6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H=B).",
            "VernacExtend",
            "55a886cc86474dadc59835e6cb72f1d94cffb978"
        ],
        [
            "apply orthocenter_per with A C;finish.",
            "VernacExtend",
            "ca8dd6f520cb9a4bcc1cea84b04afc6d9eaa81f1"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (Midpoint O A C).",
            "VernacExtend",
            "9e65d04f0a4f59c5b7ff624e1f0ccfd45211a85c"
        ],
        [
            "apply circumcenter_per with B;finish.",
            "VernacExtend",
            "61cc1bddd658119eaf3e82e56571499ed2ba50e0"
        ],
        [
            "unfold is_orthocenter in *;spliter;assert_diffs;finish.",
            "VernacExtend",
            "957dc7961dcd8e8fba63fa1c6df476a60b4d69d4"
        ],
        [
            "unfold is_orthocenter in *;spliter;assert_diffs;finish.",
            "VernacExtend",
            "957dc7961dcd8e8fba63fa1c6df476a60b4d69d4"
        ],
        [
            "assert (is_gravity_center G A C B).",
            "VernacExtend",
            "4e9a12d4c2856884a58ac5361324b37537e9b67f"
        ],
        [
            "apply is_gravity_center_perm in H1;intuition.",
            "VernacExtend",
            "35bfee93f7596a9d135076fad6edf56e17623d28"
        ],
        [
            "perm_apply (is_gravity_center_col A C B G O).",
            "VernacExtend",
            "520ac709150e85f7f2bb7ed25ee1109813192081"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gravity_center_change_triangle: forall A B C G I B' C', is_gravity_center G A B C -> Midpoint I B C -> Midpoint I B' C' -> ~ Col A B' C' -> is_gravity_center G A B' C'.",
            "VernacStartTheoremProof",
            "46571fc744bb6cbb9b3d531bbd4f94b6706d0354"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "Name G' the midpoint of A and G.",
            "VernacExtend",
            "d70fb8cdd5babea49a2b88fab20f094ff23e5c13"
        ],
        [
            "assert (Midpoint G I G') by (apply (is_gravity_center_third A B C G G' I);finish).",
            "VernacExtend",
            "fd9cb720040e72d989c077a49c79b40317ab3e78"
        ],
        [
            "apply (is_gravity_center_third_reci A B' C' G I G');finish.",
            "VernacExtend",
            "68d73b7105a0af63f68bb718480843e989a94dd3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve is_gravity_center_perm_1 is_gravity_center_perm_2 is_gravity_center_perm_3 is_gravity_center_perm_4 is_gravity_center_perm_5 : gravitycenter.",
            "VernacHints",
            "6e72ef578140c8002564d0178ce74f8bbadc20b1"
        ],
        [
            "Hint Resolve is_orthocenter_perm_1 is_orthocenter_perm_2 is_orthocenter_perm_3 is_orthocenter_perm_4 is_orthocenter_perm_5 : Orthocenter.",
            "VernacHints",
            "f127a0fab2a7d359611aa3137fc7cbf108332b07"
        ],
        [
            "Hint Resolve is_circumcenter_perm_1 is_circumcenter_perm_2 is_circumcenter_perm_3 is_circumcenter_perm_4 is_circumcenter_perm_5 : Circumcenter.",
            "VernacHints",
            "a92d7ad81d57bd35b5c133629b8bba028a67acf0"
        ],
        [
            "Lemma Euler_line : forall A B C G H O, ~ Col A B C -> is_gravity_center G A B C -> is_orthocenter H A B C -> is_circumcenter O A B C -> Col G H O.",
            "VernacStartTheoremProof",
            "1cac582423ab316a33126ca259c05e2f3211af47"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (cong_dec A B A C); intro.",
            "VernacExtend",
            "29773f6f670130c3d18c47d4d8a1a8b2423a4a73"
        ],
        [
            "Name A' the midpoint of B and C.",
            "VernacExtend",
            "ab04961a95cf2ca5d67b3bbd448569394d3a2a0f"
        ],
        [
            "Name B' the midpoint of A and C.",
            "VernacExtend",
            "63b97f8a58440e27e7166deb147f79fa9cb85465"
        ],
        [
            "Name C' the midpoint of A and B.",
            "VernacExtend",
            "06b3ce92b0281205452ef3487932fe5960fce688"
        ],
        [
            "assert (Perp_bisect A A' B C) by (apply cong_cop_perp_bisect; assert_diffs; Cong; Cop; intro; treat_equalities; apply H0; Col).",
            "VernacExtend",
            "890b94cffad0070997b1d8148e95c76ea900d7bf"
        ],
        [
            "assert (Col G A' A) by (apply is_gravity_center_perm in H1; apply is_gravity_center_col with B C; spliter; Col).",
            "VernacExtend",
            "11a934757fb1f3c25d56677d3fc65f328e58fb37"
        ],
        [
            "unfold is_orthocenter in *; spliter.",
            "VernacExtend",
            "01f31f1b49a8a5c6f706c84f2473ef08fc28b105"
        ],
        [
            "elim (eq_dec_points O G); intro; treat_equalities; Col; elim (eq_dec_points O H); intro; treat_equalities; Col.",
            "VernacExtend",
            "905c532a159e2d5e9d3436693def58e17670359c"
        ],
        [
            "elim (eq_dec_points O A'); intro; treat_equalities.",
            "VernacExtend",
            "d5243a8fc62f227758c372aeec55653365244dfa"
        ],
        [
            "assert (Col A H O) by (apply cop_perp2__col with B C; Col; Cop; apply perp_bisect_perp; Col).",
            "VernacExtend",
            "ab5b83f5173e5856d7b86b67b62224bcf874a31c"
        ],
        [
            "apply col_permutation_1; apply cop_perp2__col with B C.",
            "VernacExtend",
            "7e367f462f9b7ab8e13f0891ae03a65e9930552b"
        ],
        [
            "apply coplanar_trans_1 with A; Cop.",
            "VernacExtend",
            "620581ae6c57d9d89f19491873d92aa7c10b78f8"
        ],
        [
            "apply perp_sym; apply perp_col0 with A O; try apply perp_bisect_perp; Col.",
            "VernacExtend",
            "cdde4dfa4ac88978531d2e61ba4a6602faa7336d"
        ],
        [
            "apply perp_sym; apply perp_col0 with A H; Col.",
            "VernacExtend",
            "dcc791464e1d62147dcc8e6f76cc78c82f415868"
        ],
        [
            "assert (Col A A' H) by (apply cop_perp2__col with B C; Cop; apply perp_bisect_perp; auto).",
            "VernacExtend",
            "3a91730e91b9cb94c220f478e97ee4a393f6bedd"
        ],
        [
            "assert (Perp_bisect O A' B C) by (apply circumcenter_perp with A; assert_diffs; Col).",
            "VernacExtend",
            "e987f869efd06defb840a704c6e9e00ce6e1c1cd"
        ],
        [
            "assert (Col A' A O) by (apply cop_perp2__col with B C; Cop; apply perp_left_comm; apply perp_bisect_perp; auto).",
            "VernacExtend",
            "33a4a87988e0f6f365e71b0607199adcba12b5fd"
        ],
        [
            "show_distinct A A'; assert_cols; Col; ColR.",
            "VernacExtend",
            "f190055997a5ffd639cce787d05e7570e12449be"
        ],
        [
            "Name A' the symmetric of A wrt O.",
            "VernacExtend",
            "4d55e1412c9cbe6adab7fd4268af6204a4682485"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "assert (Concyclic A B C A').",
            "VernacExtend",
            "82bc1f999c1acdab2b6222aa3d995050a8aada23"
        ],
        [
            "unfold Concyclic.",
            "VernacExtend",
            "c4e7d2f1a59dfe2f96f33ab425306979101a5dd8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "destruct (eq_dec_points A O).",
            "VernacExtend",
            "d28a1e90ad8c2e9924130e119b0956ea25a9c4a4"
        ],
        [
            "treat_equalities; Cop.",
            "VernacExtend",
            "194c02bd1037be138b75387e996d317fbc864e61"
        ],
        [
            "apply coplanar_perm_12, col_cop__cop with O; Col; Cop.",
            "VernacExtend",
            "594f1e8918d6fe8d58f362089dfece123a55b43a"
        ],
        [
            "exists O.",
            "VernacExtend",
            "857793ba1f2fca166b38dcce16bdb0403ad0f7dc"
        ],
        [
            "apply circumcenter_cong in H3.",
            "VernacExtend",
            "4f1e6c8d7847d03a7b5125228643b01de3ecaffd"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert_congs_perm.",
            "VernacExtend",
            "8c6812acf12bb64f145256b928e11d6446048a66"
        ],
        [
            "spliter;repeat (split;finish).",
            "VernacExtend",
            "885454361f4a8e736dedd024ac6822afbebbb101"
        ],
        [
            "assert (T:=concyclic_not_col_or_eq A B C A' H5).",
            "VernacExtend",
            "98ba598f7db8de69b3b621943df060fd21a56254"
        ],
        [
            "decompose [or] T;clear T;try contradiction.",
            "VernacExtend",
            "6205c845420d14df19712cabfc15854fc48b756f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (Per A B C).",
            "VernacExtend",
            "a5f95f7ca4653098a6e23c5e66121a715c54e405"
        ],
        [
            "apply midpoint_thales with O;finish.",
            "VernacExtend",
            "955b68d86bd967089af9dddacc7fe0cacf9addde"
        ],
        [
            "unfold is_circumcenter in *;spliter;finish.",
            "VernacExtend",
            "c9de3405626469e7f682b328b348f5d894584bbd"
        ],
        [
            "apply (Euler_line_special_case A B C G H O);finish.",
            "VernacExtend",
            "b2a1401d5a59e3e4e3bbf3786515a82ceee5fc5f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "assert (Per A C B).",
            "VernacExtend",
            "f2284c9c54e111e63955fda4ca8e2f6ce32d2b2f"
        ],
        [
            "apply midpoint_thales with O;finish.",
            "VernacExtend",
            "955b68d86bd967089af9dddacc7fe0cacf9addde"
        ],
        [
            "unfold is_circumcenter in *;spliter.",
            "VernacExtend",
            "3a1fd478d5a90efc59633946654c9b8148e772bd"
        ],
        [
            "apply cong_transitivity with O B;finish.",
            "VernacExtend",
            "2fd3808075a8b933e800786469585e2cf8bb7639"
        ],
        [
            "apply (Euler_line_special_case A C B G H O);finish.",
            "VernacExtend",
            "bb218477890f16f369f1e42d460953b5e9590dbc"
        ],
        [
            "try (apply is_gravity_center_perm_1; assumption).",
            "VernacExtend",
            "686a9de35b7eca3c626d796f29baeb9e3ea99e56"
        ],
        [
            "auto with Orthocenter.",
            "VernacExtend",
            "28ea7c7c1917fe03ec5144dd6a4185dddf2d9e17"
        ],
        [
            "auto with Circumcenter.",
            "VernacExtend",
            "c0e4554300fa5ce898a1f7ea71654a5245de29eb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold is_circumcenter in *;spliter.",
            "VernacExtend",
            "3a1fd478d5a90efc59633946654c9b8148e772bd"
        ],
        [
            "treat_equalities.",
            "VernacExtend",
            "0d9f12669aa7857d816d5247f75bab1bd3b63660"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "spliter.",
            "VernacExtend",
            "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
        ],
        [
            "assert_diffs.",
            "VernacExtend",
            "2110ece9112784ebae36f9d0c23d563d83ff573a"
        ],
        [
            "assert (Per A B A').",
            "VernacExtend",
            "36815ee7cb007b152451f37d53c79bffca190b07"
        ],
        [
            "apply midpoint_thales with O;finish.",
            "VernacExtend",
            "955b68d86bd967089af9dddacc7fe0cacf9addde"
        ],
        [
            "unfold is_circumcenter in *;spliter;finish.",
            "VernacExtend",
            "c9de3405626469e7f682b328b348f5d894584bbd"
        ],
        [
            "assert (Perp C H A B) by (unfold is_orthocenter in *;spliter;finish).",
            "VernacExtend",
            "25d75cb1f03db3f6f02b78e5cba3f451106d90f3"
        ],
        [
            "assert (Perp A' B B A) by (apply per_perp;finish).",
            "VernacExtend",
            "07eccf802d58584b346bb371097ebbd868201ee2"
        ],
        [
            "assert (Par C H A' B).",
            "VernacExtend",
            "dd5ef07f84dc624fe6cab1ada0e61b4f2c6a6519"
        ],
        [
            "unfold Concyclic in *; spliter.",
            "VernacExtend",
            "bc3fa2e7fc49b49bf177e4272a96b7f5000a85b3"
        ],
        [
            "apply l12_9 with A B; [Cop|Cop| |Cop|Perp..].",
            "VernacExtend",
            "9cdac71f34bf8cb1a5a93543188bdfcf5210fd4b"
        ],
        [
            "apply coplanar_trans_1 with C; Col; Cop.",
            "VernacExtend",
            "1d2b91be1df8bbe68d1aa21d663429ffb42f309b"
        ],
        [
            "assert (Perp B H A C) by (unfold is_orthocenter in *;spliter;finish).",
            "VernacExtend",
            "cfe6c95c3d217bf0f547143cb0c472af1c550bd2"
        ],
        [
            "assert (Per A C A').",
            "VernacExtend",
            "0a8a509c028eb3033e370b92e8266926e835d9b7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply midpoint_thales with O;finish.",
            "VernacExtend",
            "955b68d86bd967089af9dddacc7fe0cacf9addde"
        ],
        [
            "unfold is_circumcenter in *;spliter;finish.",
            "VernacExtend",
            "c9de3405626469e7f682b328b348f5d894584bbd"
        ],
        [
            "apply cong_transitivity with B O;finish.",
            "VernacExtend",
            "d61a286aba28f8d60efef81a9271217eea5a4d4d"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (Perp A' C C A) by (apply per_perp;finish).",
            "VernacExtend",
            "4f17bef435ab9e3a5077c3983945a6ce591d7ec0"
        ],
        [
            "assert (Par B H C A').",
            "VernacExtend",
            "6f3e7112129507c9d03d606f52c25f366e0e6e38"
        ],
        [
            "unfold Concyclic in *; spliter.",
            "VernacExtend",
            "bc3fa2e7fc49b49bf177e4272a96b7f5000a85b3"
        ],
        [
            "apply l12_9 with A C; [Cop..| |Perp|Perp].",
            "VernacExtend",
            "55f5769b0c431cc1a415da7d3f8756e7257eae2f"
        ],
        [
            "apply coplanar_trans_1 with B; Col; Cop.",
            "VernacExtend",
            "44bd62d406a3235e1ebb31e3cde765a634de8eef"
        ],
        [
            "induction (col_dec B H C).",
            "VernacExtend",
            "3e7209d292346f88ec78ca8ec22848447cd60db6"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "assert (H=B \\/ H=C) by (apply (orthocenter_col A B C H);finish).",
            "VernacExtend",
            "9586b2363838230efbc065b1932728370567b46e"
        ],
        [
            "induction H26.",
            "VernacExtend",
            "e6d75bc188032a3a80cc3ba893e541e0b2169829"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst H.",
            "VernacExtend",
            "f1a356c60f00949319e5be2b6a9169472987b785"
        ],
        [
            "assert (Midpoint O A C) by (apply (circumcenter_per) with B;finish).",
            "VernacExtend",
            "267d325d8b0236aacfb8e270051d0051a4f6b194"
        ],
        [
            "assert (Col G O B).",
            "VernacExtend",
            "18dd4e45f90ffe2267ce367fbb4b98e3748c1c26"
        ],
        [
            "apply (is_gravity_center_col A C B G O).",
            "VernacExtend",
            "d0d1d9fedcc35568460e6d06194fed8afa5fc9c5"
        ],
        [
            "apply is_gravity_center_perm in H1;intuition idtac.",
            "VernacExtend",
            "8b96d9993f5351ee40e9dd5b1c4a9bf295212bff"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Col.",
            "VernacExtend",
            "92aede71f403ba291e696d87cdf45f5aca69909a"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst H;assert_diffs; intuition.",
            "VernacExtend",
            "23a709a2fe29607a981ee89cdcc6821a6d67d94a"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "assert (Parallelogram B H C A') by (apply par_2_plg;finish).",
            "VernacExtend",
            "b19234f5e77328602e4d1039b9682662e61e96c3"
        ],
        [
            "assert (T:exists I : Tpoint, Midpoint I B C /\\ Midpoint I H A') by (apply plg_mid;finish).",
            "VernacExtend",
            "8429c21b0f4601e4531081b418b8ce492d76b2ae"
        ],
        [
            "destruct T as [I [HI1 HI2]].",
            "VernacExtend",
            "871928a301cc2f50d5e9bb6308005ce5b0cd3a2c"
        ],
        [
            "elim (per_dec B A C); intro.",
            "VernacExtend",
            "3f4b2dbcc094cfc9d0b85af7cb0b990c6f5c066e"
        ],
        [
            "apply Euler_line_special_case with B A C; try apply is_gravity_center_cases; auto; try apply is_orthocenter_cases; auto; try apply is_circumcenter_cases; auto.",
            "VernacExtend",
            "809da3d2d7359d31a79cd8d7b186847bd55e4274"
        ],
        [
            "assert (is_gravity_center G A H A').",
            "VernacExtend",
            "2589ae7fa9a7a1983c287a01e66c681673972aa6"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply gravity_center_change_triangle with B C I;finish.",
            "VernacExtend",
            "21ccf8cdfc20369e77c36ad678fedaa102aecb6a"
        ],
        [
            "show_distinct A' H; treat_equalities.",
            "VernacExtend",
            "641dc208e7cdc9e6850562b32622e9677a2bf3c0"
        ],
        [
            "apply plg_par in H26; spliter; assert_diffs; Col.",
            "VernacExtend",
            "2c132195e074496b44a77cbc800dd8c2e52b8ae0"
        ],
        [
            "apply H25; apply par_id_5; Par.",
            "VernacExtend",
            "1326b4745d10a0b11cba6b4e024b7f13691a61d8"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "Name A'' the midpoint of B and C.",
            "VernacExtend",
            "5a88a066ce5f25c19ec3badfa2593ad490f470b0"
        ],
        [
            "show_distinct A'' O; treat_equalities.",
            "VernacExtend",
            "4c6e301fce9f784618f63c9d466393a341ba5d8f"
        ],
        [
            "apply H27; apply perp_per_1; assert_diffs; Perp.",
            "VernacExtend",
            "cff537719d2aadf0c607ebdd82a8c2d5cc1b19bb"
        ],
        [
            "assert (Perp_bisect O A'' B C) by (apply circumcenter_perp with A; Col).",
            "VernacExtend",
            "f11b285252f49b4f35e7c5fa3811319e143f63b5"
        ],
        [
            "elim (eq_dec_points A A''); intro; treat_equalities.",
            "VernacExtend",
            "eb0eb5b79d6db14f917d7c601048ee939b978124"
        ],
        [
            "eauto using perp_bisect_cong_2 with cong.",
            "VernacExtend",
            "58075f575f7c44356c134fb1505145c90e8d5d10"
        ],
        [
            "assert (Perp_bisect A'' A B C).",
            "VernacExtend",
            "ddbbac597c0eead6d8007405f09fa6430ff5c909"
        ],
        [
            "apply perp_mid_perp_bisect; Col.",
            "VernacExtend",
            "928a2fc7ee33b64d83e00eacf15bf1b4cbcd9427"
        ],
        [
            "apply perp_sym; apply perp_col0 with O A''; Col; try (apply perp_bisect_perp; assumption); assert_cols; try ColR.",
            "VernacExtend",
            "b0374d75fdb521ab54b5d28459a5a20d71cd7aa7"
        ],
        [
            "eauto using perp_bisect_cong_2 with cong.",
            "VernacExtend",
            "58075f575f7c44356c134fb1505145c90e8d5d10"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (is_gravity_center G A A' H) by (apply is_gravity_center_cases;auto).",
            "VernacExtend",
            "fa2097290adf3fa6f9744dde6355a2f5a79ac882"
        ],
        [
            "perm_apply (is_gravity_center_col A A' H G O).",
            "VernacExtend",
            "315e9a3f65d662630920d2099be9256979eade94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Euler_line.",
            "VernacEndSegment",
            "a3640291f3fa32881cd15c88170e86a8f321aab2"
        ]
    ],
    "proofs": [
        {
            "name": "concyclic_not_col_or_eq_aux",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros A B C D HC.",
                        "VernacExtend",
                        "d23abf6883425f7195064aa68a0d531781364fdc"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A B); intro HAB; Col.",
                        "VernacExtend",
                        "20fe99c0d2f6f279c567ca044f4f6f1cf29a2577"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A C); intro HAC; Col.",
                        "VernacExtend",
                        "0e5f5dc79510a2fdcf30f5a396b742981f2ca2b3"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points B C); intro HBC; Col5.",
                        "VernacExtend",
                        "5d9769bf35ca096e6ee59a659dcc1e86b92c3744"
                    ]
                },
                {
                    "command": [
                        "right; right; right; intro HCol.",
                        "VernacExtend",
                        "56b186cf9812f24d04e2bb5bdc3cf99a35247da8"
                    ]
                },
                {
                    "command": [
                        "destruct HC as [HCop [O [HCong1 [HCong2 HCong3]]]].",
                        "VernacExtend",
                        "4d9532fd94f6dde73dfe9aed43172f9af247ec34"
                    ]
                },
                {
                    "command": [
                        "assert (H := midpoint_existence A B); destruct H as [M1 HMid1].",
                        "VernacExtend",
                        "e3c8b8a2d9e9c34727aaee2e1f6bd122a8e0ea4c"
                    ]
                },
                {
                    "command": [
                        "assert (HOM1 : O <> M1).",
                        "VernacExtend",
                        "06b8975654e683deef413480dfb2aec16022b698"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro; treat_equalities.",
                        "VernacExtend",
                        "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
                    ]
                },
                {
                    "command": [
                        "assert (H := l7_20 O A C); elim H; clear H; try intro H; Cong; try (apply HBC; apply symmetric_point_uniqueness with A O; Col); assert_cols; ColR.",
                        "VernacExtend",
                        "af3d0d462ce0076936f749a861e6cd975bed7122"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (H := midpoint_existence A C); destruct H as [M2 HMid2].",
                        "VernacExtend",
                        "a045de86410ba089045f98c5cb3e3fa39a16d673"
                    ]
                },
                {
                    "command": [
                        "assert (HOM2 : O <> M2).",
                        "VernacExtend",
                        "3fc0e3c6c11f672a773f62697d0aa5422c10a3d1"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro; treat_equalities.",
                        "VernacExtend",
                        "256dc6e40b0d718ef6588b10a314abc9c4e42d9f"
                    ]
                },
                {
                    "command": [
                        "assert (H := l7_20 O A B); elim H; clear H; try intro H; Cong; try (apply HBC; apply symmetric_point_uniqueness with A O; Col); assert_cols; ColR.",
                        "VernacExtend",
                        "b87b12ac1dad12e7f7e59667dc557cdb2b737221"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HM1M2 : M1 <> M2) by (intro; treat_equalities; Col).",
                        "VernacExtend",
                        "0c7699bc7f6d98881cf4b0d8f704064a69e2b93f"
                    ]
                },
                {
                    "command": [
                        "assert (HPerp1 : Perp_bisect O M1 A B) by (apply cong_cop_perp_bisect; spliter; Cong; Cop).",
                        "VernacExtend",
                        "788441a610a68765939c7c5a8890c3b756934d27"
                    ]
                },
                {
                    "command": [
                        "assert (HPerp2 : Perp_bisect O M2 A C) by (apply cong_cop_perp_bisect; spliter; Cong; Cop).",
                        "VernacExtend",
                        "f893e74bfa7856b5bc9baf0c8273cdf97b16de09"
                    ]
                },
                {
                    "command": [
                        "assert (HOM1M2 : ~ Col O M1 M2).",
                        "VernacExtend",
                        "e52f079ac81edc5cae12741ea243a98c38ebc903"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro HOM1M2; assert (H := l7_20 O A B); elim H; clear H; try intro H; Cong; try (apply HOM1; apply l7_17 with A B; Col); assert_diffs; assert_cols; ColR.",
                        "VernacExtend",
                        "2db0e5e6f44dcb011c99ded8f13cbd8531d7e4d2"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (HPar_strict : Par_strict O M1 O M2).",
                        "VernacExtend",
                        "cd954df4465fcc3c746b3f6a346b3ef11a9334ac"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply par_not_col_strict with M2; Col.",
                        "VernacExtend",
                        "8dbccf72e055252c98fa5fe08e032a68024f5e67"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with A B; [Cop| |Cop..| |].",
                        "VernacExtend",
                        "1db094547dc0f2b4659e92a8a9891a66553f7753"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_perm_16, col_cop__cop with C; Col; Cop.",
                        "VernacExtend",
                        "3b2a65cac65aeca050690ff919b9ed8003bd59e4"
                    ]
                },
                {
                    "command": [
                        "apply perp_bisect_perp; Col.",
                        "VernacExtend",
                        "38077ac96fedcbd07835447a6833a21ae8f504fa"
                    ]
                },
                {
                    "command": [
                        "apply perp_col0 with A C; Col; perm_apply perp_bisect_perp.",
                        "VernacExtend",
                        "22658c09136744b915bbc39779830ae55c07da35"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (H := not_par_strict_id O M1 M2); Col.",
                        "VernacExtend",
                        "f407a863965d93710049dae1509cb780054e304d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concyclic_not_col_or_eq",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros A B C A' H.",
                        "VernacExtend",
                        "b2f90e23a0f11550060718da24324836239bbec2"
                    ]
                },
                {
                    "command": [
                        "assert (H' := H); apply concyclic_perm_1 in H; apply concyclic_perm_3 in H'.",
                        "VernacExtend",
                        "0f276415649ff4ca9e27168eeb8f71917765c9bc"
                    ]
                },
                {
                    "command": [
                        "apply concyclic_not_col_or_eq_aux in H; apply concyclic_not_col_or_eq_aux in H'.",
                        "VernacExtend",
                        "dae1b4e7d9b22e89b3ed49d6c4e62c0d17d15f7f"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A' C); intro; try tauto.",
                        "VernacExtend",
                        "04fa575ce4709f2cd53f58f930eeefae18a77cc5"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A' B); intro; try tauto.",
                        "VernacExtend",
                        "839d58e281ef658e68952700b084f61cd3e3d8a9"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A B); intro; try tauto.",
                        "VernacExtend",
                        "8babe846fbdbd5a6816b3b328be1edbda4ab93d6"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A C); intro; try tauto.",
                        "VernacExtend",
                        "d037461ca523e410f492eb8e3572ac3a4b3cd68f"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A A'); intro; try tauto.",
                        "VernacExtend",
                        "16253d6b048ee4e740e2a8ec69db5a213f2746f4"
                    ]
                },
                {
                    "command": [
                        "do 3 (elim H; clear H; intro H; try tauto); Col.",
                        "VernacExtend",
                        "f993f0690a389aff219613b48f1f8690a01aa996"
                    ]
                },
                {
                    "command": [
                        "do 3 (elim H'; clear H'; intro H'; try tauto); Col.",
                        "VernacExtend",
                        "8c8dfc43c4e20dd21cbffb6311fe0c9a45d8b939"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Euler_line_special_case",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H=B).",
                        "VernacExtend",
                        "55a886cc86474dadc59835e6cb72f1d94cffb978"
                    ]
                },
                {
                    "command": [
                        "apply orthocenter_per with A C;finish.",
                        "VernacExtend",
                        "ca8dd6f520cb9a4bcc1cea84b04afc6d9eaa81f1"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint O A C).",
                        "VernacExtend",
                        "9e65d04f0a4f59c5b7ff624e1f0ccfd45211a85c"
                    ]
                },
                {
                    "command": [
                        "apply circumcenter_per with B;finish.",
                        "VernacExtend",
                        "61cc1bddd658119eaf3e82e56571499ed2ba50e0"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *;spliter;assert_diffs;finish.",
                        "VernacExtend",
                        "957dc7961dcd8e8fba63fa1c6df476a60b4d69d4"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *;spliter;assert_diffs;finish.",
                        "VernacExtend",
                        "957dc7961dcd8e8fba63fa1c6df476a60b4d69d4"
                    ]
                },
                {
                    "command": [
                        "assert (is_gravity_center G A C B).",
                        "VernacExtend",
                        "4e9a12d4c2856884a58ac5361324b37537e9b67f"
                    ]
                },
                {
                    "command": [
                        "apply is_gravity_center_perm in H1;intuition.",
                        "VernacExtend",
                        "35bfee93f7596a9d135076fad6edf56e17623d28"
                    ]
                },
                {
                    "command": [
                        "perm_apply (is_gravity_center_col A C B G O).",
                        "VernacExtend",
                        "520ac709150e85f7f2bb7ed25ee1109813192081"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gravity_center_change_triangle",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "Name G' the midpoint of A and G.",
                        "VernacExtend",
                        "d70fb8cdd5babea49a2b88fab20f094ff23e5c13"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint G I G') by (apply (is_gravity_center_third A B C G G' I);finish).",
                        "VernacExtend",
                        "fd9cb720040e72d989c077a49c79b40317ab3e78"
                    ]
                },
                {
                    "command": [
                        "apply (is_gravity_center_third_reci A B' C' G I G');finish.",
                        "VernacExtend",
                        "68d73b7105a0af63f68bb718480843e989a94dd3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Euler_line",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (cong_dec A B A C); intro.",
                        "VernacExtend",
                        "29773f6f670130c3d18c47d4d8a1a8b2423a4a73"
                    ]
                },
                {
                    "command": [
                        "Name A' the midpoint of B and C.",
                        "VernacExtend",
                        "ab04961a95cf2ca5d67b3bbd448569394d3a2a0f"
                    ]
                },
                {
                    "command": [
                        "Name B' the midpoint of A and C.",
                        "VernacExtend",
                        "63b97f8a58440e27e7166deb147f79fa9cb85465"
                    ]
                },
                {
                    "command": [
                        "Name C' the midpoint of A and B.",
                        "VernacExtend",
                        "06b3ce92b0281205452ef3487932fe5960fce688"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_bisect A A' B C) by (apply cong_cop_perp_bisect; assert_diffs; Cong; Cop; intro; treat_equalities; apply H0; Col).",
                        "VernacExtend",
                        "890b94cffad0070997b1d8148e95c76ea900d7bf"
                    ]
                },
                {
                    "command": [
                        "assert (Col G A' A) by (apply is_gravity_center_perm in H1; apply is_gravity_center_col with B C; spliter; Col).",
                        "VernacExtend",
                        "11a934757fb1f3c25d56677d3fc65f328e58fb37"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *; spliter.",
                        "VernacExtend",
                        "01f31f1b49a8a5c6f706c84f2473ef08fc28b105"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points O G); intro; treat_equalities; Col; elim (eq_dec_points O H); intro; treat_equalities; Col.",
                        "VernacExtend",
                        "905c532a159e2d5e9d3436693def58e17670359c"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points O A'); intro; treat_equalities.",
                        "VernacExtend",
                        "d5243a8fc62f227758c372aeec55653365244dfa"
                    ]
                },
                {
                    "command": [
                        "assert (Col A H O) by (apply cop_perp2__col with B C; Col; Cop; apply perp_bisect_perp; Col).",
                        "VernacExtend",
                        "ab5b83f5173e5856d7b86b67b62224bcf874a31c"
                    ]
                },
                {
                    "command": [
                        "apply col_permutation_1; apply cop_perp2__col with B C.",
                        "VernacExtend",
                        "7e367f462f9b7ab8e13f0891ae03a65e9930552b"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_trans_1 with A; Cop.",
                        "VernacExtend",
                        "620581ae6c57d9d89f19491873d92aa7c10b78f8"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col0 with A O; try apply perp_bisect_perp; Col.",
                        "VernacExtend",
                        "cdde4dfa4ac88978531d2e61ba4a6602faa7336d"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col0 with A H; Col.",
                        "VernacExtend",
                        "dcc791464e1d62147dcc8e6f76cc78c82f415868"
                    ]
                },
                {
                    "command": [
                        "assert (Col A A' H) by (apply cop_perp2__col with B C; Cop; apply perp_bisect_perp; auto).",
                        "VernacExtend",
                        "3a91730e91b9cb94c220f478e97ee4a393f6bedd"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_bisect O A' B C) by (apply circumcenter_perp with A; assert_diffs; Col).",
                        "VernacExtend",
                        "e987f869efd06defb840a704c6e9e00ce6e1c1cd"
                    ]
                },
                {
                    "command": [
                        "assert (Col A' A O) by (apply cop_perp2__col with B C; Cop; apply perp_left_comm; apply perp_bisect_perp; auto).",
                        "VernacExtend",
                        "33a4a87988e0f6f365e71b0607199adcba12b5fd"
                    ]
                },
                {
                    "command": [
                        "show_distinct A A'; assert_cols; Col; ColR.",
                        "VernacExtend",
                        "f190055997a5ffd639cce787d05e7570e12449be"
                    ]
                },
                {
                    "command": [
                        "Name A' the symmetric of A wrt O.",
                        "VernacExtend",
                        "4d55e1412c9cbe6adab7fd4268af6204a4682485"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "assert (Concyclic A B C A').",
                        "VernacExtend",
                        "82bc1f999c1acdab2b6222aa3d995050a8aada23"
                    ]
                },
                {
                    "command": [
                        "unfold Concyclic.",
                        "VernacExtend",
                        "c4e7d2f1a59dfe2f96f33ab425306979101a5dd8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "destruct (eq_dec_points A O).",
                        "VernacExtend",
                        "d28a1e90ad8c2e9924130e119b0956ea25a9c4a4"
                    ]
                },
                {
                    "command": [
                        "treat_equalities; Cop.",
                        "VernacExtend",
                        "194c02bd1037be138b75387e996d317fbc864e61"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_perm_12, col_cop__cop with O; Col; Cop.",
                        "VernacExtend",
                        "594f1e8918d6fe8d58f362089dfece123a55b43a"
                    ]
                },
                {
                    "command": [
                        "exists O.",
                        "VernacExtend",
                        "857793ba1f2fca166b38dcce16bdb0403ad0f7dc"
                    ]
                },
                {
                    "command": [
                        "apply circumcenter_cong in H3.",
                        "VernacExtend",
                        "4f1e6c8d7847d03a7b5125228643b01de3ecaffd"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert_congs_perm.",
                        "VernacExtend",
                        "8c6812acf12bb64f145256b928e11d6446048a66"
                    ]
                },
                {
                    "command": [
                        "spliter;repeat (split;finish).",
                        "VernacExtend",
                        "885454361f4a8e736dedd024ac6822afbebbb101"
                    ]
                },
                {
                    "command": [
                        "assert (T:=concyclic_not_col_or_eq A B C A' H5).",
                        "VernacExtend",
                        "98ba598f7db8de69b3b621943df060fd21a56254"
                    ]
                },
                {
                    "command": [
                        "decompose [or] T;clear T;try contradiction.",
                        "VernacExtend",
                        "6205c845420d14df19712cabfc15854fc48b756f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B C).",
                        "VernacExtend",
                        "a5f95f7ca4653098a6e23c5e66121a715c54e405"
                    ]
                },
                {
                    "command": [
                        "apply midpoint_thales with O;finish.",
                        "VernacExtend",
                        "955b68d86bd967089af9dddacc7fe0cacf9addde"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *;spliter;finish.",
                        "VernacExtend",
                        "c9de3405626469e7f682b328b348f5d894584bbd"
                    ]
                },
                {
                    "command": [
                        "apply (Euler_line_special_case A B C G H O);finish.",
                        "VernacExtend",
                        "b2a1401d5a59e3e4e3bbf3786515a82ceee5fc5f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C B).",
                        "VernacExtend",
                        "f2284c9c54e111e63955fda4ca8e2f6ce32d2b2f"
                    ]
                },
                {
                    "command": [
                        "apply midpoint_thales with O;finish.",
                        "VernacExtend",
                        "955b68d86bd967089af9dddacc7fe0cacf9addde"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *;spliter.",
                        "VernacExtend",
                        "3a1fd478d5a90efc59633946654c9b8148e772bd"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with O B;finish.",
                        "VernacExtend",
                        "2fd3808075a8b933e800786469585e2cf8bb7639"
                    ]
                },
                {
                    "command": [
                        "apply (Euler_line_special_case A C B G H O);finish.",
                        "VernacExtend",
                        "bb218477890f16f369f1e42d460953b5e9590dbc"
                    ]
                },
                {
                    "command": [
                        "try (apply is_gravity_center_perm_1; assumption).",
                        "VernacExtend",
                        "686a9de35b7eca3c626d796f29baeb9e3ea99e56"
                    ]
                },
                {
                    "command": [
                        "auto with Orthocenter.",
                        "VernacExtend",
                        "28ea7c7c1917fe03ec5144dd6a4185dddf2d9e17"
                    ]
                },
                {
                    "command": [
                        "auto with Circumcenter.",
                        "VernacExtend",
                        "c0e4554300fa5ce898a1f7ea71654a5245de29eb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *;spliter.",
                        "VernacExtend",
                        "3a1fd478d5a90efc59633946654c9b8148e772bd"
                    ]
                },
                {
                    "command": [
                        "treat_equalities.",
                        "VernacExtend",
                        "0d9f12669aa7857d816d5247f75bab1bd3b63660"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "spliter.",
                        "VernacExtend",
                        "fab9e3eab81eb4c88790dca05ccb5bd23a4d6dd0"
                    ]
                },
                {
                    "command": [
                        "assert_diffs.",
                        "VernacExtend",
                        "2110ece9112784ebae36f9d0c23d563d83ff573a"
                    ]
                },
                {
                    "command": [
                        "assert (Per A B A').",
                        "VernacExtend",
                        "36815ee7cb007b152451f37d53c79bffca190b07"
                    ]
                },
                {
                    "command": [
                        "apply midpoint_thales with O;finish.",
                        "VernacExtend",
                        "955b68d86bd967089af9dddacc7fe0cacf9addde"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *;spliter;finish.",
                        "VernacExtend",
                        "c9de3405626469e7f682b328b348f5d894584bbd"
                    ]
                },
                {
                    "command": [
                        "assert (Perp C H A B) by (unfold is_orthocenter in *;spliter;finish).",
                        "VernacExtend",
                        "25d75cb1f03db3f6f02b78e5cba3f451106d90f3"
                    ]
                },
                {
                    "command": [
                        "assert (Perp A' B B A) by (apply per_perp;finish).",
                        "VernacExtend",
                        "07eccf802d58584b346bb371097ebbd868201ee2"
                    ]
                },
                {
                    "command": [
                        "assert (Par C H A' B).",
                        "VernacExtend",
                        "dd5ef07f84dc624fe6cab1ada0e61b4f2c6a6519"
                    ]
                },
                {
                    "command": [
                        "unfold Concyclic in *; spliter.",
                        "VernacExtend",
                        "bc3fa2e7fc49b49bf177e4272a96b7f5000a85b3"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with A B; [Cop|Cop| |Cop|Perp..].",
                        "VernacExtend",
                        "9cdac71f34bf8cb1a5a93543188bdfcf5210fd4b"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_trans_1 with C; Col; Cop.",
                        "VernacExtend",
                        "1d2b91be1df8bbe68d1aa21d663429ffb42f309b"
                    ]
                },
                {
                    "command": [
                        "assert (Perp B H A C) by (unfold is_orthocenter in *;spliter;finish).",
                        "VernacExtend",
                        "cfe6c95c3d217bf0f547143cb0c472af1c550bd2"
                    ]
                },
                {
                    "command": [
                        "assert (Per A C A').",
                        "VernacExtend",
                        "0a8a509c028eb3033e370b92e8266926e835d9b7"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply midpoint_thales with O;finish.",
                        "VernacExtend",
                        "955b68d86bd967089af9dddacc7fe0cacf9addde"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *;spliter;finish.",
                        "VernacExtend",
                        "c9de3405626469e7f682b328b348f5d894584bbd"
                    ]
                },
                {
                    "command": [
                        "apply cong_transitivity with B O;finish.",
                        "VernacExtend",
                        "d61a286aba28f8d60efef81a9271217eea5a4d4d"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (Perp A' C C A) by (apply per_perp;finish).",
                        "VernacExtend",
                        "4f17bef435ab9e3a5077c3983945a6ce591d7ec0"
                    ]
                },
                {
                    "command": [
                        "assert (Par B H C A').",
                        "VernacExtend",
                        "6f3e7112129507c9d03d606f52c25f366e0e6e38"
                    ]
                },
                {
                    "command": [
                        "unfold Concyclic in *; spliter.",
                        "VernacExtend",
                        "bc3fa2e7fc49b49bf177e4272a96b7f5000a85b3"
                    ]
                },
                {
                    "command": [
                        "apply l12_9 with A C; [Cop..| |Perp|Perp].",
                        "VernacExtend",
                        "55f5769b0c431cc1a415da7d3f8756e7257eae2f"
                    ]
                },
                {
                    "command": [
                        "apply coplanar_trans_1 with B; Col; Cop.",
                        "VernacExtend",
                        "44bd62d406a3235e1ebb31e3cde765a634de8eef"
                    ]
                },
                {
                    "command": [
                        "induction (col_dec B H C).",
                        "VernacExtend",
                        "3e7209d292346f88ec78ca8ec22848447cd60db6"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "assert (H=B \\/ H=C) by (apply (orthocenter_col A B C H);finish).",
                        "VernacExtend",
                        "9586b2363838230efbc065b1932728370567b46e"
                    ]
                },
                {
                    "command": [
                        "induction H26.",
                        "VernacExtend",
                        "e6d75bc188032a3a80cc3ba893e541e0b2169829"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst H.",
                        "VernacExtend",
                        "f1a356c60f00949319e5be2b6a9169472987b785"
                    ]
                },
                {
                    "command": [
                        "assert (Midpoint O A C) by (apply (circumcenter_per) with B;finish).",
                        "VernacExtend",
                        "267d325d8b0236aacfb8e270051d0051a4f6b194"
                    ]
                },
                {
                    "command": [
                        "assert (Col G O B).",
                        "VernacExtend",
                        "18dd4e45f90ffe2267ce367fbb4b98e3748c1c26"
                    ]
                },
                {
                    "command": [
                        "apply (is_gravity_center_col A C B G O).",
                        "VernacExtend",
                        "d0d1d9fedcc35568460e6d06194fed8afa5fc9c5"
                    ]
                },
                {
                    "command": [
                        "apply is_gravity_center_perm in H1;intuition idtac.",
                        "VernacExtend",
                        "8b96d9993f5351ee40e9dd5b1c4a9bf295212bff"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Col.",
                        "VernacExtend",
                        "92aede71f403ba291e696d87cdf45f5aca69909a"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst H;assert_diffs; intuition.",
                        "VernacExtend",
                        "23a709a2fe29607a981ee89cdcc6821a6d67d94a"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "assert (Parallelogram B H C A') by (apply par_2_plg;finish).",
                        "VernacExtend",
                        "b19234f5e77328602e4d1039b9682662e61e96c3"
                    ]
                },
                {
                    "command": [
                        "assert (T:exists I : Tpoint, Midpoint I B C /\\ Midpoint I H A') by (apply plg_mid;finish).",
                        "VernacExtend",
                        "8429c21b0f4601e4531081b418b8ce492d76b2ae"
                    ]
                },
                {
                    "command": [
                        "destruct T as [I [HI1 HI2]].",
                        "VernacExtend",
                        "871928a301cc2f50d5e9bb6308005ce5b0cd3a2c"
                    ]
                },
                {
                    "command": [
                        "elim (per_dec B A C); intro.",
                        "VernacExtend",
                        "3f4b2dbcc094cfc9d0b85af7cb0b990c6f5c066e"
                    ]
                },
                {
                    "command": [
                        "apply Euler_line_special_case with B A C; try apply is_gravity_center_cases; auto; try apply is_orthocenter_cases; auto; try apply is_circumcenter_cases; auto.",
                        "VernacExtend",
                        "809da3d2d7359d31a79cd8d7b186847bd55e4274"
                    ]
                },
                {
                    "command": [
                        "assert (is_gravity_center G A H A').",
                        "VernacExtend",
                        "2589ae7fa9a7a1983c287a01e66c681673972aa6"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "apply gravity_center_change_triangle with B C I;finish.",
                        "VernacExtend",
                        "21ccf8cdfc20369e77c36ad678fedaa102aecb6a"
                    ]
                },
                {
                    "command": [
                        "show_distinct A' H; treat_equalities.",
                        "VernacExtend",
                        "641dc208e7cdc9e6850562b32622e9677a2bf3c0"
                    ]
                },
                {
                    "command": [
                        "apply plg_par in H26; spliter; assert_diffs; Col.",
                        "VernacExtend",
                        "2c132195e074496b44a77cbc800dd8c2e52b8ae0"
                    ]
                },
                {
                    "command": [
                        "apply H25; apply par_id_5; Par.",
                        "VernacExtend",
                        "1326b4745d10a0b11cba6b4e024b7f13691a61d8"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "Name A'' the midpoint of B and C.",
                        "VernacExtend",
                        "5a88a066ce5f25c19ec3badfa2593ad490f470b0"
                    ]
                },
                {
                    "command": [
                        "show_distinct A'' O; treat_equalities.",
                        "VernacExtend",
                        "4c6e301fce9f784618f63c9d466393a341ba5d8f"
                    ]
                },
                {
                    "command": [
                        "apply H27; apply perp_per_1; assert_diffs; Perp.",
                        "VernacExtend",
                        "cff537719d2aadf0c607ebdd82a8c2d5cc1b19bb"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_bisect O A'' B C) by (apply circumcenter_perp with A; Col).",
                        "VernacExtend",
                        "f11b285252f49b4f35e7c5fa3811319e143f63b5"
                    ]
                },
                {
                    "command": [
                        "elim (eq_dec_points A A''); intro; treat_equalities.",
                        "VernacExtend",
                        "eb0eb5b79d6db14f917d7c601048ee939b978124"
                    ]
                },
                {
                    "command": [
                        "eauto using perp_bisect_cong_2 with cong.",
                        "VernacExtend",
                        "58075f575f7c44356c134fb1505145c90e8d5d10"
                    ]
                },
                {
                    "command": [
                        "assert (Perp_bisect A'' A B C).",
                        "VernacExtend",
                        "ddbbac597c0eead6d8007405f09fa6430ff5c909"
                    ]
                },
                {
                    "command": [
                        "apply perp_mid_perp_bisect; Col.",
                        "VernacExtend",
                        "928a2fc7ee33b64d83e00eacf15bf1b4cbcd9427"
                    ]
                },
                {
                    "command": [
                        "apply perp_sym; apply perp_col0 with O A''; Col; try (apply perp_bisect_perp; assumption); assert_cols; try ColR.",
                        "VernacExtend",
                        "b0374d75fdb521ab54b5d28459a5a20d71cd7aa7"
                    ]
                },
                {
                    "command": [
                        "eauto using perp_bisect_cong_2 with cong.",
                        "VernacExtend",
                        "58075f575f7c44356c134fb1505145c90e8d5d10"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (is_gravity_center G A A' H) by (apply is_gravity_center_cases;auto).",
                        "VernacExtend",
                        "fa2097290adf3fa6f9744dde6355a2f5a79ac882"
                    ]
                },
                {
                    "command": [
                        "perm_apply (is_gravity_center_col A A' H G O).",
                        "VernacExtend",
                        "315e9a3f65d662630920d2099be9256979eade94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}