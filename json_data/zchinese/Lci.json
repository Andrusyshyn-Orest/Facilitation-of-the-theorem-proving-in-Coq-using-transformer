{
    "filename": "Lci.v",
    "coq_project": "zchinese",
    "vernac_cmds": [
        [
            "Section Internal.",
            "VernacBeginSection",
            "a208c34a51966d06abe5464ab5a579422a6429cb"
        ],
        [
            "Variable S : Set.",
            "VernacAssumption",
            "2a0c7ebd77cf024747eefc8ea669e9e85a92c160"
        ],
        [
            "Variable G : S -> Prop.",
            "VernacAssumption",
            "09529122cf4b85864ed42453ee013b41fabbb27f"
        ],
        [
            "Variable Add : S -> S -> S.",
            "VernacAssumption",
            "7de290b45717e63dd496c32b4b0dd4408b1f5718"
        ],
        [
            "Variable O I : S.",
            "VernacAssumption",
            "583576d5826385fa347ae18d4dcb0d38e1c09796"
        ],
        [
            "Variable Opp Inv : S -> S.",
            "VernacAssumption",
            "5bdb8671374cf381310f5f7985cc3f46942011ad"
        ],
        [
            "Definition intern := forall x y : S, G x -> G y -> G (Add x y).",
            "VernacDefinition",
            "e76e86a2757b39262d97fe9acb801128210a1715"
        ],
        [
            "Definition commutativity := forall x y : S, Add x y = Add y x.",
            "VernacDefinition",
            "65277eac2d05f5326fd1e0dcd0de4ab69e063913"
        ],
        [
            "Definition associativity := forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.",
            "VernacDefinition",
            "4c675f1f9043618285c02835d9212979e8a616ff"
        ],
        [
            "Definition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) (O : S) := G O /\\ (forall x : S, G x -> Add x O = x /\\ Add O x = x).",
            "VernacDefinition",
            "c231bcb9f32879ad19ad5b15cdbb78dba2704aea"
        ],
        [
            "Lemma neutral_add : neutral S G Add O -> O = Add O O.",
            "VernacStartTheoremProof",
            "dbd3628ea1e3cc737ae45f354ed363bf12727978"
        ],
        [
            "intros; symmetry in |- *.",
            "VernacExtend",
            "0bcc8034342955f53b2bf85c64c83597f1f5f836"
        ],
        [
            "elim H; intros; elim (H1 O H0); trivial.",
            "VernacExtend",
            "76db65e481664fa2ba667b6df1c59620ad5c84b0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_opposite (x y : S) := G x /\\ G y /\\ Add x y = O /\\ Add y x = O.",
            "VernacDefinition",
            "37ebda1d65df58e15909d62b1e5af3c892037736"
        ],
        [
            "Lemma opp_com : commutativity -> forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.",
            "VernacStartTheoremProof",
            "cabf77fc5a6124dda40fc1a6530186bd483b1625"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_opposite in |- *.",
            "VernacExtend",
            "bb098060fffdcb3dccf6169343fa5a97e9c6dd04"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H0.",
            "VernacExtend",
            "3920fece303e3c4728f9cdc71daff99239237dbd"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H1.",
            "VernacExtend",
            "c03ab82d1e411e1dcd211c59917a4946e039be00"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "elim (H x y).",
            "VernacExtend",
            "ea6f14dc9501f55362c637530984395c2bf86b32"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition opposite := forall x : S, G x -> is_opposite x (Opp x).",
            "VernacDefinition",
            "0803f6e3b09a35c830998acf085f06886359e518"
        ],
        [
            "Definition distributivity (S : Set) (Add Mult : S -> S -> S) := forall x y z : S, Mult (Add x y) z = Add (Mult x z) (Mult y z) /\\ Mult x (Add y z) = Add (Mult x y) (Mult x z).",
            "VernacDefinition",
            "64f463dcc2e39a428b5f40f90bbab3281fa736e9"
        ],
        [
            "End Internal.",
            "VernacEndSegment",
            "74ef54bc8ef05e073dec9af445a7251526f4bb40"
        ]
    ],
    "proofs": [
        {
            "name": "neutral_add",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; symmetry in |- *.",
                        "VernacExtend",
                        "0bcc8034342955f53b2bf85c64c83597f1f5f836"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; elim (H1 O H0); trivial.",
                        "VernacExtend",
                        "76db65e481664fa2ba667b6df1c59620ad5c84b0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opp_com",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_opposite in |- *.",
                        "VernacExtend",
                        "bb098060fffdcb3dccf6169343fa5a97e9c6dd04"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H0.",
                        "VernacExtend",
                        "3920fece303e3c4728f9cdc71daff99239237dbd"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H1.",
                        "VernacExtend",
                        "c03ab82d1e411e1dcd211c59917a4946e039be00"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "elim (H x y).",
                        "VernacExtend",
                        "ea6f14dc9501f55362c637530984395c2bf86b32"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}