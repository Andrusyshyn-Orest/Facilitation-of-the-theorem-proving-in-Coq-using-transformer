{
    "filename": "cfrontend/Cop.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Coqlib.",
            "VernacRequire",
            "bbbe15041aca3a03300067f7acd445b462d537cc"
        ],
        [
            "Require Import AST.",
            "VernacRequire",
            "d103ecb096c06f34167fba01dd861491b0d5e84e"
        ],
        [
            "Require Import Integers.",
            "VernacRequire",
            "688f068e3335df7950b569ef75a5e993414c9874"
        ],
        [
            "Require Import Floats.",
            "VernacRequire",
            "b9c4a965f888465bf3445941d179c7194c314789"
        ],
        [
            "Require Import Values.",
            "VernacRequire",
            "f69762569c40def2ecf819f8117763d2ee924d2a"
        ],
        [
            "Require Import Memory.",
            "VernacRequire",
            "2705b33fd6d3e12818791c70e219eee6a06d5191"
        ],
        [
            "Require Import Ctypes.",
            "VernacRequire",
            "faff04a71b411c7c14fffc3b7842917b771e9d84"
        ],
        [
            "Require Archi.",
            "VernacRequire",
            "019739e08394793e2d196b9db729424cb460d119"
        ],
        [
            "Inductive unary_operation : Type := | Onotbool : unary_operation | Onotint : unary_operation | Oneg : unary_operation | Oabsfloat : unary_operation.",
            "VernacInductive",
            "ca3772ee729d58011aef7862cd4bbb029bd61808"
        ],
        [
            "Inductive binary_operation : Type := | Oadd : binary_operation | Osub : binary_operation | Omul : binary_operation | Odiv : binary_operation | Omod : binary_operation | Oand : binary_operation | Oor : binary_operation | Oxor : binary_operation | Oshl : binary_operation | Oshr : binary_operation | Oeq: binary_operation | One: binary_operation | Olt: binary_operation | Ogt: binary_operation | Ole: binary_operation | Oge: binary_operation.",
            "VernacInductive",
            "aa228865c2d10e73c9cc3e369e7fe8d82eb031e8"
        ],
        [
            "Inductive incr_or_decr : Type := Incr | Decr.",
            "VernacInductive",
            "21ed35f2be34d86b678729c64ae711dbd8faf02f"
        ],
        [
            "Inductive classify_cast_cases : Type := | cast_case_pointer | cast_case_i2i (sz2:intsize) (si2:signedness) | cast_case_f2f | cast_case_s2s | cast_case_f2s | cast_case_s2f | cast_case_i2f (si1: signedness) | cast_case_i2s (si1: signedness) | cast_case_f2i (sz2:intsize) (si2:signedness) | cast_case_s2i (sz2:intsize) (si2:signedness) | cast_case_l2l | cast_case_i2l (si1: signedness) | cast_case_l2i (sz2: intsize) (si2: signedness) | cast_case_l2f (si1: signedness) | cast_case_l2s (si1: signedness) | cast_case_f2l (si2:signedness) | cast_case_s2l (si2:signedness) | cast_case_i2bool | cast_case_l2bool | cast_case_f2bool | cast_case_s2bool | cast_case_struct (id1 id2: ident) | cast_case_union (id1 id2: ident) | cast_case_void | cast_case_default.",
            "VernacInductive",
            "a95bcd377b7c5c0d3dca130a22c2118da256ffc3"
        ],
        [
            "Definition classify_cast (tfrom tto: type) : classify_cast_cases := match tto, tfrom with | Tvoid, _ => cast_case_void | Tint IBool _ _, Tint _ _ _ => cast_case_i2bool | Tint IBool _ _, Tlong _ _ => cast_case_l2bool | Tint IBool _ _, Tfloat F64 _ => cast_case_f2bool | Tint IBool _ _, Tfloat F32 _ => cast_case_s2bool | Tint IBool _ _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => if Archi.ptr64 then cast_case_l2bool else cast_case_i2bool | Tint sz2 si2 _, Tint _ _ _ => if Archi.ptr64 then cast_case_i2i sz2 si2 else if intsize_eq sz2 I32 then cast_case_pointer else cast_case_i2i sz2 si2 | Tint sz2 si2 _, Tlong _ _ => cast_case_l2i sz2 si2 | Tint sz2 si2 _, Tfloat F64 _ => cast_case_f2i sz2 si2 | Tint sz2 si2 _, Tfloat F32 _ => cast_case_s2i sz2 si2 | Tint sz2 si2 _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => if Archi.ptr64 then cast_case_l2i sz2 si2 else if intsize_eq sz2 I32 then cast_case_pointer else cast_case_i2i sz2 si2 | Tlong _ _, Tlong _ _ => if Archi.ptr64 then cast_case_pointer else cast_case_l2l | Tlong _ _, Tint sz1 si1 _ => cast_case_i2l si1 | Tlong si2 _, Tfloat F64 _ => cast_case_f2l si2 | Tlong si2 _, Tfloat F32 _ => cast_case_s2l si2 | Tlong si2 _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => if Archi.ptr64 then cast_case_pointer else cast_case_i2l si2 | Tfloat F64 _, Tint sz1 si1 _ => cast_case_i2f si1 | Tfloat F32 _, Tint sz1 si1 _ => cast_case_i2s si1 | Tfloat F64 _, Tlong si1 _ => cast_case_l2f si1 | Tfloat F32 _, Tlong si1 _ => cast_case_l2s si1 | Tfloat F64 _, Tfloat F64 _ => cast_case_f2f | Tfloat F32 _, Tfloat F32 _ => cast_case_s2s | Tfloat F64 _, Tfloat F32 _ => cast_case_s2f | Tfloat F32 _, Tfloat F64 _ => cast_case_f2s | Tpointer _ _, Tint _ _ _ => if Archi.ptr64 then cast_case_i2l Unsigned else cast_case_pointer | Tpointer _ _, Tlong _ _ => if Archi.ptr64 then cast_case_pointer else cast_case_l2i I32 Unsigned | Tpointer _ _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => cast_case_pointer | Tstruct id2 _, Tstruct id1 _ => cast_case_struct id1 id2 | Tunion id2 _, Tunion id1 _ => cast_case_union id1 id2 | _, _ => cast_case_default end.",
            "VernacDefinition",
            "87daf1bb2ca07dfc6dae0c21d09e540e111e0d13"
        ],
        [
            "Definition cast_int_int (sz: intsize) (sg: signedness) (i: int) : int := match sz, sg with | I8, Signed => Int.sign_ext 8 i | I8, Unsigned => Int.zero_ext 8 i | I16, Signed => Int.sign_ext 16 i | I16, Unsigned => Int.zero_ext 16 i | I32, _ => i | IBool, _ => if Int.eq i Int.zero then Int.zero else Int.one end.",
            "VernacDefinition",
            "7eeb14925906c3e94543d1f240c52f86aba25674"
        ],
        [
            "Definition cast_int_float (si: signedness) (i: int) : float := match si with | Signed => Float.of_int i | Unsigned => Float.of_intu i end.",
            "VernacDefinition",
            "c19ad3909c3133055d064cf3edc3ad502d3424dc"
        ],
        [
            "Definition cast_float_int (si : signedness) (f: float) : option int := match si with | Signed => Float.to_int f | Unsigned => Float.to_intu f end.",
            "VernacDefinition",
            "f02853e4ca45498e3f206d8c4809c33e59c699be"
        ],
        [
            "Definition cast_int_single (si: signedness) (i: int) : float32 := match si with | Signed => Float32.of_int i | Unsigned => Float32.of_intu i end.",
            "VernacDefinition",
            "31286093436649b749671b89b5f44e7e58491954"
        ],
        [
            "Definition cast_single_int (si : signedness) (f: float32) : option int := match si with | Signed => Float32.to_int f | Unsigned => Float32.to_intu f end.",
            "VernacDefinition",
            "62885a096d1999a2d4fd0fe41532c86393f0aa92"
        ],
        [
            "Definition cast_int_long (si: signedness) (i: int) : int64 := match si with | Signed => Int64.repr (Int.signed i) | Unsigned => Int64.repr (Int.unsigned i) end.",
            "VernacDefinition",
            "10a7b238fc6f5a224be2b489153dd0cd724d9783"
        ],
        [
            "Definition cast_long_float (si: signedness) (i: int64) : float := match si with | Signed => Float.of_long i | Unsigned => Float.of_longu i end.",
            "VernacDefinition",
            "65110d76d7bdc3ed836ab65a049d80ab854554d2"
        ],
        [
            "Definition cast_long_single (si: signedness) (i: int64) : float32 := match si with | Signed => Float32.of_long i | Unsigned => Float32.of_longu i end.",
            "VernacDefinition",
            "77da09c9e4ea99c6f12d55bdc0a7901acfe6efe1"
        ],
        [
            "Definition cast_float_long (si : signedness) (f: float) : option int64 := match si with | Signed => Float.to_long f | Unsigned => Float.to_longu f end.",
            "VernacDefinition",
            "79a6f9215a312e9be933536f4da82cbff8cb9f67"
        ],
        [
            "Definition cast_single_long (si : signedness) (f: float32) : option int64 := match si with | Signed => Float32.to_long f | Unsigned => Float32.to_longu f end.",
            "VernacDefinition",
            "c6a603d0599604edd7007c6330b76c25bf565ef0"
        ],
        [
            "Definition sem_cast (v: val) (t1 t2: type) (m: mem): option val := match classify_cast t1 t2 with | cast_case_pointer => match v with | Vptr _ _ => Some v | Vint _ => if Archi.ptr64 then None else Some v | Vlong _ => if Archi.ptr64 then Some v else None | _ => None end | cast_case_i2i sz2 si2 => match v with | Vint i => Some (Vint (cast_int_int sz2 si2 i)) | _ => None end | cast_case_f2f => match v with | Vfloat f => Some (Vfloat f) | _ => None end | cast_case_s2s => match v with | Vsingle f => Some (Vsingle f) | _ => None end | cast_case_s2f => match v with | Vsingle f => Some (Vfloat (Float.of_single f)) | _ => None end | cast_case_f2s => match v with | Vfloat f => Some (Vsingle (Float.to_single f)) | _ => None end | cast_case_i2f si1 => match v with | Vint i => Some (Vfloat (cast_int_float si1 i)) | _ => None end | cast_case_i2s si1 => match v with | Vint i => Some (Vsingle (cast_int_single si1 i)) | _ => None end | cast_case_f2i sz2 si2 => match v with | Vfloat f => match cast_float_int si2 f with | Some i => Some (Vint (cast_int_int sz2 si2 i)) | None => None end | _ => None end | cast_case_s2i sz2 si2 => match v with | Vsingle f => match cast_single_int si2 f with | Some i => Some (Vint (cast_int_int sz2 si2 i)) | None => None end | _ => None end | cast_case_i2bool => match v with | Vint n => Some(Vint(if Int.eq n Int.zero then Int.zero else Int.one)) | Vptr b ofs => if Archi.ptr64 then None else if Mem.weak_valid_pointer m b (Ptrofs.unsigned ofs) then Some Vone else None | _ => None end | cast_case_l2bool => match v with | Vlong n => Some(Vint(if Int64.eq n Int64.zero then Int.zero else Int.one)) | Vptr b ofs => if negb Archi.ptr64 then None else if Mem.weak_valid_pointer m b (Ptrofs.unsigned ofs) then Some Vone else None | _ => None end | cast_case_f2bool => match v with | Vfloat f => Some(Vint(if Float.cmp Ceq f Float.zero then Int.zero else Int.one)) | _ => None end | cast_case_s2bool => match v with | Vsingle f => Some(Vint(if Float32.cmp Ceq f Float32.zero then Int.zero else Int.one)) | _ => None end | cast_case_l2l => match v with | Vlong n => Some (Vlong n) | _ => None end | cast_case_i2l si => match v with | Vint n => Some(Vlong (cast_int_long si n)) | _ => None end | cast_case_l2i sz si => match v with | Vlong n => Some(Vint (cast_int_int sz si (Int.repr (Int64.unsigned n)))) | _ => None end | cast_case_l2f si1 => match v with | Vlong i => Some (Vfloat (cast_long_float si1 i)) | _ => None end | cast_case_l2s si1 => match v with | Vlong i => Some (Vsingle (cast_long_single si1 i)) | _ => None end | cast_case_f2l si2 => match v with | Vfloat f => match cast_float_long si2 f with | Some i => Some (Vlong i) | None => None end | _ => None end | cast_case_s2l si2 => match v with | Vsingle f => match cast_single_long si2 f with | Some i => Some (Vlong i) | None => None end | _ => None end | cast_case_struct id1 id2 => match v with | Vptr b ofs => if ident_eq id1 id2 then Some v else None | _ => None end | cast_case_union id1 id2 => match v with | Vptr b ofs => if ident_eq id1 id2 then Some v else None | _ => None end | cast_case_void => Some v | cast_case_default => None end.",
            "VernacDefinition",
            "1c7ab1866b9206ed4b7860df3576519bb1496cde"
        ],
        [
            "Inductive classify_bool_cases : Type := | bool_case_i | bool_case_l | bool_case_f | bool_case_s | bool_default.",
            "VernacInductive",
            "0d0911d172d52a77b044e4c9e310f07d56cba2de"
        ],
        [
            "Definition classify_bool (ty: type) : classify_bool_cases := match typeconv ty with | Tint _ _ _ => bool_case_i | Tpointer _ _ => if Archi.ptr64 then bool_case_l else bool_case_i | Tfloat F64 _ => bool_case_f | Tfloat F32 _ => bool_case_s | Tlong _ _ => bool_case_l | _ => bool_default end.",
            "VernacDefinition",
            "efff30a58cc5716d47383a0249e6d541a5d33618"
        ],
        [
            "Definition bool_val (v: val) (t: type) (m: mem) : option bool := match classify_bool t with | bool_case_i => match v with | Vint n => Some (negb (Int.eq n Int.zero)) | Vptr b ofs => if Archi.ptr64 then None else if Mem.weak_valid_pointer m b (Ptrofs.unsigned ofs) then Some true else None | _ => None end | bool_case_l => match v with | Vlong n => Some (negb (Int64.eq n Int64.zero)) | Vptr b ofs => if negb Archi.ptr64 then None else if Mem.weak_valid_pointer m b (Ptrofs.unsigned ofs) then Some true else None | _ => None end | bool_case_f => match v with | Vfloat f => Some (negb (Float.cmp Ceq f Float.zero)) | _ => None end | bool_case_s => match v with | Vsingle f => Some (negb (Float32.cmp Ceq f Float32.zero)) | _ => None end | bool_default => None end.",
            "VernacDefinition",
            "4aab0e540e35a0b5c4fdf6a957419a7e6e47feee"
        ],
        [
            "Definition sem_notbool (v: val) (ty: type) (m: mem): option val := option_map (fun b => Val.of_bool (negb b)) (bool_val v ty m).",
            "VernacDefinition",
            "9a8a84633e8351adcae645f62acd1a4cb61c8559"
        ],
        [
            "Inductive classify_neg_cases : Type := | neg_case_i(s: signedness) | neg_case_f | neg_case_s | neg_case_l(s: signedness) | neg_default.",
            "VernacInductive",
            "da26295ec8fc3fcb4ce7f0d32a98d5448788bb27"
        ],
        [
            "Definition classify_neg (ty: type) : classify_neg_cases := match ty with | Tint I32 Unsigned _ => neg_case_i Unsigned | Tint _ _ _ => neg_case_i Signed | Tfloat F64 _ => neg_case_f | Tfloat F32 _ => neg_case_s | Tlong si _ => neg_case_l si | _ => neg_default end.",
            "VernacDefinition",
            "de2b6789566e264dba52a79615a443386d76e5f0"
        ],
        [
            "Definition sem_neg (v: val) (ty: type) : option val := match classify_neg ty with | neg_case_i sg => match v with | Vint n => Some (Vint (Int.neg n)) | _ => None end | neg_case_f => match v with | Vfloat f => Some (Vfloat (Float.neg f)) | _ => None end | neg_case_s => match v with | Vsingle f => Some (Vsingle (Float32.neg f)) | _ => None end | neg_case_l sg => match v with | Vlong n => Some (Vlong (Int64.neg n)) | _ => None end | neg_default => None end.",
            "VernacDefinition",
            "8586c92e2f0758d95c0576dd1af11dc91a5ed708"
        ],
        [
            "Definition sem_absfloat (v: val) (ty: type) : option val := match classify_neg ty with | neg_case_i sg => match v with | Vint n => Some (Vfloat (Float.abs (cast_int_float sg n))) | _ => None end | neg_case_f => match v with | Vfloat f => Some (Vfloat (Float.abs f)) | _ => None end | neg_case_s => match v with | Vsingle f => Some (Vfloat (Float.abs (Float.of_single f))) | _ => None end | neg_case_l sg => match v with | Vlong n => Some (Vfloat (Float.abs (cast_long_float sg n))) | _ => None end | neg_default => None end.",
            "VernacDefinition",
            "f30624b6f146191e20cceea86f1d950615fea570"
        ],
        [
            "Inductive classify_notint_cases : Type := | notint_case_i(s: signedness) | notint_case_l(s: signedness) | notint_default.",
            "VernacInductive",
            "c9c25f6a592be533030318dd046cbf2c580d3941"
        ],
        [
            "Definition classify_notint (ty: type) : classify_notint_cases := match ty with | Tint I32 Unsigned _ => notint_case_i Unsigned | Tint _ _ _ => notint_case_i Signed | Tlong si _ => notint_case_l si | _ => notint_default end.",
            "VernacDefinition",
            "f2b4b3a845301be5f80b1440190ee103b9765366"
        ],
        [
            "Definition sem_notint (v: val) (ty: type): option val := match classify_notint ty with | notint_case_i sg => match v with | Vint n => Some (Vint (Int.not n)) | _ => None end | notint_case_l sg => match v with | Vlong n => Some (Vlong (Int64.not n)) | _ => None end | notint_default => None end.",
            "VernacDefinition",
            "d9119b2668423147813bc0685e9b5c512fe1fd6d"
        ],
        [
            "Inductive binarith_cases: Type := | bin_case_i (s: signedness) | bin_case_l (s: signedness) | bin_case_f | bin_case_s | bin_default.",
            "VernacInductive",
            "f76ca24ca2f30676340a77d526cfd7902dcf7033"
        ],
        [
            "Definition classify_binarith (ty1: type) (ty2: type) : binarith_cases := match ty1, ty2 with | Tint I32 Unsigned _, Tint _ _ _ => bin_case_i Unsigned | Tint _ _ _, Tint I32 Unsigned _ => bin_case_i Unsigned | Tint _ _ _, Tint _ _ _ => bin_case_i Signed | Tlong Signed _, Tlong Signed _ => bin_case_l Signed | Tlong _ _, Tlong _ _ => bin_case_l Unsigned | Tlong sg _, Tint _ _ _ => bin_case_l sg | Tint _ _ _, Tlong sg _ => bin_case_l sg | Tfloat F32 _, Tfloat F32 _ => bin_case_s | Tfloat _ _, Tfloat _ _ => bin_case_f | Tfloat F64 _, (Tint _ _ _ | Tlong _ _) => bin_case_f | (Tint _ _ _ | Tlong _ _), Tfloat F64 _ => bin_case_f | Tfloat F32 _, (Tint _ _ _ | Tlong _ _) => bin_case_s | (Tint _ _ _ | Tlong _ _), Tfloat F32 _ => bin_case_s | _, _ => bin_default end.",
            "VernacDefinition",
            "1326036290641bb3c6cca12ff6c610726c1b725b"
        ],
        [
            "Definition binarith_type (c: binarith_cases) : type := match c with | bin_case_i sg => Tint I32 sg noattr | bin_case_l sg => Tlong sg noattr | bin_case_f => Tfloat F64 noattr | bin_case_s => Tfloat F32 noattr | bin_default => Tvoid end.",
            "VernacDefinition",
            "07d2b11619d7fc0af57a5b613992a58496e31b25"
        ],
        [
            "Definition sem_binarith (sem_int: signedness -> int -> int -> option val) (sem_long: signedness -> int64 -> int64 -> option val) (sem_float: float -> float -> option val) (sem_single: float32 -> float32 -> option val) (v1: val) (t1: type) (v2: val) (t2: type) (m: mem): option val := let c := classify_binarith t1 t2 in let t := binarith_type c in match sem_cast v1 t1 t m with | None => None | Some v1' => match sem_cast v2 t2 t m with | None => None | Some v2' => match c with | bin_case_i sg => match v1', v2' with | Vint n1, Vint n2 => sem_int sg n1 n2 | _, _ => None end | bin_case_f => match v1', v2' with | Vfloat n1, Vfloat n2 => sem_float n1 n2 | _, _ => None end | bin_case_s => match v1', v2' with | Vsingle n1, Vsingle n2 => sem_single n1 n2 | _, _ => None end | bin_case_l sg => match v1', v2' with | Vlong n1, Vlong n2 => sem_long sg n1 n2 | _, _ => None end | bin_default => None end end end.",
            "VernacDefinition",
            "15fa2766b0d9f7a63b0a7d4318c8692bf00ffefd"
        ],
        [
            "Inductive classify_add_cases : Type := | add_case_pi (ty: type) (si: signedness) | add_case_pl (ty: type) | add_case_ip (si: signedness) (ty: type) | add_case_lp (ty: type) | add_default.",
            "VernacInductive",
            "d8c6aca492daa2181d6290aba9a9cd2a28e47963"
        ],
        [
            "Definition classify_add (ty1: type) (ty2: type) := match typeconv ty1, typeconv ty2 with | Tpointer ty _, Tint _ si _ => add_case_pi ty si | Tpointer ty _, Tlong _ _ => add_case_pl ty | Tint _ si _, Tpointer ty _ => add_case_ip si ty | Tlong _ _, Tpointer ty _ => add_case_lp ty | _, _ => add_default end.",
            "VernacDefinition",
            "c8d09c5b1758a8fcea381086d3047dca18b5070a"
        ],
        [
            "Definition ptrofs_of_int (si: signedness) (n: int) : ptrofs := match si with | Signed => Ptrofs.of_ints n | Unsigned => Ptrofs.of_intu n end.",
            "VernacDefinition",
            "0badc201a5957f33038d37d50bee7286d6830d14"
        ],
        [
            "Definition sem_add_ptr_int (cenv: composite_env) (ty: type) (si: signedness) (v1 v2: val): option val := match v1, v2 with | Vptr b1 ofs1, Vint n2 => let n2 := ptrofs_of_int si n2 in Some (Vptr b1 (Ptrofs.add ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof cenv ty)) n2))) | Vint n1, Vint n2 => if Archi.ptr64 then None else Some (Vint (Int.add n1 (Int.mul (Int.repr (sizeof cenv ty)) n2))) | Vlong n1, Vint n2 => let n2 := cast_int_long si n2 in if Archi.ptr64 then Some (Vlong (Int64.add n1 (Int64.mul (Int64.repr (sizeof cenv ty)) n2))) else None | _, _ => None end.",
            "VernacDefinition",
            "cc1565dafdb27e2602211eb5eaf9e4151f91bdd4"
        ],
        [
            "Definition sem_add_ptr_long (cenv: composite_env) (ty: type) (v1 v2: val): option val := match v1, v2 with | Vptr b1 ofs1, Vlong n2 => let n2 := Ptrofs.of_int64 n2 in Some (Vptr b1 (Ptrofs.add ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof cenv ty)) n2))) | Vint n1, Vlong n2 => let n2 := Int.repr (Int64.unsigned n2) in if Archi.ptr64 then None else Some (Vint (Int.add n1 (Int.mul (Int.repr (sizeof cenv ty)) n2))) | Vlong n1, Vlong n2 => if Archi.ptr64 then Some (Vlong (Int64.add n1 (Int64.mul (Int64.repr (sizeof cenv ty)) n2))) else None | _, _ => None end.",
            "VernacDefinition",
            "3eaff499b5b01d2c082098b2b5f94090e2ea4911"
        ],
        [
            "Definition sem_add (cenv: composite_env) (v1:val) (t1:type) (v2: val) (t2:type) (m: mem): option val := match classify_add t1 t2 with | add_case_pi ty si => sem_add_ptr_int cenv ty si v1 v2 | add_case_pl ty => sem_add_ptr_long cenv ty v1 v2 | add_case_ip si ty => sem_add_ptr_int cenv ty si v2 v1 | add_case_lp ty => sem_add_ptr_long cenv ty v2 v1 | add_default => sem_binarith (fun sg n1 n2 => Some(Vint(Int.add n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.add n1 n2))) (fun n1 n2 => Some(Vfloat(Float.add n1 n2))) (fun n1 n2 => Some(Vsingle(Float32.add n1 n2))) v1 t1 v2 t2 m end.",
            "VernacDefinition",
            "c66a726ae176e5251f535c320f65df04cc3bd596"
        ],
        [
            "Inductive classify_sub_cases : Type := | sub_case_pi (ty: type) (si: signedness) | sub_case_pp (ty: type) | sub_case_pl (ty: type) | sub_default.",
            "VernacInductive",
            "ebcf8fd135d851d864819be67df47116813fb366"
        ],
        [
            "Definition classify_sub (ty1: type) (ty2: type) := match typeconv ty1, typeconv ty2 with | Tpointer ty _, Tint _ si _ => sub_case_pi ty si | Tpointer ty _ , Tpointer _ _ => sub_case_pp ty | Tpointer ty _, Tlong _ _ => sub_case_pl ty | _, _ => sub_default end.",
            "VernacDefinition",
            "c50eda6418dfbd322becbf4e6a341bd65903b412"
        ],
        [
            "Definition sem_sub (cenv: composite_env) (v1:val) (t1:type) (v2: val) (t2:type) (m:mem): option val := match classify_sub t1 t2 with | sub_case_pi ty si => match v1, v2 with | Vptr b1 ofs1, Vint n2 => let n2 := ptrofs_of_int si n2 in Some (Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof cenv ty)) n2))) | Vint n1, Vint n2 => if Archi.ptr64 then None else Some (Vint (Int.sub n1 (Int.mul (Int.repr (sizeof cenv ty)) n2))) | Vlong n1, Vint n2 => let n2 := cast_int_long si n2 in if Archi.ptr64 then Some (Vlong (Int64.sub n1 (Int64.mul (Int64.repr (sizeof cenv ty)) n2))) else None | _, _ => None end | sub_case_pl ty => match v1, v2 with | Vptr b1 ofs1, Vlong n2 => let n2 := Ptrofs.of_int64 n2 in Some (Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof cenv ty)) n2))) | Vint n1, Vlong n2 => let n2 := Int.repr (Int64.unsigned n2) in if Archi.ptr64 then None else Some (Vint (Int.sub n1 (Int.mul (Int.repr (sizeof cenv ty)) n2))) | Vlong n1, Vlong n2 => if Archi.ptr64 then Some (Vlong (Int64.sub n1 (Int64.mul (Int64.repr (sizeof cenv ty)) n2))) else None | _, _ => None end | sub_case_pp ty => match v1,v2 with | Vptr b1 ofs1, Vptr b2 ofs2 => if eq_block b1 b2 then let sz := sizeof cenv ty in if zlt 0 sz && zle sz Ptrofs.max_signed then Some (Vptrofs (Ptrofs.divs (Ptrofs.sub ofs1 ofs2) (Ptrofs.repr sz))) else None else None | _, _ => None end | sub_default => sem_binarith (fun sg n1 n2 => Some(Vint(Int.sub n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.sub n1 n2))) (fun n1 n2 => Some(Vfloat(Float.sub n1 n2))) (fun n1 n2 => Some(Vsingle(Float32.sub n1 n2))) v1 t1 v2 t2 m end.",
            "VernacDefinition",
            "f178847b2e74eac596cc4969f2f62c208904a48b"
        ],
        [
            "Definition sem_mul (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => Some(Vint(Int.mul n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.mul n1 n2))) (fun n1 n2 => Some(Vfloat(Float.mul n1 n2))) (fun n1 n2 => Some(Vsingle(Float32.mul n1 n2))) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "91a78c5c91d217b7f0d136cf06911b3705548b73"
        ],
        [
            "Definition sem_div (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => match sg with | Signed => if Int.eq n2 Int.zero || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone then None else Some(Vint(Int.divs n1 n2)) | Unsigned => if Int.eq n2 Int.zero then None else Some(Vint(Int.divu n1 n2)) end) (fun sg n1 n2 => match sg with | Signed => if Int64.eq n2 Int64.zero || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone then None else Some(Vlong(Int64.divs n1 n2)) | Unsigned => if Int64.eq n2 Int64.zero then None else Some(Vlong(Int64.divu n1 n2)) end) (fun n1 n2 => Some(Vfloat(Float.div n1 n2))) (fun n1 n2 => Some(Vsingle(Float32.div n1 n2))) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "4200149b07be7d0c141ef3b0287ae39d8ef70a7f"
        ],
        [
            "Definition sem_mod (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => match sg with | Signed => if Int.eq n2 Int.zero || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone then None else Some(Vint(Int.mods n1 n2)) | Unsigned => if Int.eq n2 Int.zero then None else Some(Vint(Int.modu n1 n2)) end) (fun sg n1 n2 => match sg with | Signed => if Int64.eq n2 Int64.zero || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone then None else Some(Vlong(Int64.mods n1 n2)) | Unsigned => if Int64.eq n2 Int64.zero then None else Some(Vlong(Int64.modu n1 n2)) end) (fun n1 n2 => None) (fun n1 n2 => None) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "6c50c472749a4ee558a8fcc2dd0afa5ff3926280"
        ],
        [
            "Definition sem_and (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => Some(Vint(Int.and n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.and n1 n2))) (fun n1 n2 => None) (fun n1 n2 => None) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "11e30ffced40228c60f4d04dd3c017f13693070d"
        ],
        [
            "Definition sem_or (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => Some(Vint(Int.or n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.or n1 n2))) (fun n1 n2 => None) (fun n1 n2 => None) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "73ffdad96f94691d11ed0cf404e794c6aea9a31b"
        ],
        [
            "Definition sem_xor (v1:val) (t1:type) (v2: val) (t2:type) (m:mem) : option val := sem_binarith (fun sg n1 n2 => Some(Vint(Int.xor n1 n2))) (fun sg n1 n2 => Some(Vlong(Int64.xor n1 n2))) (fun n1 n2 => None) (fun n1 n2 => None) v1 t1 v2 t2 m.",
            "VernacDefinition",
            "6ecea400f25b9e2cd7e4cc570357cb93c392a0b8"
        ],
        [
            "Inductive classify_shift_cases : Type:= | shift_case_ii(s: signedness) | shift_case_ll(s: signedness) | shift_case_il(s: signedness) | shift_case_li(s: signedness) | shift_default.",
            "VernacInductive",
            "534d42a39f874a3c5f83bd3466dc32b1450974c0"
        ],
        [
            "Definition classify_shift (ty1: type) (ty2: type) := match typeconv ty1, typeconv ty2 with | Tint I32 Unsigned _, Tint _ _ _ => shift_case_ii Unsigned | Tint _ _ _, Tint _ _ _ => shift_case_ii Signed | Tint I32 Unsigned _, Tlong _ _ => shift_case_il Unsigned | Tint _ _ _, Tlong _ _ => shift_case_il Signed | Tlong s _, Tint _ _ _ => shift_case_li s | Tlong s _, Tlong _ _ => shift_case_ll s | _,_ => shift_default end.",
            "VernacDefinition",
            "54c3556cd8dac7b89ddc2b80c08208b07d49a408"
        ],
        [
            "Definition sem_shift (sem_int: signedness -> int -> int -> int) (sem_long: signedness -> int64 -> int64 -> int64) (v1: val) (t1: type) (v2: val) (t2: type) : option val := match classify_shift t1 t2 with | shift_case_ii sg => match v1, v2 with | Vint n1, Vint n2 => if Int.ltu n2 Int.iwordsize then Some(Vint(sem_int sg n1 n2)) else None | _, _ => None end | shift_case_il sg => match v1, v2 with | Vint n1, Vlong n2 => if Int64.ltu n2 (Int64.repr 32) then Some(Vint(sem_int sg n1 (Int64.loword n2))) else None | _, _ => None end | shift_case_li sg => match v1, v2 with | Vlong n1, Vint n2 => if Int.ltu n2 Int64.iwordsize' then Some(Vlong(sem_long sg n1 (Int64.repr (Int.unsigned n2)))) else None | _, _ => None end | shift_case_ll sg => match v1, v2 with | Vlong n1, Vlong n2 => if Int64.ltu n2 Int64.iwordsize then Some(Vlong(sem_long sg n1 n2)) else None | _, _ => None end | shift_default => None end.",
            "VernacDefinition",
            "504bc4b61f7230a0110a465b611314716ba84188"
        ],
        [
            "Definition sem_shl (v1:val) (t1:type) (v2: val) (t2:type) : option val := sem_shift (fun sg n1 n2 => Int.shl n1 n2) (fun sg n1 n2 => Int64.shl n1 n2) v1 t1 v2 t2.",
            "VernacDefinition",
            "fade7e95c8d64276a09a698eedc565d70314da3f"
        ],
        [
            "Definition sem_shr (v1:val) (t1:type) (v2: val) (t2:type) : option val := sem_shift (fun sg n1 n2 => match sg with Signed => Int.shr n1 n2 | Unsigned => Int.shru n1 n2 end) (fun sg n1 n2 => match sg with Signed => Int64.shr n1 n2 | Unsigned => Int64.shru n1 n2 end) v1 t1 v2 t2.",
            "VernacDefinition",
            "dc3bb42d1a7c3811d88f41d926ed7946d1cbdc47"
        ],
        [
            "Inductive classify_cmp_cases : Type := | cmp_case_pp | cmp_case_pi (si: signedness) | cmp_case_ip (si: signedness) | cmp_case_pl | cmp_case_lp | cmp_default.",
            "VernacInductive",
            "cc6fa521de8abc7f412cb1cd05ad782b06a35bfa"
        ],
        [
            "Definition classify_cmp (ty1: type) (ty2: type) := match typeconv ty1, typeconv ty2 with | Tpointer _ _ , Tpointer _ _ => cmp_case_pp | Tpointer _ _ , Tint _ si _ => cmp_case_pi si | Tint _ si _, Tpointer _ _ => cmp_case_ip si | Tpointer _ _ , Tlong _ _ => cmp_case_pl | Tlong _ _ , Tpointer _ _ => cmp_case_lp | _, _ => cmp_default end.",
            "VernacDefinition",
            "bde9805f35f9a7128e47ad61c2d569f52ba60d07"
        ],
        [
            "Definition cmp_ptr (m: mem) (c: comparison) (v1 v2: val): option val := option_map Val.of_bool (if Archi.ptr64 then Val.cmplu_bool (Mem.valid_pointer m) c v1 v2 else Val.cmpu_bool (Mem.valid_pointer m) c v1 v2).",
            "VernacDefinition",
            "224d2336f6d4b93c406ab92e568145d3826db283"
        ],
        [
            "Definition sem_cmp (c:comparison) (v1: val) (t1: type) (v2: val) (t2: type) (m: mem): option val := match classify_cmp t1 t2 with | cmp_case_pp => cmp_ptr m c v1 v2 | cmp_case_pi si => match v2 with | Vint n2 => let v2' := Vptrofs (ptrofs_of_int si n2) in cmp_ptr m c v1 v2' | Vptr b ofs => if Archi.ptr64 then None else cmp_ptr m c v1 v2 | _ => None end | cmp_case_ip si => match v1 with | Vint n1 => let v1' := Vptrofs (ptrofs_of_int si n1) in cmp_ptr m c v1' v2 | Vptr b ofs => if Archi.ptr64 then None else cmp_ptr m c v1 v2 | _ => None end | cmp_case_pl => match v2 with | Vlong n2 => let v2' := Vptrofs (Ptrofs.of_int64 n2) in cmp_ptr m c v1 v2' | Vptr b ofs => if Archi.ptr64 then cmp_ptr m c v1 v2 else None | _ => None end | cmp_case_lp => match v1 with | Vlong n1 => let v1' := Vptrofs (Ptrofs.of_int64 n1) in cmp_ptr m c v1' v2 | Vptr b ofs => if Archi.ptr64 then cmp_ptr m c v1 v2 else None | _ => None end | cmp_default => sem_binarith (fun sg n1 n2 => Some(Val.of_bool(match sg with Signed => Int.cmp c n1 n2 | Unsigned => Int.cmpu c n1 n2 end))) (fun sg n1 n2 => Some(Val.of_bool(match sg with Signed => Int64.cmp c n1 n2 | Unsigned => Int64.cmpu c n1 n2 end))) (fun n1 n2 => Some(Val.of_bool(Float.cmp c n1 n2))) (fun n1 n2 => Some(Val.of_bool(Float32.cmp c n1 n2))) v1 t1 v2 t2 m end.",
            "VernacDefinition",
            "e6dedbe05fe45e1e7cae9fec67caaad3113538b7"
        ],
        [
            "Inductive classify_fun_cases : Type := | fun_case_f (targs: typelist) (tres: type) (cc: calling_convention) | fun_default.",
            "VernacInductive",
            "ca276f5e2223b37ae3b8c670fdc3041fa32f936a"
        ],
        [
            "Definition classify_fun (ty: type) := match ty with | Tfunction args res cc => fun_case_f args res cc | Tpointer (Tfunction args res cc) _ => fun_case_f args res cc | _ => fun_default end.",
            "VernacDefinition",
            "0d77c05bdd56552e4ab3c21997f6e7a3d4ce463d"
        ],
        [
            "Inductive classify_switch_cases : Type := | switch_case_i | switch_case_l | switch_default.",
            "VernacInductive",
            "35cd47e2dbc1e53f07076b35dd70ceff05d0daf7"
        ],
        [
            "Definition classify_switch (ty: type) := match ty with | Tint _ _ _ => switch_case_i | Tlong _ _ => switch_case_l | _ => switch_default end.",
            "VernacDefinition",
            "a2f34996f5991fdadfaf084f01affb6bc9312fa5"
        ],
        [
            "Definition sem_switch_arg (v: val) (ty: type): option Z := match classify_switch ty with | switch_case_i => match v with Vint n => Some(Int.unsigned n) | _ => None end | switch_case_l => match v with Vlong n => Some(Int64.unsigned n) | _ => None end | switch_default => None end.",
            "VernacDefinition",
            "6ec40c4f7363a1cce1d7b1797b795cbfd459d49b"
        ],
        [
            "Definition sem_unary_operation (op: unary_operation) (v: val) (ty: type) (m: mem): option val := match op with | Onotbool => sem_notbool v ty m | Onotint => sem_notint v ty | Oneg => sem_neg v ty | Oabsfloat => sem_absfloat v ty end.",
            "VernacDefinition",
            "f2bd6dda7e117ac039f6f2eb0ae146ab7d32c895"
        ],
        [
            "Definition sem_binary_operation (cenv: composite_env) (op: binary_operation) (v1: val) (t1: type) (v2: val) (t2:type) (m: mem): option val := match op with | Oadd => sem_add cenv v1 t1 v2 t2 m | Osub => sem_sub cenv v1 t1 v2 t2 m | Omul => sem_mul v1 t1 v2 t2 m | Omod => sem_mod v1 t1 v2 t2 m | Odiv => sem_div v1 t1 v2 t2 m | Oand => sem_and v1 t1 v2 t2 m | Oor => sem_or v1 t1 v2 t2 m | Oxor => sem_xor v1 t1 v2 t2 m | Oshl => sem_shl v1 t1 v2 t2 | Oshr => sem_shr v1 t1 v2 t2 | Oeq => sem_cmp Ceq v1 t1 v2 t2 m | One => sem_cmp Cne v1 t1 v2 t2 m | Olt => sem_cmp Clt v1 t1 v2 t2 m | Ogt => sem_cmp Cgt v1 t1 v2 t2 m | Ole => sem_cmp Cle v1 t1 v2 t2 m | Oge => sem_cmp Cge v1 t1 v2 t2 m end.",
            "VernacDefinition",
            "e52bf563836ee017f5823a160125ec0a6eb67bf8"
        ],
        [
            "Definition sem_incrdecr (cenv: composite_env) (id: incr_or_decr) (v: val) (ty: type) (m: mem) := match id with | Incr => sem_add cenv v ty (Vint Int.one) type_int32s m | Decr => sem_sub cenv v ty (Vint Int.one) type_int32s m end.",
            "VernacDefinition",
            "cbf2baa2a755e6caed2b53f2154a0800a4210f57"
        ],
        [
            "Definition incrdecr_type (ty: type) := match typeconv ty with | Tpointer ty a => Tpointer ty a | Tint sz sg a => Tint sz sg noattr | Tlong sg a => Tlong sg noattr | Tfloat sz a => Tfloat sz noattr | _ => Tvoid end.",
            "VernacDefinition",
            "f2f0d85d9bdbfcbea0b07f205e5a2236d48ba176"
        ],
        [
            "Section GENERIC_INJECTION.",
            "VernacBeginSection",
            "46e8c36008862e5b4b1d551899584622c88508aa"
        ],
        [
            "Variable f: meminj.",
            "VernacAssumption",
            "44a48b00b0f0ee37d717c8c4a76633ef435edbcb"
        ],
        [
            "Variables m m': mem.",
            "VernacAssumption",
            "c5780df19097e49bbf0449e5708caf5460bdc821"
        ],
        [
            "Hypothesis valid_pointer_inj: forall b1 ofs b2 delta, f b1 = Some(b2, delta) -> Mem.valid_pointer m b1 (Ptrofs.unsigned ofs) = true -> Mem.valid_pointer m' b2 (Ptrofs.unsigned (Ptrofs.add ofs (Ptrofs.repr delta))) = true.",
            "VernacAssumption",
            "d8880f14c351f725f5746646abe8e2837f67af01"
        ],
        [
            "Hypothesis weak_valid_pointer_inj: forall b1 ofs b2 delta, f b1 = Some(b2, delta) -> Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs) = true -> Mem.weak_valid_pointer m' b2 (Ptrofs.unsigned (Ptrofs.add ofs (Ptrofs.repr delta))) = true.",
            "VernacAssumption",
            "a330a4f6a8b8dfbfe0103b24208d108b43a3a1f1"
        ],
        [
            "Hypothesis weak_valid_pointer_no_overflow: forall b1 ofs b2 delta, f b1 = Some(b2, delta) -> Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs) = true -> 0 <= Ptrofs.unsigned ofs + Ptrofs.unsigned (Ptrofs.repr delta) <= Ptrofs.max_unsigned.",
            "VernacAssumption",
            "7073b3827311c5318b6cb192ba1163561d1ab4bb"
        ],
        [
            "Hypothesis valid_different_pointers_inj: forall b1 ofs1 b2 ofs2 b1' delta1 b2' delta2, b1 <> b2 -> Mem.valid_pointer m b1 (Ptrofs.unsigned ofs1) = true -> Mem.valid_pointer m b2 (Ptrofs.unsigned ofs2) = true -> f b1 = Some (b1', delta1) -> f b2 = Some (b2', delta2) -> b1' <> b2' \\/ Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta1)) <> Ptrofs.unsigned (Ptrofs.add ofs2 (Ptrofs.repr delta2)).",
            "VernacAssumption",
            "db8be0c2935127612f52c3a67c4cb10a0efd0f88"
        ],
        [
            "Remark val_inject_vtrue: forall f, Val.inject f Vtrue Vtrue.",
            "VernacStartTheoremProof",
            "4def4bdc9de1dde430d10678676c99983b645f26"
        ],
        [
            "unfold Vtrue; auto.",
            "VernacExtend",
            "0465922508bbf311680c5461592525dc5df4029a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark val_inject_vfalse: forall f, Val.inject f Vfalse Vfalse.",
            "VernacStartTheoremProof",
            "3dee491aa0b22033438aab7e6b17b9b581a6a086"
        ],
        [
            "unfold Vfalse; auto.",
            "VernacExtend",
            "9bd35533b26d26570f069b2315cb15c22a6eb764"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark val_inject_of_bool: forall f b, Val.inject f (Val.of_bool b) (Val.of_bool b).",
            "VernacStartTheoremProof",
            "bf19a6d88079e347fea5136677663fe3ca3fb14e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Val.of_bool.",
            "VernacExtend",
            "603644c0a123d361f9fce2e02ad27a24b46945cd"
        ],
        [
            "destruct b; [apply val_inject_vtrue|apply val_inject_vfalse].",
            "VernacExtend",
            "7e2083c32e6dc7d9bb719e2e761ee7d87d1d1b7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark val_inject_vptrofs: forall n, Val.inject f (Vptrofs n) (Vptrofs n).",
            "VernacStartTheoremProof",
            "06fe00abeb58d4327e372f554372a917ead03225"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Vptrofs.",
            "VernacExtend",
            "056c978d377c295969711a6836029342e12bc535"
        ],
        [
            "destruct Archi.ptr64; auto.",
            "VernacExtend",
            "a9cd18b10a2cc14dcbdb18cf89de664cd0fb419f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve val_inject_vtrue val_inject_vfalse val_inject_of_bool val_inject_vptrofs.",
            "VernacHints",
            "e2d369aeaf962e54c60c8d566d2f303ca1d6f86f"
        ],
        [
            "Ltac TrivialInject := match goal with | [ H: None = Some _ |- _ ] => discriminate | [ H: Some _ = Some _ |- _ ] => inv H; TrivialInject | [ H: match ?x with Some _ => _ | None => _ end = Some _ |- _ ] => destruct x; TrivialInject | [ H: match ?x with true => _ | false => _ end = Some _ |- _ ] => destruct x eqn:?; TrivialInject | [ |- exists v', Some ?v = Some v' /\\ _ ] => exists v; split; auto | _ => idtac end.",
            "VernacExtend",
            "f3c16ebfac140c1d2c566e442b01d0024d5e9a7e"
        ],
        [
            "Lemma sem_cast_inj: forall v1 ty1 ty v tv1, sem_cast v1 ty1 ty m = Some v -> Val.inject f v1 tv1 -> exists tv, sem_cast tv1 ty1 ty m'= Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "eb6186dc0adb2b51e8ea83b250b54729daf998d8"
        ],
        [
            "unfold sem_cast; intros; destruct (classify_cast ty1 ty); inv H0; TrivialInject.",
            "VernacExtend",
            "f2bfaf18bb1930db5feea789c9029db326fc7bdc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "erewrite weak_valid_pointer_inj by eauto.",
            "VernacExtend",
            "5d9613b48abc378936ef4385d1a6732d4f7d907a"
        ],
        [
            "TrivialInject.",
            "VernacExtend",
            "37a67f918db97e56681a655250706112cbaab021"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "erewrite weak_valid_pointer_inj by eauto.",
            "VernacExtend",
            "5d9613b48abc378936ef4385d1a6732d4f7d907a"
        ],
        [
            "TrivialInject.",
            "VernacExtend",
            "37a67f918db97e56681a655250706112cbaab021"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct (ident_eq id1 id2); TrivialInject.",
            "VernacExtend",
            "85685dc6f743af203392b5d1690c1956c12e69cc"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct (ident_eq id1 id2); TrivialInject.",
            "VernacExtend",
            "85685dc6f743af203392b5d1690c1956c12e69cc"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_val_inj: forall v ty b tv, bool_val v ty m = Some b -> Val.inject f v tv -> bool_val tv ty m' = Some b.",
            "VernacStartTheoremProof",
            "fe1b23ac28eb0199bce4646f94234d0e064ed1d1"
        ],
        [
            "unfold bool_val; intros.",
            "VernacExtend",
            "3680bdd6bf5907aab5699ed727531a1fe28d86dd"
        ],
        [
            "destruct (classify_bool ty); inv H0; try congruence.",
            "VernacExtend",
            "09646af5f7cc8f2ae0d8bb1ab8e4a4af93ad37b9"
        ],
        [
            "destruct Archi.ptr64; try discriminate.",
            "VernacExtend",
            "266c81e23898cb860e14d16d5592352203d2f902"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs1)) eqn:VP; inv H.",
            "VernacExtend",
            "45296a853481a464a44a7953b7b8e2baed75ffec"
        ],
        [
            "erewrite weak_valid_pointer_inj by eauto.",
            "VernacExtend",
            "5d9613b48abc378936ef4385d1a6732d4f7d907a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct Archi.ptr64; try discriminate.",
            "VernacExtend",
            "266c81e23898cb860e14d16d5592352203d2f902"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs1)) eqn:VP; inv H.",
            "VernacExtend",
            "45296a853481a464a44a7953b7b8e2baed75ffec"
        ],
        [
            "erewrite weak_valid_pointer_inj by eauto.",
            "VernacExtend",
            "5d9613b48abc378936ef4385d1a6732d4f7d907a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sem_unary_operation_inj: forall op v1 ty v tv1, sem_unary_operation op v1 ty m = Some v -> Val.inject f v1 tv1 -> exists tv, sem_unary_operation op tv1 ty m' = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "d6daf2cc0a37a27fb9da4044614b7a2de9ff2152"
        ],
        [
            "unfold sem_unary_operation; intros.",
            "VernacExtend",
            "8fcf474a2adeb3243f17b84cf9655952d659b333"
        ],
        [
            "destruct op.",
            "VernacExtend",
            "8929c4e75c9a3bb140fea6bfec2f496ac7c48be2"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold sem_notbool in *.",
            "VernacExtend",
            "0581cfb23695575d0431dab0bdf168e7543ca333"
        ],
        [
            "destruct (bool_val v1 ty m) as [b|] eqn:BV; simpl in H; inv H.",
            "VernacExtend",
            "762d21161ed6f8a53b0cb88054eaf0df5b584f7b"
        ],
        [
            "erewrite bool_val_inj by eauto.",
            "VernacExtend",
            "aab9bae3bb8e1bfe29e11de5b2bc3b90c37d31ec"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "TrivialInject.",
            "VernacExtend",
            "37a67f918db97e56681a655250706112cbaab021"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold sem_notint in *; destruct (classify_notint ty); inv H0; inv H; TrivialInject.",
            "VernacExtend",
            "1be26e6073babae33ed7f99ccabcacd458a4eab2"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold sem_neg in *; destruct (classify_neg ty); inv H0; inv H; TrivialInject.",
            "VernacExtend",
            "736f3a737d8bfbeec4c5194ac78008b04700f2d7"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold sem_absfloat in *; destruct (classify_neg ty); inv H0; inv H; TrivialInject.",
            "VernacExtend",
            "c47a22fd57c615ab3bd511f2cc2cc65bbcc99d1b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition optval_self_injects (ov: option val) : Prop := match ov with | Some (Vptr b ofs) => False | _ => True end.",
            "VernacDefinition",
            "5637b5c349e2182a39b5652fa1060fdae8eacec2"
        ],
        [
            "Remark sem_binarith_inject: forall sem_int sem_long sem_float sem_single v1 t1 v2 t2 v v1' v2', sem_binarith sem_int sem_long sem_float sem_single v1 t1 v2 t2 m = Some v -> Val.inject f v1 v1' -> Val.inject f v2 v2' -> (forall sg n1 n2, optval_self_injects (sem_int sg n1 n2)) -> (forall sg n1 n2, optval_self_injects (sem_long sg n1 n2)) -> (forall n1 n2, optval_self_injects (sem_float n1 n2)) -> (forall n1 n2, optval_self_injects (sem_single n1 n2)) -> exists v', sem_binarith sem_int sem_long sem_float sem_single v1' t1 v2' t2 m' = Some v' /\\ Val.inject f v v'.",
            "VernacStartTheoremProof",
            "4728b9f347d3b5af1103ceb469f60335076808dc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (SELF: forall ov v, ov = Some v -> optval_self_injects ov -> Val.inject f v v).",
            "VernacExtend",
            "609eb0414a8c394526eca09b38c525c811104d7a"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst ov; simpl in H7.",
            "VernacExtend",
            "f8cce5f79e442eb9b52486fabad3d4d00c56cc61"
        ],
        [
            "destruct v0; contradiction || constructor.",
            "VernacExtend",
            "f2f3747e2671d042d7b9480d366b1d2ff46821bd"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "unfold sem_binarith in *.",
            "VernacExtend",
            "7e8c8591dd7222dfe3460482ef7550d931a72f32"
        ],
        [
            "set (c := classify_binarith t1 t2) in *.",
            "VernacExtend",
            "df8e6331778b76724a165c5d5d123b22fb938a76"
        ],
        [
            "set (t := binarith_type c) in *.",
            "VernacExtend",
            "40e0a7b205ca7c92bbb3db6e793694a25d907368"
        ],
        [
            "destruct (sem_cast v1 t1 t m) as [w1|] eqn:C1; try discriminate.",
            "VernacExtend",
            "4b6bb0761fbb262df7b90371ff58b72df0fcb6f4"
        ],
        [
            "destruct (sem_cast v2 t2 t m) as [w2|] eqn:C2; try discriminate.",
            "VernacExtend",
            "9acc972e4bbbd781c515e271c22b84a62866c942"
        ],
        [
            "exploit (sem_cast_inj v1); eauto.",
            "VernacExtend",
            "822e35e7bb8dfebc309474a4ccf3a5405fb7c022"
        ],
        [
            "intros (w1' & C1' & INJ1).",
            "VernacExtend",
            "0253ee7dd1cdb4b3816060e2fdcd8982da12c4b9"
        ],
        [
            "exploit (sem_cast_inj v2); eauto.",
            "VernacExtend",
            "3a42706d3cbe214e2e7b1f6fa75c6cde31110fe4"
        ],
        [
            "intros (w2' & C2' & INJ2).",
            "VernacExtend",
            "496b4e6fa64d4ba2950035bacedddb214a1d2fa8"
        ],
        [
            "rewrite C1'; rewrite C2'.",
            "VernacExtend",
            "ee376e22f154e8c0367fb2b1ca0794e67939ca70"
        ],
        [
            "destruct c; inv INJ1; inv INJ2; discriminate || eauto.",
            "VernacExtend",
            "4e3024593410a2825df5e790ef8c85479d113719"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark sem_shift_inject: forall sem_int sem_long v1 t1 v2 t2 v v1' v2', sem_shift sem_int sem_long v1 t1 v2 t2 = Some v -> Val.inject f v1 v1' -> Val.inject f v2 v2' -> exists v', sem_shift sem_int sem_long v1' t1 v2' t2 = Some v' /\\ Val.inject f v v'.",
            "VernacStartTheoremProof",
            "a4149e6403b217827ca6646b1d6017fb428ad90c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists v.",
            "VernacExtend",
            "07e9a3324bfa0e7b5dc708d0101cf063e8084497"
        ],
        [
            "unfold sem_shift in *; destruct (classify_shift t1 t2); inv H0; inv H1; try discriminate.",
            "VernacExtend",
            "fe5d458e9babdcd12e8b3b666fab0c2758520679"
        ],
        [
            "destruct (Int.ltu i0 Int.iwordsize); inv H; auto.",
            "VernacExtend",
            "016d1a3f1e55f5e6ceb4fdfb7b29ba4dce680e25"
        ],
        [
            "destruct (Int64.ltu i0 Int64.iwordsize); inv H; auto.",
            "VernacExtend",
            "cdea31529db92c880915fe2f6e1b568fcce1dae3"
        ],
        [
            "destruct (Int64.ltu i0 (Int64.repr 32)); inv H; auto.",
            "VernacExtend",
            "8bcdcf03dac19ee4bf0cb1df7fecfc95230e10ff"
        ],
        [
            "destruct (Int.ltu i0 Int64.iwordsize'); inv H; auto.",
            "VernacExtend",
            "632fc534edb355e8b0721c49e4d0b2a9775a22e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark sem_cmp_ptr_inj: forall c v1 v2 v tv1 tv2, cmp_ptr m c v1 v2 = Some v -> Val.inject f v1 tv1 -> Val.inject f v2 tv2 -> exists tv, cmp_ptr m' c tv1 tv2 = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "608364d65f4287483be96123843a63e8b6232fea"
        ],
        [
            "unfold cmp_ptr; intros.",
            "VernacExtend",
            "93ae64974377c71c1c2952056717b11a7d31e030"
        ],
        [
            "remember (if Archi.ptr64 then Val.cmplu_bool (Mem.valid_pointer m) c v1 v2 else Val.cmpu_bool (Mem.valid_pointer m) c v1 v2) as ob.",
            "VernacExtend",
            "a463aa57aaf0fa86d45ea24187ca275c5b9d3b01"
        ],
        [
            "destruct ob as [b|]; simpl in H; inv H.",
            "VernacExtend",
            "cab62611925b70895dbca6954dfb279ce691e13d"
        ],
        [
            "exists (Val.of_bool b); split; auto.",
            "VernacExtend",
            "ad60db6e68e9d7f1b649cee388cbb0ea57b08e3a"
        ],
        [
            "destruct Archi.ptr64.",
            "VernacExtend",
            "2064ad1159ae9032a7cc03c54e602f472b9245f1"
        ],
        [
            "erewrite Val.cmplu_bool_inject by eauto.",
            "VernacExtend",
            "93205a165a0c7c728b2a84045002ec213911a5b1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "erewrite Val.cmpu_bool_inject by eauto.",
            "VernacExtend",
            "7ad8c5ce1a563e6636e7132ddf17c4f23c7e021e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark sem_cmp_inj: forall cmp v1 tv1 ty1 v2 tv2 ty2 v, sem_cmp cmp v1 ty1 v2 ty2 m = Some v -> Val.inject f v1 tv1 -> Val.inject f v2 tv2 -> exists tv, sem_cmp cmp tv1 ty1 tv2 ty2 m' = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "2f38c0c7bfc52495ce7d57cf980c0964a5d5a06b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_cmp in *; destruct (classify_cmp ty1 ty2).",
            "VernacExtend",
            "0fc62ea3d1a1d09ac9cc2e14025598b63e458c7d"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_ptr_inj; eauto.",
            "VernacExtend",
            "4be2f6e1f613fb5196dcd943c0b1ba2cf21c3c4f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H1; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
            "VernacExtend",
            "3df60bce96718de93fe38be1569ebaeaff1028bf"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H0; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
            "VernacExtend",
            "10e2aef5770b5336e066cd0b896864249de278a8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H1; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
            "VernacExtend",
            "3df60bce96718de93fe38be1569ebaeaff1028bf"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H0; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
            "VernacExtend",
            "10e2aef5770b5336e066cd0b896864249de278a8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "assert (SELF: forall b, optval_self_injects (Some (Val.of_bool b))).",
            "VernacExtend",
            "72440f5e4b1f2f42a55cc2a7020830b659dff6e3"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct b; exact I.",
            "VernacExtend",
            "eb5798e025fad5cd602a4e7ad958660909a63e07"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "eapply sem_binarith_inject; eauto.",
            "VernacExtend",
            "46dc264c256f9850681ff7c5f1af15ec1ae4be58"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sem_binary_operation_inj: forall cenv op v1 ty1 v2 ty2 v tv1 tv2, sem_binary_operation cenv op v1 ty1 v2 ty2 m = Some v -> Val.inject f v1 tv1 -> Val.inject f v2 tv2 -> exists tv, sem_binary_operation cenv op tv1 ty1 tv2 ty2 m' = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "35a3f496765fb0bf86476e03c05a8e7e76ed9ea9"
        ],
        [
            "unfold sem_binary_operation; intros; destruct op.",
            "VernacExtend",
            "97889db84475c5453bc525b60553d038863754e3"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "assert (A: forall cenv ty si v1' v2' tv1' tv2', Val.inject f v1' tv1' -> Val.inject f v2' tv2' -> sem_add_ptr_int cenv ty si v1' v2' = Some v -> exists tv, sem_add_ptr_int cenv ty si tv1' tv2' = Some tv /\\ Val.inject f v tv).",
            "VernacExtend",
            "87f95e11364fa90372132f3c86561aad57e13cef"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_add_ptr_int in *; inv H2; inv H3; TrivialInject.",
            "VernacExtend",
            "a34aab13fc2668d690d265da393003d4340d102f"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "repeat rewrite Ptrofs.add_assoc.",
            "VernacExtend",
            "d34efbe23248e947c2bab8f739cfa5b1d33d119f"
        ],
        [
            "decEq.",
            "VernacExtend",
            "d63fd87e305bec0bb61e895f0b3f59d7fe522213"
        ],
        [
            "apply Ptrofs.add_commut.",
            "VernacExtend",
            "b05fc9ef33bb5447a2c384e361b8f9fbbc87b8bc"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (B: forall cenv ty v1' v2' tv1' tv2', Val.inject f v1' tv1' -> Val.inject f v2' tv2' -> sem_add_ptr_long cenv ty v1' v2' = Some v -> exists tv, sem_add_ptr_long cenv ty tv1' tv2' = Some tv /\\ Val.inject f v tv).",
            "VernacExtend",
            "bf9a677c6b7e1f6226b4f432be1345b3984199f6"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_add_ptr_long in *; inv H2; inv H3; TrivialInject.",
            "VernacExtend",
            "e10b73a63a95fb1183f19d999cf87e92039cd9ab"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "repeat rewrite Ptrofs.add_assoc.",
            "VernacExtend",
            "d34efbe23248e947c2bab8f739cfa5b1d33d119f"
        ],
        [
            "decEq.",
            "VernacExtend",
            "d63fd87e305bec0bb61e895f0b3f59d7fe522213"
        ],
        [
            "apply Ptrofs.add_commut.",
            "VernacExtend",
            "b05fc9ef33bb5447a2c384e361b8f9fbbc87b8bc"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "unfold sem_add in *; destruct (classify_add ty1 ty2); eauto.",
            "VernacExtend",
            "a7ac43beca74c0a28ad464d62d3eba809c9c9514"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold sem_sub in *; destruct (classify_sub ty1 ty2).",
            "VernacExtend",
            "fb37b42f989884ade901286f9dd5174e2aa7764c"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inv H0; inv H1; TrivialInject.",
            "VernacExtend",
            "86028494cb04ea8dac3e71ce6ab9641c7ae9343b"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "rewrite Ptrofs.sub_add_l.",
            "VernacExtend",
            "107fdc175d53b6bf008624a0ec1ae8fb1d557611"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inv H0; inv H1; TrivialInject.",
            "VernacExtend",
            "86028494cb04ea8dac3e71ce6ab9641c7ae9343b"
        ],
        [
            "destruct (eq_block b1 b0); try discriminate.",
            "VernacExtend",
            "eba2eb5037eda065b888f251d387605fc57294f1"
        ],
        [
            "subst b1.",
            "VernacExtend",
            "3f211979d3468cb50c2cb8daf8036690c71e088c"
        ],
        [
            "rewrite H0 in H2; inv H2.",
            "VernacExtend",
            "2e3306c6778a940dae087e5908f4c5f4cd5cfbaa"
        ],
        [
            "rewrite dec_eq_true.",
            "VernacExtend",
            "28b046c22f8f69c0651cbac642dd4f2013af7847"
        ],
        [
            "destruct (zlt 0 (sizeof cenv ty) && zle (sizeof cenv ty) Ptrofs.max_signed); inv H.",
            "VernacExtend",
            "4da99102c3af94934bf43a3b7649a34c5962d006"
        ],
        [
            "rewrite Ptrofs.sub_shifted.",
            "VernacExtend",
            "e95b18fd8992052edc4068e15f6d88000ab63a41"
        ],
        [
            "TrivialInject.",
            "VernacExtend",
            "37a67f918db97e56681a655250706112cbaab021"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inv H0; inv H1; TrivialInject.",
            "VernacExtend",
            "86028494cb04ea8dac3e71ce6ab9641c7ae9343b"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "rewrite Ptrofs.sub_add_l.",
            "VernacExtend",
            "107fdc175d53b6bf008624a0ec1ae8fb1d557611"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros.",
            "VernacExtend",
            "461074a1337cf6691bbe543a0abd69976e23abea"
        ],
        [
            "destruct sg.",
            "VernacExtend",
            "d860ee45705ab440cc78f5e83e89006231502403"
        ],
        [
            "destruct (Int.eq n2 Int.zero || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone); exact I.",
            "VernacExtend",
            "90215e4e86f7324aa92440c5ae5df56c6869e9fe"
        ],
        [
            "destruct (Int.eq n2 Int.zero); exact I.",
            "VernacExtend",
            "10abc1f147c602f51bafb1680042d55a3c57e799"
        ],
        [
            "destruct sg.",
            "VernacExtend",
            "d860ee45705ab440cc78f5e83e89006231502403"
        ],
        [
            "destruct (Int64.eq n2 Int64.zero || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone); exact I.",
            "VernacExtend",
            "6977e3e1cc2db7552ce1557a6a473376a3db128d"
        ],
        [
            "destruct (Int64.eq n2 Int64.zero); exact I.",
            "VernacExtend",
            "3a636618c213eabf7a53a4bb07b19ae3fd2e9430"
        ],
        [
            "exact I.",
            "VernacExtend",
            "2cf10cb6670c94bac111ace6912ec2b66fc73c6f"
        ],
        [
            "exact I.",
            "VernacExtend",
            "2cf10cb6670c94bac111ace6912ec2b66fc73c6f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros.",
            "VernacExtend",
            "461074a1337cf6691bbe543a0abd69976e23abea"
        ],
        [
            "destruct sg.",
            "VernacExtend",
            "d860ee45705ab440cc78f5e83e89006231502403"
        ],
        [
            "destruct (Int.eq n2 Int.zero || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone); exact I.",
            "VernacExtend",
            "90215e4e86f7324aa92440c5ae5df56c6869e9fe"
        ],
        [
            "destruct (Int.eq n2 Int.zero); exact I.",
            "VernacExtend",
            "10abc1f147c602f51bafb1680042d55a3c57e799"
        ],
        [
            "destruct sg.",
            "VernacExtend",
            "d860ee45705ab440cc78f5e83e89006231502403"
        ],
        [
            "destruct (Int64.eq n2 Int64.zero || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone); exact I.",
            "VernacExtend",
            "6977e3e1cc2db7552ce1557a6a473376a3db128d"
        ],
        [
            "destruct (Int64.eq n2 Int64.zero); exact I.",
            "VernacExtend",
            "3a636618c213eabf7a53a4bb07b19ae3fd2e9430"
        ],
        [
            "exact I.",
            "VernacExtend",
            "2cf10cb6670c94bac111ace6912ec2b66fc73c6f"
        ],
        [
            "exact I.",
            "VernacExtend",
            "2cf10cb6670c94bac111ace6912ec2b66fc73c6f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_binarith_inject; eauto; intros; exact I.",
            "VernacExtend",
            "72020eee28c40c244fd96ae48713e5aa48b9dcfc"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_shift_inject; eauto.",
            "VernacExtend",
            "dffcb2566dd2180d80c8aae376b89adbbb152238"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_shift_inject; eauto.",
            "VernacExtend",
            "dffcb2566dd2180d80c8aae376b89adbbb152238"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply sem_cmp_inj; eauto.",
            "VernacExtend",
            "eb80e1b5af10a833a04fd44533c2b721a37c7365"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End GENERIC_INJECTION.",
            "VernacEndSegment",
            "fec7e46fc1539bcbee78948f9b608e06d0499bff"
        ],
        [
            "Lemma sem_cast_inject: forall f v1 ty1 ty m v tv1 tm, sem_cast v1 ty1 ty m = Some v -> Val.inject f v1 tv1 -> Mem.inject f m tm -> exists tv, sem_cast tv1 ty1 ty tm = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "5f76a5bf0bdf8cb69537b149455ff22b6791ec09"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply sem_cast_inj; eauto.",
            "VernacExtend",
            "779107a6baf64fd59345dccf26da8d6b6ab761e5"
        ],
        [
            "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
            "VernacExtend",
            "e267bf439f648167b48939265079bff8ae0dcf14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sem_unary_operation_inject: forall f m m' op v1 ty1 v tv1, sem_unary_operation op v1 ty1 m = Some v -> Val.inject f v1 tv1 -> Mem.inject f m m' -> exists tv, sem_unary_operation op tv1 ty1 m' = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "32d7e75610e290396244638d2d52dab0ad75e6b7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply sem_unary_operation_inj; eauto.",
            "VernacExtend",
            "f4543ba7d65c844248b9ac032ccfadb97d0024cd"
        ],
        [
            "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
            "VernacExtend",
            "e267bf439f648167b48939265079bff8ae0dcf14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sem_binary_operation_inject: forall f m m' cenv op v1 ty1 v2 ty2 v tv1 tv2, sem_binary_operation cenv op v1 ty1 v2 ty2 m = Some v -> Val.inject f v1 tv1 -> Val.inject f v2 tv2 -> Mem.inject f m m' -> exists tv, sem_binary_operation cenv op tv1 ty1 tv2 ty2 m' = Some tv /\\ Val.inject f v tv.",
            "VernacStartTheoremProof",
            "015f4ebafefc2e114c97dfc2b1fe1ce92f9cf5b2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply sem_binary_operation_inj; eauto.",
            "VernacExtend",
            "50e37c5ce3f6c8a129ac11ec6d087f7e013957a5"
        ],
        [
            "intros; eapply Mem.valid_pointer_inject_val; eauto.",
            "VernacExtend",
            "b815324e74a665b8235e9902083cb5e543ca89c8"
        ],
        [
            "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
            "VernacExtend",
            "e267bf439f648167b48939265079bff8ae0dcf14"
        ],
        [
            "intros; eapply Mem.weak_valid_pointer_inject_no_overflow; eauto.",
            "VernacExtend",
            "edda4a65a92418619a00800c8053108ab3ede565"
        ],
        [
            "intros; eapply Mem.different_pointers_inject; eauto.",
            "VernacExtend",
            "e59e271430e62c773abca8951b8d9518eda905ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_val_inject: forall f m m' v ty b tv, bool_val v ty m = Some b -> Val.inject f v tv -> Mem.inject f m m' -> bool_val tv ty m' = Some b.",
            "VernacStartTheoremProof",
            "0809b04002fb49d4cadc2334b1a94ffb839fbad1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply bool_val_inj; eauto.",
            "VernacExtend",
            "dc1a6768fa162a0f8af73bea511d7fdb173884f7"
        ],
        [
            "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
            "VernacExtend",
            "e267bf439f648167b48939265079bff8ae0dcf14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_bool_bool_val: forall v t m, sem_cast v t (Tint IBool Signed noattr) m = match bool_val v t m with None => None | Some b => Some(Val.of_bool b) end.",
            "VernacStartTheoremProof",
            "9d452ac4fea53e458756acb9d0d955ca3815634f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (A: classify_bool t = match t with | Tint _ _ _ => bool_case_i | Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _ => if Archi.ptr64 then bool_case_l else bool_case_i | Tfloat F64 _ => bool_case_f | Tfloat F32 _ => bool_case_s | Tlong _ _ => bool_case_l | _ => bool_default end).",
            "VernacExtend",
            "8e41ef990fd51296d5f5e915e41198580f3d542b"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "unfold classify_bool; destruct t; simpl; auto.",
            "VernacExtend",
            "417fb2ae99bd28f2f61cab7e0eeef955adeb24ec"
        ],
        [
            "destruct i; auto.",
            "VernacExtend",
            "87858d2eb4ae115db76c3d7629e824551639dadb"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "unfold bool_val.",
            "VernacExtend",
            "461d1a32326d94ab8f548c442ce54d189fb3586b"
        ],
        [
            "rewrite A.",
            "VernacExtend",
            "66a3aec75a717b72a3c9a20459f4dabe8d0df2c1"
        ],
        [
            "unfold sem_cast, classify_cast; remember Archi.ptr64 as ptr64; destruct t; simpl; auto; destruct v; auto.",
            "VernacExtend",
            "6c326f404527bf6c0443a5d78048a4f5b8aaed4c"
        ],
        [
            "destruct (Int.eq i0 Int.zero); auto.",
            "VernacExtend",
            "aa2fc6c0dc7224430a5ff37708531de25beab94e"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i0)); auto.",
            "VernacExtend",
            "9d45e13a1a65429d1aa699294a890587d858799b"
        ],
        [
            "destruct (Int64.eq i Int64.zero); auto.",
            "VernacExtend",
            "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
        ],
        [
            "destruct (negb ptr64); auto.",
            "VernacExtend",
            "e192c30747c877c1f3a30961bb6515654f9a3893"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct (Float.cmp Ceq f0 Float.zero); auto.",
            "VernacExtend",
            "da9bcd5afeb4701b578979b82a73b4beb014cad3"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct (Float32.cmp Ceq f0 Float32.zero); auto.",
            "VernacExtend",
            "263c46402434d8aedceea14048a6a00674eb70f5"
        ],
        [
            "destruct f; auto.",
            "VernacExtend",
            "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int.eq i Int.zero); auto.",
            "VernacExtend",
            "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int64.eq i Int64.zero); auto.",
            "VernacExtend",
            "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int.eq i Int.zero); auto.",
            "VernacExtend",
            "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int64.eq i Int64.zero); auto.",
            "VernacExtend",
            "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int.eq i Int.zero); auto.",
            "VernacExtend",
            "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Int64.eq i Int64.zero); auto.",
            "VernacExtend",
            "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct ptr64; auto.",
            "VernacExtend",
            "2705df4cef880640bf1941ad4bd326146e827381"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
            "VernacExtend",
            "f23e5ed95f946999ebe3208d388833443a1a5009"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma notbool_bool_val: forall v t m, sem_notbool v t m = match bool_val v t m with None => None | Some b => Some(Val.of_bool (negb b)) end.",
            "VernacStartTheoremProof",
            "f4e4591f497e5e0b925595858103f859fc2b6d24"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_notbool.",
            "VernacExtend",
            "93f56e078b9f38b4676839087c84a7e1259109d1"
        ],
        [
            "destruct (bool_val v t m) as [[] | ]; reflexivity.",
            "VernacExtend",
            "f0e4ec95ffd42e2a074981e13c02bff5690b7848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section VAL_CASTED.",
            "VernacBeginSection",
            "9f7f481c1d05c9d130077bb5946efca3b55fafc1"
        ],
        [
            "Inductive val_casted: val -> type -> Prop := | val_casted_int: forall sz si attr n, cast_int_int sz si n = n -> val_casted (Vint n) (Tint sz si attr) | val_casted_float: forall attr n, val_casted (Vfloat n) (Tfloat F64 attr) | val_casted_single: forall attr n, val_casted (Vsingle n) (Tfloat F32 attr) | val_casted_long: forall si attr n, val_casted (Vlong n) (Tlong si attr) | val_casted_ptr_ptr: forall b ofs ty attr, val_casted (Vptr b ofs) (Tpointer ty attr) | val_casted_int_ptr: forall n ty attr, Archi.ptr64 = false -> val_casted (Vint n) (Tpointer ty attr) | val_casted_ptr_int: forall b ofs si attr, Archi.ptr64 = false -> val_casted (Vptr b ofs) (Tint I32 si attr) | val_casted_long_ptr: forall n ty attr, Archi.ptr64 = true -> val_casted (Vlong n) (Tpointer ty attr) | val_casted_ptr_long: forall b ofs si attr, Archi.ptr64 = true -> val_casted (Vptr b ofs) (Tlong si attr) | val_casted_struct: forall id attr b ofs, val_casted (Vptr b ofs) (Tstruct id attr) | val_casted_union: forall id attr b ofs, val_casted (Vptr b ofs) (Tunion id attr) | val_casted_void: forall v, val_casted v Tvoid.",
            "VernacInductive",
            "46ded4b25d43de41229673e8c497e05177d23ae3"
        ],
        [
            "Hint Constructors val_casted.",
            "VernacHints",
            "a6244723d47ced35165bdec88fd751173b3949a2"
        ],
        [
            "Remark cast_int_int_idem: forall sz sg i, cast_int_int sz sg (cast_int_int sz sg i) = cast_int_int sz sg i.",
            "VernacStartTheoremProof",
            "ca63141d913aa2dc5e007dbaaf64fa09de9f9917"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct sz; simpl; auto.",
            "VernacExtend",
            "eeb2f63e889c5fbb981477d7e2b77b0a40decb38"
        ],
        [
            "destruct sg; [apply Int.sign_ext_idem|apply Int.zero_ext_idem]; compute; intuition congruence.",
            "VernacExtend",
            "92168333c0e8e307b56d83f134b3652080fdb9cc"
        ],
        [
            "destruct sg; [apply Int.sign_ext_idem|apply Int.zero_ext_idem]; compute; intuition congruence.",
            "VernacExtend",
            "92168333c0e8e307b56d83f134b3652080fdb9cc"
        ],
        [
            "destruct (Int.eq i Int.zero); auto.",
            "VernacExtend",
            "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac DestructCases := match goal with | [H: match match ?x with _ => _ end with _ => _ end = Some _ |- _ ] => destruct x eqn:?; DestructCases | [H: match ?x with _ => _ end = Some _ |- _ ] => destruct x eqn:?; DestructCases | [H: Some _ = Some _ |- _ ] => inv H; DestructCases | [H: None = Some _ |- _ ] => discriminate H | [H: @eq intsize _ _ |- _ ] => discriminate H || (clear H; DestructCases) | [ |- val_casted (Vint (if ?x then Int.zero else Int.one)) _ ] => try (constructor; destruct x; reflexivity) | [ |- val_casted (Vint _) (Tint ?sz ?sg _) ] => try (constructor; apply (cast_int_int_idem sz sg)) | _ => idtac end.",
            "VernacExtend",
            "40d5d0c25b08ba72d4895bdeaeaadd4e84c95333"
        ],
        [
            "Lemma cast_val_is_casted: forall v ty ty' v' m, sem_cast v ty ty' m = Some v' -> val_casted v' ty'.",
            "VernacStartTheoremProof",
            "1a52dfabc1b84737fffe9eedd942aef8eca4c951"
        ],
        [
            "unfold sem_cast; intros.",
            "VernacExtend",
            "aed75c174ffe3ddb4bcfcfe1557978f5394bd013"
        ],
        [
            "destruct ty, ty'; simpl in H; DestructCases; constructor; auto.",
            "VernacExtend",
            "d6c183f0cc0fa036d8ddf17d9a793f6ced245d17"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End VAL_CASTED.",
            "VernacEndSegment",
            "f170d3cae7d982980fcc357d4bde015b5a1c645d"
        ],
        [
            "Lemma cast_val_casted: forall v ty m, val_casted v ty -> sem_cast v ty ty m = Some v.",
            "VernacStartTheoremProof",
            "49b5d61a80da37d1a3662f517e33a1f9177f0eb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold sem_cast; inversion H; clear H; subst v ty; simpl.",
            "VernacExtend",
            "8904cd12c259fe7846d64473d8507f0fbc93acad"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct Archi.ptr64; [ | destruct (intsize_eq sz I32)].",
            "VernacExtend",
            "c2a0b5d1e509aa533705156a250d130bf9fd86bd"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct sz; f_equal; f_equal; assumption.",
            "VernacExtend",
            "442ed723bdb48b6db01491930c4d32a69181cf2e"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "subst sz; auto.",
            "VernacExtend",
            "9c6b053db64d2e2b9149570e0e29897f172e346d"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct sz; f_equal; f_equal; assumption.",
            "VernacExtend",
            "442ed723bdb48b6db01491930c4d32a69181cf2e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct Archi.ptr64; auto.",
            "VernacExtend",
            "a9cd18b10a2cc14dcbdb18cf89de664cd0fb419f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite H0; auto.",
            "VernacExtend",
            "48df2b0b453adadcea8e6914bccb68bfc33b286b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite H0; auto.",
            "VernacExtend",
            "48df2b0b453adadcea8e6914bccb68bfc33b286b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite H0; auto.",
            "VernacExtend",
            "48df2b0b453adadcea8e6914bccb68bfc33b286b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite H0; auto.",
            "VernacExtend",
            "48df2b0b453adadcea8e6914bccb68bfc33b286b"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite dec_eq_true; auto.",
            "VernacExtend",
            "e00f39dc3f4acd139de70eba042be899c6347cd5"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite dec_eq_true; auto.",
            "VernacExtend",
            "e00f39dc3f4acd139de70eba042be899c6347cd5"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_idempotent: forall v ty ty' v' m, sem_cast v ty ty' m = Some v' -> sem_cast v' ty' ty' m = Some v'.",
            "VernacStartTheoremProof",
            "6fb70dabbe843dcb1eeb342fab17ef065259fad6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply cast_val_casted.",
            "VernacExtend",
            "bdc0eda8ffd99f02dbb5f33d514f1d6f49c211fc"
        ],
        [
            "eapply cast_val_is_casted; eauto.",
            "VernacExtend",
            "507473f65bd03c429fba2f7033d74898a86f3214"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module ArithConv.",
            "VernacDefineModule",
            "5650ef812b71c10f73d7c1f81aaf2c8fb23b2865"
        ],
        [
            "Inductive int_type : Type := | _Bool | Char | SChar | UChar | Short | UShort | Int | UInt | Long | ULong | Longlong | ULonglong.",
            "VernacInductive",
            "260a3d346eeb31bb9c111edfe2e50a2f7cedd630"
        ],
        [
            "Inductive arith_type : Type := | I (it: int_type) | Float | Double | Longdouble.",
            "VernacInductive",
            "10c9dff19ab38ffadd271d255884d0e4859d5a7e"
        ],
        [
            "Definition eq_int_type: forall (x y: int_type), {x=y} + {x<>y}.",
            "VernacDefinition",
            "afa9c5777272c37d8fc60320718132aba47229c5"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition is_unsigned (t: int_type) : bool := match t with | _Bool => true | Char => false | SChar => false | UChar => true | Short => false | UShort => true | Int => false | UInt => true | Long => false | ULong => true | Longlong => false | ULonglong => true end.",
            "VernacDefinition",
            "51f7a0ef6179bb2558abce131fdc2e0b46bb55e7"
        ],
        [
            "Definition unsigned_type (t: int_type) : int_type := match t with | Char => UChar | SChar => UChar | Short => UShort | Int => UInt | Long => ULong | Longlong => ULonglong | _ => t end.",
            "VernacDefinition",
            "90220ad8d788bcea570a4747eaaa6adbe0cf763c"
        ],
        [
            "Definition int_sizeof (t: int_type) : Z := match t with | _Bool | Char | SChar | UChar => 1 | Short | UShort => 2 | Int | UInt | Long | ULong => 4 | Longlong | ULonglong => 8 end.",
            "VernacDefinition",
            "ceb58734913a344518d161c0669111f99a8cb8c9"
        ],
        [
            "Definition rank (t: int_type) : Z := match t with | _Bool => 1 | Char | SChar | UChar => 2 | Short | UShort => 3 | Int | UInt => 4 | Long | ULong => 5 | Longlong | ULonglong => 6 end.",
            "VernacDefinition",
            "d6eb214634c710ec8b814681e42a06a89447b209"
        ],
        [
            "Definition integer_promotion (t: int_type) : int_type := if zlt (rank t) (rank Int) then Int else t.",
            "VernacDefinition",
            "c3853f588b35fca9500fffa9c0acbbaa3ba0f3e3"
        ],
        [
            "Definition usual_arithmetic_conversion (t1 t2: arith_type) : arith_type := match t1, t2 with | Longdouble, _ | _, Longdouble => Longdouble | Double, _ | _, Double => Double | Float, _ | _, Float => Float | I i1, I i2 => let j1 := integer_promotion i1 in let j2 := integer_promotion i2 in if eq_int_type j1 j2 then I j1 else match is_unsigned j1, is_unsigned j2 with | true, true | false, false => if zlt (rank j1) (rank j2) then I j2 else I j1 | true, false => if zle (rank j2) (rank j1) then I j1 else if zlt (int_sizeof j1) (int_sizeof j2) then I j2 else I (unsigned_type j2) | false, true => if zle (rank j1) (rank j2) then I j2 else if zlt (int_sizeof j2) (int_sizeof j1) then I j1 else I (unsigned_type j1) end end.",
            "VernacDefinition",
            "90d7768e95b3ea8bf9f6475d7cb424b354e896d1"
        ],
        [
            "Definition proj_type (t: arith_type) : type := match t with | I _Bool => Tint IBool Unsigned noattr | I Char => Tint I8 Unsigned noattr | I SChar => Tint I8 Signed noattr | I UChar => Tint I8 Unsigned noattr | I Short => Tint I16 Signed noattr | I UShort => Tint I16 Unsigned noattr | I Int => Tint I32 Signed noattr | I UInt => Tint I32 Unsigned noattr | I Long => Tint I32 Signed noattr | I ULong => Tint I32 Unsigned noattr | I Longlong => Tlong Signed noattr | I ULonglong => Tlong Unsigned noattr | Float => Tfloat F32 noattr | Double => Tfloat F64 noattr | Longdouble => Tfloat F64 noattr end.",
            "VernacDefinition",
            "de6e26af025d1f0b0eb2840dc900f6bc51e1d5b5"
        ],
        [
            "Lemma typeconv_integer_promotion: forall i, typeconv (proj_type (I i)) = proj_type (I (integer_promotion i)).",
            "VernacStartTheoremProof",
            "a97da01fc818095dffdd68ce7c5d00da41104a0e"
        ],
        [
            "destruct i; reflexivity.",
            "VernacExtend",
            "86d897b284d766a57d1a5afb9f1c7c66ae2b7a38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma classify_binarith_arithmetic_conversion: forall t1 t2, binarith_type (classify_binarith (proj_type t1) (proj_type t2)) = proj_type (usual_arithmetic_conversion t1 t2).",
            "VernacStartTheoremProof",
            "03947d3f4f18743d4bb72f34a14845585a9b2683"
        ],
        [
            "destruct t1; destruct t2; try reflexivity.",
            "VernacExtend",
            "85636987de7ff46dacac1282a6ab0f5ad6482a3d"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; destruct it0; reflexivity.",
            "VernacExtend",
            "cb8b9196ab85aeea6091ce4119580c0db0672d22"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct it; reflexivity.",
            "VernacExtend",
            "256c1757c995f4862ce0cceb462919b25a98b1a0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ArithConv.",
            "VernacEndSegment",
            "c61ed797160ddfc0e04d61709af778137eeacfed"
        ]
    ],
    "proofs": [
        {
            "name": "val_inject_vtrue",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "unfold Vtrue; auto.",
                        "VernacExtend",
                        "0465922508bbf311680c5461592525dc5df4029a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_inject_vfalse",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "unfold Vfalse; auto.",
                        "VernacExtend",
                        "9bd35533b26d26570f069b2315cb15c22a6eb764"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_inject_of_bool",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Val.of_bool.",
                        "VernacExtend",
                        "603644c0a123d361f9fce2e02ad27a24b46945cd"
                    ]
                },
                {
                    "command": [
                        "destruct b; [apply val_inject_vtrue|apply val_inject_vfalse].",
                        "VernacExtend",
                        "7e2083c32e6dc7d9bb719e2e761ee7d87d1d1b7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_inject_vptrofs",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Vptrofs.",
                        "VernacExtend",
                        "056c978d377c295969711a6836029342e12bc535"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64; auto.",
                        "VernacExtend",
                        "a9cd18b10a2cc14dcbdb18cf89de664cd0fb419f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cast_inj",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "unfold sem_cast; intros; destruct (classify_cast ty1 ty); inv H0; TrivialInject.",
                        "VernacExtend",
                        "f2bfaf18bb1930db5feea789c9029db326fc7bdc"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "erewrite weak_valid_pointer_inj by eauto.",
                        "VernacExtend",
                        "5d9613b48abc378936ef4385d1a6732d4f7d907a"
                    ]
                },
                {
                    "command": [
                        "TrivialInject.",
                        "VernacExtend",
                        "37a67f918db97e56681a655250706112cbaab021"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "erewrite weak_valid_pointer_inj by eauto.",
                        "VernacExtend",
                        "5d9613b48abc378936ef4385d1a6732d4f7d907a"
                    ]
                },
                {
                    "command": [
                        "TrivialInject.",
                        "VernacExtend",
                        "37a67f918db97e56681a655250706112cbaab021"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct (ident_eq id1 id2); TrivialInject.",
                        "VernacExtend",
                        "85685dc6f743af203392b5d1690c1956c12e69cc"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct (ident_eq id1 id2); TrivialInject.",
                        "VernacExtend",
                        "85685dc6f743af203392b5d1690c1956c12e69cc"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_val_inj",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "unfold bool_val; intros.",
                        "VernacExtend",
                        "3680bdd6bf5907aab5699ed727531a1fe28d86dd"
                    ]
                },
                {
                    "command": [
                        "destruct (classify_bool ty); inv H0; try congruence.",
                        "VernacExtend",
                        "09646af5f7cc8f2ae0d8bb1ab8e4a4af93ad37b9"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64; try discriminate.",
                        "VernacExtend",
                        "266c81e23898cb860e14d16d5592352203d2f902"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs1)) eqn:VP; inv H.",
                        "VernacExtend",
                        "45296a853481a464a44a7953b7b8e2baed75ffec"
                    ]
                },
                {
                    "command": [
                        "erewrite weak_valid_pointer_inj by eauto.",
                        "VernacExtend",
                        "5d9613b48abc378936ef4385d1a6732d4f7d907a"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64; try discriminate.",
                        "VernacExtend",
                        "266c81e23898cb860e14d16d5592352203d2f902"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b1 (Ptrofs.unsigned ofs1)) eqn:VP; inv H.",
                        "VernacExtend",
                        "45296a853481a464a44a7953b7b8e2baed75ffec"
                    ]
                },
                {
                    "command": [
                        "erewrite weak_valid_pointer_inj by eauto.",
                        "VernacExtend",
                        "5d9613b48abc378936ef4385d1a6732d4f7d907a"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_unary_operation_inj",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "unfold sem_unary_operation; intros.",
                        "VernacExtend",
                        "8fcf474a2adeb3243f17b84cf9655952d659b333"
                    ]
                },
                {
                    "command": [
                        "destruct op.",
                        "VernacExtend",
                        "8929c4e75c9a3bb140fea6bfec2f496ac7c48be2"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold sem_notbool in *.",
                        "VernacExtend",
                        "0581cfb23695575d0431dab0bdf168e7543ca333"
                    ]
                },
                {
                    "command": [
                        "destruct (bool_val v1 ty m) as [b|] eqn:BV; simpl in H; inv H.",
                        "VernacExtend",
                        "762d21161ed6f8a53b0cb88054eaf0df5b584f7b"
                    ]
                },
                {
                    "command": [
                        "erewrite bool_val_inj by eauto.",
                        "VernacExtend",
                        "aab9bae3bb8e1bfe29e11de5b2bc3b90c37d31ec"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "TrivialInject.",
                        "VernacExtend",
                        "37a67f918db97e56681a655250706112cbaab021"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold sem_notint in *; destruct (classify_notint ty); inv H0; inv H; TrivialInject.",
                        "VernacExtend",
                        "1be26e6073babae33ed7f99ccabcacd458a4eab2"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold sem_neg in *; destruct (classify_neg ty); inv H0; inv H; TrivialInject.",
                        "VernacExtend",
                        "736f3a737d8bfbeec4c5194ac78008b04700f2d7"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold sem_absfloat in *; destruct (classify_neg ty); inv H0; inv H; TrivialInject.",
                        "VernacExtend",
                        "c47a22fd57c615ab3bd511f2cc2cc65bbcc99d1b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_binarith_inject",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (SELF: forall ov v, ov = Some v -> optval_self_injects ov -> Val.inject f v v).",
                        "VernacExtend",
                        "609eb0414a8c394526eca09b38c525c811104d7a"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst ov; simpl in H7.",
                        "VernacExtend",
                        "f8cce5f79e442eb9b52486fabad3d4d00c56cc61"
                    ]
                },
                {
                    "command": [
                        "destruct v0; contradiction || constructor.",
                        "VernacExtend",
                        "f2f3747e2671d042d7b9480d366b1d2ff46821bd"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "unfold sem_binarith in *.",
                        "VernacExtend",
                        "7e8c8591dd7222dfe3460482ef7550d931a72f32"
                    ]
                },
                {
                    "command": [
                        "set (c := classify_binarith t1 t2) in *.",
                        "VernacExtend",
                        "df8e6331778b76724a165c5d5d123b22fb938a76"
                    ]
                },
                {
                    "command": [
                        "set (t := binarith_type c) in *.",
                        "VernacExtend",
                        "40e0a7b205ca7c92bbb3db6e793694a25d907368"
                    ]
                },
                {
                    "command": [
                        "destruct (sem_cast v1 t1 t m) as [w1|] eqn:C1; try discriminate.",
                        "VernacExtend",
                        "4b6bb0761fbb262df7b90371ff58b72df0fcb6f4"
                    ]
                },
                {
                    "command": [
                        "destruct (sem_cast v2 t2 t m) as [w2|] eqn:C2; try discriminate.",
                        "VernacExtend",
                        "9acc972e4bbbd781c515e271c22b84a62866c942"
                    ]
                },
                {
                    "command": [
                        "exploit (sem_cast_inj v1); eauto.",
                        "VernacExtend",
                        "822e35e7bb8dfebc309474a4ccf3a5405fb7c022"
                    ]
                },
                {
                    "command": [
                        "intros (w1' & C1' & INJ1).",
                        "VernacExtend",
                        "0253ee7dd1cdb4b3816060e2fdcd8982da12c4b9"
                    ]
                },
                {
                    "command": [
                        "exploit (sem_cast_inj v2); eauto.",
                        "VernacExtend",
                        "3a42706d3cbe214e2e7b1f6fa75c6cde31110fe4"
                    ]
                },
                {
                    "command": [
                        "intros (w2' & C2' & INJ2).",
                        "VernacExtend",
                        "496b4e6fa64d4ba2950035bacedddb214a1d2fa8"
                    ]
                },
                {
                    "command": [
                        "rewrite C1'; rewrite C2'.",
                        "VernacExtend",
                        "ee376e22f154e8c0367fb2b1ca0794e67939ca70"
                    ]
                },
                {
                    "command": [
                        "destruct c; inv INJ1; inv INJ2; discriminate || eauto.",
                        "VernacExtend",
                        "4e3024593410a2825df5e790ef8c85479d113719"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_shift_inject",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "exists v.",
                        "VernacExtend",
                        "07e9a3324bfa0e7b5dc708d0101cf063e8084497"
                    ]
                },
                {
                    "command": [
                        "unfold sem_shift in *; destruct (classify_shift t1 t2); inv H0; inv H1; try discriminate.",
                        "VernacExtend",
                        "fe5d458e9babdcd12e8b3b666fab0c2758520679"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.ltu i0 Int.iwordsize); inv H; auto.",
                        "VernacExtend",
                        "016d1a3f1e55f5e6ceb4fdfb7b29ba4dce680e25"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.ltu i0 Int64.iwordsize); inv H; auto.",
                        "VernacExtend",
                        "cdea31529db92c880915fe2f6e1b568fcce1dae3"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.ltu i0 (Int64.repr 32)); inv H; auto.",
                        "VernacExtend",
                        "8bcdcf03dac19ee4bf0cb1df7fecfc95230e10ff"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.ltu i0 Int64.iwordsize'); inv H; auto.",
                        "VernacExtend",
                        "632fc534edb355e8b0721c49e4d0b2a9775a22e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cmp_ptr_inj",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "unfold cmp_ptr; intros.",
                        "VernacExtend",
                        "93ae64974377c71c1c2952056717b11a7d31e030"
                    ]
                },
                {
                    "command": [
                        "remember (if Archi.ptr64 then Val.cmplu_bool (Mem.valid_pointer m) c v1 v2 else Val.cmpu_bool (Mem.valid_pointer m) c v1 v2) as ob.",
                        "VernacExtend",
                        "a463aa57aaf0fa86d45ea24187ca275c5b9d3b01"
                    ]
                },
                {
                    "command": [
                        "destruct ob as [b|]; simpl in H; inv H.",
                        "VernacExtend",
                        "cab62611925b70895dbca6954dfb279ce691e13d"
                    ]
                },
                {
                    "command": [
                        "exists (Val.of_bool b); split; auto.",
                        "VernacExtend",
                        "ad60db6e68e9d7f1b649cee388cbb0ea57b08e3a"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64.",
                        "VernacExtend",
                        "2064ad1159ae9032a7cc03c54e602f472b9245f1"
                    ]
                },
                {
                    "command": [
                        "erewrite Val.cmplu_bool_inject by eauto.",
                        "VernacExtend",
                        "93205a165a0c7c728b2a84045002ec213911a5b1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "erewrite Val.cmpu_bool_inject by eauto.",
                        "VernacExtend",
                        "7ad8c5ce1a563e6636e7132ddf17c4f23c7e021e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cmp_inj",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cmp in *; destruct (classify_cmp ty1 ty2).",
                        "VernacExtend",
                        "0fc62ea3d1a1d09ac9cc2e14025598b63e458c7d"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "eapply sem_cmp_ptr_inj; eauto.",
                        "VernacExtend",
                        "4be2f6e1f613fb5196dcd943c0b1ba2cf21c3c4f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
                        "VernacExtend",
                        "3df60bce96718de93fe38be1569ebaeaff1028bf"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "inversion H0; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
                        "VernacExtend",
                        "10e2aef5770b5336e066cd0b896864249de278a8"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "inversion H1; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
                        "VernacExtend",
                        "3df60bce96718de93fe38be1569ebaeaff1028bf"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "inversion H0; subst; TrivialInject; eapply sem_cmp_ptr_inj; eauto.",
                        "VernacExtend",
                        "10e2aef5770b5336e066cd0b896864249de278a8"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "assert (SELF: forall b, optval_self_injects (Some (Val.of_bool b))).",
                        "VernacExtend",
                        "72440f5e4b1f2f42a55cc2a7020830b659dff6e3"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "destruct b; exact I.",
                        "VernacExtend",
                        "eb5798e025fad5cd602a4e7ad958660909a63e07"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "eapply sem_binarith_inject; eauto.",
                        "VernacExtend",
                        "46dc264c256f9850681ff7c5f1af15ec1ae4be58"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_cast_inject",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply sem_cast_inj; eauto.",
                        "VernacExtend",
                        "779107a6baf64fd59345dccf26da8d6b6ab761e5"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
                        "VernacExtend",
                        "e267bf439f648167b48939265079bff8ae0dcf14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_unary_operation_inject",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply sem_unary_operation_inj; eauto.",
                        "VernacExtend",
                        "f4543ba7d65c844248b9ac032ccfadb97d0024cd"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
                        "VernacExtend",
                        "e267bf439f648167b48939265079bff8ae0dcf14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sem_binary_operation_inject",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply sem_binary_operation_inj; eauto.",
                        "VernacExtend",
                        "50e37c5ce3f6c8a129ac11ec6d087f7e013957a5"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.valid_pointer_inject_val; eauto.",
                        "VernacExtend",
                        "b815324e74a665b8235e9902083cb5e543ca89c8"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
                        "VernacExtend",
                        "e267bf439f648167b48939265079bff8ae0dcf14"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.weak_valid_pointer_inject_no_overflow; eauto.",
                        "VernacExtend",
                        "edda4a65a92418619a00800c8053108ab3ede565"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.different_pointers_inject; eauto.",
                        "VernacExtend",
                        "e59e271430e62c773abca8951b8d9518eda905ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_val_inject",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply bool_val_inj; eauto.",
                        "VernacExtend",
                        "dc1a6768fa162a0f8af73bea511d7fdb173884f7"
                    ]
                },
                {
                    "command": [
                        "intros; eapply Mem.weak_valid_pointer_inject_val; eauto.",
                        "VernacExtend",
                        "e267bf439f648167b48939265079bff8ae0dcf14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_bool_bool_val",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (A: classify_bool t = match t with | Tint _ _ _ => bool_case_i | Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _ => if Archi.ptr64 then bool_case_l else bool_case_i | Tfloat F64 _ => bool_case_f | Tfloat F32 _ => bool_case_s | Tlong _ _ => bool_case_l | _ => bool_default end).",
                        "VernacExtend",
                        "8e41ef990fd51296d5f5e915e41198580f3d542b"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "unfold classify_bool; destruct t; simpl; auto.",
                        "VernacExtend",
                        "417fb2ae99bd28f2f61cab7e0eeef955adeb24ec"
                    ]
                },
                {
                    "command": [
                        "destruct i; auto.",
                        "VernacExtend",
                        "87858d2eb4ae115db76c3d7629e824551639dadb"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "unfold bool_val.",
                        "VernacExtend",
                        "461d1a32326d94ab8f548c442ce54d189fb3586b"
                    ]
                },
                {
                    "command": [
                        "rewrite A.",
                        "VernacExtend",
                        "66a3aec75a717b72a3c9a20459f4dabe8d0df2c1"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cast, classify_cast; remember Archi.ptr64 as ptr64; destruct t; simpl; auto; destruct v; auto.",
                        "VernacExtend",
                        "6c326f404527bf6c0443a5d78048a4f5b8aaed4c"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i0 Int.zero); auto.",
                        "VernacExtend",
                        "aa2fc6c0dc7224430a5ff37708531de25beab94e"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i0)); auto.",
                        "VernacExtend",
                        "9d45e13a1a65429d1aa699294a890587d858799b"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.eq i Int64.zero); auto.",
                        "VernacExtend",
                        "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
                    ]
                },
                {
                    "command": [
                        "destruct (negb ptr64); auto.",
                        "VernacExtend",
                        "e192c30747c877c1f3a30961bb6515654f9a3893"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct (Float.cmp Ceq f0 Float.zero); auto.",
                        "VernacExtend",
                        "da9bcd5afeb4701b578979b82a73b4beb014cad3"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct (Float32.cmp Ceq f0 Float32.zero); auto.",
                        "VernacExtend",
                        "263c46402434d8aedceea14048a6a00674eb70f5"
                    ]
                },
                {
                    "command": [
                        "destruct f; auto.",
                        "VernacExtend",
                        "87f5f254326e71a464ec5523b1f0dfe56f6854c1"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i Int.zero); auto.",
                        "VernacExtend",
                        "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.eq i Int64.zero); auto.",
                        "VernacExtend",
                        "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i Int.zero); auto.",
                        "VernacExtend",
                        "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.eq i Int64.zero); auto.",
                        "VernacExtend",
                        "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i Int.zero); auto.",
                        "VernacExtend",
                        "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Int64.eq i Int64.zero); auto.",
                        "VernacExtend",
                        "bc46a4a5a2a928a8735d0ecf1b9395d1a5aa463d"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct ptr64; auto.",
                        "VernacExtend",
                        "2705df4cef880640bf1941ad4bd326146e827381"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "destruct (Mem.weak_valid_pointer m b (Ptrofs.unsigned i)); auto.",
                        "VernacExtend",
                        "f23e5ed95f946999ebe3208d388833443a1a5009"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "notbool_bool_val",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold sem_notbool.",
                        "VernacExtend",
                        "93f56e078b9f38b4676839087c84a7e1259109d1"
                    ]
                },
                {
                    "command": [
                        "destruct (bool_val v t m) as [[] | ]; reflexivity.",
                        "VernacExtend",
                        "f0e4ec95ffd42e2a074981e13c02bff5690b7848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_int_int_idem",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct sz; simpl; auto.",
                        "VernacExtend",
                        "eeb2f63e889c5fbb981477d7e2b77b0a40decb38"
                    ]
                },
                {
                    "command": [
                        "destruct sg; [apply Int.sign_ext_idem|apply Int.zero_ext_idem]; compute; intuition congruence.",
                        "VernacExtend",
                        "92168333c0e8e307b56d83f134b3652080fdb9cc"
                    ]
                },
                {
                    "command": [
                        "destruct sg; [apply Int.sign_ext_idem|apply Int.zero_ext_idem]; compute; intuition congruence.",
                        "VernacExtend",
                        "92168333c0e8e307b56d83f134b3652080fdb9cc"
                    ]
                },
                {
                    "command": [
                        "destruct (Int.eq i Int.zero); auto.",
                        "VernacExtend",
                        "afc57f1a153e22d6fc1cc83a83a23eeee363a8a3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_val_is_casted",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "unfold sem_cast; intros.",
                        "VernacExtend",
                        "aed75c174ffe3ddb4bcfcfe1557978f5394bd013"
                    ]
                },
                {
                    "command": [
                        "destruct ty, ty'; simpl in H; DestructCases; constructor; auto.",
                        "VernacExtend",
                        "d6c183f0cc0fa036d8ddf17d9a793f6ced245d17"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_val_casted",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold sem_cast; inversion H; clear H; subst v ty; simpl.",
                        "VernacExtend",
                        "8904cd12c259fe7846d64473d8507f0fbc93acad"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64; [ | destruct (intsize_eq sz I32)].",
                        "VernacExtend",
                        "c2a0b5d1e509aa533705156a250d130bf9fd86bd"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct sz; f_equal; f_equal; assumption.",
                        "VernacExtend",
                        "442ed723bdb48b6db01491930c4d32a69181cf2e"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "subst sz; auto.",
                        "VernacExtend",
                        "9c6b053db64d2e2b9149570e0e29897f172e346d"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct sz; f_equal; f_equal; assumption.",
                        "VernacExtend",
                        "442ed723bdb48b6db01491930c4d32a69181cf2e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct Archi.ptr64; auto.",
                        "VernacExtend",
                        "a9cd18b10a2cc14dcbdb18cf89de664cd0fb419f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; auto.",
                        "VernacExtend",
                        "48df2b0b453adadcea8e6914bccb68bfc33b286b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; auto.",
                        "VernacExtend",
                        "48df2b0b453adadcea8e6914bccb68bfc33b286b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; auto.",
                        "VernacExtend",
                        "48df2b0b453adadcea8e6914bccb68bfc33b286b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; auto.",
                        "VernacExtend",
                        "48df2b0b453adadcea8e6914bccb68bfc33b286b"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite dec_eq_true; auto.",
                        "VernacExtend",
                        "e00f39dc3f4acd139de70eba042be899c6347cd5"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite dec_eq_true; auto.",
                        "VernacExtend",
                        "e00f39dc3f4acd139de70eba042be899c6347cd5"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_idempotent",
            "line_nb": 436,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply cast_val_casted.",
                        "VernacExtend",
                        "bdc0eda8ffd99f02dbb5f33d514f1d6f49c211fc"
                    ]
                },
                {
                    "command": [
                        "eapply cast_val_is_casted; eauto.",
                        "VernacExtend",
                        "507473f65bd03c429fba2f7033d74898a86f3214"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_int_type",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "typeconv_integer_promotion",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "destruct i; reflexivity.",
                        "VernacExtend",
                        "86d897b284d766a57d1a5afb9f1c7c66ae2b7a38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "classify_binarith_arithmetic_conversion",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "destruct t1; destruct t2; try reflexivity.",
                        "VernacExtend",
                        "85636987de7ff46dacac1282a6ab0f5ad6482a3d"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; destruct it0; reflexivity.",
                        "VernacExtend",
                        "cb8b9196ab85aeea6091ce4119580c0db0672d22"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct it; reflexivity.",
                        "VernacExtend",
                        "256c1757c995f4862ce0cceb462919b25a98b1a0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}