{
    "filename": "backend/RTLgenspec.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Coqlib.",
            "VernacRequire",
            "bbbe15041aca3a03300067f7acd445b462d537cc"
        ],
        [
            "Require Errors.",
            "VernacRequire",
            "9b3bde3dfe8399dc65a71f435647fb11c59dc638"
        ],
        [
            "Require Import Maps.",
            "VernacRequire",
            "f9a27637102e60e06a3c1ceb5a01819e80b9f645"
        ],
        [
            "Require Import AST.",
            "VernacRequire",
            "d103ecb096c06f34167fba01dd861491b0d5e84e"
        ],
        [
            "Require Import Integers.",
            "VernacRequire",
            "688f068e3335df7950b569ef75a5e993414c9874"
        ],
        [
            "Require Import Switch.",
            "VernacRequire",
            "1eaa1998544bbb29dbcfe82b0d7b10099dee3dc7"
        ],
        [
            "Require Import Op.",
            "VernacRequire",
            "ade4899dcb267df47fd0e69e3c413086816e6a6f"
        ],
        [
            "Require Import Registers.",
            "VernacRequire",
            "1607f789f69481494f718ae4501bc795077da4d4"
        ],
        [
            "Require Import CminorSel.",
            "VernacRequire",
            "8f44a8c8bdedecc7b568eacaa17774751ea00d66"
        ],
        [
            "Require Import RTL.",
            "VernacRequire",
            "4de1de47bcd350514abb6fbc1070eb15c88d7b2b"
        ],
        [
            "Require Import RTLgen.",
            "VernacRequire",
            "ebcf5093d9b15f0a49c74eb3d500a929b41c8f9e"
        ],
        [
            "Remark bind_inversion: forall (A B: Type) (f: mon A) (g: A -> mon B) (y: B) (s1 s3: state) (i: state_incr s1 s3), bind f g s1 = OK y s3 i -> exists x, exists s2, exists i1, exists i2, f s1 = OK x s2 i1 /\\ g x s2 = OK y s3 i2.",
            "VernacStartTheoremProof",
            "3e77b52f0fb80d4a5c7692dc6b281665267bbca7"
        ],
        [
            "intros until i.",
            "VernacExtend",
            "024130153c69509e16cb24095d428c78b5bdc272"
        ],
        [
            "unfold bind.",
            "VernacExtend",
            "92681da8eee126803006dd670c74799566b9f60d"
        ],
        [
            "destruct (f s1); intros.",
            "VernacExtend",
            "1f783c302be7a434a9d48acad47a8e78e0989dbd"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "exists a; exists s'; exists s.",
            "VernacExtend",
            "a704b0f8aa36bfc14a183930cf55e7bbbfbe1a9e"
        ],
        [
            "destruct (g a s'); inv H.",
            "VernacExtend",
            "2bf82cc7e79bcce0381155bad754aa6348d70608"
        ],
        [
            "exists s0; auto.",
            "VernacExtend",
            "ec95125a3d9f54555812d258ababd17c33a9eaef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark bind2_inversion: forall (A B C: Type) (f: mon (A*B)) (g: A -> B -> mon C) (z: C) (s1 s3: state) (i: state_incr s1 s3), bind2 f g s1 = OK z s3 i -> exists x, exists y, exists s2, exists i1, exists i2, f s1 = OK (x, y) s2 i1 /\\ g x y s2 = OK z s3 i2.",
            "VernacStartTheoremProof",
            "4b63176dbf87d68ca42b2bd8ecfbfeeaa02303e2"
        ],
        [
            "unfold bind2; intros.",
            "VernacExtend",
            "f584848ccbd823404bc9a074e091089bae6b608e"
        ],
        [
            "exploit bind_inversion; eauto.",
            "VernacExtend",
            "aa663124c65fbf524e2cde6602ecd303b6a9d7dc"
        ],
        [
            "intros [[x y] [s2 [i1 [i2 [P Q]]]]].",
            "VernacExtend",
            "78ac9f5dd79f47e73fc94e7306bb283b2112aea1"
        ],
        [
            "simpl in Q.",
            "VernacExtend",
            "14a47d62db49da93d3c69465ec8a6c586ee6bc72"
        ],
        [
            "exists x; exists y; exists s2; exists i1; exists i2; auto.",
            "VernacExtend",
            "de4684bf2eeac3e821b346165e215be8f6e711cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac monadInv1 H := match type of H with | (OK _ _ _ = OK _ _ _) => inversion H; clear H; try subst | (Error _ _ = OK _ _ _) => discriminate | (ret _ _ = OK _ _ _) => inversion H; clear H; try subst | (error _ _ = OK _ _ _) => discriminate | (bind ?F ?G ?S = OK ?X ?S' ?I) => let x := fresh \"x\" in ( let s := fresh \"s\" in ( let i1 := fresh \"INCR\" in ( let i2 := fresh \"INCR\" in ( let EQ1 := fresh \"EQ\" in ( let EQ2 := fresh \"EQ\" in ( destruct (bind_inversion _ _ F G X S S' I H) as [x [s [i1 [i2 [EQ1 EQ2]]]]]; clear H; try (monadInv1 EQ2))))))) | (bind2 ?F ?G ?S = OK ?X ?S' ?I) => let x1 := fresh \"x\" in ( let x2 := fresh \"x\" in ( let s := fresh \"s\" in ( let i1 := fresh \"INCR\" in ( let i2 := fresh \"INCR\" in ( let EQ1 := fresh \"EQ\" in ( let EQ2 := fresh \"EQ\" in ( destruct (bind2_inversion _ _ _ F G X S S' I H) as [x1 [x2 [s [i1 [i2 [EQ1 EQ2]]]]]]; clear H; try (monadInv1 EQ2)))))))) end.",
            "VernacExtend",
            "d52ae438ae329c554b9053b9a6e12a6ac90eb86f"
        ],
        [
            "Ltac monadInv H := match type of H with | (ret _ _ = OK _ _ _) => monadInv1 H | (error _ _ = OK _ _ _) => monadInv1 H | (bind ?F ?G ?S = OK ?X ?S' ?I) => monadInv1 H | (bind2 ?F ?G ?S = OK ?X ?S' ?I) => monadInv1 H | (?F _ _ _ _ _ _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ _ _ _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ _ _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H | (?F _ = OK _ _ _) => ((progress simpl in H) || unfold F in H); monadInv1 H end.",
            "VernacExtend",
            "2479ffe94d9be4f1b95944b3f1cbb6362239e76e"
        ],
        [
            "Hint Resolve state_incr_refl: rtlg.",
            "VernacHints",
            "8c1faa6618547c4956ecd7d453edf3c13dafda44"
        ],
        [
            "Lemma instr_at_incr: forall s1 s2 n i, state_incr s1 s2 -> s1.(st_code)!n = Some i -> s2.(st_code)!n = Some i.",
            "VernacStartTheoremProof",
            "d5e52a29d3e63415b3973abdcc7795888bcfdadb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "destruct (H3 n); congruence.",
            "VernacExtend",
            "a05da6eb631c78115645b3500535a6a069462509"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve instr_at_incr: rtlg.",
            "VernacHints",
            "90614a38372012254d71afc08181d71f73d72c1c"
        ],
        [
            "Ltac saturateTrans := match goal with | H1: state_incr ?x ?y, H2: state_incr ?y ?z |- _ => match goal with | H: state_incr x z |- _ => fail 1 | _ => let i := fresh \"INCR\" in (generalize (state_incr_trans x y z H1 H2); intro i; saturateTrans) end | _ => idtac end.",
            "VernacExtend",
            "07a50779120392c83174f5a766ddc54bd562c619"
        ],
        [
            "Definition reg_valid (r: reg) (s: state) : Prop := Plt r s.(st_nextreg).",
            "VernacDefinition",
            "10017d150836acce0c8440a2fe4522a1c1cf6ce9"
        ],
        [
            "Definition reg_fresh (r: reg) (s: state) : Prop := ~(Plt r s.(st_nextreg)).",
            "VernacDefinition",
            "f78e3b4484f675a52c344e5809d47a6687b1036f"
        ],
        [
            "Lemma valid_fresh_absurd: forall r s, reg_valid r s -> reg_fresh r s -> False.",
            "VernacStartTheoremProof",
            "89687c04285ace897c6e83492056da40a32f727b"
        ],
        [
            "intros r s.",
            "VernacExtend",
            "9315250cf8fda8a8e9001e036b3dbe7e5cd4e4a1"
        ],
        [
            "unfold reg_valid, reg_fresh; case r; tauto.",
            "VernacExtend",
            "40c784787234a64d28e9e23828e4986047a5e6be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve valid_fresh_absurd: rtlg.",
            "VernacHints",
            "9beffadd70f9cbdcf9c08883cd9835afcb76f48b"
        ],
        [
            "Lemma valid_fresh_different: forall r1 r2 s, reg_valid r1 s -> reg_fresh r2 s -> r1 <> r2.",
            "VernacStartTheoremProof",
            "9aedc8aa22e3e5e2ec1687143023cbc39f3ac67b"
        ],
        [
            "unfold not; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "subst r2.",
            "VernacExtend",
            "82192851837f0d29f97826949929ab06c55cce1e"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve valid_fresh_different: rtlg.",
            "VernacHints",
            "6b69f28cedb9bd8fbbe85ced620988d7c726aa39"
        ],
        [
            "Lemma reg_valid_incr: forall r s1 s2, state_incr s1 s2 -> reg_valid r s1 -> reg_valid r s2.",
            "VernacStartTheoremProof",
            "5ce9279748e1f178291c7848246d917f65a58284"
        ],
        [
            "intros r s1 s2 INCR.",
            "VernacExtend",
            "9899b0d736e0d442daf5c984f3bae1c36489451d"
        ],
        [
            "inversion INCR.",
            "VernacExtend",
            "8d892b4a13fbf5a96e5c1f2e746caaf891ef21a3"
        ],
        [
            "unfold reg_valid.",
            "VernacExtend",
            "7ff859b9382dcfa167cd1bd0833ab0900a9c33b4"
        ],
        [
            "intros; apply Plt_Ple_trans with (st_nextreg s1); auto.",
            "VernacExtend",
            "ad00b000af2f65012205f49a0512a79bfde2ef1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve reg_valid_incr: rtlg.",
            "VernacHints",
            "adec130a2b5f00ab6d4e8f75bf3c152e0d28fc5b"
        ],
        [
            "Lemma reg_fresh_decr: forall r s1 s2, state_incr s1 s2 -> reg_fresh r s2 -> reg_fresh r s1.",
            "VernacStartTheoremProof",
            "2797c7bc7158a9c96b660aea270f2f6783a4673c"
        ],
        [
            "intros r s1 s2 INCR.",
            "VernacExtend",
            "9899b0d736e0d442daf5c984f3bae1c36489451d"
        ],
        [
            "inversion INCR.",
            "VernacExtend",
            "8d892b4a13fbf5a96e5c1f2e746caaf891ef21a3"
        ],
        [
            "unfold reg_fresh; unfold not; intros.",
            "VernacExtend",
            "05cbfd9f7f913d2951921884a580b4e4104d4ade"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply Plt_Ple_trans with (st_nextreg s1); auto.",
            "VernacExtend",
            "1d3b7f640495f6e7181a544963d9e8fac29e3837"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve reg_fresh_decr: rtlg.",
            "VernacHints",
            "78012bdd7f3ae14c9efb1c2b56b10d76b2d20181"
        ],
        [
            "Definition regs_valid (rl: list reg) (s: state) : Prop := forall r, In r rl -> reg_valid r s.",
            "VernacDefinition",
            "23eb7b99c8bccec1cc080f7bb72542cc48d39491"
        ],
        [
            "Lemma regs_valid_nil: forall s, regs_valid nil s.",
            "VernacStartTheoremProof",
            "013e5a57a1c1edb01d2eb977f78aba331d29ff3c"
        ],
        [
            "intros; red; intros.",
            "VernacExtend",
            "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve regs_valid_nil: rtlg.",
            "VernacHints",
            "3baa92f6d9f6794feffe0b3fa8b4b501f04cedf7"
        ],
        [
            "Lemma regs_valid_cons: forall r1 rl s, reg_valid r1 s -> regs_valid rl s -> regs_valid (r1 :: rl) s.",
            "VernacStartTheoremProof",
            "39407bf464d26ceb634ac8bd56464171d6cd334e"
        ],
        [
            "intros; red; intros.",
            "VernacExtend",
            "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "subst r1; auto.",
            "VernacExtend",
            "912b9e72ee9668b5a7f24778866c81877f7dffdd"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma regs_valid_app: forall rl1 rl2 s, regs_valid rl1 s -> regs_valid rl2 s -> regs_valid (rl1 ++ rl2) s.",
            "VernacStartTheoremProof",
            "30056ad483fed6b9a730378202e17b6a112149fc"
        ],
        [
            "intros; red; intros.",
            "VernacExtend",
            "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
        ],
        [
            "apply in_app_iff in H1.",
            "VernacExtend",
            "1a06c6aa307c329e22f70fd3aa6366af830999e0"
        ],
        [
            "destruct H1; auto.",
            "VernacExtend",
            "7a20f9482fab69ae7a191b5e13d9ac465bf5b222"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma regs_valid_incr: forall s1 s2 rl, state_incr s1 s2 -> regs_valid rl s1 -> regs_valid rl s2.",
            "VernacStartTheoremProof",
            "551817d86cab0536c16750483d63b3f7ac8bf944"
        ],
        [
            "unfold regs_valid; intros; eauto with rtlg.",
            "VernacExtend",
            "df550f9bb59e76aedfc20d0b7e8ed413f980a175"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve regs_valid_incr: rtlg.",
            "VernacHints",
            "28bc6d01660d75a12ad98899825a3f4bfdc17661"
        ],
        [
            "Definition reg_in_map (m: mapping) (r: reg) : Prop := (exists id, m.(map_vars)!id = Some r) \\/ In r m.(map_letvars).",
            "VernacDefinition",
            "b06b9230fbc46076612e75c206b4d019ca6d490c"
        ],
        [
            "Definition map_valid (m: mapping) (s: state) : Prop := forall r, reg_in_map m r -> reg_valid r s.",
            "VernacDefinition",
            "f765aa66cc1c9c6db0e629dc58ce66007a80afa7"
        ],
        [
            "Lemma map_valid_incr: forall s1 s2 m, state_incr s1 s2 -> map_valid m s1 -> map_valid m s2.",
            "VernacStartTheoremProof",
            "ad4779f75cfc949ac2932f32100ed9ca5be04849"
        ],
        [
            "unfold map_valid; intros; eauto with rtlg.",
            "VernacExtend",
            "cec2437cf0ed68f8ac1a32aa1311c884a51a5e78"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve map_valid_incr: rtlg.",
            "VernacHints",
            "7ab0af34f8b366aa124afd8cc84a102e0e121923"
        ],
        [
            "Lemma add_instr_at: forall s1 s2 incr i n, add_instr i s1 = OK n s2 incr -> s2.(st_code)!n = Some i.",
            "VernacStartTheoremProof",
            "e0234f749f328a0584a5e88af7772833ccef9fa9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply PTree.gss.",
            "VernacExtend",
            "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve add_instr_at: rtlg.",
            "VernacHints",
            "45bb74b07e161a083fc33e0b0d2c3ce62b11d0a7"
        ],
        [
            "Lemma update_instr_at: forall n i s1 s2 incr u, update_instr n i s1 = OK u s2 incr -> s2.(st_code)!n = Some i.",
            "VernacStartTheoremProof",
            "d5abd49a234fe1456b05fc57c631a48d8a8da4b5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold update_instr in H.",
            "VernacExtend",
            "b0d34720c773548aab79e3c4ab5634cca1f829ef"
        ],
        [
            "destruct (plt n (st_nextnode s1)); try discriminate.",
            "VernacExtend",
            "b745de1f3413b77ebb8d8616332fe14ef6d5d02f"
        ],
        [
            "destruct (check_empty_node s1 n); try discriminate.",
            "VernacExtend",
            "3710444715cb6559f33d6047e5b879e1a45c110e"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply PTree.gss.",
            "VernacExtend",
            "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve update_instr_at: rtlg.",
            "VernacHints",
            "ac18e775fc1dbb6e0a4415af744c57aebe9c586c"
        ],
        [
            "Lemma new_reg_valid: forall s1 s2 r i, new_reg s1 = OK r s2 i -> reg_valid r s2.",
            "VernacStartTheoremProof",
            "c10c440a55aad42e7a691dac98551e3089a21867"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "unfold reg_valid; simpl.",
            "VernacExtend",
            "a5bdef0013287cdcec54fed14036521d571d4c40"
        ],
        [
            "apply Plt_succ.",
            "VernacExtend",
            "3925586d900ea8530f139977c6fc5c26f2e2ca64"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve new_reg_valid: rtlg.",
            "VernacHints",
            "31430e35c992885e977ba8422221aaec901db78b"
        ],
        [
            "Lemma new_reg_fresh: forall s1 s2 r i, new_reg s1 = OK r s2 i -> reg_fresh r s1.",
            "VernacStartTheoremProof",
            "8bf018778df34ad3e2556061d1bd102e5e3cef24"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "unfold reg_fresh; simpl.",
            "VernacExtend",
            "04b7e9785fa9baa9279237752efa77d6a243c19b"
        ],
        [
            "exact (Plt_strict _).",
            "VernacExtend",
            "7ddc6a496947619731530b5edd61754d8b395f39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve new_reg_fresh: rtlg.",
            "VernacHints",
            "3c369ac11259bfddc473e7e6e7eeb72ef2da6506"
        ],
        [
            "Lemma new_reg_not_in_map: forall s1 s2 m r i, new_reg s1 = OK r s2 i -> map_valid m s1 -> ~(reg_in_map m r).",
            "VernacStartTheoremProof",
            "5e0e2c19188560cd551cb0ea7760bbb11ac4d114"
        ],
        [
            "unfold not; intros; eauto with rtlg.",
            "VernacExtend",
            "4f0f05bfd490a02a3c2dc824a7be591b133ec8b3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve new_reg_not_in_map: rtlg.",
            "VernacHints",
            "6faab82174866d6c2293b01aa601593a5fe2c698"
        ],
        [
            "Lemma init_mapping_valid: forall s, map_valid init_mapping s.",
            "VernacStartTheoremProof",
            "1c62bdb78f4039a56c8844c0c7396f146043b282"
        ],
        [
            "unfold map_valid, init_mapping.",
            "VernacExtend",
            "58b6f811d6b4b54de19a3b92e7889777f80e78f3"
        ],
        [
            "intros s r [[id A] | B].",
            "VernacExtend",
            "20aaaf9b3cb425ac3a3dc1ccd51599c3792f24f5"
        ],
        [
            "simpl in A.",
            "VernacExtend",
            "dc9254dda65038a8da985f434d9893d4e6e0f31e"
        ],
        [
            "rewrite PTree.gempty in A; discriminate.",
            "VernacExtend",
            "989318306dcf45b4ff382a1d93d246869b275d9a"
        ],
        [
            "simpl in B.",
            "VernacExtend",
            "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_var_in_map: forall s1 s2 map name r i, find_var map name s1 = OK r s2 i -> reg_in_map map r.",
            "VernacStartTheoremProof",
            "b9f6bf520d57fccae19c408060645d9c04d2cac6"
        ],
        [
            "intros until r.",
            "VernacExtend",
            "5fd851fddc34031300dfa0145691dcf8dfbfd558"
        ],
        [
            "unfold find_var; caseEq (map.(map_vars)!name).",
            "VernacExtend",
            "cf98caa3a683dc5ad1963f9e003b6d350e36af54"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "left; exists name; auto.",
            "VernacExtend",
            "7f7321ec9a82173935cc4a190abaebf8232a4bd3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve find_var_in_map: rtlg.",
            "VernacHints",
            "84b3cee96184347e01099ba3c024edc04b05adf6"
        ],
        [
            "Lemma find_var_valid: forall s1 s2 map name r i, find_var map name s1 = OK r s2 i -> map_valid map s1 -> reg_valid r s1.",
            "VernacStartTheoremProof",
            "f0f9abc833098c3ce30717c6f8e26c8132abe02c"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve find_var_valid: rtlg.",
            "VernacHints",
            "a0bf4302aa65248b6bdc28c95c358d5243e7a7ad"
        ],
        [
            "Lemma find_letvar_in_map: forall s1 s2 map idx r i, find_letvar map idx s1 = OK r s2 i -> reg_in_map map r.",
            "VernacStartTheoremProof",
            "58e0e65f460710cbb32c02fd8d5da6066d102a95"
        ],
        [
            "intros until r.",
            "VernacExtend",
            "5fd851fddc34031300dfa0145691dcf8dfbfd558"
        ],
        [
            "unfold find_letvar.",
            "VernacExtend",
            "6268cbe4fdca16702492e1872d40010e4dc2f799"
        ],
        [
            "caseEq (nth_error (map_letvars map) idx); intros; monadInv H0.",
            "VernacExtend",
            "aee88f003d0a67f0a2e065869416d4becd04bf40"
        ],
        [
            "right; apply nth_error_in with idx; auto.",
            "VernacExtend",
            "5c92616486874ddfbcfe7f3f41bdbb375c81e44f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve find_letvar_in_map: rtlg.",
            "VernacHints",
            "57d64fd66c2ce1a655e0fdf21cfe6fa4b06ca232"
        ],
        [
            "Lemma find_letvar_valid: forall s1 s2 map idx r i, find_letvar map idx s1 = OK r s2 i -> map_valid map s1 -> reg_valid r s1.",
            "VernacStartTheoremProof",
            "1ffeb00c8c45f67aa57b0541b02d69d3939ba215"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve find_letvar_valid: rtlg.",
            "VernacHints",
            "d91f3cbae57caeec8ea005c9d4283ebd6850b839"
        ],
        [
            "Lemma add_var_valid: forall s1 s2 map1 map2 name r i, add_var map1 name s1 = OK (r, map2) s2 i -> map_valid map1 s1 -> reg_valid r s2 /\\ map_valid map2 s2.",
            "VernacStartTheoremProof",
            "fa006e25fd1cbaf421555dfeb73e6a5f5e4669f4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "inversion EQ.",
            "VernacExtend",
            "5a6b5fb7cd5d1feabf9fe391f5851ef589bda8d0"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intros r' [[id A] | B].",
            "VernacExtend",
            "3bbb9a494e4127ae40f54523433f8bb57e9a20ea"
        ],
        [
            "simpl in A.",
            "VernacExtend",
            "dc9254dda65038a8da985f434d9893d4e6e0f31e"
        ],
        [
            "rewrite PTree.gsspec in A.",
            "VernacExtend",
            "bae221891134530b3b4e9f7caf7ca2e2a5b9a813"
        ],
        [
            "destruct (peq id name).",
            "VernacExtend",
            "b2a1c39ba1d393e505e9f82b555cb721fecb6185"
        ],
        [
            "inv A.",
            "VernacExtend",
            "91ce09d6dfe89f57b6c4ea425a99a4df72516106"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "apply reg_valid_incr with s1.",
            "VernacExtend",
            "a276bfcc6e8df84fd3ea080d0fee3ff85f08d27e"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "left; exists id; auto.",
            "VernacExtend",
            "8509eb7377d764e8dd5de5fec1a2d888a91e695a"
        ],
        [
            "simpl in B.",
            "VernacExtend",
            "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
        ],
        [
            "apply reg_valid_incr with s1.",
            "VernacExtend",
            "a276bfcc6e8df84fd3ea080d0fee3ff85f08d27e"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "right; auto.",
            "VernacExtend",
            "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_var_find: forall s1 s2 map name r map' i, add_var map name s1 = OK (r,map') s2 i -> map'.(map_vars)!name = Some r.",
            "VernacStartTheoremProof",
            "a18464e57565b8ea87a27431fb1888399b81d069"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply PTree.gss.",
            "VernacExtend",
            "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_vars_valid: forall namel s1 s2 map1 map2 rl i, add_vars map1 namel s1 = OK (rl, map2) s2 i -> map_valid map1 s1 -> regs_valid rl s2 /\\ map_valid map2 s2.",
            "VernacStartTheoremProof",
            "45bfbbca3f6d63d6aaacfb4fd1c62321e01d0958"
        ],
        [
            "induction namel; simpl; intros; monadInv H.",
            "VernacExtend",
            "321fd1cd009c9346b185f627dc627652c71e7f09"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "red; simpl; intros; tauto.",
            "VernacExtend",
            "cc9df851e933fb0096fb47ba4bbd108fa1b321a9"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "exploit IHnamel; eauto.",
            "VernacExtend",
            "8d075499afd6c0b40c02a8130db997fa87e703c8"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "exploit add_var_valid; eauto.",
            "VernacExtend",
            "a4b933e5bdf2cfe013a14e8c3186aa88981c7953"
        ],
        [
            "intros [C D].",
            "VernacExtend",
            "2f6a424bd743322897b5ce3b772a6736bb0cd683"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply regs_valid_cons; eauto with rtlg.",
            "VernacExtend",
            "0b1512cad3f2fad92ba5efd06d27df3e11cefd9e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_var_letenv: forall map1 id s1 r map2 s2 i, add_var map1 id s1 = OK (r, map2) s2 i -> map2.(map_letvars) = map1.(map_letvars).",
            "VernacStartTheoremProof",
            "38d7775f3409757542de6d3ec9646d68ecee9bd0"
        ],
        [
            "intros; monadInv H.",
            "VernacExtend",
            "0c2b6902ad085a0c6ccc111fb8ec35ef21fd8802"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_vars_letenv: forall il map1 s1 rl map2 s2 i, add_vars map1 il s1 = OK (rl, map2) s2 i -> map2.(map_letvars) = map1.(map_letvars).",
            "VernacStartTheoremProof",
            "577c1756331e229aa35a816edf1d32d2267e931a"
        ],
        [
            "induction il; simpl; intros; monadInv H.",
            "VernacExtend",
            "4b75c33a3edadac01b69546897b04745e2c64456"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "transitivity (map_letvars x0).",
            "VernacExtend",
            "5dc50a89c082623ba8d7daeb08a39b559ef05d89"
        ],
        [
            "eapply add_var_letenv; eauto.",
            "VernacExtend",
            "ba1b9aa848a693a6707dec9a2b3df897e64d6e59"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_letvar_valid: forall map s r, map_valid map s -> reg_valid r s -> map_valid (add_letvar map r) s.",
            "VernacStartTheoremProof",
            "3fa098b816853c8a74de42c0d0f8a55f029f31ef"
        ],
        [
            "intros; red; intros.",
            "VernacExtend",
            "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
        ],
        [
            "destruct H1 as [[id A]|B].",
            "VernacExtend",
            "161d4ff69da46838c01b1c60c2bcd6f1c470be58"
        ],
        [
            "simpl in A.",
            "VernacExtend",
            "dc9254dda65038a8da985f434d9893d4e6e0f31e"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "left; exists id; auto.",
            "VernacExtend",
            "8509eb7377d764e8dd5de5fec1a2d888a91e695a"
        ],
        [
            "simpl in B.",
            "VernacExtend",
            "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
        ],
        [
            "elim B; intro.",
            "VernacExtend",
            "f2ea7c136386fac888e52139bf6605f4f328a47e"
        ],
        [
            "subst r0; auto.",
            "VernacExtend",
            "0b55e374b17d6d88d3626220bb2d82f045c5f417"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "right; auto.",
            "VernacExtend",
            "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_reg_valid: forall a s1 s2 map r i, map_valid map s1 -> alloc_reg map a s1 = OK r s2 i -> reg_valid r s2.",
            "VernacStartTheoremProof",
            "187f0040519cc430d23ae190059126cdd3a58a86"
        ],
        [
            "intros until r.",
            "VernacExtend",
            "5fd851fddc34031300dfa0145691dcf8dfbfd558"
        ],
        [
            "unfold alloc_reg.",
            "VernacExtend",
            "dd1e1b9f3183c1831d539ee893d45f0eca609306"
        ],
        [
            "case a; eauto with rtlg.",
            "VernacExtend",
            "2b5837d7191602c67fc7fb11fbbe5e73a80f5a83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve alloc_reg_valid: rtlg.",
            "VernacHints",
            "48d161b4b799c19eaa32c2fa226048928591ef78"
        ],
        [
            "Lemma alloc_reg_fresh_or_in_map: forall map a s r s' i, map_valid map s -> alloc_reg map a s = OK r s' i -> reg_in_map map r \\/ reg_fresh r s.",
            "VernacStartTheoremProof",
            "a60b8fee8aed4478696981ab4e82a58c126f159d"
        ],
        [
            "intros until s'.",
            "VernacExtend",
            "4d918992d4b8d318157fa3324c436252b6bc34d7"
        ],
        [
            "unfold alloc_reg.",
            "VernacExtend",
            "dd1e1b9f3183c1831d539ee893d45f0eca609306"
        ],
        [
            "destruct a; intros; try (right; eauto with rtlg; fail).",
            "VernacExtend",
            "651c55bed6d86320aa32e3b87f693b95eb7a41bb"
        ],
        [
            "left; eauto with rtlg.",
            "VernacExtend",
            "191b089fb724ca1bb3ac38dc73ae72411d05413c"
        ],
        [
            "left; eauto with rtlg.",
            "VernacExtend",
            "191b089fb724ca1bb3ac38dc73ae72411d05413c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_regs_valid: forall al s1 s2 map rl i, map_valid map s1 -> alloc_regs map al s1 = OK rl s2 i -> regs_valid rl s2.",
            "VernacStartTheoremProof",
            "c9bdb03d90597ed7d987dc23dbf4718e66d048d4"
        ],
        [
            "induction al; simpl; intros; monadInv H0.",
            "VernacExtend",
            "88d8a458455c59c6162a5f5de466790ef4819a3a"
        ],
        [
            "apply regs_valid_nil.",
            "VernacExtend",
            "fe6440524ff1fb9dac01bbe87586649c5019dda3"
        ],
        [
            "apply regs_valid_cons.",
            "VernacExtend",
            "ddd297f9d54a3bdc1f3f972d7aa86f0423621325"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve alloc_regs_valid: rtlg.",
            "VernacHints",
            "00ec33c15b52646e88dd47763e067f650f278ef2"
        ],
        [
            "Lemma alloc_regs_fresh_or_in_map: forall map al s rl s' i, map_valid map s -> alloc_regs map al s = OK rl s' i -> forall r, In r rl -> reg_in_map map r \\/ reg_fresh r s.",
            "VernacStartTheoremProof",
            "d5f49470e70b218dcfa633474cd2c814332e1ad4"
        ],
        [
            "induction al; simpl; intros; monadInv H0.",
            "VernacExtend",
            "88d8a458455c59c6162a5f5de466790ef4819a3a"
        ],
        [
            "elim H1.",
            "VernacExtend",
            "2ee512db90fb1d268bb2752d9c0b7a5339eb8a0a"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "subst r.",
            "VernacExtend",
            "c686b3401e0bea48f47b86c5826fc50275e7fe3d"
        ],
        [
            "eapply alloc_reg_fresh_or_in_map; eauto.",
            "VernacExtend",
            "694d0d1cd830d355246c88c8481efccf09296511"
        ],
        [
            "exploit IHal.",
            "VernacExtend",
            "47339270ac9933463ffaebe54a815d473e10e2d6"
        ],
        [
            "2: eauto.",
            "VernacExtend",
            "3f909af978c779ee16bb6a21f03c4b427bd31cf8"
        ],
        [
            "apply map_valid_incr with s; eauto with rtlg.",
            "VernacExtend",
            "a41f54b31d4d2739920da6c51959d1877edfc3ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "intros [A|B].",
            "VernacExtend",
            "782833abaf6ecb36fd2585722846c4137f0bcf98"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "right; eauto with rtlg.",
            "VernacExtend",
            "8dd8613afc38e3890c2dcd789e44e4e10d6e537b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_optreg_valid: forall dest s1 s2 map r i, map_valid map s1 -> alloc_optreg map dest s1 = OK r s2 i -> reg_valid r s2.",
            "VernacStartTheoremProof",
            "258a9868b7b5bf7a8d3c5c9c11b4eac217178dbf"
        ],
        [
            "intros until r.",
            "VernacExtend",
            "5fd851fddc34031300dfa0145691dcf8dfbfd558"
        ],
        [
            "unfold alloc_reg.",
            "VernacExtend",
            "dd1e1b9f3183c1831d539ee893d45f0eca609306"
        ],
        [
            "case dest; eauto with rtlg.",
            "VernacExtend",
            "3a5b35e480674b79dbbb4fe3e61ed82d2abdec10"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve alloc_optreg_valid: rtlg.",
            "VernacHints",
            "14f8c10c7b50d4178a0391150a3c2c30a42c5aaf"
        ],
        [
            "Lemma alloc_optreg_fresh_or_in_map: forall map dest s r s' i, map_valid map s -> alloc_optreg map dest s = OK r s' i -> reg_in_map map r \\/ reg_fresh r s.",
            "VernacStartTheoremProof",
            "c9dcbfb4288994ea7db9fe7e27f7b8b2fa0877c9"
        ],
        [
            "intros until s'.",
            "VernacExtend",
            "4d918992d4b8d318157fa3324c436252b6bc34d7"
        ],
        [
            "unfold alloc_optreg.",
            "VernacExtend",
            "35380b401985089b3bbe7f6a4226bae08a327850"
        ],
        [
            "destruct dest; intros.",
            "VernacExtend",
            "4b00ed5b5ab20cadc93add939d5b2afecb49645d"
        ],
        [
            "left; eauto with rtlg.",
            "VernacExtend",
            "191b089fb724ca1bb3ac38dc73ae72411d05413c"
        ],
        [
            "right; eauto with rtlg.",
            "VernacExtend",
            "8dd8613afc38e3890c2dcd789e44e4e10d6e537b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive target_reg_ok (map: mapping) (pr: list reg): expr -> reg -> Prop := | target_reg_var: forall id r, map.(map_vars)!id = Some r -> target_reg_ok map pr (Evar id) r | target_reg_letvar: forall idx r, nth_error map.(map_letvars) idx = Some r -> target_reg_ok map pr (Eletvar idx) r | target_reg_other: forall a r, ~(reg_in_map map r) -> ~In r pr -> target_reg_ok map pr a r.",
            "VernacInductive",
            "b3a9af384fe4cbe9ba5a987aa7863b8343a00214"
        ],
        [
            "Inductive target_regs_ok (map: mapping) (pr: list reg): exprlist -> list reg -> Prop := | target_regs_nil: target_regs_ok map pr Enil nil | target_regs_cons: forall a1 al r1 rl, target_reg_ok map pr a1 r1 -> target_regs_ok map (r1 :: pr) al rl -> target_regs_ok map pr (Econs a1 al) (r1 :: rl).",
            "VernacInductive",
            "9d384471ea3a9604897b885852878092c78d56df"
        ],
        [
            "Lemma target_reg_ok_append: forall map pr a r, target_reg_ok map pr a r -> forall pr', (forall r', In r' pr' -> reg_in_map map r' \\/ r' <> r) -> target_reg_ok map (pr' ++ pr) a r.",
            "VernacStartTheoremProof",
            "a5e01e2333d07ce7895c35a3414fa36c93abebf6"
        ],
        [
            "induction 1; intros.",
            "VernacExtend",
            "176684f910d62ec20fbc75549575bf1cd34fa8ec"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "red; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "elim (in_app_or _ _ _ H2); intro.",
            "VernacExtend",
            "a3fd480c224e02f17b4fde53beae5d1f9a56d985"
        ],
        [
            "generalize (H1 _ H3).",
            "VernacExtend",
            "b10f8f16648838da431a25f76098dc231c5692ae"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma target_reg_ok_cons: forall map pr a r, target_reg_ok map pr a r -> forall r', reg_in_map map r' \\/ r' <> r -> target_reg_ok map (r' :: pr) a r.",
            "VernacStartTheoremProof",
            "a7e934633c912a53416f47a229eef5148cb84b2f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "change (r' :: pr) with ((r' :: nil) ++ pr).",
            "VernacExtend",
            "cd26faa479e29912ff74952843a6202c7095f0b6"
        ],
        [
            "apply target_reg_ok_append; auto.",
            "VernacExtend",
            "475d65a44c708e9d738b9ff7797c49215b886528"
        ],
        [
            "intros r'' [A|B].",
            "VernacExtend",
            "e53ce511a31d8b6f3f5e02b440d64d887e3cbcbf"
        ],
        [
            "subst r''; auto.",
            "VernacExtend",
            "5b7d8e5496ef494339dacdfe22079a44a2487b52"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma new_reg_target_ok: forall map pr s1 a r s2 i, map_valid map s1 -> regs_valid pr s1 -> new_reg s1 = OK r s2 i -> target_reg_ok map pr a r.",
            "VernacStartTheoremProof",
            "d8ef61c5a1b9017022e0b1bedbb7036d93a50584"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "red; intro.",
            "VernacExtend",
            "12e00b6ab6f8834b6f81959ca42843abaa311f37"
        ],
        [
            "apply valid_fresh_absurd with r s1.",
            "VernacExtend",
            "7457d7c5104c16b5f8648edbacbb283b013d0e7c"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "red; intro.",
            "VernacExtend",
            "12e00b6ab6f8834b6f81959ca42843abaa311f37"
        ],
        [
            "apply valid_fresh_absurd with r s1.",
            "VernacExtend",
            "7457d7c5104c16b5f8648edbacbb283b013d0e7c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_reg_target_ok: forall map pr s1 a r s2 i, map_valid map s1 -> regs_valid pr s1 -> alloc_reg map a s1 = OK r s2 i -> target_reg_ok map pr a r.",
            "VernacStartTheoremProof",
            "a8467315e893e99f347fa6192420eaf5aa5538cb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold alloc_reg in H1.",
            "VernacExtend",
            "1a579925e9611be3d135c5259ca960a24d8a0aa4"
        ],
        [
            "destruct a; try (eapply new_reg_target_ok; eauto; fail).",
            "VernacExtend",
            "5ad1e78b3f23b94f824890838d5d6701dab61248"
        ],
        [
            "generalize H1; unfold find_var.",
            "VernacExtend",
            "75378de78300095eca5fafd82dd88334ab0f9054"
        ],
        [
            "caseEq (map_vars map)!i0; intros.",
            "VernacExtend",
            "6cf84e665f27b48651e8ed4c8d0f485f75805932"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
        ],
        [
            "generalize H1; unfold find_letvar.",
            "VernacExtend",
            "22bc8fd53713de7c35a0ceb9cfde25c22e78b6c8"
        ],
        [
            "caseEq (nth_error (map_letvars map) n); intros.",
            "VernacExtend",
            "385d5b859234c0f5957cb2f66489f87ac42dac88"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "inv H3.",
            "VernacExtend",
            "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_regs_target_ok: forall map al pr s1 rl s2 i, map_valid map s1 -> regs_valid pr s1 -> alloc_regs map al s1 = OK rl s2 i -> target_regs_ok map pr al rl.",
            "VernacStartTheoremProof",
            "b8a9e0411db902e10e4214ea655468760eced7f2"
        ],
        [
            "induction al; intros; monadInv H1.",
            "VernacExtend",
            "5c96a4d0bdb68ae6208d81d002099adfa2a9c927"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply alloc_reg_target_ok; eauto.",
            "VernacExtend",
            "5101f94d162912336c6791579db07ab88c57a4dd"
        ],
        [
            "apply IHal with s s2 INCR1; eauto with rtlg.",
            "VernacExtend",
            "1170f2a2f835fad8dc11977ab88e5a913ee597e3"
        ],
        [
            "apply regs_valid_cons; eauto with rtlg.",
            "VernacExtend",
            "0b1512cad3f2fad92ba5efd06d27df3e11cefd9e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve new_reg_target_ok alloc_reg_target_ok alloc_regs_target_ok: rtlg.",
            "VernacHints",
            "a7d2a5ea958513069b826b7ec67ccbc836a1662d"
        ],
        [
            "Inductive return_reg_ok: state -> mapping -> option reg -> Prop := | return_reg_ok_none: forall s map, return_reg_ok s map None | return_reg_ok_some: forall s map r, ~(reg_in_map map r) -> reg_valid r s -> return_reg_ok s map (Some r).",
            "VernacInductive",
            "76fbff4db7abbb24723d201267cd336583bc584a"
        ],
        [
            "Lemma return_reg_ok_incr: forall s map rret, return_reg_ok s map rret -> forall s', state_incr s s' -> return_reg_ok s' map rret.",
            "VernacStartTheoremProof",
            "591e144b755645e38dde4acfc62ec96eda5662d3"
        ],
        [
            "induction 1; intros; econstructor; eauto with rtlg.",
            "VernacExtend",
            "734628621497c191c60a7d1b8a687787a9c526f8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve return_reg_ok_incr: rtlg.",
            "VernacHints",
            "0a001948a89fd79586ea8033f8e764582c16f9ea"
        ],
        [
            "Lemma new_reg_return_ok: forall s1 r s2 map sig i, new_reg s1 = OK r s2 i -> map_valid map s1 -> return_reg_ok s2 map (ret_reg sig r).",
            "VernacStartTheoremProof",
            "6c14050ff66eb468a596013dcf481a7e52c3ba5d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold ret_reg.",
            "VernacExtend",
            "8a08bd33f7f5536aaed05713e0216c0b3363c42c"
        ],
        [
            "destruct (sig_res sig); constructor.",
            "VernacExtend",
            "d21899872b9784359ea5e10c99371d83a669c5da"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive tr_move (c: code): node -> reg -> node -> reg -> Prop := | tr_move_0: forall n r, tr_move c n r n r | tr_move_1: forall ns rs nd rd, c!ns = Some (Iop Omove (rs :: nil) rd nd) -> tr_move c ns rs nd rd.",
            "VernacInductive",
            "fc98c34e754130c3e1f29edc0ec1874605c200a1"
        ],
        [
            "Inductive reg_map_ok: mapping -> reg -> option ident -> Prop := | reg_map_ok_novar: forall map rd, ~reg_in_map map rd -> reg_map_ok map rd None | reg_map_ok_somevar: forall map rd id, map.(map_vars)!id = Some rd -> reg_map_ok map rd (Some id).",
            "VernacInductive",
            "a20e489aad5011bbb8c18b68ed2b68e3564f3f3b"
        ],
        [
            "Hint Resolve reg_map_ok_novar: rtlg.",
            "VernacHints",
            "ec67bac28397a28e9e65710edc705a9e9548cddb"
        ],
        [
            "Inductive tr_expr (c: code): mapping -> list reg -> expr -> node -> node -> reg -> option ident -> Prop := | tr_Evar: forall map pr id ns nd r rd dst, map.(map_vars)!id = Some r -> ((rd = r /\\ dst = None) \\/ (reg_map_ok map rd dst /\\ ~In rd pr)) -> tr_move c ns r nd rd -> tr_expr c map pr (Evar id) ns nd rd dst | tr_Eop: forall map pr op al ns nd rd n1 rl dst, tr_exprlist c map pr al ns n1 rl -> c!n1 = Some (Iop op rl rd nd) -> reg_map_ok map rd dst -> ~In rd pr -> tr_expr c map pr (Eop op al) ns nd rd dst | tr_Eload: forall map pr chunk addr al ns nd rd n1 rl dst, tr_exprlist c map pr al ns n1 rl -> c!n1 = Some (Iload chunk addr rl rd nd) -> reg_map_ok map rd dst -> ~In rd pr -> tr_expr c map pr (Eload chunk addr al) ns nd rd dst | tr_Econdition: forall map pr a ifso ifnot ns nd rd ntrue nfalse dst, tr_condition c map pr a ns ntrue nfalse -> tr_expr c map pr ifso ntrue nd rd dst -> tr_expr c map pr ifnot nfalse nd rd dst -> tr_expr c map pr (Econdition a ifso ifnot) ns nd rd dst | tr_Elet: forall map pr b1 b2 ns nd rd n1 r dst, ~reg_in_map map r -> tr_expr c map pr b1 ns n1 r None -> tr_expr c (add_letvar map r) pr b2 n1 nd rd dst -> tr_expr c map pr (Elet b1 b2) ns nd rd dst | tr_Eletvar: forall map pr n ns nd rd r dst, List.nth_error map.(map_letvars) n = Some r -> ((rd = r /\\ dst = None) \\/ (reg_map_ok map rd dst /\\ ~In rd pr)) -> tr_move c ns r nd rd -> tr_expr c map pr (Eletvar n) ns nd rd dst | tr_Ebuiltin: forall map pr ef al ns nd rd dst n1 rl, tr_exprlist c map pr al ns n1 rl -> c!n1 = Some (Ibuiltin ef (List.map (@BA reg) rl) (BR rd) nd) -> reg_map_ok map rd dst -> ~In rd pr -> tr_expr c map pr (Ebuiltin ef al) ns nd rd dst | tr_Eexternal: forall map pr id sg al ns nd rd dst n1 rl, tr_exprlist c map pr al ns n1 rl -> c!n1 = Some (Icall sg (inr _ id) rl rd nd) -> reg_map_ok map rd dst -> ~In rd pr -> tr_expr c map pr (Eexternal id sg al) ns nd rd dst with tr_condition (c: code): mapping -> list reg -> condexpr -> node -> node -> node -> Prop := | tr_CEcond: forall map pr cond bl ns ntrue nfalse n1 rl, tr_exprlist c map pr bl ns n1 rl -> c!n1 = Some (Icond cond rl ntrue nfalse) -> tr_condition c map pr (CEcond cond bl) ns ntrue nfalse | tr_CEcondition: forall map pr a1 a2 a3 ns ntrue nfalse n2 n3, tr_condition c map pr a1 ns n2 n3 -> tr_condition c map pr a2 n2 ntrue nfalse -> tr_condition c map pr a3 n3 ntrue nfalse -> tr_condition c map pr (CEcondition a1 a2 a3) ns ntrue nfalse | tr_CElet: forall map pr a b ns ntrue nfalse r n1, ~reg_in_map map r -> tr_expr c map pr a ns n1 r None -> tr_condition c (add_letvar map r) pr b n1 ntrue nfalse -> tr_condition c map pr (CElet a b) ns ntrue nfalse with tr_exprlist (c: code): mapping -> list reg -> exprlist -> node -> node -> list reg -> Prop := | tr_Enil: forall map pr n, tr_exprlist c map pr Enil n n nil | tr_Econs: forall map pr a1 al ns nd r1 rl n1, tr_expr c map pr a1 ns n1 r1 None -> tr_exprlist c map (r1 :: pr) al n1 nd rl -> tr_exprlist c map pr (Econs a1 al) ns nd (r1 :: rl).",
            "VernacInductive",
            "1b33c763e5e0140678cf0be45d2b7c325e759b45"
        ],
        [
            "Definition tr_jumptable (nexits: list node) (tbl: list nat) (ttbl: list node) : Prop := forall v act, list_nth_z tbl v = Some act -> exists n, list_nth_z ttbl v = Some n /\\ nth_error nexits act = Some n.",
            "VernacDefinition",
            "923110f2f71b35b7dfd962a5e6a5c66657b8071d"
        ],
        [
            "Inductive tr_exitexpr (c: code): mapping -> exitexpr -> node -> list node -> Prop := | tr_XEcond: forall map x n nexits, nth_error nexits x = Some n -> tr_exitexpr c map (XEexit x) n nexits | tr_XEjumptable: forall map a tbl ns nexits n1 r tbl', tr_jumptable nexits tbl tbl' -> tr_expr c map nil a ns n1 r None -> c!n1 = Some (Ijumptable r tbl') -> tr_exitexpr c map (XEjumptable a tbl) ns nexits | tr_XEcondition: forall map a1 a2 a3 ns nexits n2 n3, tr_condition c map nil a1 ns n2 n3 -> tr_exitexpr c map a2 n2 nexits -> tr_exitexpr c map a3 n3 nexits -> tr_exitexpr c map (XEcondition a1 a2 a3) ns nexits | tr_XElet: forall map a b ns nexits r n1, ~reg_in_map map r -> tr_expr c map nil a ns n1 r None -> tr_exitexpr c (add_letvar map r) b n1 nexits -> tr_exitexpr c map (XElet a b) ns nexits.",
            "VernacInductive",
            "b0c13e8835c957b1d40b569b461d1e2695475311"
        ],
        [
            "Inductive tr_builtin_res: mapping -> builtin_res ident -> builtin_res reg -> Prop := | tr_builtin_res_var: forall map id r, map.(map_vars)!id = Some r -> tr_builtin_res map (BR id) (BR r) | tr_builtin_res_none: forall map, tr_builtin_res map BR_none BR_none | tr_builtin_res_fresh: forall map r, ~reg_in_map map r -> tr_builtin_res map BR_none (BR r).",
            "VernacInductive",
            "db600b4a635888b43ad1fb88e31bf10347294b0e"
        ],
        [
            "Inductive tr_stmt (c: code) (map: mapping): stmt -> node -> node -> list node -> labelmap -> node -> option reg -> Prop := | tr_Sskip: forall ns nexits ngoto nret rret, tr_stmt c map Sskip ns ns nexits ngoto nret rret | tr_Sassign: forall id a ns nd nexits ngoto nret rret r, map.(map_vars)!id = Some r -> tr_expr c map nil a ns nd r (Some id) -> tr_stmt c map (Sassign id a) ns nd nexits ngoto nret rret | tr_Sstore: forall chunk addr al b ns nd nexits ngoto nret rret rd n1 rl n2, tr_exprlist c map nil al ns n1 rl -> tr_expr c map rl b n1 n2 rd None -> c!n2 = Some (Istore chunk addr rl rd nd) -> tr_stmt c map (Sstore chunk addr al b) ns nd nexits ngoto nret rret | tr_Scall: forall optid sig b cl ns nd nexits ngoto nret rret rd n1 rf n2 rargs, tr_expr c map nil b ns n1 rf None -> tr_exprlist c map (rf :: nil) cl n1 n2 rargs -> c!n2 = Some (Icall sig (inl _ rf) rargs rd nd) -> reg_map_ok map rd optid -> tr_stmt c map (Scall optid sig (inl _ b) cl) ns nd nexits ngoto nret rret | tr_Scall_imm: forall optid sig id cl ns nd nexits ngoto nret rret rd n2 rargs, tr_exprlist c map nil cl ns n2 rargs -> c!n2 = Some (Icall sig (inr _ id) rargs rd nd) -> reg_map_ok map rd optid -> tr_stmt c map (Scall optid sig (inr _ id) cl) ns nd nexits ngoto nret rret | tr_Stailcall: forall sig b cl ns nd nexits ngoto nret rret n1 rf n2 rargs, tr_expr c map nil b ns n1 rf None -> tr_exprlist c map (rf :: nil) cl n1 n2 rargs -> c!n2 = Some (Itailcall sig (inl _ rf) rargs) -> tr_stmt c map (Stailcall sig (inl _ b) cl) ns nd nexits ngoto nret rret | tr_Stailcall_imm: forall sig id cl ns nd nexits ngoto nret rret n2 rargs, tr_exprlist c map nil cl ns n2 rargs -> c!n2 = Some (Itailcall sig (inr _ id) rargs) -> tr_stmt c map (Stailcall sig (inr _ id) cl) ns nd nexits ngoto nret rret | tr_Sbuiltin: forall res ef args ns nd nexits ngoto nret rret res' n1 rargs, tr_exprlist c map nil (exprlist_of_expr_list (params_of_builtin_args args)) ns n1 rargs -> c!n1 = Some (Ibuiltin ef (convert_builtin_args args rargs) res' nd) -> tr_builtin_res map res res' -> tr_stmt c map (Sbuiltin res ef args) ns nd nexits ngoto nret rret | tr_Sseq: forall s1 s2 ns nd nexits ngoto nret rret n, tr_stmt c map s2 n nd nexits ngoto nret rret -> tr_stmt c map s1 ns n nexits ngoto nret rret -> tr_stmt c map (Sseq s1 s2) ns nd nexits ngoto nret rret | tr_Sifthenelse: forall a strue sfalse ns nd nexits ngoto nret rret ntrue nfalse, tr_stmt c map strue ntrue nd nexits ngoto nret rret -> tr_stmt c map sfalse nfalse nd nexits ngoto nret rret -> tr_condition c map nil a ns ntrue nfalse -> tr_stmt c map (Sifthenelse a strue sfalse) ns nd nexits ngoto nret rret | tr_Sloop: forall sbody ns nd nexits ngoto nret rret nloop nend, tr_stmt c map sbody nloop nend nexits ngoto nret rret -> c!ns = Some(Inop nloop) -> c!nend = Some(Inop nloop) -> tr_stmt c map (Sloop sbody) ns nd nexits ngoto nret rret | tr_Sblock: forall sbody ns nd nexits ngoto nret rret, tr_stmt c map sbody ns nd (nd :: nexits) ngoto nret rret -> tr_stmt c map (Sblock sbody) ns nd nexits ngoto nret rret | tr_Sexit: forall n ns nd nexits ngoto nret rret, nth_error nexits n = Some ns -> tr_stmt c map (Sexit n) ns nd nexits ngoto nret rret | tr_Sswitch: forall a ns nd nexits ngoto nret rret, tr_exitexpr c map a ns nexits -> tr_stmt c map (Sswitch a) ns nd nexits ngoto nret rret | tr_Sreturn_none: forall nret nd nexits ngoto rret, tr_stmt c map (Sreturn None) nret nd nexits ngoto nret rret | tr_Sreturn_some: forall a ns nd nexits ngoto nret rret, tr_expr c map nil a ns nret rret None -> tr_stmt c map (Sreturn (Some a)) ns nd nexits ngoto nret (Some rret) | tr_Slabel: forall lbl s ns nd nexits ngoto nret rret n, ngoto!lbl = Some n -> c!n = Some (Inop ns) -> tr_stmt c map s ns nd nexits ngoto nret rret -> tr_stmt c map (Slabel lbl s) ns nd nexits ngoto nret rret | tr_Sgoto: forall lbl ns nd nexits ngoto nret rret, ngoto!lbl = Some ns -> tr_stmt c map (Sgoto lbl) ns nd nexits ngoto nret rret.",
            "VernacInductive",
            "43b6327fa2b350c25cce75ae3cd8b3f775cf04d1"
        ],
        [
            "Inductive tr_function: CminorSel.function -> RTL.function -> Prop := | tr_function_intro: forall f code rparams map1 s0 s1 i1 rvars map2 s2 i2 nentry ngoto nret rret orret, add_vars init_mapping f.(CminorSel.fn_params) s0 = OK (rparams, map1) s1 i1 -> add_vars map1 f.(CminorSel.fn_vars) s1 = OK (rvars, map2) s2 i2 -> orret = ret_reg f.(CminorSel.fn_sig) rret -> tr_stmt code map2 f.(CminorSel.fn_body) nentry nret nil ngoto nret orret -> code!nret = Some(Ireturn orret) -> tr_function f (RTL.mkfunction f.(CminorSel.fn_sig) rparams f.(CminorSel.fn_stackspace) code nentry).",
            "VernacInductive",
            "77b18ca4acbd55f6be48e2a87908fad5edb9aee5"
        ],
        [
            "Lemma tr_move_incr: forall s1 s2, state_incr s1 s2 -> forall ns rs nd rd, tr_move s1.(st_code) ns rs nd rd -> tr_move s2.(st_code) ns rs nd rd.",
            "VernacStartTheoremProof",
            "7da725ab3edbbd7f97562f6c3e993b2c4ee683f6"
        ],
        [
            "induction 2; econstructor; eauto with rtlg.",
            "VernacExtend",
            "88336d1ac31f16f399d58ba044978daae25592f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tr_expr_incr: forall s1 s2, state_incr s1 s2 -> forall map pr a ns nd rd dst, tr_expr s1.(st_code) map pr a ns nd rd dst -> tr_expr s2.(st_code) map pr a ns nd rd dst with tr_condition_incr: forall s1 s2, state_incr s1 s2 -> forall map pr a ns ntrue nfalse, tr_condition s1.(st_code) map pr a ns ntrue nfalse -> tr_condition s2.(st_code) map pr a ns ntrue nfalse with tr_exprlist_incr: forall s1 s2, state_incr s1 s2 -> forall map pr al ns nd rl, tr_exprlist s1.(st_code) map pr al ns nd rl -> tr_exprlist s2.(st_code) map pr al ns nd rl.",
            "VernacStartTheoremProof",
            "b1df17da7c90c91f0ea0f445124dbcd038f1f047"
        ],
        [
            "intros s1 s2 EXT.",
            "VernacExtend",
            "6136d5622996000c495269370d23d13f7fb32db4"
        ],
        [
            "pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT).",
            "VernacExtend",
            "dac6a5dd78da880ac11751066440fd6a4e66fa20"
        ],
        [
            "induction 1; econstructor; eauto.",
            "VernacExtend",
            "952ec40b755b364832b351b52d5f679da2bc42cc"
        ],
        [
            "eapply tr_move_incr; eauto.",
            "VernacExtend",
            "1ca79e27bd3dd51b6f5d33037edc8c7775cbfc9d"
        ],
        [
            "eapply tr_move_incr; eauto.",
            "VernacExtend",
            "1ca79e27bd3dd51b6f5d33037edc8c7775cbfc9d"
        ],
        [
            "intros s1 s2 EXT.",
            "VernacExtend",
            "6136d5622996000c495269370d23d13f7fb32db4"
        ],
        [
            "pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT).",
            "VernacExtend",
            "dac6a5dd78da880ac11751066440fd6a4e66fa20"
        ],
        [
            "induction 1; econstructor; eauto.",
            "VernacExtend",
            "952ec40b755b364832b351b52d5f679da2bc42cc"
        ],
        [
            "intros s1 s2 EXT.",
            "VernacExtend",
            "6136d5622996000c495269370d23d13f7fb32db4"
        ],
        [
            "pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT).",
            "VernacExtend",
            "dac6a5dd78da880ac11751066440fd6a4e66fa20"
        ],
        [
            "induction 1; econstructor; eauto.",
            "VernacExtend",
            "952ec40b755b364832b351b52d5f679da2bc42cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_move_charact: forall s ns rs nd rd s' i, add_move rs rd nd s = OK ns s' i -> tr_move s'.(st_code) ns rs nd rd.",
            "VernacStartTheoremProof",
            "2afd41ee6ed9cc1e5b0ef9fa29b9bdc5aa511f94"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold add_move in H.",
            "VernacExtend",
            "60b0d1436be99b9fd553315cb3ef360b695aa10c"
        ],
        [
            "destruct (Reg.eq rs rd).",
            "VernacExtend",
            "39782d0013c5487d0fac773547d241aa21e6f862"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_expr_charact: forall a map rd nd s ns s' pr INCR (TR: transl_expr map a rd nd s = OK ns s' INCR) (WF: map_valid map s) (OK: target_reg_ok map pr a rd) (VALID: regs_valid pr s) (VALID2: reg_valid rd s), tr_expr s'.(st_code) map pr a ns nd rd None with transl_exprlist_charact: forall al map rl nd s ns s' pr INCR (TR: transl_exprlist map al rl nd s = OK ns s' INCR) (WF: map_valid map s) (OK: target_regs_ok map pr al rl) (VALID1: regs_valid pr s) (VALID2: regs_valid rl s), tr_exprlist s'.(st_code) map pr al ns nd rl with transl_condexpr_charact: forall a map ntrue nfalse s ns s' pr INCR (TR: transl_condexpr map a ntrue nfalse s = OK ns s' INCR) (WF: map_valid map s) (VALID: regs_valid pr s), tr_condition s'.(st_code) map pr a ns ntrue nfalse.",
            "VernacStartTheoremProof",
            "75f204b840692f18c6f507438feadddb48513da1"
        ],
        [
            "induction a; intros; try (monadInv TR); saturateTrans.",
            "VernacExtend",
            "a6fb3e691e765f8b2eaa15ea5a4d4034b8693211"
        ],
        [
            "generalize EQ; unfold find_var.",
            "VernacExtend",
            "231bb684d49ba544fb4c7a434c4991483b82e300"
        ],
        [
            "caseEq (map_vars map)!i; intros; inv EQ1.",
            "VernacExtend",
            "a546f9dd50fb483d23aeb49643dfad7cb2ba0df9"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "left; split; congruence.",
            "VernacExtend",
            "3c8974abe1e3d1667e40125d5a718562fa7a5ba8"
        ],
        [
            "right; eauto with rtlg.",
            "VernacExtend",
            "8dd8613afc38e3890c2dcd789e44e4e10d6e537b"
        ],
        [
            "eapply add_move_charact; eauto.",
            "VernacExtend",
            "652c6cd181aa802736cc39fa581862c57b5c9416"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "apply tr_expr_incr with s1; auto.",
            "VernacExtend",
            "66c0ae4edc83f4af4219818d33d08dbd893f2669"
        ],
        [
            "eapply transl_expr_charact; eauto 2 with rtlg.",
            "VernacExtend",
            "d01c9ed90df0e2ed72f32b461fd185318e00dad1"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "apply tr_expr_incr with s0; auto.",
            "VernacExtend",
            "07b3df4e3134abfc3d5ae07d29fa6145553a62c9"
        ],
        [
            "eapply transl_expr_charact; eauto 2 with rtlg.",
            "VernacExtend",
            "d01c9ed90df0e2ed72f32b461fd185318e00dad1"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply new_reg_not_in_map; eauto with rtlg.",
            "VernacExtend",
            "89a494996f79d1293621b6d6dd4cf743f0e11588"
        ],
        [
            "eapply transl_expr_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "f4f1c86c0bd4f006c60f70a374b4efd4fdb46dad"
        ],
        [
            "apply tr_expr_incr with s1; auto.",
            "VernacExtend",
            "66c0ae4edc83f4af4219818d33d08dbd893f2669"
        ],
        [
            "eapply transl_expr_charact.",
            "VernacExtend",
            "98eadeef6234e297571318df72896a5865aab6dd"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "apply add_letvar_valid; eauto with rtlg.",
            "VernacExtend",
            "9652949bf1873e8f053028df242d18a5bf1129c6"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "red; unfold reg_in_map.",
            "VernacExtend",
            "7a367942bc3ba2a60f7aa40e312d26b6ac15e480"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros [[id A] | [B | C]].",
            "VernacExtend",
            "243b37761e0a22e702e17db710f1bd14bbc3bd51"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "left; exists id; auto.",
            "VernacExtend",
            "8509eb7377d764e8dd5de5fec1a2d888a91e695a"
        ],
        [
            "subst x.",
            "VernacExtend",
            "76c28b0a6a4a7c1568fa30e26ee411c5e5d54968"
        ],
        [
            "apply valid_fresh_absurd with rd s.",
            "VernacExtend",
            "05bcc6b3a4b85c328a810084c3582dc435853554"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "right; auto.",
            "VernacExtend",
            "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "generalize EQ; unfold find_letvar.",
            "VernacExtend",
            "df96ef7bb70d6371daaf1f3af1a89de2bd5c52de"
        ],
        [
            "caseEq (nth_error (map_letvars map) n); intros; inv EQ0.",
            "VernacExtend",
            "502e4726a244c571ab690ee9f1812ac5b7363b58"
        ],
        [
            "monadInv EQ1.",
            "VernacExtend",
            "a7ae13aa362ab0ffe1286ab3583b35993cc26fa6"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "left; split; congruence.",
            "VernacExtend",
            "3c8974abe1e3d1667e40125d5a718562fa7a5ba8"
        ],
        [
            "right; eauto with rtlg.",
            "VernacExtend",
            "8dd8613afc38e3890c2dcd789e44e4e10d6e537b"
        ],
        [
            "eapply add_move_charact; eauto.",
            "VernacExtend",
            "652c6cd181aa802736cc39fa581862c57b5c9416"
        ],
        [
            "monadInv EQ1.",
            "VernacExtend",
            "a7ae13aa362ab0ffe1286ab3583b35993cc26fa6"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "induction al; intros; try (monadInv TR); saturateTrans.",
            "VernacExtend",
            "dffc19859b5eb5ea40b20927b347e29060cf2eeb"
        ],
        [
            "destruct rl; inv TR.",
            "VernacExtend",
            "624ffd4ac6543fdfbf1c614353369afbecd3d3d5"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct rl; simpl in TR; monadInv TR.",
            "VernacExtend",
            "7fbaeccc689fb84e5aede973795844a5b7fe1c1b"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply transl_expr_charact; eauto with rtlg.",
            "VernacExtend",
            "1804f109560f4d612f2c94fad7693ed671905664"
        ],
        [
            "generalize (VALID2 r (in_eq _ _)).",
            "VernacExtend",
            "998dc511f6f6f1173ed41139e2f4cfc9521db331"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "apply tr_exprlist_incr with s0; auto.",
            "VernacExtend",
            "7dcbead0575f5bb70e67044ac995603955a62dcf"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "apply regs_valid_cons.",
            "VernacExtend",
            "ddd297f9d54a3bdc1f3f972d7aa86f0423621325"
        ],
        [
            "apply VALID2.",
            "VernacExtend",
            "c93080d6bad63dc92702006a9b698db6876d0e24"
        ],
        [
            "auto with coqlib.",
            "VernacExtend",
            "bf4be239b4d8868fa0ff9785d68d66d28f74c632"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "red; intros; apply VALID2; auto with coqlib.",
            "VernacExtend",
            "3a5eefb8361e604d59d1b135fac89f45aca173ee"
        ],
        [
            "induction a; intros; try (monadInv TR); saturateTrans.",
            "VernacExtend",
            "a6fb3e691e765f8b2eaa15ea5a4d4034b8693211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "apply tr_condition_incr with s1; eauto with rtlg.",
            "VernacExtend",
            "8ddc1cae25e9778a495a1adc8806e1eb34adae53"
        ],
        [
            "apply tr_condition_incr with s0; eauto with rtlg.",
            "VernacExtend",
            "1336352e82186808ae65aaa3564b2b5997ed6940"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_expr_charact; eauto with rtlg.",
            "VernacExtend",
            "1804f109560f4d612f2c94fad7693ed671905664"
        ],
        [
            "apply tr_condition_incr with s1; eauto with rtlg.",
            "VernacExtend",
            "8ddc1cae25e9778a495a1adc8806e1eb34adae53"
        ],
        [
            "eapply transl_condexpr_charact; eauto with rtlg.",
            "VernacExtend",
            "656b286ebb3bf690f50febd12ae1d37ac3f5fdf1"
        ],
        [
            "apply add_letvar_valid; eauto with rtlg.",
            "VernacExtend",
            "9652949bf1873e8f053028df242d18a5bf1129c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_expr_assign_charact: forall id a map rd nd s ns s' INCR (TR: transl_expr map a rd nd s = OK ns s' INCR) (WF: map_valid map s) (OK: reg_map_ok map rd (Some id)), tr_expr s'.(st_code) map nil a ns nd rd (Some id).",
            "VernacStartTheoremProof",
            "ff45ec0352c39da27948c137fe5399a6838b47f2"
        ],
        [
            "induction a; intros; monadInv TR; saturateTrans.",
            "VernacExtend",
            "5604b8a6285567f84041f74788e04b46505ed84b"
        ],
        [
            "generalize EQ; unfold find_var.",
            "VernacExtend",
            "231bb684d49ba544fb4c7a434c4991483b82e300"
        ],
        [
            "caseEq (map_vars map)!i; intros; inv EQ1.",
            "VernacExtend",
            "a546f9dd50fb483d23aeb49643dfad7cb2ba0df9"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "eapply add_move_charact; eauto.",
            "VernacExtend",
            "652c6cd181aa802736cc39fa581862c57b5c9416"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_condexpr_charact; eauto with rtlg.",
            "VernacExtend",
            "656b286ebb3bf690f50febd12ae1d37ac3f5fdf1"
        ],
        [
            "apply tr_expr_incr with s1; auto.",
            "VernacExtend",
            "66c0ae4edc83f4af4219818d33d08dbd893f2669"
        ],
        [
            "eapply IHa1; eauto 2 with rtlg.",
            "VernacExtend",
            "791c73c1f37dd714ec80dfe01ba2f29f52e1fff0"
        ],
        [
            "apply tr_expr_incr with s0; auto.",
            "VernacExtend",
            "07b3df4e3134abfc3d5ae07d29fa6145553a62c9"
        ],
        [
            "eapply IHa2; eauto 2 with rtlg.",
            "VernacExtend",
            "ca0f3594cea0d8136dce98b9b5da54bd3f67173c"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply new_reg_not_in_map; eauto with rtlg.",
            "VernacExtend",
            "89a494996f79d1293621b6d6dd4cf743f0e11588"
        ],
        [
            "eapply transl_expr_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "f4f1c86c0bd4f006c60f70a374b4efd4fdb46dad"
        ],
        [
            "apply tr_expr_incr with s1; auto.",
            "VernacExtend",
            "66c0ae4edc83f4af4219818d33d08dbd893f2669"
        ],
        [
            "eapply IHa2; eauto.",
            "VernacExtend",
            "17c2cd176911c350adc78174f0e7877b0527eeec"
        ],
        [
            "apply add_letvar_valid; eauto with rtlg.",
            "VernacExtend",
            "9652949bf1873e8f053028df242d18a5bf1129c6"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "generalize EQ; unfold find_letvar.",
            "VernacExtend",
            "df96ef7bb70d6371daaf1f3af1a89de2bd5c52de"
        ],
        [
            "caseEq (nth_error (map_letvars map) n); intros; inv EQ0.",
            "VernacExtend",
            "502e4726a244c571ab690ee9f1812ac5b7363b58"
        ],
        [
            "monadInv EQ1.",
            "VernacExtend",
            "a7ae13aa362ab0ffe1286ab3583b35993cc26fa6"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply add_move_charact; eauto.",
            "VernacExtend",
            "652c6cd181aa802736cc39fa581862c57b5c9416"
        ],
        [
            "monadInv EQ1.",
            "VernacExtend",
            "a7ae13aa362ab0ffe1286ab3583b35993cc26fa6"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto with rtlg.",
            "VernacExtend",
            "4c23056e4856de3cf91b846d6ed7612aaa8703ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma alloc_optreg_map_ok: forall map optid s1 r s2 i, map_valid map s1 -> alloc_optreg map optid s1 = OK r s2 i -> reg_map_ok map r optid.",
            "VernacStartTheoremProof",
            "9ec5fd2b3d167a72c819422c8efce5ab53dab1d8"
        ],
        [
            "unfold alloc_optreg; intros.",
            "VernacExtend",
            "b7dbf2c222f8681daf35f852a31c68376a58cbdc"
        ],
        [
            "destruct optid.",
            "VernacExtend",
            "6308178f4fd659bcf0fa445dfcd171289f4f8809"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "unfold find_var in H0.",
            "VernacExtend",
            "34b1293bdc08833eede0128e5d1bdf8386108621"
        ],
        [
            "destruct (map_vars map)!i0; monadInv H0.",
            "VernacExtend",
            "9c7cd31d0a8daf19c9bb914426d13523163e4d86"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply new_reg_not_in_map; eauto.",
            "VernacExtend",
            "2981a00f73bdbe63989a86ae0ed865b76da04e89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tr_exitexpr_incr: forall s1 s2, state_incr s1 s2 -> forall map a ns nexits, tr_exitexpr s1.(st_code) map a ns nexits -> tr_exitexpr s2.(st_code) map a ns nexits.",
            "VernacStartTheoremProof",
            "d1a0093195d14d9530ed14090015904a90af64d8"
        ],
        [
            "intros s1 s2 EXT.",
            "VernacExtend",
            "6136d5622996000c495269370d23d13f7fb32db4"
        ],
        [
            "generalize tr_expr_incr tr_condition_incr; intros I1 I2.",
            "VernacExtend",
            "16004c75a42e8c16cc3f320aa1b7b449a64cf700"
        ],
        [
            "induction 1; econstructor; eauto with rtlg.",
            "VernacExtend",
            "c011d1f3a20709040d285a11b70049286cac955b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tr_stmt_incr: forall s1 s2, state_incr s1 s2 -> forall map s ns nd nexits ngoto nret rret, tr_stmt s1.(st_code) map s ns nd nexits ngoto nret rret -> tr_stmt s2.(st_code) map s ns nd nexits ngoto nret rret.",
            "VernacStartTheoremProof",
            "72919de4f561ddedb5278d932ba3e6b9b932e620"
        ],
        [
            "intros s1 s2 EXT.",
            "VernacExtend",
            "6136d5622996000c495269370d23d13f7fb32db4"
        ],
        [
            "generalize tr_expr_incr tr_condition_incr tr_exprlist_incr tr_exitexpr_incr; intros I1 I2 I3 I4.",
            "VernacExtend",
            "520538452d01bbf025eb74821a9160ffe50e807f"
        ],
        [
            "pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT).",
            "VernacExtend",
            "dac6a5dd78da880ac11751066440fd6a4e66fa20"
        ],
        [
            "induction 1; econstructor; eauto.",
            "VernacExtend",
            "952ec40b755b364832b351b52d5f679da2bc42cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_exit_charact: forall nexits n s ne s' incr, transl_exit nexits n s = OK ne s' incr -> nth_error nexits n = Some ne /\\ s' = s.",
            "VernacStartTheoremProof",
            "f48af1e370a7d5c6de631d313bd64d6357e9f6d2"
        ],
        [
            "intros until incr.",
            "VernacExtend",
            "b415ed5824748ded130b50c2f3edfb058dd6a6a1"
        ],
        [
            "unfold transl_exit.",
            "VernacExtend",
            "885ec90160ccca230adf543231e6698553631c4c"
        ],
        [
            "destruct (nth_error nexits n); intro; monadInv H.",
            "VernacExtend",
            "291c605facd33a0c3906dddf236f26c23941af6d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_jumptable_charact: forall nexits tbl s nl s' incr, transl_jumptable nexits tbl s = OK nl s' incr -> tr_jumptable nexits tbl nl /\\ s' = s.",
            "VernacStartTheoremProof",
            "17dae6885a6841c054dbaab0e2b54d100cec2fc4"
        ],
        [
            "induction tbl; intros.",
            "VernacExtend",
            "a6284b63d9df038810db8328d13edc9bbe933f96"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "monadInv H.",
            "VernacExtend",
            "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
        ],
        [
            "exploit transl_exit_charact; eauto.",
            "VernacExtend",
            "ccd670056b636b30c82f67938a403c2274421932"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "exploit IHtbl; eauto.",
            "VernacExtend",
            "fe4db77e18a9c0e29856bc28f6c414c5cb0e10ad"
        ],
        [
            "intros [C D].",
            "VernacExtend",
            "2f6a424bd743322897b5ce3b772a6736bb0cd683"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (zeq v 0).",
            "VernacExtend",
            "92856e7f14118d6f47dd79f4a53a479d97de36eb"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "exists x; auto.",
            "VernacExtend",
            "d8b3edd09d34953d83a4fbc6350c30f804073b09"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_exitexpr_charact: forall nexits a map s ns s' INCR (TR: transl_exitexpr map a nexits s = OK ns s' INCR) (WF: map_valid map s), tr_exitexpr s'.(st_code) map a ns nexits.",
            "VernacStartTheoremProof",
            "bf52e7716d5ecf8422cec3a76735b49e5132d5cd"
        ],
        [
            "induction a; simpl; intros; try (monadInv TR); saturateTrans.",
            "VernacExtend",
            "b6b90d2b926013bc4b65ffa9231601321a9a38b8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exploit transl_exit_charact; eauto.",
            "VernacExtend",
            "ccd670056b636b30c82f67938a403c2274421932"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exploit transl_jumptable_charact; eauto.",
            "VernacExtend",
            "35f5ce361b946f39c728f87062e8ac439bb2bc5c"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "eapply transl_expr_charact; eauto with rtlg.",
            "VernacExtend",
            "1804f109560f4d612f2c94fad7693ed671905664"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply transl_condexpr_charact; eauto with rtlg.",
            "VernacExtend",
            "656b286ebb3bf690f50febd12ae1d37ac3f5fdf1"
        ],
        [
            "apply tr_exitexpr_incr with s1; eauto with rtlg.",
            "VernacExtend",
            "e323a69350ba52796a0263436919dae61e484e21"
        ],
        [
            "apply tr_exitexpr_incr with s0; eauto with rtlg.",
            "VernacExtend",
            "0e437cb0761281ecebb4635c8c6c55230426878a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_expr_charact; eauto with rtlg.",
            "VernacExtend",
            "1804f109560f4d612f2c94fad7693ed671905664"
        ],
        [
            "apply tr_exitexpr_incr with s1; auto.",
            "VernacExtend",
            "46cee783a33e7b0d7620ca6f406d30e105d51365"
        ],
        [
            "eapply IHa; eauto with rtlg.",
            "VernacExtend",
            "9824fae8fa53d5c5a8c6e05308bbc2aa449ba877"
        ],
        [
            "apply add_letvar_valid; eauto with rtlg.",
            "VernacExtend",
            "9652949bf1873e8f053028df242d18a5bf1129c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma convert_builtin_res_charact: forall map oty res s res' s' INCR (TR: convert_builtin_res map oty res s = OK res' s' INCR) (WF: map_valid map s), tr_builtin_res map res res'.",
            "VernacStartTheoremProof",
            "e01f58aad9900899f629dda93be2f89256edeedd"
        ],
        [
            "destruct res; simpl; intros.",
            "VernacExtend",
            "704d87753a1d4b14263cd209288dc7ed962447cd"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "monadInv TR.",
            "VernacExtend",
            "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "unfold find_var in EQ.",
            "VernacExtend",
            "8a1fedd19c2b0cca6fcc2a68d9d9bd51fa2d1f80"
        ],
        [
            "destruct (map_vars map)!x; inv EQ; auto.",
            "VernacExtend",
            "d94b4f45730c4e618c03fd333ddc26cc1370a4f1"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct oty; monadInv TR.",
            "VernacExtend",
            "9cbdf5a7d7846c7f2df4ab0d664bae519477e47d"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "monadInv TR.",
            "VernacExtend",
            "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_stmt_charact: forall map stmt nd nexits ngoto nret rret s ns s' INCR (TR: transl_stmt map stmt nd nexits ngoto nret rret s = OK ns s' INCR) (WF: map_valid map s) (OK: return_reg_ok s map rret), tr_stmt s'.(st_code) map stmt ns nd nexits ngoto nret rret.",
            "VernacStartTheoremProof",
            "5dcffd9f535498c7a2116b35f5ad652f85212a88"
        ],
        [
            "induction stmt; intros; simpl in TR; try (monadInv TR); saturateTrans.",
            "VernacExtend",
            "f98ddae34dd3f50a8af2f7e5ab7e2ca591975aa6"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "revert EQ.",
            "VernacExtend",
            "b85dcdb451d344a659d52ee540f2be6a51ec991b"
        ],
        [
            "unfold find_var.",
            "VernacExtend",
            "df7aeb30b9479b247904af8f569bf2134d126ff9"
        ],
        [
            "case_eq (map_vars map)!i; intros; monadInv EQ.",
            "VernacExtend",
            "f2ec0f7127bf5391ef6ae6a5b6cf32ee8ba57a79"
        ],
        [
            "eapply tr_Sassign; eauto.",
            "VernacExtend",
            "ddd5466e36de5cde395bb447b249a2d477c8d101"
        ],
        [
            "eapply transl_expr_assign_charact; eauto with rtlg.",
            "VernacExtend",
            "c8f38a0dbadefb39f3eb41c5d6bc2a1af51f1879"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_exprlist_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "26db92f61b272b1dcd9eeb056db5ccc65001ae20"
        ],
        [
            "apply tr_expr_incr with s3; auto.",
            "VernacExtend",
            "ee44dd0b63338fc1ec614c20bcd9c54b8f84408a"
        ],
        [
            "eapply transl_expr_charact; eauto 4 with rtlg.",
            "VernacExtend",
            "e4b3090cc079be8c0300df2833cde29bce86fda7"
        ],
        [
            "destruct s0 as [b | id]; monadInv TR; saturateTrans.",
            "VernacExtend",
            "1a063038f4677259317b2b147d2b04af8d4dde5a"
        ],
        [
            "econstructor; eauto 4 with rtlg.",
            "VernacExtend",
            "b9525a6029c2efbcac5df686ab16f11cb5ae7b53"
        ],
        [
            "eapply transl_expr_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "f4f1c86c0bd4f006c60f70a374b4efd4fdb46dad"
        ],
        [
            "apply tr_exprlist_incr with s5.",
            "VernacExtend",
            "fffe5f006fc9503b30829dff1d96930052c63448"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "eapply transl_exprlist_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "26db92f61b272b1dcd9eeb056db5ccc65001ae20"
        ],
        [
            "eapply alloc_regs_target_ok with (s1 := s0); eauto 3 with rtlg.",
            "VernacExtend",
            "c4bbab7f63417113ef4cb1f77716416b9e96aa05"
        ],
        [
            "apply regs_valid_cons; eauto 3 with rtlg.",
            "VernacExtend",
            "7100d5eefceb49f0e0ad0820b637553aa8e82542"
        ],
        [
            "apply regs_valid_incr with s0; eauto 3 with rtlg.",
            "VernacExtend",
            "04bd56b6bb0a09cc8a78959f58312dc2625c8498"
        ],
        [
            "apply regs_valid_cons; eauto 3 with rtlg.",
            "VernacExtend",
            "7100d5eefceb49f0e0ad0820b637553aa8e82542"
        ],
        [
            "apply regs_valid_incr with s2; eauto 3 with rtlg.",
            "VernacExtend",
            "694175e85b8f1661b7b279d5aa079f8e09dca71e"
        ],
        [
            "eapply alloc_optreg_map_ok with (s1 := s2); eauto 3 with rtlg.",
            "VernacExtend",
            "87ce1d1744c07ed2aac459fb67dc7e51e57a8642"
        ],
        [
            "econstructor; eauto 4 with rtlg.",
            "VernacExtend",
            "b9525a6029c2efbcac5df686ab16f11cb5ae7b53"
        ],
        [
            "eapply transl_exprlist_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "26db92f61b272b1dcd9eeb056db5ccc65001ae20"
        ],
        [
            "eapply alloc_optreg_map_ok with (s1 := s0); eauto 3 with rtlg.",
            "VernacExtend",
            "52c5c8d3cca0f4da03496f49cdddefc9e23dae86"
        ],
        [
            "destruct s0 as [b | id]; monadInv TR; saturateTrans.",
            "VernacExtend",
            "1a063038f4677259317b2b147d2b04af8d4dde5a"
        ],
        [
            "assert (RV: regs_valid (x :: nil) s0).",
            "VernacExtend",
            "b9a6ddcf81288d4bd24c88ea4a9864b5701f1db8"
        ],
        [
            "apply regs_valid_cons; eauto 3 with rtlg.",
            "VernacExtend",
            "7100d5eefceb49f0e0ad0820b637553aa8e82542"
        ],
        [
            "econstructor; eauto 3 with rtlg.",
            "VernacExtend",
            "3a41d2541b25744cca94341060b4bcc4a84b6613"
        ],
        [
            "eapply transl_expr_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "f4f1c86c0bd4f006c60f70a374b4efd4fdb46dad"
        ],
        [
            "apply tr_exprlist_incr with s4; auto.",
            "VernacExtend",
            "51d4db66c50cdfc4f8b817e4852f6308dab98495"
        ],
        [
            "eapply transl_exprlist_charact; eauto 4 with rtlg.",
            "VernacExtend",
            "fdf2593a37e8311fa319557bcecbbf3a6210db13"
        ],
        [
            "econstructor; eauto 3 with rtlg.",
            "VernacExtend",
            "3a41d2541b25744cca94341060b4bcc4a84b6613"
        ],
        [
            "eapply transl_exprlist_charact; eauto 4 with rtlg.",
            "VernacExtend",
            "fdf2593a37e8311fa319557bcecbbf3a6210db13"
        ],
        [
            "econstructor; eauto 4 with rtlg.",
            "VernacExtend",
            "b9525a6029c2efbcac5df686ab16f11cb5ae7b53"
        ],
        [
            "eapply transl_exprlist_charact; eauto 3 with rtlg.",
            "VernacExtend",
            "26db92f61b272b1dcd9eeb056db5ccc65001ae20"
        ],
        [
            "eapply convert_builtin_res_charact; eauto with rtlg.",
            "VernacExtend",
            "929fdf698f54c569920ab1075ef76e27b056f78c"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "apply tr_stmt_incr with s0; auto.",
            "VernacExtend",
            "b5a1694c74bff3f9048ac46b264fb33292697572"
        ],
        [
            "eapply IHstmt2; eauto with rtlg.",
            "VernacExtend",
            "6b98ab159a0d1ba00af35d51a07738e62e2d3f9d"
        ],
        [
            "eapply IHstmt1; eauto with rtlg.",
            "VernacExtend",
            "4850f008901f9c5a62f8bc9a8e8ea05ff87902b1"
        ],
        [
            "destruct (more_likely c stmt1 stmt2); monadInv TR.",
            "VernacExtend",
            "b3384c5bcca9db6d50fb88c651d4bec344f04d56"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "apply tr_stmt_incr with s1; auto.",
            "VernacExtend",
            "6260187bd262a90867482b05ec595904f001ddf8"
        ],
        [
            "eapply IHstmt1; eauto with rtlg.",
            "VernacExtend",
            "4850f008901f9c5a62f8bc9a8e8ea05ff87902b1"
        ],
        [
            "apply tr_stmt_incr with s0; auto.",
            "VernacExtend",
            "b5a1694c74bff3f9048ac46b264fb33292697572"
        ],
        [
            "eapply IHstmt2; eauto with rtlg.",
            "VernacExtend",
            "6b98ab159a0d1ba00af35d51a07738e62e2d3f9d"
        ],
        [
            "eapply transl_condexpr_charact; eauto with rtlg.",
            "VernacExtend",
            "656b286ebb3bf690f50febd12ae1d37ac3f5fdf1"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "apply tr_stmt_incr with s0; auto.",
            "VernacExtend",
            "b5a1694c74bff3f9048ac46b264fb33292697572"
        ],
        [
            "eapply IHstmt1; eauto with rtlg.",
            "VernacExtend",
            "4850f008901f9c5a62f8bc9a8e8ea05ff87902b1"
        ],
        [
            "apply tr_stmt_incr with s1; auto.",
            "VernacExtend",
            "6260187bd262a90867482b05ec595904f001ddf8"
        ],
        [
            "eapply IHstmt2; eauto with rtlg.",
            "VernacExtend",
            "6b98ab159a0d1ba00af35d51a07738e62e2d3f9d"
        ],
        [
            "eapply transl_condexpr_charact; eauto with rtlg.",
            "VernacExtend",
            "656b286ebb3bf690f50febd12ae1d37ac3f5fdf1"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "apply tr_stmt_incr with s1; auto.",
            "VernacExtend",
            "6260187bd262a90867482b05ec595904f001ddf8"
        ],
        [
            "eapply IHstmt; eauto with rtlg.",
            "VernacExtend",
            "7094c306a7a24d9444ec0bacdbfe35168d0cc6cc"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply IHstmt; eauto with rtlg.",
            "VernacExtend",
            "7094c306a7a24d9444ec0bacdbfe35168d0cc6cc"
        ],
        [
            "exploit transl_exit_charact; eauto.",
            "VernacExtend",
            "ccd670056b636b30c82f67938a403c2274421932"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eapply transl_exitexpr_charact; eauto.",
            "VernacExtend",
            "1e92ebdc321414068a5395b72dabc9bd8ee82d80"
        ],
        [
            "destruct o.",
            "VernacExtend",
            "7e45d273082b90e03f5f97cde65b5f989324a175"
        ],
        [
            "destruct rret; inv TR.",
            "VernacExtend",
            "808b90bf9b329986b0ad32ebec813e4a71100f3e"
        ],
        [
            "inv OK.",
            "VernacExtend",
            "a7e10e3880247d72fb743fa89bb634b23ae85211"
        ],
        [
            "econstructor; eauto with rtlg.",
            "VernacExtend",
            "550670882493e1b2795c64fa23add31508becc65"
        ],
        [
            "eapply transl_expr_charact; eauto with rtlg.",
            "VernacExtend",
            "1804f109560f4d612f2c94fad7693ed671905664"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl; tauto.",
            "VernacExtend",
            "2c27d7b56602355c3ed4605e551cd6a88509ac37"
        ],
        [
            "monadInv TR.",
            "VernacExtend",
            "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "generalize EQ0; clear EQ0.",
            "VernacExtend",
            "2b3e73ca6fa5dda8b288995ba8b5fd932e65f040"
        ],
        [
            "case_eq (ngoto!l); intros; monadInv EQ0.",
            "VernacExtend",
            "558dca1e9b153ad500a8af6e714cd67c5a137647"
        ],
        [
            "generalize EQ1; clear EQ1.",
            "VernacExtend",
            "f9addc0f85b556122fa1fb89c10eb75a32c7ff2f"
        ],
        [
            "unfold handle_error.",
            "VernacExtend",
            "04741a17818b4f781eba9cf3fd4b304ec350785b"
        ],
        [
            "case_eq (update_instr n (Inop ns) s0); intros; inv EQ1.",
            "VernacExtend",
            "4c1d5fc7ee801abf0880a07a6cf83912dcbc5ede"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eapply tr_stmt_incr with s0; eauto with rtlg.",
            "VernacExtend",
            "80c5b11ecfb2d8c3f3f69e9973abe7c6ff5ffdae"
        ],
        [
            "generalize TR; clear TR.",
            "VernacExtend",
            "633cb62017f28050f90ecf405f32a0c5708efac8"
        ],
        [
            "case_eq (ngoto!l); intros; monadInv TR.",
            "VernacExtend",
            "8c67c24d407ab411439c8354b00dc6726a11d3da"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transl_function_charact: forall f tf, transl_function f = Errors.OK tf -> tr_function f tf.",
            "VernacStartTheoremProof",
            "fa359d42cf0506e223840b350a3309538a7cdb88"
        ],
        [
            "intros until tf.",
            "VernacExtend",
            "0fd4dcd2676866e2aed53d0666963304b7df4e2c"
        ],
        [
            "unfold transl_function.",
            "VernacExtend",
            "11a9ba30a2dd21ad5b79916e9901180d62476c92"
        ],
        [
            "caseEq (reserve_labels (fn_body f) (PTree.empty node, init_state)).",
            "VernacExtend",
            "9f8492f2ff77fb0f664c2feb160117ca1447f5a6"
        ],
        [
            "intros ngoto s0 RESERVE.",
            "VernacExtend",
            "14add55dba4ff3bcbcf8c093a0e12261b36ecd69"
        ],
        [
            "caseEq (transl_fun f ngoto s0).",
            "VernacExtend",
            "4e8153340d79f35aaad24d74d7a85e002bc860ff"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "intros [nentry rparams] sfinal INCR TR E.",
            "VernacExtend",
            "ac09528135b262f5f6bd285506b765b13a68034a"
        ],
        [
            "inv E.",
            "VernacExtend",
            "e6f2a5ef16e476c86204cb8ae2fccd762215c4c8"
        ],
        [
            "monadInv TR.",
            "VernacExtend",
            "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
        ],
        [
            "exploit add_vars_valid.",
            "VernacExtend",
            "43ac34e906090337c9e3c4e84a1e76c0d758384d"
        ],
        [
            "eexact EQ.",
            "VernacExtend",
            "3cded57d2133481313bb3a8ebbbb45161d23e405"
        ],
        [
            "apply init_mapping_valid.",
            "VernacExtend",
            "c664914c9db8bed63eccced9e362c4930724b6d8"
        ],
        [
            "intros [A B].",
            "VernacExtend",
            "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
        ],
        [
            "exploit add_vars_valid.",
            "VernacExtend",
            "43ac34e906090337c9e3c4e84a1e76c0d758384d"
        ],
        [
            "eexact EQ1.",
            "VernacExtend",
            "a764d14fff2a1ac78ded5686d0af7350a2820c6f"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "intros [C D].",
            "VernacExtend",
            "2f6a424bd743322897b5ce3b772a6736bb0cd683"
        ],
        [
            "eapply tr_function_intro; eauto with rtlg.",
            "VernacExtend",
            "968e91c64821c4c8070c46de9156ebd7381758ea"
        ],
        [
            "eapply transl_stmt_charact; eauto with rtlg.",
            "VernacExtend",
            "09e32b6dd17d9d8652a4625f01757356aacea3b5"
        ],
        [
            "unfold ret_reg.",
            "VernacExtend",
            "8a08bd33f7f5536aaed05713e0216c0b3363c42c"
        ],
        [
            "destruct (sig_res (CminorSel.fn_sig f)).",
            "VernacExtend",
            "c245768130009d211723ef957474ac070988f4f6"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "eauto with rtlg.",
            "VernacExtend",
            "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "bind_inversion",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros until i.",
                        "VernacExtend",
                        "024130153c69509e16cb24095d428c78b5bdc272"
                    ]
                },
                {
                    "command": [
                        "unfold bind.",
                        "VernacExtend",
                        "92681da8eee126803006dd670c74799566b9f60d"
                    ]
                },
                {
                    "command": [
                        "destruct (f s1); intros.",
                        "VernacExtend",
                        "1f783c302be7a434a9d48acad47a8e78e0989dbd"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "exists a; exists s'; exists s.",
                        "VernacExtend",
                        "a704b0f8aa36bfc14a183930cf55e7bbbfbe1a9e"
                    ]
                },
                {
                    "command": [
                        "destruct (g a s'); inv H.",
                        "VernacExtend",
                        "2bf82cc7e79bcce0381155bad754aa6348d70608"
                    ]
                },
                {
                    "command": [
                        "exists s0; auto.",
                        "VernacExtend",
                        "ec95125a3d9f54555812d258ababd17c33a9eaef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bind2_inversion",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "unfold bind2; intros.",
                        "VernacExtend",
                        "f584848ccbd823404bc9a074e091089bae6b608e"
                    ]
                },
                {
                    "command": [
                        "exploit bind_inversion; eauto.",
                        "VernacExtend",
                        "aa663124c65fbf524e2cde6602ecd303b6a9d7dc"
                    ]
                },
                {
                    "command": [
                        "intros [[x y] [s2 [i1 [i2 [P Q]]]]].",
                        "VernacExtend",
                        "78ac9f5dd79f47e73fc94e7306bb283b2112aea1"
                    ]
                },
                {
                    "command": [
                        "simpl in Q.",
                        "VernacExtend",
                        "14a47d62db49da93d3c69465ec8a6c586ee6bc72"
                    ]
                },
                {
                    "command": [
                        "exists x; exists y; exists s2; exists i1; exists i2; auto.",
                        "VernacExtend",
                        "de4684bf2eeac3e821b346165e215be8f6e711cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "instr_at_incr",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "destruct (H3 n); congruence.",
                        "VernacExtend",
                        "a05da6eb631c78115645b3500535a6a069462509"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_fresh_absurd",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros r s.",
                        "VernacExtend",
                        "9315250cf8fda8a8e9001e036b3dbe7e5cd4e4a1"
                    ]
                },
                {
                    "command": [
                        "unfold reg_valid, reg_fresh; case r; tauto.",
                        "VernacExtend",
                        "40c784787234a64d28e9e23828e4986047a5e6be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valid_fresh_different",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "unfold not; intros.",
                        "VernacExtend",
                        "a373869c1c99731a8797825160ba5f5ab7a057a9"
                    ]
                },
                {
                    "command": [
                        "subst r2.",
                        "VernacExtend",
                        "82192851837f0d29f97826949929ab06c55cce1e"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reg_valid_incr",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros r s1 s2 INCR.",
                        "VernacExtend",
                        "9899b0d736e0d442daf5c984f3bae1c36489451d"
                    ]
                },
                {
                    "command": [
                        "inversion INCR.",
                        "VernacExtend",
                        "8d892b4a13fbf5a96e5c1f2e746caaf891ef21a3"
                    ]
                },
                {
                    "command": [
                        "unfold reg_valid.",
                        "VernacExtend",
                        "7ff859b9382dcfa167cd1bd0833ab0900a9c33b4"
                    ]
                },
                {
                    "command": [
                        "intros; apply Plt_Ple_trans with (st_nextreg s1); auto.",
                        "VernacExtend",
                        "ad00b000af2f65012205f49a0512a79bfde2ef1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reg_fresh_decr",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intros r s1 s2 INCR.",
                        "VernacExtend",
                        "9899b0d736e0d442daf5c984f3bae1c36489451d"
                    ]
                },
                {
                    "command": [
                        "inversion INCR.",
                        "VernacExtend",
                        "8d892b4a13fbf5a96e5c1f2e746caaf891ef21a3"
                    ]
                },
                {
                    "command": [
                        "unfold reg_fresh; unfold not; intros.",
                        "VernacExtend",
                        "05cbfd9f7f913d2951921884a580b4e4104d4ade"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "apply Plt_Ple_trans with (st_nextreg s1); auto.",
                        "VernacExtend",
                        "1d3b7f640495f6e7181a544963d9e8fac29e3837"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "regs_valid_nil",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "intros; red; intros.",
                        "VernacExtend",
                        "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
                    ]
                },
                {
                    "command": [
                        "elim H.",
                        "VernacExtend",
                        "853aa440c3a3810be05f0f87d0e688c05b92253d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "regs_valid_cons",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros; red; intros.",
                        "VernacExtend",
                        "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "subst r1; auto.",
                        "VernacExtend",
                        "912b9e72ee9668b5a7f24778866c81877f7dffdd"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "regs_valid_app",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intros; red; intros.",
                        "VernacExtend",
                        "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
                    ]
                },
                {
                    "command": [
                        "apply in_app_iff in H1.",
                        "VernacExtend",
                        "1a06c6aa307c329e22f70fd3aa6366af830999e0"
                    ]
                },
                {
                    "command": [
                        "destruct H1; auto.",
                        "VernacExtend",
                        "7a20f9482fab69ae7a191b5e13d9ac465bf5b222"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "regs_valid_incr",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "unfold regs_valid; intros; eauto with rtlg.",
                        "VernacExtend",
                        "df550f9bb59e76aedfc20d0b7e8ed413f980a175"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_valid_incr",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "unfold map_valid; intros; eauto with rtlg.",
                        "VernacExtend",
                        "cec2437cf0ed68f8ac1a32aa1311c884a51a5e78"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_instr_at",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply PTree.gss.",
                        "VernacExtend",
                        "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "update_instr_at",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold update_instr in H.",
                        "VernacExtend",
                        "b0d34720c773548aab79e3c4ab5634cca1f829ef"
                    ]
                },
                {
                    "command": [
                        "destruct (plt n (st_nextnode s1)); try discriminate.",
                        "VernacExtend",
                        "b745de1f3413b77ebb8d8616332fe14ef6d5d02f"
                    ]
                },
                {
                    "command": [
                        "destruct (check_empty_node s1 n); try discriminate.",
                        "VernacExtend",
                        "3710444715cb6559f33d6047e5b879e1a45c110e"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply PTree.gss.",
                        "VernacExtend",
                        "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "new_reg_valid",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "unfold reg_valid; simpl.",
                        "VernacExtend",
                        "a5bdef0013287cdcec54fed14036521d571d4c40"
                    ]
                },
                {
                    "command": [
                        "apply Plt_succ.",
                        "VernacExtend",
                        "3925586d900ea8530f139977c6fc5c26f2e2ca64"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "new_reg_fresh",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "unfold reg_fresh; simpl.",
                        "VernacExtend",
                        "04b7e9785fa9baa9279237752efa77d6a243c19b"
                    ]
                },
                {
                    "command": [
                        "exact (Plt_strict _).",
                        "VernacExtend",
                        "7ddc6a496947619731530b5edd61754d8b395f39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "new_reg_not_in_map",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "unfold not; intros; eauto with rtlg.",
                        "VernacExtend",
                        "4f0f05bfd490a02a3c2dc824a7be591b133ec8b3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "init_mapping_valid",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "unfold map_valid, init_mapping.",
                        "VernacExtend",
                        "58b6f811d6b4b54de19a3b92e7889777f80e78f3"
                    ]
                },
                {
                    "command": [
                        "intros s r [[id A] | B].",
                        "VernacExtend",
                        "20aaaf9b3cb425ac3a3dc1ccd51599c3792f24f5"
                    ]
                },
                {
                    "command": [
                        "simpl in A.",
                        "VernacExtend",
                        "dc9254dda65038a8da985f434d9893d4e6e0f31e"
                    ]
                },
                {
                    "command": [
                        "rewrite PTree.gempty in A; discriminate.",
                        "VernacExtend",
                        "989318306dcf45b4ff382a1d93d246869b275d9a"
                    ]
                },
                {
                    "command": [
                        "simpl in B.",
                        "VernacExtend",
                        "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_var_in_map",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros until r.",
                        "VernacExtend",
                        "5fd851fddc34031300dfa0145691dcf8dfbfd558"
                    ]
                },
                {
                    "command": [
                        "unfold find_var; caseEq (map.(map_vars)!name).",
                        "VernacExtend",
                        "cf98caa3a683dc5ad1963f9e003b6d350e36af54"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "52c34ef20c88d5292e2350aff94f149a3968b772"
                    ]
                },
                {
                    "command": [
                        "left; exists name; auto.",
                        "VernacExtend",
                        "7f7321ec9a82173935cc4a190abaebf8232a4bd3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "52c34ef20c88d5292e2350aff94f149a3968b772"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_var_valid",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_letvar_in_map",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "intros until r.",
                        "VernacExtend",
                        "5fd851fddc34031300dfa0145691dcf8dfbfd558"
                    ]
                },
                {
                    "command": [
                        "unfold find_letvar.",
                        "VernacExtend",
                        "6268cbe4fdca16702492e1872d40010e4dc2f799"
                    ]
                },
                {
                    "command": [
                        "caseEq (nth_error (map_letvars map) idx); intros; monadInv H0.",
                        "VernacExtend",
                        "aee88f003d0a67f0a2e065869416d4becd04bf40"
                    ]
                },
                {
                    "command": [
                        "right; apply nth_error_in with idx; auto.",
                        "VernacExtend",
                        "5c92616486874ddfbcfe7f3f41bdbb375c81e44f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_letvar_valid",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_var_valid",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "inversion EQ.",
                        "VernacExtend",
                        "5a6b5fb7cd5d1feabf9fe391f5851ef589bda8d0"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intros r' [[id A] | B].",
                        "VernacExtend",
                        "3bbb9a494e4127ae40f54523433f8bb57e9a20ea"
                    ]
                },
                {
                    "command": [
                        "simpl in A.",
                        "VernacExtend",
                        "dc9254dda65038a8da985f434d9893d4e6e0f31e"
                    ]
                },
                {
                    "command": [
                        "rewrite PTree.gsspec in A.",
                        "VernacExtend",
                        "bae221891134530b3b4e9f7caf7ca2e2a5b9a813"
                    ]
                },
                {
                    "command": [
                        "destruct (peq id name).",
                        "VernacExtend",
                        "b2a1c39ba1d393e505e9f82b555cb721fecb6185"
                    ]
                },
                {
                    "command": [
                        "inv A.",
                        "VernacExtend",
                        "91ce09d6dfe89f57b6c4ea425a99a4df72516106"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "apply reg_valid_incr with s1.",
                        "VernacExtend",
                        "a276bfcc6e8df84fd3ea080d0fee3ff85f08d27e"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "left; exists id; auto.",
                        "VernacExtend",
                        "8509eb7377d764e8dd5de5fec1a2d888a91e695a"
                    ]
                },
                {
                    "command": [
                        "simpl in B.",
                        "VernacExtend",
                        "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
                    ]
                },
                {
                    "command": [
                        "apply reg_valid_incr with s1.",
                        "VernacExtend",
                        "a276bfcc6e8df84fd3ea080d0fee3ff85f08d27e"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "right; auto.",
                        "VernacExtend",
                        "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_var_find",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply PTree.gss.",
                        "VernacExtend",
                        "e0e0d9b5775ce92f174c46a867531d5ac346bd39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_vars_valid",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "induction namel; simpl; intros; monadInv H.",
                        "VernacExtend",
                        "321fd1cd009c9346b185f627dc627652c71e7f09"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "red; simpl; intros; tauto.",
                        "VernacExtend",
                        "cc9df851e933fb0096fb47ba4bbd108fa1b321a9"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "exploit IHnamel; eauto.",
                        "VernacExtend",
                        "8d075499afd6c0b40c02a8130db997fa87e703c8"
                    ]
                },
                {
                    "command": [
                        "intros [A B].",
                        "VernacExtend",
                        "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
                    ]
                },
                {
                    "command": [
                        "exploit add_var_valid; eauto.",
                        "VernacExtend",
                        "a4b933e5bdf2cfe013a14e8c3186aa88981c7953"
                    ]
                },
                {
                    "command": [
                        "intros [C D].",
                        "VernacExtend",
                        "2f6a424bd743322897b5ce3b772a6736bb0cd683"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply regs_valid_cons; eauto with rtlg.",
                        "VernacExtend",
                        "0b1512cad3f2fad92ba5efd06d27df3e11cefd9e"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_var_letenv",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "intros; monadInv H.",
                        "VernacExtend",
                        "0c2b6902ad085a0c6ccc111fb8ec35ef21fd8802"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_vars_letenv",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "induction il; simpl; intros; monadInv H.",
                        "VernacExtend",
                        "4b75c33a3edadac01b69546897b04745e2c64456"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "transitivity (map_letvars x0).",
                        "VernacExtend",
                        "5dc50a89c082623ba8d7daeb08a39b559ef05d89"
                    ]
                },
                {
                    "command": [
                        "eapply add_var_letenv; eauto.",
                        "VernacExtend",
                        "ba1b9aa848a693a6707dec9a2b3df897e64d6e59"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_letvar_valid",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "intros; red; intros.",
                        "VernacExtend",
                        "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [[id A]|B].",
                        "VernacExtend",
                        "161d4ff69da46838c01b1c60c2bcd6f1c470be58"
                    ]
                },
                {
                    "command": [
                        "simpl in A.",
                        "VernacExtend",
                        "dc9254dda65038a8da985f434d9893d4e6e0f31e"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "left; exists id; auto.",
                        "VernacExtend",
                        "8509eb7377d764e8dd5de5fec1a2d888a91e695a"
                    ]
                },
                {
                    "command": [
                        "simpl in B.",
                        "VernacExtend",
                        "0ffe261a8a737c1b2bcc724b1be6cf2d82fcbea4"
                    ]
                },
                {
                    "command": [
                        "elim B; intro.",
                        "VernacExtend",
                        "f2ea7c136386fac888e52139bf6605f4f328a47e"
                    ]
                },
                {
                    "command": [
                        "subst r0; auto.",
                        "VernacExtend",
                        "0b55e374b17d6d88d3626220bb2d82f045c5f417"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "right; auto.",
                        "VernacExtend",
                        "1f0a695ab06b3950e6a7adf329d300b1f859fe9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_reg_valid",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "intros until r.",
                        "VernacExtend",
                        "5fd851fddc34031300dfa0145691dcf8dfbfd558"
                    ]
                },
                {
                    "command": [
                        "unfold alloc_reg.",
                        "VernacExtend",
                        "dd1e1b9f3183c1831d539ee893d45f0eca609306"
                    ]
                },
                {
                    "command": [
                        "case a; eauto with rtlg.",
                        "VernacExtend",
                        "2b5837d7191602c67fc7fb11fbbe5e73a80f5a83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_reg_fresh_or_in_map",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "intros until s'.",
                        "VernacExtend",
                        "4d918992d4b8d318157fa3324c436252b6bc34d7"
                    ]
                },
                {
                    "command": [
                        "unfold alloc_reg.",
                        "VernacExtend",
                        "dd1e1b9f3183c1831d539ee893d45f0eca609306"
                    ]
                },
                {
                    "command": [
                        "destruct a; intros; try (right; eauto with rtlg; fail).",
                        "VernacExtend",
                        "651c55bed6d86320aa32e3b87f693b95eb7a41bb"
                    ]
                },
                {
                    "command": [
                        "left; eauto with rtlg.",
                        "VernacExtend",
                        "191b089fb724ca1bb3ac38dc73ae72411d05413c"
                    ]
                },
                {
                    "command": [
                        "left; eauto with rtlg.",
                        "VernacExtend",
                        "191b089fb724ca1bb3ac38dc73ae72411d05413c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_regs_valid",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "induction al; simpl; intros; monadInv H0.",
                        "VernacExtend",
                        "88d8a458455c59c6162a5f5de466790ef4819a3a"
                    ]
                },
                {
                    "command": [
                        "apply regs_valid_nil.",
                        "VernacExtend",
                        "fe6440524ff1fb9dac01bbe87586649c5019dda3"
                    ]
                },
                {
                    "command": [
                        "apply regs_valid_cons.",
                        "VernacExtend",
                        "ddd297f9d54a3bdc1f3f972d7aa86f0423621325"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_optreg_valid",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "intros until r.",
                        "VernacExtend",
                        "5fd851fddc34031300dfa0145691dcf8dfbfd558"
                    ]
                },
                {
                    "command": [
                        "unfold alloc_reg.",
                        "VernacExtend",
                        "dd1e1b9f3183c1831d539ee893d45f0eca609306"
                    ]
                },
                {
                    "command": [
                        "case dest; eauto with rtlg.",
                        "VernacExtend",
                        "3a5b35e480674b79dbbb4fe3e61ed82d2abdec10"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_optreg_fresh_or_in_map",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "intros until s'.",
                        "VernacExtend",
                        "4d918992d4b8d318157fa3324c436252b6bc34d7"
                    ]
                },
                {
                    "command": [
                        "unfold alloc_optreg.",
                        "VernacExtend",
                        "35380b401985089b3bbe7f6a4226bae08a327850"
                    ]
                },
                {
                    "command": [
                        "destruct dest; intros.",
                        "VernacExtend",
                        "4b00ed5b5ab20cadc93add939d5b2afecb49645d"
                    ]
                },
                {
                    "command": [
                        "left; eauto with rtlg.",
                        "VernacExtend",
                        "191b089fb724ca1bb3ac38dc73ae72411d05413c"
                    ]
                },
                {
                    "command": [
                        "right; eauto with rtlg.",
                        "VernacExtend",
                        "8dd8613afc38e3890c2dcd789e44e4e10d6e537b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "target_reg_ok_append",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "induction 1; intros.",
                        "VernacExtend",
                        "176684f910d62ec20fbc75549575bf1cd34fa8ec"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "constructor; auto.",
                        "VernacExtend",
                        "686f227fe0f57af60032eb35216aef1e62d0c0e5"
                    ]
                },
                {
                    "command": [
                        "red; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "elim (in_app_or _ _ _ H2); intro.",
                        "VernacExtend",
                        "a3fd480c224e02f17b4fde53beae5d1f9a56d985"
                    ]
                },
                {
                    "command": [
                        "generalize (H1 _ H3).",
                        "VernacExtend",
                        "b10f8f16648838da431a25f76098dc231c5692ae"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "target_reg_ok_cons",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "change (r' :: pr) with ((r' :: nil) ++ pr).",
                        "VernacExtend",
                        "cd26faa479e29912ff74952843a6202c7095f0b6"
                    ]
                },
                {
                    "command": [
                        "apply target_reg_ok_append; auto.",
                        "VernacExtend",
                        "475d65a44c708e9d738b9ff7797c49215b886528"
                    ]
                },
                {
                    "command": [
                        "intros r'' [A|B].",
                        "VernacExtend",
                        "e53ce511a31d8b6f3f5e02b440d64d887e3cbcbf"
                    ]
                },
                {
                    "command": [
                        "subst r''; auto.",
                        "VernacExtend",
                        "5b7d8e5496ef494339dacdfe22079a44a2487b52"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "new_reg_target_ok",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "red; intro.",
                        "VernacExtend",
                        "12e00b6ab6f8834b6f81959ca42843abaa311f37"
                    ]
                },
                {
                    "command": [
                        "apply valid_fresh_absurd with r s1.",
                        "VernacExtend",
                        "7457d7c5104c16b5f8648edbacbb283b013d0e7c"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "red; intro.",
                        "VernacExtend",
                        "12e00b6ab6f8834b6f81959ca42843abaa311f37"
                    ]
                },
                {
                    "command": [
                        "apply valid_fresh_absurd with r s1.",
                        "VernacExtend",
                        "7457d7c5104c16b5f8648edbacbb283b013d0e7c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_reg_target_ok",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold alloc_reg in H1.",
                        "VernacExtend",
                        "1a579925e9611be3d135c5259ca960a24d8a0aa4"
                    ]
                },
                {
                    "command": [
                        "destruct a; try (eapply new_reg_target_ok; eauto; fail).",
                        "VernacExtend",
                        "5ad1e78b3f23b94f824890838d5d6701dab61248"
                    ]
                },
                {
                    "command": [
                        "generalize H1; unfold find_var.",
                        "VernacExtend",
                        "75378de78300095eca5fafd82dd88334ab0f9054"
                    ]
                },
                {
                    "command": [
                        "caseEq (map_vars map)!i0; intros.",
                        "VernacExtend",
                        "6cf84e665f27b48651e8ed4c8d0f485f75805932"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
                    ]
                },
                {
                    "command": [
                        "generalize H1; unfold find_letvar.",
                        "VernacExtend",
                        "22bc8fd53713de7c35a0ceb9cfde25c22e78b6c8"
                    ]
                },
                {
                    "command": [
                        "caseEq (nth_error (map_letvars map) n); intros.",
                        "VernacExtend",
                        "385d5b859234c0f5957cb2f66489f87ac42dac88"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "inv H3.",
                        "VernacExtend",
                        "bf389b6bd23f97715c74ed9eca5a780ee9e91e3c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_regs_target_ok",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "induction al; intros; monadInv H1.",
                        "VernacExtend",
                        "5c96a4d0bdb68ae6208d81d002099adfa2a9c927"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "eapply alloc_reg_target_ok; eauto.",
                        "VernacExtend",
                        "5101f94d162912336c6791579db07ab88c57a4dd"
                    ]
                },
                {
                    "command": [
                        "apply IHal with s s2 INCR1; eauto with rtlg.",
                        "VernacExtend",
                        "1170f2a2f835fad8dc11977ab88e5a913ee597e3"
                    ]
                },
                {
                    "command": [
                        "apply regs_valid_cons; eauto with rtlg.",
                        "VernacExtend",
                        "0b1512cad3f2fad92ba5efd06d27df3e11cefd9e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "return_reg_ok_incr",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "induction 1; intros; econstructor; eauto with rtlg.",
                        "VernacExtend",
                        "734628621497c191c60a7d1b8a687787a9c526f8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "new_reg_return_ok",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold ret_reg.",
                        "VernacExtend",
                        "8a08bd33f7f5536aaed05713e0216c0b3363c42c"
                    ]
                },
                {
                    "command": [
                        "destruct (sig_res sig); constructor.",
                        "VernacExtend",
                        "d21899872b9784359ea5e10c99371d83a669c5da"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tr_move_incr",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "induction 2; econstructor; eauto with rtlg.",
                        "VernacExtend",
                        "88336d1ac31f16f399d58ba044978daae25592f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_move_charact",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold add_move in H.",
                        "VernacExtend",
                        "60b0d1436be99b9fd553315cb3ef360b695aa10c"
                    ]
                },
                {
                    "command": [
                        "destruct (Reg.eq rs rd).",
                        "VernacExtend",
                        "39782d0013c5487d0fac773547d241aa21e6f862"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alloc_optreg_map_ok",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "unfold alloc_optreg; intros.",
                        "VernacExtend",
                        "b7dbf2c222f8681daf35f852a31c68376a58cbdc"
                    ]
                },
                {
                    "command": [
                        "destruct optid.",
                        "VernacExtend",
                        "6308178f4fd659bcf0fa445dfcd171289f4f8809"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "unfold find_var in H0.",
                        "VernacExtend",
                        "34b1293bdc08833eede0128e5d1bdf8386108621"
                    ]
                },
                {
                    "command": [
                        "destruct (map_vars map)!i0; monadInv H0.",
                        "VernacExtend",
                        "9c7cd31d0a8daf19c9bb914426d13523163e4d86"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "eapply new_reg_not_in_map; eauto.",
                        "VernacExtend",
                        "2981a00f73bdbe63989a86ae0ed865b76da04e89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tr_exitexpr_incr",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "intros s1 s2 EXT.",
                        "VernacExtend",
                        "6136d5622996000c495269370d23d13f7fb32db4"
                    ]
                },
                {
                    "command": [
                        "generalize tr_expr_incr tr_condition_incr; intros I1 I2.",
                        "VernacExtend",
                        "16004c75a42e8c16cc3f320aa1b7b449a64cf700"
                    ]
                },
                {
                    "command": [
                        "induction 1; econstructor; eauto with rtlg.",
                        "VernacExtend",
                        "c011d1f3a20709040d285a11b70049286cac955b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tr_stmt_incr",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "intros s1 s2 EXT.",
                        "VernacExtend",
                        "6136d5622996000c495269370d23d13f7fb32db4"
                    ]
                },
                {
                    "command": [
                        "generalize tr_expr_incr tr_condition_incr tr_exprlist_incr tr_exitexpr_incr; intros I1 I2 I3 I4.",
                        "VernacExtend",
                        "520538452d01bbf025eb74821a9160ffe50e807f"
                    ]
                },
                {
                    "command": [
                        "pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT).",
                        "VernacExtend",
                        "dac6a5dd78da880ac11751066440fd6a4e66fa20"
                    ]
                },
                {
                    "command": [
                        "induction 1; econstructor; eauto.",
                        "VernacExtend",
                        "952ec40b755b364832b351b52d5f679da2bc42cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "transl_exit_charact",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "intros until incr.",
                        "VernacExtend",
                        "b415ed5824748ded130b50c2f3edfb058dd6a6a1"
                    ]
                },
                {
                    "command": [
                        "unfold transl_exit.",
                        "VernacExtend",
                        "885ec90160ccca230adf543231e6698553631c4c"
                    ]
                },
                {
                    "command": [
                        "destruct (nth_error nexits n); intro; monadInv H.",
                        "VernacExtend",
                        "291c605facd33a0c3906dddf236f26c23941af6d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "transl_jumptable_charact",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "induction tbl; intros.",
                        "VernacExtend",
                        "a6284b63d9df038810db8328d13edc9bbe933f96"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "monadInv H.",
                        "VernacExtend",
                        "3fc57761693b3f6ae9cb0dcb646a83c40e34f7f1"
                    ]
                },
                {
                    "command": [
                        "exploit transl_exit_charact; eauto.",
                        "VernacExtend",
                        "ccd670056b636b30c82f67938a403c2274421932"
                    ]
                },
                {
                    "command": [
                        "intros [A B].",
                        "VernacExtend",
                        "269ecc1b12a78cad85161d58003fb0ebdea8ebc3"
                    ]
                },
                {
                    "command": [
                        "exploit IHtbl; eauto.",
                        "VernacExtend",
                        "fe4db77e18a9c0e29856bc28f6c414c5cb0e10ad"
                    ]
                },
                {
                    "command": [
                        "intros [C D].",
                        "VernacExtend",
                        "2f6a424bd743322897b5ce3b772a6736bb0cd683"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (zeq v 0).",
                        "VernacExtend",
                        "92856e7f14118d6f47dd79f4a53a479d97de36eb"
                    ]
                },
                {
                    "command": [
                        "inv H.",
                        "VernacExtend",
                        "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
                    ]
                },
                {
                    "command": [
                        "exists x; auto.",
                        "VernacExtend",
                        "d8b3edd09d34953d83a4fbc6350c30f804073b09"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "convert_builtin_res_charact",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "destruct res; simpl; intros.",
                        "VernacExtend",
                        "704d87753a1d4b14263cd209288dc7ed962447cd"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "monadInv TR.",
                        "VernacExtend",
                        "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "unfold find_var in EQ.",
                        "VernacExtend",
                        "8a1fedd19c2b0cca6fcc2a68d9d9bd51fa2d1f80"
                    ]
                },
                {
                    "command": [
                        "destruct (map_vars map)!x; inv EQ; auto.",
                        "VernacExtend",
                        "d94b4f45730c4e618c03fd333ddc26cc1370a4f1"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct oty; monadInv TR.",
                        "VernacExtend",
                        "9cbdf5a7d7846c7f2df4ab0d664bae519477e47d"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "eauto with rtlg.",
                        "VernacExtend",
                        "a145247ea7d749b26f8b73ef08e1f16f0d73a308"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "monadInv TR.",
                        "VernacExtend",
                        "24a381c9ea23ce36a436f3abf5f996be8ccff4f9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}