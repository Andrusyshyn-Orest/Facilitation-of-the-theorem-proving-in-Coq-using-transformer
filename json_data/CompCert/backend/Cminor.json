{
    "filename": "backend/Cminor.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Coqlib.",
            "VernacRequire",
            "bbbe15041aca3a03300067f7acd445b462d537cc"
        ],
        [
            "Require Import Maps.",
            "VernacRequire",
            "f9a27637102e60e06a3c1ceb5a01819e80b9f645"
        ],
        [
            "Require Import AST.",
            "VernacRequire",
            "d103ecb096c06f34167fba01dd861491b0d5e84e"
        ],
        [
            "Require Import Integers.",
            "VernacRequire",
            "688f068e3335df7950b569ef75a5e993414c9874"
        ],
        [
            "Require Import Floats.",
            "VernacRequire",
            "b9c4a965f888465bf3445941d179c7194c314789"
        ],
        [
            "Require Import Events.",
            "VernacRequire",
            "8d12cd63a382accc976f222cc44b7a14814a06b9"
        ],
        [
            "Require Import Values.",
            "VernacRequire",
            "f69762569c40def2ecf819f8117763d2ee924d2a"
        ],
        [
            "Require Import Memory.",
            "VernacRequire",
            "2705b33fd6d3e12818791c70e219eee6a06d5191"
        ],
        [
            "Require Import Globalenvs.",
            "VernacRequire",
            "04fc9ef3af45317f021e6c5326bb64982be447d7"
        ],
        [
            "Require Import Smallstep.",
            "VernacRequire",
            "84c69dcbdb1069c688ce977fea648ae7688f06a8"
        ],
        [
            "Require Import Switch.",
            "VernacRequire",
            "1eaa1998544bbb29dbcfe82b0d7b10099dee3dc7"
        ],
        [
            "Inductive constant : Type := | Ointconst: int -> constant | Ofloatconst: float -> constant | Osingleconst: float32 -> constant | Olongconst: int64 -> constant | Oaddrsymbol: ident -> ptrofs -> constant | Oaddrstack: ptrofs -> constant.",
            "VernacInductive",
            "e5aa0735f5a6c9387d57253b8a8511d2bc47d403"
        ],
        [
            "Inductive unary_operation : Type := | Ocast8unsigned: unary_operation | Ocast8signed: unary_operation | Ocast16unsigned: unary_operation | Ocast16signed: unary_operation | Onegint: unary_operation | Onotint: unary_operation | Onegf: unary_operation | Oabsf: unary_operation | Onegfs: unary_operation | Oabsfs: unary_operation | Osingleoffloat: unary_operation | Ofloatofsingle: unary_operation | Ointoffloat: unary_operation | Ointuoffloat: unary_operation | Ofloatofint: unary_operation | Ofloatofintu: unary_operation | Ointofsingle: unary_operation | Ointuofsingle: unary_operation | Osingleofint: unary_operation | Osingleofintu: unary_operation | Onegl: unary_operation | Onotl: unary_operation | Ointoflong: unary_operation | Olongofint: unary_operation | Olongofintu: unary_operation | Olongoffloat: unary_operation | Olonguoffloat: unary_operation | Ofloatoflong: unary_operation | Ofloatoflongu: unary_operation | Olongofsingle: unary_operation | Olonguofsingle: unary_operation | Osingleoflong: unary_operation | Osingleoflongu: unary_operation.",
            "VernacInductive",
            "aa3dd6a49feb76317ace829bccc6f535ed8fe4e5"
        ],
        [
            "Inductive binary_operation : Type := | Oadd: binary_operation | Osub: binary_operation | Omul: binary_operation | Odiv: binary_operation | Odivu: binary_operation | Omod: binary_operation | Omodu: binary_operation | Oand: binary_operation | Oor: binary_operation | Oxor: binary_operation | Oshl: binary_operation | Oshr: binary_operation | Oshru: binary_operation | Oaddf: binary_operation | Osubf: binary_operation | Omulf: binary_operation | Odivf: binary_operation | Oaddfs: binary_operation | Osubfs: binary_operation | Omulfs: binary_operation | Odivfs: binary_operation | Oaddl: binary_operation | Osubl: binary_operation | Omull: binary_operation | Odivl: binary_operation | Odivlu: binary_operation | Omodl: binary_operation | Omodlu: binary_operation | Oandl: binary_operation | Oorl: binary_operation | Oxorl: binary_operation | Oshll: binary_operation | Oshrl: binary_operation | Oshrlu: binary_operation | Ocmp: comparison -> binary_operation | Ocmpu: comparison -> binary_operation | Ocmpf: comparison -> binary_operation | Ocmpfs: comparison -> binary_operation | Ocmpl: comparison -> binary_operation | Ocmplu: comparison -> binary_operation.",
            "VernacInductive",
            "97a0b66b19653450729814072ec1841b602b5ee7"
        ],
        [
            "Inductive expr : Type := | Evar : ident -> expr | Econst : constant -> expr | Eunop : unary_operation -> expr -> expr | Ebinop : binary_operation -> expr -> expr -> expr | Eload : memory_chunk -> expr -> expr.",
            "VernacInductive",
            "ea61a9b1705131cee51937689196a57df0834a1d"
        ],
        [
            "Definition label := ident.",
            "VernacDefinition",
            "a8b53eef223b0fe9f19e1840eb3d0494fbc9a3b5"
        ],
        [
            "Inductive stmt : Type := | Sskip: stmt | Sassign : ident -> expr -> stmt | Sstore : memory_chunk -> expr -> expr -> stmt | Scall : option ident -> signature -> expr -> list expr -> stmt | Stailcall: signature -> expr -> list expr -> stmt | Sbuiltin : option ident -> external_function -> list expr -> stmt | Sseq: stmt -> stmt -> stmt | Sifthenelse: expr -> stmt -> stmt -> stmt | Sloop: stmt -> stmt | Sblock: stmt -> stmt | Sexit: nat -> stmt | Sswitch: bool -> expr -> list (Z * nat) -> nat -> stmt | Sreturn: option expr -> stmt | Slabel: label -> stmt -> stmt | Sgoto: label -> stmt.",
            "VernacInductive",
            "0dbeb241fd5221043a51c644d88bae920e53d07d"
        ],
        [
            "Record function : Type := mkfunction { fn_sig: signature; fn_params: list ident; fn_vars: list ident; fn_stackspace: Z; fn_body: stmt }.",
            "VernacInductive",
            "d9f82ca7b71dae7a587e73023a7ad8776a9b5115"
        ],
        [
            "Definition fundef := AST.fundef function.",
            "VernacDefinition",
            "9cf622c746a9b58a51cebc97469342b997e49284"
        ],
        [
            "Definition program := AST.program fundef unit.",
            "VernacDefinition",
            "cfadb9a12e6df9faa40df706d0e99e4d4aa89bc3"
        ],
        [
            "Definition funsig (fd: fundef) := match fd with | Internal f => fn_sig f | External ef => ef_sig ef end.",
            "VernacDefinition",
            "3019fbefbd0cd5f95111e16722a932ed704587d5"
        ],
        [
            "Definition genv := Genv.t fundef unit.",
            "VernacDefinition",
            "558ae6d6506288d7eeb39bb497dd26e4fa2a28e4"
        ],
        [
            "Definition env := PTree.t val.",
            "VernacDefinition",
            "f53265d218795c15f3551cd01f08533b0ae31528"
        ],
        [
            "Fixpoint set_params (vl: list val) (il: list ident) {struct il} : env := match il, vl with | i1 :: is, v1 :: vs => PTree.set i1 v1 (set_params vs is) | i1 :: is, nil => PTree.set i1 Vundef (set_params nil is) | _, _ => PTree.empty val end.",
            "VernacFixpoint",
            "0acf997316af16dcd98fe5b0135c7753f0c25820"
        ],
        [
            "Fixpoint set_locals (il: list ident) (e: env) {struct il} : env := match il with | nil => e | i1 :: is => PTree.set i1 Vundef (set_locals is e) end.",
            "VernacFixpoint",
            "98a6eb31c04a3d9269a80a165f637f78da33165f"
        ],
        [
            "Definition set_optvar (optid: option ident) (v: val) (e: env) : env := match optid with | None => e | Some id => PTree.set id v e end.",
            "VernacDefinition",
            "45e286171a8221811124b7b50a07cbbdfb02f277"
        ],
        [
            "Inductive cont: Type := | Kstop: cont | Kseq: stmt -> cont -> cont | Kblock: cont -> cont | Kcall: option ident -> function -> val -> env -> cont -> cont.",
            "VernacInductive",
            "24f93bba652c4a05e9973f1cb36ba43d964300b6"
        ],
        [
            "Inductive state: Type := | State: forall (f: function) (s: stmt) (k: cont) (sp: val) (e: env) (m: mem), state | Callstate: forall (f: fundef) (args: list val) (k: cont) (m: mem), state | Returnstate: forall (v: val) (k: cont) (m: mem), state.",
            "VernacInductive",
            "9604e5b87907a3201ec0152193d12eb2e756cc1f"
        ],
        [
            "Section RELSEM.",
            "VernacBeginSection",
            "56cea622d6c9a9251b433cfd4de33058b7d80bb5"
        ],
        [
            "Variable ge: genv.",
            "VernacAssumption",
            "5dcbd76196753bb6e2da03561ae76151d62a94d8"
        ],
        [
            "Definition eval_constant (sp: val) (cst: constant) : option val := match cst with | Ointconst n => Some (Vint n) | Ofloatconst n => Some (Vfloat n) | Osingleconst n => Some (Vsingle n) | Olongconst n => Some (Vlong n) | Oaddrsymbol s ofs => Some (Genv.symbol_address ge s ofs) | Oaddrstack ofs => Some (Val.offset_ptr sp ofs) end.",
            "VernacDefinition",
            "4eb26f25dc55d0e0dd3a7fab13beabb51e60eb9e"
        ],
        [
            "Definition eval_unop (op: unary_operation) (arg: val) : option val := match op with | Ocast8unsigned => Some (Val.zero_ext 8 arg) | Ocast8signed => Some (Val.sign_ext 8 arg) | Ocast16unsigned => Some (Val.zero_ext 16 arg) | Ocast16signed => Some (Val.sign_ext 16 arg) | Onegint => Some (Val.negint arg) | Onotint => Some (Val.notint arg) | Onegf => Some (Val.negf arg) | Oabsf => Some (Val.absf arg) | Onegfs => Some (Val.negfs arg) | Oabsfs => Some (Val.absfs arg) | Osingleoffloat => Some (Val.singleoffloat arg) | Ofloatofsingle => Some (Val.floatofsingle arg) | Ointoffloat => Val.intoffloat arg | Ointuoffloat => Val.intuoffloat arg | Ofloatofint => Val.floatofint arg | Ofloatofintu => Val.floatofintu arg | Ointofsingle => Val.intofsingle arg | Ointuofsingle => Val.intuofsingle arg | Osingleofint => Val.singleofint arg | Osingleofintu => Val.singleofintu arg | Onegl => Some (Val.negl arg) | Onotl => Some (Val.notl arg) | Ointoflong => Some (Val.loword arg) | Olongofint => Some (Val.longofint arg) | Olongofintu => Some (Val.longofintu arg) | Olongoffloat => Val.longoffloat arg | Olonguoffloat => Val.longuoffloat arg | Ofloatoflong => Val.floatoflong arg | Ofloatoflongu => Val.floatoflongu arg | Olongofsingle => Val.longofsingle arg | Olonguofsingle => Val.longuofsingle arg | Osingleoflong => Val.singleoflong arg | Osingleoflongu => Val.singleoflongu arg end.",
            "VernacDefinition",
            "3a449d4d1a2607e009e261f92dabbd01020c99de"
        ],
        [
            "Definition eval_binop (op: binary_operation) (arg1 arg2: val) (m: mem): option val := match op with | Oadd => Some (Val.add arg1 arg2) | Osub => Some (Val.sub arg1 arg2) | Omul => Some (Val.mul arg1 arg2) | Odiv => Val.divs arg1 arg2 | Odivu => Val.divu arg1 arg2 | Omod => Val.mods arg1 arg2 | Omodu => Val.modu arg1 arg2 | Oand => Some (Val.and arg1 arg2) | Oor => Some (Val.or arg1 arg2) | Oxor => Some (Val.xor arg1 arg2) | Oshl => Some (Val.shl arg1 arg2) | Oshr => Some (Val.shr arg1 arg2) | Oshru => Some (Val.shru arg1 arg2) | Oaddf => Some (Val.addf arg1 arg2) | Osubf => Some (Val.subf arg1 arg2) | Omulf => Some (Val.mulf arg1 arg2) | Odivf => Some (Val.divf arg1 arg2) | Oaddfs => Some (Val.addfs arg1 arg2) | Osubfs => Some (Val.subfs arg1 arg2) | Omulfs => Some (Val.mulfs arg1 arg2) | Odivfs => Some (Val.divfs arg1 arg2) | Oaddl => Some (Val.addl arg1 arg2) | Osubl => Some (Val.subl arg1 arg2) | Omull => Some (Val.mull arg1 arg2) | Odivl => Val.divls arg1 arg2 | Odivlu => Val.divlu arg1 arg2 | Omodl => Val.modls arg1 arg2 | Omodlu => Val.modlu arg1 arg2 | Oandl => Some (Val.andl arg1 arg2) | Oorl => Some (Val.orl arg1 arg2) | Oxorl => Some (Val.xorl arg1 arg2) | Oshll => Some (Val.shll arg1 arg2) | Oshrl => Some (Val.shrl arg1 arg2) | Oshrlu => Some (Val.shrlu arg1 arg2) | Ocmp c => Some (Val.cmp c arg1 arg2) | Ocmpu c => Some (Val.cmpu (Mem.valid_pointer m) c arg1 arg2) | Ocmpf c => Some (Val.cmpf c arg1 arg2) | Ocmpfs c => Some (Val.cmpfs c arg1 arg2) | Ocmpl c => Val.cmpl c arg1 arg2 | Ocmplu c => Val.cmplu (Mem.valid_pointer m) c arg1 arg2 end.",
            "VernacDefinition",
            "04ace9d34b14ae280aeb1c99d4fb87c1f29cb170"
        ],
        [
            "Section EVAL_EXPR.",
            "VernacBeginSection",
            "19acab3de7ff2904e64052b15e0c53a67d401973"
        ],
        [
            "Variable sp: val.",
            "VernacAssumption",
            "b2e20427c402e8af5ba5f5d0ebd2eec1f2cc6944"
        ],
        [
            "Variable e: env.",
            "VernacAssumption",
            "246a24d9eb5be930b928cc64176ad206a11440ce"
        ],
        [
            "Variable m: mem.",
            "VernacAssumption",
            "253337f404928b0a16b3940626ec20c52cfd3aad"
        ],
        [
            "Inductive eval_expr: expr -> val -> Prop := | eval_Evar: forall id v, PTree.get id e = Some v -> eval_expr (Evar id) v | eval_Econst: forall cst v, eval_constant sp cst = Some v -> eval_expr (Econst cst) v | eval_Eunop: forall op a1 v1 v, eval_expr a1 v1 -> eval_unop op v1 = Some v -> eval_expr (Eunop op a1) v | eval_Ebinop: forall op a1 a2 v1 v2 v, eval_expr a1 v1 -> eval_expr a2 v2 -> eval_binop op v1 v2 m = Some v -> eval_expr (Ebinop op a1 a2) v | eval_Eload: forall chunk addr vaddr v, eval_expr addr vaddr -> Mem.loadv chunk m vaddr = Some v -> eval_expr (Eload chunk addr) v.",
            "VernacInductive",
            "abd409efdf3782f8f285bea4cc20ce024a661792"
        ],
        [
            "Inductive eval_exprlist: list expr -> list val -> Prop := | eval_Enil: eval_exprlist nil nil | eval_Econs: forall a1 al v1 vl, eval_expr a1 v1 -> eval_exprlist al vl -> eval_exprlist (a1 :: al) (v1 :: vl).",
            "VernacInductive",
            "96a5de5cc03b21a463a10e3062c753e331efbf1a"
        ],
        [
            "End EVAL_EXPR.",
            "VernacEndSegment",
            "3ac164eecd8fdd56f715c627e3a0a5b8dcdceb23"
        ],
        [
            "Fixpoint call_cont (k: cont) : cont := match k with | Kseq s k => call_cont k | Kblock k => call_cont k | _ => k end.",
            "VernacFixpoint",
            "b5f2c507698ae7af3b007922b072c1eaea4236a2"
        ],
        [
            "Definition is_call_cont (k: cont) : Prop := match k with | Kstop => True | Kcall _ _ _ _ _ => True | _ => False end.",
            "VernacDefinition",
            "01cf6b0b307893ab5b62adfd4fdfebafa0d295e7"
        ],
        [
            "Fixpoint find_label (lbl: label) (s: stmt) (k: cont) {struct s}: option (stmt * cont) := match s with | Sseq s1 s2 => match find_label lbl s1 (Kseq s2 k) with | Some sk => Some sk | None => find_label lbl s2 k end | Sifthenelse a s1 s2 => match find_label lbl s1 k with | Some sk => Some sk | None => find_label lbl s2 k end | Sloop s1 => find_label lbl s1 (Kseq (Sloop s1) k) | Sblock s1 => find_label lbl s1 (Kblock k) | Slabel lbl' s' => if ident_eq lbl lbl' then Some(s', k) else find_label lbl s' k | _ => None end.",
            "VernacFixpoint",
            "912ee24753db370e41108daa64ef4461e8d62ba5"
        ],
        [
            "Inductive step: state -> trace -> state -> Prop := | step_skip_seq: forall f s k sp e m, step (State f Sskip (Kseq s k) sp e m) E0 (State f s k sp e m) | step_skip_block: forall f k sp e m, step (State f Sskip (Kblock k) sp e m) E0 (State f Sskip k sp e m) | step_skip_call: forall f k sp e m m', is_call_cont k -> Mem.free m sp 0 f.(fn_stackspace) = Some m' -> step (State f Sskip k (Vptr sp Ptrofs.zero) e m) E0 (Returnstate Vundef k m') | step_assign: forall f id a k sp e m v, eval_expr sp e m a v -> step (State f (Sassign id a) k sp e m) E0 (State f Sskip k sp (PTree.set id v e) m) | step_store: forall f chunk addr a k sp e m vaddr v m', eval_expr sp e m addr vaddr -> eval_expr sp e m a v -> Mem.storev chunk m vaddr v = Some m' -> step (State f (Sstore chunk addr a) k sp e m) E0 (State f Sskip k sp e m') | step_call: forall f optid sig a bl k sp e m vf vargs fd, eval_expr sp e m a vf -> eval_exprlist sp e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> step (State f (Scall optid sig a bl) k sp e m) E0 (Callstate fd vargs (Kcall optid f sp e k) m) | step_tailcall: forall f sig a bl k sp e m vf vargs fd m', eval_expr (Vptr sp Ptrofs.zero) e m a vf -> eval_exprlist (Vptr sp Ptrofs.zero) e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> Mem.free m sp 0 f.(fn_stackspace) = Some m' -> step (State f (Stailcall sig a bl) k (Vptr sp Ptrofs.zero) e m) E0 (Callstate fd vargs (call_cont k) m') | step_builtin: forall f optid ef bl k sp e m vargs t vres m', eval_exprlist sp e m bl vargs -> external_call ef ge vargs m t vres m' -> step (State f (Sbuiltin optid ef bl) k sp e m) t (State f Sskip k sp (set_optvar optid vres e) m') | step_seq: forall f s1 s2 k sp e m, step (State f (Sseq s1 s2) k sp e m) E0 (State f s1 (Kseq s2 k) sp e m) | step_ifthenelse: forall f a s1 s2 k sp e m v b, eval_expr sp e m a v -> Val.bool_of_val v b -> step (State f (Sifthenelse a s1 s2) k sp e m) E0 (State f (if b then s1 else s2) k sp e m) | step_loop: forall f s k sp e m, step (State f (Sloop s) k sp e m) E0 (State f s (Kseq (Sloop s) k) sp e m) | step_block: forall f s k sp e m, step (State f (Sblock s) k sp e m) E0 (State f s (Kblock k) sp e m) | step_exit_seq: forall f n s k sp e m, step (State f (Sexit n) (Kseq s k) sp e m) E0 (State f (Sexit n) k sp e m) | step_exit_block_0: forall f k sp e m, step (State f (Sexit O) (Kblock k) sp e m) E0 (State f Sskip k sp e m) | step_exit_block_S: forall f n k sp e m, step (State f (Sexit (S n)) (Kblock k) sp e m) E0 (State f (Sexit n) k sp e m) | step_switch: forall f islong a cases default k sp e m v n, eval_expr sp e m a v -> switch_argument islong v n -> step (State f (Sswitch islong a cases default) k sp e m) E0 (State f (Sexit (switch_target n default cases)) k sp e m) | step_return_0: forall f k sp e m m', Mem.free m sp 0 f.(fn_stackspace) = Some m' -> step (State f (Sreturn None) k (Vptr sp Ptrofs.zero) e m) E0 (Returnstate Vundef (call_cont k) m') | step_return_1: forall f a k sp e m v m', eval_expr (Vptr sp Ptrofs.zero) e m a v -> Mem.free m sp 0 f.(fn_stackspace) = Some m' -> step (State f (Sreturn (Some a)) k (Vptr sp Ptrofs.zero) e m) E0 (Returnstate v (call_cont k) m') | step_label: forall f lbl s k sp e m, step (State f (Slabel lbl s) k sp e m) E0 (State f s k sp e m) | step_goto: forall f lbl k sp e m s' k', find_label lbl f.(fn_body) (call_cont k) = Some(s', k') -> step (State f (Sgoto lbl) k sp e m) E0 (State f s' k' sp e m) | step_internal_function: forall f vargs k m m' sp e, Mem.alloc m 0 f.(fn_stackspace) = (m', sp) -> set_locals f.(fn_vars) (set_params vargs f.(fn_params)) = e -> step (Callstate (Internal f) vargs k m) E0 (State f f.(fn_body) k (Vptr sp Ptrofs.zero) e m') | step_external_function: forall ef vargs k m t vres m', external_call ef ge vargs m t vres m' -> step (Callstate (External ef) vargs k m) t (Returnstate vres k m') | step_return: forall v optid f sp e k m, step (Returnstate v (Kcall optid f sp e k) m) E0 (State f Sskip k sp (set_optvar optid v e) m).",
            "VernacInductive",
            "2f8ccbc048a8df6030994fb2936f7ec4afce62f5"
        ],
        [
            "End RELSEM.",
            "VernacEndSegment",
            "5456b4faa708cb7309b5b1832a554cb5674e5dd1"
        ],
        [
            "Inductive initial_state (p: program): state -> Prop := | initial_state_intro: forall b f m0, let ge := Genv.globalenv p in Genv.init_mem p = Some m0 -> Genv.find_symbol ge p.(prog_main) = Some b -> Genv.find_funct_ptr ge b = Some f -> funsig f = signature_main -> initial_state p (Callstate f nil Kstop m0).",
            "VernacInductive",
            "85d1222d1e0fdc34219430004f55a93c5ca6fa16"
        ],
        [
            "Inductive final_state: state -> int -> Prop := | final_state_intro: forall r m, final_state (Returnstate (Vint r) Kstop m) r.",
            "VernacInductive",
            "75fe23adc0c3ad2f7f029f008cf5f90d4e98c2dc"
        ],
        [
            "Definition semantics (p: program) := Semantics step (initial_state p) final_state (Genv.globalenv p).",
            "VernacDefinition",
            "ea50aca4c4f5ef70e455221b5ef33d1d328493b4"
        ],
        [
            "Lemma semantics_receptive: forall (p: program), receptive (semantics p).",
            "VernacStartTheoremProof",
            "fa9c80be50300136206c9029debf75c1f3dae0f9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "constructor; simpl; intros.",
            "VernacExtend",
            "dcd76c351204acf8d4b7d76eea612fabf67729fc"
        ],
        [
            "assert (t1 = E0 -> exists s2, step (Genv.globalenv p) s t2 s2).",
            "VernacExtend",
            "1c610db354300c07155abd8cf33a2cc2e9b7507e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "exists s1; auto.",
            "VernacExtend",
            "b635d662d92c9a6dd854d136739e1523825b06df"
        ],
        [
            "inversion H; subst; auto.",
            "VernacExtend",
            "3ac5a8efa0f6861868f1bfc9ce7119d14816504c"
        ],
        [
            "exploit external_call_receptive; eauto.",
            "VernacExtend",
            "42171c2cba80f4eaa15b793c138fdf9ec3791cb3"
        ],
        [
            "intros [vres2 [m2 EC2]].",
            "VernacExtend",
            "ac3db512f72453ba4230bfb0223cb22b519318c5"
        ],
        [
            "exists (State f Sskip k sp (set_optvar optid vres2 e) m2).",
            "VernacExtend",
            "5f15d632f8dfd816115f5662b7c2d29ba5ffa1e3"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "exploit external_call_receptive; eauto.",
            "VernacExtend",
            "42171c2cba80f4eaa15b793c138fdf9ec3791cb3"
        ],
        [
            "intros [vres2 [m2 EC2]].",
            "VernacExtend",
            "ac3db512f72453ba4230bfb0223cb22b519318c5"
        ],
        [
            "exists (Returnstate vres2 k m2).",
            "VernacExtend",
            "8839a91b043f49abef52a7e3212b8a94ff5a73a2"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "red; intros; inv H; simpl; try omega; eapply external_call_trace_length; eauto.",
            "VernacExtend",
            "519743e1256c1493184b9c66f1ed5d39af3030c9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive outcome: Type := | Out_normal: outcome | Out_exit: nat -> outcome | Out_return: option val -> outcome | Out_tailcall_return: val -> outcome.",
            "VernacInductive",
            "a7d8a394ee71d13497aac859d538fbeb2e296bf3"
        ],
        [
            "Definition outcome_block (out: outcome) : outcome := match out with | Out_exit O => Out_normal | Out_exit (S n) => Out_exit n | out => out end.",
            "VernacDefinition",
            "9a82d26083eefdafb121cc702b48b2a69f59a1ff"
        ],
        [
            "Definition outcome_result_value (out: outcome) (retsig: option typ) (vres: val) : Prop := match out with | Out_normal => vres = Vundef | Out_return None => vres = Vundef | Out_return (Some v) => retsig <> None /\\ vres = v | Out_tailcall_return v => vres = v | _ => False end.",
            "VernacDefinition",
            "19d287d7fd0fb569a75c91f77937f1289acfba92"
        ],
        [
            "Definition outcome_free_mem (out: outcome) (m: mem) (sp: block) (sz: Z) (m': mem) := match out with | Out_tailcall_return _ => m' = m | _ => Mem.free m sp 0 sz = Some m' end.",
            "VernacDefinition",
            "14df8f2c8a35a17f7601dbaa7e7de62d94cd7207"
        ],
        [
            "Section NATURALSEM.",
            "VernacBeginSection",
            "eccdd0f0cac0da0ba17d783c39dfa7e5b4e40480"
        ],
        [
            "Variable ge: genv.",
            "VernacAssumption",
            "5dcbd76196753bb6e2da03561ae76151d62a94d8"
        ],
        [
            "Inductive eval_funcall: mem -> fundef -> list val -> trace -> mem -> val -> Prop := | eval_funcall_internal: forall m f vargs m1 sp e t e2 m2 out vres m3, Mem.alloc m 0 f.(fn_stackspace) = (m1, sp) -> set_locals f.(fn_vars) (set_params vargs f.(fn_params)) = e -> exec_stmt f (Vptr sp Ptrofs.zero) e m1 f.(fn_body) t e2 m2 out -> outcome_result_value out f.(fn_sig).(sig_res) vres -> outcome_free_mem out m2 sp f.(fn_stackspace) m3 -> eval_funcall m (Internal f) vargs t m3 vres | eval_funcall_external: forall ef m args t res m', external_call ef ge args m t res m' -> eval_funcall m (External ef) args t m' res with exec_stmt: function -> val -> env -> mem -> stmt -> trace -> env -> mem -> outcome -> Prop := | exec_Sskip: forall f sp e m, exec_stmt f sp e m Sskip E0 e m Out_normal | exec_Sassign: forall f sp e m id a v, eval_expr ge sp e m a v -> exec_stmt f sp e m (Sassign id a) E0 (PTree.set id v e) m Out_normal | exec_Sstore: forall f sp e m chunk addr a vaddr v m', eval_expr ge sp e m addr vaddr -> eval_expr ge sp e m a v -> Mem.storev chunk m vaddr v = Some m' -> exec_stmt f sp e m (Sstore chunk addr a) E0 e m' Out_normal | exec_Scall: forall f sp e m optid sig a bl vf vargs fd t m' vres e', eval_expr ge sp e m a vf -> eval_exprlist ge sp e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> eval_funcall m fd vargs t m' vres -> e' = set_optvar optid vres e -> exec_stmt f sp e m (Scall optid sig a bl) t e' m' Out_normal | exec_Sbuiltin: forall f sp e m optid ef bl t m' vargs vres e', eval_exprlist ge sp e m bl vargs -> external_call ef ge vargs m t vres m' -> e' = set_optvar optid vres e -> exec_stmt f sp e m (Sbuiltin optid ef bl) t e' m' Out_normal | exec_Sifthenelse: forall f sp e m a s1 s2 v b t e' m' out, eval_expr ge sp e m a v -> Val.bool_of_val v b -> exec_stmt f sp e m (if b then s1 else s2) t e' m' out -> exec_stmt f sp e m (Sifthenelse a s1 s2) t e' m' out | exec_Sseq_continue: forall f sp e m t s1 t1 e1 m1 s2 t2 e2 m2 out, exec_stmt f sp e m s1 t1 e1 m1 Out_normal -> exec_stmt f sp e1 m1 s2 t2 e2 m2 out -> t = t1 ** t2 -> exec_stmt f sp e m (Sseq s1 s2) t e2 m2 out | exec_Sseq_stop: forall f sp e m t s1 s2 e1 m1 out, exec_stmt f sp e m s1 t e1 m1 out -> out <> Out_normal -> exec_stmt f sp e m (Sseq s1 s2) t e1 m1 out | exec_Sloop_loop: forall f sp e m s t t1 e1 m1 t2 e2 m2 out, exec_stmt f sp e m s t1 e1 m1 Out_normal -> exec_stmt f sp e1 m1 (Sloop s) t2 e2 m2 out -> t = t1 ** t2 -> exec_stmt f sp e m (Sloop s) t e2 m2 out | exec_Sloop_stop: forall f sp e m t s e1 m1 out, exec_stmt f sp e m s t e1 m1 out -> out <> Out_normal -> exec_stmt f sp e m (Sloop s) t e1 m1 out | exec_Sblock: forall f sp e m s t e1 m1 out, exec_stmt f sp e m s t e1 m1 out -> exec_stmt f sp e m (Sblock s) t e1 m1 (outcome_block out) | exec_Sexit: forall f sp e m n, exec_stmt f sp e m (Sexit n) E0 e m (Out_exit n) | exec_Sswitch: forall f sp e m islong a cases default v n, eval_expr ge sp e m a v -> switch_argument islong v n -> exec_stmt f sp e m (Sswitch islong a cases default) E0 e m (Out_exit (switch_target n default cases)) | exec_Sreturn_none: forall f sp e m, exec_stmt f sp e m (Sreturn None) E0 e m (Out_return None) | exec_Sreturn_some: forall f sp e m a v, eval_expr ge sp e m a v -> exec_stmt f sp e m (Sreturn (Some a)) E0 e m (Out_return (Some v)) | exec_Stailcall: forall f sp e m sig a bl vf vargs fd t m' m'' vres, eval_expr ge (Vptr sp Ptrofs.zero) e m a vf -> eval_exprlist ge (Vptr sp Ptrofs.zero) e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> Mem.free m sp 0 f.(fn_stackspace) = Some m' -> eval_funcall m' fd vargs t m'' vres -> exec_stmt f (Vptr sp Ptrofs.zero) e m (Stailcall sig a bl) t e m'' (Out_tailcall_return vres).",
            "VernacInductive",
            "f45f11b37bbb66db52d1b68e6b6039200b725d25"
        ],
        [
            "Scheme eval_funcall_ind2 := Minimality for eval_funcall Sort Prop with exec_stmt_ind2 := Minimality for exec_stmt Sort Prop.",
            "VernacScheme",
            "23a3ded22e4643e23a9758be3beea0e4c5779494"
        ],
        [
            "Combined Scheme eval_funcall_exec_stmt_ind2 from eval_funcall_ind2, exec_stmt_ind2.",
            "VernacCombinedScheme",
            "7679e79a49d89fcab3f1fb03aefdd08b34c36113"
        ],
        [
            "CoInductive evalinf_funcall: mem -> fundef -> list val -> traceinf -> Prop := | evalinf_funcall_internal: forall m f vargs m1 sp e t, Mem.alloc m 0 f.(fn_stackspace) = (m1, sp) -> set_locals f.(fn_vars) (set_params vargs f.(fn_params)) = e -> execinf_stmt f (Vptr sp Ptrofs.zero) e m1 f.(fn_body) t -> evalinf_funcall m (Internal f) vargs t with execinf_stmt: function -> val -> env -> mem -> stmt -> traceinf -> Prop := | execinf_Scall: forall f sp e m optid sig a bl vf vargs fd t, eval_expr ge sp e m a vf -> eval_exprlist ge sp e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> evalinf_funcall m fd vargs t -> execinf_stmt f sp e m (Scall optid sig a bl) t | execinf_Sifthenelse: forall f sp e m a s1 s2 v b t, eval_expr ge sp e m a v -> Val.bool_of_val v b -> execinf_stmt f sp e m (if b then s1 else s2) t -> execinf_stmt f sp e m (Sifthenelse a s1 s2) t | execinf_Sseq_1: forall f sp e m t s1 s2, execinf_stmt f sp e m s1 t -> execinf_stmt f sp e m (Sseq s1 s2) t | execinf_Sseq_2: forall f sp e m t s1 t1 e1 m1 s2 t2, exec_stmt f sp e m s1 t1 e1 m1 Out_normal -> execinf_stmt f sp e1 m1 s2 t2 -> t = t1 *** t2 -> execinf_stmt f sp e m (Sseq s1 s2) t | execinf_Sloop_body: forall f sp e m s t, execinf_stmt f sp e m s t -> execinf_stmt f sp e m (Sloop s) t | execinf_Sloop_loop: forall f sp e m s t t1 e1 m1 t2, exec_stmt f sp e m s t1 e1 m1 Out_normal -> execinf_stmt f sp e1 m1 (Sloop s) t2 -> t = t1 *** t2 -> execinf_stmt f sp e m (Sloop s) t | execinf_Sblock: forall f sp e m s t, execinf_stmt f sp e m s t -> execinf_stmt f sp e m (Sblock s) t | execinf_Stailcall: forall f sp e m sig a bl vf vargs fd m' t, eval_expr ge (Vptr sp Ptrofs.zero) e m a vf -> eval_exprlist ge (Vptr sp Ptrofs.zero) e m bl vargs -> Genv.find_funct ge vf = Some fd -> funsig fd = sig -> Mem.free m sp 0 f.(fn_stackspace) = Some m' -> evalinf_funcall m' fd vargs t -> execinf_stmt f (Vptr sp Ptrofs.zero) e m (Stailcall sig a bl) t.",
            "VernacInductive",
            "657a82e9b28d77b960a34e32aac963bb1525bac0"
        ],
        [
            "End NATURALSEM.",
            "VernacEndSegment",
            "f8135c6f19cbfdd866ecc83ea9f42297e0267c0b"
        ],
        [
            "Inductive bigstep_program_terminates (p: program): trace -> int -> Prop := | bigstep_program_terminates_intro: forall b f m0 t m r, let ge := Genv.globalenv p in Genv.init_mem p = Some m0 -> Genv.find_symbol ge p.(prog_main) = Some b -> Genv.find_funct_ptr ge b = Some f -> funsig f = signature_main -> eval_funcall ge m0 f nil t m (Vint r) -> bigstep_program_terminates p t r.",
            "VernacInductive",
            "b242fa581d3b53bb4fbff1859ae9f9101d3d9bd9"
        ],
        [
            "Inductive bigstep_program_diverges (p: program): traceinf -> Prop := | bigstep_program_diverges_intro: forall b f m0 t, let ge := Genv.globalenv p in Genv.init_mem p = Some m0 -> Genv.find_symbol ge p.(prog_main) = Some b -> Genv.find_funct_ptr ge b = Some f -> funsig f = signature_main -> evalinf_funcall ge m0 f nil t -> bigstep_program_diverges p t.",
            "VernacInductive",
            "7544aaba68c962b535bff2faf7f16ecbf6d69772"
        ],
        [
            "Definition bigstep_semantics (p: program) := Bigstep_semantics (bigstep_program_terminates p) (bigstep_program_diverges p).",
            "VernacDefinition",
            "20059c1d18277ad79a6a7ebb2577f58ef981fca1"
        ],
        [
            "Section BIGSTEP_TO_TRANSITION.",
            "VernacBeginSection",
            "fda818c0494f1720241aa45bd1496f73b51d6b30"
        ],
        [
            "Variable prog: program.",
            "VernacAssumption",
            "8edfcc461f8822741d13a143d725057d8d3f993a"
        ],
        [
            "Let ge := Genv.globalenv prog.",
            "VernacDefinition",
            "cce8960f9bb57fcaf02f1f588c7dd031df1f13fa"
        ],
        [
            "Inductive outcome_state_match (sp: val) (e: env) (m: mem) (f: function) (k: cont): outcome -> state -> Prop := | osm_normal: outcome_state_match sp e m f k Out_normal (State f Sskip k sp e m) | osm_exit: forall n, outcome_state_match sp e m f k (Out_exit n) (State f (Sexit n) k sp e m) | osm_return_none: forall k', call_cont k' = call_cont k -> outcome_state_match sp e m f k (Out_return None) (State f (Sreturn None) k' sp e m) | osm_return_some: forall k' a v, call_cont k' = call_cont k -> eval_expr ge sp e m a v -> outcome_state_match sp e m f k (Out_return (Some v)) (State f (Sreturn (Some a)) k' sp e m) | osm_tail: forall v, outcome_state_match sp e m f k (Out_tailcall_return v) (Returnstate v (call_cont k) m).",
            "VernacInductive",
            "6a2153e11fffd9618450e8ed20f28b635d28bd2a"
        ],
        [
            "Remark is_call_cont_call_cont: forall k, is_call_cont (call_cont k).",
            "VernacStartTheoremProof",
            "ebed636ee15c99b2c411424fcfb19b8804f240d5"
        ],
        [
            "induction k; simpl; auto.",
            "VernacExtend",
            "93dc8fa2ac835d613a49c74a0857819ed0e74cd8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark call_cont_is_call_cont: forall k, is_call_cont k -> call_cont k = k.",
            "VernacStartTheoremProof",
            "bf2d65eee82c92fac18d291da6485e5b0a850666"
        ],
        [
            "destruct k; simpl; intros; auto || contradiction.",
            "VernacExtend",
            "2d673d8319c9ac8ed303773218f11a4e3e0df884"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_funcall_exec_stmt_steps: (forall m fd args t m' res, eval_funcall ge m fd args t m' res -> forall k, is_call_cont k -> star step ge (Callstate fd args k m) t (Returnstate res k m')) /\\(forall f sp e m s t e' m' out, exec_stmt ge f sp e m s t e' m' out -> forall k, exists S, star step ge (State f s k sp e m) t S /\\ outcome_state_match sp e' m' f k out S).",
            "VernacStartTheoremProof",
            "5006b737916a25d9acea2d9e49097126e2058100"
        ],
        [
            "apply eval_funcall_exec_stmt_ind2; intros.",
            "VernacExtend",
            "a0913fe14a37ef8a96d490f699b2af2185920f3a"
        ],
        [
            "destruct (H2 k) as [S [A B]].",
            "VernacExtend",
            "b41d1d2d85687ad8f2677f8966b2516df143dba2"
        ],
        [
            "assert (call_cont k = k) by (apply call_cont_is_call_cont; auto).",
            "VernacExtend",
            "0d0a93e520996a266e0850cfb8cfa7d74e5c52fb"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A.",
            "VernacExtend",
            "02c72f61c801380ffbbb4e931e1d9c56db21ed4f"
        ],
        [
            "inversion B; clear B; subst out; simpl in H3; simpl; try contradiction.",
            "VernacExtend",
            "47a1192561a8761d31f3e8a7965beb2c24a6d9f8"
        ],
        [
            "subst vres.",
            "VernacExtend",
            "a0a9991db286228d471a3b363e5bfcfb8ae6e90b"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "apply step_skip_call; auto.",
            "VernacExtend",
            "9a6fafed78f2abf4e5099ea7b8525485e764eb53"
        ],
        [
            "subst vres.",
            "VernacExtend",
            "a0a9991db286228d471a3b363e5bfcfb8ae6e90b"
        ],
        [
            "replace k with (call_cont k') by congruence.",
            "VernacExtend",
            "e79b936bf443ffd311bfa61d05a2836e60f88cd5"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "apply step_return_0; auto.",
            "VernacExtend",
            "8e6c20c53a4b62a688589b1b3f9b9c595354b9d6"
        ],
        [
            "destruct H3.",
            "VernacExtend",
            "1c0230aafd4a4c88f93d392a681d452fd6dea35e"
        ],
        [
            "subst vres.",
            "VernacExtend",
            "a0a9991db286228d471a3b363e5bfcfb8ae6e90b"
        ],
        [
            "replace k with (call_cont k') by congruence.",
            "VernacExtend",
            "e79b936bf443ffd311bfa61d05a2836e60f88cd5"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "eapply step_return_1; eauto.",
            "VernacExtend",
            "bed190e11a275c7827960d0ace5e4b59372d62e9"
        ],
        [
            "subst vres.",
            "VernacExtend",
            "a0a9991db286228d471a3b363e5bfcfb8ae6e90b"
        ],
        [
            "red in H4.",
            "VernacExtend",
            "fb009c7187d3c583c5dfa4ed8fab60659bf67bec"
        ],
        [
            "subst m3.",
            "VernacExtend",
            "d55617a89479a25f74b7710e22329ac76d5ccf5e"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "apply star_refl.",
            "VernacExtend",
            "8488e5b2807fef16c5056ba3f303e3256adf3a28"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_refl.",
            "VernacExtend",
            "8488e5b2807fef16c5056ba3f303e3256adf3a28"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "exists (State f Sskip k sp (PTree.set id v e) m); split.",
            "VernacExtend",
            "1c9dfef871dc99534b10a5a17e007b44ab93e55c"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "eapply star_right.",
            "VernacExtend",
            "bd7a445300a9606d6cac959f699fe163db9f9dde"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "red; auto.",
            "VernacExtend",
            "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "subst e'.",
            "VernacExtend",
            "204d14fc2949d3ff3a3ece868e612b4a6b039837"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "subst e'.",
            "VernacExtend",
            "204d14fc2949d3ff3a3ece868e612b4a6b039837"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct (H2 k) as [S [A B]].",
            "VernacExtend",
            "b41d1d2d85687ad8f2677f8966b2516df143dba2"
        ],
        [
            "exists S; split.",
            "VernacExtend",
            "8d9b962ce9bed178d709693459b04a9c4c2b62d6"
        ],
        [
            "apply star_left with E0 (State f (if b then s1 else s2) k sp e m) t.",
            "VernacExtend",
            "aee6d2548e5b8131a7ba614742190da0f8c190a2"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "exact A.",
            "VernacExtend",
            "5ac1b62d53cf7d47bc8e63708c7a3548a99990a6"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (H0 (Kseq s2 k)) as [S1 [A1 B1]].",
            "VernacExtend",
            "798a9ceead1d84f11d7fa3eff7647ff1d73af8a8"
        ],
        [
            "destruct (H2 k) as [S2 [A2 B2]].",
            "VernacExtend",
            "02ef26adaee80c388e24d83efbbabc4216d4334c"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "exists S2; split.",
            "VernacExtend",
            "3e6211df824839eeab6b9b96ecab208e996b2e9e"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A1.",
            "VernacExtend",
            "d7e3cabbf998b3743609fc8cdc2ad4aeef85eb02"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eexact A2.",
            "VernacExtend",
            "c745f555473fe4adc1e683e6c2a65f371d214067"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (H0 (Kseq s2 k)) as [S1 [A1 B1]].",
            "VernacExtend",
            "798a9ceead1d84f11d7fa3eff7647ff1d73af8a8"
        ],
        [
            "set (S2 := match out with | Out_exit n => State f (Sexit n) k sp e1 m1 | _ => S1 end).",
            "VernacExtend",
            "b8fa847c981c8504531722dab697c18bd4b12445"
        ],
        [
            "exists S2; split.",
            "VernacExtend",
            "3e6211df824839eeab6b9b96ecab208e996b2e9e"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A1.",
            "VernacExtend",
            "d7e3cabbf998b3743609fc8cdc2ad4aeef85eb02"
        ],
        [
            "unfold S2; destruct out; try (apply star_refl).",
            "VernacExtend",
            "1054a537651a861ddc7cf67472e7d463705e414f"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "unfold S2; inv B1; congruence || simpl; constructor; auto.",
            "VernacExtend",
            "8a82830c2dec436e2e0fb5d91e15379c39b4e1ce"
        ],
        [
            "destruct (H0 (Kseq (Sloop s) k)) as [S1 [A1 B1]].",
            "VernacExtend",
            "700560f537f46c38daf4d94eef953c8e92392abe"
        ],
        [
            "destruct (H2 k) as [S2 [A2 B2]].",
            "VernacExtend",
            "02ef26adaee80c388e24d83efbbabc4216d4334c"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "exists S2; split.",
            "VernacExtend",
            "3e6211df824839eeab6b9b96ecab208e996b2e9e"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A1.",
            "VernacExtend",
            "d7e3cabbf998b3743609fc8cdc2ad4aeef85eb02"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eexact A2.",
            "VernacExtend",
            "c745f555473fe4adc1e683e6c2a65f371d214067"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "destruct (H0 (Kseq (Sloop s) k)) as [S1 [A1 B1]].",
            "VernacExtend",
            "700560f537f46c38daf4d94eef953c8e92392abe"
        ],
        [
            "set (S2 := match out with | Out_exit n => State f (Sexit n) k sp e1 m1 | _ => S1 end).",
            "VernacExtend",
            "b8fa847c981c8504531722dab697c18bd4b12445"
        ],
        [
            "exists S2; split.",
            "VernacExtend",
            "3e6211df824839eeab6b9b96ecab208e996b2e9e"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A1.",
            "VernacExtend",
            "d7e3cabbf998b3743609fc8cdc2ad4aeef85eb02"
        ],
        [
            "unfold S2; destruct out; try (apply star_refl).",
            "VernacExtend",
            "1054a537651a861ddc7cf67472e7d463705e414f"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "unfold S2; inv B1; congruence || simpl; constructor; auto.",
            "VernacExtend",
            "8a82830c2dec436e2e0fb5d91e15379c39b4e1ce"
        ],
        [
            "destruct (H0 (Kblock k)) as [S1 [A1 B1]].",
            "VernacExtend",
            "bf3f31ab9565be0e8d9e3a6a7654585c9137d6a8"
        ],
        [
            "set (S2 := match out with | Out_normal => State f Sskip k sp e1 m1 | Out_exit O => State f Sskip k sp e1 m1 | Out_exit (S m) => State f (Sexit m) k sp e1 m1 | _ => S1 end).",
            "VernacExtend",
            "81e9191444da76b9b7ca8621fc198806de1f6088"
        ],
        [
            "exists S2; split.",
            "VernacExtend",
            "3e6211df824839eeab6b9b96ecab208e996b2e9e"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_trans.",
            "VernacExtend",
            "f718a22497a1d51e0071caa98b007c7dfe2cc533"
        ],
        [
            "eexact A1.",
            "VernacExtend",
            "d7e3cabbf998b3743609fc8cdc2ad4aeef85eb02"
        ],
        [
            "unfold S2; destruct out; try (apply star_refl).",
            "VernacExtend",
            "1054a537651a861ddc7cf67472e7d463705e414f"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "inv B1.",
            "VernacExtend",
            "c20f8f6346dc8193dea0cf23ade480873c5e5433"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "destruct n; constructor.",
            "VernacExtend",
            "aaa0b676cd3a983aaaae1055717e51323b51402a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "unfold S2; inv B1; simpl; try constructor; auto.",
            "VernacExtend",
            "ef1074ae924ca6caa1a1e573561644d302a3dd7e"
        ],
        [
            "destruct n; constructor.",
            "VernacExtend",
            "aaa0b676cd3a983aaaae1055717e51323b51402a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_refl.",
            "VernacExtend",
            "8488e5b2807fef16c5056ba3f303e3256adf3a28"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_one.",
            "VernacExtend",
            "d41a9ff5c656810eb3b34fc939a54f2b70a10ded"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_refl.",
            "VernacExtend",
            "8488e5b2807fef16c5056ba3f303e3256adf3a28"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "apply star_refl.",
            "VernacExtend",
            "8488e5b2807fef16c5056ba3f303e3256adf3a28"
        ],
        [
            "constructor; auto.",
            "VernacExtend",
            "686f227fe0f57af60032eb35216aef1e62d0c0e5"
        ],
        [
            "econstructor; split.",
            "VernacExtend",
            "11b22cf50026d480fd4ddd40ba5951e5ad64df31"
        ],
        [
            "eapply star_left.",
            "VernacExtend",
            "67331c341fa8d7a13fd47f4fcf5a3188f78ff1ac"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "apply is_call_cont_call_cont.",
            "VernacExtend",
            "584993cb107300b4fec2ee21c37d108d1c162842"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eval_funcall_steps: forall m fd args t m' res, eval_funcall ge m fd args t m' res -> forall k, is_call_cont k -> star step ge (Callstate fd args k m) t (Returnstate res k m').",
            "VernacStartTheoremProof",
            "1581a7042110df971d8e0c2be4a135906dfd1659"
        ],
        [
            "Proof (proj1 eval_funcall_exec_stmt_steps).",
            "VernacExactProof",
            "85f0eeb91bb4e28eb01616d87c17dd54a90f1fc5"
        ],
        [
            "Lemma exec_stmt_steps: forall f sp e m s t e' m' out, exec_stmt ge f sp e m s t e' m' out -> forall k, exists S, star step ge (State f s k sp e m) t S /\\ outcome_state_match sp e' m' f k out S.",
            "VernacStartTheoremProof",
            "55d0ea97fcf5c6781d48bfde15752a358e174802"
        ],
        [
            "Proof (proj2 eval_funcall_exec_stmt_steps).",
            "VernacExactProof",
            "2a4e9b8c386f63a356fc22343dcefab1970675a0"
        ],
        [
            "Lemma evalinf_funcall_forever: forall m fd args T k, evalinf_funcall ge m fd args T -> forever_plus step ge (Callstate fd args k m) T.",
            "VernacStartTheoremProof",
            "b545de92821858aef71a51ee96f6dbfdba421d32"
        ],
        [
            "cofix CIH_FUN.",
            "VernacExtend",
            "6a634f0bf4ecd8fd869df40ed7540eb8d66ee801"
        ],
        [
            "assert (forall sp e m s T f k, execinf_stmt ge f sp e m s T -> forever_plus step ge (State f s k sp e m) T).",
            "VernacExtend",
            "2fa293eb462a54a1ae5b95439cee616f4df637d5"
        ],
        [
            "cofix CIH_STMT.",
            "VernacExtend",
            "91c95b0f199ad8cfa09c418451e6562ab4c56971"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply CIH_FUN.",
            "VernacExtend",
            "d1024e515b4a74b9cb1bcf6aef55415af334119c"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "eapply forever_plus_intro with (s2 := State f (if b then s1 else s2) k sp e m).",
            "VernacExtend",
            "dc392fd553fbe8c59680e5631d4deff3b39b7bd2"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "destruct (exec_stmt_steps _ _ _ _ _ _ _ _ _ H0 (Kseq s2 k)) as [S [A B]].",
            "VernacExtend",
            "90cc561073e17f96991e836faa97a36ca3990f6a"
        ],
        [
            "inv B.",
            "VernacExtend",
            "3922139f6335aa98c39fa42c13db8cf35fcfe5ae"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "eapply plus_left.",
            "VernacExtend",
            "d39588485736de6c209eb6ef852b2c63e125defb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_right.",
            "VernacExtend",
            "bd7a445300a9606d6cac959f699fe163db9f9dde"
        ],
        [
            "eexact A.",
            "VernacExtend",
            "02c72f61c801380ffbbb4e931e1d9c56db21ed4f"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "destruct (exec_stmt_steps _ _ _ _ _ _ _ _ _ H0 (Kseq (Sloop s0) k)) as [S [A B]].",
            "VernacExtend",
            "9f46a8d5e808ca167196534d23fcb7185d00b802"
        ],
        [
            "inv B.",
            "VernacExtend",
            "3922139f6335aa98c39fa42c13db8cf35fcfe5ae"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "eapply plus_left.",
            "VernacExtend",
            "d39588485736de6c209eb6ef852b2c63e125defb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "eapply star_right.",
            "VernacExtend",
            "bd7a445300a9606d6cac959f699fe163db9f9dde"
        ],
        [
            "eexact A.",
            "VernacExtend",
            "02c72f61c801380ffbbb4e931e1d9c56db21ed4f"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply CIH_STMT.",
            "VernacExtend",
            "6f684c3c08e36bede59e5a5e7c20561ca7f5d2ee"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply CIH_FUN.",
            "VernacExtend",
            "d1024e515b4a74b9cb1bcf6aef55415af334119c"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inv H0.",
            "VernacExtend",
            "52c34ef20c88d5292e2350aff94f149a3968b772"
        ],
        [
            "eapply forever_plus_intro.",
            "VernacExtend",
            "c62ce1e4c256f395f346791240b93e0091829f7b"
        ],
        [
            "apply plus_one.",
            "VernacExtend",
            "52139a12045cdc7dd016c7c29914d58c42ffd3c4"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "traceEq.",
            "VernacExtend",
            "10965c9bc3d4dfa256918633169cac5cec3cb604"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem bigstep_semantics_sound: bigstep_sound (bigstep_semantics prog) (semantics prog).",
            "VernacStartTheoremProof",
            "760cd68faee2ee852a483d6c45f644ffc4494bc6"
        ],
        [
            "constructor; intros.",
            "VernacExtend",
            "6563c593bcf639ae667d436a08cab59e1ac2dcce"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "econstructor; econstructor.",
            "VernacExtend",
            "b544b380f8811c0a398ac698cca4c51b3bc31c11"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply eval_funcall_steps.",
            "VernacExtend",
            "9fe422621f7c636047394e99f3ffc714deda7a0f"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "red; auto.",
            "VernacExtend",
            "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "inv H.",
            "VernacExtend",
            "711efba707a6a75ce2cd6ff4b80f031c0d63ab98"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "eapply forever_plus_forever.",
            "VernacExtend",
            "4f65b1dc14f341aff0a7cb83f8153a480357ba24"
        ],
        [
            "eapply evalinf_funcall_forever; eauto.",
            "VernacExtend",
            "866d4fbf086995405353e680bcc534aa535feaf1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BIGSTEP_TO_TRANSITION.",
            "VernacEndSegment",
            "50cffb5fecd7ca8b71a5e76340e450c826219a21"
        ]
    ],
    "proofs": [
        {
            "name": "semantics_receptive",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "constructor; simpl; intros.",
                        "VernacExtend",
                        "dcd76c351204acf8d4b7d76eea612fabf67729fc"
                    ]
                },
                {
                    "command": [
                        "assert (t1 = E0 -> exists s2, step (Genv.globalenv p) s t2 s2).",
                        "VernacExtend",
                        "1c610db354300c07155abd8cf33a2cc2e9b7507e"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "inv H0.",
                        "VernacExtend",
                        "52c34ef20c88d5292e2350aff94f149a3968b772"
                    ]
                },
                {
                    "command": [
                        "exists s1; auto.",
                        "VernacExtend",
                        "b635d662d92c9a6dd854d136739e1523825b06df"
                    ]
                },
                {
                    "command": [
                        "inversion H; subst; auto.",
                        "VernacExtend",
                        "3ac5a8efa0f6861868f1bfc9ce7119d14816504c"
                    ]
                },
                {
                    "command": [
                        "exploit external_call_receptive; eauto.",
                        "VernacExtend",
                        "42171c2cba80f4eaa15b793c138fdf9ec3791cb3"
                    ]
                },
                {
                    "command": [
                        "intros [vres2 [m2 EC2]].",
                        "VernacExtend",
                        "ac3db512f72453ba4230bfb0223cb22b519318c5"
                    ]
                },
                {
                    "command": [
                        "exists (State f Sskip k sp (set_optvar optid vres2 e) m2).",
                        "VernacExtend",
                        "5f15d632f8dfd816115f5662b7c2d29ba5ffa1e3"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "exploit external_call_receptive; eauto.",
                        "VernacExtend",
                        "42171c2cba80f4eaa15b793c138fdf9ec3791cb3"
                    ]
                },
                {
                    "command": [
                        "intros [vres2 [m2 EC2]].",
                        "VernacExtend",
                        "ac3db512f72453ba4230bfb0223cb22b519318c5"
                    ]
                },
                {
                    "command": [
                        "exists (Returnstate vres2 k m2).",
                        "VernacExtend",
                        "8839a91b043f49abef52a7e3212b8a94ff5a73a2"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "red; intros; inv H; simpl; try omega; eapply external_call_trace_length; eauto.",
                        "VernacExtend",
                        "519743e1256c1493184b9c66f1ed5d39af3030c9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_call_cont_call_cont",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "induction k; simpl; auto.",
                        "VernacExtend",
                        "93dc8fa2ac835d613a49c74a0857819ed0e74cd8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "call_cont_is_call_cont",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "destruct k; simpl; intros; auto || contradiction.",
                        "VernacExtend",
                        "2d673d8319c9ac8ed303773218f11a4e3e0df884"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}