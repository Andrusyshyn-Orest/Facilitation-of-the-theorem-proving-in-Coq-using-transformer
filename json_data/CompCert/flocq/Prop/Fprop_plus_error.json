{
    "filename": "flocq/Prop/Fprop_plus_error.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Psatz.",
            "VernacRequire",
            "6b2d2dcf6e1d84305ecd8f6076dd02d8aab13eff"
        ],
        [
            "Require Import Fcore_Raux.",
            "VernacRequire",
            "6a49ff899e4733a5492282770f91634f4e2bce84"
        ],
        [
            "Require Import Fcore_defs.",
            "VernacRequire",
            "a5831df34cd1384c0e8566554919e69e523ebc02"
        ],
        [
            "Require Import Fcore_float_prop.",
            "VernacRequire",
            "cb1b82d62c5b9c01c03fb8d695d9166849c8babe"
        ],
        [
            "Require Import Fcore_generic_fmt.",
            "VernacRequire",
            "cb86ef6ed7d243b0910cb42e7367eddef0ead8b4"
        ],
        [
            "Require Import Fcore_FIX.",
            "VernacRequire",
            "2f95f1cca49659b602de09dd84b8bb19ef3228f0"
        ],
        [
            "Require Import Fcore_FLX.",
            "VernacRequire",
            "e9b5d5048d054f0cf551c782f104dea9bdd189e7"
        ],
        [
            "Require Import Fcore_FLT.",
            "VernacRequire",
            "2439c9aaa0d90c90b19e373f08e8a7e8ae5028f6"
        ],
        [
            "Require Import Fcore_ulp.",
            "VernacRequire",
            "a2773216dd151304931c9408d58e4ed4a9223717"
        ],
        [
            "Require Import Fcalc_ops.",
            "VernacRequire",
            "3d12d40a8c239f3c3d26da4f928dea2f7d34d6d3"
        ],
        [
            "Section Fprop_plus_error.",
            "VernacBeginSection",
            "df43d41ff9dd3650ce945e59a7d90f9152af4659"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Section round_repr_same_exp.",
            "VernacBeginSection",
            "d2f3bc32862abe6bed152d6521ad15e66df8ad50"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Theorem round_repr_same_exp : forall m e, exists m', round beta fexp rnd (F2R (Float beta m e)) = F2R (Float beta m' e).",
            "VernacStartTheoremProof",
            "f2d8813872634435b3c96a87741bb58bf312d385"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m e.",
            "VernacExtend",
            "87373ecd1defa17e19f5893f4866e22d7a98f7ba"
        ],
        [
            "set (e' := canonic_exp beta fexp (F2R (Float beta m e))).",
            "VernacExtend",
            "e18d0578b474b5addc6295a91faa332808ed08a5"
        ],
        [
            "unfold round, scaled_mantissa.",
            "VernacExtend",
            "7469ad7d3b9aede0c8a3252000b6eff5c30abc4e"
        ],
        [
            "fold e'.",
            "VernacExtend",
            "f56af6588314ab1c148f09ed9bf0d072baf87375"
        ],
        [
            "destruct (Zle_or_lt e' e) as [He|He].",
            "VernacExtend",
            "40506b373f29d9a38b1fb210e70f69f10381b1ed"
        ],
        [
            "exists m.",
            "VernacExtend",
            "9282a6b695b4daa97f27297bcc295a268a932fcd"
        ],
        [
            "unfold F2R at 2.",
            "VernacExtend",
            "ddd475825d33cf651fd049012f87a1e4cabc4c48"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_assoc, <- bpow_plus.",
            "VernacExtend",
            "e64efbe326a420591ccd203c3aa334b6ee79c4aa"
        ],
        [
            "rewrite <- Z2R_Zpower.",
            "VernacExtend",
            "6a737b45852133a11ffa7a0af2881be74773d2b4"
        ],
        [
            "2: omega.",
            "VernacExtend",
            "d479151185a43f07b17d29025d6b6de4845088dc"
        ],
        [
            "rewrite <- Z2R_mult, Zrnd_Z2R...",
            "VernacExtend",
            "a76b86ad35e1c82fa614f72b9968a0238f067647"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z2R_mult.",
            "VernacExtend",
            "9df3e88fb03a8e1b32ba077432430323142e8b66"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "rewrite Z2R_Zpower.",
            "VernacExtend",
            "0e8cafd25f951e5aef33961dec1cfc55c1c015cd"
        ],
        [
            "2: omega.",
            "VernacExtend",
            "d479151185a43f07b17d29025d6b6de4845088dc"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply (f_equal (fun v => Z2R m * bpow v)%R).",
            "VernacExtend",
            "a78be893ccc7718d951fad3f62c7d93429d1112f"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "exists ((rnd (Z2R m * bpow (e - e'))) * Zpower beta (e' - e))%Z.",
            "VernacExtend",
            "ce5ae7cfa11e3e8c35298bcafbe517d92ac3e5f8"
        ],
        [
            "unfold F2R.",
            "VernacExtend",
            "01074792470ba071b62f8438b8d9b8c922ca2998"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Z2R_mult.",
            "VernacExtend",
            "9df3e88fb03a8e1b32ba077432430323142e8b66"
        ],
        [
            "rewrite Z2R_Zpower.",
            "VernacExtend",
            "0e8cafd25f951e5aef33961dec1cfc55c1c015cd"
        ],
        [
            "2: omega.",
            "VernacExtend",
            "d479151185a43f07b17d29025d6b6de4845088dc"
        ],
        [
            "rewrite 2!Rmult_assoc.",
            "VernacExtend",
            "76292e65777ceed842bdc67641245e2e8ff6ab3c"
        ],
        [
            "rewrite <- 2!bpow_plus.",
            "VernacExtend",
            "5151cd01101242937ec94a0fc10f2c3132c3630c"
        ],
        [
            "apply (f_equal (fun v => _ * bpow v)%R).",
            "VernacExtend",
            "ae639f93071aa0a25f4ccf465eccbe57e7fb4d7b"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End round_repr_same_exp.",
            "VernacEndSegment",
            "39b9367d0e147a185205519d0adb52d49212c965"
        ],
        [
            "Context { monotone_exp : Monotone_exp fexp }.",
            "VernacContext",
            "3029aecaadf49d8c9764f93c410b26f23fe7fae8"
        ],
        [
            "Notation format := (generic_format beta fexp).",
            "VernacSyntacticDefinition",
            "8b86a2eae51a580a8d20d872218c8ad0ed495025"
        ],
        [
            "Variable choice : Z -> bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Lemma plus_error_aux : forall x y, (canonic_exp beta fexp x <= canonic_exp beta fexp y)%Z -> format x -> format y -> format (round beta fexp (Znearest choice) (x + y) - (x + y))%R.",
            "VernacStartTheoremProof",
            "15bb0b98954baa602eedef4e81ae0361a409da4e"
        ],
        [
            "intros x y.",
            "VernacExtend",
            "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
        ],
        [
            "set (ex := canonic_exp beta fexp x).",
            "VernacExtend",
            "2d3c0c52463c3d771c20d8209e165d96ee21ca36"
        ],
        [
            "set (ey := canonic_exp beta fexp y).",
            "VernacExtend",
            "e05a721d96b79d59f9842e1d25dc2e50d72858a6"
        ],
        [
            "intros He Hx Hy.",
            "VernacExtend",
            "e635c8005fd8de1b2454eaf05dd14950175fb534"
        ],
        [
            "destruct (Req_dec (round beta fexp (Znearest choice) (x + y) - (x + y)) R0) as [H0|H0].",
            "VernacExtend",
            "011bda711f1338cc8971d753cdd884beb47fc3ad"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "set (mx := Ztrunc (scaled_mantissa beta fexp x)).",
            "VernacExtend",
            "1c5e2df221e394b7677bcb7283645d9d798bf36e"
        ],
        [
            "set (my := Ztrunc (scaled_mantissa beta fexp y)).",
            "VernacExtend",
            "eabf023fe58ee276230eda7b121b5f85e7b9bbbb"
        ],
        [
            "assert (Hxy: (x + y)%R = F2R (Float beta (mx + my * beta ^ (ey - ex)) ex)).",
            "VernacExtend",
            "3e090e50778a7e589617f06c8a9d2e1f369585ec"
        ],
        [
            "rewrite Hx, Hy.",
            "VernacExtend",
            "d3525d2615cdf2648c78d94d5f42900b841387eb"
        ],
        [
            "fold mx my ex ey.",
            "VernacExtend",
            "f3c97d34737b59b19e1a44bc066428f053a206f0"
        ],
        [
            "rewrite <- F2R_plus.",
            "VernacExtend",
            "286b278a98da8db00ca6102bc439009a758ae688"
        ],
        [
            "unfold Fplus.",
            "VernacExtend",
            "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite Zle_imp_le_bool with (1 := He).",
            "VernacExtend",
            "dc9d5d43783da903281e35f422bbde2af553c0d0"
        ],
        [
            "rewrite Hxy.",
            "VernacExtend",
            "d3b02e14eceb680d6ea962ead2cb32634a781bf3"
        ],
        [
            "destruct (round_repr_same_exp (Znearest choice) (mx + my * beta ^ (ey - ex)) ex) as (mxy, Hxy').",
            "VernacExtend",
            "e59d6ba1ed2f7d1cf3174be0a086ea75fbaa8369"
        ],
        [
            "rewrite Hxy'.",
            "VernacExtend",
            "bc9810a370514bc61c137528e8310c9a422f3980"
        ],
        [
            "assert (H: (F2R (Float beta mxy ex) - F2R (Float beta (mx + my * beta ^ (ey - ex)) ex))%R = F2R (Float beta (mxy - (mx + my * beta ^ (ey - ex))) ex)).",
            "VernacExtend",
            "deee3f817f29ef52ba8cd35d07d01d856260fb94"
        ],
        [
            "now rewrite <- F2R_minus, Fminus_same_exp.",
            "VernacExtend",
            "853966bf52a78df64035f561e1722b5f5b55d35b"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "apply monotone_exp.",
            "VernacExtend",
            "04ccae1a2908d693edfe87d121b476fe26f24c85"
        ],
        [
            "rewrite <- H, <- Hxy', <- Hxy.",
            "VernacExtend",
            "f49e1a43eef58592c47af88642fc95134b7bdaf9"
        ],
        [
            "apply ln_beta_le_abs.",
            "VernacExtend",
            "5d91662a86d36a47992ad980cdadb86c0b8e45f6"
        ],
        [
            "exact H0.",
            "VernacExtend",
            "3920fece303e3c4728f9cdc71daff99239237dbd"
        ],
        [
            "pattern x at 3 ; replace x with (-(y - (x + y)))%R by ring.",
            "VernacExtend",
            "d608ba0a315a2b61e6243a87a856589adc9fbd61"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "now apply (round_N_pt beta _ choice (x + y)).",
            "VernacExtend",
            "c52fb48aeb342e373b2ddd5f3b57860c2d08742c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem plus_error : forall x y, format x -> format y -> format (round beta fexp (Znearest choice) (x + y) - (x + y))%R.",
            "VernacStartTheoremProof",
            "b5b2753985161b12a31cfce025c2911f9f580bba"
        ],
        [
            "intros x y Hx Hy.",
            "VernacExtend",
            "7566bd3dac9a8437bd137c0d7aaa934e9b1723a2"
        ],
        [
            "destruct (Zle_or_lt (canonic_exp beta fexp x) (canonic_exp beta fexp y)).",
            "VernacExtend",
            "1c9e6b3eeb3b6bd0dcd1fdd8676d7f1ff8393361"
        ],
        [
            "now apply plus_error_aux.",
            "VernacExtend",
            "9da91a5a30005dfaa9f29f6cd413e7bda39ab081"
        ],
        [
            "rewrite Rplus_comm.",
            "VernacExtend",
            "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
        ],
        [
            "apply plus_error_aux ; try easy.",
            "VernacExtend",
            "bc01c99f43550042355c8cc2a45bcc7a24ba6062"
        ],
        [
            "now apply Zlt_le_weak.",
            "VernacExtend",
            "8df137fb70ba9a1f8f0605f13095da8524766c66"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_plus_error.",
            "VernacEndSegment",
            "1ab6316ab4fefe034e6cb569455a0c27cde4df8e"
        ],
        [
            "Section Fprop_plus_zero.",
            "VernacBeginSection",
            "e07fb099b0cf6c97c03208c07e3cad495a5e51b6"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Context { exp_not_FTZ : Exp_not_FTZ fexp }.",
            "VernacContext",
            "3405f768503600dcb90c125d58fc5c068e1d1581"
        ],
        [
            "Notation format := (generic_format beta fexp).",
            "VernacSyntacticDefinition",
            "8b86a2eae51a580a8d20d872218c8ad0ed495025"
        ],
        [
            "Section round_plus_eq_zero_aux.",
            "VernacBeginSection",
            "4ba036b504c141cc46c8de5878150b7af29c6531"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Lemma round_plus_eq_zero_aux : forall x y, (canonic_exp beta fexp x <= canonic_exp beta fexp y)%Z -> format x -> format y -> (0 <= x + y)%R -> round beta fexp rnd (x + y) = 0%R -> (x + y = 0)%R.",
            "VernacStartTheoremProof",
            "305b26b5812bf8c845c23939ed0787c223ae9a37"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y He Hx Hy Hp Hxy.",
            "VernacExtend",
            "795c735869ce3cc585333f297d55e81f4b337fda"
        ],
        [
            "destruct (Req_dec (x + y) 0) as [H0|H0].",
            "VernacExtend",
            "22e1a1113a87cb9d46f29b7215923855e649e166"
        ],
        [
            "exact H0.",
            "VernacExtend",
            "3920fece303e3c4728f9cdc71daff99239237dbd"
        ],
        [
            "destruct (ln_beta beta (x + y)) as (exy, Hexy).",
            "VernacExtend",
            "5ec46a31f7c05aaaac4cc617bdca352f6dbd6b89"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (Hexy H0).",
            "VernacExtend",
            "19f54e7357781d237af11bd5d9f8357a96e8f7e4"
        ],
        [
            "destruct (Zle_or_lt exy (fexp exy)) as [He'|He'].",
            "VernacExtend",
            "2fda9ce54f203075b4ba5dc68173db55fce6aa37"
        ],
        [
            "assert (H: (x + y)%R = F2R (Float beta (Ztrunc (x * bpow (- fexp exy)) + Ztrunc (y * bpow (- fexp exy))) (fexp exy))).",
            "VernacExtend",
            "f7088b89c3d5cef2ffc81718ec837ea7dcaceb4e"
        ],
        [
            "rewrite (subnormal_exponent beta fexp exy x He' Hx) at 1.",
            "VernacExtend",
            "b6e5f035328d1393c137cdce5aa5c5478ab099ed"
        ],
        [
            "rewrite (subnormal_exponent beta fexp exy y He' Hy) at 1.",
            "VernacExtend",
            "491f3facf03dca4197181ec893d9de815a621bb8"
        ],
        [
            "now rewrite <- F2R_plus, Fplus_same_exp.",
            "VernacExtend",
            "5e060e1b6f638a02853c4ba8a36ef67744dae25c"
        ],
        [
            "rewrite H in Hxy.",
            "VernacExtend",
            "639ea59718aa781dc3944c3fadd2dfe1ef6f94e1"
        ],
        [
            "rewrite round_generic in Hxy...",
            "VernacExtend",
            "f23bc70a9ed8b92bd209b3205b555a66b743802b"
        ],
        [
            "now rewrite <- H in Hxy.",
            "VernacExtend",
            "11188143ece2a68b2edffd56b4a462e3da7a3366"
        ],
        [
            "apply generic_format_F2R.",
            "VernacExtend",
            "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite ln_beta_unique with (1 := Hexy).",
            "VernacExtend",
            "dc7577c3121b1435f5354a065fb1ee9480fadc69"
        ],
        [
            "apply Zle_refl.",
            "VernacExtend",
            "68a57d6389c7dd3f2c16b824eb0734986d9ff207"
        ],
        [
            "elim Rle_not_lt with (1 := round_le beta _ rnd _ _ (proj1 Hexy)).",
            "VernacExtend",
            "fdf95483827951e8fee7e5e2aa29bcac6bc2a23b"
        ],
        [
            "rewrite (Rabs_pos_eq _ Hp).",
            "VernacExtend",
            "4f378aeb1504001f2e4c117774af31777a69966a"
        ],
        [
            "rewrite Hxy.",
            "VernacExtend",
            "d3b02e14eceb680d6ea962ead2cb32634a781bf3"
        ],
        [
            "rewrite round_generic...",
            "VernacExtend",
            "af5222f20fb69e4892cd9b764ef3997628087b6a"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "apply Zlt_succ_le.",
            "VernacExtend",
            "c303523f868e2dd2771675d2de37d7328c4e957b"
        ],
        [
            "now rewrite (Zsucc_pred exy) in He'.",
            "VernacExtend",
            "5e6c43b9300cb77e91c0b36aa68413986a0b0a52"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End round_plus_eq_zero_aux.",
            "VernacEndSegment",
            "a1a05a443e26c2f681824cd835d677343bfa65de"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Theorem round_plus_eq_zero : forall x y, format x -> format y -> round beta fexp rnd (x + y) = 0%R -> (x + y = 0)%R.",
            "VernacStartTheoremProof",
            "adce95bf1faae74989acb3ac60ef9786a1299f2f"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y Hx Hy.",
            "VernacExtend",
            "7566bd3dac9a8437bd137c0d7aaa934e9b1723a2"
        ],
        [
            "destruct (Rle_or_lt 0 (x + y)) as [H1|H1].",
            "VernacExtend",
            "f3ea8d502e1075a0a955c1f4415415886cfd591a"
        ],
        [
            "revert H1.",
            "VernacExtend",
            "f960614533a2a55b448cbf376832532eaf449c34"
        ],
        [
            "destruct (Zle_or_lt (canonic_exp beta fexp x) (canonic_exp beta fexp y)) as [H2|H2].",
            "VernacExtend",
            "79f3c6466f3b6b3f5d2bc46606c5e8e69b448612"
        ],
        [
            "now apply round_plus_eq_zero_aux.",
            "VernacExtend",
            "377db50575f33f4ccac3b647ada143854185f2b5"
        ],
        [
            "rewrite Rplus_comm.",
            "VernacExtend",
            "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
        ],
        [
            "apply round_plus_eq_zero_aux ; try easy.",
            "VernacExtend",
            "75bc976d0a35065059c2b4bd2ace3b13eab13500"
        ],
        [
            "now apply Zlt_le_weak.",
            "VernacExtend",
            "8df137fb70ba9a1f8f0605f13095da8524766c66"
        ],
        [
            "revert H1.",
            "VernacExtend",
            "f960614533a2a55b448cbf376832532eaf449c34"
        ],
        [
            "rewrite <- (Ropp_involutive (x + y)), Ropp_plus_distr, <- Ropp_0.",
            "VernacExtend",
            "821f5dce314561b94e1a0e538ea75d89a8f590b0"
        ],
        [
            "intros H1.",
            "VernacExtend",
            "ba8e6c21eb83603690828b8ea37ea25a6f2962f3"
        ],
        [
            "rewrite round_opp.",
            "VernacExtend",
            "6687d4bfbaff28e86606f8d4b3636912bdbc4045"
        ],
        [
            "intros Hxy.",
            "VernacExtend",
            "1b46c68dc8fbe16f0f7f65835f5cba74ed8f8cae"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "cut (round beta fexp (Zrnd_opp rnd) (- x + - y) = 0)%R.",
            "VernacExtend",
            "3585f60206815186cc9996dc7fdf2a363cda39f0"
        ],
        [
            "cut (0 <= -x + -y)%R.",
            "VernacExtend",
            "b06e7ec371226ee18d5f23048b0f6853d9ea3a71"
        ],
        [
            "destruct (Zle_or_lt (canonic_exp beta fexp (-x)) (canonic_exp beta fexp (-y))) as [H2|H2].",
            "VernacExtend",
            "e151921e3b29e060a9cb23afa7f53c2ece1c85e6"
        ],
        [
            "apply round_plus_eq_zero_aux ; try apply generic_format_opp...",
            "VernacExtend",
            "864ba49eeab5119b1142b3aaf51c97d004ba0006"
        ],
        [
            "rewrite Rplus_comm.",
            "VernacExtend",
            "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
        ],
        [
            "apply round_plus_eq_zero_aux ; try apply generic_format_opp...",
            "VernacExtend",
            "864ba49eeab5119b1142b3aaf51c97d004ba0006"
        ],
        [
            "now apply Zlt_le_weak.",
            "VernacExtend",
            "8df137fb70ba9a1f8f0605f13095da8524766c66"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "now apply Ropp_lt_cancel.",
            "VernacExtend",
            "1510460e9bcb7bb2b4f832ffa7d5cc32062e1094"
        ],
        [
            "rewrite <- (Ropp_involutive (round _ _ _ _)).",
            "VernacExtend",
            "3ea56dff3fa325f0367e716b0473f60518b0d509"
        ],
        [
            "rewrite Hxy.",
            "VernacExtend",
            "d3b02e14eceb680d6ea962ead2cb32634a781bf3"
        ],
        [
            "apply Ropp_involutive.",
            "VernacExtend",
            "5693ee789e165349a2c109e8f1a16d4ccb445cfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_plus_zero.",
            "VernacEndSegment",
            "1b8dd759f06a6644752335896f1617fce7fe2f21"
        ],
        [
            "Section Fprop_plus_FLT.",
            "VernacBeginSection",
            "03199768f598b0e44a46aa92090b6c5c9cd5d107"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable emin prec : Z.",
            "VernacAssumption",
            "3ccc0e6889e5cd3c3d9e4dafff4f8ba78f15de33"
        ],
        [
            "Context { prec_gt_0_ : Prec_gt_0 prec }.",
            "VernacContext",
            "c8404f16109f008297dc64925b18a48ad609d64a"
        ],
        [
            "Theorem FLT_format_plus_small: forall x y, generic_format beta (FLT_exp emin prec) x -> generic_format beta (FLT_exp emin prec) y -> (Rabs (x+y) <= bpow (prec+emin))%R -> generic_format beta (FLT_exp emin prec) (x+y).",
            "VernacStartTheoremProof",
            "921b52135a6498fe36ea9e01dd142f6def4dec0d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y Fx Fy H.",
            "VernacExtend",
            "5dfce852ee5a0d1f5b4b37618bc1a27cad684f96"
        ],
        [
            "apply generic_format_FLT_FIX...",
            "VernacExtend",
            "df3e23007add7bf86f42019505443e0e51dd8586"
        ],
        [
            "rewrite Zplus_comm; assumption.",
            "VernacExtend",
            "bd8a6b8bd61641264c15179d6848b3696013297c"
        ],
        [
            "apply generic_format_FIX_FLT, FIX_format_generic in Fx.",
            "VernacExtend",
            "1ab2620350701e6015e39f68b3eb920fb827798f"
        ],
        [
            "apply generic_format_FIX_FLT, FIX_format_generic in Fy.",
            "VernacExtend",
            "e0a3d9f6942a92011603527df93d4feb1b6ff445"
        ],
        [
            "destruct Fx as (nx,(H1x,H2x)).",
            "VernacExtend",
            "d6fb850de7ebcd50025bba33fe701b2ffa9b84a4"
        ],
        [
            "destruct Fy as (ny,(H1y,H2y)).",
            "VernacExtend",
            "d61c439ccbc69912ee8b0afb27b43a1e4f4fe65f"
        ],
        [
            "apply generic_format_FIX.",
            "VernacExtend",
            "3287699ee915054bdde97c78a3f234d1d18972be"
        ],
        [
            "exists (Float beta (Fnum nx+Fnum ny)%Z emin).",
            "VernacExtend",
            "6677e72f5884bce25c2171195c0799eecec9a3e3"
        ],
        [
            "split;[idtac|reflexivity].",
            "VernacExtend",
            "b3b2ab28272d17bbd288e5c714b27165f96106d4"
        ],
        [
            "rewrite H1x,H1y; unfold F2R; simpl.",
            "VernacExtend",
            "e3565a91f4930bad400a042e6505c8a59e72e659"
        ],
        [
            "rewrite H2x, H2y.",
            "VernacExtend",
            "435c7456d82ec35f8ee2aaa45c516e5d69d0a362"
        ],
        [
            "rewrite Z2R_plus; ring.",
            "VernacExtend",
            "fe3cbc4762a7ac53f166a631be088c4b9bcf0d31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_plus_FLT.",
            "VernacEndSegment",
            "4b4a9ab7725699827d50f32f547ef2b688950e37"
        ],
        [
            "Section Fprop_plus_mult_ulp.",
            "VernacBeginSection",
            "88b6b8fb5ebc99d0534b3e86011a2030ca664917"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Context { monotone_exp : Monotone_exp fexp }.",
            "VernacContext",
            "3029aecaadf49d8c9764f93c410b26f23fe7fae8"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Notation format := (generic_format beta fexp).",
            "VernacSyntacticDefinition",
            "8b86a2eae51a580a8d20d872218c8ad0ed495025"
        ],
        [
            "Notation cexp := (canonic_exp beta fexp).",
            "VernacSyntacticDefinition",
            "d4aa107fad2e6e34546c51778bda03e0653e29eb"
        ],
        [
            "Lemma ex_shift : forall x e, format x -> (e <= cexp x)%Z -> exists m, (x = Z2R m * bpow e)%R.",
            "VernacStartTheoremProof",
            "1b868b143e335911a91358a8861dd1004ab35a7b"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x e Fx He.",
            "VernacExtend",
            "2ace9958b27182c6d8fb5a12e9caf625bc06b069"
        ],
        [
            "exists (Ztrunc (scaled_mantissa beta fexp x)*Zpower beta (cexp x -e))%Z.",
            "VernacExtend",
            "ecd49ebc68afe8c1628e9008867540286df9a633"
        ],
        [
            "rewrite Fx at 1; unfold F2R; simpl.",
            "VernacExtend",
            "65d985b958b010fca091e6c99ff9eed6ac66b66b"
        ],
        [
            "rewrite Z2R_mult, Rmult_assoc.",
            "VernacExtend",
            "afc80b4fd31b61c7e686c95a11aef2690e369f2a"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "rewrite Z2R_Zpower.",
            "VernacExtend",
            "0e8cafd25f951e5aef33961dec1cfc55c1c015cd"
        ],
        [
            "2: omega.",
            "VernacExtend",
            "d479151185a43f07b17d29025d6b6de4845088dc"
        ],
        [
            "rewrite <- bpow_plus; f_equal; ring.",
            "VernacExtend",
            "3279a43624a1283bd1c7b34d8c279b8151ab3da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_beta_minus1 : forall z, z <> 0%R -> (ln_beta beta z - 1)%Z = ln_beta beta (z / Z2R beta).",
            "VernacStartTheoremProof",
            "428a7654f4ea7bca1fe00353e0f28ef58d520639"
        ],
        [
            "intros z Hz.",
            "VernacExtend",
            "4248c0300130ba18200d4779d5d54ab29d4b84b6"
        ],
        [
            "unfold Zminus.",
            "VernacExtend",
            "7085d4231409167767072da1bd24eb73ce98a683"
        ],
        [
            "rewrite <- ln_beta_mult_bpow with (1 := Hz).",
            "VernacExtend",
            "171452ffdee15093be64142484f9eeef99b356a1"
        ],
        [
            "now rewrite bpow_opp, bpow_1.",
            "VernacExtend",
            "e4f571abb33aacf5d5f7b582728dade387949ec1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_plus_mult_ulp : forall x y, format x -> format y -> (x <> 0)%R -> exists m, (round beta fexp rnd (x+y) = Z2R m * ulp beta fexp (x/Z2R beta))%R.",
            "VernacStartTheoremProof",
            "30b1cf445162952c009acf9f40f4ab31448c1093"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y Fx Fy Zx.",
            "VernacExtend",
            "8fd03aff84a052e7157a59a2f587500c65a478be"
        ],
        [
            "case (Zle_or_lt (ln_beta beta (x/Z2R beta)) (ln_beta beta y)); intros H1.",
            "VernacExtend",
            "e7d965d9e02ced1091766a64772af009b1916b08"
        ],
        [
            "pose (e:=cexp (x / Z2R beta)).",
            "VernacExtend",
            "99d04969ee0dca76f2f0cb914f7a1d2056c740c6"
        ],
        [
            "destruct (ex_shift x e) as (nx, Hnx); try exact Fx.",
            "VernacExtend",
            "e176d17a07f1a08acfb2a76cb1ff410318fa7aea"
        ],
        [
            "apply monotone_exp.",
            "VernacExtend",
            "04ccae1a2908d693edfe87d121b476fe26f24c85"
        ],
        [
            "rewrite <- (ln_beta_minus1 x Zx); omega.",
            "VernacExtend",
            "5d5fb58454193b199d4d21e570d9112e7884b104"
        ],
        [
            "destruct (ex_shift y e) as (ny, Hny); try assumption.",
            "VernacExtend",
            "7fee2522e08156e8c117674ca4c4bc13e0862d35"
        ],
        [
            "apply monotone_exp...",
            "VernacExtend",
            "23d3b4319dc32ce37e4d342705534e49249e15fa"
        ],
        [
            "destruct (round_repr_same_exp beta fexp rnd (nx+ny) e) as (n,Hn).",
            "VernacExtend",
            "c968988f4a41df171b2c7488b49707c2fe09f8c9"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "apply trans_eq with (F2R (Float beta n e)).",
            "VernacExtend",
            "8edd56d2e64cdbc37b38732e315d6bea5144cc12"
        ],
        [
            "rewrite <- Hn; f_equal.",
            "VernacExtend",
            "aa7eac938f71e93c974f8072dfd5133c2f2ab5c2"
        ],
        [
            "rewrite Hnx, Hny; unfold F2R; simpl; rewrite Z2R_plus; ring.",
            "VernacExtend",
            "c14275753bbd128a53d81511639ce52c0077b3b4"
        ],
        [
            "unfold F2R; simpl.",
            "VernacExtend",
            "a8b73d273d1c692e5deb932d4bd557029927ed13"
        ],
        [
            "rewrite ulp_neq_0; try easy.",
            "VernacExtend",
            "255af3c0f6157d61001c0f82b0c97e31c07af14c"
        ],
        [
            "apply Rmult_integral_contrapositive_currified; try assumption.",
            "VernacExtend",
            "7f9c1ad640c34794ea226d53d73bc6157eb2f3a4"
        ],
        [
            "apply Rinv_neq_0_compat.",
            "VernacExtend",
            "f2f8681c7dbf9047cfba9a279da441217a933f75"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "destruct (ex_shift (round beta fexp rnd (x + y)) (cexp (x/Z2R beta))) as (n,Hn).",
            "VernacExtend",
            "4ebd5e080e3405f69b75bea66763dbe9e659b45c"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "apply Zle_trans with (cexp (x+y)).",
            "VernacExtend",
            "45eaf296869959a6da837426526d0ca705936751"
        ],
        [
            "apply monotone_exp.",
            "VernacExtend",
            "04ccae1a2908d693edfe87d121b476fe26f24c85"
        ],
        [
            "rewrite <- ln_beta_minus1 by easy.",
            "VernacExtend",
            "8835a72953ccc2f5d5d581edac40db6a366ab0c5"
        ],
        [
            "rewrite <- (ln_beta_abs beta (x+y)).",
            "VernacExtend",
            "c11e18e3849f1276d63b3fe0f52bbf288bec9c95"
        ],
        [
            "assert (U: (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).",
            "VernacExtend",
            "0e95983de01ff09787db1369a3a3242ceec2adc6"
        ],
        [
            "assert (V: forall x y, (Rabs y <= Rabs x)%R -> (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).",
            "VernacExtend",
            "c5ccd45a9378250f01e582b8496956d14cb206f2"
        ],
        [
            "clear; intros x y.",
            "VernacExtend",
            "4cb68238c0d08675cd3563f98699c0660bc2209f"
        ],
        [
            "case (Rle_or_lt 0 y); intros Hy.",
            "VernacExtend",
            "c25a91b83d1e9bc6c12a0774e36df2ebd971a266"
        ],
        [
            "case Hy; intros Hy'.",
            "VernacExtend",
            "c9114000a216d2e2c74105db5d874e31acbf5e94"
        ],
        [
            "case (Rle_or_lt 0 x); intros Hx.",
            "VernacExtend",
            "1065795e329a06ee39cde6e851389d4d3b1ad0d4"
        ],
        [
            "intros _; rewrite (Rabs_pos_eq y) by easy.",
            "VernacExtend",
            "57e9773f4fdb6d02f286916401d7e472c367e13b"
        ],
        [
            "rewrite (Rabs_pos_eq x) by easy.",
            "VernacExtend",
            "44b09278e33f526f1a521bc75a8b2d8f75de6f76"
        ],
        [
            "left; apply Rabs_pos_eq.",
            "VernacExtend",
            "6bf94901e0fd50f374706418fba229ec705b2d07"
        ],
        [
            "now apply Rplus_le_le_0_compat.",
            "VernacExtend",
            "212bd0cfdb6d15c6d136e4cad2b1da99d68c01e3"
        ],
        [
            "rewrite (Rabs_pos_eq y) by easy.",
            "VernacExtend",
            "b6b471ed9bf94850427dca93a4fc8f15d273751e"
        ],
        [
            "rewrite (Rabs_left x) by easy.",
            "VernacExtend",
            "c3a0509e7bce07f8b93a9bfeaa444661e9c9d392"
        ],
        [
            "intros H; right; split.",
            "VernacExtend",
            "2cfc821e5f6a3f09e63b5142c53dcde7596e38cc"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "rewrite Rabs_left1.",
            "VernacExtend",
            "959a39766c3ec0e54779596cf6d2e0ed16ff476d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.",
            "VernacExtend",
            "fc9966dff2e68d85cede01c8f9bbb67f55088567"
        ],
        [
            "intros _; left.",
            "VernacExtend",
            "81d645c31a18a2a79c2d74848d2c880ed2e2888a"
        ],
        [
            "now rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.",
            "VernacExtend",
            "7cd5af243851a1b4ffa8296977a934360d575795"
        ],
        [
            "case (Rle_or_lt 0 x); intros Hx.",
            "VernacExtend",
            "1065795e329a06ee39cde6e851389d4d3b1ad0d4"
        ],
        [
            "rewrite (Rabs_left y) by easy.",
            "VernacExtend",
            "16dd7dca52c9ec72c2b33e0bd5f02388ba93819c"
        ],
        [
            "rewrite (Rabs_pos_eq x) by easy.",
            "VernacExtend",
            "44b09278e33f526f1a521bc75a8b2d8f75de6f76"
        ],
        [
            "intros H; right; split.",
            "VernacExtend",
            "2cfc821e5f6a3f09e63b5142c53dcde7596e38cc"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.",
            "VernacExtend",
            "2b091fa0702f8966732d62d69d16d9ed7d5ac219"
        ],
        [
            "intros _; left.",
            "VernacExtend",
            "81d645c31a18a2a79c2d74848d2c880ed2e2888a"
        ],
        [
            "rewrite (Rabs_left y) by easy.",
            "VernacExtend",
            "16dd7dca52c9ec72c2b33e0bd5f02388ba93819c"
        ],
        [
            "rewrite (Rabs_left x) by easy.",
            "VernacExtend",
            "c3a0509e7bce07f8b93a9bfeaa444661e9c9d392"
        ],
        [
            "rewrite Rabs_left1.",
            "VernacExtend",
            "959a39766c3ec0e54779596cf6d2e0ed16ff476d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply V; left.",
            "VernacExtend",
            "370e3cb487310ca4c8ba0d2fe0ec5744ba485165"
        ],
        [
            "apply ln_beta_lt_pos with beta.",
            "VernacExtend",
            "535aa08bfef54cf05369a6c389bfce00f53601a1"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "rewrite <- ln_beta_minus1 in H1; try assumption.",
            "VernacExtend",
            "29bacf92643cc96d8ef49f5ff9a29e6f27f292ee"
        ],
        [
            "rewrite 2!ln_beta_abs; omega.",
            "VernacExtend",
            "3e39c88af1ca66dd8f900f294c9e690f722cc1f8"
        ],
        [
            "destruct U as [U|U].",
            "VernacExtend",
            "9a502bada1dc837d94cb55a94a77e23631161d48"
        ],
        [
            "rewrite U; apply Zle_trans with (ln_beta beta x).",
            "VernacExtend",
            "89e6f49263808309dcee872d52c554ceafcb6d7b"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite <- ln_beta_abs.",
            "VernacExtend",
            "9aad19d67f22ac4171063b1a18df84a6b2724182"
        ],
        [
            "apply ln_beta_le.",
            "VernacExtend",
            "e43580b7286582594a33da026f0809ba6159bbe8"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "apply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.",
            "VernacExtend",
            "71e58f4fd24b57f98e8c5b43e60943c6181e888e"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "destruct U as (U',U); rewrite U.",
            "VernacExtend",
            "968cf6ebc5005d10cb2493bdcaf3f8c8fc59b933"
        ],
        [
            "rewrite <- ln_beta_abs.",
            "VernacExtend",
            "9aad19d67f22ac4171063b1a18df84a6b2724182"
        ],
        [
            "apply ln_beta_minus_lb.",
            "VernacExtend",
            "26557ac0ffa70265ba9b1495ca32612e6287eb28"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "rewrite 2!ln_beta_abs.",
            "VernacExtend",
            "870cad43e173237ef83a18d9195b1908f719d3b3"
        ],
        [
            "assert (ln_beta beta y < ln_beta beta x - 1)%Z.",
            "VernacExtend",
            "8d52e76ad423deb4ae96a9d4452cb38098670138"
        ],
        [
            "now rewrite (ln_beta_minus1 x Zx).",
            "VernacExtend",
            "4136f2dc1a75c63261ec6fda76652f455d39b5cc"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply canonic_exp_round_ge...",
            "VernacExtend",
            "e3f2d5491b284b8f723c865b38d78ee85a40060b"
        ],
        [
            "intros K.",
            "VernacExtend",
            "e2e6d7d842a55ca16087666d9b923718d8bd0dec"
        ],
        [
            "apply round_plus_eq_zero in K...",
            "VernacExtend",
            "e1448a37d497292453fab86187a45aca1834bbb2"
        ],
        [
            "contradict H1; apply Zle_not_lt.",
            "VernacExtend",
            "f899b2f7165490dc961728c9bf531ac74b5f5fae"
        ],
        [
            "rewrite <- (ln_beta_minus1 x Zx).",
            "VernacExtend",
            "43c8b74069bce111a7280fefe9ec740a9289c7c5"
        ],
        [
            "replace y with (-x)%R.",
            "VernacExtend",
            "f0f6795b7b3e066728961b63a7419dcb979c0174"
        ],
        [
            "rewrite ln_beta_opp; omega.",
            "VernacExtend",
            "2122f5fd633a6474576dd62c5035ba1375dc2c16"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "rewrite ulp_neq_0.",
            "VernacExtend",
            "b4bcababf374cfa2a41fe0c19161a11c28a11d32"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_integral_contrapositive_currified; try assumption.",
            "VernacExtend",
            "7f9c1ad640c34794ea226d53d73bc6157eb2f3a4"
        ],
        [
            "apply Rinv_neq_0_compat.",
            "VernacExtend",
            "f2f8681c7dbf9047cfba9a279da441217a933f75"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Context {exp_not_FTZ : Exp_not_FTZ fexp}.",
            "VernacContext",
            "3405f768503600dcb90c125d58fc5c068e1d1581"
        ],
        [
            "Theorem round_plus_ge_ulp : forall x y, format x -> format y -> round beta fexp rnd (x+y) = 0%R \\/ (ulp beta fexp (x/Z2R beta) <= Rabs (round beta fexp rnd (x+y)))%R.",
            "VernacStartTheoremProof",
            "d5c3f066986cf7e2367824b9a43a4d232ff99461"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y Fx Fy.",
            "VernacExtend",
            "2422b4de56ca5844cf4b15f7145ed89bff287d85"
        ],
        [
            "case (Req_dec x 0); intros Zx.",
            "VernacExtend",
            "c5961ea82acd0d1dfe5eafeb0e7d08cc6e184ca6"
        ],
        [
            "rewrite Zx, Rplus_0_l.",
            "VernacExtend",
            "ee3dacf88ed84e029c158a4e92b758c0ba998615"
        ],
        [
            "rewrite round_generic...",
            "VernacExtend",
            "af5222f20fb69e4892cd9b764ef3997628087b6a"
        ],
        [
            "unfold Rdiv; rewrite Rmult_0_l.",
            "VernacExtend",
            "41e98a96e5e51047f96c0c3f205c353f96fa6769"
        ],
        [
            "rewrite Fy at 2.",
            "VernacExtend",
            "6b9c5d404659cb682bedfc111fd1cc9e1ed938de"
        ],
        [
            "unfold F2R; simpl; rewrite Rabs_mult.",
            "VernacExtend",
            "9ebcd4992accc1567486098ea925edb1db47a3b2"
        ],
        [
            "rewrite (Rabs_pos_eq (bpow _)) by apply bpow_ge_0.",
            "VernacExtend",
            "005b7d36f40c23a8fa29b431bcfaa7d86399f832"
        ],
        [
            "case (Z.eq_dec (Ztrunc (scaled_mantissa beta fexp y)) 0); intros Hm.",
            "VernacExtend",
            "03f81eb35e9facd77d24b6763335a23cb0999898"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite Fy, Hm; unfold F2R; simpl; ring.",
            "VernacExtend",
            "59907c45230b3f0818c5c09424f0e98937c7b975"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "apply Rle_trans with (1*bpow (cexp y))%R.",
            "VernacExtend",
            "20fa37cf8eb909c72458c5ddcfa90d3b07a8da81"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "rewrite <- ulp_neq_0.",
            "VernacExtend",
            "a62164676556c270ff89fa485154295942151b95"
        ],
        [
            "apply ulp_ge_ulp_0...",
            "VernacExtend",
            "36803113770073e3520ede91d0b2468a89cec594"
        ],
        [
            "intros K; apply Hm.",
            "VernacExtend",
            "de8b861fa309f15c7de60e1d542dd9fd47ae987f"
        ],
        [
            "rewrite K, scaled_mantissa_0.",
            "VernacExtend",
            "8d7b20d4dbc06898f79541cff6f9e1bc0b7c7e13"
        ],
        [
            "apply (Ztrunc_Z2R 0).",
            "VernacExtend",
            "f2dca00f6438321da92a0cb199732aa8776ab401"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "rewrite <- Z2R_abs.",
            "VernacExtend",
            "77629e87057563edf3f2c544c80c7822cbaa734b"
        ],
        [
            "apply (Z2R_le 1).",
            "VernacExtend",
            "0ed9eea66069dc85aaa897c5385949fe4a67943b"
        ],
        [
            "apply (Zlt_le_succ 0).",
            "VernacExtend",
            "4a8500973e3fba074ff26df3722d5272dbcc3511"
        ],
        [
            "now apply Z.abs_pos.",
            "VernacExtend",
            "d5078e057059b4827d32f86d55fb9d73b6895b76"
        ],
        [
            "destruct (round_plus_mult_ulp x y Fx Fy Zx) as (m,Hm).",
            "VernacExtend",
            "20d88f9ef052cbe62ac03ba582b82a72fbd4f2ca"
        ],
        [
            "case (Z.eq_dec m 0); intros Zm.",
            "VernacExtend",
            "a1439fb668f131aeca5e657974a4132156fec4da"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite Hm, Zm; simpl; ring.",
            "VernacExtend",
            "32f8db687a4611344a1fb2486d1aded4a1d044c0"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "rewrite Hm, Rabs_mult.",
            "VernacExtend",
            "0e28c666e095270bd10c27f1233a35bf05f1af30"
        ],
        [
            "rewrite (Rabs_pos_eq (ulp _ _ _)) by apply ulp_ge_0.",
            "VernacExtend",
            "0732c92b2c723b181bbaf769f983c5a14b0c3bba"
        ],
        [
            "apply Rle_trans with (1*ulp beta fexp (x/Z2R beta))%R.",
            "VernacExtend",
            "6807122cd571c9ea7ed0d2ec5cce954fd43e1598"
        ],
        [
            "right; ring.",
            "VernacExtend",
            "fd78e12e931c5c888aae66d8787277e6e0aa2249"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply ulp_ge_0.",
            "VernacExtend",
            "5d0ce5d17ef4f7c6c49a717ed77dfcf0148cc9ed"
        ],
        [
            "rewrite <- Z2R_abs.",
            "VernacExtend",
            "77629e87057563edf3f2c544c80c7822cbaa734b"
        ],
        [
            "apply (Z2R_le 1).",
            "VernacExtend",
            "0ed9eea66069dc85aaa897c5385949fe4a67943b"
        ],
        [
            "apply (Zlt_le_succ 0).",
            "VernacExtend",
            "4a8500973e3fba074ff26df3722d5272dbcc3511"
        ],
        [
            "now apply Z.abs_pos.",
            "VernacExtend",
            "d5078e057059b4827d32f86d55fb9d73b6895b76"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_plus_mult_ulp.",
            "VernacEndSegment",
            "331863419ae4b6b0ed1e6bc940d0613e498467f5"
        ],
        [
            "Section Fprop_plus_ge_ulp.",
            "VernacBeginSection",
            "223149d580911726b293239b0ff1088bd9e36fa9"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Variable emin prec : Z.",
            "VernacAssumption",
            "3ccc0e6889e5cd3c3d9e4dafff4f8ba78f15de33"
        ],
        [
            "Context { prec_gt_0_ : Prec_gt_0 prec }.",
            "VernacContext",
            "c8404f16109f008297dc64925b18a48ad609d64a"
        ],
        [
            "Theorem round_plus_ge_ulp_FLT : forall x y e, generic_format beta (FLT_exp emin prec) x -> generic_format beta (FLT_exp emin prec) y -> (bpow e <= Rabs x)%R -> round beta (FLT_exp emin prec) rnd (x+y) = 0%R \\/ (bpow (e - prec) <= Rabs (round beta (FLT_exp emin prec) rnd (x+y)))%R.",
            "VernacStartTheoremProof",
            "b80f1dfba7e6e1f6ca2d91adde5491260c00a7fb"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y e Fx Fy He.",
            "VernacExtend",
            "468ccce5b0765bf52387bf4f5e6470abfbd0c721"
        ],
        [
            "assert (Zx: x <> 0%R).",
            "VernacExtend",
            "efba8118f51e2328c54d1ae4db2c1c7c1349a2da"
        ],
        [
            "contradict He.",
            "VernacExtend",
            "2910b2d5d0b7d4fb79d0b4d468d1005b17659b2c"
        ],
        [
            "apply Rlt_not_le; rewrite He, Rabs_R0.",
            "VernacExtend",
            "588564156cc3465b8e2250251ce167acef088030"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "case round_plus_ge_ulp with beta (FLT_exp emin prec) rnd x y...",
            "VernacExtend",
            "527ad1e7fbc0647be514acc469f69d60a1641b96"
        ],
        [
            "intros H; right.",
            "VernacExtend",
            "6a25ce2369ed819870d7737bc682da84a8fa6866"
        ],
        [
            "apply Rle_trans with (2:=H).",
            "VernacExtend",
            "a8647b52d3e77ac9024532913490c00e5873f1b7"
        ],
        [
            "rewrite ulp_neq_0.",
            "VernacExtend",
            "b4bcababf374cfa2a41fe0c19161a11c28a11d32"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite <- ln_beta_minus1 by easy.",
            "VernacExtend",
            "8835a72953ccc2f5d5d581edac40db6a366ab0c5"
        ],
        [
            "unfold FLT_exp; apply bpow_le.",
            "VernacExtend",
            "95ad4d40fcfc2f280b3139d40c4c839d48220de3"
        ],
        [
            "apply Zle_trans with (2:=Z.le_max_l _ _).",
            "VernacExtend",
            "1461c38d1dae999d8aa872c77e641c06b69a5345"
        ],
        [
            "destruct (ln_beta beta x) as (n,Hn); simpl.",
            "VernacExtend",
            "bd87e6ae02b32b0529a784e12d2227c8d4d153a1"
        ],
        [
            "assert (e < n)%Z; try omega.",
            "VernacExtend",
            "84351eaf3d0727409f1496edcce35e6bb42a7a92"
        ],
        [
            "apply lt_bpow with beta.",
            "VernacExtend",
            "8b691f5c9c4b728daf6b23cc71cb0efd1b7f2669"
        ],
        [
            "apply Rle_lt_trans with (1:=He).",
            "VernacExtend",
            "df1e906f6b8f04aaac97bbd15b893f3edddf59f5"
        ],
        [
            "now apply Hn.",
            "VernacExtend",
            "9f7ba7c9e61584f556118a85b1598c23b964864e"
        ],
        [
            "apply Rmult_integral_contrapositive_currified; try assumption.",
            "VernacExtend",
            "7f9c1ad640c34794ea226d53d73bc6157eb2f3a4"
        ],
        [
            "apply Rinv_neq_0_compat.",
            "VernacExtend",
            "f2f8681c7dbf9047cfba9a279da441217a933f75"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_plus_ge_ulp_FLX : forall x y e, generic_format beta (FLX_exp prec) x -> generic_format beta (FLX_exp prec) y -> (bpow e <= Rabs x)%R -> round beta (FLX_exp prec) rnd (x+y) = 0%R \\/ (bpow (e - prec) <= Rabs (round beta (FLX_exp prec) rnd (x+y)))%R.",
            "VernacStartTheoremProof",
            "6a9921a429ded32b0eb28aeb164a0c9c81792986"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y e Fx Fy He.",
            "VernacExtend",
            "468ccce5b0765bf52387bf4f5e6470abfbd0c721"
        ],
        [
            "assert (Zx: x <> 0%R).",
            "VernacExtend",
            "efba8118f51e2328c54d1ae4db2c1c7c1349a2da"
        ],
        [
            "contradict He.",
            "VernacExtend",
            "2910b2d5d0b7d4fb79d0b4d468d1005b17659b2c"
        ],
        [
            "apply Rlt_not_le; rewrite He, Rabs_R0.",
            "VernacExtend",
            "588564156cc3465b8e2250251ce167acef088030"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "case round_plus_ge_ulp with beta (FLX_exp prec) rnd x y...",
            "VernacExtend",
            "3a51d75439ef1e1e52b39e55ccc5b53323ddba68"
        ],
        [
            "intros H; right.",
            "VernacExtend",
            "6a25ce2369ed819870d7737bc682da84a8fa6866"
        ],
        [
            "apply Rle_trans with (2:=H).",
            "VernacExtend",
            "a8647b52d3e77ac9024532913490c00e5873f1b7"
        ],
        [
            "rewrite ulp_neq_0.",
            "VernacExtend",
            "b4bcababf374cfa2a41fe0c19161a11c28a11d32"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "rewrite <- ln_beta_minus1 by easy.",
            "VernacExtend",
            "8835a72953ccc2f5d5d581edac40db6a366ab0c5"
        ],
        [
            "unfold FLX_exp; apply bpow_le.",
            "VernacExtend",
            "e40416b9ba01e5dba71c3217e7f0c439b5b65443"
        ],
        [
            "destruct (ln_beta beta x) as (n,Hn); simpl.",
            "VernacExtend",
            "bd87e6ae02b32b0529a784e12d2227c8d4d153a1"
        ],
        [
            "assert (e < n)%Z; try omega.",
            "VernacExtend",
            "84351eaf3d0727409f1496edcce35e6bb42a7a92"
        ],
        [
            "apply lt_bpow with beta.",
            "VernacExtend",
            "8b691f5c9c4b728daf6b23cc71cb0efd1b7f2669"
        ],
        [
            "apply Rle_lt_trans with (1:=He).",
            "VernacExtend",
            "df1e906f6b8f04aaac97bbd15b893f3edddf59f5"
        ],
        [
            "now apply Hn.",
            "VernacExtend",
            "9f7ba7c9e61584f556118a85b1598c23b964864e"
        ],
        [
            "apply Rmult_integral_contrapositive_currified; try assumption.",
            "VernacExtend",
            "7f9c1ad640c34794ea226d53d73bc6157eb2f3a4"
        ],
        [
            "apply Rinv_neq_0_compat.",
            "VernacExtend",
            "f2f8681c7dbf9047cfba9a279da441217a933f75"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_plus_ge_ulp.",
            "VernacEndSegment",
            "c3abc3f7e53339de82c3794211f61f3de0bae3cd"
        ]
    ],
    "proofs": [
        {
            "name": "plus_error_aux",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros x y.",
                        "VernacExtend",
                        "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
                    ]
                },
                {
                    "command": [
                        "set (ex := canonic_exp beta fexp x).",
                        "VernacExtend",
                        "2d3c0c52463c3d771c20d8209e165d96ee21ca36"
                    ]
                },
                {
                    "command": [
                        "set (ey := canonic_exp beta fexp y).",
                        "VernacExtend",
                        "e05a721d96b79d59f9842e1d25dc2e50d72858a6"
                    ]
                },
                {
                    "command": [
                        "intros He Hx Hy.",
                        "VernacExtend",
                        "e635c8005fd8de1b2454eaf05dd14950175fb534"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_dec (round beta fexp (Znearest choice) (x + y) - (x + y)) R0) as [H0|H0].",
                        "VernacExtend",
                        "011bda711f1338cc8971d753cdd884beb47fc3ad"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_0.",
                        "VernacExtend",
                        "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
                    ]
                },
                {
                    "command": [
                        "set (mx := Ztrunc (scaled_mantissa beta fexp x)).",
                        "VernacExtend",
                        "1c5e2df221e394b7677bcb7283645d9d798bf36e"
                    ]
                },
                {
                    "command": [
                        "set (my := Ztrunc (scaled_mantissa beta fexp y)).",
                        "VernacExtend",
                        "eabf023fe58ee276230eda7b121b5f85e7b9bbbb"
                    ]
                },
                {
                    "command": [
                        "assert (Hxy: (x + y)%R = F2R (Float beta (mx + my * beta ^ (ey - ex)) ex)).",
                        "VernacExtend",
                        "3e090e50778a7e589617f06c8a9d2e1f369585ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Hx, Hy.",
                        "VernacExtend",
                        "d3525d2615cdf2648c78d94d5f42900b841387eb"
                    ]
                },
                {
                    "command": [
                        "fold mx my ex ey.",
                        "VernacExtend",
                        "f3c97d34737b59b19e1a44bc066428f053a206f0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_plus.",
                        "VernacExtend",
                        "286b278a98da8db00ca6102bc439009a758ae688"
                    ]
                },
                {
                    "command": [
                        "unfold Fplus.",
                        "VernacExtend",
                        "c54a67894d0ce35c9c1961a2d7d8aa03f0ec71b5"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "now rewrite Zle_imp_le_bool with (1 := He).",
                        "VernacExtend",
                        "dc9d5d43783da903281e35f422bbde2af553c0d0"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxy.",
                        "VernacExtend",
                        "d3b02e14eceb680d6ea962ead2cb32634a781bf3"
                    ]
                },
                {
                    "command": [
                        "destruct (round_repr_same_exp (Znearest choice) (mx + my * beta ^ (ey - ex)) ex) as (mxy, Hxy').",
                        "VernacExtend",
                        "e59d6ba1ed2f7d1cf3174be0a086ea75fbaa8369"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxy'.",
                        "VernacExtend",
                        "bc9810a370514bc61c137528e8310c9a422f3980"
                    ]
                },
                {
                    "command": [
                        "assert (H: (F2R (Float beta mxy ex) - F2R (Float beta (mx + my * beta ^ (ey - ex)) ex))%R = F2R (Float beta (mxy - (mx + my * beta ^ (ey - ex))) ex)).",
                        "VernacExtend",
                        "deee3f817f29ef52ba8cd35d07d01d856260fb94"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- F2R_minus, Fminus_same_exp.",
                        "VernacExtend",
                        "853966bf52a78df64035f561e1722b5f5b55d35b"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_F2R.",
                        "VernacExtend",
                        "3bbdbef5cecd8cd7887cb9d4ed37843b2dc31e75"
                    ]
                },
                {
                    "command": [
                        "intros _.",
                        "VernacExtend",
                        "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
                    ]
                },
                {
                    "command": [
                        "apply monotone_exp.",
                        "VernacExtend",
                        "04ccae1a2908d693edfe87d121b476fe26f24c85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H, <- Hxy', <- Hxy.",
                        "VernacExtend",
                        "f49e1a43eef58592c47af88642fc95134b7bdaf9"
                    ]
                },
                {
                    "command": [
                        "apply ln_beta_le_abs.",
                        "VernacExtend",
                        "5d91662a86d36a47992ad980cdadb86c0b8e45f6"
                    ]
                },
                {
                    "command": [
                        "exact H0.",
                        "VernacExtend",
                        "3920fece303e3c4728f9cdc71daff99239237dbd"
                    ]
                },
                {
                    "command": [
                        "pattern x at 3 ; replace x with (-(y - (x + y)))%R by ring.",
                        "VernacExtend",
                        "d608ba0a315a2b61e6243a87a856589adc9fbd61"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "now apply (round_N_pt beta _ choice (x + y)).",
                        "VernacExtend",
                        "c52fb48aeb342e373b2ddd5f3b57860c2d08742c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plus_error",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros x y Hx Hy.",
                        "VernacExtend",
                        "7566bd3dac9a8437bd137c0d7aaa934e9b1723a2"
                    ]
                },
                {
                    "command": [
                        "destruct (Zle_or_lt (canonic_exp beta fexp x) (canonic_exp beta fexp y)).",
                        "VernacExtend",
                        "1c9e6b3eeb3b6bd0dcd1fdd8676d7f1ff8393361"
                    ]
                },
                {
                    "command": [
                        "now apply plus_error_aux.",
                        "VernacExtend",
                        "9da91a5a30005dfaa9f29f6cd413e7bda39ab081"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm.",
                        "VernacExtend",
                        "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
                    ]
                },
                {
                    "command": [
                        "apply plus_error_aux ; try easy.",
                        "VernacExtend",
                        "bc01c99f43550042355c8cc2a45bcc7a24ba6062"
                    ]
                },
                {
                    "command": [
                        "now apply Zlt_le_weak.",
                        "VernacExtend",
                        "8df137fb70ba9a1f8f0605f13095da8524766c66"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_beta_minus1",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "intros z Hz.",
                        "VernacExtend",
                        "4248c0300130ba18200d4779d5d54ab29d4b84b6"
                    ]
                },
                {
                    "command": [
                        "unfold Zminus.",
                        "VernacExtend",
                        "7085d4231409167767072da1bd24eb73ce98a683"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ln_beta_mult_bpow with (1 := Hz).",
                        "VernacExtend",
                        "171452ffdee15093be64142484f9eeef99b356a1"
                    ]
                },
                {
                    "command": [
                        "now rewrite bpow_opp, bpow_1.",
                        "VernacExtend",
                        "e4f571abb33aacf5d5f7b582728dade387949ec1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}