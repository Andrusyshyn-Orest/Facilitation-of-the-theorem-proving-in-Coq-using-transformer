{
    "filename": "flocq/Prop/Fprop_relative.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Fcore.",
            "VernacRequire",
            "0726413a0cd1e00c4c23af78515a8bb580c73ed5"
        ],
        [
            "Section Fprop_relative.",
            "VernacBeginSection",
            "da2fb2e163bb3c879353aa0825a8b2ac17c76d34"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Section Fprop_relative_generic.",
            "VernacBeginSection",
            "103619c242f71594b6c9f68ce13e478869e835a6"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { prop_exp : Valid_exp fexp }.",
            "VernacContext",
            "035dd31d94624fec2d4fef957050d0261441861d"
        ],
        [
            "Section relative_error_conversion.",
            "VernacBeginSection",
            "2f2f1ab7371b7b0a61f3c6e9e56d550c98d2a177"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Lemma relative_error_lt_conversion : forall x b, (0 < b)%R -> (x <> 0 -> Rabs (round beta fexp rnd x - x) < b * Rabs x)%R -> exists eps, (Rabs eps < b)%R /\\ round beta fexp rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "1673c85301894a7a684a900a42b8e63ebbafee02"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x b Hb0 Hxb.",
            "VernacExtend",
            "4c46acefd484a01944ed5bc41740701f8e95abb9"
        ],
        [
            "destruct (Req_dec x 0) as [Hx0|Hx0].",
            "VernacExtend",
            "69fdcf6bda96f2d635c402e78b2df2a462d6ee11"
        ],
        [
            "exists 0%R.",
            "VernacExtend",
            "4946311e79d7b67f6666353bbdee019ff680f9fb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite Rabs_R0.",
            "VernacExtend",
            "c691d28da7e20bf9383dded58968f3a6f4e59db8"
        ],
        [
            "rewrite Hx0, Rmult_0_l.",
            "VernacExtend",
            "e23b4cfbab45536d364eae6988242edab5e2d60b"
        ],
        [
            "apply round_0...",
            "VernacExtend",
            "acc73e912c36de129bd103d90759fb30ec47be6f"
        ],
        [
            "specialize (Hxb Hx0).",
            "VernacExtend",
            "1ec90490166c1b010fb7743052b7e01421e7f25c"
        ],
        [
            "exists ((round beta fexp rnd x - x) / x)%R.",
            "VernacExtend",
            "d3f05d362c2bfb089708604de9bfb29bc24f42a4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "2: now field.",
            "VernacExtend",
            "31f9c085ed62579f9e676a14314943baad84a6cf"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_lt_reg_r with (Rabs x).",
            "VernacExtend",
            "9b8d2a2b92269ddb28812d537fa016e7f11b481e"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "rewrite Rmult_assoc, <- Rabs_mult.",
            "VernacExtend",
            "6ae3853895ab18e874b3d84d4281a0ffd0c466f4"
        ],
        [
            "rewrite Rinv_l with (1 := Hx0).",
            "VernacExtend",
            "8651d5072cad3f9344597d8422f5e587f106970c"
        ],
        [
            "now rewrite Rabs_R1, Rmult_1_r.",
            "VernacExtend",
            "de8654c7b08242f2282c8a7a76e053b3b8ba1582"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relative_error_le_conversion : forall x b, (0 <= b)%R -> (Rabs (round beta fexp rnd x - x) <= b * Rabs x)%R -> exists eps, (Rabs eps <= b)%R /\\ round beta fexp rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "fc5e163fdba407a2bf784afe98e71ac54046409d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x b Hb0 Hxb.",
            "VernacExtend",
            "4c46acefd484a01944ed5bc41740701f8e95abb9"
        ],
        [
            "destruct (Req_dec x 0) as [Hx0|Hx0].",
            "VernacExtend",
            "69fdcf6bda96f2d635c402e78b2df2a462d6ee11"
        ],
        [
            "exists 0%R.",
            "VernacExtend",
            "4946311e79d7b67f6666353bbdee019ff680f9fb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now rewrite Rabs_R0.",
            "VernacExtend",
            "c691d28da7e20bf9383dded58968f3a6f4e59db8"
        ],
        [
            "rewrite Hx0, Rmult_0_l.",
            "VernacExtend",
            "e23b4cfbab45536d364eae6988242edab5e2d60b"
        ],
        [
            "apply round_0...",
            "VernacExtend",
            "acc73e912c36de129bd103d90759fb30ec47be6f"
        ],
        [
            "exists ((round beta fexp rnd x - x) / x)%R.",
            "VernacExtend",
            "d3f05d362c2bfb089708604de9bfb29bc24f42a4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "2: now field.",
            "VernacExtend",
            "31f9c085ed62579f9e676a14314943baad84a6cf"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_le_reg_r with (Rabs x).",
            "VernacExtend",
            "7d7c8d469af31f36c5032d2cf8cdf67b8677b0e7"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "rewrite Rmult_assoc, <- Rabs_mult.",
            "VernacExtend",
            "6ae3853895ab18e874b3d84d4281a0ffd0c466f4"
        ],
        [
            "rewrite Rinv_l with (1 := Hx0).",
            "VernacExtend",
            "8651d5072cad3f9344597d8422f5e587f106970c"
        ],
        [
            "now rewrite Rabs_R1, Rmult_1_r.",
            "VernacExtend",
            "de8654c7b08242f2282c8a7a76e053b3b8ba1582"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End relative_error_conversion.",
            "VernacEndSegment",
            "774fab8b19ec47a450a1d4a69367a08bde4a4b8b"
        ],
        [
            "Variable emin p : Z.",
            "VernacAssumption",
            "0a1358f7859621e818b0a26267650030b9deb0f8"
        ],
        [
            "Hypothesis Hmin : forall k, (emin < k)%Z -> (p <= k - fexp k)%Z.",
            "VernacAssumption",
            "01bc71b4016a8280a4d2ed4fc9bf398bd6ea94df"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Theorem relative_error : forall x, (bpow emin <= Rabs x)%R -> (Rabs (round beta fexp rnd x - x) < bpow (-p + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "b370ebac3997b3e87764913eda9d39daa337a55e"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "assert (Hx': (x <> 0)%R).",
            "VernacExtend",
            "b857fb3cec10974974e2634788cbf4f61ad8af51"
        ],
        [
            "intros T; contradict Hx; rewrite T, Rabs_R0.",
            "VernacExtend",
            "bbdecd0487e6aa52d78f788bdd187cfcb661dbe4"
        ],
        [
            "apply Rlt_not_le, bpow_gt_0.",
            "VernacExtend",
            "7ebe4613eb5dbfcac7a231111a982cffb3ff2015"
        ],
        [
            "apply Rlt_le_trans with (ulp beta fexp x)%R.",
            "VernacExtend",
            "01c9cff02cc4ed6c8ce8b5af9f431ec8d2afe5a7"
        ],
        [
            "now apply error_lt_ulp...",
            "VernacExtend",
            "774f68df669a0709cb2e2c98f57d548eb220e811"
        ],
        [
            "rewrite ulp_neq_0; trivial.",
            "VernacExtend",
            "15f172fa8ef4443236132f274b2179ad6f15bde8"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (He Hx').",
            "VernacExtend",
            "83b5ad72032a587ee981534b4319714d2f93a277"
        ],
        [
            "apply Rle_trans with (bpow (-p + 1) * bpow (ex - 1))%R.",
            "VernacExtend",
            "b7556ceb9080c87974bfd30a174e820b1f5064dd"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "assert (emin < ex)%Z.",
            "VernacExtend",
            "e182a4f297a97eb98babb3369ce15c6c2ff2f444"
        ],
        [
            "apply (lt_bpow beta).",
            "VernacExtend",
            "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
        ],
        [
            "apply Rle_lt_trans with (2 := proj2 He).",
            "VernacExtend",
            "99e0937f6da00ad895d4798516dcd748693e88c2"
        ],
        [
            "exact Hx.",
            "VernacExtend",
            "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_ex : forall x, (bpow emin <= Rabs x)%R -> exists eps, (Rabs eps < bpow (-p + 1))%R /\\ round beta fexp rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "5a7212cf3e747343ca00fdadc6fe81fb7922b677"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_lt_conversion...",
            "VernacExtend",
            "a0dc96ac1a3e8c1c072644bf9e645d62a5f1a7c5"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "now apply relative_error.",
            "VernacExtend",
            "028ae54e891432e5c9390f5ec15132a5be982d2c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_F2R_emin : forall m, let x := F2R (Float beta m emin) in (x <> 0)%R -> (Rabs (round beta fexp rnd x - x) < bpow (-p + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "d99ef2420a5d1ac8b30b4789415a82b617642059"
        ],
        [
            "intros m x Hx.",
            "VernacExtend",
            "74fd973163ac482d0248fd6ffd9f2c39a304e45e"
        ],
        [
            "apply relative_error.",
            "VernacExtend",
            "fcb684c1b44247c1199af4fb67523c09ef97fe83"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "rewrite <- F2R_Zabs.",
            "VernacExtend",
            "301e349e7bd7d3dddc956a5691145eb2e8b49880"
        ],
        [
            "apply bpow_le_F2R.",
            "VernacExtend",
            "803e6795d722fe9c018879dc40129c1bb37d679b"
        ],
        [
            "apply F2R_lt_reg with beta emin.",
            "VernacExtend",
            "b7ef27fe977b3469383e891330e653916d973749"
        ],
        [
            "rewrite F2R_0, F2R_Zabs.",
            "VernacExtend",
            "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_F2R_emin_ex : forall m, let x := F2R (Float beta m emin) in exists eps, (Rabs eps < bpow (-p + 1))%R /\\ round beta fexp rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "ff09eaa82a327b6a665fb46a5b2fc7275cd2839c"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "apply relative_error_lt_conversion...",
            "VernacExtend",
            "a0dc96ac1a3e8c1c072644bf9e645d62a5f1a7c5"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_F2R_emin.",
            "VernacExtend",
            "139a6e1c39bf75d73656202b4eabfe8d32b752e1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_round : (0 < p)%Z -> forall x, (bpow emin <= Rabs x)%R -> (Rabs (round beta fexp rnd x - x) < bpow (-p + 1) * Rabs (round beta fexp rnd x))%R.",
            "VernacStartTheoremProof",
            "fc2d65ebd2c0c9c45db72e9621cb4b1844fdd00a"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Hp x Hx.",
            "VernacExtend",
            "ef4e85f646ec6c3bd386659b7bf515fc9440698e"
        ],
        [
            "assert (Hx': (x <> 0)%R).",
            "VernacExtend",
            "b857fb3cec10974974e2634788cbf4f61ad8af51"
        ],
        [
            "intros T; contradict Hx; rewrite T, Rabs_R0.",
            "VernacExtend",
            "bbdecd0487e6aa52d78f788bdd187cfcb661dbe4"
        ],
        [
            "apply Rlt_not_le, bpow_gt_0.",
            "VernacExtend",
            "7ebe4613eb5dbfcac7a231111a982cffb3ff2015"
        ],
        [
            "apply Rlt_le_trans with (ulp beta fexp x)%R.",
            "VernacExtend",
            "01c9cff02cc4ed6c8ce8b5af9f431ec8d2afe5a7"
        ],
        [
            "now apply error_lt_ulp.",
            "VernacExtend",
            "bd4381b0a575bab4daad860ab962cdc14a8e0e78"
        ],
        [
            "rewrite ulp_neq_0; trivial.",
            "VernacExtend",
            "15f172fa8ef4443236132f274b2179ad6f15bde8"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (He Hx').",
            "VernacExtend",
            "83b5ad72032a587ee981534b4319714d2f93a277"
        ],
        [
            "assert (He': (emin < ex)%Z).",
            "VernacExtend",
            "479202808c448643a65edd114d1538ef4c23ebe0"
        ],
        [
            "apply (lt_bpow beta).",
            "VernacExtend",
            "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
        ],
        [
            "apply Rle_lt_trans with (2 := proj2 He).",
            "VernacExtend",
            "99e0937f6da00ad895d4798516dcd748693e88c2"
        ],
        [
            "exact Hx.",
            "VernacExtend",
            "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
        ],
        [
            "apply Rle_trans with (bpow (-p + 1) * bpow (ex - 1))%R.",
            "VernacExtend",
            "b7556ceb9080c87974bfd30a174e820b1f5064dd"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "generalize He.",
            "VernacExtend",
            "81146001f6d30f8c555ead8e68bbceaab352b2d0"
        ],
        [
            "apply round_abs_abs...",
            "VernacExtend",
            "e3e7cdd3f71cafba74b853b4d890989bd5c91525"
        ],
        [
            "clear rnd valid_rnd x Hx Hx' He.",
            "VernacExtend",
            "07a577c1e1709e4169f1ec7b21b23cf92fff99f8"
        ],
        [
            "intros rnd valid_rnd x _ Hx.",
            "VernacExtend",
            "29db0c5b0aace7e433548509eb7dabd2e49f4444"
        ],
        [
            "rewrite <- (round_generic beta fexp rnd (bpow (ex - 1))).",
            "VernacExtend",
            "3d3ace798dbc191d6433aee4d4b693172b241da8"
        ],
        [
            "now apply round_le.",
            "VernacExtend",
            "7cf7726fbdb7bf862a84c06ac38f2798bfe95ce5"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "ring_simplify (ex - 1 + 1)%Z.",
            "VernacExtend",
            "e15e6d08a1d7441e056146afec4dcbc55577b581"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_round_F2R_emin : (0 < p)%Z -> forall m, let x := F2R (Float beta m emin) in (x <> 0)%R -> (Rabs (round beta fexp rnd x - x) < bpow (-p + 1) * Rabs (round beta fexp rnd x))%R.",
            "VernacStartTheoremProof",
            "d8f5fdb1208323ed3a865b9fce5e198f521e6b2b"
        ],
        [
            "intros Hp m x Hx.",
            "VernacExtend",
            "7ce177d02ff12fdc903175711a523d95b0e8817e"
        ],
        [
            "apply relative_error_round.",
            "VernacExtend",
            "2ee31d5908fadce575ec479fc7612cc30bd87cf7"
        ],
        [
            "exact Hp.",
            "VernacExtend",
            "be341283dbc3e7d951878f8da53eeea02d5c4695"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "rewrite <- F2R_Zabs.",
            "VernacExtend",
            "301e349e7bd7d3dddc956a5691145eb2e8b49880"
        ],
        [
            "apply bpow_le_F2R.",
            "VernacExtend",
            "803e6795d722fe9c018879dc40129c1bb37d679b"
        ],
        [
            "apply F2R_lt_reg with beta emin.",
            "VernacExtend",
            "b7ef27fe977b3469383e891330e653916d973749"
        ],
        [
            "rewrite F2R_0, F2R_Zabs.",
            "VernacExtend",
            "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable choice : Z -> bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Theorem relative_error_N : forall x, (bpow emin <= Rabs x)%R -> (Rabs (round beta fexp (Znearest choice) x - x) <= /2 * bpow (-p + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "7d742c15a191bd83c262dad1218994189eb745a7"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply Rle_trans with (/2 * ulp beta fexp x)%R.",
            "VernacExtend",
            "33a1c6bd6e0e4d281bb865304536ebfb69c7567e"
        ],
        [
            "now apply error_le_half_ulp.",
            "VernacExtend",
            "53498dfb0f551a75a0117e73aba33eb92a0513a2"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "assert (Hx': (x <> 0)%R).",
            "VernacExtend",
            "b857fb3cec10974974e2634788cbf4f61ad8af51"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply Rlt_not_le with (2 := Hx).",
            "VernacExtend",
            "03cbb662c8cddb5545e7f2f8f73d8fd25f455194"
        ],
        [
            "rewrite H, Rabs_R0.",
            "VernacExtend",
            "1213f6c48dc580d061f6ca137517489d0d973027"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "rewrite ulp_neq_0; trivial.",
            "VernacExtend",
            "15f172fa8ef4443236132f274b2179ad6f15bde8"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (He Hx').",
            "VernacExtend",
            "83b5ad72032a587ee981534b4319714d2f93a277"
        ],
        [
            "apply Rle_trans with (bpow (-p + 1) * bpow (ex - 1))%R.",
            "VernacExtend",
            "b7556ceb9080c87974bfd30a174e820b1f5064dd"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "assert (emin < ex)%Z.",
            "VernacExtend",
            "e182a4f297a97eb98babb3369ce15c6c2ff2f444"
        ],
        [
            "apply (lt_bpow beta).",
            "VernacExtend",
            "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
        ],
        [
            "apply Rle_lt_trans with (2 := proj2 He).",
            "VernacExtend",
            "99e0937f6da00ad895d4798516dcd748693e88c2"
        ],
        [
            "exact Hx.",
            "VernacExtend",
            "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_ex : forall x, (bpow emin <= Rabs x)%R -> exists eps, (Rabs eps <= /2 * bpow (-p + 1))%R /\\ round beta fexp (Znearest choice) x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "cf42fadb41a31f5ab2cbb2db621dbb72b82598a1"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_le_conversion...",
            "VernacExtend",
            "a1e945a400848f5b59802c922a6e9f430138dc9e"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_N.",
            "VernacExtend",
            "df4bf9cedff43e45a8435160b58d7b20ea320f61"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_F2R_emin : forall m, let x := F2R (Float beta m emin) in (Rabs (round beta fexp (Znearest choice) x - x) <= /2 * bpow (-p + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "5f1c284d6cb6317537c2f51d22ae578528967c35"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "destruct (Req_dec x 0) as [Hx|Hx].",
            "VernacExtend",
            "d83dd8360662d9cf2533c82d6f6df4ee188b8ae9"
        ],
        [
            "rewrite Hx, round_0...",
            "VernacExtend",
            "2812e147924da54ba966c5efe832484a33eb854b"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0.",
            "VernacExtend",
            "a22a98ca758ff0b6b428b2af98fbcc58fb36e386"
        ],
        [
            "rewrite Rmult_0_r.",
            "VernacExtend",
            "b528602a1e730e82684da4ab7d2073ddaf5ebdb0"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply relative_error_N.",
            "VernacExtend",
            "d240ece3f44feff359829fc9fdeeb7b72fa6a46a"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "rewrite <- F2R_Zabs.",
            "VernacExtend",
            "301e349e7bd7d3dddc956a5691145eb2e8b49880"
        ],
        [
            "apply bpow_le_F2R.",
            "VernacExtend",
            "803e6795d722fe9c018879dc40129c1bb37d679b"
        ],
        [
            "apply F2R_lt_reg with beta emin.",
            "VernacExtend",
            "b7ef27fe977b3469383e891330e653916d973749"
        ],
        [
            "rewrite F2R_0, F2R_Zabs.",
            "VernacExtend",
            "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_F2R_emin_ex : forall m, let x := F2R (Float beta m emin) in exists eps, (Rabs eps <= /2 * bpow (-p + 1))%R /\\ round beta fexp (Znearest choice) x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "c10cbd5d0d8e130f991ba6178c1b336fe427d852"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "apply relative_error_le_conversion...",
            "VernacExtend",
            "a1e945a400848f5b59802c922a6e9f430138dc9e"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_N_F2R_emin.",
            "VernacExtend",
            "a01b8b0bd136eb8adf9a5eb67afad473bef0dc13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_round : (0 < p)%Z -> forall x, (bpow emin <= Rabs x)%R -> (Rabs (round beta fexp (Znearest choice) x - x) <= /2 * bpow (-p + 1) * Rabs (round beta fexp (Znearest choice) x))%R.",
            "VernacStartTheoremProof",
            "0f8e82009378aaf3d4a5311bb352b322775fac9d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Hp x Hx.",
            "VernacExtend",
            "ef4e85f646ec6c3bd386659b7bf515fc9440698e"
        ],
        [
            "apply Rle_trans with (/2 * ulp beta fexp x)%R.",
            "VernacExtend",
            "33a1c6bd6e0e4d281bb865304536ebfb69c7567e"
        ],
        [
            "now apply error_le_half_ulp.",
            "VernacExtend",
            "53498dfb0f551a75a0117e73aba33eb92a0513a2"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "assert (Hx': (x <> 0)%R).",
            "VernacExtend",
            "b857fb3cec10974974e2634788cbf4f61ad8af51"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "apply Rlt_not_le with (2 := Hx).",
            "VernacExtend",
            "03cbb662c8cddb5545e7f2f8f73d8fd25f455194"
        ],
        [
            "rewrite H, Rabs_R0.",
            "VernacExtend",
            "1213f6c48dc580d061f6ca137517489d0d973027"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "rewrite ulp_neq_0; trivial.",
            "VernacExtend",
            "15f172fa8ef4443236132f274b2179ad6f15bde8"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "specialize (He Hx').",
            "VernacExtend",
            "83b5ad72032a587ee981534b4319714d2f93a277"
        ],
        [
            "assert (He': (emin < ex)%Z).",
            "VernacExtend",
            "479202808c448643a65edd114d1538ef4c23ebe0"
        ],
        [
            "apply (lt_bpow beta).",
            "VernacExtend",
            "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
        ],
        [
            "apply Rle_lt_trans with (2 := proj2 He).",
            "VernacExtend",
            "99e0937f6da00ad895d4798516dcd748693e88c2"
        ],
        [
            "exact Hx.",
            "VernacExtend",
            "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
        ],
        [
            "apply Rle_trans with (bpow (-p + 1) * bpow (ex - 1))%R.",
            "VernacExtend",
            "b7556ceb9080c87974bfd30a174e820b1f5064dd"
        ],
        [
            "rewrite <- bpow_plus.",
            "VernacExtend",
            "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "generalize He.",
            "VernacExtend",
            "81146001f6d30f8c555ead8e68bbceaab352b2d0"
        ],
        [
            "apply round_abs_abs...",
            "VernacExtend",
            "e3e7cdd3f71cafba74b853b4d890989bd5c91525"
        ],
        [
            "clear rnd valid_rnd x Hx Hx' He.",
            "VernacExtend",
            "07a577c1e1709e4169f1ec7b21b23cf92fff99f8"
        ],
        [
            "intros rnd valid_rnd x _ Hx.",
            "VernacExtend",
            "29db0c5b0aace7e433548509eb7dabd2e49f4444"
        ],
        [
            "rewrite <- (round_generic beta fexp rnd (bpow (ex - 1))).",
            "VernacExtend",
            "3d3ace798dbc191d6433aee4d4b693172b241da8"
        ],
        [
            "now apply round_le.",
            "VernacExtend",
            "7cf7726fbdb7bf862a84c06ac38f2798bfe95ce5"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "ring_simplify (ex - 1 + 1)%Z.",
            "VernacExtend",
            "e15e6d08a1d7441e056146afec4dcbc55577b581"
        ],
        [
            "generalize (Hmin ex).",
            "VernacExtend",
            "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_round_F2R_emin : (0 < p)%Z -> forall m, let x := F2R (Float beta m emin) in (Rabs (round beta fexp (Znearest choice) x - x) <= /2 * bpow (-p + 1) * Rabs (round beta fexp (Znearest choice) x))%R.",
            "VernacStartTheoremProof",
            "c62766300db7ce3e1779888d1c4990f6551b85a4"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Hp m x.",
            "VernacExtend",
            "84cdf529055e2cdd0be51081fbffa2de6ee28448"
        ],
        [
            "destruct (Req_dec x 0) as [Hx|Hx].",
            "VernacExtend",
            "d83dd8360662d9cf2533c82d6f6df4ee188b8ae9"
        ],
        [
            "rewrite Hx, round_0...",
            "VernacExtend",
            "2812e147924da54ba966c5efe832484a33eb854b"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0.",
            "VernacExtend",
            "a22a98ca758ff0b6b428b2af98fbcc58fb36e386"
        ],
        [
            "rewrite Rmult_0_r.",
            "VernacExtend",
            "b528602a1e730e82684da4ab7d2073ddaf5ebdb0"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply relative_error_N_round with (1 := Hp).",
            "VernacExtend",
            "403cdc67685edbe30886e1b1163474f969eb9622"
        ],
        [
            "unfold x.",
            "VernacExtend",
            "8e116a60402c848e1f7fd0414643cdb94ae22a92"
        ],
        [
            "rewrite <- F2R_Zabs.",
            "VernacExtend",
            "301e349e7bd7d3dddc956a5691145eb2e8b49880"
        ],
        [
            "apply bpow_le_F2R.",
            "VernacExtend",
            "803e6795d722fe9c018879dc40129c1bb37d679b"
        ],
        [
            "apply F2R_lt_reg with beta emin.",
            "VernacExtend",
            "b7ef27fe977b3469383e891330e653916d973749"
        ],
        [
            "rewrite F2R_0, F2R_Zabs.",
            "VernacExtend",
            "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_relative_generic.",
            "VernacEndSegment",
            "7f4440afa95165a00f0d97e057691f91ee5a83b3"
        ],
        [
            "Section Fprop_relative_FLT.",
            "VernacBeginSection",
            "4b08f390b20d070fd8813227659922cea7d79079"
        ],
        [
            "Variable emin prec : Z.",
            "VernacAssumption",
            "3ccc0e6889e5cd3c3d9e4dafff4f8ba78f15de33"
        ],
        [
            "Variable Hp : Zlt 0 prec.",
            "VernacAssumption",
            "13dea6d07bde1f1fdd558d0986881d217bfdda6e"
        ],
        [
            "Lemma relative_error_FLT_aux : forall k, (emin + prec - 1 < k)%Z -> (prec <= k - FLT_exp emin prec k)%Z.",
            "VernacStartTheoremProof",
            "77228e7bd4c6453e16aa949a4d0de46accc4a318"
        ],
        [
            "intros k Hk.",
            "VernacExtend",
            "341b086248172f5c94f8f482bb5f483619b45197"
        ],
        [
            "unfold FLT_exp.",
            "VernacExtend",
            "d4f3b9f7d52d234d511b90934a943354be18194a"
        ],
        [
            "generalize (Zmax_spec (k - prec) emin).",
            "VernacExtend",
            "c61622c166fd524e34ab5d870be0ffb68fb8557f"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Theorem relative_error_FLT : forall x, (bpow (emin + prec - 1) <= Rabs x)%R -> (Rabs (round beta (FLT_exp emin prec) rnd x - x) < bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "206081c9ded5d2375351dc4ef0546f6f830b093d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error with (emin + prec - 1)%Z...",
            "VernacExtend",
            "fd53f16a37a307778dd272fb6349946645e1f263"
        ],
        [
            "apply relative_error_FLT_aux.",
            "VernacExtend",
            "482854cb19fb4caf94d23ba626fc76e04957586e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_FLT_F2R_emin : forall m, let x := F2R (Float beta m emin) in (x <> 0)%R -> (Rabs (round beta (FLT_exp emin prec) rnd x - x) < bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "cec9cded7bb6fecdb037b017400628dfa3064f92"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x Zx.",
            "VernacExtend",
            "07e9f9531a975e75f88a4d79f1da787731280017"
        ],
        [
            "destruct (Rlt_or_le (Rabs x) (bpow (emin + prec - 1))) as [Hx|Hx].",
            "VernacExtend",
            "c116b1d52435578391652905973064ffb325dab5"
        ],
        [
            "rewrite round_generic...",
            "VernacExtend",
            "af5222f20fb69e4892cd9b764ef3997628087b6a"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_opp_r, Rabs_R0.",
            "VernacExtend",
            "b992f52f9e76b9342039bebddb24d23f55a5c69d"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply Rabs_pos_lt.",
            "VernacExtend",
            "6644e63c10a4ebb716152f3789ed696595825302"
        ],
        [
            "apply generic_format_FLT_FIX...",
            "VernacExtend",
            "df3e23007add7bf86f42019505443e0e51dd8586"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rlt_le_trans with (1 := Hx).",
            "VernacExtend",
            "17cfcea7cef1e39ddff4797053bb05abaf553802"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "apply Zle_pred.",
            "VernacExtend",
            "74e60cd76d675249c45bd31401205b5a27bc8eb6"
        ],
        [
            "apply generic_format_FIX.",
            "VernacExtend",
            "3287699ee915054bdde97c78a3f234d1d18972be"
        ],
        [
            "now exists (Float beta m emin).",
            "VernacExtend",
            "0b813af8d5ef205bc4769dba7c15a7e4d4c04b6b"
        ],
        [
            "now apply relative_error_FLT.",
            "VernacExtend",
            "93fae38ce80dc8d42a57da039072c30ce11a99ce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_FLT_F2R_emin_ex : forall m, let x := F2R (Float beta m emin) in exists eps, (Rabs eps < bpow (-prec + 1))%R /\\ round beta (FLT_exp emin prec) rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "92284e557921aed8dcb62e2c2de091958935cf04"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "apply relative_error_lt_conversion...",
            "VernacExtend",
            "a0dc96ac1a3e8c1c072644bf9e645d62a5f1a7c5"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_FLT_F2R_emin.",
            "VernacExtend",
            "e50284ab36ea84cf0c92a049b881b3e0c62c6930"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_FLT_ex : forall x, (bpow (emin + prec - 1) <= Rabs x)%R -> exists eps, (Rabs eps < bpow (-prec + 1))%R /\\ round beta (FLT_exp emin prec) rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "e512452491dba1046c7c20d9ad5a56fd0c08def5"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_lt_conversion...",
            "VernacExtend",
            "a0dc96ac1a3e8c1c072644bf9e645d62a5f1a7c5"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "intros _; now apply relative_error_FLT.",
            "VernacExtend",
            "2addb25bad744878b62dcec23223ad8785d0fadc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable choice : Z -> bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Theorem relative_error_N_FLT : forall x, (bpow (emin + prec - 1) <= Rabs x)%R -> (Rabs (round beta (FLT_exp emin prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "5f2ed7aa2b95803f3d81b226b7f7b5b3b65f4fdc"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_N with (emin + prec - 1)%Z...",
            "VernacExtend",
            "6e182dab3ec39725d8c35c687785b34021e8af30"
        ],
        [
            "apply relative_error_FLT_aux.",
            "VernacExtend",
            "482854cb19fb4caf94d23ba626fc76e04957586e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLT_ex : forall x, (bpow (emin + prec - 1) <= Rabs x)%R -> exists eps, (Rabs eps <= /2 * bpow (-prec + 1))%R /\\ round beta (FLT_exp emin prec) (Znearest choice) x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "b9e38905d59810727e764194c2142bb802c7c578"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_le_conversion...",
            "VernacExtend",
            "a1e945a400848f5b59802c922a6e9f430138dc9e"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_N_FLT.",
            "VernacExtend",
            "70b7569cbfba0a126f9ce10f2dd62d7ee32635cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLT_round : forall x, (bpow (emin + prec - 1) <= Rabs x)%R -> (Rabs (round beta (FLT_exp emin prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs (round beta (FLT_exp emin prec) (Znearest choice) x))%R.",
            "VernacStartTheoremProof",
            "326bad56e888c168395457249deb618c4d8e7f15"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply relative_error_N_round with (emin + prec - 1)%Z...",
            "VernacExtend",
            "60adc1c9571741ee19c6d2eff4b84c5bae87ca1a"
        ],
        [
            "apply relative_error_FLT_aux.",
            "VernacExtend",
            "482854cb19fb4caf94d23ba626fc76e04957586e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLT_F2R_emin : forall m, let x := F2R (Float beta m emin) in (Rabs (round beta (FLT_exp emin prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "3d59fb610f66bc1ee4cff693f75deadd2ec78304"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "destruct (Rlt_or_le (Rabs x) (bpow (emin + prec - 1))) as [Hx|Hx].",
            "VernacExtend",
            "c116b1d52435578391652905973064ffb325dab5"
        ],
        [
            "rewrite round_generic...",
            "VernacExtend",
            "af5222f20fb69e4892cd9b764ef3997628087b6a"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_opp_r, Rabs_R0.",
            "VernacExtend",
            "b992f52f9e76b9342039bebddb24d23f55a5c69d"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply (RinvN_pos 1).",
            "VernacExtend",
            "a4e2b1da8d7e4f108a4aeb472f8cc31ee30226d1"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply generic_format_FLT_FIX...",
            "VernacExtend",
            "df3e23007add7bf86f42019505443e0e51dd8586"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rlt_le_trans with (1 := Hx).",
            "VernacExtend",
            "17cfcea7cef1e39ddff4797053bb05abaf553802"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "apply Zle_pred.",
            "VernacExtend",
            "74e60cd76d675249c45bd31401205b5a27bc8eb6"
        ],
        [
            "apply generic_format_FIX.",
            "VernacExtend",
            "3287699ee915054bdde97c78a3f234d1d18972be"
        ],
        [
            "now exists (Float beta m emin).",
            "VernacExtend",
            "0b813af8d5ef205bc4769dba7c15a7e4d4c04b6b"
        ],
        [
            "now apply relative_error_N_FLT.",
            "VernacExtend",
            "70b7569cbfba0a126f9ce10f2dd62d7ee32635cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLT_F2R_emin_ex : forall m, let x := F2R (Float beta m emin) in exists eps, (Rabs eps <= /2 * bpow (-prec + 1))%R /\\ round beta (FLT_exp emin prec) (Znearest choice) x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "87b8f0f9539eee5b3478e44a48202429451ea83f"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "apply relative_error_le_conversion...",
            "VernacExtend",
            "a1e945a400848f5b59802c922a6e9f430138dc9e"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply (RinvN_pos 1).",
            "VernacExtend",
            "a4e2b1da8d7e4f108a4aeb472f8cc31ee30226d1"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "now apply relative_error_N_FLT_F2R_emin.",
            "VernacExtend",
            "54a4e32d4b7f556ed075b27a383b485ef665ca76"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLT_round_F2R_emin : forall m, let x := F2R (Float beta m emin) in (Rabs (round beta (FLT_exp emin prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs (round beta (FLT_exp emin prec) (Znearest choice) x))%R.",
            "VernacStartTheoremProof",
            "c0e9c36d6f51553f7216a25e011a405c21c49777"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros m x.",
            "VernacExtend",
            "4bd0685a13944a2f9bdd9e3eba948dc74ae31a96"
        ],
        [
            "destruct (Rlt_or_le (Rabs x) (bpow (emin + prec - 1))) as [Hx|Hx].",
            "VernacExtend",
            "c116b1d52435578391652905973064ffb325dab5"
        ],
        [
            "rewrite round_generic...",
            "VernacExtend",
            "af5222f20fb69e4892cd9b764ef3997628087b6a"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_opp_r, Rabs_R0.",
            "VernacExtend",
            "b992f52f9e76b9342039bebddb24d23f55a5c69d"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply (RinvN_pos 1).",
            "VernacExtend",
            "a4e2b1da8d7e4f108a4aeb472f8cc31ee30226d1"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply generic_format_FLT_FIX...",
            "VernacExtend",
            "df3e23007add7bf86f42019505443e0e51dd8586"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rlt_le_trans with (1 := Hx).",
            "VernacExtend",
            "17cfcea7cef1e39ddff4797053bb05abaf553802"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "apply Zle_pred.",
            "VernacExtend",
            "74e60cd76d675249c45bd31401205b5a27bc8eb6"
        ],
        [
            "apply generic_format_FIX.",
            "VernacExtend",
            "3287699ee915054bdde97c78a3f234d1d18972be"
        ],
        [
            "now exists (Float beta m emin).",
            "VernacExtend",
            "0b813af8d5ef205bc4769dba7c15a7e4d4c04b6b"
        ],
        [
            "apply relative_error_N_round with (emin := (emin + prec - 1)%Z)...",
            "VernacExtend",
            "a4f2651b49c55cb78613b4b26f530c0760650288"
        ],
        [
            "apply relative_error_FLT_aux.",
            "VernacExtend",
            "482854cb19fb4caf94d23ba626fc76e04957586e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma error_N_FLT_aux : forall x, (0 < x)%R -> exists eps, exists eta, (Rabs eps <= /2 * bpow (-prec + 1))%R /\\ (Rabs eta <= /2 * bpow (emin))%R /\\ (eps*eta=0)%R /\\ round beta (FLT_exp emin prec) (Znearest choice) x = (x * (1 + eps) + eta)%R.",
            "VernacStartTheoremProof",
            "25620f1cf4eb2dbeb88aa1ceff0cbab62d7f66b7"
        ],
        [
            "intros x Hx2.",
            "VernacExtend",
            "26f8d7a9c72c8ba65d03ee11a372da68e9751939"
        ],
        [
            "case (Rle_or_lt (bpow (emin+prec)) x); intros Hx.",
            "VernacExtend",
            "0274392eef62dde21d58ed6a3b6079c4653b1c9c"
        ],
        [
            "destruct relative_error_N_ex with (FLT_exp emin prec) (emin+prec)%Z prec choice x as (eps,(Heps1,Heps2)).",
            "VernacExtend",
            "5032f519fc8d1118986c664b8dcd9722df9a444c"
        ],
        [
            "now apply FLT_exp_valid.",
            "VernacExtend",
            "d80c036aacf54df9909335ad2c59a86c7b1aa3cf"
        ],
        [
            "intros; unfold FLT_exp.",
            "VernacExtend",
            "2c55c9c7594239bb66bbb04192b457068d2171b0"
        ],
        [
            "rewrite Zmax_left; omega.",
            "VernacExtend",
            "b962c76c0d556bb200c24c186bd6897a11930993"
        ],
        [
            "rewrite Rabs_right;[assumption|apply Rle_ge; now left].",
            "VernacExtend",
            "f63278c5f11dd92d046376cfcb5f9b574fa417d9"
        ],
        [
            "exists eps; exists 0%R.",
            "VernacExtend",
            "08fe708a2f2286b7124397b92e0be117f9b6e2d1"
        ],
        [
            "split;[assumption|split].",
            "VernacExtend",
            "89b3cba276519182efc0b1afa2d925f7ae2de400"
        ],
        [
            "rewrite Rabs_R0; apply Rmult_le_pos.",
            "VernacExtend",
            "be4d3b15ae23e555f61a100002848a44dbb112b5"
        ],
        [
            "apply Rlt_le, pos_half_prf.",
            "VernacExtend",
            "46411de5b55190b5bb9bf4ef268a904ff4c964a6"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "split;[apply Rmult_0_r|idtac].",
            "VernacExtend",
            "e6d2e58fa9ca83701dccb8d2ee063457ead1e006"
        ],
        [
            "now rewrite Rplus_0_r.",
            "VernacExtend",
            "bd7cc343b6d79894f6ce05152dba5e1206f8165d"
        ],
        [
            "exists 0%R; exists (round beta (FLT_exp emin prec) (Znearest choice) x - x)%R.",
            "VernacExtend",
            "ef9e643709fefe558eba1d0fef79749db4405712"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite Rabs_R0; apply Rmult_le_pos.",
            "VernacExtend",
            "be4d3b15ae23e555f61a100002848a44dbb112b5"
        ],
        [
            "apply Rlt_le, pos_half_prf.",
            "VernacExtend",
            "46411de5b55190b5bb9bf4ef268a904ff4c964a6"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (/2*ulp beta (FLT_exp emin prec) x)%R.",
            "VernacExtend",
            "262d6bc071d9f759049cbfd48e413422b005efbe"
        ],
        [
            "apply error_le_half_ulp.",
            "VernacExtend",
            "d2a9c9c9a70069398a25eb521cb99b312157fdba"
        ],
        [
            "now apply FLT_exp_valid.",
            "VernacExtend",
            "d80c036aacf54df9909335ad2c59a86c7b1aa3cf"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rlt_le, pos_half_prf.",
            "VernacExtend",
            "46411de5b55190b5bb9bf4ef268a904ff4c964a6"
        ],
        [
            "rewrite ulp_neq_0.",
            "VernacExtend",
            "b4bcababf374cfa2a41fe0c19161a11c28a11d32"
        ],
        [
            "2: now apply Rgt_not_eq.",
            "VernacExtend",
            "31c101b0e129e41611531a67652122e8e2da84a6"
        ],
        [
            "apply bpow_le.",
            "VernacExtend",
            "9264f19c0062a0a711efc832825406a995342e90"
        ],
        [
            "unfold FLT_exp, canonic_exp.",
            "VernacExtend",
            "652d6fe983a22ca39fdec683348d0cc24d6ec4ea"
        ],
        [
            "rewrite Zmax_right.",
            "VernacExtend",
            "e6855303b4609783fb408f25a41a130d3b47b5d2"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct (ln_beta beta x) as (e,He); simpl.",
            "VernacExtend",
            "a77119bf270c9ca756e41a97e3305b575f82dce7"
        ],
        [
            "assert (e-1 < emin+prec)%Z.",
            "VernacExtend",
            "4b577af0d53b6ac9db0764f87cda239922b85657"
        ],
        [
            "apply (lt_bpow beta).",
            "VernacExtend",
            "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
        ],
        [
            "apply Rle_lt_trans with (2:=Hx).",
            "VernacExtend",
            "6f4ed50de93b15e6078a10a54947a690658815ec"
        ],
        [
            "rewrite <- (Rabs_right x).",
            "VernacExtend",
            "60f34e0291a30450a684b8bb85f8814c005fff83"
        ],
        [
            "apply He; auto with real.",
            "VernacExtend",
            "bba77df39a741f4199ff8443bc878fab3c5fa012"
        ],
        [
            "apply Rle_ge; now left.",
            "VernacExtend",
            "ead6b1f12a6932914cd8190f074f6a72780717de"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "split;ring.",
            "VernacExtend",
            "02a9c4bd3a1eb34eec905b1c3602ad7794d87c9e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_relative_FLT.",
            "VernacEndSegment",
            "add8be66dacf5e903aeb0728dd79f00df301a000"
        ],
        [
            "Lemma error_N_FLT : forall (emin prec : Z), (0 < prec)%Z -> forall (choice : Z -> bool), forall (x : R), exists eps eta : R, (Rabs eps <= /2 * bpow (-prec + 1))%R /\\ (Rabs eta <= /2 * bpow emin)%R /\\ (eps * eta = 0)%R /\\ (round beta (FLT_exp emin prec) (Znearest choice) x = x * (1 + eps) + eta)%R.",
            "VernacStartTheoremProof",
            "a898a19f731d0582358a0776e4b4853f6402afee"
        ],
        [
            "intros emin prec Pprec choice x.",
            "VernacExtend",
            "860bc943b9f6b62061de93470d0760ebc92b2886"
        ],
        [
            "destruct (Rtotal_order x 0) as [Nx|[Zx|Px]].",
            "VernacExtend",
            "9acba0d2d1866c5d4cc50bb2ed6c0d3090198dfa"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Pmx : (0 < - x)%R).",
            "VernacExtend",
            "11455142320c3b561ddf1c7cf8b3d43cafd55342"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite <- Ropp_0; apply Ropp_lt_contravar.",
            "VernacExtend",
            "1d6157e3dadeffe98cb80f6b7aa4d67d4d34037f"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "destruct (error_N_FLT_aux emin prec Pprec (fun t : Z => negb (choice (- (t + 1))%Z)) (- x)%R Pmx) as (d,(e,(Hd,(He,(Hde,Hr))))).",
            "VernacExtend",
            "df83c8d2785b6c8399d550470cce1e4ebe00a9ee"
        ],
        [
            "exists d; exists (- e)%R; split; [exact Hd|split; [|split]].",
            "VernacExtend",
            "629fc1c2f8c4402f4aa57f2cb4aa357e94983529"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite Rabs_Ropp.",
            "VernacExtend",
            "20b628fb90f8e71247184a9caa17c8480951b1d2"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite Ropp_mult_distr_r_reverse, <- Ropp_0; apply f_equal.",
            "VernacExtend",
            "022392ee3b31633947feaef75fc7f4853c22ec92"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rewrite <- (Ropp_involutive x), round_N_opp.",
            "VernacExtend",
            "76227f68ba825bcd3a2dfdb17a740a56cfef035f"
        ],
        [
            "now rewrite Ropp_mult_distr_l_reverse, <- Ropp_plus_distr; apply f_equal.",
            "VernacExtend",
            "5ae8e98dfa13fbf2051b1c03c3e8458252239819"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "assert (Ph2 : (0 <= / 2)%R).",
            "VernacExtend",
            "8d6e01272e5dac18cbf20f671092bd3e59a235d7"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "apply (Rmult_le_reg_l 2 _ _ Rlt_0_2).",
            "VernacExtend",
            "f51c634ba0387e943a6ea19b808af5f28061803e"
        ],
        [
            "rewrite Rmult_0_r, Rinv_r; [exact Rle_0_1|].",
            "VernacExtend",
            "623fa5f2877a11b428b3c46d653aef02310b85d7"
        ],
        [
            "apply Rgt_not_eq, Rlt_gt, Rlt_0_2.",
            "VernacExtend",
            "79720c22ade72265a17d1a3b665b9e8485258613"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "exists 0%R; exists 0%R; rewrite Zx; split; [|split; [|split]].",
            "VernacExtend",
            "863edad3ed71c7e488f69affb011baee7362b272"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite Rabs_R0; apply Rmult_le_pos; [|apply bpow_ge_0].",
            "VernacExtend",
            "af928ae97f72cc8a0409f724f5722e0110c22388"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite Rabs_R0; apply Rmult_le_pos; [|apply bpow_ge_0].",
            "VernacExtend",
            "af928ae97f72cc8a0409f724f5722e0110c22388"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "now rewrite Rmult_0_l.",
            "VernacExtend",
            "408137585d2d576cda63de831cb2ec1fdb0b837a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "now rewrite Rmult_0_l, Rplus_0_l, round_0; [|apply valid_rnd_N].",
            "VernacExtend",
            "d55219543a91822598ce9baecf4f6a1d9e9c0afc"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "now apply error_N_FLT_aux.",
            "VernacExtend",
            "3ca1ec2bdf0c256612f2b69378c6e2c83dce2cbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Fprop_relative_FLX.",
            "VernacBeginSection",
            "1009e1f0303975b0f59f8ef09858ad175ac132f0"
        ],
        [
            "Variable prec : Z.",
            "VernacAssumption",
            "2ea8aff61629f0d1c1489d8413fdc04d11ea278f"
        ],
        [
            "Variable Hp : Zlt 0 prec.",
            "VernacAssumption",
            "13dea6d07bde1f1fdd558d0986881d217bfdda6e"
        ],
        [
            "Lemma relative_error_FLX_aux : forall k, (prec <= k - FLX_exp prec k)%Z.",
            "VernacStartTheoremProof",
            "9abf5baa00fe8d4b19b2a2a72fbe81bbafe21b6e"
        ],
        [
            "intros k.",
            "VernacExtend",
            "494800a8d2673abb596b8be5a6bf555ab7d2a2fb"
        ],
        [
            "unfold FLX_exp.",
            "VernacExtend",
            "71070950ec4cced4c2013495eecfd09baee01732"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable rnd : R -> Z.",
            "VernacAssumption",
            "5bdfd3c40d2aa8ce2b985c638278827c00ad436e"
        ],
        [
            "Context { valid_rnd : Valid_rnd rnd }.",
            "VernacContext",
            "49759e314a3bb9ba66adea1eb824227c77e97e4c"
        ],
        [
            "Theorem relative_error_FLX : forall x, (x <> 0)%R -> (Rabs (round beta (FLX_exp prec) rnd x - x) < bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "e6f8ac28ce4d28907c316f5a71e7a22166716efb"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "specialize (He Hx).",
            "VernacExtend",
            "3e114831cf0cdc77e47c1034e6152a15e82edfea"
        ],
        [
            "apply relative_error with (ex - 1)%Z...",
            "VernacExtend",
            "65684262071369e4c66172c79e587cdbb90b8254"
        ],
        [
            "intros k _.",
            "VernacExtend",
            "86af8f94af2e75c87e4ef8f05224038499dd87c8"
        ],
        [
            "apply relative_error_FLX_aux.",
            "VernacExtend",
            "c87d4176c7a01259c29890c15be089313566216d"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_FLX_ex : forall x, exists eps, (Rabs eps < bpow (-prec + 1))%R /\\ round beta (FLX_exp prec) rnd x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "7b17ee9a7f4a1e78b0c29b931bb0bfea3c688653"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "apply relative_error_lt_conversion...",
            "VernacExtend",
            "a0dc96ac1a3e8c1c072644bf9e645d62a5f1a7c5"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_FLX.",
            "VernacExtend",
            "64972e14b1db7ba2469f33c8eb1d4b901fea5858"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_FLX_round : forall x, (x <> 0)%R -> (Rabs (round beta (FLX_exp prec) rnd x - x) < bpow (-prec + 1) * Rabs (round beta (FLX_exp prec) rnd x))%R.",
            "VernacStartTheoremProof",
            "06a2e1ab271d79fa423c9ba0a82b564e1c5d4a54"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "specialize (He Hx).",
            "VernacExtend",
            "3e114831cf0cdc77e47c1034e6152a15e82edfea"
        ],
        [
            "apply relative_error_round with (ex - 1)%Z...",
            "VernacExtend",
            "b0ec39ad956909808329a742626b53310ad28d1f"
        ],
        [
            "intros k _.",
            "VernacExtend",
            "86af8f94af2e75c87e4ef8f05224038499dd87c8"
        ],
        [
            "apply relative_error_FLX_aux.",
            "VernacExtend",
            "c87d4176c7a01259c29890c15be089313566216d"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable choice : Z -> bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Theorem relative_error_N_FLX : forall x, (Rabs (round beta (FLX_exp prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs x)%R.",
            "VernacStartTheoremProof",
            "4d0ab9e94f3e0eaadd219aca6a1463cd61c99c1b"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "destruct (Req_dec x 0) as [Hx|Hx].",
            "VernacExtend",
            "d83dd8360662d9cf2533c82d6f6df4ee188b8ae9"
        ],
        [
            "rewrite Hx, round_0...",
            "VernacExtend",
            "2812e147924da54ba966c5efe832484a33eb854b"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0.",
            "VernacExtend",
            "a22a98ca758ff0b6b428b2af98fbcc58fb36e386"
        ],
        [
            "rewrite Rmult_0_r.",
            "VernacExtend",
            "b528602a1e730e82684da4ab7d2073ddaf5ebdb0"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "specialize (He Hx).",
            "VernacExtend",
            "3e114831cf0cdc77e47c1034e6152a15e82edfea"
        ],
        [
            "apply relative_error_N with (ex - 1)%Z...",
            "VernacExtend",
            "948371dfd0e1be9657059b69330b556f5a500f38"
        ],
        [
            "intros k _.",
            "VernacExtend",
            "86af8f94af2e75c87e4ef8f05224038499dd87c8"
        ],
        [
            "apply relative_error_FLX_aux.",
            "VernacExtend",
            "c87d4176c7a01259c29890c15be089313566216d"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLX_ex : forall x, exists eps, (Rabs eps <= /2 * bpow (-prec + 1))%R /\\ round beta (FLX_exp prec) (Znearest choice) x = (x * (1 + eps))%R.",
            "VernacStartTheoremProof",
            "f2465a2bf740f42b4e1e70f2184c52190e1c471c"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "apply relative_error_le_conversion...",
            "VernacExtend",
            "a1e945a400848f5b59802c922a6e9f430138dc9e"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (Z2R_lt 0 2).",
            "VernacExtend",
            "d115cb8bbe9692198c1512828eb7171baa80bc9e"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "now apply relative_error_N_FLX.",
            "VernacExtend",
            "228baefa74de1db6d17d22bef743fed270b937cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem relative_error_N_FLX_round : forall x, (Rabs (round beta (FLX_exp prec) (Znearest choice) x - x) <= /2 * bpow (-prec + 1) * Rabs (round beta (FLX_exp prec) (Znearest choice) x))%R.",
            "VernacStartTheoremProof",
            "53f1c98d1a1f2afba478540ea7978936601ccd20"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "destruct (Req_dec x 0) as [Hx|Hx].",
            "VernacExtend",
            "d83dd8360662d9cf2533c82d6f6df4ee188b8ae9"
        ],
        [
            "rewrite Hx, round_0...",
            "VernacExtend",
            "2812e147924da54ba966c5efe832484a33eb854b"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0.",
            "VernacExtend",
            "a22a98ca758ff0b6b428b2af98fbcc58fb36e386"
        ],
        [
            "rewrite Rmult_0_r.",
            "VernacExtend",
            "b528602a1e730e82684da4ab7d2073ddaf5ebdb0"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "destruct (ln_beta beta x) as (ex, He).",
            "VernacExtend",
            "c9e86093c3be8ec240600e91efe15e45185c4d0b"
        ],
        [
            "specialize (He Hx).",
            "VernacExtend",
            "3e114831cf0cdc77e47c1034e6152a15e82edfea"
        ],
        [
            "apply relative_error_N_round with (ex - 1)%Z.",
            "VernacExtend",
            "9928a43bf36cd27566127f9e743b4810b080eba1"
        ],
        [
            "now apply FLX_exp_valid.",
            "VernacExtend",
            "2b59a8de352db0c00e12faaef6ef422a86f2eb73"
        ],
        [
            "intros k _.",
            "VernacExtend",
            "86af8f94af2e75c87e4ef8f05224038499dd87c8"
        ],
        [
            "apply relative_error_FLX_aux.",
            "VernacExtend",
            "c87d4176c7a01259c29890c15be089313566216d"
        ],
        [
            "exact Hp.",
            "VernacExtend",
            "be341283dbc3e7d951878f8da53eeea02d5c4695"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fprop_relative_FLX.",
            "VernacEndSegment",
            "016c7caa7b97a5db0ba9c0702b6f7d879edc7820"
        ],
        [
            "End Fprop_relative.",
            "VernacEndSegment",
            "5814e608cb18307774c98bf4681818196b16b112"
        ]
    ],
    "proofs": [
        {
            "name": "relative_error_F2R_emin",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "intros m x Hx.",
                        "VernacExtend",
                        "74fd973163ac482d0248fd6ffd9f2c39a304e45e"
                    ]
                },
                {
                    "command": [
                        "apply relative_error.",
                        "VernacExtend",
                        "fcb684c1b44247c1199af4fb67523c09ef97fe83"
                    ]
                },
                {
                    "command": [
                        "unfold x.",
                        "VernacExtend",
                        "8e116a60402c848e1f7fd0414643cdb94ae22a92"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_Zabs.",
                        "VernacExtend",
                        "301e349e7bd7d3dddc956a5691145eb2e8b49880"
                    ]
                },
                {
                    "command": [
                        "apply bpow_le_F2R.",
                        "VernacExtend",
                        "803e6795d722fe9c018879dc40129c1bb37d679b"
                    ]
                },
                {
                    "command": [
                        "apply F2R_lt_reg with beta emin.",
                        "VernacExtend",
                        "b7ef27fe977b3469383e891330e653916d973749"
                    ]
                },
                {
                    "command": [
                        "rewrite F2R_0, F2R_Zabs.",
                        "VernacExtend",
                        "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
                    ]
                },
                {
                    "command": [
                        "now apply Rabs_pos_lt.",
                        "VernacExtend",
                        "6644e63c10a4ebb716152f3789ed696595825302"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relative_error_round_F2R_emin",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros Hp m x Hx.",
                        "VernacExtend",
                        "7ce177d02ff12fdc903175711a523d95b0e8817e"
                    ]
                },
                {
                    "command": [
                        "apply relative_error_round.",
                        "VernacExtend",
                        "2ee31d5908fadce575ec479fc7612cc30bd87cf7"
                    ]
                },
                {
                    "command": [
                        "exact Hp.",
                        "VernacExtend",
                        "be341283dbc3e7d951878f8da53eeea02d5c4695"
                    ]
                },
                {
                    "command": [
                        "unfold x.",
                        "VernacExtend",
                        "8e116a60402c848e1f7fd0414643cdb94ae22a92"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_Zabs.",
                        "VernacExtend",
                        "301e349e7bd7d3dddc956a5691145eb2e8b49880"
                    ]
                },
                {
                    "command": [
                        "apply bpow_le_F2R.",
                        "VernacExtend",
                        "803e6795d722fe9c018879dc40129c1bb37d679b"
                    ]
                },
                {
                    "command": [
                        "apply F2R_lt_reg with beta emin.",
                        "VernacExtend",
                        "b7ef27fe977b3469383e891330e653916d973749"
                    ]
                },
                {
                    "command": [
                        "rewrite F2R_0, F2R_Zabs.",
                        "VernacExtend",
                        "b0db37ce9cab0757ae2a89c2a3514380eb0526aa"
                    ]
                },
                {
                    "command": [
                        "now apply Rabs_pos_lt.",
                        "VernacExtend",
                        "6644e63c10a4ebb716152f3789ed696595825302"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relative_error_N",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "intros x Hx.",
                        "VernacExtend",
                        "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (/2 * ulp beta fexp x)%R.",
                        "VernacExtend",
                        "33a1c6bd6e0e4d281bb865304536ebfb69c7567e"
                    ]
                },
                {
                    "command": [
                        "now apply error_le_half_ulp.",
                        "VernacExtend",
                        "53498dfb0f551a75a0117e73aba33eb92a0513a2"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "now apply (Z2R_lt 0 2).",
                        "VernacExtend",
                        "d115cb8bbe9692198c1512828eb7171baa80bc9e"
                    ]
                },
                {
                    "command": [
                        "assert (Hx': (x <> 0)%R).",
                        "VernacExtend",
                        "b857fb3cec10974974e2634788cbf4f61ad8af51"
                    ]
                },
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le with (2 := Hx).",
                        "VernacExtend",
                        "03cbb662c8cddb5545e7f2f8f73d8fd25f455194"
                    ]
                },
                {
                    "command": [
                        "rewrite H, Rabs_R0.",
                        "VernacExtend",
                        "1213f6c48dc580d061f6ca137517489d0d973027"
                    ]
                },
                {
                    "command": [
                        "apply bpow_gt_0.",
                        "VernacExtend",
                        "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
                    ]
                },
                {
                    "command": [
                        "rewrite ulp_neq_0; trivial.",
                        "VernacExtend",
                        "15f172fa8ef4443236132f274b2179ad6f15bde8"
                    ]
                },
                {
                    "command": [
                        "unfold canonic_exp.",
                        "VernacExtend",
                        "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
                    ]
                },
                {
                    "command": [
                        "destruct (ln_beta beta x) as (ex, He).",
                        "VernacExtend",
                        "c9e86093c3be8ec240600e91efe15e45185c4d0b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "specialize (He Hx').",
                        "VernacExtend",
                        "83b5ad72032a587ee981534b4319714d2f93a277"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (bpow (-p + 1) * bpow (ex - 1))%R.",
                        "VernacExtend",
                        "b7556ceb9080c87974bfd30a174e820b1f5064dd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- bpow_plus.",
                        "VernacExtend",
                        "9ebeb3f5611fe78274a1e2e0131c7f7ed66e1cfc"
                    ]
                },
                {
                    "command": [
                        "apply bpow_le.",
                        "VernacExtend",
                        "9264f19c0062a0a711efc832825406a995342e90"
                    ]
                },
                {
                    "command": [
                        "assert (emin < ex)%Z.",
                        "VernacExtend",
                        "e182a4f297a97eb98babb3369ce15c6c2ff2f444"
                    ]
                },
                {
                    "command": [
                        "apply (lt_bpow beta).",
                        "VernacExtend",
                        "39756c21a1c38c15bfdc1abca446efcd43b5bc05"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 := proj2 He).",
                        "VernacExtend",
                        "99e0937f6da00ad895d4798516dcd748693e88c2"
                    ]
                },
                {
                    "command": [
                        "exact Hx.",
                        "VernacExtend",
                        "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
                    ]
                },
                {
                    "command": [
                        "generalize (Hmin ex).",
                        "VernacExtend",
                        "a50e6278e929402dbd9d9a08bdfa1712661cfe61"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply bpow_ge_0.",
                        "VernacExtend",
                        "21ebde0be0a631dfd60f8ca27e963cec55b52605"
                    ]
                },
                {
                    "command": [
                        "apply He.",
                        "VernacExtend",
                        "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relative_error_FLT_aux",
            "line_nb": 288,
            "steps": [
                {
                    "command": [
                        "intros k Hk.",
                        "VernacExtend",
                        "341b086248172f5c94f8f482bb5f483619b45197"
                    ]
                },
                {
                    "command": [
                        "unfold FLT_exp.",
                        "VernacExtend",
                        "d4f3b9f7d52d234d511b90934a943354be18194a"
                    ]
                },
                {
                    "command": [
                        "generalize (Zmax_spec (k - prec) emin).",
                        "VernacExtend",
                        "c61622c166fd524e34ab5d870be0ffb68fb8557f"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relative_error_FLX_aux",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "intros k.",
                        "VernacExtend",
                        "494800a8d2673abb596b8be5a6bf555ab7d2a2fb"
                    ]
                },
                {
                    "command": [
                        "unfold FLX_exp.",
                        "VernacExtend",
                        "71070950ec4cced4c2013495eecfd09baee01732"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}