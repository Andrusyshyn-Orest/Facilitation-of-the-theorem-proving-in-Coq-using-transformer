{
    "filename": "flocq/Appli/Fappli_rnd_odd.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Reals Psatz.",
            "VernacRequire",
            "aa71e9955fdefb9d3b0e58d51406978b644e60c0"
        ],
        [
            "Require Import Fcore.",
            "VernacRequire",
            "0726413a0cd1e00c4c23af78515a8bb580c73ed5"
        ],
        [
            "Require Import Fcalc_ops.",
            "VernacRequire",
            "3d12d40a8c239f3c3d26da4f928dea2f7d34d6d3"
        ],
        [
            "Definition Zrnd_odd x := match Req_EM_T x (Z2R (Zfloor x)) with | left _ => Zfloor x | right _ => match (Zeven (Zfloor x)) with | true => Zceil x | false => Zfloor x end end.",
            "VernacDefinition",
            "1104f6708148dfa9b35664b62d745a1a9c7650aa"
        ],
        [
            "Global Instance valid_rnd_odd : Valid_rnd Zrnd_odd.",
            "VernacInstance",
            "8d5644aebf8650bc4696e066f7fefcf44f954e19"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros x y Hxy.",
            "VernacExtend",
            "44bac6ec66dd54c6c1d048cac4ab63f977af73cf"
        ],
        [
            "assert (Zfloor x <= Zrnd_odd y)%Z.",
            "VernacExtend",
            "da78d55f0e635b4c4c6f9c20d5328eb8dd3a20f3"
        ],
        [
            "apply Zle_trans with (Zfloor y).",
            "VernacExtend",
            "62e43842169a3281ecedb05270efbda168c8b275"
        ],
        [
            "now apply Zfloor_le.",
            "VernacExtend",
            "4cc0f3aa133838b48df9664cf5449b7231dcd8cd"
        ],
        [
            "unfold Zrnd_odd; destruct (Req_EM_T y (Z2R (Zfloor y))).",
            "VernacExtend",
            "c44a11c3fb23489b7b32efb2d187c4a78c89d3aa"
        ],
        [
            "now apply Zle_refl.",
            "VernacExtend",
            "5a43afa8bced0814fd8d82eb18ef369a7d631b31"
        ],
        [
            "case (Zeven (Zfloor y)).",
            "VernacExtend",
            "9b5ee12f5a8309f94de370a273bd66f0bd5be6c7"
        ],
        [
            "apply le_Z2R.",
            "VernacExtend",
            "1945b4c25beb86c99a51fb31bc5e89da8f443292"
        ],
        [
            "apply Rle_trans with y.",
            "VernacExtend",
            "0416b0652ba97d1ed4ecb49cb84c9d97eee8bce5"
        ],
        [
            "apply Zfloor_lb.",
            "VernacExtend",
            "d4214e2694c0df6f781b41a07d34ed64a1ccfe1d"
        ],
        [
            "apply Zceil_ub.",
            "VernacExtend",
            "31edc0840e36e6b04e75719515ba742855146abc"
        ],
        [
            "now apply Zle_refl.",
            "VernacExtend",
            "5a43afa8bced0814fd8d82eb18ef369a7d631b31"
        ],
        [
            "unfold Zrnd_odd at 1.",
            "VernacExtend",
            "bff071cf31f18bdcdb3d4a009ad0249c721ac8e3"
        ],
        [
            "destruct (Req_EM_T x (Z2R (Zfloor x))) as [Hx|Hx].",
            "VernacExtend",
            "4f242b3689a39669ddb677e6966939fb31fd79fb"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "case_eq (Zeven (Zfloor x)); intros Hx2.",
            "VernacExtend",
            "297981c32754e391016766e8513f66b3cb0c0840"
        ],
        [
            "2: apply H.",
            "VernacExtend",
            "d68ca3163bed92fea701ea0e7330cbb605c3b245"
        ],
        [
            "unfold Zrnd_odd; destruct (Req_EM_T y (Z2R (Zfloor y))) as [Hy|Hy].",
            "VernacExtend",
            "56d34d645cf6ff77f73305b125fc45c2fd6d1d60"
        ],
        [
            "apply Zceil_glb.",
            "VernacExtend",
            "524f59be3c7aaf779be7bc5579e0b8cbb0c3a327"
        ],
        [
            "now rewrite <- Hy.",
            "VernacExtend",
            "ca687e4488ba1ec59546f2e3eb9d9fd518374ce7"
        ],
        [
            "case_eq (Zeven (Zfloor y)); intros Hy2.",
            "VernacExtend",
            "3ac885687bdc9cd90521cea70ea4a06d9759c332"
        ],
        [
            "now apply Zceil_le.",
            "VernacExtend",
            "1db17e1169b75b1250fd3c02d2b7732ff8884a19"
        ],
        [
            "apply Zceil_glb.",
            "VernacExtend",
            "524f59be3c7aaf779be7bc5579e0b8cbb0c3a327"
        ],
        [
            "assert (H0:(Zfloor x <= Zfloor y)%Z) by now apply Zfloor_le.",
            "VernacExtend",
            "baf0223992115d1130670b9af296bde4e4877dc2"
        ],
        [
            "case (Zle_lt_or_eq _ _ H0); intros H1.",
            "VernacExtend",
            "2b2aab5fb685890b25b4418fd2801e270c7e247f"
        ],
        [
            "apply Rle_trans with (1:=Zceil_ub _).",
            "VernacExtend",
            "0cda8e195839aa47132d5822141b1913012483f5"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "apply Z2R_le; omega.",
            "VernacExtend",
            "48e544720b256ddb4a7e9f49475d76732a118d7b"
        ],
        [
            "now apply sym_not_eq.",
            "VernacExtend",
            "e6f5fa16ec765cda93cf17444b5b6ced93cbe6d4"
        ],
        [
            "contradict Hy2.",
            "VernacExtend",
            "b11ceab93c996ff5efa899831c9ce2c25320e413"
        ],
        [
            "rewrite <- H1, Hx2; discriminate.",
            "VernacExtend",
            "2b80532dde90128c6d91aa588c7186ad8904df23"
        ],
        [
            "intros n; unfold Zrnd_odd.",
            "VernacExtend",
            "c491c83e2cad02ed03f0aa71634399769a6c1cee"
        ],
        [
            "rewrite Zfloor_Z2R, Zceil_Z2R.",
            "VernacExtend",
            "4ce96ea848202cd33a6ed891854ed930debabafa"
        ],
        [
            "destruct (Req_EM_T (Z2R n) (Z2R n)); trivial.",
            "VernacExtend",
            "15a65537c87789c3ac9d6370626974996300b4d3"
        ],
        [
            "case (Zeven n); trivial.",
            "VernacExtend",
            "d37755e037f93ec2ecec5501178567ddf308e14d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zrnd_odd_Zodd: forall x, x <> (Z2R (Zfloor x)) -> (Zeven (Zrnd_odd x)) = false.",
            "VernacStartTheoremProof",
            "37f10f19cc99d82435e104b7dfc54b123ded8337"
        ],
        [
            "intros x Hx; unfold Zrnd_odd.",
            "VernacExtend",
            "af8d96ca7a3562e3d7f8142cbe0b747bf67c8c04"
        ],
        [
            "destruct (Req_EM_T x (Z2R (Zfloor x))) as [H|H].",
            "VernacExtend",
            "5dbcfc92739e75d9d9a4c1699e007b75e003abfe"
        ],
        [
            "now contradict H.",
            "VernacExtend",
            "88ebc36abd3f2c9e77ebd18f0d0897ac117f885c"
        ],
        [
            "case_eq (Zeven (Zfloor x)).",
            "VernacExtend",
            "5664dc9979887cb10d6471efa207d4a1096d22e5"
        ],
        [
            "intros H'.",
            "VernacExtend",
            "d7903418c9c01fda86d2cc847b39424719d50154"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Zeven_plus, H'.",
            "VernacExtend",
            "dc6bcead238da922291f1bb136a397d383c90254"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "now apply sym_not_eq.",
            "VernacExtend",
            "e6f5fa16ec765cda93cf17444b5b6ced93cbe6d4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Fcore_rnd_odd.",
            "VernacBeginSection",
            "49f9cc127671961383b8279eeb63496c5425b520"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Context { exists_NE_ : Exists_NE beta fexp }.",
            "VernacContext",
            "ec78b1f5f8c514d3557b72255ee413d561363d1d"
        ],
        [
            "Notation format := (generic_format beta fexp).",
            "VernacSyntacticDefinition",
            "8b86a2eae51a580a8d20d872218c8ad0ed495025"
        ],
        [
            "Notation canonic := (canonic beta fexp).",
            "VernacSyntacticDefinition",
            "59771e26db0c017b6c1b1cb35cb90133eea72133"
        ],
        [
            "Notation cexp := (canonic_exp beta fexp).",
            "VernacSyntacticDefinition",
            "d4aa107fad2e6e34546c51778bda03e0653e29eb"
        ],
        [
            "Definition Rnd_odd_pt (x f : R) := format f /\\ ((f = x)%R \\/ ((Rnd_DN_pt format x f \\/ Rnd_UP_pt format x f) /\\ exists g : float beta, f = F2R g /\\ canonic g /\\ Zeven (Fnum g) = false)).",
            "VernacDefinition",
            "b96146288136462295107a4194b41a84109b04f4"
        ],
        [
            "Definition Rnd_odd (rnd : R -> R) := forall x : R, Rnd_odd_pt x (rnd x).",
            "VernacDefinition",
            "1ddc59006461aabc68bfc83a3a7a2265c5585c5d"
        ],
        [
            "Theorem Rnd_odd_pt_sym : forall x f : R, Rnd_odd_pt (-x) (-f) -> Rnd_odd_pt x f.",
            "VernacStartTheoremProof",
            "a6dcbf590a630dd7f7a0f3d4f131108bd3c5e439"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x f (H1,H2).",
            "VernacExtend",
            "9658c5a26fa0189117b549ef70155a53f79e360e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "replace f with (-(-f))%R by ring.",
            "VernacExtend",
            "53c7697ed49e97e50260309ee543eb4681ef088a"
        ],
        [
            "now apply generic_format_opp.",
            "VernacExtend",
            "9854a3077e0909e22e2b3e762d2cc1450d4abf80"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "replace f with (-(-f))%R by ring.",
            "VernacExtend",
            "53c7697ed49e97e50260309ee543eb4681ef088a"
        ],
        [
            "rewrite H; ring.",
            "VernacExtend",
            "0b04b537a97febaaaf64f5bd658c042a3bab338f"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "destruct H as (H2,(g,(Hg1,(Hg2,Hg3)))).",
            "VernacExtend",
            "dcaf0e10e859d223131c4f413caf704c07c837af"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "replace f with (-(-f))%R by ring.",
            "VernacExtend",
            "53c7697ed49e97e50260309ee543eb4681ef088a"
        ],
        [
            "replace x with (-(-x))%R by ring.",
            "VernacExtend",
            "0db64e1d0a6732d21b08c103848365430dfd3ce4"
        ],
        [
            "apply Rnd_DN_UP_pt_sym...",
            "VernacExtend",
            "6f2c5e8b8b8387aa4a5d415b92d593011d8406ba"
        ],
        [
            "apply generic_format_opp.",
            "VernacExtend",
            "62be59b59957b39ddc7a6a91ae10b7eda813132a"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "replace f with (-(-f))%R by ring.",
            "VernacExtend",
            "53c7697ed49e97e50260309ee543eb4681ef088a"
        ],
        [
            "replace x with (-(-x))%R by ring.",
            "VernacExtend",
            "0db64e1d0a6732d21b08c103848365430dfd3ce4"
        ],
        [
            "apply Rnd_UP_DN_pt_sym...",
            "VernacExtend",
            "6e6cef89e3388747c8de4fa2ad4d7908fa9d6d9b"
        ],
        [
            "apply generic_format_opp.",
            "VernacExtend",
            "62be59b59957b39ddc7a6a91ae10b7eda813132a"
        ],
        [
            "exists (Float beta (-Fnum g) (Fexp g)).",
            "VernacExtend",
            "7b30f1bdb5aba07a40030305abd3b7074050eae0"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite F2R_Zopp.",
            "VernacExtend",
            "14dc9704af59104fbc8331cc5f22daa96d394349"
        ],
        [
            "replace f with (-(-f))%R by ring.",
            "VernacExtend",
            "53c7697ed49e97e50260309ee543eb4681ef088a"
        ],
        [
            "rewrite Hg1; reflexivity.",
            "VernacExtend",
            "2bf6cb20b7b9de7c08b6466ea8bd94e9ffed0383"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "now apply canonic_opp.",
            "VernacExtend",
            "ee282820a596fb1c9bda98e046c60238bf4f68ea"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite Zeven_opp.",
            "VernacExtend",
            "67ccc544e32ea12c308342776769fb150e16edb4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_odd_opp : forall x, (round beta fexp Zrnd_odd (-x) = (- round beta fexp Zrnd_odd x))%R.",
            "VernacStartTheoremProof",
            "dc532d3b86eaec37ab75b6da2513f37baf839d90"
        ],
        [
            "intros x; unfold round.",
            "VernacExtend",
            "c98590148e6a6bcc0064182a88e56a3fdac48203"
        ],
        [
            "rewrite <- F2R_Zopp.",
            "VernacExtend",
            "fee744a8cf0293b57e4bea5c81b22afef33baeb7"
        ],
        [
            "unfold F2R; simpl.",
            "VernacExtend",
            "a8b73d273d1c692e5deb932d4bd557029927ed13"
        ],
        [
            "apply f_equal2; apply f_equal.",
            "VernacExtend",
            "d59dca94e64d553630e3912335b70a9e094cd0eb"
        ],
        [
            "rewrite scaled_mantissa_opp.",
            "VernacExtend",
            "88c0a15c728ca1f5747eb5ebfaddf2989585bdfd"
        ],
        [
            "generalize (scaled_mantissa beta fexp x); intros r.",
            "VernacExtend",
            "6341aa3c8aaf65561dab964374485c8438afaba0"
        ],
        [
            "unfold Zrnd_odd.",
            "VernacExtend",
            "f9b93684d423c7233c8d7582ba65c171d9fe1bc9"
        ],
        [
            "case (Req_EM_T (- r) (Z2R (Zfloor (- r)))).",
            "VernacExtend",
            "97886c8a2f96012e97b1e9e3014e59e512c714fb"
        ],
        [
            "case (Req_EM_T r (Z2R (Zfloor r))).",
            "VernacExtend",
            "f3a721fa6e496c925c73a6e98a84006e446b8e0b"
        ],
        [
            "intros Y1 Y2.",
            "VernacExtend",
            "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
        ],
        [
            "apply eq_Z2R.",
            "VernacExtend",
            "ed31ca6bb4f2f5fc3c01443fad366367db69b7ed"
        ],
        [
            "now rewrite Z2R_opp, <- Y1, <-Y2.",
            "VernacExtend",
            "14fc925d79ecba564a50f063e5c6ba55359b678e"
        ],
        [
            "intros Y1 Y2.",
            "VernacExtend",
            "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
        ],
        [
            "absurd (r=Z2R (Zfloor r)); trivial.",
            "VernacExtend",
            "8327e5b3f9f9aedb0e19026552ef25e18ba1fef6"
        ],
        [
            "pattern r at 2; replace r with (-(-r))%R by ring.",
            "VernacExtend",
            "f89dcb908a749d4eca8356f0375fd8028ec9dadf"
        ],
        [
            "rewrite Y2, <- Z2R_opp.",
            "VernacExtend",
            "3b62e4c1dd41f07b201941a23f7e1dab4381e2e5"
        ],
        [
            "rewrite Zfloor_Z2R.",
            "VernacExtend",
            "76c32ec848cfdb0ff47d7c42d76ad58c824310bd"
        ],
        [
            "rewrite Z2R_opp, <- Y2.",
            "VernacExtend",
            "9f7354b204c828ce5800e809159909090fbab907"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "case (Req_EM_T r (Z2R (Zfloor r))).",
            "VernacExtend",
            "f3a721fa6e496c925c73a6e98a84006e446b8e0b"
        ],
        [
            "intros Y1 Y2.",
            "VernacExtend",
            "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
        ],
        [
            "absurd (-r=Z2R (Zfloor (-r)))%R; trivial.",
            "VernacExtend",
            "6b30082e9c5040b38803bc0f467551afd83db8ab"
        ],
        [
            "pattern r at 2; rewrite Y1.",
            "VernacExtend",
            "49933b6496638d893c5dd49920a4271c7d43ae1b"
        ],
        [
            "rewrite <- Z2R_opp, Zfloor_Z2R.",
            "VernacExtend",
            "e91dc0a6dfef8131d11b083b2edb2115a2f854c3"
        ],
        [
            "now rewrite Z2R_opp, <- Y1.",
            "VernacExtend",
            "e52d2cf735a0a096b994bb23b65046681324932b"
        ],
        [
            "intros Y1 Y2.",
            "VernacExtend",
            "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
        ],
        [
            "unfold Zceil; rewrite Ropp_involutive.",
            "VernacExtend",
            "316c0fcc0c2dce74d4049ffd0407e8f208019e7a"
        ],
        [
            "replace (Zeven (Zfloor (- r))) with (negb (Zeven (Zfloor r))).",
            "VernacExtend",
            "a083e19662e83e438220c798e98ee1d1a1edec41"
        ],
        [
            "case (Zeven (Zfloor r)); simpl; ring.",
            "VernacExtend",
            "8ec1dffaced7a2ac366222228286d066cf5498b4"
        ],
        [
            "apply trans_eq with (Zeven (Zceil r)).",
            "VernacExtend",
            "cf21debe8468c48fb3219d828c72e7ac00309bbf"
        ],
        [
            "rewrite Zceil_floor_neq.",
            "VernacExtend",
            "b4fc727910b2a0e4293920fe2596a742e2d62876"
        ],
        [
            "rewrite Zeven_plus.",
            "VernacExtend",
            "eeb0ce5bfbcdc5ec50bab699364ca261e08595a5"
        ],
        [
            "destruct (Zeven (Zfloor r)); reflexivity.",
            "VernacExtend",
            "e7b5eea8600b75fff9c08f786822fe31cbf8b142"
        ],
        [
            "now apply sym_not_eq.",
            "VernacExtend",
            "e6f5fa16ec765cda93cf17444b5b6ced93cbe6d4"
        ],
        [
            "rewrite <- (Zeven_opp (Zfloor (- r))).",
            "VernacExtend",
            "851134b0a0e85452c1af0d73d4364bc015009a27"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply canonic_exp_opp.",
            "VernacExtend",
            "e6bbbe23fd21b5cf2938fbb73dc877c3c886cab3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_odd_pt : forall x, Rnd_odd_pt x (round beta fexp Zrnd_odd x).",
            "VernacStartTheoremProof",
            "fa6e9729884b602e54ab80304f8a29f659223299"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "cut (forall x : R, (0 < x)%R -> Rnd_odd_pt x (round beta fexp Zrnd_odd x)).",
            "VernacExtend",
            "61294bdb6122e772603208ebdcc3fcecee6b1cc1"
        ],
        [
            "intros H x; case (Rle_or_lt 0 x).",
            "VernacExtend",
            "55d8e3514ee4f00f125fbaf09c42f36bf2a9ff7e"
        ],
        [
            "intros H1; destruct H1.",
            "VernacExtend",
            "43dff0fe33742ee449ed80c0247a05b64c17496e"
        ],
        [
            "now apply H.",
            "VernacExtend",
            "e28edffe226486c29d50d204164561fb199b8c97"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "rewrite round_0...",
            "VernacExtend",
            "5fbc8a38a813a4cbfdd36466b9d8439a4b4967f1"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "intros Hx; apply Rnd_odd_pt_sym.",
            "VernacExtend",
            "7734751e6ece16b2477df12b6e36c1f452bfb808"
        ],
        [
            "rewrite <- round_odd_opp.",
            "VernacExtend",
            "b209f6c7bd407a07cac48baad8f315000648df8c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "intros x Hxp.",
            "VernacExtend",
            "310bce3a9221821de1dd8e9c92033a0edc7b0993"
        ],
        [
            "generalize (generic_format_round beta fexp Zrnd_odd x).",
            "VernacExtend",
            "2016837bc6d35cfcb46e380aff63581d1effb4b7"
        ],
        [
            "set (o:=round beta fexp Zrnd_odd x).",
            "VernacExtend",
            "1e273827daf90dd10ce12da254d1c598ec46cc01"
        ],
        [
            "intros Ho.",
            "VernacExtend",
            "f34e23da1c637915a44b29d96a9e0976ee1f6a4f"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "case (Req_dec o x); intros Hx.",
            "VernacExtend",
            "985374b175f6334524266e9f20b389ec9f4b4cf7"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "assert (o=round beta fexp Zfloor x \\/ o=round beta fexp Zceil x).",
            "VernacExtend",
            "0c672b3eae5e39e9d929d26e704d36194cd74d98"
        ],
        [
            "unfold o, round, F2R;simpl.",
            "VernacExtend",
            "8e6293616fcbd434e322730e1b5f4ace43818277"
        ],
        [
            "case (Zrnd_DN_or_UP Zrnd_odd (scaled_mantissa beta fexp x))...",
            "VernacExtend",
            "2f6b1716eef6313f04b710394a75b2dbc891f0b9"
        ],
        [
            "intros H; rewrite H; now left.",
            "VernacExtend",
            "e48ab414aed94afeb94f41eb445bb38a71f3d7fc"
        ],
        [
            "intros H; rewrite H; now right.",
            "VernacExtend",
            "40078f6634f0b5042849e5910cd05bcd6079e6ad"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "destruct H; rewrite H.",
            "VernacExtend",
            "8d728eff26797af2a131863c90007e8dec0b6f4d"
        ],
        [
            "left; apply round_DN_pt...",
            "VernacExtend",
            "f16e250c8ad7c130bb286b79ea6fd9e1c8bfac41"
        ],
        [
            "right; apply round_UP_pt...",
            "VernacExtend",
            "4208db8aea60360e8e8120bd5a48a381bfc435a0"
        ],
        [
            "unfold o, Zrnd_odd, round.",
            "VernacExtend",
            "cc4971902f4d78a281aea18da5d89ce47981b051"
        ],
        [
            "case (Req_EM_T (scaled_mantissa beta fexp x) (Z2R (Zfloor (scaled_mantissa beta fexp x)))).",
            "VernacExtend",
            "e6d69f5162453f3f36fab2803b18345e32942121"
        ],
        [
            "intros T.",
            "VernacExtend",
            "7231b6aa2a7e82a8551ec62f54be1c5ea82d33fb"
        ],
        [
            "absurd (o=x); trivial.",
            "VernacExtend",
            "8887b791de77d3cd3a0e8504dca37ee21ca1d9c9"
        ],
        [
            "apply round_generic...",
            "VernacExtend",
            "44537c9bd6bbe98a69c9d38bb5bf2943db0475ff"
        ],
        [
            "unfold generic_format, F2R; simpl.",
            "VernacExtend",
            "03c6bb9591481c40b6272af4d01eeeac2f231bb8"
        ],
        [
            "rewrite <- (scaled_mantissa_mult_bpow beta fexp) at 1.",
            "VernacExtend",
            "3b9dbc353b9cfac9726e67b8954b39262d5a88e2"
        ],
        [
            "apply f_equal2; trivial; rewrite T at 1.",
            "VernacExtend",
            "f095d7063698060f40ca1d2de0edfe91d78dca93"
        ],
        [
            "apply f_equal, sym_eq, Ztrunc_floor.",
            "VernacExtend",
            "e03999c868c1f34ce38a776220fe3c773ccb1006"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "intros L.",
            "VernacExtend",
            "4d0ead99e5500524d672749e7e23c096ce1d5409"
        ],
        [
            "case_eq (Zeven (Zfloor (scaled_mantissa beta fexp x))).",
            "VernacExtend",
            "6701a207f56e7510f7976ad0f333a8687da67cb7"
        ],
        [
            "generalize (generic_format_round beta fexp Zceil x).",
            "VernacExtend",
            "5b3b9a8e0628090e5f973fe63a6122fc8f368caf"
        ],
        [
            "unfold generic_format.",
            "VernacExtend",
            "a62257dc9b3d0326e5266d774af361152364eac7"
        ],
        [
            "set (f:=round beta fexp Zceil x).",
            "VernacExtend",
            "8f47e5680d4c76ff5e672821d14e100746252e26"
        ],
        [
            "set (ef := canonic_exp beta fexp f).",
            "VernacExtend",
            "51c17a8c42f7b6dc12076c1431e5dd18f120f23f"
        ],
        [
            "set (mf := Ztrunc (scaled_mantissa beta fexp f)).",
            "VernacExtend",
            "f1ec768990f04ce06e469f074a05a618d2af3b2f"
        ],
        [
            "exists (Float beta mf ef).",
            "VernacExtend",
            "c70a820e806e22d0f2e42b19b90f4fa0c23b6e49"
        ],
        [
            "unfold Fcore_generic_fmt.canonic.",
            "VernacExtend",
            "5d06125055567fa5fda93feeb04046165136180c"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "repeat split; try assumption.",
            "VernacExtend",
            "221a84919e803be5614ea6011742084cb77b34b6"
        ],
        [
            "apply trans_eq with (negb (Zeven (Zfloor (scaled_mantissa beta fexp x)))).",
            "VernacExtend",
            "dab0787e0c79b4145ee49caa690336f61356fc1c"
        ],
        [
            "2: rewrite H1; reflexivity.",
            "VernacExtend",
            "87693a3cfe34ac530a89b94ece22302be77a4f98"
        ],
        [
            "apply trans_eq with (negb (Zeven (Fnum (Float beta (Zfloor (scaled_mantissa beta fexp x)) (cexp x))))).",
            "VernacExtend",
            "88ff87aadee8ea3de443a75328fd251ebace2ad6"
        ],
        [
            "2: reflexivity.",
            "VernacExtend",
            "96982d22d416486e18f14fc58d1a33677ca59890"
        ],
        [
            "case (Rle_lt_or_eq_dec 0 (round beta fexp Zfloor x)).",
            "VernacExtend",
            "73fb0f734187a76517cdcbc89fa5fa4ecb8c037a"
        ],
        [
            "rewrite <- round_0 with beta fexp Zfloor...",
            "VernacExtend",
            "b7929456effa34b9520840054556b343b5a2f1c1"
        ],
        [
            "apply round_le...",
            "VernacExtend",
            "51053993cc4ba694cc876f6a3af8469bbfde4b50"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "generalize (DN_UP_parity_generic beta fexp)...",
            "VernacExtend",
            "476480935ac93315a66eba23021b5da9406e67e2"
        ],
        [
            "unfold DN_UP_parity_prop.",
            "VernacExtend",
            "8fe758b6bc76f1fd3f985e8e544f1d97ad80975e"
        ],
        [
            "intros T; apply T with x; clear T.",
            "VernacExtend",
            "ded950cdcd792acb9a9b8d347bb1fb1806ccc180"
        ],
        [
            "unfold generic_format.",
            "VernacExtend",
            "a62257dc9b3d0326e5266d774af361152364eac7"
        ],
        [
            "rewrite <- (scaled_mantissa_mult_bpow beta fexp x) at 1.",
            "VernacExtend",
            "7b97432e1e1fd1a2678984e430198be19e79eaba"
        ],
        [
            "unfold F2R; simpl.",
            "VernacExtend",
            "a8b73d273d1c692e5deb932d4bd557029927ed13"
        ],
        [
            "apply Rmult_neq_compat_r.",
            "VernacExtend",
            "0f3c7df948ff3998e0496de7f95bebbf159ca1f7"
        ],
        [
            "apply Rgt_not_eq, bpow_gt_0.",
            "VernacExtend",
            "85766fb7eea9df5ebcdcfc33c78088ec02b411a5"
        ],
        [
            "rewrite Ztrunc_floor.",
            "VernacExtend",
            "eacc44db66d8d93dfd78f0c8e448580e58066cdb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "unfold Fcore_generic_fmt.canonic.",
            "VernacExtend",
            "5d06125055567fa5fda93feeb04046165136180c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply sym_eq, canonic_exp_DN...",
            "VernacExtend",
            "2ad33d94c86e5d661dfaf70bcf82202ac4c38eb9"
        ],
        [
            "unfold Fcore_generic_fmt.canonic.",
            "VernacExtend",
            "5d06125055567fa5fda93feeb04046165136180c"
        ],
        [
            "rewrite <- H0; reflexivity.",
            "VernacExtend",
            "cbade608abb56f8f984b91628fc51667a3ec487b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply trans_eq with (round beta fexp Ztrunc (round beta fexp Zceil x)).",
            "VernacExtend",
            "384009249f782dfb202bab423d060b75fe80783b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply round_generic...",
            "VernacExtend",
            "44537c9bd6bbe98a69c9d38bb5bf2943db0475ff"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "replace (Fnum {| Fnum := Zfloor (scaled_mantissa beta fexp x); Fexp := cexp x |}) with (Fnum (Float beta 0 (fexp (ln_beta beta 0)))).",
            "VernacExtend",
            "41be1c20dde980ab3001c5522662fe77e0aacbc3"
        ],
        [
            "generalize (DN_UP_parity_generic beta fexp)...",
            "VernacExtend",
            "476480935ac93315a66eba23021b5da9406e67e2"
        ],
        [
            "unfold DN_UP_parity_prop.",
            "VernacExtend",
            "8fe758b6bc76f1fd3f985e8e544f1d97ad80975e"
        ],
        [
            "intros T; apply T with x; clear T.",
            "VernacExtend",
            "ded950cdcd792acb9a9b8d347bb1fb1806ccc180"
        ],
        [
            "unfold generic_format.",
            "VernacExtend",
            "a62257dc9b3d0326e5266d774af361152364eac7"
        ],
        [
            "rewrite <- (scaled_mantissa_mult_bpow beta fexp x) at 1.",
            "VernacExtend",
            "7b97432e1e1fd1a2678984e430198be19e79eaba"
        ],
        [
            "unfold F2R; simpl.",
            "VernacExtend",
            "a8b73d273d1c692e5deb932d4bd557029927ed13"
        ],
        [
            "apply Rmult_neq_compat_r.",
            "VernacExtend",
            "0f3c7df948ff3998e0496de7f95bebbf159ca1f7"
        ],
        [
            "apply Rgt_not_eq, bpow_gt_0.",
            "VernacExtend",
            "85766fb7eea9df5ebcdcfc33c78088ec02b411a5"
        ],
        [
            "rewrite Ztrunc_floor.",
            "VernacExtend",
            "eacc44db66d8d93dfd78f0c8e448580e58066cdb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "apply canonic_0.",
            "VernacExtend",
            "101db88b1ad635b9981e5d933f6763ba53885893"
        ],
        [
            "unfold Fcore_generic_fmt.canonic.",
            "VernacExtend",
            "5d06125055567fa5fda93feeb04046165136180c"
        ],
        [
            "rewrite <- H0; reflexivity.",
            "VernacExtend",
            "cbade608abb56f8f984b91628fc51667a3ec487b"
        ],
        [
            "rewrite <- Y; unfold F2R; simpl; ring.",
            "VernacExtend",
            "571c498ffee34f1a19a0f68da02c2054c5c822ba"
        ],
        [
            "apply trans_eq with (round beta fexp Ztrunc (round beta fexp Zceil x)).",
            "VernacExtend",
            "384009249f782dfb202bab423d060b75fe80783b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply round_generic...",
            "VernacExtend",
            "44537c9bd6bbe98a69c9d38bb5bf2943db0475ff"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply eq_Z2R, Rmult_eq_reg_r with (bpow (cexp x)).",
            "VernacExtend",
            "3b75a984d37afebc21a2dd8e00d26bb0501d7929"
        ],
        [
            "unfold round, F2R in Y; simpl in Y; rewrite <- Y.",
            "VernacExtend",
            "ab866434ba6a1931a1e9f28e89955a37e0352b7a"
        ],
        [
            "simpl; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "apply Rgt_not_eq, bpow_gt_0.",
            "VernacExtend",
            "85766fb7eea9df5ebcdcfc33c78088ec02b411a5"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "case (Rle_lt_or_eq_dec 0 (round beta fexp Zfloor x)).",
            "VernacExtend",
            "73fb0f734187a76517cdcbc89fa5fa4ecb8c037a"
        ],
        [
            "rewrite <- round_0 with beta fexp Zfloor...",
            "VernacExtend",
            "b7929456effa34b9520840054556b343b5a2f1c1"
        ],
        [
            "apply round_le...",
            "VernacExtend",
            "51053993cc4ba694cc876f6a3af8469bbfde4b50"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "intros Hrx.",
            "VernacExtend",
            "10a8b8325505ef3bec69699cfa3413dcb7f87719"
        ],
        [
            "set (ef := canonic_exp beta fexp x).",
            "VernacExtend",
            "dd8d718a45a7a6d2cd3d980490ce7b60d72187a9"
        ],
        [
            "set (mf := Zfloor (scaled_mantissa beta fexp x)).",
            "VernacExtend",
            "13af7e350b77c20ee9b8f122eb3ed00f71259853"
        ],
        [
            "exists (Float beta mf ef).",
            "VernacExtend",
            "c70a820e806e22d0f2e42b19b90f4fa0c23b6e49"
        ],
        [
            "unfold Fcore_generic_fmt.canonic.",
            "VernacExtend",
            "5d06125055567fa5fda93feeb04046165136180c"
        ],
        [
            "repeat split; try assumption.",
            "VernacExtend",
            "221a84919e803be5614ea6011742084cb77b34b6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply trans_eq with (cexp (round beta fexp Zfloor x )).",
            "VernacExtend",
            "ee0b25ef9d7ebf75b18e9d9fcbcaae42f763b7b9"
        ],
        [
            "apply sym_eq, canonic_exp_DN...",
            "VernacExtend",
            "2ad33d94c86e5d661dfaf70bcf82202ac4c38eb9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros Hrx; contradict Y.",
            "VernacExtend",
            "2987a9bd9056c015f96c72ed1f8b7ff3432941d6"
        ],
        [
            "replace (Zfloor (scaled_mantissa beta fexp x)) with 0%Z.",
            "VernacExtend",
            "43db38d5e3c804e8a99ccd3d55afe7103d8b8bb2"
        ],
        [
            "simpl; discriminate.",
            "VernacExtend",
            "9dea1f72a06b14c6c8d474136b2ccda560957ee1"
        ],
        [
            "apply eq_Z2R, Rmult_eq_reg_r with (bpow (cexp x)).",
            "VernacExtend",
            "3b75a984d37afebc21a2dd8e00d26bb0501d7929"
        ],
        [
            "unfold round, F2R in Hrx; simpl in Hrx; rewrite <- Hrx.",
            "VernacExtend",
            "17fe3148cb973de6087485320454d43fc41b4b42"
        ],
        [
            "simpl; ring.",
            "VernacExtend",
            "dbea56eab9f20d9ab08eaf0f2769e833b9098d51"
        ],
        [
            "apply Rgt_not_eq, bpow_gt_0.",
            "VernacExtend",
            "85766fb7eea9df5ebcdcfc33c78088ec02b411a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rnd_odd_pt_unicity : forall x f1 f2 : R, Rnd_odd_pt x f1 -> Rnd_odd_pt x f2 -> f1 = f2.",
            "VernacStartTheoremProof",
            "0ef8bdd3cb9ace7540b8c18dc7253fa10dc6bf45"
        ],
        [
            "intros x f1 f2 (Ff1,H1) (Ff2,H2).",
            "VernacExtend",
            "f182ab61d44f8e6f7afc55c76d1ad0ee27929689"
        ],
        [
            "case (generic_format_EM beta fexp x); intros L.",
            "VernacExtend",
            "678f0ca1b47ef46e813ce300b44d2be3495fc85c"
        ],
        [
            "apply trans_eq with x.",
            "VernacExtend",
            "f2e976305d9985c49b834ed59df1a245c9af59af"
        ],
        [
            "case H1; try easy.",
            "VernacExtend",
            "f6f94a8d7f9fc6d49020b68c304e8abc2204f6b7"
        ],
        [
            "intros (J,_); case J; intros J'.",
            "VernacExtend",
            "6f321742e50e6730d4cd2a63aa90b072183525ad"
        ],
        [
            "apply Rnd_DN_pt_idempotent with format; assumption.",
            "VernacExtend",
            "49356304983c2a524372b8a35de438ba72fc1a86"
        ],
        [
            "apply Rnd_UP_pt_idempotent with format; assumption.",
            "VernacExtend",
            "f38d560055cee96bf5ff13d20231872c498c882f"
        ],
        [
            "case H2; try easy.",
            "VernacExtend",
            "afa822f25f7bf216dc2475f41a8e1f4f298925ad"
        ],
        [
            "intros (J,_); case J; intros J'; apply sym_eq.",
            "VernacExtend",
            "f0d9b7638690bc8bca54e09592f7242c0a516eed"
        ],
        [
            "apply Rnd_DN_pt_idempotent with format; assumption.",
            "VernacExtend",
            "49356304983c2a524372b8a35de438ba72fc1a86"
        ],
        [
            "apply Rnd_UP_pt_idempotent with format; assumption.",
            "VernacExtend",
            "f38d560055cee96bf5ff13d20231872c498c882f"
        ],
        [
            "destruct H1 as [H1|(H1,H1')].",
            "VernacExtend",
            "e4b3f92b3a7aca08ce560cbb757bd02fdc9341f9"
        ],
        [
            "contradict L; now rewrite <- H1.",
            "VernacExtend",
            "1d3d1e51fba1e97313ce647d3b8d60c5b7455b16"
        ],
        [
            "destruct H2 as [H2|(H2,H2')].",
            "VernacExtend",
            "a7a1eedaacd6fbe2ce83221aba8a3439a4a9e5b3"
        ],
        [
            "contradict L; now rewrite <- H2.",
            "VernacExtend",
            "24384bf3f3d159fed53130a39ba9d6273bacd70f"
        ],
        [
            "destruct H1 as [H1|H1]; destruct H2 as [H2|H2].",
            "VernacExtend",
            "b5436d0887b673825c737891995154d892551ef4"
        ],
        [
            "apply Rnd_DN_pt_unicity with format x; assumption.",
            "VernacExtend",
            "67d9c9393efc33287d8979716c28eb5d14bad9e4"
        ],
        [
            "destruct H1' as (ff,(K1,(K2,K3))).",
            "VernacExtend",
            "2c147b63c7968ae4fcbc9608e69f96174d6c67b6"
        ],
        [
            "destruct H2' as (gg,(L1,(L2,L3))).",
            "VernacExtend",
            "619c5e7b88e524a4ee0dbb199ad9f3c9ff138a2f"
        ],
        [
            "absurd (true = false); try discriminate.",
            "VernacExtend",
            "2de79baec8ed5360837d5e0eaa53e73ccd49775e"
        ],
        [
            "rewrite <- L3.",
            "VernacExtend",
            "8258b5c7d3d7707cc9299e5f3658f59c01df506e"
        ],
        [
            "apply trans_eq with (negb (Zeven (Fnum ff))).",
            "VernacExtend",
            "58cc231544fed467d5b1e78bed51a5fdbe5edc99"
        ],
        [
            "rewrite K3; easy.",
            "VernacExtend",
            "11b7d84bed269f048ee5d617df74b8cba1ed37f9"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "generalize (DN_UP_parity_generic beta fexp).",
            "VernacExtend",
            "5510085bfe3c2b8a21f32c487a6c551af829f9fd"
        ],
        [
            "unfold DN_UP_parity_prop; intros T; apply (T x); clear T; try assumption...",
            "VernacExtend",
            "be2db3e96d875a9510735fc2160e1877158a4a76"
        ],
        [
            "rewrite <- K1; apply Rnd_DN_pt_unicity with (generic_format beta fexp) x; try easy...",
            "VernacExtend",
            "b9b2369382d2e55bff9225dedc44278319f57e5e"
        ],
        [
            "now apply round_DN_pt...",
            "VernacExtend",
            "b6524895671b7cb3172fb6883d276d67b0f524a5"
        ],
        [
            "rewrite <- L1; apply Rnd_UP_pt_unicity with (generic_format beta fexp) x; try easy...",
            "VernacExtend",
            "c18663f92d796d6a1238e60c00e7fca3d5a3e242"
        ],
        [
            "now apply round_UP_pt...",
            "VernacExtend",
            "87ec1bd1ea2ecae03528d42916101a09038bea65"
        ],
        [
            "destruct H1' as (ff,(K1,(K2,K3))).",
            "VernacExtend",
            "2c147b63c7968ae4fcbc9608e69f96174d6c67b6"
        ],
        [
            "destruct H2' as (gg,(L1,(L2,L3))).",
            "VernacExtend",
            "619c5e7b88e524a4ee0dbb199ad9f3c9ff138a2f"
        ],
        [
            "absurd (true = false); try discriminate.",
            "VernacExtend",
            "2de79baec8ed5360837d5e0eaa53e73ccd49775e"
        ],
        [
            "rewrite <- K3.",
            "VernacExtend",
            "114cd3e71851539911f0555ea992f8736d26d00d"
        ],
        [
            "apply trans_eq with (negb (Zeven (Fnum gg))).",
            "VernacExtend",
            "637137d545c01d53b4cf74865085dd0afba5f17f"
        ],
        [
            "rewrite L3; easy.",
            "VernacExtend",
            "da13561dab7d04d1a2c7d3f7328c747d7d664976"
        ],
        [
            "apply sym_eq.",
            "VernacExtend",
            "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
        ],
        [
            "generalize (DN_UP_parity_generic beta fexp).",
            "VernacExtend",
            "5510085bfe3c2b8a21f32c487a6c551af829f9fd"
        ],
        [
            "unfold DN_UP_parity_prop; intros T; apply (T x); clear T; try assumption...",
            "VernacExtend",
            "be2db3e96d875a9510735fc2160e1877158a4a76"
        ],
        [
            "rewrite <- L1; apply Rnd_DN_pt_unicity with (generic_format beta fexp) x; try easy...",
            "VernacExtend",
            "51c52aa4cdeca701ae09fd0a2fd9ef4f16e5f929"
        ],
        [
            "now apply round_DN_pt...",
            "VernacExtend",
            "b6524895671b7cb3172fb6883d276d67b0f524a5"
        ],
        [
            "rewrite <- K1; apply Rnd_UP_pt_unicity with (generic_format beta fexp) x; try easy...",
            "VernacExtend",
            "f2732db55f58f6f7a4c0211babce4d119229ca76"
        ],
        [
            "now apply round_UP_pt...",
            "VernacExtend",
            "87ec1bd1ea2ecae03528d42916101a09038bea65"
        ],
        [
            "apply Rnd_UP_pt_unicity with format x; assumption.",
            "VernacExtend",
            "9bad2d2f5cb8e034dcac07efba572fa09f21d41b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rnd_odd_pt_monotone : round_pred_monotone (Rnd_odd_pt).",
            "VernacStartTheoremProof",
            "0f199b04d9937a0b558ec456683d6cdf4cdc6cc4"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x y f g H1 H2 Hxy.",
            "VernacExtend",
            "d37deb939c348a2e44d928add8540815ad755bda"
        ],
        [
            "apply Rle_trans with (round beta fexp Zrnd_odd x).",
            "VernacExtend",
            "c4369e8578b79855d2037bf38b93213b99c3baa4"
        ],
        [
            "right; apply Rnd_odd_pt_unicity with x; try assumption.",
            "VernacExtend",
            "5cb22d0549eb3e780fdb6d9b6c0d7c290f15905a"
        ],
        [
            "apply round_odd_pt.",
            "VernacExtend",
            "1d3c4d646190f045459bf0051ed09947ccf54e59"
        ],
        [
            "apply Rle_trans with (round beta fexp Zrnd_odd y).",
            "VernacExtend",
            "70528fbb47c07534a028816baa4f8e217e777120"
        ],
        [
            "apply round_le...",
            "VernacExtend",
            "51053993cc4ba694cc876f6a3af8469bbfde4b50"
        ],
        [
            "right; apply Rnd_odd_pt_unicity with y; try assumption.",
            "VernacExtend",
            "68df64a817dd9a5a85ee4fba8113735ee083588c"
        ],
        [
            "apply round_odd_pt.",
            "VernacExtend",
            "1d3c4d646190f045459bf0051ed09947ccf54e59"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fcore_rnd_odd.",
            "VernacEndSegment",
            "d2f19db538148693e723b642d940e6d2a8d5b445"
        ],
        [
            "Section Odd_prop_aux.",
            "VernacBeginSection",
            "e1118a47d21e33eccf44130ed8b1e2b07df19cac"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Hypothesis Even_beta: Zeven (radix_val beta)=true.",
            "VernacAssumption",
            "da12e05aa9187f88d2227ff469dbae5e7ef9888b"
        ],
        [
            "Notation bpow e := (bpow beta e).",
            "VernacSyntacticDefinition",
            "c796e278ffd17ea9674b52f8e94413782272a594"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Variable fexpe : Z -> Z.",
            "VernacAssumption",
            "32a6514115aa9e88cefecf76546a65e4fead758b"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Context { exists_NE_ : Exists_NE beta fexp }.",
            "VernacContext",
            "ec78b1f5f8c514d3557b72255ee413d561363d1d"
        ],
        [
            "Context { valid_expe : Valid_exp fexpe }.",
            "VernacContext",
            "b69ea80c2e13b821119b0a4f03e9ca69d590da90"
        ],
        [
            "Context { exists_NE_e : Exists_NE beta fexpe }.",
            "VernacContext",
            "2ac0166b37f592a926e31492eee3cf14eb024dc6"
        ],
        [
            "Hypothesis fexpe_fexp: forall e, (fexpe e <= fexp e -2)%Z.",
            "VernacAssumption",
            "3bbfb515f756943c1e73a753ec5370b37e7b535e"
        ],
        [
            "Lemma generic_format_fexpe_fexp: forall x, generic_format beta fexp x -> generic_format beta fexpe x.",
            "VernacStartTheoremProof",
            "3145b445f1deeeb29cea035009ed468a7c022685"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply generic_inclusion_ln_beta with fexp; trivial; intros Hx2.",
            "VernacExtend",
            "d583995aa129471170203de767239e79998859ef"
        ],
        [
            "generalize (fexpe_fexp (ln_beta beta x)).",
            "VernacExtend",
            "f8ace58325c4166cc4b86b0f4d0fe4cf1fc13039"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_even_fexp_lt: forall (c:Z->Z), forall (x:R), (exists f:float beta, F2R f = x /\\ (c (ln_beta beta x) < Fexp f)%Z) -> exists f:float beta, F2R f =x /\\ canonic beta c f /\\ Zeven (Fnum f) = true.",
            "VernacStartTheoremProof",
            "62b06dd2246e5573b87bd16d52091e74f040de48"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros c x (g,(Hg1,Hg2)).",
            "VernacExtend",
            "9744f45185ccc5fa31d4dec815bca0c65658eb04"
        ],
        [
            "exists (Float beta (Fnum g*Z.pow (radix_val beta) (Fexp g - c (ln_beta beta x))) (c (ln_beta beta x))).",
            "VernacExtend",
            "6b58ba7cead68711dab0395621cb2c6cc503d3b6"
        ],
        [
            "assert (F2R (Float beta (Fnum g*Z.pow (radix_val beta) (Fexp g - c (ln_beta beta x))) (c (ln_beta beta x))) = x).",
            "VernacExtend",
            "4c3b53a7ae2c6d3e4936ef8156dff086cbe8db34"
        ],
        [
            "unfold F2R; simpl.",
            "VernacExtend",
            "a8b73d273d1c692e5deb932d4bd557029927ed13"
        ],
        [
            "rewrite Z2R_mult, Z2R_Zpower.",
            "VernacExtend",
            "d9aed0f188c5c9b451873f60eb454270f7dbcb7b"
        ],
        [
            "rewrite Rmult_assoc, <- bpow_plus.",
            "VernacExtend",
            "e64efbe326a420591ccd203c3aa334b6ee79c4aa"
        ],
        [
            "rewrite <- Hg1; unfold F2R.",
            "VernacExtend",
            "6599672692ae547cf991f1675a06c6013ba56ec2"
        ],
        [
            "apply f_equal, f_equal.",
            "VernacExtend",
            "dbee398c1481d56d1162d5a55d6cc963deb55e93"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold canonic, canonic_exp.",
            "VernacExtend",
            "984a0fad0d859179a8ad4215c46f87e07f665a04"
        ],
        [
            "now rewrite H.",
            "VernacExtend",
            "4b48f672d72bdaa3470accf224603b6461e14cf4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Zeven_mult.",
            "VernacExtend",
            "286fb8a84d5bae6a537c5cc1637ccb283083cd1e"
        ],
        [
            "rewrite Zeven_Zpower.",
            "VernacExtend",
            "09d74de1df7262c3ea6e82a0b488771342df5296"
        ],
        [
            "rewrite Even_beta.",
            "VernacExtend",
            "55abcd1cfcc381476f2b959a8e8606fe2c87f984"
        ],
        [
            "apply Bool.orb_true_intro.",
            "VernacExtend",
            "cfa1ad07defbc66708ea0d2ebe13cc8107a75e43"
        ],
        [
            "now right.",
            "VernacExtend",
            "18eb395a45fbe5648757d528efaf583b695576c7"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable choice:Z->bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Variable x:R.",
            "VernacAssumption",
            "e6fd4f979672b22a8a75f1027d2abfafb5dea904"
        ],
        [
            "Variable d u: float beta.",
            "VernacAssumption",
            "7cefd880ea3adbc3cd8a30412d7f406d6fa5e19f"
        ],
        [
            "Hypothesis Hd: Rnd_DN_pt (generic_format beta fexp) x (F2R d).",
            "VernacAssumption",
            "190a66232cef9fe8630c8845b850051f6ee4259a"
        ],
        [
            "Hypothesis Cd: canonic beta fexp d.",
            "VernacAssumption",
            "a800d43ebde57cc47e70d24abf46168c598178fc"
        ],
        [
            "Hypothesis Hu: Rnd_UP_pt (generic_format beta fexp) x (F2R u).",
            "VernacAssumption",
            "52830d23a8ceab4ac3cd177e11e7b73ce160a24b"
        ],
        [
            "Hypothesis Cu: canonic beta fexp u.",
            "VernacAssumption",
            "6f75b32c2d9bb101e7a05cc6b507590b55cbef40"
        ],
        [
            "Hypothesis xPos: (0 < x)%R.",
            "VernacAssumption",
            "0ece89d1625ff7c12737f158f4f016964956bfc3"
        ],
        [
            "Let m:= ((F2R d+F2R u)/2)%R.",
            "VernacDefinition",
            "8966594a6eb75b89e0ac38179a30deb328269f72"
        ],
        [
            "Lemma d_eq: F2R d= round beta fexp Zfloor x.",
            "VernacStartTheoremProof",
            "2b5257eb5f3784078b6bbeaf6c3a17e5eba2b65f"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "apply Rnd_DN_pt_unicity with (generic_format beta fexp) x...",
            "VernacExtend",
            "e23a1b0689a00f0c2195df9ea72ffad3377d22bd"
        ],
        [
            "apply round_DN_pt...",
            "VernacExtend",
            "884406c318b02180316764822f617990ec1c51ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma u_eq: F2R u= round beta fexp Zceil x.",
            "VernacStartTheoremProof",
            "57ccf86c247e193caa15dffa6cde8169b017d875"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "apply Rnd_UP_pt_unicity with (generic_format beta fexp) x...",
            "VernacExtend",
            "2232d53e5d40cb436a40e1dfcd250eae5729afdd"
        ],
        [
            "apply round_UP_pt...",
            "VernacExtend",
            "76e1dae0c319836e409c92c6efc5f7490f4e6d87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma d_ge_0: (0 <= F2R d)%R.",
            "VernacStartTheoremProof",
            "8b4f3fe8e062422d85367d46710627f607b0b34e"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "rewrite d_eq; apply round_ge_generic...",
            "VernacExtend",
            "61ddfee68087f902ba8ba40230203b5e5f1f31e8"
        ],
        [
            "apply generic_format_0.",
            "VernacExtend",
            "dc3c4afb013f89f69b2f0e71216d8926d296b3bd"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_beta_d: (0< F2R d)%R -> (ln_beta beta (F2R d) = ln_beta beta x :>Z).",
            "VernacStartTheoremProof",
            "1dbd8adfdeac37d9f1d56f78304a3d4ae894677b"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "rewrite d_eq; apply ln_beta_DN...",
            "VernacExtend",
            "4d8c141558be376416e5120b6adccfc186c08ce7"
        ],
        [
            "now rewrite <- d_eq.",
            "VernacExtend",
            "5ca1b4f90cebbf9c8b94d3c230152c99fcddcd1e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fexp_d: (0 < F2R d)%R -> Fexp d =fexp (ln_beta beta x).",
            "VernacStartTheoremProof",
            "cadbed183781b37101f2bd1ebf5add2d2dd08eb3"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "now rewrite Cd, <- ln_beta_d.",
            "VernacExtend",
            "70ac38217abe37857b7e81d1dd7094aa875c4799"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma format_bpow_x: (0 < F2R d)%R -> generic_format beta fexp (bpow (ln_beta beta x)).",
            "VernacStartTheoremProof",
            "c8b9c3453d69a5aa28815c926f2bc626cd1101ac"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "apply valid_exp.",
            "VernacExtend",
            "9335fa4770b756f93530fd54152de0507ba39d3b"
        ],
        [
            "rewrite <- Fexp_d; trivial.",
            "VernacExtend",
            "3760bfb45c0e677e5437d45fb2e3d95c1b8de955"
        ],
        [
            "apply Zlt_le_trans with (ln_beta beta (F2R d))%Z.",
            "VernacExtend",
            "a27774a20324160f03fdad83cca0a571d350841c"
        ],
        [
            "rewrite Cd; apply ln_beta_generic_gt...",
            "VernacExtend",
            "8284632758a3f26c1ceada4f33d0b9ffdc9137eb"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "apply ln_beta_le; trivial.",
            "VernacExtend",
            "87e92a77bb59bf44145deea9ea9f6496a00c1aee"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma format_bpow_d: (0 < F2R d)%R -> generic_format beta fexp (bpow (ln_beta beta (F2R d))).",
            "VernacStartTheoremProof",
            "124b5215b682ff4cff8bcd03be58884d7f63c293"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y; apply generic_format_bpow.",
            "VernacExtend",
            "e8261632caf01fb505e413fcabec1198bb841d88"
        ],
        [
            "apply valid_exp.",
            "VernacExtend",
            "9335fa4770b756f93530fd54152de0507ba39d3b"
        ],
        [
            "apply ln_beta_generic_gt...",
            "VernacExtend",
            "a39fb8d54e0f04fa59124e549143d03b3dd67c9e"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma d_le_m: (F2R d <= m)%R.",
            "VernacStartTheoremProof",
            "304e452106bbd9ece855c5cae216ca9fdbef768d"
        ],
        [
            "assert (F2R d <= F2R u)%R.",
            "VernacExtend",
            "bb31d05d446cdd86b60cd41cc5749d1763bd4219"
        ],
        [
            "apply Rle_trans with x.",
            "VernacExtend",
            "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "apply Hu.",
            "VernacExtend",
            "51e4ba2a0f37212a61da6c69750614260faf5b8d"
        ],
        [
            "unfold m.",
            "VernacExtend",
            "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma m_le_u: (m <= F2R u)%R.",
            "VernacStartTheoremProof",
            "fd28dcf56397a6e16161ad2a0b1d260eb24a1609"
        ],
        [
            "assert (F2R d <= F2R u)%R.",
            "VernacExtend",
            "bb31d05d446cdd86b60cd41cc5749d1763bd4219"
        ],
        [
            "apply Rle_trans with x.",
            "VernacExtend",
            "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "apply Hu.",
            "VernacExtend",
            "51e4ba2a0f37212a61da6c69750614260faf5b8d"
        ],
        [
            "unfold m.",
            "VernacExtend",
            "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_beta_m: (0 < F2R d)%R -> (ln_beta beta m =ln_beta beta (F2R d) :>Z).",
            "VernacStartTheoremProof",
            "a66bf3f7dd44b7fe69355f74bd58bfa5f7b2a0f5"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros dPos; apply ln_beta_unique_pos.",
            "VernacExtend",
            "c42787f43f13bca00dd273ff5b556e17920d4da1"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (F2R d).",
            "VernacExtend",
            "96fe872c7611bf45bf8ac40bab77b578eccdc058"
        ],
        [
            "destruct (ln_beta beta (F2R d)) as (e,He).",
            "VernacExtend",
            "a7f437073ec7ccc802fab13920d563f853ec6a7a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rabs_right in He.",
            "VernacExtend",
            "1e3ec2818626313b026375c9bbd77e7d26f37a6b"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "apply Rle_ge; now left.",
            "VernacExtend",
            "ead6b1f12a6932914cd8190f074f6a72780717de"
        ],
        [
            "apply d_le_m.",
            "VernacExtend",
            "654ddc884d0aefee6e6cacdfc555fea2bdb32e1a"
        ],
        [
            "case m_le_u; intros H.",
            "VernacExtend",
            "556acde900edc9e4c8307b4fb694bf88f653dea6"
        ],
        [
            "apply Rlt_le_trans with (1:=H).",
            "VernacExtend",
            "4cd6bf8b9ffdf301bc7c5f322262f3507ca79aef"
        ],
        [
            "rewrite u_eq.",
            "VernacExtend",
            "6e1c85aae248a439dc2e48e1ebdec756a450f485"
        ],
        [
            "apply round_le_generic...",
            "VernacExtend",
            "7f2a01600a932d09b4d49ff42273647f7ead7071"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "apply valid_exp.",
            "VernacExtend",
            "9335fa4770b756f93530fd54152de0507ba39d3b"
        ],
        [
            "apply ln_beta_generic_gt...",
            "VernacExtend",
            "a39fb8d54e0f04fa59124e549143d03b3dd67c9e"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "case (Rle_or_lt x (bpow (ln_beta beta (F2R d)))); trivial; intros Z.",
            "VernacExtend",
            "5d1534e9fd3a7a23537c867bbf673f03331e9c36"
        ],
        [
            "absurd ((bpow (ln_beta beta (F2R d)) <= (F2R d)))%R.",
            "VernacExtend",
            "520c3ff4fdf7d33628a77a5b26536a27da6ce49f"
        ],
        [
            "apply Rlt_not_le.",
            "VernacExtend",
            "970672dbfa76c5b1a5bbbe80816db4b871608528"
        ],
        [
            "destruct (ln_beta beta (F2R d)) as (e,He).",
            "VernacExtend",
            "a7f437073ec7ccc802fab13920d563f853ec6a7a"
        ],
        [
            "simpl in *; rewrite Rabs_right in He.",
            "VernacExtend",
            "ea48626b5863ee72c2be5efa678beb6f9d32e7e7"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "apply Rle_ge; now left.",
            "VernacExtend",
            "ead6b1f12a6932914cd8190f074f6a72780717de"
        ],
        [
            "apply Rle_trans with (round beta fexp Zfloor x).",
            "VernacExtend",
            "beafdca010018cf0f78622d74488364c8304b4fa"
        ],
        [
            "2: right; apply sym_eq, d_eq.",
            "VernacExtend",
            "63f1adf6e423aacd6800dc68e146ea95987ff009"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "apply generic_format_bpow.",
            "VernacExtend",
            "2af66cea358ca19a1ce7ae8db9c4199157b1884b"
        ],
        [
            "apply valid_exp.",
            "VernacExtend",
            "9335fa4770b756f93530fd54152de0507ba39d3b"
        ],
        [
            "apply ln_beta_generic_gt...",
            "VernacExtend",
            "a39fb8d54e0f04fa59124e549143d03b3dd67c9e"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "now apply generic_format_canonic.",
            "VernacExtend",
            "2745b0c69f3210ec0ffb8a97e6d75354bcc29534"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "replace m with (F2R d).",
            "VernacExtend",
            "1282107dae2e579b4e5650440f39581a3ee1c901"
        ],
        [
            "destruct (ln_beta beta (F2R d)) as (e,He).",
            "VernacExtend",
            "a7f437073ec7ccc802fab13920d563f853ec6a7a"
        ],
        [
            "simpl in *; rewrite Rabs_right in He.",
            "VernacExtend",
            "ea48626b5863ee72c2be5efa678beb6f9d32e7e7"
        ],
        [
            "apply He.",
            "VernacExtend",
            "18c2a1fef64f9cbf0d79d376e6910aa33bebafb1"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "apply Rle_ge; now left.",
            "VernacExtend",
            "ead6b1f12a6932914cd8190f074f6a72780717de"
        ],
        [
            "unfold m in H |- *.",
            "VernacExtend",
            "1e077c94a33cc9757076c58cfa316ceaefb18a88"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_beta_m_0: (0 = F2R d)%R -> (ln_beta beta m =ln_beta beta (F2R u)-1:>Z)%Z.",
            "VernacStartTheoremProof",
            "03478a903bdb86e8058874852ef7d78108d87138"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "apply ln_beta_unique_pos.",
            "VernacExtend",
            "24a909d28e200e615f26046b041fd9fc45e03e96"
        ],
        [
            "unfold m; rewrite <- Y, Rplus_0_l.",
            "VernacExtend",
            "512853b0d032f11f99c30d408ceb7e082e3d2559"
        ],
        [
            "rewrite u_eq.",
            "VernacExtend",
            "6e1c85aae248a439dc2e48e1ebdec756a450f485"
        ],
        [
            "destruct (ln_beta beta x) as (e,He).",
            "VernacExtend",
            "b8b3fd0885671b68d791e7b7a2c74b1cce1c51ed"
        ],
        [
            "rewrite Rabs_pos_eq in He by now apply Rlt_le.",
            "VernacExtend",
            "f526b236deaa1f1ae3f037721a8614c7876ccc0f"
        ],
        [
            "rewrite round_UP_small_pos with (ex:=e).",
            "VernacExtend",
            "bf0bb98ac31955940dc239067593e6e1ffb4b9db"
        ],
        [
            "rewrite ln_beta_bpow.",
            "VernacExtend",
            "562ed7a7f197615f8fb2cc276e6bc8e10357a919"
        ],
        [
            "ring_simplify (fexp e + 1 - 1)%Z.",
            "VernacExtend",
            "ff048069d46ffb19e7e80ac1ac84405e532bcee8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Zminus; rewrite bpow_plus.",
            "VernacExtend",
            "1de35bed46f214eff68b00095dd9903663f239f2"
        ],
        [
            "unfold Rdiv; apply Rmult_le_compat_l.",
            "VernacExtend",
            "5db2f18c43be45e5b99a54047663f9534d77e807"
        ],
        [
            "apply bpow_ge_0.",
            "VernacExtend",
            "21ebde0be0a631dfd60f8ca27e963cec55b52605"
        ],
        [
            "simpl; unfold Z.pow_pos; simpl.",
            "VernacExtend",
            "85a1bba50fed5f8e1380eb602745dbea91d2d546"
        ],
        [
            "rewrite Zmult_1_r; apply Rinv_le.",
            "VernacExtend",
            "c64b821e11e8c48a8dd3071e8304bd65b3ac077d"
        ],
        [
            "exact Rlt_0_2.",
            "VernacExtend",
            "b28a44a4ff92bff06dfdd851bad8224b270c7e57"
        ],
        [
            "apply (Z2R_le 2).",
            "VernacExtend",
            "a279012cca2d7da81553d571f987a3ff96cb7dd1"
        ],
        [
            "specialize (radix_gt_1 beta).",
            "VernacExtend",
            "55192352beab8b3e3ee6eace6630fd2b99c66167"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rlt_le_trans with (bpow (fexp e)*1)%R.",
            "VernacExtend",
            "afeb3df570bfcdc9385617cd40b5a82436c1ef56"
        ],
        [
            "2: right; ring.",
            "VernacExtend",
            "4ca6299447f2ab91bf6cd3a0c9fe93fa0ac52c3f"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_compat_l.",
            "VernacExtend",
            "effef3481b0f5ee2d52b905dcb95756a5a4244f8"
        ],
        [
            "apply bpow_gt_0.",
            "VernacExtend",
            "51431cbce9a44d56b4b1857315ff3c6ca3c98e7f"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "now apply He, Rgt_not_eq.",
            "VernacExtend",
            "97fdcc58489e786a73a2ed779ce679424246956b"
        ],
        [
            "apply exp_small_round_0_pos with beta (Zfloor) x...",
            "VernacExtend",
            "c819ac93b002f0d05e4a0ca37f0a7761af434836"
        ],
        [
            "now apply He, Rgt_not_eq.",
            "VernacExtend",
            "97fdcc58489e786a73a2ed779ce679424246956b"
        ],
        [
            "now rewrite <- d_eq, Y.",
            "VernacExtend",
            "02a8b7de62cde93fc3fde53556299850e8ae06d8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma u'_eq: (0 < F2R d)%R -> exists f:float beta, F2R f = F2R u /\\ (Fexp f = Fexp d)%Z.",
            "VernacStartTheoremProof",
            "9e45b8ad858ea63ca871eafce83ff0c7ba4047f0"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "rewrite u_eq; unfold round.",
            "VernacExtend",
            "349250fac7fe0753dba25d378e599a4c640ea07d"
        ],
        [
            "eexists; repeat split.",
            "VernacExtend",
            "c0251e7951458e245f775300676c2bcc22dbb1c6"
        ],
        [
            "simpl; now rewrite Fexp_d.",
            "VernacExtend",
            "8e605ed2d64129a856c21c417d02e4adbaf68bb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma m_eq: (0 < F2R d)%R -> exists f:float beta, F2R f = m /\\ (Fexp f = fexp (ln_beta beta x) -1)%Z.",
            "VernacStartTheoremProof",
            "ed7ca0a0e7693e761daedf601c5b1c7722181858"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "specialize (Zeven_ex (radix_val beta)); rewrite Even_beta.",
            "VernacExtend",
            "796b6ca2312866505541ac830f46432712b68dfe"
        ],
        [
            "intros (b, Hb); rewrite Zplus_0_r in Hb.",
            "VernacExtend",
            "a528d3c8f010f1d26c8e32a8b595d3123b45464b"
        ],
        [
            "destruct u'_eq as (u', (Hu'1,Hu'2)); trivial.",
            "VernacExtend",
            "e81e7cbb31cb943a8f3d6c3aa9efac62d1ba0e8f"
        ],
        [
            "exists (Fmult beta (Float beta b (-1)) (Fplus beta d u'))%R.",
            "VernacExtend",
            "ecb615f6d9e5de07e4912dd7a3fbb0ce269a424e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite F2R_mult, F2R_plus, Hu'1.",
            "VernacExtend",
            "b4c17b828d4b7346884eff9184ee143e2f7998ff"
        ],
        [
            "unfold m; rewrite Rmult_comm.",
            "VernacExtend",
            "61c6c5797c89e5bc6c094de12bb93a6656b58c6e"
        ],
        [
            "unfold Rdiv; apply f_equal.",
            "VernacExtend",
            "f0c025e67192e43765e4f358c36ecbb3f2b6af07"
        ],
        [
            "unfold F2R; simpl; unfold Z.pow_pos; simpl.",
            "VernacExtend",
            "2b71365c4edaea7599216d6269da6d4742818757"
        ],
        [
            "rewrite Zmult_1_r, Hb, Z2R_mult.",
            "VernacExtend",
            "3688ce49444e6ec00f667dcae7418ab6e8eb6775"
        ],
        [
            "simpl; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "apply Rgt_not_eq, Rmult_lt_reg_l with (1 := Rlt_0_2).",
            "VernacExtend",
            "679f2d77dde257ed507f3934489af246eb4b1afc"
        ],
        [
            "rewrite Rmult_0_r, <- (Z2R_mult 2), <-Hb.",
            "VernacExtend",
            "cfa2a64f2bb7ee0029aa26b8e74f55223693a254"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "apply trans_eq with (-1+Fexp (Fplus beta d u'))%Z.",
            "VernacExtend",
            "5261b1117b3e7c2d8434e444f2808c988174247e"
        ],
        [
            "unfold Fmult.",
            "VernacExtend",
            "134fa25b7e64712a1d38b18d500e11e5b118680e"
        ],
        [
            "destruct (Fplus beta d u'); reflexivity.",
            "VernacExtend",
            "0aa79789ad31c39e2beeffdb91b6130e7fe55115"
        ],
        [
            "rewrite Zplus_comm; unfold Zminus; apply f_equal2.",
            "VernacExtend",
            "c76466f417b221e56a490e222e3467fe8fc6466f"
        ],
        [
            "2: reflexivity.",
            "VernacExtend",
            "96982d22d416486e18f14fc58d1a33677ca59890"
        ],
        [
            "rewrite Fexp_Fplus.",
            "VernacExtend",
            "ecd22449daead5be6fc7f98ef5b1e6a8416c51c9"
        ],
        [
            "rewrite Z.min_l.",
            "VernacExtend",
            "2da1b6279c5f2be5c24adda70677d224a1886526"
        ],
        [
            "now rewrite Fexp_d.",
            "VernacExtend",
            "d405b774067213410ae08f78baf2ce964c0e56e1"
        ],
        [
            "rewrite Hu'2; omega.",
            "VernacExtend",
            "4985278b96738219c32793b0742efe77604e66c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma m_eq_0: (0 = F2R d)%R -> exists f:float beta, F2R f = m /\\ (Fexp f = fexp (ln_beta beta (F2R u)) -1)%Z.",
            "VernacStartTheoremProof",
            "ca413e5a87ee0c650fce32d9cf892729d9535e37"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "specialize (Zeven_ex (radix_val beta)); rewrite Even_beta.",
            "VernacExtend",
            "796b6ca2312866505541ac830f46432712b68dfe"
        ],
        [
            "intros (b, Hb); rewrite Zplus_0_r in Hb.",
            "VernacExtend",
            "a528d3c8f010f1d26c8e32a8b595d3123b45464b"
        ],
        [
            "exists (Fmult beta (Float beta b (-1)) u)%R.",
            "VernacExtend",
            "ff20b74365beed4c14cc226e24856e8660d40e0e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite F2R_mult; unfold m; rewrite <- Y, Rplus_0_l.",
            "VernacExtend",
            "3afa100bf7a4dedee8ee46af98ff88d39f046017"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "unfold Rdiv; apply f_equal.",
            "VernacExtend",
            "f0c025e67192e43765e4f358c36ecbb3f2b6af07"
        ],
        [
            "unfold F2R; simpl; unfold Z.pow_pos; simpl.",
            "VernacExtend",
            "2b71365c4edaea7599216d6269da6d4742818757"
        ],
        [
            "rewrite Zmult_1_r, Hb, Z2R_mult.",
            "VernacExtend",
            "3688ce49444e6ec00f667dcae7418ab6e8eb6775"
        ],
        [
            "simpl; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "apply Rgt_not_eq, Rmult_lt_reg_l with (1 := Rlt_0_2).",
            "VernacExtend",
            "679f2d77dde257ed507f3934489af246eb4b1afc"
        ],
        [
            "rewrite Rmult_0_r, <- (Z2R_mult 2), <-Hb.",
            "VernacExtend",
            "cfa2a64f2bb7ee0029aa26b8e74f55223693a254"
        ],
        [
            "apply radix_pos.",
            "VernacExtend",
            "0dcd1c467b6b40654e9649f327071230a0eb99a0"
        ],
        [
            "apply trans_eq with (-1+Fexp u)%Z.",
            "VernacExtend",
            "909ae452dd28c18be38cb6888a968c16b2ee5841"
        ],
        [
            "unfold Fmult.",
            "VernacExtend",
            "134fa25b7e64712a1d38b18d500e11e5b118680e"
        ],
        [
            "destruct u; reflexivity.",
            "VernacExtend",
            "42e9a9134aa60403114775c31117ed92a744f2ad"
        ],
        [
            "rewrite Zplus_comm, Cu; unfold Zminus; now apply f_equal2.",
            "VernacExtend",
            "942724f6a5cab2f4036bbcc6aa586fc3b3da6e4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fexp_m_eq_0: (0 = F2R d)%R -> (fexp (ln_beta beta (F2R u)-1) < fexp (ln_beta beta (F2R u))+1)%Z.",
            "VernacStartTheoremProof",
            "32936fe4e4aae5e3ff0401de0820946e82700d64"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "assert ((fexp (ln_beta beta (F2R u) - 1) <= fexp (ln_beta beta (F2R u))))%Z.",
            "VernacExtend",
            "eff5185235bcd1e5c4ed910aaf65e5b33f58a1e8"
        ],
        [
            "2: omega.",
            "VernacExtend",
            "d479151185a43f07b17d29025d6b6de4845088dc"
        ],
        [
            "destruct (ln_beta beta x) as (e,He).",
            "VernacExtend",
            "b8b3fd0885671b68d791e7b7a2c74b1cce1c51ed"
        ],
        [
            "rewrite Rabs_right in He.",
            "VernacExtend",
            "1e3ec2818626313b026375c9bbd77e7d26f37a6b"
        ],
        [
            "2: now left.",
            "VernacExtend",
            "9cd1a2dbd015d2f4543373d04c795a51f0c9f3e4"
        ],
        [
            "assert (e <= fexp e)%Z.",
            "VernacExtend",
            "f017c613e52f81f464795dc24203d180ea7a882a"
        ],
        [
            "apply exp_small_round_0_pos with beta (Zfloor) x...",
            "VernacExtend",
            "c819ac93b002f0d05e4a0ca37f0a7761af434836"
        ],
        [
            "now apply He, Rgt_not_eq.",
            "VernacExtend",
            "97fdcc58489e786a73a2ed779ce679424246956b"
        ],
        [
            "now rewrite <- d_eq, Y.",
            "VernacExtend",
            "02a8b7de62cde93fc3fde53556299850e8ae06d8"
        ],
        [
            "rewrite u_eq, round_UP_small_pos with (ex:=e); trivial.",
            "VernacExtend",
            "13c254a9dbfe1e3bfa826153df3d8db8bc0e8516"
        ],
        [
            "2: now apply He, Rgt_not_eq.",
            "VernacExtend",
            "453c23de7ad2d813613bf0c1e822309c8f0fc2a8"
        ],
        [
            "rewrite ln_beta_bpow.",
            "VernacExtend",
            "562ed7a7f197615f8fb2cc276e6bc8e10357a919"
        ],
        [
            "ring_simplify (fexp e + 1 - 1)%Z.",
            "VernacExtend",
            "ff048069d46ffb19e7e80ac1ac84405e532bcee8"
        ],
        [
            "replace (fexp (fexp e)) with (fexp e).",
            "VernacExtend",
            "909c74a658ec88e1962f424fb3881423608beb6c"
        ],
        [
            "case exists_NE_; intros V.",
            "VernacExtend",
            "3280103536278164e665e0e5b803fef6b806513e"
        ],
        [
            "contradict V; rewrite Even_beta; discriminate.",
            "VernacExtend",
            "ff00f6315723cccaee8405401c663b6196a345ad"
        ],
        [
            "rewrite (proj2 (V e)); omega.",
            "VernacExtend",
            "2f3e9bd8c0e6b440efd8d63e7031a995078f695c"
        ],
        [
            "apply sym_eq, valid_exp; omega.",
            "VernacExtend",
            "d2e090a504f49a9b1f2411f3c9347c9beea4f648"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fm: generic_format beta fexpe m.",
            "VernacStartTheoremProof",
            "b1d3856c4f44bc83ee6e5522839ce87ecd52b2cb"
        ],
        [
            "case (d_ge_0); intros Y.",
            "VernacExtend",
            "bda29f4983555354f8685bbfb8b000f81f84a2b4"
        ],
        [
            "destruct m_eq as (g,(Hg1,Hg2)); trivial.",
            "VernacExtend",
            "3f74bf18568db50fc12806b738c3cea87268b7ab"
        ],
        [
            "apply generic_format_F2R' with g.",
            "VernacExtend",
            "514ef450cdf5d5873dfa614530ec377ffcfe18cb"
        ],
        [
            "now apply sym_eq.",
            "VernacExtend",
            "fef6d39327ad6dbcb8bd592a66f35c86d0ac26ba"
        ],
        [
            "intros H; unfold canonic_exp; rewrite Hg2.",
            "VernacExtend",
            "b9d657e98af03dc5ac6d4339ae50a6003ba5763e"
        ],
        [
            "rewrite ln_beta_m; trivial.",
            "VernacExtend",
            "35acc7ad57e582e97a2c370c0976c62a47366d6d"
        ],
        [
            "rewrite <- Fexp_d; trivial.",
            "VernacExtend",
            "3760bfb45c0e677e5437d45fb2e3d95c1b8de955"
        ],
        [
            "rewrite Cd.",
            "VernacExtend",
            "f185a2949b2f1783eb78031dabb601419afa6167"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "generalize (fexpe_fexp (ln_beta beta (F2R d))).",
            "VernacExtend",
            "ad0386b8def4bdf2e14f5f35f51f51dfe8b1fa39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct m_eq_0 as (g,(Hg1,Hg2)); trivial.",
            "VernacExtend",
            "62085e2082882874d5692aeda8286bfd396d1622"
        ],
        [
            "apply generic_format_F2R' with g.",
            "VernacExtend",
            "514ef450cdf5d5873dfa614530ec377ffcfe18cb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros H; unfold canonic_exp; rewrite Hg2.",
            "VernacExtend",
            "b9d657e98af03dc5ac6d4339ae50a6003ba5763e"
        ],
        [
            "rewrite ln_beta_m_0; try assumption.",
            "VernacExtend",
            "12fb4b26080a34718ee35d797816ac2f9f9c482c"
        ],
        [
            "apply Zle_trans with (1:=fexpe_fexp _).",
            "VernacExtend",
            "0d125065364df973e34a6ecee8bede5c0eab84fb"
        ],
        [
            "assert (fexp (ln_beta beta (F2R u)-1) < fexp (ln_beta beta (F2R u))+1)%Z;[idtac|omega].",
            "VernacExtend",
            "01b116234d8e2624e5c44f61f2e9c94352ae3b4c"
        ],
        [
            "now apply fexp_m_eq_0.",
            "VernacExtend",
            "f45d235f1907406ba145e20bdb416947ce4b2de8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zm: exists g : float beta, F2R g = m /\\ canonic beta fexpe g /\\ Zeven (Fnum g) = true.",
            "VernacStartTheoremProof",
            "6ec48b3c939b7bfe2211acae8d6cf3b343e11695"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "case (d_ge_0); intros Y.",
            "VernacExtend",
            "bda29f4983555354f8685bbfb8b000f81f84a2b4"
        ],
        [
            "destruct m_eq as (g,(Hg1,Hg2)); trivial.",
            "VernacExtend",
            "3f74bf18568db50fc12806b738c3cea87268b7ab"
        ],
        [
            "apply exists_even_fexp_lt.",
            "VernacExtend",
            "b9463506ccd0695eb90c95ee1e56bf2175bfe767"
        ],
        [
            "exists g; split; trivial.",
            "VernacExtend",
            "70ba3928cb64b7a09cb8b3d027840391fc50de50"
        ],
        [
            "rewrite Hg2.",
            "VernacExtend",
            "829ea0bae95d522f69749bc1ce1b090bca2b7459"
        ],
        [
            "rewrite ln_beta_m; trivial.",
            "VernacExtend",
            "35acc7ad57e582e97a2c370c0976c62a47366d6d"
        ],
        [
            "rewrite <- Fexp_d; trivial.",
            "VernacExtend",
            "3760bfb45c0e677e5437d45fb2e3d95c1b8de955"
        ],
        [
            "rewrite Cd.",
            "VernacExtend",
            "f185a2949b2f1783eb78031dabb601419afa6167"
        ],
        [
            "unfold canonic_exp.",
            "VernacExtend",
            "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
        ],
        [
            "generalize (fexpe_fexp (ln_beta beta (F2R d))).",
            "VernacExtend",
            "ad0386b8def4bdf2e14f5f35f51f51dfe8b1fa39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct m_eq_0 as (g,(Hg1,Hg2)); trivial.",
            "VernacExtend",
            "62085e2082882874d5692aeda8286bfd396d1622"
        ],
        [
            "apply exists_even_fexp_lt.",
            "VernacExtend",
            "b9463506ccd0695eb90c95ee1e56bf2175bfe767"
        ],
        [
            "exists g; split; trivial.",
            "VernacExtend",
            "70ba3928cb64b7a09cb8b3d027840391fc50de50"
        ],
        [
            "rewrite Hg2.",
            "VernacExtend",
            "829ea0bae95d522f69749bc1ce1b090bca2b7459"
        ],
        [
            "rewrite ln_beta_m_0; trivial.",
            "VernacExtend",
            "3f5d62131e9dcc97faa03501e61563d744dac123"
        ],
        [
            "apply Zle_lt_trans with (1:=fexpe_fexp _).",
            "VernacExtend",
            "a6a2f7586d4924c2ada87f4f3514e2f5b45ba98e"
        ],
        [
            "assert (fexp (ln_beta beta (F2R u)-1) < fexp (ln_beta beta (F2R u))+1)%Z;[idtac|omega].",
            "VernacExtend",
            "01b116234d8e2624e5c44f61f2e9c94352ae3b4c"
        ],
        [
            "now apply fexp_m_eq_0.",
            "VernacExtend",
            "f45d235f1907406ba145e20bdb416947ce4b2de8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma DN_odd_d_aux: forall z, (F2R d<= z< F2R u)%R -> Rnd_DN_pt (generic_format beta fexp) z (F2R d).",
            "VernacStartTheoremProof",
            "9ebb63ecd3104db0ed060204ef438c99690de7d8"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros z Hz1.",
            "VernacExtend",
            "c99f28079dd2a1b5b3cd599ea5be2e5aec3d3040"
        ],
        [
            "replace (F2R d) with (round beta fexp Zfloor z).",
            "VernacExtend",
            "8c84b4819ce3a70cdb3b8be57922d8923847a6d4"
        ],
        [
            "apply round_DN_pt...",
            "VernacExtend",
            "884406c318b02180316764822f617990ec1c51ad"
        ],
        [
            "case (Rnd_DN_UP_pt_split _ _ _ _ Hd Hu (round beta fexp Zfloor z)).",
            "VernacExtend",
            "48afe0297f1b3c3ad7ea62c17c5ca5c9c2a209e0"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "intros Y; apply Rle_antisym; trivial.",
            "VernacExtend",
            "1f15e8e28f53185beffb76d67c4b216ddc8c6775"
        ],
        [
            "apply round_DN_pt...",
            "VernacExtend",
            "884406c318b02180316764822f617990ec1c51ad"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "apply Hz1.",
            "VernacExtend",
            "92b7d77aee9b073aefd5e48deeb670bbc2d36db1"
        ],
        [
            "intros Y; absurd (z < z)%R.",
            "VernacExtend",
            "60b632131d259067f0d5260989a02f52bbead209"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply Rlt_le_trans with (1:=proj2 Hz1), Rle_trans with (1:=Y).",
            "VernacExtend",
            "e04384af6a155bf15e1ee83b51bcc1b3a2d1d542"
        ],
        [
            "apply round_DN_pt...",
            "VernacExtend",
            "884406c318b02180316764822f617990ec1c51ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma UP_odd_d_aux: forall z, (F2R d< z <= F2R u)%R -> Rnd_UP_pt (generic_format beta fexp) z (F2R u).",
            "VernacStartTheoremProof",
            "2c5744b2f155abdbc8db60c1338c16bf5c3130f0"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros z Hz1.",
            "VernacExtend",
            "c99f28079dd2a1b5b3cd599ea5be2e5aec3d3040"
        ],
        [
            "replace (F2R u) with (round beta fexp Zceil z).",
            "VernacExtend",
            "76d5e05e991312eb7da33a470a2e1f60ffe958fe"
        ],
        [
            "apply round_UP_pt...",
            "VernacExtend",
            "76e1dae0c319836e409c92c6efc5f7490f4e6d87"
        ],
        [
            "case (Rnd_DN_UP_pt_split _ _ _ _ Hd Hu (round beta fexp Zceil z)).",
            "VernacExtend",
            "96d32a34a32b6f4559c4de925f9e44409bf84ebf"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "intros Y; absurd (z < z)%R.",
            "VernacExtend",
            "60b632131d259067f0d5260989a02f52bbead209"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply Rle_lt_trans with (2:=proj1 Hz1), Rle_trans with (2:=Y).",
            "VernacExtend",
            "1ea4e171f92954d4f32af77d6200034c04295a8f"
        ],
        [
            "apply round_UP_pt...",
            "VernacExtend",
            "76e1dae0c319836e409c92c6efc5f7490f4e6d87"
        ],
        [
            "intros Y; apply Rle_antisym; trivial.",
            "VernacExtend",
            "1f15e8e28f53185beffb76d67c4b216ddc8c6775"
        ],
        [
            "apply round_UP_pt...",
            "VernacExtend",
            "76e1dae0c319836e409c92c6efc5f7490f4e6d87"
        ],
        [
            "apply Hu.",
            "VernacExtend",
            "51e4ba2a0f37212a61da6c69750614260faf5b8d"
        ],
        [
            "apply Hz1.",
            "VernacExtend",
            "92b7d77aee9b073aefd5e48deeb670bbc2d36db1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_odd_prop_pos: round beta fexp (Znearest choice) (round beta fexpe Zrnd_odd x) = round beta fexp (Znearest choice) x.",
            "VernacStartTheoremProof",
            "1ce94b2370a84e1346059be751429551dbf12f9e"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "set (o:=round beta fexpe Zrnd_odd x).",
            "VernacExtend",
            "b9cb0ec0e231d999069517c6e680d3b7f0223e37"
        ],
        [
            "case (generic_format_EM beta fexp x); intros Hx.",
            "VernacExtend",
            "aaa7c2cd3deae1747d9b226f3544dedf376c8442"
        ],
        [
            "replace o with x; trivial.",
            "VernacExtend",
            "056cbd121d389d10a713ce5e0854ff0e05bf582a"
        ],
        [
            "unfold o; apply sym_eq, round_generic...",
            "VernacExtend",
            "753b94bb29d645da0c935f864c96c118fa6969f7"
        ],
        [
            "now apply generic_format_fexpe_fexp.",
            "VernacExtend",
            "4ae33ab82a3e2dc4971ffa085a022bbeab6e7a25"
        ],
        [
            "assert (K1:(F2R d <= o)%R).",
            "VernacExtend",
            "d02ddb3de0ceae1acd5d514287fc5f45249cfad1"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "apply generic_format_fexpe_fexp, Hd.",
            "VernacExtend",
            "88272ac4c014801833503794d98002fd164ae4f1"
        ],
        [
            "apply Hd.",
            "VernacExtend",
            "b2c76316200582fcad9318af1ed397a8dea483e3"
        ],
        [
            "assert (K2:(o <= F2R u)%R).",
            "VernacExtend",
            "faf9f731a1bfb7f9fb247faa94a8c5f7f4a473bc"
        ],
        [
            "apply round_le_generic...",
            "VernacExtend",
            "7f2a01600a932d09b4d49ff42273647f7ead7071"
        ],
        [
            "apply generic_format_fexpe_fexp, Hu.",
            "VernacExtend",
            "9b433daa6e887d63ba1dc5f8f22c3b9fa815c122"
        ],
        [
            "apply Hu.",
            "VernacExtend",
            "51e4ba2a0f37212a61da6c69750614260faf5b8d"
        ],
        [
            "assert (P:(x <> m -> o=m -> (forall P:Prop, P))).",
            "VernacExtend",
            "11b4b6dd33b4923e170455e61ddb7df6fadaf6a6"
        ],
        [
            "intros Y1 Y2.",
            "VernacExtend",
            "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
        ],
        [
            "assert (H:(Rnd_odd_pt beta fexpe x o)).",
            "VernacExtend",
            "db57e91b150cc2b52692911470c2f45b04bb117d"
        ],
        [
            "apply round_odd_pt...",
            "VernacExtend",
            "9aae4d24c30cab8687a29d6df60dfdf3f2808902"
        ],
        [
            "destruct H as (_,H); destruct H.",
            "VernacExtend",
            "9926ba8893910c90a65fb5bf47d4b9a450f10234"
        ],
        [
            "absurd (x=m)%R; try trivial.",
            "VernacExtend",
            "bd0e5551a1ac914ce7872b94ac1ecd8e35da793c"
        ],
        [
            "now rewrite <- Y2, H.",
            "VernacExtend",
            "3696819d6c32891722715ac7a48fcbfaf2c6a79a"
        ],
        [
            "destruct H as (_,(k,(Hk1,(Hk2,Hk3)))).",
            "VernacExtend",
            "5013f64773480c157b74f6e35a486c5ef2ca38f9"
        ],
        [
            "destruct Zm as (k',(Hk'1,(Hk'2,Hk'3))).",
            "VernacExtend",
            "44ee857a958bc5d5eb71444d75fd393af98622de"
        ],
        [
            "absurd (true=false).",
            "VernacExtend",
            "9eee97e974560169b3d65a974b1c1fa7328f70d0"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "rewrite <- Hk3, <- Hk'3.",
            "VernacExtend",
            "83b0524be49b0117db4eb94ecbcf54dc801c61f6"
        ],
        [
            "apply f_equal, f_equal.",
            "VernacExtend",
            "dbee398c1481d56d1162d5a55d6cc963deb55e93"
        ],
        [
            "apply canonic_unicity with fexpe...",
            "VernacExtend",
            "2f604ddc581cb8867ff9291486778bb4dbcaa4fb"
        ],
        [
            "now rewrite Hk'1, <- Y2.",
            "VernacExtend",
            "cd018fbaf78b34715ef8d9f0a5b6002d89e00259"
        ],
        [
            "assert (generic_format beta fexp o -> (forall P:Prop, P)).",
            "VernacExtend",
            "19fe3abc353c8fee21406efad256959549d32498"
        ],
        [
            "intros Y.",
            "VernacExtend",
            "6403c41a4624fbae194ef6385b423d20559c2010"
        ],
        [
            "assert (H:(Rnd_odd_pt beta fexpe x o)).",
            "VernacExtend",
            "db57e91b150cc2b52692911470c2f45b04bb117d"
        ],
        [
            "apply round_odd_pt...",
            "VernacExtend",
            "9aae4d24c30cab8687a29d6df60dfdf3f2808902"
        ],
        [
            "destruct H as (_,H); destruct H.",
            "VernacExtend",
            "9926ba8893910c90a65fb5bf47d4b9a450f10234"
        ],
        [
            "absurd (generic_format beta fexp x); trivial.",
            "VernacExtend",
            "877cb897e250610d19e3fca539d8879b0467772e"
        ],
        [
            "now rewrite <- H.",
            "VernacExtend",
            "263ddf4271621bf4b397740764d4ad46d50c2bb1"
        ],
        [
            "destruct H as (_,(k,(Hk1,(Hk2,Hk3)))).",
            "VernacExtend",
            "5013f64773480c157b74f6e35a486c5ef2ca38f9"
        ],
        [
            "destruct (exists_even_fexp_lt fexpe o) as (k',(Hk'1,(Hk'2,Hk'3))).",
            "VernacExtend",
            "e3daffeea9ff2abf80636e2cbcc15f6bdeb53092"
        ],
        [
            "eexists; split.",
            "VernacExtend",
            "77e2aaa33efc716d96c06dffa992c92f9a27d1e9"
        ],
        [
            "apply sym_eq, Y.",
            "VernacExtend",
            "8ad53e041de57750e196545d5304ad288b537ef1"
        ],
        [
            "simpl; unfold canonic_exp.",
            "VernacExtend",
            "252e171187d365611aa45de3fed3a5791b4791eb"
        ],
        [
            "apply Zle_lt_trans with (1:=fexpe_fexp _).",
            "VernacExtend",
            "a6a2f7586d4924c2ada87f4f3514e2f5b45ba98e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "absurd (true=false).",
            "VernacExtend",
            "9eee97e974560169b3d65a974b1c1fa7328f70d0"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "rewrite <- Hk3, <- Hk'3.",
            "VernacExtend",
            "83b0524be49b0117db4eb94ecbcf54dc801c61f6"
        ],
        [
            "apply f_equal, f_equal.",
            "VernacExtend",
            "dbee398c1481d56d1162d5a55d6cc963deb55e93"
        ],
        [
            "apply canonic_unicity with fexpe...",
            "VernacExtend",
            "2f604ddc581cb8867ff9291486778bb4dbcaa4fb"
        ],
        [
            "now rewrite Hk'1, <- Hk1.",
            "VernacExtend",
            "eb738655913561387102e59d88d8cd3b4252f6fc"
        ],
        [
            "case K1; clear K1; intros K1.",
            "VernacExtend",
            "05c2b8c4554d5e221dfa9fd8802d909d703d9cdb"
        ],
        [
            "2: apply H; rewrite <- K1; apply Hd.",
            "VernacExtend",
            "f92c7f970c149e50f7367703442f02fe0838182a"
        ],
        [
            "case K2; clear K2; intros K2.",
            "VernacExtend",
            "91ec184897bd5d0aae30f52ff24b6ff22cb611f8"
        ],
        [
            "2: apply H; rewrite K2; apply Hu.",
            "VernacExtend",
            "6701a73e642bd204cd284f760f74bb96b541aed0"
        ],
        [
            "case (Rle_or_lt x m); intros Y;[destruct Y|idtac].",
            "VernacExtend",
            "4eb05d1117efaba323369c899a1ca94f321931df"
        ],
        [
            "apply trans_eq with (F2R d).",
            "VernacExtend",
            "ed1700f1db9314d9b6ea896a2496972b71e721d6"
        ],
        [
            "apply round_N_eq_DN_pt with (F2R u)...",
            "VernacExtend",
            "d9641c36c9b9e360b55c6f60138bb58d97ae6a32"
        ],
        [
            "apply DN_odd_d_aux; split; try left; assumption.",
            "VernacExtend",
            "5b902470625a6df5095dab90c001cfdbac369d0e"
        ],
        [
            "apply UP_odd_d_aux; split; try left; assumption.",
            "VernacExtend",
            "3b903e9ee8136215ea99277fcea6fa1ba49c6646"
        ],
        [
            "assert (o <= (F2R d + F2R u) / 2)%R.",
            "VernacExtend",
            "cc1c7227eb2ff4a9d893273429e743bf7a2a3eb2"
        ],
        [
            "apply round_le_generic...",
            "VernacExtend",
            "7f2a01600a932d09b4d49ff42273647f7ead7071"
        ],
        [
            "apply Fm.",
            "VernacExtend",
            "6b6d1cbcc94a65edfd69df63efc8cb427da3f4d5"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "destruct H1; trivial.",
            "VernacExtend",
            "6dacc53370c2cccff4bcf88c8346fb242787fc6e"
        ],
        [
            "apply P.",
            "VernacExtend",
            "77ec7a77c147bdc26d1c81d5a9f0d33da7fe6a48"
        ],
        [
            "now apply Rlt_not_eq.",
            "VernacExtend",
            "7c469637fc05542bf9c3c4fab85774b12e6b8f93"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply sym_eq, round_N_eq_DN_pt with (F2R u)...",
            "VernacExtend",
            "8ce2a4c1c9f0d14625173ebdafa125346b5643e5"
        ],
        [
            "replace o with x.",
            "VernacExtend",
            "61a61c71cd090242421a2bd714906ac512cdb2ef"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply sym_eq, round_generic...",
            "VernacExtend",
            "0484a71b56a2283f3a63835d4c5ebb76ad8a6ccd"
        ],
        [
            "rewrite H0; apply Fm.",
            "VernacExtend",
            "7e87c3423ff52011afb155c44a446e987048c2ae"
        ],
        [
            "apply trans_eq with (F2R u).",
            "VernacExtend",
            "fa1976cee7c7b61d2534b03c0a2c13efd9d42a52"
        ],
        [
            "apply round_N_eq_UP_pt with (F2R d)...",
            "VernacExtend",
            "5ea0120b198363dc4690bce66f1b81097a9841b9"
        ],
        [
            "apply DN_odd_d_aux; split; try left; assumption.",
            "VernacExtend",
            "5b902470625a6df5095dab90c001cfdbac369d0e"
        ],
        [
            "apply UP_odd_d_aux; split; try left; assumption.",
            "VernacExtend",
            "3b903e9ee8136215ea99277fcea6fa1ba49c6646"
        ],
        [
            "assert ((F2R d + F2R u) / 2 <= o)%R.",
            "VernacExtend",
            "e9cec2058b948285c1f3d24d35f19f5968c887c5"
        ],
        [
            "apply round_ge_generic...",
            "VernacExtend",
            "b942d5b4477c026dd26bf182ff70653039654af9"
        ],
        [
            "apply Fm.",
            "VernacExtend",
            "6b6d1cbcc94a65edfd69df63efc8cb427da3f4d5"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "destruct H0; trivial.",
            "VernacExtend",
            "4a4ce1556af37f4d4d49a81b284a8b932fa68747"
        ],
        [
            "apply P.",
            "VernacExtend",
            "77ec7a77c147bdc26d1c81d5a9f0d33da7fe6a48"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "rewrite <- H0; trivial.",
            "VernacExtend",
            "27f8bb95b40a4924fa2a953846525ec538c6f9ac"
        ],
        [
            "apply sym_eq, round_N_eq_UP_pt with (F2R d)...",
            "VernacExtend",
            "293ab6c510bd6ba7d9beaf9193ded60c3d6906c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Odd_prop_aux.",
            "VernacEndSegment",
            "204008ddd9318cfee6462921187fbd4a5bed67d4"
        ],
        [
            "Section Odd_prop.",
            "VernacBeginSection",
            "a1dab9b03ebedbef9510e03acc6dc12a3d1b2b33"
        ],
        [
            "Variable beta : radix.",
            "VernacAssumption",
            "5414570a6751198892ee4a13f107deb4c633e62b"
        ],
        [
            "Hypothesis Even_beta: Zeven (radix_val beta)=true.",
            "VernacAssumption",
            "da12e05aa9187f88d2227ff469dbae5e7ef9888b"
        ],
        [
            "Variable fexp : Z -> Z.",
            "VernacAssumption",
            "c9cf8938d8929b51922f4ec187aafa959003e732"
        ],
        [
            "Variable fexpe : Z -> Z.",
            "VernacAssumption",
            "32a6514115aa9e88cefecf76546a65e4fead758b"
        ],
        [
            "Variable choice:Z->bool.",
            "VernacAssumption",
            "63a0c7d67fa03ac82d9da57cc7a18e006f5ba997"
        ],
        [
            "Context { valid_exp : Valid_exp fexp }.",
            "VernacContext",
            "ee7e72f13eb494c423b2621bcb97f515165b66dc"
        ],
        [
            "Context { exists_NE_ : Exists_NE beta fexp }.",
            "VernacContext",
            "ec78b1f5f8c514d3557b72255ee413d561363d1d"
        ],
        [
            "Context { valid_expe : Valid_exp fexpe }.",
            "VernacContext",
            "b69ea80c2e13b821119b0a4f03e9ca69d590da90"
        ],
        [
            "Context { exists_NE_e : Exists_NE beta fexpe }.",
            "VernacContext",
            "2ac0166b37f592a926e31492eee3cf14eb024dc6"
        ],
        [
            "Hypothesis fexpe_fexp: forall e, (fexpe e <= fexp e -2)%Z.",
            "VernacAssumption",
            "3bbfb515f756943c1e73a753ec5370b37e7b535e"
        ],
        [
            "Theorem canonizer: forall f, generic_format beta fexp f -> exists g : float beta, f = F2R g /\\ canonic beta fexp g.",
            "VernacStartTheoremProof",
            "4faf723c71ee0e17fb8e8759c9966b757b9c9e6d"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros f Hf.",
            "VernacExtend",
            "c19df1812f5aac92c483b278685c4b2ecd58345f"
        ],
        [
            "exists (Float beta (Ztrunc (scaled_mantissa beta fexp f)) (canonic_exp beta fexp f)).",
            "VernacExtend",
            "422d300425cc46dbf09567241feffa338afc23df"
        ],
        [
            "assert (L:(f = F2R (Float beta (Ztrunc (scaled_mantissa beta fexp f)) (canonic_exp beta fexp f)))).",
            "VernacExtend",
            "8a171664df7b118e95e577120657da2d17a3599e"
        ],
        [
            "apply trans_eq with (round beta fexp Ztrunc f).",
            "VernacExtend",
            "5ac28ef4770bad86cb739002cf119595064b7664"
        ],
        [
            "apply sym_eq, round_generic...",
            "VernacExtend",
            "0484a71b56a2283f3a63835d4c5ebb76ad8a6ccd"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "unfold canonic; rewrite <- L.",
            "VernacExtend",
            "8906d29c50d464a6cb355b3becc5e4f97446e520"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem round_odd_prop: forall x, round beta fexp (Znearest choice) (round beta fexpe Zrnd_odd x) = round beta fexp (Znearest choice) x.",
            "VernacStartTheoremProof",
            "09b44d5374570cc32782d5e5e1dd7be5323cfa69"
        ],
        [
            "Proof with auto with typeclass_instances.",
            "VernacProof",
            "c16343efcd37779057959eb30e1ff5afec0a83eb"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "case (total_order_T x 0); intros H; [case H; clear H; intros H | idtac].",
            "VernacExtend",
            "7e709d45fda6e22c790f01ef6d3d5e62fc859a3c"
        ],
        [
            "rewrite <- (Ropp_involutive x).",
            "VernacExtend",
            "1908e4ee868b5f81dd7393a2a516c6e4756cc5e4"
        ],
        [
            "rewrite round_odd_opp.",
            "VernacExtend",
            "b211a47fcbbe939e5f6bb9722bf2fdc439999539"
        ],
        [
            "rewrite 2!round_N_opp.",
            "VernacExtend",
            "f3b8d4bb0e4aad97084261531921180c448af914"
        ],
        [
            "apply f_equal.",
            "VernacExtend",
            "ba856cbef3c8e84dcef77c91c8515b497874875b"
        ],
        [
            "destruct (canonizer (round beta fexp Zfloor (-x))) as (d,(Hd1,Hd2)).",
            "VernacExtend",
            "7c6e4b75ffff14d39a5f195d0bfa383830ae90d7"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "destruct (canonizer (round beta fexp Zceil (-x))) as (u,(Hu1,Hu2)).",
            "VernacExtend",
            "8219c50b21d9a1a7fe1b8175e1b8bb82143bdd09"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "apply round_odd_prop_pos with d u...",
            "VernacExtend",
            "aaf020b3e5273ae370b8111c793d29eef6b1ae44"
        ],
        [
            "rewrite <- Hd1; apply round_DN_pt...",
            "VernacExtend",
            "057df9b831e91ee5661bcac3a3eb125f60b3810e"
        ],
        [
            "rewrite <- Hu1; apply round_UP_pt...",
            "VernacExtend",
            "fc1f0fcfcfc8ba148821b7fd830563b478ff25bb"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "rewrite H; repeat rewrite round_0...",
            "VernacExtend",
            "bde4b0b7d971f659eb3f4b98a20ee550ce1d1901"
        ],
        [
            "destruct (canonizer (round beta fexp Zfloor x)) as (d,(Hd1,Hd2)).",
            "VernacExtend",
            "3eacdd3a89a1fd4c286a0e14679ad545b5276ae9"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "destruct (canonizer (round beta fexp Zceil x)) as (u,(Hu1,Hu2)).",
            "VernacExtend",
            "71ff739b4977f208898e5bd6993723b53611e4ed"
        ],
        [
            "apply generic_format_round...",
            "VernacExtend",
            "55b5df3e9c740005b41509d39a039e0b1a6f5f87"
        ],
        [
            "apply round_odd_prop_pos with d u...",
            "VernacExtend",
            "aaf020b3e5273ae370b8111c793d29eef6b1ae44"
        ],
        [
            "rewrite <- Hd1; apply round_DN_pt...",
            "VernacExtend",
            "057df9b831e91ee5661bcac3a3eb125f60b3810e"
        ],
        [
            "rewrite <- Hu1; apply round_UP_pt...",
            "VernacExtend",
            "fc1f0fcfcfc8ba148821b7fd830563b478ff25bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Odd_prop.",
            "VernacEndSegment",
            "df62cf14caba1ea145e37deb5dcbd684b1382e32"
        ]
    ],
    "proofs": [
        {
            "name": "Zrnd_odd_Zodd",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros x Hx; unfold Zrnd_odd.",
                        "VernacExtend",
                        "af8d96ca7a3562e3d7f8142cbe0b747bf67c8c04"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T x (Z2R (Zfloor x))) as [H|H].",
                        "VernacExtend",
                        "5dbcfc92739e75d9d9a4c1699e007b75e003abfe"
                    ]
                },
                {
                    "command": [
                        "now contradict H.",
                        "VernacExtend",
                        "88ebc36abd3f2c9e77ebd18f0d0897ac117f885c"
                    ]
                },
                {
                    "command": [
                        "case_eq (Zeven (Zfloor x)).",
                        "VernacExtend",
                        "5664dc9979887cb10d6471efa207d4a1096d22e5"
                    ]
                },
                {
                    "command": [
                        "intros H'.",
                        "VernacExtend",
                        "d7903418c9c01fda86d2cc847b39424719d50154"
                    ]
                },
                {
                    "command": [
                        "rewrite Zceil_floor_neq.",
                        "VernacExtend",
                        "b4fc727910b2a0e4293920fe2596a742e2d62876"
                    ]
                },
                {
                    "command": [
                        "rewrite Zeven_plus, H'.",
                        "VernacExtend",
                        "dc6bcead238da922291f1bb136a397d383c90254"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "now apply sym_not_eq.",
                        "VernacExtend",
                        "e6f5fa16ec765cda93cf17444b5b6ced93cbe6d4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "round_odd_opp",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "intros x; unfold round.",
                        "VernacExtend",
                        "c98590148e6a6bcc0064182a88e56a3fdac48203"
                    ]
                },
                {
                    "command": [
                        "rewrite <- F2R_Zopp.",
                        "VernacExtend",
                        "fee744a8cf0293b57e4bea5c81b22afef33baeb7"
                    ]
                },
                {
                    "command": [
                        "unfold F2R; simpl.",
                        "VernacExtend",
                        "a8b73d273d1c692e5deb932d4bd557029927ed13"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2; apply f_equal.",
                        "VernacExtend",
                        "d59dca94e64d553630e3912335b70a9e094cd0eb"
                    ]
                },
                {
                    "command": [
                        "rewrite scaled_mantissa_opp.",
                        "VernacExtend",
                        "88c0a15c728ca1f5747eb5ebfaddf2989585bdfd"
                    ]
                },
                {
                    "command": [
                        "generalize (scaled_mantissa beta fexp x); intros r.",
                        "VernacExtend",
                        "6341aa3c8aaf65561dab964374485c8438afaba0"
                    ]
                },
                {
                    "command": [
                        "unfold Zrnd_odd.",
                        "VernacExtend",
                        "f9b93684d423c7233c8d7582ba65c171d9fe1bc9"
                    ]
                },
                {
                    "command": [
                        "case (Req_EM_T (- r) (Z2R (Zfloor (- r)))).",
                        "VernacExtend",
                        "97886c8a2f96012e97b1e9e3014e59e512c714fb"
                    ]
                },
                {
                    "command": [
                        "case (Req_EM_T r (Z2R (Zfloor r))).",
                        "VernacExtend",
                        "f3a721fa6e496c925c73a6e98a84006e446b8e0b"
                    ]
                },
                {
                    "command": [
                        "intros Y1 Y2.",
                        "VernacExtend",
                        "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
                    ]
                },
                {
                    "command": [
                        "apply eq_Z2R.",
                        "VernacExtend",
                        "ed31ca6bb4f2f5fc3c01443fad366367db69b7ed"
                    ]
                },
                {
                    "command": [
                        "now rewrite Z2R_opp, <- Y1, <-Y2.",
                        "VernacExtend",
                        "14fc925d79ecba564a50f063e5c6ba55359b678e"
                    ]
                },
                {
                    "command": [
                        "intros Y1 Y2.",
                        "VernacExtend",
                        "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
                    ]
                },
                {
                    "command": [
                        "absurd (r=Z2R (Zfloor r)); trivial.",
                        "VernacExtend",
                        "8327e5b3f9f9aedb0e19026552ef25e18ba1fef6"
                    ]
                },
                {
                    "command": [
                        "pattern r at 2; replace r with (-(-r))%R by ring.",
                        "VernacExtend",
                        "f89dcb908a749d4eca8356f0375fd8028ec9dadf"
                    ]
                },
                {
                    "command": [
                        "rewrite Y2, <- Z2R_opp.",
                        "VernacExtend",
                        "3b62e4c1dd41f07b201941a23f7e1dab4381e2e5"
                    ]
                },
                {
                    "command": [
                        "rewrite Zfloor_Z2R.",
                        "VernacExtend",
                        "76c32ec848cfdb0ff47d7c42d76ad58c824310bd"
                    ]
                },
                {
                    "command": [
                        "rewrite Z2R_opp, <- Y2.",
                        "VernacExtend",
                        "9f7354b204c828ce5800e809159909090fbab907"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "case (Req_EM_T r (Z2R (Zfloor r))).",
                        "VernacExtend",
                        "f3a721fa6e496c925c73a6e98a84006e446b8e0b"
                    ]
                },
                {
                    "command": [
                        "intros Y1 Y2.",
                        "VernacExtend",
                        "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
                    ]
                },
                {
                    "command": [
                        "absurd (-r=Z2R (Zfloor (-r)))%R; trivial.",
                        "VernacExtend",
                        "6b30082e9c5040b38803bc0f467551afd83db8ab"
                    ]
                },
                {
                    "command": [
                        "pattern r at 2; rewrite Y1.",
                        "VernacExtend",
                        "49933b6496638d893c5dd49920a4271c7d43ae1b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Z2R_opp, Zfloor_Z2R.",
                        "VernacExtend",
                        "e91dc0a6dfef8131d11b083b2edb2115a2f854c3"
                    ]
                },
                {
                    "command": [
                        "now rewrite Z2R_opp, <- Y1.",
                        "VernacExtend",
                        "e52d2cf735a0a096b994bb23b65046681324932b"
                    ]
                },
                {
                    "command": [
                        "intros Y1 Y2.",
                        "VernacExtend",
                        "2a8a47e6ecca05e7737e1636f5fbdb1460fad880"
                    ]
                },
                {
                    "command": [
                        "unfold Zceil; rewrite Ropp_involutive.",
                        "VernacExtend",
                        "316c0fcc0c2dce74d4049ffd0407e8f208019e7a"
                    ]
                },
                {
                    "command": [
                        "replace (Zeven (Zfloor (- r))) with (negb (Zeven (Zfloor r))).",
                        "VernacExtend",
                        "a083e19662e83e438220c798e98ee1d1a1edec41"
                    ]
                },
                {
                    "command": [
                        "case (Zeven (Zfloor r)); simpl; ring.",
                        "VernacExtend",
                        "8ec1dffaced7a2ac366222228286d066cf5498b4"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (Zeven (Zceil r)).",
                        "VernacExtend",
                        "cf21debe8468c48fb3219d828c72e7ac00309bbf"
                    ]
                },
                {
                    "command": [
                        "rewrite Zceil_floor_neq.",
                        "VernacExtend",
                        "b4fc727910b2a0e4293920fe2596a742e2d62876"
                    ]
                },
                {
                    "command": [
                        "rewrite Zeven_plus.",
                        "VernacExtend",
                        "eeb0ce5bfbcdc5ec50bab699364ca261e08595a5"
                    ]
                },
                {
                    "command": [
                        "destruct (Zeven (Zfloor r)); reflexivity.",
                        "VernacExtend",
                        "e7b5eea8600b75fff9c08f786822fe31cbf8b142"
                    ]
                },
                {
                    "command": [
                        "now apply sym_not_eq.",
                        "VernacExtend",
                        "e6f5fa16ec765cda93cf17444b5b6ced93cbe6d4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zeven_opp (Zfloor (- r))).",
                        "VernacExtend",
                        "851134b0a0e85452c1af0d73d4364bc015009a27"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply canonic_exp_opp.",
                        "VernacExtend",
                        "e6bbbe23fd21b5cf2938fbb73dc877c3c886cab3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rnd_odd_pt_unicity",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "intros x f1 f2 (Ff1,H1) (Ff2,H2).",
                        "VernacExtend",
                        "f182ab61d44f8e6f7afc55c76d1ad0ee27929689"
                    ]
                },
                {
                    "command": [
                        "case (generic_format_EM beta fexp x); intros L.",
                        "VernacExtend",
                        "678f0ca1b47ef46e813ce300b44d2be3495fc85c"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with x.",
                        "VernacExtend",
                        "f2e976305d9985c49b834ed59df1a245c9af59af"
                    ]
                },
                {
                    "command": [
                        "case H1; try easy.",
                        "VernacExtend",
                        "f6f94a8d7f9fc6d49020b68c304e8abc2204f6b7"
                    ]
                },
                {
                    "command": [
                        "intros (J,_); case J; intros J'.",
                        "VernacExtend",
                        "6f321742e50e6730d4cd2a63aa90b072183525ad"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_DN_pt_idempotent with format; assumption.",
                        "VernacExtend",
                        "49356304983c2a524372b8a35de438ba72fc1a86"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_UP_pt_idempotent with format; assumption.",
                        "VernacExtend",
                        "f38d560055cee96bf5ff13d20231872c498c882f"
                    ]
                },
                {
                    "command": [
                        "case H2; try easy.",
                        "VernacExtend",
                        "afa822f25f7bf216dc2475f41a8e1f4f298925ad"
                    ]
                },
                {
                    "command": [
                        "intros (J,_); case J; intros J'; apply sym_eq.",
                        "VernacExtend",
                        "f0d9b7638690bc8bca54e09592f7242c0a516eed"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_DN_pt_idempotent with format; assumption.",
                        "VernacExtend",
                        "49356304983c2a524372b8a35de438ba72fc1a86"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_UP_pt_idempotent with format; assumption.",
                        "VernacExtend",
                        "f38d560055cee96bf5ff13d20231872c498c882f"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1|(H1,H1')].",
                        "VernacExtend",
                        "e4b3f92b3a7aca08ce560cbb757bd02fdc9341f9"
                    ]
                },
                {
                    "command": [
                        "contradict L; now rewrite <- H1.",
                        "VernacExtend",
                        "1d3d1e51fba1e97313ce647d3b8d60c5b7455b16"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H2|(H2,H2')].",
                        "VernacExtend",
                        "a7a1eedaacd6fbe2ce83221aba8a3439a4a9e5b3"
                    ]
                },
                {
                    "command": [
                        "contradict L; now rewrite <- H2.",
                        "VernacExtend",
                        "24384bf3f3d159fed53130a39ba9d6273bacd70f"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [H1|H1]; destruct H2 as [H2|H2].",
                        "VernacExtend",
                        "b5436d0887b673825c737891995154d892551ef4"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_DN_pt_unicity with format x; assumption.",
                        "VernacExtend",
                        "67d9c9393efc33287d8979716c28eb5d14bad9e4"
                    ]
                },
                {
                    "command": [
                        "destruct H1' as (ff,(K1,(K2,K3))).",
                        "VernacExtend",
                        "2c147b63c7968ae4fcbc9608e69f96174d6c67b6"
                    ]
                },
                {
                    "command": [
                        "destruct H2' as (gg,(L1,(L2,L3))).",
                        "VernacExtend",
                        "619c5e7b88e524a4ee0dbb199ad9f3c9ff138a2f"
                    ]
                },
                {
                    "command": [
                        "absurd (true = false); try discriminate.",
                        "VernacExtend",
                        "2de79baec8ed5360837d5e0eaa53e73ccd49775e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- L3.",
                        "VernacExtend",
                        "8258b5c7d3d7707cc9299e5f3658f59c01df506e"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (negb (Zeven (Fnum ff))).",
                        "VernacExtend",
                        "58cc231544fed467d5b1e78bed51a5fdbe5edc99"
                    ]
                },
                {
                    "command": [
                        "rewrite K3; easy.",
                        "VernacExtend",
                        "11b7d84bed269f048ee5d617df74b8cba1ed37f9"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "generalize (DN_UP_parity_generic beta fexp).",
                        "VernacExtend",
                        "5510085bfe3c2b8a21f32c487a6c551af829f9fd"
                    ]
                },
                {
                    "command": [
                        "unfold DN_UP_parity_prop; intros T; apply (T x); clear T; try assumption...",
                        "VernacExtend",
                        "be2db3e96d875a9510735fc2160e1877158a4a76"
                    ]
                },
                {
                    "command": [
                        "rewrite <- K1; apply Rnd_DN_pt_unicity with (generic_format beta fexp) x; try easy...",
                        "VernacExtend",
                        "b9b2369382d2e55bff9225dedc44278319f57e5e"
                    ]
                },
                {
                    "command": [
                        "now apply round_DN_pt...",
                        "VernacExtend",
                        "b6524895671b7cb3172fb6883d276d67b0f524a5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- L1; apply Rnd_UP_pt_unicity with (generic_format beta fexp) x; try easy...",
                        "VernacExtend",
                        "c18663f92d796d6a1238e60c00e7fca3d5a3e242"
                    ]
                },
                {
                    "command": [
                        "now apply round_UP_pt...",
                        "VernacExtend",
                        "87ec1bd1ea2ecae03528d42916101a09038bea65"
                    ]
                },
                {
                    "command": [
                        "destruct H1' as (ff,(K1,(K2,K3))).",
                        "VernacExtend",
                        "2c147b63c7968ae4fcbc9608e69f96174d6c67b6"
                    ]
                },
                {
                    "command": [
                        "destruct H2' as (gg,(L1,(L2,L3))).",
                        "VernacExtend",
                        "619c5e7b88e524a4ee0dbb199ad9f3c9ff138a2f"
                    ]
                },
                {
                    "command": [
                        "absurd (true = false); try discriminate.",
                        "VernacExtend",
                        "2de79baec8ed5360837d5e0eaa53e73ccd49775e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- K3.",
                        "VernacExtend",
                        "114cd3e71851539911f0555ea992f8736d26d00d"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (negb (Zeven (Fnum gg))).",
                        "VernacExtend",
                        "637137d545c01d53b4cf74865085dd0afba5f17f"
                    ]
                },
                {
                    "command": [
                        "rewrite L3; easy.",
                        "VernacExtend",
                        "da13561dab7d04d1a2c7d3f7328c747d7d664976"
                    ]
                },
                {
                    "command": [
                        "apply sym_eq.",
                        "VernacExtend",
                        "f01eb728d9ceeac2915c66b52a7b50a0c452e949"
                    ]
                },
                {
                    "command": [
                        "generalize (DN_UP_parity_generic beta fexp).",
                        "VernacExtend",
                        "5510085bfe3c2b8a21f32c487a6c551af829f9fd"
                    ]
                },
                {
                    "command": [
                        "unfold DN_UP_parity_prop; intros T; apply (T x); clear T; try assumption...",
                        "VernacExtend",
                        "be2db3e96d875a9510735fc2160e1877158a4a76"
                    ]
                },
                {
                    "command": [
                        "rewrite <- L1; apply Rnd_DN_pt_unicity with (generic_format beta fexp) x; try easy...",
                        "VernacExtend",
                        "51c52aa4cdeca701ae09fd0a2fd9ef4f16e5f929"
                    ]
                },
                {
                    "command": [
                        "now apply round_DN_pt...",
                        "VernacExtend",
                        "b6524895671b7cb3172fb6883d276d67b0f524a5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- K1; apply Rnd_UP_pt_unicity with (generic_format beta fexp) x; try easy...",
                        "VernacExtend",
                        "f2732db55f58f6f7a4c0211babce4d119229ca76"
                    ]
                },
                {
                    "command": [
                        "now apply round_UP_pt...",
                        "VernacExtend",
                        "87ec1bd1ea2ecae03528d42916101a09038bea65"
                    ]
                },
                {
                    "command": [
                        "apply Rnd_UP_pt_unicity with format x; assumption.",
                        "VernacExtend",
                        "9bad2d2f5cb8e034dcac07efba572fa09f21d41b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "generic_format_fexpe_fexp",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "intros x Hx.",
                        "VernacExtend",
                        "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
                    ]
                },
                {
                    "command": [
                        "apply generic_inclusion_ln_beta with fexp; trivial; intros Hx2.",
                        "VernacExtend",
                        "d583995aa129471170203de767239e79998859ef"
                    ]
                },
                {
                    "command": [
                        "generalize (fexpe_fexp (ln_beta beta x)).",
                        "VernacExtend",
                        "f8ace58325c4166cc4b86b0f4d0fe4cf1fc13039"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "d_le_m",
            "line_nb": 431,
            "steps": [
                {
                    "command": [
                        "assert (F2R d <= F2R u)%R.",
                        "VernacExtend",
                        "bb31d05d446cdd86b60cd41cc5749d1763bd4219"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x.",
                        "VernacExtend",
                        "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
                    ]
                },
                {
                    "command": [
                        "apply Hd.",
                        "VernacExtend",
                        "b2c76316200582fcad9318af1ed397a8dea483e3"
                    ]
                },
                {
                    "command": [
                        "apply Hu.",
                        "VernacExtend",
                        "51e4ba2a0f37212a61da6c69750614260faf5b8d"
                    ]
                },
                {
                    "command": [
                        "unfold m.",
                        "VernacExtend",
                        "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "m_le_u",
            "line_nb": 439,
            "steps": [
                {
                    "command": [
                        "assert (F2R d <= F2R u)%R.",
                        "VernacExtend",
                        "bb31d05d446cdd86b60cd41cc5749d1763bd4219"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x.",
                        "VernacExtend",
                        "795cd4902a779137a2ca3d4d53ee3d5bd0e0d67f"
                    ]
                },
                {
                    "command": [
                        "apply Hd.",
                        "VernacExtend",
                        "b2c76316200582fcad9318af1ed397a8dea483e3"
                    ]
                },
                {
                    "command": [
                        "apply Hu.",
                        "VernacExtend",
                        "51e4ba2a0f37212a61da6c69750614260faf5b8d"
                    ]
                },
                {
                    "command": [
                        "unfold m.",
                        "VernacExtend",
                        "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fm",
            "line_nb": 602,
            "steps": [
                {
                    "command": [
                        "case (d_ge_0); intros Y.",
                        "VernacExtend",
                        "bda29f4983555354f8685bbfb8b000f81f84a2b4"
                    ]
                },
                {
                    "command": [
                        "destruct m_eq as (g,(Hg1,Hg2)); trivial.",
                        "VernacExtend",
                        "3f74bf18568db50fc12806b738c3cea87268b7ab"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_F2R' with g.",
                        "VernacExtend",
                        "514ef450cdf5d5873dfa614530ec377ffcfe18cb"
                    ]
                },
                {
                    "command": [
                        "now apply sym_eq.",
                        "VernacExtend",
                        "fef6d39327ad6dbcb8bd592a66f35c86d0ac26ba"
                    ]
                },
                {
                    "command": [
                        "intros H; unfold canonic_exp; rewrite Hg2.",
                        "VernacExtend",
                        "b9d657e98af03dc5ac6d4339ae50a6003ba5763e"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_beta_m; trivial.",
                        "VernacExtend",
                        "35acc7ad57e582e97a2c370c0976c62a47366d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Fexp_d; trivial.",
                        "VernacExtend",
                        "3760bfb45c0e677e5437d45fb2e3d95c1b8de955"
                    ]
                },
                {
                    "command": [
                        "rewrite Cd.",
                        "VernacExtend",
                        "f185a2949b2f1783eb78031dabb601419afa6167"
                    ]
                },
                {
                    "command": [
                        "unfold canonic_exp.",
                        "VernacExtend",
                        "993fc99c30cdbd2e74bd71e0fd5e49f000dffb04"
                    ]
                },
                {
                    "command": [
                        "generalize (fexpe_fexp (ln_beta beta (F2R d))).",
                        "VernacExtend",
                        "ad0386b8def4bdf2e14f5f35f51f51dfe8b1fa39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct m_eq_0 as (g,(Hg1,Hg2)); trivial.",
                        "VernacExtend",
                        "62085e2082882874d5692aeda8286bfd396d1622"
                    ]
                },
                {
                    "command": [
                        "apply generic_format_F2R' with g.",
                        "VernacExtend",
                        "514ef450cdf5d5873dfa614530ec377ffcfe18cb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros H; unfold canonic_exp; rewrite Hg2.",
                        "VernacExtend",
                        "b9d657e98af03dc5ac6d4339ae50a6003ba5763e"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_beta_m_0; try assumption.",
                        "VernacExtend",
                        "12fb4b26080a34718ee35d797816ac2f9f9c482c"
                    ]
                },
                {
                    "command": [
                        "apply Zle_trans with (1:=fexpe_fexp _).",
                        "VernacExtend",
                        "0d125065364df973e34a6ecee8bede5c0eab84fb"
                    ]
                },
                {
                    "command": [
                        "assert (fexp (ln_beta beta (F2R u)-1) < fexp (ln_beta beta (F2R u))+1)%Z;[idtac|omega].",
                        "VernacExtend",
                        "01b116234d8e2624e5c44f61f2e9c94352ae3b4c"
                    ]
                },
                {
                    "command": [
                        "now apply fexp_m_eq_0.",
                        "VernacExtend",
                        "f45d235f1907406ba145e20bdb416947ce4b2de8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}