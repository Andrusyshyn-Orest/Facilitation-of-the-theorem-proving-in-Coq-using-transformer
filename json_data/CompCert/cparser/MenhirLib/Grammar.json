{
    "filename": "cparser/MenhirLib/Grammar.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import Syntax.",
            "VernacRequire",
            "f7333e1bc90f5c9993df336e6bf762d9d566cbfe"
        ],
        [
            "Require Import Alphabet.",
            "VernacRequire",
            "319f2088e96907602758beab43ff96f8fdb554b7"
        ],
        [
            "Require Import Orders.",
            "VernacRequire",
            "d67f88dc745fe90e97a6549f11c8ff812e3fb5ee"
        ],
        [
            "Require Tuples.",
            "VernacRequire",
            "cb895c8c9aac29d9fcc23ddcbb0a6be180e388e8"
        ],
        [
            "Module Type Alphs.",
            "VernacDeclareModuleType",
            "0c61a56534c768b94c90edb98c1529b846d7ba36"
        ],
        [
            "Parameters terminal nonterminal : Type.",
            "VernacAssumption",
            "313cdf6a4407a803915213fe819480c40bd78dee"
        ],
        [
            "Declare Instance TerminalAlph: Alphabet terminal.",
            "VernacInstance",
            "d08faf7192bc73ae2123b15b56eb4f2143f84866"
        ],
        [
            "Declare Instance NonTerminalAlph: Alphabet nonterminal.",
            "VernacInstance",
            "78a73bee1c89de5ab9e378c116b888f004110bab"
        ],
        [
            "End Alphs.",
            "VernacEndSegment",
            "5bbb20b67594b3a856cfe1981072e1555bf2b4ba"
        ],
        [
            "Module Symbol(Import A:Alphs).",
            "VernacDefineModule",
            "8f7ab3d9251cf9722285bbd3f00cadb5eecb4133"
        ],
        [
            "Inductive symbol := | T: terminal -> symbol | NT: nonterminal -> symbol.",
            "VernacInductive",
            "7f4428d069dcbff0ba348d3ddf6857395c014352"
        ],
        [
            "Program Instance SymbolAlph : Alphabet symbol := { AlphabetComparable := {| compare := fun x y => match x, y return comparison with | T _, NT _ => Gt | NT _, T _ => Lt | T x, T y => compare x y | NT x, NT y => compare x y end |}; AlphabetFinite := {| all_list := map T all_list++map NT all_list |} }.",
            "VernacInstance",
            "3640e3fcb45955fb097651d0e1ab70167147ef5e"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x; destruct y; intuition; apply compare_antisym.",
            "VernacExtend",
            "53498a6ee856d507c0d801646eda29bc3ab17d8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x; destruct y; destruct z; intuition; try discriminate.",
            "VernacExtend",
            "3ec430949f67f0a47a26b4db75ddf18b5197a4bd"
        ],
        [
            "apply (compare_trans _ t0); intuition.",
            "VernacExtend",
            "c952da99ddeeda6874f4fe85c7068fa9f49e7bad"
        ],
        [
            "apply (compare_trans _ n0); intuition.",
            "VernacExtend",
            "e616098643bf45d143352caec6a150a6756c266b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "intros x y.",
            "VernacExtend",
            "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
        ],
        [
            "destruct x; destruct y; try discriminate; intros.",
            "VernacExtend",
            "3b3bd4bfdcb3155b9a882b7821ba1228f299af40"
        ],
        [
            "rewrite (compare_eq t t0); intuition.",
            "VernacExtend",
            "896ef58f7b95dbf8c6e32ce7a9c3e402c2df5804"
        ],
        [
            "rewrite (compare_eq n n0); intuition.",
            "VernacExtend",
            "96d842331f18cd22c18f477f8786a72257e68a60"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite in_app_iff.",
            "VernacExtend",
            "a44ebd311b9e7b2b97af8cffa97bd78b6ed93921"
        ],
        [
            "destruct x; [left | right]; apply in_map; apply all_list_forall.",
            "VernacExtend",
            "e88529573a498f2105ef668f8bc51cbc32b7afe4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Symbol.",
            "VernacEndSegment",
            "86ff5540197ded85c1af34f086a4d001708bda29"
        ],
        [
            "Module Type T.",
            "VernacDeclareModuleType",
            "18709602ad2aa67a64b22b7f0c3c272bf92b11c4"
        ],
        [
            "Export Tuples.",
            "VernacImport",
            "7185455a57c3555c52d4fb486fff9b811e97ff52"
        ],
        [
            "Include Alphs <+ Symbol.",
            "VernacInclude",
            "9b5171fa8bae0d4eecf46d341aabe00f67e6642b"
        ],
        [
            "Parameter symbol_semantic_type: symbol -> Type.",
            "VernacAssumption",
            "06bfe22f1fec8a28e07ef4eda830dad35d0170b4"
        ],
        [
            "Parameter production : Type.",
            "VernacAssumption",
            "12fe1bf4b2eb273fd3dfa96b9c7ee9be89a9e058"
        ],
        [
            "Declare Instance ProductionAlph : Alphabet production.",
            "VernacInstance",
            "982444ac87669a08ddbd340a778bd237c5e56d4d"
        ],
        [
            "Parameter prod_lhs: production -> nonterminal.",
            "VernacAssumption",
            "4646987320a41689594559fee1fe951d741a586c"
        ],
        [
            "Parameter prod_rhs_rev: production -> list symbol.",
            "VernacAssumption",
            "2ffd33b3d3b4e5756365d63bb77633f8e8e4518f"
        ],
        [
            "Parameter prod_action: forall p:production, arrows_left (map symbol_semantic_type (rev (prod_rhs_rev p))) (symbol_semantic_type (NT (prod_lhs p))).",
            "VernacAssumption",
            "eecf3a2af3b17bfcd70fc41701afc1a95017f8a1"
        ],
        [
            "End T.",
            "VernacEndSegment",
            "5f7f4e5b1207202de2b9b8fab051afb32f267d25"
        ],
        [
            "Module Defs(Import G:T).",
            "VernacDefineModule",
            "cffa3346dd46e53d4962fa9806d40a7523676b35"
        ],
        [
            "Definition token := {t:terminal & symbol_semantic_type (T t)}.",
            "VernacDefinition",
            "1bfeafa2442a88162cad9085950209de1e2c7084"
        ],
        [
            "Inductive parse_tree: forall (head_symbol:symbol) (word:list token) (semantic_value:symbol_semantic_type head_symbol), Type := | Terminal_pt: forall (t:terminal) (sem:symbol_semantic_type (T t)), parse_tree (T t) [existT (fun t => symbol_semantic_type (T t)) t sem] sem | Non_terminal_pt: forall {p:production} {word:list token} {semantic_values:tuple (map symbol_semantic_type (rev (prod_rhs_rev p)))}, parse_tree_list (rev (prod_rhs_rev p)) word semantic_values -> parse_tree (NT (prod_lhs p)) word (uncurry (prod_action p) semantic_values) with parse_tree_list: forall (head_symbols:list symbol) (word:list token) (semantic_values:tuple (map symbol_semantic_type head_symbols)), Type := | Nil_ptl: parse_tree_list [] [] () | Cons_ptl: forall {head_symbolt:symbol} {wordt:list token} {semantic_valuet:symbol_semantic_type head_symbolt}, parse_tree head_symbolt wordt semantic_valuet -> forall {head_symbolsq:list symbol} {wordq:list token} {semantic_valuesq:tuple (map symbol_semantic_type head_symbolsq)}, parse_tree_list head_symbolsq wordq semantic_valuesq -> parse_tree_list (head_symbolt::head_symbolsq) (wordt++wordq) (semantic_valuet, semantic_valuesq).",
            "VernacInductive",
            "dfae9b800775c03b4252d1559dfd8ddabc76ea20"
        ],
        [
            "Fixpoint pt_size {head_symbol word sem} (tree:parse_tree head_symbol word sem) := match tree with | Terminal_pt _ _ => 1 | Non_terminal_pt l => S (ptl_size l) end with ptl_size {head_symbols word sems} (tree:parse_tree_list head_symbols word sems) := match tree with | Nil_ptl => 0 | Cons_ptl t q => pt_size t + ptl_size q end.",
            "VernacFixpoint",
            "13e8a1c2315172fd645db630051abc5b1c2a826b"
        ],
        [
            "End Defs.",
            "VernacEndSegment",
            "e5c42fff3384ffa717a0ec819d3b7eaff5043179"
        ]
    ],
    "proofs": [
        {
            "name": "SymbolAlph_obligation_1",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "destruct x; destruct y; intuition; apply compare_antisym.",
                        "VernacExtend",
                        "53498a6ee856d507c0d801646eda29bc3ab17d8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SymbolAlph_obligation_2",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "destruct x; destruct y; destruct z; intuition; try discriminate.",
                        "VernacExtend",
                        "3ec430949f67f0a47a26b4db75ddf18b5197a4bd"
                    ]
                },
                {
                    "command": [
                        "apply (compare_trans _ t0); intuition.",
                        "VernacExtend",
                        "c952da99ddeeda6874f4fe85c7068fa9f49e7bad"
                    ]
                },
                {
                    "command": [
                        "apply (compare_trans _ n0); intuition.",
                        "VernacExtend",
                        "e616098643bf45d143352caec6a150a6756c266b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SymbolAlph_obligation_3",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros x y.",
                        "VernacExtend",
                        "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
                    ]
                },
                {
                    "command": [
                        "destruct x; destruct y; try discriminate; intros.",
                        "VernacExtend",
                        "3b3bd4bfdcb3155b9a882b7821ba1228f299af40"
                    ]
                },
                {
                    "command": [
                        "rewrite (compare_eq t t0); intuition.",
                        "VernacExtend",
                        "896ef58f7b95dbf8c6e32ce7a9c3e402c2df5804"
                    ]
                },
                {
                    "command": [
                        "rewrite (compare_eq n n0); intuition.",
                        "VernacExtend",
                        "96d842331f18cd22c18f477f8786a72257e68a60"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SymbolAlph_obligation_4",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "rewrite in_app_iff.",
                        "VernacExtend",
                        "a44ebd311b9e7b2b97af8cffa97bd78b6ed93921"
                    ]
                },
                {
                    "command": [
                        "destruct x; [left | right]; apply in_map; apply all_list_forall.",
                        "VernacExtend",
                        "e88529573a498f2105ef668f8bc51cbc32b7afe4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}