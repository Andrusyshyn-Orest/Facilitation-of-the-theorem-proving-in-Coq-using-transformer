{
    "filename": "cparser/MenhirLib/Main.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Grammar.",
            "VernacRequire",
            "92fc01aba52a6fd52138561977941637609c55ad"
        ],
        [
            "Require Automaton.",
            "VernacRequire",
            "2a0cbee8eee90ef23660cd2aaf73b263992155b4"
        ],
        [
            "Require Interpreter_safe.",
            "VernacRequire",
            "7be61a1bd7119d0b88570f87dc109324e0d86500"
        ],
        [
            "Require Interpreter_correct.",
            "VernacRequire",
            "17d8834017d57246a511c85a4787f18c95531e08"
        ],
        [
            "Require Interpreter_complete.",
            "VernacRequire",
            "6828ddcb9c8d6062a74dd51f5dd979cf27320550"
        ],
        [
            "Require Import Syntax.",
            "VernacRequire",
            "f7333e1bc90f5c9993df336e6bf762d9d566cbfe"
        ],
        [
            "Module Make(Export Aut:Automaton.T).",
            "VernacDefineModule",
            "108cd21cb62c3bf1c96a43b49ff5b8a7228f4779"
        ],
        [
            "Export Aut.Gram.",
            "VernacImport",
            "8020d270d0cc1879447f1a10ee1f977fbd2c3fea"
        ],
        [
            "Export Aut.GramDefs.",
            "VernacImport",
            "4f17dd62bf60e89d2f34e6f89ab7e95df65b8ea3"
        ],
        [
            "Module Import Inter := Interpreter.Make Aut.",
            "VernacDefineModule",
            "bb0e820a517da28da4f1977813c34ac4e53c5af5"
        ],
        [
            "Module Safe := Interpreter_safe.Make Aut Inter.",
            "VernacDefineModule",
            "c39fbd6d6d4270dd34caf9dbf2192c62abcc3454"
        ],
        [
            "Module Correct := Interpreter_correct.Make Aut Inter.",
            "VernacDefineModule",
            "6d3495437008143732008edd07a5233f56c5f6bc"
        ],
        [
            "Module Complete := Interpreter_complete.Make Aut Inter.",
            "VernacDefineModule",
            "deef27fae27503b8537a37fde5118e815f2059c0"
        ],
        [
            "Definition complete_validator:unit->bool := Complete.Valid.is_complete.",
            "VernacDefinition",
            "ad27b70dde48ac9ce00b503404949b4c5e98e821"
        ],
        [
            "Definition safe_validator:unit->bool := Safe.Valid.is_safe.",
            "VernacDefinition",
            "378af596c05dbbefd650a9f6b074e98a12c249e0"
        ],
        [
            "Definition parse (safe:safe_validator ()=true) init n_steps buffer : parse_result init:= Safe.parse_with_safe (Safe.Valid.is_safe_correct safe) init buffer n_steps.",
            "VernacDefinition",
            "b4b10907088e297b81522e15657515220d80a807"
        ],
        [
            "Theorem parse_correct (safe:safe_validator ()= true) init n_steps buffer: match parse safe init n_steps buffer with | Parsed_pr sem buffer_new => exists word, buffer = word ++ buffer_new /\\ inhabited (parse_tree (NT (start_nt init)) word sem) | _ => True end.",
            "VernacStartTheoremProof",
            "0b39fc2c7748a03a41d9d607781d3fcb4cc67ecc"
        ],
        [
            "unfold parse, Safe.parse_with_safe.",
            "VernacExtend",
            "5ff843f5dee826bc96a73fb707e0549b57651a21"
        ],
        [
            "pose proof (Correct.parse_correct init buffer n_steps).",
            "VernacExtend",
            "db7d1f601bb637afd80f8753f9a24e07fdc210a6"
        ],
        [
            "generalize (Safe.parse_no_err (Safe.Valid.is_safe_correct safe) init buffer n_steps).",
            "VernacExtend",
            "cbb988c8eb8170a9a29f5bb5533ee4fde7258671"
        ],
        [
            "destruct (Inter.parse init buffer n_steps); intros.",
            "VernacExtend",
            "56cc23dab0ebe5f186c2f7f1aceaa67bc65052d9"
        ],
        [
            "now destruct (n (eq_refl _)).",
            "VernacExtend",
            "7852cef756e7e6b8e4d460666a42cc8eb9e5e065"
        ],
        [
            "now destruct p; trivial.",
            "VernacExtend",
            "588f7ec62304757c4194ebb9919ccb7c98cceb75"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem parse_complete (safe:safe_validator () = true) init n_steps word buffer_end sem: complete_validator () = true -> forall tree:parse_tree (NT (start_nt init)) word sem, match parse safe init n_steps (word ++ buffer_end) with | Fail_pr => False | Parsed_pr sem_res buffer_end_res => sem_res = sem /\\ buffer_end_res = buffer_end /\\ pt_size tree <= n_steps | Timeout_pr => n_steps < pt_size tree end.",
            "VernacStartTheoremProof",
            "9ced3d5368a4418e4c3aebdf4e3ce36af07f4a25"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold parse, Safe.parse_with_safe.",
            "VernacExtend",
            "5ff843f5dee826bc96a73fb707e0549b57651a21"
        ],
        [
            "pose proof (Complete.parse_complete (Complete.Valid.is_complete_correct H) init _ buffer_end _ tree n_steps).",
            "VernacExtend",
            "616328f3d533662abd05e95597926ec3e6b18221"
        ],
        [
            "generalize (Safe.parse_no_err (Safe.Valid.is_safe_correct safe) init (word ++ buffer_end) n_steps).",
            "VernacExtend",
            "316fdb6f21d34a44fa76404e018bbc5b54f7ac16"
        ],
        [
            "destruct (Inter.parse init (word ++ buffer_end) n_steps); intros.",
            "VernacExtend",
            "b002306440406d724cce99035ff71173c7b0f7b8"
        ],
        [
            "now destruct (n eq_refl).",
            "VernacExtend",
            "e04ce024ef7945a2ae11e0fc21095fd087d8cc84"
        ],
        [
            "now exact H0.",
            "VernacExtend",
            "9c0daf312b8eebe8b104c8432bcb3e95b8dc6c6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem unambiguity: safe_validator () = true -> complete_validator () = true -> inhabited token -> forall init word, forall sem1 (tree1:parse_tree (NT (start_nt init)) word sem1), forall sem2 (tree2:parse_tree (NT (start_nt init)) word sem2), sem1 = sem2.",
            "VernacStartTheoremProof",
            "d86c4625603e666028935eac567da0b50545c6b2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "pose proof (parse_complete H init (pt_size tree1) word (Streams.const X) sem1) H0 tree1.",
            "VernacExtend",
            "c21b2930cc1ea86a8935bd3bba335cfb4606f335"
        ],
        [
            "pose proof (parse_complete H init (pt_size tree1) word (Streams.const X) sem2) H0 tree2.",
            "VernacExtend",
            "33113be5b6e257f7c3842f95fe2a7acbc8840d0b"
        ],
        [
            "destruct (parse H init (pt_size tree1) (word ++ Streams.const X)); intuition.",
            "VernacExtend",
            "d39800786e832b96cfd4b1673231eada302e6739"
        ],
        [
            "rewrite <- H3, H1; reflexivity.",
            "VernacExtend",
            "f23f73cb27ffece8678740545b7fc74532c0a4fc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Make.",
            "VernacEndSegment",
            "158dcf795fe84f422408437686b9ec9e7417690b"
        ]
    ],
    "proofs": [
        {
            "name": "parse_correct",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "unfold parse, Safe.parse_with_safe.",
                        "VernacExtend",
                        "5ff843f5dee826bc96a73fb707e0549b57651a21"
                    ]
                },
                {
                    "command": [
                        "pose proof (Correct.parse_correct init buffer n_steps).",
                        "VernacExtend",
                        "db7d1f601bb637afd80f8753f9a24e07fdc210a6"
                    ]
                },
                {
                    "command": [
                        "generalize (Safe.parse_no_err (Safe.Valid.is_safe_correct safe) init buffer n_steps).",
                        "VernacExtend",
                        "cbb988c8eb8170a9a29f5bb5533ee4fde7258671"
                    ]
                },
                {
                    "command": [
                        "destruct (Inter.parse init buffer n_steps); intros.",
                        "VernacExtend",
                        "56cc23dab0ebe5f186c2f7f1aceaa67bc65052d9"
                    ]
                },
                {
                    "command": [
                        "now destruct (n (eq_refl _)).",
                        "VernacExtend",
                        "7852cef756e7e6b8e4d460666a42cc8eb9e5e065"
                    ]
                },
                {
                    "command": [
                        "now destruct p; trivial.",
                        "VernacExtend",
                        "588f7ec62304757c4194ebb9919ccb7c98cceb75"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "parse_complete",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold parse, Safe.parse_with_safe.",
                        "VernacExtend",
                        "5ff843f5dee826bc96a73fb707e0549b57651a21"
                    ]
                },
                {
                    "command": [
                        "pose proof (Complete.parse_complete (Complete.Valid.is_complete_correct H) init _ buffer_end _ tree n_steps).",
                        "VernacExtend",
                        "616328f3d533662abd05e95597926ec3e6b18221"
                    ]
                },
                {
                    "command": [
                        "generalize (Safe.parse_no_err (Safe.Valid.is_safe_correct safe) init (word ++ buffer_end) n_steps).",
                        "VernacExtend",
                        "316fdb6f21d34a44fa76404e018bbc5b54f7ac16"
                    ]
                },
                {
                    "command": [
                        "destruct (Inter.parse init (word ++ buffer_end) n_steps); intros.",
                        "VernacExtend",
                        "b002306440406d724cce99035ff71173c7b0f7b8"
                    ]
                },
                {
                    "command": [
                        "now destruct (n eq_refl).",
                        "VernacExtend",
                        "e04ce024ef7945a2ae11e0fc21095fd087d8cc84"
                    ]
                },
                {
                    "command": [
                        "now exact H0.",
                        "VernacExtend",
                        "9c0daf312b8eebe8b104c8432bcb3e95b8dc6c6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unambiguity",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "pose proof (parse_complete H init (pt_size tree1) word (Streams.const X) sem1) H0 tree1.",
                        "VernacExtend",
                        "c21b2930cc1ea86a8935bd3bba335cfb4606f335"
                    ]
                },
                {
                    "command": [
                        "pose proof (parse_complete H init (pt_size tree1) word (Streams.const X) sem2) H0 tree2.",
                        "VernacExtend",
                        "33113be5b6e257f7c3842f95fe2a7acbc8840d0b"
                    ]
                },
                {
                    "command": [
                        "destruct (parse H init (pt_size tree1) (word ++ Streams.const X)); intuition.",
                        "VernacExtend",
                        "d39800786e832b96cfd4b1673231eada302e6739"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3, H1; reflexivity.",
                        "VernacExtend",
                        "f23f73cb27ffece8678740545b7fc74532c0a4fc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}