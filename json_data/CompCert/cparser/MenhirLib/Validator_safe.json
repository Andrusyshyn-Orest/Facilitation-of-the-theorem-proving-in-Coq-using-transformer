{
    "filename": "cparser/MenhirLib/Validator_safe.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Automaton.",
            "VernacRequire",
            "2a0cbee8eee90ef23660cd2aaf73b263992155b4"
        ],
        [
            "Require Import Alphabet.",
            "VernacRequire",
            "319f2088e96907602758beab43ff96f8fdb554b7"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import Syntax.",
            "VernacRequire",
            "f7333e1bc90f5c9993df336e6bf762d9d566cbfe"
        ],
        [
            "Module Make(Import A:Automaton.T).",
            "VernacDefineModule",
            "dd5d48cf97451a72eafee54b66f197b4fb42feee"
        ],
        [
            "Definition singleton_state_pred (state:state) := (fun state' => match compare state state' with Eq => true |_ => false end).",
            "VernacDefinition",
            "ae8d06d635660def04d122cbb501b55a491c2f7f"
        ],
        [
            "Definition past_state_of_state (state:state) := match state with | Init _ => [] | Ninit nis => past_state_of_non_init_state nis end.",
            "VernacDefinition",
            "9a3cb96ebbe27498423d60ed820e2731a56b46b2"
        ],
        [
            "Definition head_symbs_of_state (state:state) := match state with | Init _ => [] | Ninit s => last_symb_of_non_init_state s::past_symb_of_non_init_state s end.",
            "VernacDefinition",
            "60b6f7376b84a0374be8a8ddae4ea79d815f6209"
        ],
        [
            "Definition head_states_of_state (state:state) := singleton_state_pred state::past_state_of_state state.",
            "VernacDefinition",
            "fb1ddb112536b94a2218f8d7fabc3ed5cc1d1df8"
        ],
        [
            "Inductive prefix: list symbol -> list symbol -> Prop := | prefix_nil: forall l, prefix [] l | prefix_cons: forall l1 l2 x, prefix l1 l2 -> prefix (x::l1) (x::l2).",
            "VernacInductive",
            "c323ed31c92d2e3744cc3cd5170560e21bc43af7"
        ],
        [
            "Fixpoint is_prefix (l1 l2:list symbol):= match l1, l2 with | [], _ => true | t1::q1, t2::q2 => (compare_eqb t1 t2 && is_prefix q1 q2)%bool | _::_, [] => false end.",
            "VernacFixpoint",
            "0691a8f06d0c35a3a704c76eead76d5fdacc1336"
        ],
        [
            "Property is_prefix_correct (l1 l2:list symbol): is_prefix l1 l2 = true -> prefix l1 l2.",
            "VernacStartTheoremProof",
            "4cb2cb7261fb474f49a915c4ab083a607ce0ede8"
        ],
        [
            "revert l2.",
            "VernacExtend",
            "6b3ab4ee614c53dc7283008e38abb3bce2e40925"
        ],
        [
            "induction l1; intros.",
            "VernacExtend",
            "fb1b27cb856c7812b6af97a650698a744c9f86bc"
        ],
        [
            "apply prefix_nil.",
            "VernacExtend",
            "0745c774301a01b6ae891c94f259f8d01207da23"
        ],
        [
            "unfold is_prefix in H.",
            "VernacExtend",
            "500a379b1cc3a34f3c6176db9431d42d7698d209"
        ],
        [
            "destruct l2; intuition; try discriminate.",
            "VernacExtend",
            "a66efa66e4c6747408a224f405ed428766b7a660"
        ],
        [
            "rewrite Bool.andb_true_iff in H.",
            "VernacExtend",
            "ba58525d312efc47561811e99d6b1502db4084aa"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite compare_eqb_iff in H.",
            "VernacExtend",
            "bc5b4c9bb69024291de75d8e0f1d625b55b70d43"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "apply prefix_cons.",
            "VernacExtend",
            "32a29d191a9e161433a8ce8c9ab2afa8bd1b63d7"
        ],
        [
            "apply IHl1; intuition.",
            "VernacExtend",
            "0c7f85d1fcbc64c4b21d3b24aee582ac09aa2073"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shift_head_symbs := forall s, match action_table s with | Lookahead_act awp => forall t, match awp t with | Shift_act s2 _ => prefix (past_symb_of_non_init_state s2) (head_symbs_of_state s) | _ => True end | _ => True end.",
            "VernacDefinition",
            "12d1f52fc24c9b95903dbc7b8da350e962c4e4c5"
        ],
        [
            "Definition is_shift_head_symbs (_:unit) := forallb (fun s:state => match action_table s with | Lookahead_act awp => forallb (fun t => match awp t with | Shift_act s2 _ => is_prefix (past_symb_of_non_init_state s2) (head_symbs_of_state s) | _ => true end) all_list | _ => true end) all_list.",
            "VernacDefinition",
            "e140e54b297a943eca7c9c8e6ddc73e4717c9517"
        ],
        [
            "Property is_shift_head_symbs_correct: is_shift_head_symbs () = true -> shift_head_symbs.",
            "VernacStartTheoremProof",
            "1e967427169c2e80766a5c5c4f052d112de7a5e1"
        ],
        [
            "unfold is_shift_head_symbs, shift_head_symbs.",
            "VernacExtend",
            "c3df2a638e429b2a77779ce0e3706f0fa653262a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H s (all_list_forall s)).",
            "VernacExtend",
            "ee78d32719284321e92f181d8153b909fca449d0"
        ],
        [
            "destruct (action_table s); intuition.",
            "VernacExtend",
            "26303be1f268db3e3be0b01660595848db63a4f3"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H t (all_list_forall t)).",
            "VernacExtend",
            "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
        ],
        [
            "destruct (l t); intuition.",
            "VernacExtend",
            "e51faba1a44236faededaa6887df0fa10819d88d"
        ],
        [
            "apply is_prefix_correct; intuition.",
            "VernacExtend",
            "3c15e920121eb7da3fdf454cd7a5a4b8d76c644f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition goto_head_symbs := forall s nt, match goto_table s nt with | Some (exist _ s2 _) => prefix (past_symb_of_non_init_state s2) (head_symbs_of_state s) | None => True end.",
            "VernacDefinition",
            "4ffe8d0f68b100b47002d79e7c41aeaff890680d"
        ],
        [
            "Definition is_goto_head_symbs (_:unit) := forallb (fun s:state => forallb (fun nt => match goto_table s nt with | Some (exist _ s2 _) => is_prefix (past_symb_of_non_init_state s2) (head_symbs_of_state s) | None => true end) all_list) all_list.",
            "VernacDefinition",
            "0b9c27a584d274f4fbab492461068decc449c8e7"
        ],
        [
            "Property is_goto_head_symbs_correct: is_goto_head_symbs () = true -> goto_head_symbs.",
            "VernacStartTheoremProof",
            "ecdef2768d8e032119917b074a8b5381bc8c831b"
        ],
        [
            "unfold is_goto_head_symbs, goto_head_symbs.",
            "VernacExtend",
            "e910397ee9e0ba84a0806cccd7cf2837a09b6f01"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H s (all_list_forall s)).",
            "VernacExtend",
            "ee78d32719284321e92f181d8153b909fca449d0"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H nt (all_list_forall nt)).",
            "VernacExtend",
            "a4a07c7605b4e55159e30d5671e4bee99b444d8a"
        ],
        [
            "destruct (goto_table s nt); intuition.",
            "VernacExtend",
            "f10206fc8bfd83a014f96e28238697a07b86b9ab"
        ],
        [
            "destruct s0.",
            "VernacExtend",
            "e20d501942dc13e6f574502b72447872d76f1750"
        ],
        [
            "apply is_prefix_correct; intuition.",
            "VernacExtend",
            "3c15e920121eb7da3fdf454cd7a5a4b8d76c644f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive prefix_pred: list (state->bool) -> list (state->bool) -> Prop := | prefix_pred_nil: forall l, prefix_pred [] l | prefix_pred_cons: forall l1 l2 f1 f2, (forall x, implb (f2 x) (f1 x) = true) -> prefix_pred l1 l2 -> prefix_pred (f1::l1) (f2::l2).",
            "VernacInductive",
            "607d2fc28ce8d00db2c88457f5294c430fbb09aa"
        ],
        [
            "Fixpoint is_prefix_pred (l1 l2:list (state->bool)) := match l1, l2 with | [], _ => true | f1::q1, f2::q2 => (forallb (fun x => implb (f2 x) (f1 x)) all_list && is_prefix_pred q1 q2)%bool | _::_, [] => false end.",
            "VernacFixpoint",
            "d566c5b33ffe8f7b41aaf4ef93d00e8afd0de4a2"
        ],
        [
            "Property is_prefix_pred_correct (l1 l2:list (state->bool)) : is_prefix_pred l1 l2 = true -> prefix_pred l1 l2.",
            "VernacStartTheoremProof",
            "501e762a071029419d60bf3ac506ef8f4ca8dae5"
        ],
        [
            "revert l2.",
            "VernacExtend",
            "6b3ab4ee614c53dc7283008e38abb3bce2e40925"
        ],
        [
            "induction l1.",
            "VernacExtend",
            "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply prefix_pred_nil.",
            "VernacExtend",
            "e3b952ed5b4a830dbb665b5f76d1b8a1a2d6f9af"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct l2; intuition; try discriminate.",
            "VernacExtend",
            "a66efa66e4c6747408a224f405ed428766b7a660"
        ],
        [
            "unfold is_prefix_pred in H.",
            "VernacExtend",
            "75866f2533360623a1855aa044543ffd85dc70d2"
        ],
        [
            "rewrite Bool.andb_true_iff in H.",
            "VernacExtend",
            "ba58525d312efc47561811e99d6b1502db4084aa"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "apply prefix_pred_cons; intuition.",
            "VernacExtend",
            "dbdcf237e19f0af48a1d48dbafd45fb12fc4b072"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply all_list_forall.",
            "VernacExtend",
            "955f9c1cc1e33bebb2395a4d2fe2d6c9d61a3dd0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition shift_past_state := forall s, match action_table s with | Lookahead_act awp => forall t, match awp t with | Shift_act s2 _ => prefix_pred (past_state_of_non_init_state s2) (head_states_of_state s) | _ => True end | _ => True end.",
            "VernacDefinition",
            "9f1fe88f6f197c46a67312abeb2637adc7dae558"
        ],
        [
            "Definition is_shift_past_state (_:unit) := forallb (fun s:state => match action_table s with | Lookahead_act awp => forallb (fun t => match awp t with | Shift_act s2 _ => is_prefix_pred (past_state_of_non_init_state s2) (head_states_of_state s) | _ => true end) all_list | _ => true end) all_list.",
            "VernacDefinition",
            "dff26c27b3bee64948eb071dc98a39bf131a7fac"
        ],
        [
            "Property is_shift_past_state_correct: is_shift_past_state () = true -> shift_past_state.",
            "VernacStartTheoremProof",
            "6be69911bd09e430dccd229737e507f0aafe2a83"
        ],
        [
            "unfold is_shift_past_state, shift_past_state.",
            "VernacExtend",
            "c2a91c2a4cd0cd6bd1b1bbfd9b8c191d84f05f3d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H s (all_list_forall s)).",
            "VernacExtend",
            "ee78d32719284321e92f181d8153b909fca449d0"
        ],
        [
            "destruct (action_table s); intuition.",
            "VernacExtend",
            "26303be1f268db3e3be0b01660595848db63a4f3"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H t (all_list_forall t)).",
            "VernacExtend",
            "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
        ],
        [
            "destruct (l t); intuition.",
            "VernacExtend",
            "e51faba1a44236faededaa6887df0fa10819d88d"
        ],
        [
            "apply is_prefix_pred_correct; intuition.",
            "VernacExtend",
            "35997b01fe2269946582659a63b5516cf1eeb01f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition goto_past_state := forall s nt, match goto_table s nt with | Some (exist _ s2 _) => prefix_pred (past_state_of_non_init_state s2) (head_states_of_state s) | None => True end.",
            "VernacDefinition",
            "dad54c1c22757568e6bd47ab836aacc814094170"
        ],
        [
            "Definition is_goto_past_state (_:unit) := forallb (fun s:state => forallb (fun nt => match goto_table s nt with | Some (exist _ s2 _) => is_prefix_pred (past_state_of_non_init_state s2) (head_states_of_state s) | None => true end) all_list) all_list.",
            "VernacDefinition",
            "3a5d79a6d3ed272dedbfb6ee6d7c1e9d1b93a915"
        ],
        [
            "Property is_goto_past_state_correct : is_goto_past_state () = true -> goto_past_state.",
            "VernacStartTheoremProof",
            "cbbc50028909409e3bd868e16460c1cf4bfaaa7c"
        ],
        [
            "unfold is_goto_past_state, goto_past_state.",
            "VernacExtend",
            "fd3fb2514afd277b199a3cb88191249f4b68cac9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H s (all_list_forall s)).",
            "VernacExtend",
            "ee78d32719284321e92f181d8153b909fca449d0"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H nt (all_list_forall nt)).",
            "VernacExtend",
            "a4a07c7605b4e55159e30d5671e4bee99b444d8a"
        ],
        [
            "destruct (goto_table s nt); intuition.",
            "VernacExtend",
            "f10206fc8bfd83a014f96e28238697a07b86b9ab"
        ],
        [
            "destruct s0.",
            "VernacExtend",
            "e20d501942dc13e6f574502b72447872d76f1750"
        ],
        [
            "apply is_prefix_pred_correct; intuition.",
            "VernacExtend",
            "35997b01fe2269946582659a63b5516cf1eeb01f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive state_valid_after_pop (s:state): list symbol -> list (state -> bool) -> Prop := | state_valid_after_pop_nil1: forall p pl, p s = true -> state_valid_after_pop s [] (p::pl) | state_valid_after_pop_nil2: forall sl, state_valid_after_pop s sl [] | state_valid_after_pop_cons: forall st sq p pl, state_valid_after_pop s sq pl -> state_valid_after_pop s (st::sq) (p::pl).",
            "VernacInductive",
            "2ad0e110f379d79563f79374d9d4da209ed38647"
        ],
        [
            "Fixpoint is_state_valid_after_pop (state:state) (to_pop:list symbol) annot := match annot, to_pop with | [], _ => true | p::_, [] => p state | p::pl, s::sl => is_state_valid_after_pop state sl pl end.",
            "VernacFixpoint",
            "ffc7cedc71670a84cafec435cb7d231917010a72"
        ],
        [
            "Property is_state_valid_after_pop_complete state sl pl : state_valid_after_pop state sl pl -> is_state_valid_after_pop state sl pl = true.",
            "VernacStartTheoremProof",
            "da4765e853a4fc6a95d07c2efa7e477c7355cd02"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction H; intuition.",
            "VernacExtend",
            "504dbc07a2b01c087bf85912f6c42fa1272c658d"
        ],
        [
            "destruct sl; intuition.",
            "VernacExtend",
            "5f23b3597d6abb7d97ccd1b2963a95e5c987d24d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition valid_for_reduce (state:state) prod := prefix (prod_rhs_rev prod) (head_symbs_of_state state) /\\ forall state_new, state_valid_after_pop state_new (prod_rhs_rev prod) (head_states_of_state state) -> goto_table state_new (prod_lhs prod) = None -> match state_new with | Init i => prod_lhs prod = start_nt i | Ninit _ => False end.",
            "VernacDefinition",
            "b4b4bada52e5e2c38ebeed2e1dc92dedb772c444"
        ],
        [
            "Definition is_valid_for_reduce (state:state) prod:= (is_prefix (prod_rhs_rev prod) (head_symbs_of_state state) && forallb (fun state_new => if is_state_valid_after_pop state_new (prod_rhs_rev prod) (head_states_of_state state) then match goto_table state_new (prod_lhs prod) with | Some _ => true | None => match state_new with | Init i => compare_eqb (prod_lhs prod) (start_nt i) | Ninit _ => false end end else true) all_list)%bool.",
            "VernacDefinition",
            "70b364964b63da640abc0abf3c507c171f6161bc"
        ],
        [
            "Property is_valid_for_reduce_correct (state:state) prod: is_valid_for_reduce state prod = true -> valid_for_reduce state prod.",
            "VernacStartTheoremProof",
            "994e8546381900b087f3b03691064a6cc552df1e"
        ],
        [
            "unfold is_valid_for_reduce, valid_for_reduce.",
            "VernacExtend",
            "186d159024d54ec3e577bae5087257a80bbe3dbb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Bool.andb_true_iff in H.",
            "VernacExtend",
            "ba58525d312efc47561811e99d6b1502db4084aa"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply is_prefix_correct.",
            "VernacExtend",
            "7f0bb45a76bfd6266f47cdcf10cb9f82415e91b1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "specialize (H2 state_new (all_list_forall state_new)).",
            "VernacExtend",
            "505ce5a1e8f5398465bc113ff2d7f8fb31847b8e"
        ],
        [
            "rewrite is_state_valid_after_pop_complete, H1 in H2.",
            "VernacExtend",
            "25fd9ec91c1fa22aecf6eb09c8f63abd7ea32d72"
        ],
        [
            "destruct state_new; intuition.",
            "VernacExtend",
            "361adcba489bfefa16fa96faeac1b0c0e7a9f4b8"
        ],
        [
            "rewrite compare_eqb_iff in H2; intuition.",
            "VernacExtend",
            "5b5b5721fc212b989e975a099938103c8a6d5dfa"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition reduce_ok := forall s, match action_table s with | Lookahead_act awp => forall t, match awp t with | Reduce_act p => valid_for_reduce s p | _ => True end | Default_reduce_act p => valid_for_reduce s p end.",
            "VernacDefinition",
            "4d9e498ec49d748d9dc5c54b434eb32f78ae9541"
        ],
        [
            "Definition is_reduce_ok (_:unit) := forallb (fun s => match action_table s with | Lookahead_act awp => forallb (fun t => match awp t with | Reduce_act p => is_valid_for_reduce s p | _ => true end) all_list | Default_reduce_act p => is_valid_for_reduce s p end) all_list.",
            "VernacDefinition",
            "881d5e5c140d9d1ad1f27b73373f0c0a296e1ef5"
        ],
        [
            "Property is_reduce_ok_correct : is_reduce_ok () = true -> reduce_ok.",
            "VernacStartTheoremProof",
            "ecd36867987b9f273bf4096415e61d2c35fda20e"
        ],
        [
            "unfold is_reduce_ok, reduce_ok.",
            "VernacExtend",
            "0786ca9b779720224a856ba356a552cc814f11ef"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H s (all_list_forall s)).",
            "VernacExtend",
            "ee78d32719284321e92f181d8153b909fca449d0"
        ],
        [
            "destruct (action_table s).",
            "VernacExtend",
            "d42b0ccef3a08a789ccbd9f28b061dc849221f26"
        ],
        [
            "apply is_valid_for_reduce_correct; intuition.",
            "VernacExtend",
            "e40adb188842928a1bab6be41bd8af4b7048574e"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite forallb_forall in H.",
            "VernacExtend",
            "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
        ],
        [
            "specialize (H t (all_list_forall t)).",
            "VernacExtend",
            "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
        ],
        [
            "destruct (l t); intuition.",
            "VernacExtend",
            "e51faba1a44236faededaa6887df0fa10819d88d"
        ],
        [
            "apply is_valid_for_reduce_correct; intuition.",
            "VernacExtend",
            "e40adb188842928a1bab6be41bd8af4b7048574e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition safe := shift_head_symbs /\\ goto_head_symbs /\\ shift_past_state /\\ goto_past_state /\\ reduce_ok.",
            "VernacDefinition",
            "2352bcc7e22cd84989d32ec2e708e59323ce6389"
        ],
        [
            "Definition is_safe (_:unit) := (is_shift_head_symbs () && is_goto_head_symbs () && is_shift_past_state () && is_goto_past_state () && is_reduce_ok ())%bool.",
            "VernacDefinition",
            "b8bbb204f8a38476a5230ff76a8f2c758214d236"
        ],
        [
            "Property is_safe_correct: is_safe () = true -> safe.",
            "VernacStartTheoremProof",
            "e97b10d8fdbda9715d5d7490cbc21280f14eb43e"
        ],
        [
            "unfold safe, is_safe.",
            "VernacExtend",
            "703bfc42ee654d431eac1c1dbc156b716f712fe9"
        ],
        [
            "repeat rewrite Bool.andb_true_iff.",
            "VernacExtend",
            "0128a969d7d03185d79ee7b00145fa2245cab43f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply is_shift_head_symbs_correct; assumption.",
            "VernacExtend",
            "296820da6e3ef32fd5290909bab1dcbfc3338346"
        ],
        [
            "apply is_goto_head_symbs_correct; assumption.",
            "VernacExtend",
            "3bda2514427ff993161324c2090b45e786024cf0"
        ],
        [
            "apply is_shift_past_state_correct; assumption.",
            "VernacExtend",
            "4d36b1c20763380ec3c73ae4dbac8985b185bbb1"
        ],
        [
            "apply is_goto_past_state_correct; assumption.",
            "VernacExtend",
            "35359c35bf742b58fc611554709d9593c62d031d"
        ],
        [
            "apply is_reduce_ok_correct; assumption.",
            "VernacExtend",
            "afe859e57fcbc29a9b0f00a31085e3eff9a1dc47"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Make.",
            "VernacEndSegment",
            "158dcf795fe84f422408437686b9ec9e7417690b"
        ]
    ],
    "proofs": [
        {
            "name": "is_prefix_correct",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "revert l2.",
                        "VernacExtend",
                        "6b3ab4ee614c53dc7283008e38abb3bce2e40925"
                    ]
                },
                {
                    "command": [
                        "induction l1; intros.",
                        "VernacExtend",
                        "fb1b27cb856c7812b6af97a650698a744c9f86bc"
                    ]
                },
                {
                    "command": [
                        "apply prefix_nil.",
                        "VernacExtend",
                        "0745c774301a01b6ae891c94f259f8d01207da23"
                    ]
                },
                {
                    "command": [
                        "unfold is_prefix in H.",
                        "VernacExtend",
                        "500a379b1cc3a34f3c6176db9431d42d7698d209"
                    ]
                },
                {
                    "command": [
                        "destruct l2; intuition; try discriminate.",
                        "VernacExtend",
                        "a66efa66e4c6747408a224f405ed428766b7a660"
                    ]
                },
                {
                    "command": [
                        "rewrite Bool.andb_true_iff in H.",
                        "VernacExtend",
                        "ba58525d312efc47561811e99d6b1502db4084aa"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite compare_eqb_iff in H.",
                        "VernacExtend",
                        "bc5b4c9bb69024291de75d8e0f1d625b55b70d43"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "apply prefix_cons.",
                        "VernacExtend",
                        "32a29d191a9e161433a8ce8c9ab2afa8bd1b63d7"
                    ]
                },
                {
                    "command": [
                        "apply IHl1; intuition.",
                        "VernacExtend",
                        "0c7f85d1fcbc64c4b21d3b24aee582ac09aa2073"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_shift_head_symbs_correct",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "unfold is_shift_head_symbs, shift_head_symbs.",
                        "VernacExtend",
                        "c3df2a638e429b2a77779ce0e3706f0fa653262a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H s (all_list_forall s)).",
                        "VernacExtend",
                        "ee78d32719284321e92f181d8153b909fca449d0"
                    ]
                },
                {
                    "command": [
                        "destruct (action_table s); intuition.",
                        "VernacExtend",
                        "26303be1f268db3e3be0b01660595848db63a4f3"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H t (all_list_forall t)).",
                        "VernacExtend",
                        "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
                    ]
                },
                {
                    "command": [
                        "destruct (l t); intuition.",
                        "VernacExtend",
                        "e51faba1a44236faededaa6887df0fa10819d88d"
                    ]
                },
                {
                    "command": [
                        "apply is_prefix_correct; intuition.",
                        "VernacExtend",
                        "3c15e920121eb7da3fdf454cd7a5a4b8d76c644f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_goto_head_symbs_correct",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "unfold is_goto_head_symbs, goto_head_symbs.",
                        "VernacExtend",
                        "e910397ee9e0ba84a0806cccd7cf2837a09b6f01"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H s (all_list_forall s)).",
                        "VernacExtend",
                        "ee78d32719284321e92f181d8153b909fca449d0"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H nt (all_list_forall nt)).",
                        "VernacExtend",
                        "a4a07c7605b4e55159e30d5671e4bee99b444d8a"
                    ]
                },
                {
                    "command": [
                        "destruct (goto_table s nt); intuition.",
                        "VernacExtend",
                        "f10206fc8bfd83a014f96e28238697a07b86b9ab"
                    ]
                },
                {
                    "command": [
                        "destruct s0.",
                        "VernacExtend",
                        "e20d501942dc13e6f574502b72447872d76f1750"
                    ]
                },
                {
                    "command": [
                        "apply is_prefix_correct; intuition.",
                        "VernacExtend",
                        "3c15e920121eb7da3fdf454cd7a5a4b8d76c644f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_prefix_pred_correct",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "revert l2.",
                        "VernacExtend",
                        "6b3ab4ee614c53dc7283008e38abb3bce2e40925"
                    ]
                },
                {
                    "command": [
                        "induction l1.",
                        "VernacExtend",
                        "dfeb7bb70eb7390d22f3eada025c33a176cd1338"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply prefix_pred_nil.",
                        "VernacExtend",
                        "e3b952ed5b4a830dbb665b5f76d1b8a1a2d6f9af"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct l2; intuition; try discriminate.",
                        "VernacExtend",
                        "a66efa66e4c6747408a224f405ed428766b7a660"
                    ]
                },
                {
                    "command": [
                        "unfold is_prefix_pred in H.",
                        "VernacExtend",
                        "75866f2533360623a1855aa044543ffd85dc70d2"
                    ]
                },
                {
                    "command": [
                        "rewrite Bool.andb_true_iff in H.",
                        "VernacExtend",
                        "ba58525d312efc47561811e99d6b1502db4084aa"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "apply prefix_pred_cons; intuition.",
                        "VernacExtend",
                        "dbdcf237e19f0af48a1d48dbafd45fb12fc4b072"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply all_list_forall.",
                        "VernacExtend",
                        "955f9c1cc1e33bebb2395a4d2fe2d6c9d61a3dd0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_shift_past_state_correct",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "unfold is_shift_past_state, shift_past_state.",
                        "VernacExtend",
                        "c2a91c2a4cd0cd6bd1b1bbfd9b8c191d84f05f3d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H s (all_list_forall s)).",
                        "VernacExtend",
                        "ee78d32719284321e92f181d8153b909fca449d0"
                    ]
                },
                {
                    "command": [
                        "destruct (action_table s); intuition.",
                        "VernacExtend",
                        "26303be1f268db3e3be0b01660595848db63a4f3"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H t (all_list_forall t)).",
                        "VernacExtend",
                        "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
                    ]
                },
                {
                    "command": [
                        "destruct (l t); intuition.",
                        "VernacExtend",
                        "e51faba1a44236faededaa6887df0fa10819d88d"
                    ]
                },
                {
                    "command": [
                        "apply is_prefix_pred_correct; intuition.",
                        "VernacExtend",
                        "35997b01fe2269946582659a63b5516cf1eeb01f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_goto_past_state_correct",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "unfold is_goto_past_state, goto_past_state.",
                        "VernacExtend",
                        "fd3fb2514afd277b199a3cb88191249f4b68cac9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H s (all_list_forall s)).",
                        "VernacExtend",
                        "ee78d32719284321e92f181d8153b909fca449d0"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H nt (all_list_forall nt)).",
                        "VernacExtend",
                        "a4a07c7605b4e55159e30d5671e4bee99b444d8a"
                    ]
                },
                {
                    "command": [
                        "destruct (goto_table s nt); intuition.",
                        "VernacExtend",
                        "f10206fc8bfd83a014f96e28238697a07b86b9ab"
                    ]
                },
                {
                    "command": [
                        "destruct s0.",
                        "VernacExtend",
                        "e20d501942dc13e6f574502b72447872d76f1750"
                    ]
                },
                {
                    "command": [
                        "apply is_prefix_pred_correct; intuition.",
                        "VernacExtend",
                        "35997b01fe2269946582659a63b5516cf1eeb01f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_state_valid_after_pop_complete",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "induction H; intuition.",
                        "VernacExtend",
                        "504dbc07a2b01c087bf85912f6c42fa1272c658d"
                    ]
                },
                {
                    "command": [
                        "destruct sl; intuition.",
                        "VernacExtend",
                        "5f23b3597d6abb7d97ccd1b2963a95e5c987d24d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_valid_for_reduce_correct",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "unfold is_valid_for_reduce, valid_for_reduce.",
                        "VernacExtend",
                        "186d159024d54ec3e577bae5087257a80bbe3dbb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Bool.andb_true_iff in H.",
                        "VernacExtend",
                        "ba58525d312efc47561811e99d6b1502db4084aa"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply is_prefix_correct.",
                        "VernacExtend",
                        "7f0bb45a76bfd6266f47cdcf10cb9f82415e91b1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "specialize (H2 state_new (all_list_forall state_new)).",
                        "VernacExtend",
                        "505ce5a1e8f5398465bc113ff2d7f8fb31847b8e"
                    ]
                },
                {
                    "command": [
                        "rewrite is_state_valid_after_pop_complete, H1 in H2.",
                        "VernacExtend",
                        "25fd9ec91c1fa22aecf6eb09c8f63abd7ea32d72"
                    ]
                },
                {
                    "command": [
                        "destruct state_new; intuition.",
                        "VernacExtend",
                        "361adcba489bfefa16fa96faeac1b0c0e7a9f4b8"
                    ]
                },
                {
                    "command": [
                        "rewrite compare_eqb_iff in H2; intuition.",
                        "VernacExtend",
                        "5b5b5721fc212b989e975a099938103c8a6d5dfa"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_reduce_ok_correct",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "unfold is_reduce_ok, reduce_ok.",
                        "VernacExtend",
                        "0786ca9b779720224a856ba356a552cc814f11ef"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H s (all_list_forall s)).",
                        "VernacExtend",
                        "ee78d32719284321e92f181d8153b909fca449d0"
                    ]
                },
                {
                    "command": [
                        "destruct (action_table s).",
                        "VernacExtend",
                        "d42b0ccef3a08a789ccbd9f28b061dc849221f26"
                    ]
                },
                {
                    "command": [
                        "apply is_valid_for_reduce_correct; intuition.",
                        "VernacExtend",
                        "e40adb188842928a1bab6be41bd8af4b7048574e"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite forallb_forall in H.",
                        "VernacExtend",
                        "ca73771a8fe04b412f7c37dcb7f0e16d1c0c0740"
                    ]
                },
                {
                    "command": [
                        "specialize (H t (all_list_forall t)).",
                        "VernacExtend",
                        "6f61ad349468f1199bbcf0c2695f17a16d4e0e1a"
                    ]
                },
                {
                    "command": [
                        "destruct (l t); intuition.",
                        "VernacExtend",
                        "e51faba1a44236faededaa6887df0fa10819d88d"
                    ]
                },
                {
                    "command": [
                        "apply is_valid_for_reduce_correct; intuition.",
                        "VernacExtend",
                        "e40adb188842928a1bab6be41bd8af4b7048574e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_safe_correct",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "unfold safe, is_safe.",
                        "VernacExtend",
                        "703bfc42ee654d431eac1c1dbc156b716f712fe9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Bool.andb_true_iff.",
                        "VernacExtend",
                        "0128a969d7d03185d79ee7b00145fa2245cab43f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply is_shift_head_symbs_correct; assumption.",
                        "VernacExtend",
                        "296820da6e3ef32fd5290909bab1dcbfc3338346"
                    ]
                },
                {
                    "command": [
                        "apply is_goto_head_symbs_correct; assumption.",
                        "VernacExtend",
                        "3bda2514427ff993161324c2090b45e786024cf0"
                    ]
                },
                {
                    "command": [
                        "apply is_shift_past_state_correct; assumption.",
                        "VernacExtend",
                        "4d36b1c20763380ec3c73ae4dbac8985b185bbb1"
                    ]
                },
                {
                    "command": [
                        "apply is_goto_past_state_correct; assumption.",
                        "VernacExtend",
                        "35359c35bf742b58fc611554709d9593c62d031d"
                    ]
                },
                {
                    "command": [
                        "apply is_reduce_ok_correct; assumption.",
                        "VernacExtend",
                        "afe859e57fcbc29a9b0f00a31085e3eff9a1dc47"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}