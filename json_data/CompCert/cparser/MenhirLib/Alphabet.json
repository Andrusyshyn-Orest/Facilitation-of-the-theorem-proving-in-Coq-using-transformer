{
    "filename": "cparser/MenhirLib/Alphabet.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Int31.",
            "VernacRequire",
            "04408a8bbdd66902072150e719f35918c7647061"
        ],
        [
            "Require Import Cyclic31.",
            "VernacRequire",
            "e05d76613910f9df8b87801fdfa42f9ca00516a6"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import Syntax.",
            "VernacRequire",
            "f7333e1bc90f5c9993df336e6bf762d9d566cbfe"
        ],
        [
            "Require Import Relations.",
            "VernacRequire",
            "e1c772579226dab59a43a462d5506decc27ae0bb"
        ],
        [
            "Require Import RelationClasses.",
            "VernacRequire",
            "4477b0931b4b8fa1b7266888d518499524bf9df2"
        ],
        [
            "Local Obligation Tactic := intros.",
            "VernacExtend",
            "cba84ce4c6ff42291624d3ee9666f82bce9f9925"
        ],
        [
            "Class Comparable (A:Type) := { compare : A -> A -> comparison; compare_antisym : forall x y, CompOpp (compare x y) = compare y x; compare_trans : forall x y z c, (compare x y) = c -> (compare y z) = c -> (compare x z) = c }.",
            "VernacInductive",
            "9eb6a7da00eb24515157ecc4059afd7a6b0ab77b"
        ],
        [
            "Theorem compare_refl {A:Type} (C: Comparable A) : forall x, compare x x = Eq.",
            "VernacStartTheoremProof",
            "e21a8ef97cf3076b20830d08f23241604fb56098"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof (compare_antisym x x).",
            "VernacExtend",
            "e1b685541f2d30515f30994d615da8c47dcd2697"
        ],
        [
            "destruct (compare x x); intuition; try discriminate.",
            "VernacExtend",
            "41dc09e670c297bb6e9f8beda67e27e3cc9a3896"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition comparableLt {A:Type} (C: Comparable A) : relation A := fun x y => compare x y = Lt.",
            "VernacDefinition",
            "eee1e8dadcac45b7e15c32c15747669d61b80e22"
        ],
        [
            "Instance ComparableLtStrictOrder {A:Type} (C: Comparable A) : StrictOrder (comparableLt C).",
            "VernacInstance",
            "79ce562d99cca161b942585f98822dd2905042d8"
        ],
        [
            "apply Build_StrictOrder.",
            "VernacExtend",
            "b1c2304add9640b4f964524589a782a6f5a06730"
        ],
        [
            "unfold Irreflexive, Reflexive, complement, comparableLt.",
            "VernacExtend",
            "50a579c4b94ecbed4de6ac326c3f7528d6e713eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof H.",
            "VernacExtend",
            "1c045843d6c43435afc26dc931a7660694e7c703"
        ],
        [
            "rewrite <- compare_antisym in H.",
            "VernacExtend",
            "4efb73028381a8a294ca82c6c96b111553fb88c1"
        ],
        [
            "rewrite H0 in H.",
            "VernacExtend",
            "7452e3cc0dd69f3f801875694ef5fef26bb0a630"
        ],
        [
            "discriminate H.",
            "VernacExtend",
            "f00d7179963a09be7462e0ca3723e1bc13cd6c39"
        ],
        [
            "unfold Transitive, comparableLt.",
            "VernacExtend",
            "63d46bc2a665a5a9f1bef849db1a703c737ac059"
        ],
        [
            "intros x y z.",
            "VernacExtend",
            "8357c7ce661033f932c65582aab008de3b5d8530"
        ],
        [
            "apply compare_trans.",
            "VernacExtend",
            "1cba71508858ae1c128f39c92300e534f6c07baf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Instance natComparable : Comparable nat := { compare := Nat.compare }.",
            "VernacInstance",
            "e7dd1591a79c3839c0bda7262c87d78d66d67d58"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "destruct (Nat.compare x y) as [] eqn:?.",
            "VernacExtend",
            "2ee4c08ebf918e74a2bde38ca5a5233be53e2216"
        ],
        [
            "rewrite Nat.compare_eq_iff in Heqc.",
            "VernacExtend",
            "ef8c1fd4d81f9bba662c3253002871c80348ffcb"
        ],
        [
            "destruct Heqc.",
            "VernacExtend",
            "d7d74e5e3ab4bfb0fe530a82561db9e9e1b1aff4"
        ],
        [
            "rewrite Nat.compare_eq_iff.",
            "VernacExtend",
            "f6aa9a2f36a8502a0252aa714f70265a42fa245d"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite <- nat_compare_lt in *.",
            "VernacExtend",
            "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
        ],
        [
            "rewrite <- nat_compare_gt in *.",
            "VernacExtend",
            "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "rewrite <- nat_compare_lt in *.",
            "VernacExtend",
            "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
        ],
        [
            "rewrite <- nat_compare_gt in *.",
            "VernacExtend",
            "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct c.",
            "VernacExtend",
            "a4012bbde27d6ea8adc781c7b9536f3e19fa929e"
        ],
        [
            "rewrite Nat.compare_eq_iff in *; destruct H; assumption.",
            "VernacExtend",
            "dd72fb84ce4c2ebf85d28a2ef99bdfd43f7a77fa"
        ],
        [
            "rewrite <- nat_compare_lt in *.",
            "VernacExtend",
            "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
        ],
        [
            "apply (Nat.lt_trans _ _ _ H H0).",
            "VernacExtend",
            "bbb426bcb74f951d0e5015e4c44a98e0cd907754"
        ],
        [
            "rewrite <- nat_compare_gt in *.",
            "VernacExtend",
            "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
        ],
        [
            "apply (gt_trans _ _ _ H H0).",
            "VernacExtend",
            "696b3526ca00c066988700ffc18ea65670c97f24"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Instance PairComparable {A:Type} (CA:Comparable A) {B:Type} (CB:Comparable B) : Comparable (A*B) := { compare := fun x y => let (xa, xb) := x in let (ya, yb) := y in match compare xa ya return comparison with | Eq => compare xb yb | x => x end }.",
            "VernacInstance",
            "5d42558ff1e9da5180f2653aba4793d77a8bdd0a"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x, y.",
            "VernacExtend",
            "af0056d9c01fe1cf4101f3a6342913e24f7f57c3"
        ],
        [
            "rewrite <- (compare_antisym a a0).",
            "VernacExtend",
            "68df12ffc430df8fccf4f660511bdc6c1ee0e8bc"
        ],
        [
            "rewrite <- (compare_antisym b b0).",
            "VernacExtend",
            "c29dd0150db1021889f1bd93b742df92b9f16f7c"
        ],
        [
            "destruct (compare a a0); intuition.",
            "VernacExtend",
            "33dc595ad62875cf0feb54a0798d24d129df4144"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x, y, z.",
            "VernacExtend",
            "0603b2f42d14db6571cd036c49716d5dc4635ad6"
        ],
        [
            "destruct (compare a a0) as [] eqn:?, (compare a0 a1) as [] eqn:?; try (rewrite <- H0 in H; discriminate); try (destruct (compare a a1) as [] eqn:?; try (rewrite <- compare_antisym in Heqc0; rewrite CompOpp_iff in Heqc0; rewrite (compare_trans _ _ _ _ Heqc0 Heqc2) in Heqc1; discriminate); try (rewrite <- compare_antisym in Heqc1; rewrite CompOpp_iff in Heqc1; rewrite (compare_trans _ _ _ _ Heqc2 Heqc1) in Heqc0; discriminate); assumption); rewrite (compare_trans _ _ _ _ Heqc0 Heqc1); try assumption.",
            "VernacExtend",
            "7df9719b044866d5f3d97e9f9bc99e6088679b8f"
        ],
        [
            "apply (compare_trans _ _ _ _ H H0).",
            "VernacExtend",
            "3a3cc7a8fe41332d99359b30e409095cbf416e56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Class ComparableUsualEq {A:Type} (C: Comparable A) := compare_eq : forall x y, compare x y = Eq -> x = y.",
            "VernacInductive",
            "1d0c25844112f1d04ab53aff8ffe62c3bba3a956"
        ],
        [
            "Definition compare_eqb {A:Type} {C:Comparable A} (x y:A) := match compare x y with | Eq => true | _ => false end.",
            "VernacDefinition",
            "91c2c27cf5881ddb1cd8bb67a045325fcb9a664b"
        ],
        [
            "Theorem compare_eqb_iff {A:Type} {C:Comparable A} {U:ComparableUsualEq C} : forall x y, compare_eqb x y = true <-> x = y.",
            "VernacStartTheoremProof",
            "9b62e617ace03a1a3632622ddc6e49d7b77cc010"
        ],
        [
            "unfold compare_eqb.",
            "VernacExtend",
            "d96ad8926473a50d35a70b85846443c29984f5f0"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply compare_eq.",
            "VernacExtend",
            "cd3bd17f59894898bdc28c2437acb666e4edeb09"
        ],
        [
            "destruct (compare x y); intuition; discriminate.",
            "VernacExtend",
            "bb87cb53019b0188e52d39677f70f81d76f010a6"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "rewrite compare_refl; intuition.",
            "VernacExtend",
            "54f387bf3bffa0c437384d33ac92ce804f6419ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compare_eqdec {A:Type} {C:Comparable A} {U:ComparableUsualEq C} (x y:A): {x = y} + {x <> y}.",
            "VernacDefinition",
            "76beb681ebbd0fc7a606a071f8971bb696b87893"
        ],
        [
            "destruct (compare x y) as [] eqn:?; [left; apply compare_eq; intuition | ..]; right; intro; destruct H; rewrite compare_refl in Heqc; discriminate.",
            "VernacExtend",
            "45497a8962f1db740e5a7ad4600506c962f6bd88"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance NComparableUsualEq : ComparableUsualEq natComparable := Nat.compare_eq.",
            "VernacInstance",
            "0a6f701a8df0fae38ae40772adbf7501b9fbe4a0"
        ],
        [
            "Instance PairComparableUsualEq {A:Type} {CA:Comparable A} (UA:ComparableUsualEq CA) {B:Type} {CB:Comparable B} (UB:ComparableUsualEq CB) : ComparableUsualEq (PairComparable CA CB).",
            "VernacInstance",
            "2601ad038a6edbd49a5b413d823d87af91dc4a93"
        ],
        [
            "intros x y; destruct x, y; simpl.",
            "VernacExtend",
            "2d4d38c4b3898e6bb86520bd180cb4e789f6a343"
        ],
        [
            "pose proof (compare_eq a a0); pose proof (compare_eq b b0).",
            "VernacExtend",
            "6bb04498a407299920198e21fbbee2ee703132f4"
        ],
        [
            "destruct (compare a a0); try discriminate.",
            "VernacExtend",
            "04e90c65a965dff3a863c4582e5538d05a8f9769"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "destruct H2, H0.",
            "VernacExtend",
            "0769c1d602bb0bfee629f78466d565614dc401b3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Class Finite (A:Type) := { all_list : list A; all_list_forall : forall x:A, In x all_list }.",
            "VernacInductive",
            "29e1a80482b9b435b5e258c91b07e7baeb7301ba"
        ],
        [
            "Class Alphabet (A:Type) := { AlphabetComparable :> Comparable A; AlphabetComparableUsualEq :> ComparableUsualEq AlphabetComparable; AlphabetFinite :> Finite A }.",
            "VernacInductive",
            "10809cd1cc2b08916fb7d13e03bc32bddfb76524"
        ],
        [
            "Class Numbered (A:Type) := { inj : A -> int31; surj : int31 -> A; surj_inj_compat : forall x, surj (inj x) = x; inj_bound : int31; inj_bound_spec : forall x, (phi (inj x) < phi inj_bound)%Z }.",
            "VernacInductive",
            "564b5fea306e192f6ef9822e04cbb98c1600ad52"
        ],
        [
            "Program Instance NumberedAlphabet {A:Type} (N:Numbered A) : Alphabet A := { AlphabetComparable := {| compare := fun x y => compare31 (inj x) (inj y) |}; AlphabetFinite := {| all_list := fst (iter_int31 inj_bound _ (fun p => (cons (surj (snd p)) (fst p), incr (snd p))) ([], 0%int31)) |} }.",
            "VernacInstance",
            "df32c49046d8b7710a1f7c03090199d74b1e1c2a"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply Zcompare_antisym.",
            "VernacExtend",
            "9ded921f919e86fc6021771bad04092cd7aa1702"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct c.",
            "VernacExtend",
            "a4012bbde27d6ea8adc781c7b9536f3e19fa929e"
        ],
        [
            "unfold compare31 in *.",
            "VernacExtend",
            "1193c922215cece8f8ca76b01e526d84a38520ad"
        ],
        [
            "rewrite Z.compare_eq_iff in *.",
            "VernacExtend",
            "d6c07a582ddadc462c7fba8ac63fcb2093bb5af7"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "eapply Zcompare_Lt_trans.",
            "VernacExtend",
            "77ff4e59eea37c4a3eff0fc7ff587049e7b2e106"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "eapply Zcompare_Gt_trans.",
            "VernacExtend",
            "c2bcdb8203568fc2e8ead8939b286f0d105af596"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "intros x y H.",
            "VernacExtend",
            "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
        ],
        [
            "unfold compare, compare31 in H.",
            "VernacExtend",
            "1eb406b06338579f30e2225d9b056d81bc094f1d"
        ],
        [
            "rewrite Z.compare_eq_iff in *.",
            "VernacExtend",
            "d6c07a582ddadc462c7fba8ac63fcb2093bb5af7"
        ],
        [
            "rewrite <- surj_inj_compat, <- phi_inv_phi with (inj y), <- H.",
            "VernacExtend",
            "63074eff5869987abcc9a7698327ee97bba429d3"
        ],
        [
            "rewrite phi_inv_phi, surj_inj_compat; reflexivity.",
            "VernacExtend",
            "9b363c9a72e51863632cf68fee32832f4621d551"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "rewrite iter_int31_iter_nat.",
            "VernacExtend",
            "2b9d4ef2edc8ce1851ffb0cc27e74c52558d3a24"
        ],
        [
            "pose proof (inj_bound_spec x).",
            "VernacExtend",
            "cf5aab9f125c581d10e58bb1abea545135d224c8"
        ],
        [
            "match goal with |- In x (fst ?p) => destruct p as [] eqn:? end.",
            "VernacExtend",
            "0895433834918090333897d6069251ffd67edf77"
        ],
        [
            "replace inj_bound with i in H.",
            "VernacExtend",
            "ad1526ae44cfdd12068c86c08eb4aad9fd41bd7c"
        ],
        [
            "revert l i Heqp x H.",
            "VernacExtend",
            "72da0be1e205bea80cec98483a68d82b086fac90"
        ],
        [
            "induction (Z.abs_nat (phi inj_bound)); intros.",
            "VernacExtend",
            "70f7199fcfd3ab78f8aeff4ae96d86e099ffa2ee"
        ],
        [
            "inversion Heqp; clear Heqp; subst.",
            "VernacExtend",
            "f4fa1f404ccfb264421e2351f6594f24a928bc72"
        ],
        [
            "rewrite spec_0 in H.",
            "VernacExtend",
            "e92319efcb713102db4c3b65c7720c397ac7c3f0"
        ],
        [
            "pose proof (phi_bounded (inj x)).",
            "VernacExtend",
            "beba8e2272db3b935eabaf26504f8d5240405944"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "simpl in Heqp.",
            "VernacExtend",
            "552dba5ec60dc8e486e0f4aa727e6311c2bf9938"
        ],
        [
            "destruct nat_rect; specialize (IHn _ _ (eq_refl _) x); simpl in *.",
            "VernacExtend",
            "945334c5bbb4567e97f6d03f9e778722419b5e05"
        ],
        [
            "inversion Heqp.",
            "VernacExtend",
            "65195f1fafb9e02b33cd2269d790875da28539b2"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "clear Heqp.",
            "VernacExtend",
            "c9530e15444fb5b023f6ea879523ef98b6d98332"
        ],
        [
            "rewrite phi_incr in H.",
            "VernacExtend",
            "dd59140e9422db8bbd65aeb6d6cbe8f41821f0e0"
        ],
        [
            "pose proof (phi_bounded i0).",
            "VernacExtend",
            "a433890f500037948e4094f7aaf83b4a08c5dc31"
        ],
        [
            "pose proof (phi_bounded (inj x)).",
            "VernacExtend",
            "beba8e2272db3b935eabaf26504f8d5240405944"
        ],
        [
            "destruct (Z_lt_le_dec (Z.succ (phi i0)) (2 ^ Z.of_nat size)%Z).",
            "VernacExtend",
            "7274d752b748678f8e90d31d8f2a1932f39bd07e"
        ],
        [
            "rewrite Zmod_small in H by omega.",
            "VernacExtend",
            "8bedcf631e8d3437da5a0459e3bcadbc9398f3a3"
        ],
        [
            "apply Zlt_succ_le, Zle_lt_or_eq in H.",
            "VernacExtend",
            "c76d5e1ad0524338f9e2566e4349357050f18736"
        ],
        [
            "destruct H; simpl; auto.",
            "VernacExtend",
            "d4b451a78fda411528ae0c2dcbb81097319995dd"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite <- surj_inj_compat, <- phi_inv_phi with (inj x), H, phi_inv_phi; reflexivity.",
            "VernacExtend",
            "4df7515f3960ab4c9f2a9911208f297bfb2668e0"
        ],
        [
            "replace (Z.succ (phi i0)) with (2 ^ Z.of_nat size)%Z in H by omega.",
            "VernacExtend",
            "0e9f7e4e030ae268c129ea42940c37eea63f7485"
        ],
        [
            "rewrite Z_mod_same_full in H.",
            "VernacExtend",
            "34104b88b8b4e51de68acfef9395d3b7681bfaa9"
        ],
        [
            "exfalso; omega.",
            "VernacExtend",
            "872af55ec41b7811edfc9d7ae7753c718bbf67f9"
        ],
        [
            "rewrite <- phi_inv_phi with i, <- phi_inv_phi with inj_bound; f_equal.",
            "VernacExtend",
            "d40fc107f5743fab4c6b2a8e1a9f8598eacbb26a"
        ],
        [
            "pose proof (phi_bounded inj_bound); pose proof (phi_bounded i).",
            "VernacExtend",
            "99eff6f980af33386c5559aef62cf2386b794d1c"
        ],
        [
            "rewrite <- Z.abs_eq with (phi i), <- Z.abs_eq with (phi inj_bound) by omega.",
            "VernacExtend",
            "6ad835e63b1793ef2199dd2f048ec1d311d8f691"
        ],
        [
            "clear H H0 H1.",
            "VernacExtend",
            "c4bd585bfde6601bde2f97ce3a5d65fb1abcaa67"
        ],
        [
            "do 2 rewrite <- Zabs2Nat.id_abs.",
            "VernacExtend",
            "0684db8719c3505e855700acf49f6381cdb33019"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "revert l i Heqp.",
            "VernacExtend",
            "742fc81a68a9dbcf1b71babde850c2382b2fed5f"
        ],
        [
            "assert (Z.abs_nat (phi inj_bound) < Z.abs_nat (2^31)).",
            "VernacExtend",
            "f30fa2a2f234ff2c1293b19338541060a7f67b14"
        ],
        [
            "apply Zabs_nat_lt, phi_bounded.",
            "VernacExtend",
            "89b2e2aa75d52688c1181f44b0724c5d2175e6d7"
        ],
        [
            "induction (Z.abs_nat (phi inj_bound)); intros.",
            "VernacExtend",
            "70f7199fcfd3ab78f8aeff4ae96d86e099ffa2ee"
        ],
        [
            "inversion Heqp; reflexivity.",
            "VernacExtend",
            "8bf522bf11329a2905e74c32a430ad8de41d9bba"
        ],
        [
            "inversion Heqp; clear H1 H2 Heqp.",
            "VernacExtend",
            "37467ec766d6f4323579d17fbd89cba48dcd9d48"
        ],
        [
            "match goal with |- _ (_ (_ (snd ?p))) = _ => destruct p end.",
            "VernacExtend",
            "3f882b7d980a11db10788459461083f177a035b3"
        ],
        [
            "pose proof (phi_bounded i0).",
            "VernacExtend",
            "a433890f500037948e4094f7aaf83b4a08c5dc31"
        ],
        [
            "erewrite <- IHn, <- Zabs2Nat.inj_succ in H |- *; eauto; try omega.",
            "VernacExtend",
            "4a390f95c2d3766d975039ad806fafafa161aa82"
        ],
        [
            "rewrite phi_incr, Zmod_small; intuition; try omega.",
            "VernacExtend",
            "c6e5d766fa2529ca7cba7e45780f05535eb33f57"
        ],
        [
            "apply inj_lt in H.",
            "VernacExtend",
            "42c847b8a202607b3f7046350df117c31a7f4683"
        ],
        [
            "pose proof Z.le_le_succ_r.",
            "VernacExtend",
            "7a1301f470d74b379cb821e864b6aabd62ad90b0"
        ],
        [
            "do 2 rewrite Zabs2Nat.id_abs, Z.abs_eq in H; now eauto.",
            "VernacExtend",
            "284c83ab15d9166ed11689c7a068dad1c4592e9a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Instance OptionComparable {A:Type} (C:Comparable A) : Comparable (option A) := { compare := fun x y => match x, y return comparison with | None, None => Eq | None, Some _ => Lt | Some _, None => Gt | Some x, Some y => compare x y end }.",
            "VernacInstance",
            "80e8e5847b22b5978b5387df1a0cc5164e6fc5aa"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x, y; intuition.",
            "VernacExtend",
            "21c1c182ee5abb0706b96f56ff02064d41a6b90a"
        ],
        [
            "apply compare_antisym.",
            "VernacExtend",
            "370f564063ec6a4d831cb38a0aa0986027ba0773"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x, y, z; try now intuition; try (rewrite <- H in H0; discriminate).",
            "VernacExtend",
            "6755fcfb2f7e5b9861d29503bddb68ae2bd30a47"
        ],
        [
            "apply (compare_trans _ _ _ _ H H0).",
            "VernacExtend",
            "3a3cc7a8fe41332d99359b30e409095cbf416e56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance OptionComparableUsualEq {A:Type} {C:Comparable A} (U:ComparableUsualEq C) : ComparableUsualEq (OptionComparable C).",
            "VernacInstance",
            "a99a71404afd278953a01de2811583b5b8b66c1e"
        ],
        [
            "intros x y.",
            "VernacExtend",
            "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
        ],
        [
            "destruct x, y; intuition; try discriminate.",
            "VernacExtend",
            "b4900fb6d9e03b4237dbb73e7d808144f9ddf8e4"
        ],
        [
            "rewrite (compare_eq a a0); intuition.",
            "VernacExtend",
            "3fe4ab896cc777df0392a5e440aa6fde6795ad9e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Instance OptionFinite {A:Type} (E:Finite A) : Finite (option A) := { all_list := None :: map Some all_list }.",
            "VernacInstance",
            "3bf2338ccbccb7b2993fa583f3cc87c871a263d6"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x; intuition.",
            "VernacExtend",
            "f943d5e0beeff9d24568f0ceaf8baae8eb628755"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "apply in_map.",
            "VernacExtend",
            "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
        ],
        [
            "apply all_list_forall.",
            "VernacExtend",
            "955f9c1cc1e33bebb2395a4d2fe2d6c9d61a3dd0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Require Import OrderedTypeAlt.",
            "VernacRequire",
            "0d83ecbfa33c2942b1c632142aaab5bacf82e074"
        ],
        [
            "Require FSetAVL.",
            "VernacRequire",
            "f2dc4f3d2cdd7e44b840872f4879e64d1a5d2a6c"
        ],
        [
            "Require FMapAVL.",
            "VernacRequire",
            "edbed562f8864dd92e4cc55b61e963e0d9a471e2"
        ],
        [
            "Import OrderedType.",
            "VernacImport",
            "b3f80302baf7e8bbe721c71a9257fc45551d191b"
        ],
        [
            "Module Type ComparableM.",
            "VernacDeclareModuleType",
            "c1f63e375bbf799ed1433f3428ab38aa996c97b8"
        ],
        [
            "Parameter t : Type.",
            "VernacAssumption",
            "504795567cd4c81b969bd65cb901c9b8a73ae96f"
        ],
        [
            "Declare Instance tComparable : Comparable t.",
            "VernacInstance",
            "3d19e9935883c3b84f378ddbe0cdf54ed0d5876d"
        ],
        [
            "End ComparableM.",
            "VernacEndSegment",
            "077f4a63468928d97efec56deb6845a13259a489"
        ],
        [
            "Module OrderedTypeAlt_from_ComparableM (C:ComparableM) <: OrderedTypeAlt.",
            "VernacDefineModule",
            "254ba86284b3a0a53a95ccbc4e107a03eeee1370"
        ],
        [
            "Definition t := C.t.",
            "VernacDefinition",
            "8376917b778fa7bc4574865e85da9ae0471184df"
        ],
        [
            "Definition compare : t -> t -> comparison := compare.",
            "VernacDefinition",
            "ad1a29fb89281797f756a1987c426df58f3fd694"
        ],
        [
            "Infix \"?=\" := compare (at level 70, no associativity).",
            "VernacInfix",
            "db6be765b18ce5e6fabbdfaef9bfcb6ff425dc3e"
        ],
        [
            "Lemma compare_sym x y : (y?=x) = CompOpp (x?=y).",
            "VernacStartTheoremProof",
            "f4a44a2405e6251274105148d97a70dc2ba2d9c4"
        ],
        [
            "exact (Logic.eq_sym (compare_antisym x y)).",
            "VernacExtend",
            "9b53bc4bff0e33a4733c091414df4c951e46cd81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_trans c x y z : (x?=y) = c -> (y?=z) = c -> (x?=z) = c.",
            "VernacStartTheoremProof",
            "8cd8a552bdcc3c35151caec7b37ac867d78ac8a4"
        ],
        [
            "apply compare_trans.",
            "VernacExtend",
            "1cba71508858ae1c128f39c92300e534f6c07baf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OrderedTypeAlt_from_ComparableM.",
            "VernacEndSegment",
            "bf480311744dee3b110b1e7f238728418090e719"
        ],
        [
            "Module OrderedType_from_ComparableM (C:ComparableM) <: OrderedType.",
            "VernacDefineModule",
            "59a8079e9f25a65deb831d32235dea60846d5e83"
        ],
        [
            "Module Alt := OrderedTypeAlt_from_ComparableM C.",
            "VernacDefineModule",
            "52d152b0485dfa95103da323f88ecef8bab03857"
        ],
        [
            "Include (OrderedType_from_Alt Alt).",
            "VernacInclude",
            "4f569b24d9917e01e8ad02fb968df9e540657490"
        ],
        [
            "End OrderedType_from_ComparableM.",
            "VernacEndSegment",
            "f10db2361509a1bf9d1ad5259018aad04b5f633a"
        ]
    ],
    "proofs": [
        {
            "name": "compare_refl",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof (compare_antisym x x).",
                        "VernacExtend",
                        "e1b685541f2d30515f30994d615da8c47dcd2697"
                    ]
                },
                {
                    "command": [
                        "destruct (compare x x); intuition; try discriminate.",
                        "VernacExtend",
                        "41dc09e670c297bb6e9f8beda67e27e3cc9a3896"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ComparableLtStrictOrder",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "apply Build_StrictOrder.",
                        "VernacExtend",
                        "b1c2304add9640b4f964524589a782a6f5a06730"
                    ]
                },
                {
                    "command": [
                        "unfold Irreflexive, Reflexive, complement, comparableLt.",
                        "VernacExtend",
                        "50a579c4b94ecbed4de6ac326c3f7528d6e713eb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof H.",
                        "VernacExtend",
                        "1c045843d6c43435afc26dc931a7660694e7c703"
                    ]
                },
                {
                    "command": [
                        "rewrite <- compare_antisym in H.",
                        "VernacExtend",
                        "4efb73028381a8a294ca82c6c96b111553fb88c1"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H.",
                        "VernacExtend",
                        "7452e3cc0dd69f3f801875694ef5fef26bb0a630"
                    ]
                },
                {
                    "command": [
                        "discriminate H.",
                        "VernacExtend",
                        "f00d7179963a09be7462e0ca3723e1bc13cd6c39"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive, comparableLt.",
                        "VernacExtend",
                        "63d46bc2a665a5a9f1bef849db1a703c737ac059"
                    ]
                },
                {
                    "command": [
                        "intros x y z.",
                        "VernacExtend",
                        "8357c7ce661033f932c65582aab008de3b5d8530"
                    ]
                },
                {
                    "command": [
                        "apply compare_trans.",
                        "VernacExtend",
                        "1cba71508858ae1c128f39c92300e534f6c07baf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natComparable_obligation_1",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "destruct (Nat.compare x y) as [] eqn:?.",
                        "VernacExtend",
                        "2ee4c08ebf918e74a2bde38ca5a5233be53e2216"
                    ]
                },
                {
                    "command": [
                        "rewrite Nat.compare_eq_iff in Heqc.",
                        "VernacExtend",
                        "ef8c1fd4d81f9bba662c3253002871c80348ffcb"
                    ]
                },
                {
                    "command": [
                        "destruct Heqc.",
                        "VernacExtend",
                        "d7d74e5e3ab4bfb0fe530a82561db9e9e1b1aff4"
                    ]
                },
                {
                    "command": [
                        "rewrite Nat.compare_eq_iff.",
                        "VernacExtend",
                        "f6aa9a2f36a8502a0252aa714f70265a42fa245d"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_lt in *.",
                        "VernacExtend",
                        "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_gt in *.",
                        "VernacExtend",
                        "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_lt in *.",
                        "VernacExtend",
                        "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_gt in *.",
                        "VernacExtend",
                        "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "natComparable_obligation_2",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "destruct c.",
                        "VernacExtend",
                        "a4012bbde27d6ea8adc781c7b9536f3e19fa929e"
                    ]
                },
                {
                    "command": [
                        "rewrite Nat.compare_eq_iff in *; destruct H; assumption.",
                        "VernacExtend",
                        "dd72fb84ce4c2ebf85d28a2ef99bdfd43f7a77fa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_lt in *.",
                        "VernacExtend",
                        "7c9341b9c6a3c9b81e2666ef272b1e07e2351e6b"
                    ]
                },
                {
                    "command": [
                        "apply (Nat.lt_trans _ _ _ H H0).",
                        "VernacExtend",
                        "bbb426bcb74f951d0e5015e4c44a98e0cd907754"
                    ]
                },
                {
                    "command": [
                        "rewrite <- nat_compare_gt in *.",
                        "VernacExtend",
                        "dc8f47ecc8d107a86346c3f4456e909d4856dd7f"
                    ]
                },
                {
                    "command": [
                        "apply (gt_trans _ _ _ H H0).",
                        "VernacExtend",
                        "696b3526ca00c066988700ffc18ea65670c97f24"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PairComparable_obligation_1",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "destruct x, y.",
                        "VernacExtend",
                        "af0056d9c01fe1cf4101f3a6342913e24f7f57c3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (compare_antisym a a0).",
                        "VernacExtend",
                        "68df12ffc430df8fccf4f660511bdc6c1ee0e8bc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (compare_antisym b b0).",
                        "VernacExtend",
                        "c29dd0150db1021889f1bd93b742df92b9f16f7c"
                    ]
                },
                {
                    "command": [
                        "destruct (compare a a0); intuition.",
                        "VernacExtend",
                        "33dc595ad62875cf0feb54a0798d24d129df4144"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PairComparable_obligation_2",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "destruct x, y, z.",
                        "VernacExtend",
                        "0603b2f42d14db6571cd036c49716d5dc4635ad6"
                    ]
                },
                {
                    "command": [
                        "destruct (compare a a0) as [] eqn:?, (compare a0 a1) as [] eqn:?; try (rewrite <- H0 in H; discriminate); try (destruct (compare a a1) as [] eqn:?; try (rewrite <- compare_antisym in Heqc0; rewrite CompOpp_iff in Heqc0; rewrite (compare_trans _ _ _ _ Heqc0 Heqc2) in Heqc1; discriminate); try (rewrite <- compare_antisym in Heqc1; rewrite CompOpp_iff in Heqc1; rewrite (compare_trans _ _ _ _ Heqc2 Heqc1) in Heqc0; discriminate); assumption); rewrite (compare_trans _ _ _ _ Heqc0 Heqc1); try assumption.",
                        "VernacExtend",
                        "7df9719b044866d5f3d97e9f9bc99e6088679b8f"
                    ]
                },
                {
                    "command": [
                        "apply (compare_trans _ _ _ _ H H0).",
                        "VernacExtend",
                        "3a3cc7a8fe41332d99359b30e409095cbf416e56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_eqb_iff",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "unfold compare_eqb.",
                        "VernacExtend",
                        "d96ad8926473a50d35a70b85846443c29984f5f0"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply compare_eq.",
                        "VernacExtend",
                        "cd3bd17f59894898bdc28c2437acb666e4edeb09"
                    ]
                },
                {
                    "command": [
                        "destruct (compare x y); intuition; discriminate.",
                        "VernacExtend",
                        "bb87cb53019b0188e52d39677f70f81d76f010a6"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "rewrite compare_refl; intuition.",
                        "VernacExtend",
                        "54f387bf3bffa0c437384d33ac92ce804f6419ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_eqdec",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "destruct (compare x y) as [] eqn:?; [left; apply compare_eq; intuition | ..]; right; intro; destruct H; rewrite compare_refl in Heqc; discriminate.",
                        "VernacExtend",
                        "45497a8962f1db740e5a7ad4600506c962f6bd88"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "PairComparableUsualEq",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros x y; destruct x, y; simpl.",
                        "VernacExtend",
                        "2d4d38c4b3898e6bb86520bd180cb4e789f6a343"
                    ]
                },
                {
                    "command": [
                        "pose proof (compare_eq a a0); pose proof (compare_eq b b0).",
                        "VernacExtend",
                        "6bb04498a407299920198e21fbbee2ee703132f4"
                    ]
                },
                {
                    "command": [
                        "destruct (compare a a0); try discriminate.",
                        "VernacExtend",
                        "04e90c65a965dff3a863c4582e5538d05a8f9769"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "destruct H2, H0.",
                        "VernacExtend",
                        "0769c1d602bb0bfee629f78466d565614dc401b3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NumberedAlphabet_obligation_1",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "apply Zcompare_antisym.",
                        "VernacExtend",
                        "9ded921f919e86fc6021771bad04092cd7aa1702"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NumberedAlphabet_obligation_3",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intros x y H.",
                        "VernacExtend",
                        "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
                    ]
                },
                {
                    "command": [
                        "unfold compare, compare31 in H.",
                        "VernacExtend",
                        "1eb406b06338579f30e2225d9b056d81bc094f1d"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.compare_eq_iff in *.",
                        "VernacExtend",
                        "d6c07a582ddadc462c7fba8ac63fcb2093bb5af7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- surj_inj_compat, <- phi_inv_phi with (inj y), <- H.",
                        "VernacExtend",
                        "63074eff5869987abcc9a7698327ee97bba429d3"
                    ]
                },
                {
                    "command": [
                        "rewrite phi_inv_phi, surj_inj_compat; reflexivity.",
                        "VernacExtend",
                        "9b363c9a72e51863632cf68fee32832f4621d551"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NumberedAlphabet_obligation_4",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "rewrite iter_int31_iter_nat.",
                        "VernacExtend",
                        "2b9d4ef2edc8ce1851ffb0cc27e74c52558d3a24"
                    ]
                },
                {
                    "command": [
                        "pose proof (inj_bound_spec x).",
                        "VernacExtend",
                        "cf5aab9f125c581d10e58bb1abea545135d224c8"
                    ]
                },
                {
                    "command": [
                        "match goal with |- In x (fst ?p) => destruct p as [] eqn:? end.",
                        "VernacExtend",
                        "0895433834918090333897d6069251ffd67edf77"
                    ]
                },
                {
                    "command": [
                        "replace inj_bound with i in H.",
                        "VernacExtend",
                        "ad1526ae44cfdd12068c86c08eb4aad9fd41bd7c"
                    ]
                },
                {
                    "command": [
                        "revert l i Heqp x H.",
                        "VernacExtend",
                        "72da0be1e205bea80cec98483a68d82b086fac90"
                    ]
                },
                {
                    "command": [
                        "induction (Z.abs_nat (phi inj_bound)); intros.",
                        "VernacExtend",
                        "70f7199fcfd3ab78f8aeff4ae96d86e099ffa2ee"
                    ]
                },
                {
                    "command": [
                        "inversion Heqp; clear Heqp; subst.",
                        "VernacExtend",
                        "f4fa1f404ccfb264421e2351f6594f24a928bc72"
                    ]
                },
                {
                    "command": [
                        "rewrite spec_0 in H.",
                        "VernacExtend",
                        "e92319efcb713102db4c3b65c7720c397ac7c3f0"
                    ]
                },
                {
                    "command": [
                        "pose proof (phi_bounded (inj x)).",
                        "VernacExtend",
                        "beba8e2272db3b935eabaf26504f8d5240405944"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "simpl in Heqp.",
                        "VernacExtend",
                        "552dba5ec60dc8e486e0f4aa727e6311c2bf9938"
                    ]
                },
                {
                    "command": [
                        "destruct nat_rect; specialize (IHn _ _ (eq_refl _) x); simpl in *.",
                        "VernacExtend",
                        "945334c5bbb4567e97f6d03f9e778722419b5e05"
                    ]
                },
                {
                    "command": [
                        "inversion Heqp.",
                        "VernacExtend",
                        "65195f1fafb9e02b33cd2269d790875da28539b2"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "clear Heqp.",
                        "VernacExtend",
                        "c9530e15444fb5b023f6ea879523ef98b6d98332"
                    ]
                },
                {
                    "command": [
                        "rewrite phi_incr in H.",
                        "VernacExtend",
                        "dd59140e9422db8bbd65aeb6d6cbe8f41821f0e0"
                    ]
                },
                {
                    "command": [
                        "pose proof (phi_bounded i0).",
                        "VernacExtend",
                        "a433890f500037948e4094f7aaf83b4a08c5dc31"
                    ]
                },
                {
                    "command": [
                        "pose proof (phi_bounded (inj x)).",
                        "VernacExtend",
                        "beba8e2272db3b935eabaf26504f8d5240405944"
                    ]
                },
                {
                    "command": [
                        "destruct (Z_lt_le_dec (Z.succ (phi i0)) (2 ^ Z.of_nat size)%Z).",
                        "VernacExtend",
                        "7274d752b748678f8e90d31d8f2a1932f39bd07e"
                    ]
                },
                {
                    "command": [
                        "rewrite Zmod_small in H by omega.",
                        "VernacExtend",
                        "8bedcf631e8d3437da5a0459e3bcadbc9398f3a3"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_succ_le, Zle_lt_or_eq in H.",
                        "VernacExtend",
                        "c76d5e1ad0524338f9e2566e4349357050f18736"
                    ]
                },
                {
                    "command": [
                        "destruct H; simpl; auto.",
                        "VernacExtend",
                        "d4b451a78fda411528ae0c2dcbb81097319995dd"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- surj_inj_compat, <- phi_inv_phi with (inj x), H, phi_inv_phi; reflexivity.",
                        "VernacExtend",
                        "4df7515f3960ab4c9f2a9911208f297bfb2668e0"
                    ]
                },
                {
                    "command": [
                        "replace (Z.succ (phi i0)) with (2 ^ Z.of_nat size)%Z in H by omega.",
                        "VernacExtend",
                        "0e9f7e4e030ae268c129ea42940c37eea63f7485"
                    ]
                },
                {
                    "command": [
                        "rewrite Z_mod_same_full in H.",
                        "VernacExtend",
                        "34104b88b8b4e51de68acfef9395d3b7681bfaa9"
                    ]
                },
                {
                    "command": [
                        "exfalso; omega.",
                        "VernacExtend",
                        "872af55ec41b7811edfc9d7ae7753c718bbf67f9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- phi_inv_phi with i, <- phi_inv_phi with inj_bound; f_equal.",
                        "VernacExtend",
                        "d40fc107f5743fab4c6b2a8e1a9f8598eacbb26a"
                    ]
                },
                {
                    "command": [
                        "pose proof (phi_bounded inj_bound); pose proof (phi_bounded i).",
                        "VernacExtend",
                        "99eff6f980af33386c5559aef62cf2386b794d1c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Z.abs_eq with (phi i), <- Z.abs_eq with (phi inj_bound) by omega.",
                        "VernacExtend",
                        "6ad835e63b1793ef2199dd2f048ec1d311d8f691"
                    ]
                },
                {
                    "command": [
                        "clear H H0 H1.",
                        "VernacExtend",
                        "c4bd585bfde6601bde2f97ce3a5d65fb1abcaa67"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- Zabs2Nat.id_abs.",
                        "VernacExtend",
                        "0684db8719c3505e855700acf49f6381cdb33019"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "revert l i Heqp.",
                        "VernacExtend",
                        "742fc81a68a9dbcf1b71babde850c2382b2fed5f"
                    ]
                },
                {
                    "command": [
                        "assert (Z.abs_nat (phi inj_bound) < Z.abs_nat (2^31)).",
                        "VernacExtend",
                        "f30fa2a2f234ff2c1293b19338541060a7f67b14"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_nat_lt, phi_bounded.",
                        "VernacExtend",
                        "89b2e2aa75d52688c1181f44b0724c5d2175e6d7"
                    ]
                },
                {
                    "command": [
                        "induction (Z.abs_nat (phi inj_bound)); intros.",
                        "VernacExtend",
                        "70f7199fcfd3ab78f8aeff4ae96d86e099ffa2ee"
                    ]
                },
                {
                    "command": [
                        "inversion Heqp; reflexivity.",
                        "VernacExtend",
                        "8bf522bf11329a2905e74c32a430ad8de41d9bba"
                    ]
                },
                {
                    "command": [
                        "inversion Heqp; clear H1 H2 Heqp.",
                        "VernacExtend",
                        "37467ec766d6f4323579d17fbd89cba48dcd9d48"
                    ]
                },
                {
                    "command": [
                        "match goal with |- _ (_ (_ (snd ?p))) = _ => destruct p end.",
                        "VernacExtend",
                        "3f882b7d980a11db10788459461083f177a035b3"
                    ]
                },
                {
                    "command": [
                        "pose proof (phi_bounded i0).",
                        "VernacExtend",
                        "a433890f500037948e4094f7aaf83b4a08c5dc31"
                    ]
                },
                {
                    "command": [
                        "erewrite <- IHn, <- Zabs2Nat.inj_succ in H |- *; eauto; try omega.",
                        "VernacExtend",
                        "4a390f95c2d3766d975039ad806fafafa161aa82"
                    ]
                },
                {
                    "command": [
                        "rewrite phi_incr, Zmod_small; intuition; try omega.",
                        "VernacExtend",
                        "c6e5d766fa2529ca7cba7e45780f05535eb33f57"
                    ]
                },
                {
                    "command": [
                        "apply inj_lt in H.",
                        "VernacExtend",
                        "42c847b8a202607b3f7046350df117c31a7f4683"
                    ]
                },
                {
                    "command": [
                        "pose proof Z.le_le_succ_r.",
                        "VernacExtend",
                        "7a1301f470d74b379cb821e864b6aabd62ad90b0"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Zabs2Nat.id_abs, Z.abs_eq in H; now eauto.",
                        "VernacExtend",
                        "284c83ab15d9166ed11689c7a068dad1c4592e9a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OptionComparable_obligation_1",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "destruct x, y; intuition.",
                        "VernacExtend",
                        "21c1c182ee5abb0706b96f56ff02064d41a6b90a"
                    ]
                },
                {
                    "command": [
                        "apply compare_antisym.",
                        "VernacExtend",
                        "370f564063ec6a4d831cb38a0aa0986027ba0773"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OptionComparable_obligation_2",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "destruct x, y, z; try now intuition; try (rewrite <- H in H0; discriminate).",
                        "VernacExtend",
                        "6755fcfb2f7e5b9861d29503bddb68ae2bd30a47"
                    ]
                },
                {
                    "command": [
                        "apply (compare_trans _ _ _ _ H H0).",
                        "VernacExtend",
                        "3a3cc7a8fe41332d99359b30e409095cbf416e56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OptionComparableUsualEq",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "intros x y.",
                        "VernacExtend",
                        "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
                    ]
                },
                {
                    "command": [
                        "destruct x, y; intuition; try discriminate.",
                        "VernacExtend",
                        "b4900fb6d9e03b4237dbb73e7d808144f9ddf8e4"
                    ]
                },
                {
                    "command": [
                        "rewrite (compare_eq a a0); intuition.",
                        "VernacExtend",
                        "3fe4ab896cc777df0392a5e440aa6fde6795ad9e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "OptionFinite_obligation_1",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "destruct x; intuition.",
                        "VernacExtend",
                        "f943d5e0beeff9d24568f0ceaf8baae8eb628755"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "apply in_map.",
                        "VernacExtend",
                        "8b1d6650eff402b483dc29bd25bb3e04ea7f525b"
                    ]
                },
                {
                    "command": [
                        "apply all_list_forall.",
                        "VernacExtend",
                        "955f9c1cc1e33bebb2395a4d2fe2d6c9d61a3dd0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "compare_sym",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "exact (Logic.eq_sym (compare_antisym x y)).",
                        "VernacExtend",
                        "9b53bc4bff0e33a4733c091414df4c951e46cd81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_trans",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "apply compare_trans.",
                        "VernacExtend",
                        "1cba71508858ae1c128f39c92300e534f6c07baf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}