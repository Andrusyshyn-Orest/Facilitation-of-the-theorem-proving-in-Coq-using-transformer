{
    "filename": "x86/Machregs.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import String.",
            "VernacRequire",
            "c8f60f008dd1a565dde55d26cee568a599a023b3"
        ],
        [
            "Require Import Coqlib.",
            "VernacRequire",
            "bbbe15041aca3a03300067f7acd445b462d537cc"
        ],
        [
            "Require Import Decidableplus.",
            "VernacRequire",
            "ca1b7b15ba4efd1e0da12f78fccc73ed83fdb8b7"
        ],
        [
            "Require Import Maps.",
            "VernacRequire",
            "f9a27637102e60e06a3c1ceb5a01819e80b9f645"
        ],
        [
            "Require Import AST.",
            "VernacRequire",
            "d103ecb096c06f34167fba01dd861491b0d5e84e"
        ],
        [
            "Require Import Integers.",
            "VernacRequire",
            "688f068e3335df7950b569ef75a5e993414c9874"
        ],
        [
            "Require Import Op.",
            "VernacRequire",
            "ade4899dcb267df47fd0e69e3c413086816e6a6f"
        ],
        [
            "Inductive mreg: Type := | AX | BX | CX | DX | SI | DI | BP | R8 | R9 | R10 | R11 | R12 | R13 | R14 | R15 | X0 | X1 | X2 | X3 | X4 | X5 | X6 | X7 | X8 | X9 | X10 | X11 | X12 | X13 | X14 | X15 | FP0.",
            "VernacInductive",
            "d182a6345e3a4ad33bc79ed98c3303a8009ce224"
        ],
        [
            "Lemma mreg_eq: forall (r1 r2: mreg), {r1 = r2} + {r1 <> r2}.",
            "VernacStartTheoremProof",
            "768ee120b7f2803c105bd41afe0a8537ae2e7c51"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Global Opaque mreg_eq.",
            "VernacSetOpacity",
            "456c3a6ba3401761f8317a9ec82acb52d65c677b"
        ],
        [
            "Definition all_mregs := AX :: BX :: CX :: DX :: SI :: DI :: BP :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: X0 :: X1 :: X2 :: X3 :: X4 :: X5 :: X6 :: X7 :: X8 :: X9 :: X10 :: X11 :: X12 :: X13 :: X14 :: X15 :: FP0 :: nil.",
            "VernacDefinition",
            "66ec64ba2a3d2f7828ff68b45b2d57dd57a2803a"
        ],
        [
            "Lemma all_mregs_complete: forall (r: mreg), In r all_mregs.",
            "VernacStartTheoremProof",
            "d65ef5dcb98e873a35f77a3352a4382aa9271d96"
        ],
        [
            "assert (forall r, proj_sumbool (In_dec mreg_eq r all_mregs) = true) by (destruct r; reflexivity).",
            "VernacExtend",
            "c138dee9dbb88a767fbd41975a10dc45a6bca420"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "specialize (H r).",
            "VernacExtend",
            "a08bc47e9ba660e8d538eb3905780b2eea35270e"
        ],
        [
            "InvBooleans.",
            "VernacExtend",
            "2a6e1bb1be0f04ca24c3e441e9db23c18612c002"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance Decidable_eq_mreg : forall (x y: mreg), Decidable (eq x y) := Decidable_eq mreg_eq.",
            "VernacInstance",
            "28dacd2828ad58098f28e723e5a6eefe09d6e483"
        ],
        [
            "Instance Finite_mreg : Finite mreg := { Finite_elements := all_mregs; Finite_elements_spec := all_mregs_complete }.",
            "VernacInstance",
            "22451c5a2e3df77f4b73a01e61e3455aa440af2d"
        ],
        [
            "Definition mreg_type (r: mreg): typ := match r with | AX | BX | CX | DX | SI | DI | BP => if Archi.ptr64 then Tany64 else Tany32 | R8 | R9 | R10 | R11 | R12 | R13 | R14 | R15 => Tany64 | X0 | X1 | X2 | X3 | X4 | X5 | X6 | X7 => Tany64 | X8 | X9 | X10 | X11 | X12 | X13 | X14 | X15 => Tany64 | FP0 => Tany64 end.",
            "VernacDefinition",
            "4aabc691651a85fa3dd51e153112c7cd9046d76f"
        ],
        [
            "Local Open Scope positive_scope.",
            "VernacOpenCloseScope",
            "373b6149b002bb2947d7edec759c86b4538856cb"
        ],
        [
            "Module IndexedMreg <: INDEXED_TYPE.",
            "VernacDefineModule",
            "870e71f9844d030f984492ec4f2a2a0e259ac953"
        ],
        [
            "Definition t := mreg.",
            "VernacDefinition",
            "1b3fdcd882a832af4e52a8db154f288c0476f625"
        ],
        [
            "Definition eq := mreg_eq.",
            "VernacDefinition",
            "185d088c4523e7ae6112c5f9915c9c403f94a834"
        ],
        [
            "Definition index (r: mreg): positive := match r with | AX => 1 | BX => 2 | CX => 3 | DX => 4 | SI => 5 | DI => 6 | BP => 7 | R8 => 8 | R9 => 9 | R10 => 10 | R11 => 11 | R12 => 12 | R13 => 13 | R14 => 14 | R15 => 15 | X0 => 16 | X1 => 17 | X2 => 18 | X3 => 19 | X4 => 20 | X5 => 21 | X6 => 22 | X7 => 23 | X8 => 24 | X9 => 25 | X10 => 26 | X11 => 27 | X12 => 28 | X13 => 29 | X14 => 30 | X15 => 31 | FP0 => 32 end.",
            "VernacDefinition",
            "27d8986ff074b3d2e975ba9274cc0a882c1ddcaa"
        ],
        [
            "Lemma index_inj: forall r1 r2, index r1 = index r2 -> r1 = r2.",
            "VernacStartTheoremProof",
            "37cc125cd5e694ed49857ab0e12a9261c00ff49a"
        ],
        [
            "decide_goal.",
            "VernacExtend",
            "e64b9dd79759f4573f5e1e2a993356f02cbb3e14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IndexedMreg.",
            "VernacEndSegment",
            "ad1ec7e8ed5c2e81b1b602cdc57eff0e7331a638"
        ],
        [
            "Definition is_stack_reg (r: mreg) : bool := match r with FP0 => true | _ => false end.",
            "VernacDefinition",
            "fdddc9382de2f13836021e671502abc3659fd6cb"
        ],
        [
            "Local Open Scope string_scope.",
            "VernacOpenCloseScope",
            "347f91aff322dccfab9c81382e495d8430d8e803"
        ],
        [
            "Definition register_names := (\"RAX\", AX) :: (\"RBX\", BX) :: (\"RCX\", CX) :: (\"RDX\", DX) :: (\"RSI\", SI) :: (\"RDI\", DI) :: (\"RBP\", BP) :: (\"EAX\", AX) :: (\"EBX\", BX) :: (\"ECX\", CX) :: (\"EDX\", DX) :: (\"ESI\", SI) :: (\"EDI\", DI) :: (\"EBP\", BP) :: (\"R8\", R8) :: (\"R9\", R9) :: (\"R10\", R10) :: (\"R11\", R11) :: (\"R12\", R12) :: (\"R13\", R13) :: (\"R14\", R14) :: (\"R15\", R15) :: (\"XMM0\", X0) :: (\"XMM1\", X1) :: (\"XMM2\", X2) :: (\"XMM3\", X3) :: (\"XMM4\", X4) :: (\"XMM5\", X5) :: (\"XMM6\", X6) :: (\"XMM7\", X7) :: (\"XMM8\", X8) :: (\"XMM9\", X9) :: (\"XMM10\", X10) :: (\"XMM11\", X11) :: (\"XMM12\", X12) :: (\"XMM13\", X13) :: (\"XMM14\", X14) :: (\"XMM15\", X15) :: (\"ST0\", FP0) :: nil.",
            "VernacDefinition",
            "13cd818d412fbb14c3305f000cc897c5dc3c7114"
        ],
        [
            "Definition register_by_name (s: string) : option mreg := let fix assoc (l: list (string * mreg)) : option mreg := match l with | nil => None | (s1, r1) :: l' => if string_dec s s1 then Some r1 else assoc l' end in assoc register_names.",
            "VernacDefinition",
            "703f81d4717725afc134c6636c1336e4ce856cc2"
        ],
        [
            "Definition destroyed_by_op (op: operation): list mreg := match op with | Ocast8signed | Ocast8unsigned => AX :: nil | Omulhs => AX :: DX :: nil | Omulhu => AX :: DX :: nil | Odiv => AX :: DX :: nil | Odivu => AX :: DX :: nil | Omod => AX :: DX :: nil | Omodu => AX :: DX :: nil | Oshrximm _ => CX :: nil | Omullhs => AX :: DX :: nil | Omullhu => AX :: DX :: nil | Odivl => AX :: DX :: nil | Odivlu => AX :: DX :: nil | Omodl => AX :: DX :: nil | Omodlu => AX :: DX :: nil | Oshrxlimm _ => DX :: nil | Ocmp _ => AX :: CX :: nil | _ => nil end.",
            "VernacDefinition",
            "01a2138037e8efa34262c3df5a54e7fdb458c705"
        ],
        [
            "Definition destroyed_by_load (chunk: memory_chunk) (addr: addressing): list mreg := nil.",
            "VernacDefinition",
            "bfc5ed6d544e200bb23eb1fe0b28b88e1d297105"
        ],
        [
            "Definition destroyed_by_store (chunk: memory_chunk) (addr: addressing): list mreg := match chunk with | Mint8signed | Mint8unsigned => if Archi.ptr64 then nil else AX :: CX :: nil | _ => nil end.",
            "VernacDefinition",
            "9b3301425e903219f3af407020aea4fd45ccef81"
        ],
        [
            "Definition destroyed_by_cond (cond: condition): list mreg := nil.",
            "VernacDefinition",
            "15221eb3b713705a88398329fcb58ba627b43ba7"
        ],
        [
            "Definition destroyed_by_jumptable: list mreg := AX :: DX :: nil.",
            "VernacDefinition",
            "58d225c4c94c22f65067dfb48d057dcefe07a677"
        ],
        [
            "Fixpoint destroyed_by_clobber (cl: list string): list mreg := match cl with | nil => nil | c1 :: cl => match register_by_name c1 with | Some r => r :: destroyed_by_clobber cl | None => destroyed_by_clobber cl end end.",
            "VernacFixpoint",
            "19cc636517ddddb1f717284151e880bceded9102"
        ],
        [
            "Definition destroyed_by_builtin (ef: external_function): list mreg := match ef with | EF_memcpy sz al => if zle sz 32 then CX :: X7 :: nil else CX :: SI :: DI :: nil | EF_vstore (Mint8unsigned|Mint8signed) => if Archi.ptr64 then nil else AX :: CX :: nil | EF_builtin name sg => if string_dec name \"__builtin_va_start\" then AX :: nil else if string_dec name \"__builtin_write16_reversed\" || string_dec name \"__builtin_write32_reversed\" then CX :: DX :: nil else nil | EF_inline_asm txt sg clob => destroyed_by_clobber clob | _ => nil end.",
            "VernacDefinition",
            "a392ff48dd118d651f280c730ce8fb01054e4bc9"
        ],
        [
            "Definition destroyed_at_function_entry: list mreg := AX :: FP0 :: nil.",
            "VernacDefinition",
            "e943d46494389cc479cbcafb7318d6e3a59a0519"
        ],
        [
            "Definition destroyed_by_setstack (ty: typ): list mreg := match ty with | Tfloat | Tsingle => FP0 :: nil | _ => nil end.",
            "VernacDefinition",
            "462f02793e7235d1646aff64962306019707876c"
        ],
        [
            "Definition destroyed_at_indirect_call: list mreg := AX :: nil.",
            "VernacDefinition",
            "5021267775f6e94072cc92a0004b7170c117cd8e"
        ],
        [
            "Definition temp_for_parent_frame: mreg := AX.",
            "VernacDefinition",
            "bbac27a4edb83c7fcb382b727cca7f5fe8b17793"
        ],
        [
            "Definition mregs_for_operation (op: operation): list (option mreg) * option mreg := match op with | Omulhs => (Some AX :: None :: nil, Some DX) | Omulhu => (Some AX :: None :: nil, Some DX) | Odiv => (Some AX :: Some CX :: nil, Some AX) | Odivu => (Some AX :: Some CX :: nil, Some AX) | Omod => (Some AX :: Some CX :: nil, Some DX) | Omodu => (Some AX :: Some CX :: nil, Some DX) | Oshl => (None :: Some CX :: nil, None) | Oshr => (None :: Some CX :: nil, None) | Oshru => (None :: Some CX :: nil, None) | Oshrximm _ => (Some AX :: nil, Some AX) | Omullhs => (Some AX :: None :: nil, Some DX) | Omullhu => (Some AX :: None :: nil, Some DX) | Odivl => (Some AX :: Some CX :: nil, Some AX) | Odivlu => (Some AX :: Some CX :: nil, Some AX) | Omodl => (Some AX :: Some CX :: nil, Some DX) | Omodlu => (Some AX :: Some CX :: nil, Some DX) | Oshll => (None :: Some CX :: nil, None) | Oshrl => (None :: Some CX :: nil, None) | Oshrlu => (None :: Some CX :: nil, None) | Oshrxlimm _ => (Some AX :: nil, Some AX) | _ => (nil, None) end.",
            "VernacDefinition",
            "efe2b2912ffae865cbdbb6226ce12d4b0f7310e5"
        ],
        [
            "Definition mregs_for_builtin (ef: external_function): list (option mreg) * list (option mreg) := match ef with | EF_memcpy sz al => if zle sz 32 then (Some AX :: Some DX :: nil, nil) else (Some DI :: Some SI :: nil, nil) | EF_builtin name sg => if string_dec name \"__builtin_negl\" then (Some DX :: Some AX :: nil, Some DX :: Some AX :: nil) else if string_dec name \"__builtin_addl\" || string_dec name \"__builtin_subl\" then (Some DX :: Some AX :: Some CX :: Some BX :: nil, Some DX :: Some AX :: nil) else if string_dec name \"__builtin_mull\" then (Some AX :: Some DX :: nil, Some DX :: Some AX :: nil) else if string_dec name \"__builtin_va_start\" then (Some DX :: nil, nil) else if (negb Archi.ptr64) && string_dec name \"__builtin_bswap64\" then (Some AX :: Some DX :: nil, Some DX :: Some AX :: nil) else (nil, nil) | _ => (nil, nil) end.",
            "VernacDefinition",
            "f84d783a7269417cdeb58a766c3c597d0363e2b0"
        ],
        [
            "Global Opaque destroyed_by_op destroyed_by_load destroyed_by_store destroyed_by_cond destroyed_by_jumptable destroyed_by_builtin destroyed_by_setstack destroyed_at_function_entry temp_for_parent_frame mregs_for_operation mregs_for_builtin.",
            "VernacSetOpacity",
            "2c290e940e4e72f8c51796aadd60975522b158f1"
        ],
        [
            "Definition two_address_op (op: operation) : bool := match op with | Omove => false | Ointconst _ => false | Olongconst _ => false | Ofloatconst _ => false | Osingleconst _ => false | Oindirectsymbol _ => false | Ocast8signed => false | Ocast8unsigned => false | Ocast16signed => false | Ocast16unsigned => false | Oneg => true | Osub => true | Omul => true | Omulimm _ => true | Omulhs => false | Omulhu => false | Odiv => false | Odivu => false | Omod => false | Omodu => false | Oand => true | Oandimm _ => true | Oor => true | Oorimm _ => true | Oxor => true | Oxorimm _ => true | Onot => true | Oshl => true | Oshlimm _ => true | Oshr => true | Oshrimm _ => true | Oshrximm _ => false | Oshru => true | Oshruimm _ => true | Ororimm _ => true | Oshldimm _ => true | Olea addr => false | Omakelong => true | Olowlong => true | Ohighlong => true | Ocast32signed => false | Ocast32unsigned => false | Onegl => true | Oaddlimm _ => true | Osubl => true | Omull => true | Omullimm _ => true | Omullhs => false | Omullhu => false | Odivl => false | Odivlu => false | Omodl => false | Omodlu => false | Oandl => true | Oandlimm _ => true | Oorl => true | Oorlimm _ => true | Oxorl => true | Oxorlimm _ => true | Onotl => true | Oshll => true | Oshllimm _ => true | Oshrl => true | Oshrlimm _ => true | Oshrxlimm _ => false | Oshrlu => true | Oshrluimm _ => true | Ororlimm _ => true | Oleal addr => false | Onegf => true | Oabsf => true | Oaddf => true | Osubf => true | Omulf => true | Odivf => true | Onegfs => true | Oabsfs => true | Oaddfs => true | Osubfs => true | Omulfs => true | Odivfs => true | Osingleoffloat => false | Ofloatofsingle => false | Ointoffloat => false | Ofloatofint => false | Ointofsingle => false | Osingleofint => false | Olongoffloat => false | Ofloatoflong => false | Olongofsingle => false | Osingleoflong => false | Ocmp c => false end.",
            "VernacDefinition",
            "ff1f710319c2906b6fb12a29dc8b5658b5427db1"
        ],
        [
            "Definition builtin_constraints (ef: external_function) : list builtin_arg_constraint := match ef with | EF_vload _ => OK_addressing :: nil | EF_vstore _ => OK_addressing :: OK_default :: nil | EF_memcpy _ _ => OK_addrstack :: OK_addrstack :: nil | EF_annot kind txt targs => map (fun _ => OK_all) targs | EF_debug kind txt targs => map (fun _ => OK_all) targs | _ => nil end.",
            "VernacDefinition",
            "1c9f41c64ec1c6e8dbea2e61505bdd6d05e0f02d"
        ]
    ],
    "proofs": [
        {
            "name": "mreg_eq",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "all_mregs_complete",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "assert (forall r, proj_sumbool (In_dec mreg_eq r all_mregs) = true) by (destruct r; reflexivity).",
                        "VernacExtend",
                        "c138dee9dbb88a767fbd41975a10dc45a6bca420"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "specialize (H r).",
                        "VernacExtend",
                        "a08bc47e9ba660e8d538eb3905780b2eea35270e"
                    ]
                },
                {
                    "command": [
                        "InvBooleans.",
                        "VernacExtend",
                        "2a6e1bb1be0f04ca24c3e441e9db23c18612c002"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_inj",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "decide_goal.",
                        "VernacExtend",
                        "e64b9dd79759f4573f5e1e2a993356f02cbb3e14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}