{
    "filename": "lib/Wfsimpl.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Axioms.",
            "VernacRequire",
            "c989a924e4bb8fe5a57f18260df70c530a537b50"
        ],
        [
            "Require Import Init.Wf.",
            "VernacRequire",
            "764b2336c95e48962b5b37e09aad4b6d8034abac"
        ],
        [
            "Require Import Wf_nat.",
            "VernacRequire",
            "e78e8b6524a9771b7c95f37880c2b88f96465784"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Section FIX.",
            "VernacBeginSection",
            "62d930f7e372646f40560672aa9c487158f1a06c"
        ],
        [
            "Variables A B: Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable R: A -> A -> Prop.",
            "VernacAssumption",
            "0d2b4236b120d599ff44dbf895c951c0abab01e8"
        ],
        [
            "Hypothesis Rwf: well_founded R.",
            "VernacAssumption",
            "46a13ab59aade6d77ca89bb980b4e9335db4c40a"
        ],
        [
            "Variable F: forall (x: A), (forall (y: A), R y x -> B) -> B.",
            "VernacAssumption",
            "8672071b7f1cd3c6ecd4fd74515b0ab655e42175"
        ],
        [
            "Definition Fix (x: A) : B := Wf.Fix Rwf (fun (x: A) => B) F x.",
            "VernacDefinition",
            "3eba17c7e371111c7fd2e4b64e58463ef0d4c9a3"
        ],
        [
            "Theorem unroll_Fix: forall x, Fix x = F (fun (y: A) (P: R y x) => Fix y).",
            "VernacStartTheoremProof",
            "2735df3b5576d0706fd167a683912d8f05611170"
        ],
        [
            "unfold Fix; intros.",
            "VernacExtend",
            "feab2a00d9a5f1ce1f5d24b6ce28374b19665c43"
        ],
        [
            "apply Wf.Fix_eq with (P := fun (x: A) => B).",
            "VernacExtend",
            "fa3a4618130f4ec9bc621d79ca974f0670f5c3bd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (f = g).",
            "VernacExtend",
            "1eed63176b5652e7614ce439631471457c607985"
        ],
        [
            "apply functional_extensionality_dep; intros.",
            "VernacExtend",
            "9655241ee401e45db5cbe53bc02b206c73a2d09c"
        ],
        [
            "apply functional_extensionality; intros.",
            "VernacExtend",
            "d51e495de3d73c588e8b054fab4e57aaef69a045"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "subst g; auto.",
            "VernacExtend",
            "b24cd08b95bbd91ed4e382c382f8413bddcccf38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FIX.",
            "VernacEndSegment",
            "f39f50dc173a3cc0c2454c58786d2df9525ccff1"
        ],
        [
            "Section FIXM.",
            "VernacBeginSection",
            "d4b9b1bbaf567a1283ca5c3b8c20b92ed55e20a1"
        ],
        [
            "Variables A B: Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable measure: A -> nat.",
            "VernacAssumption",
            "9c8d7609a51862793b9ab47e0fc42aceb32acfd6"
        ],
        [
            "Variable F: forall (x: A), (forall (y: A), measure y < measure x -> B) -> B.",
            "VernacAssumption",
            "6d96c1e33d0c5446c675aa975bda9e4999a1d330"
        ],
        [
            "Definition Fixm (x: A) : B := Wf.Fix (well_founded_ltof A measure) (fun (x: A) => B) F x.",
            "VernacDefinition",
            "9d91b4fb44c7ac08f051f3d4548cbd80d9a4c6c3"
        ],
        [
            "Theorem unroll_Fixm: forall x, Fixm x = F (fun (y: A) (P: measure y < measure x) => Fixm y).",
            "VernacStartTheoremProof",
            "48b79d04ebc3f1ebefa3abc9b5c4d414343ad90c"
        ],
        [
            "unfold Fixm; intros.",
            "VernacExtend",
            "092b9d748c1e143a50925b9fa88ce2aa4c87bf84"
        ],
        [
            "apply Wf.Fix_eq with (P := fun (x: A) => B).",
            "VernacExtend",
            "fa3a4618130f4ec9bc621d79ca974f0670f5c3bd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (f = g).",
            "VernacExtend",
            "1eed63176b5652e7614ce439631471457c607985"
        ],
        [
            "apply functional_extensionality_dep; intros.",
            "VernacExtend",
            "9655241ee401e45db5cbe53bc02b206c73a2d09c"
        ],
        [
            "apply functional_extensionality; intros.",
            "VernacExtend",
            "d51e495de3d73c588e8b054fab4e57aaef69a045"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "subst g; auto.",
            "VernacExtend",
            "b24cd08b95bbd91ed4e382c382f8413bddcccf38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FIXM.",
            "VernacEndSegment",
            "23530c2a29917f0d91b8d456f723d876784ec231"
        ]
    ],
    "proofs": [
        {
            "name": "unroll_Fix",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "unfold Fix; intros.",
                        "VernacExtend",
                        "feab2a00d9a5f1ce1f5d24b6ce28374b19665c43"
                    ]
                },
                {
                    "command": [
                        "apply Wf.Fix_eq with (P := fun (x: A) => B).",
                        "VernacExtend",
                        "fa3a4618130f4ec9bc621d79ca974f0670f5c3bd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (f = g).",
                        "VernacExtend",
                        "1eed63176b5652e7614ce439631471457c607985"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality_dep; intros.",
                        "VernacExtend",
                        "9655241ee401e45db5cbe53bc02b206c73a2d09c"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros.",
                        "VernacExtend",
                        "d51e495de3d73c588e8b054fab4e57aaef69a045"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "subst g; auto.",
                        "VernacExtend",
                        "b24cd08b95bbd91ed4e382c382f8413bddcccf38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unroll_Fixm",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "unfold Fixm; intros.",
                        "VernacExtend",
                        "092b9d748c1e143a50925b9fa88ce2aa4c87bf84"
                    ]
                },
                {
                    "command": [
                        "apply Wf.Fix_eq with (P := fun (x: A) => B).",
                        "VernacExtend",
                        "fa3a4618130f4ec9bc621d79ca974f0670f5c3bd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (f = g).",
                        "VernacExtend",
                        "1eed63176b5652e7614ce439631471457c607985"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality_dep; intros.",
                        "VernacExtend",
                        "9655241ee401e45db5cbe53bc02b206c73a2d09c"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros.",
                        "VernacExtend",
                        "d51e495de3d73c588e8b054fab4e57aaef69a045"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "subst g; auto.",
                        "VernacExtend",
                        "b24cd08b95bbd91ed4e382c382f8413bddcccf38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}