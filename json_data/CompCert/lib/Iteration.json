{
    "filename": "lib/Iteration.v",
    "coq_project": "CompCert",
    "vernac_cmds": [
        [
            "Require Import Axioms.",
            "VernacRequire",
            "c989a924e4bb8fe5a57f18260df70c530a537b50"
        ],
        [
            "Require Import Coqlib.",
            "VernacRequire",
            "bbbe15041aca3a03300067f7acd445b462d537cc"
        ],
        [
            "Require Import Wfsimpl.",
            "VernacRequire",
            "86fbbde6b5c35999a527e043d5a1192c7594698a"
        ],
        [
            "Module WfIter.",
            "VernacDefineModule",
            "58e958f033246cabdeff1e0124bd66a1a7eb3524"
        ],
        [
            "Section ITERATION.",
            "VernacBeginSection",
            "84ebeebcbeda175559832e33976a1e2b72ec3a99"
        ],
        [
            "Variables A B: Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable step: A -> B + A.",
            "VernacAssumption",
            "c69efe53c1cc53306f8f8aebb272933e04344735"
        ],
        [
            "Variable ord: A -> A -> Prop.",
            "VernacAssumption",
            "ad597c66e452c92156563d14dd2d835849cc2ca1"
        ],
        [
            "Hypothesis ord_wf: well_founded ord.",
            "VernacAssumption",
            "3a549a8115a4471c623b699b6f0aadb05790da15"
        ],
        [
            "Hypothesis step_decr: forall a a', step a = inr _ a' -> ord a' a.",
            "VernacAssumption",
            "9b0931dc979ef578512d3810e90600425edcebcd"
        ],
        [
            "Definition step_info (a: A) : {b | step a = inl _ b} + {a' | step a = inr _ a' & ord a' a}.",
            "VernacDefinition",
            "3bbe498b9616281eb162b19f4c32dd9010bf393a"
        ],
        [
            "caseEq (step a); intros.",
            "VernacExtend",
            "457dfa87b016c30ecb47db057a8ce42ee08a8acd"
        ],
        [
            "left; exists b; auto.",
            "VernacExtend",
            "cff1f017e0ed942931e88268d2beafba8e779aca"
        ],
        [
            "right; exists a0; auto.",
            "VernacExtend",
            "c0ec137307e69f718b7c9bdc3a23dba8be3f189c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition iterate_F (a: A) (rec: forall a', ord a' a -> B) : B := match step_info a with | inl (exist b P) => b | inr (exist2 a' P Q) => rec a' Q end.",
            "VernacDefinition",
            "4a1c775eaf388b045e70288c78138ca7611348b9"
        ],
        [
            "Definition iterate (a: A) : B := Fix ord_wf iterate_F a.",
            "VernacDefinition",
            "ae82262a1f5f3497f4edb80efc5a02d0a1c1ad2f"
        ],
        [
            "Variable P: A -> Prop.",
            "VernacAssumption",
            "c4c1d04be97fb87f7ef5221a5c608ce908b2cefd"
        ],
        [
            "Variable Q: B -> Prop.",
            "VernacAssumption",
            "8b54880f3299cad961e2d1dcaed74a1ba1df3e32"
        ],
        [
            "Hypothesis step_prop: forall a : A, P a -> match step a with inl b => Q b | inr a' => P a' end.",
            "VernacAssumption",
            "8b86cc1f4508e2dcdd76899c44bf05023dee5b4f"
        ],
        [
            "Lemma iterate_prop: forall a, P a -> Q (iterate a).",
            "VernacStartTheoremProof",
            "8d7db9adb17b300381f23ec97fff18663809443a"
        ],
        [
            "intros a0.",
            "VernacExtend",
            "038b55d24b1748caf7a23cb07a7b76ab3164a368"
        ],
        [
            "pattern a0.",
            "VernacExtend",
            "94780fe2e33aed50d57b496533bc69542aff7698"
        ],
        [
            "apply well_founded_ind with (R := ord).",
            "VernacExtend",
            "263642e34966d6a1846905a0a391e1bc681402a1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iterate; rewrite unroll_Fix.",
            "VernacExtend",
            "213ffcf5e42d868f8b3bc6c1228f6257fe6d5f52"
        ],
        [
            "unfold iterate_F.",
            "VernacExtend",
            "bb1cdaabae2e6cd28406adf05e052ee71c07c9d4"
        ],
        [
            "destruct (step_info x) as [[b U] | [a' U V]].",
            "VernacExtend",
            "e44ab5d4730ae9ab7e19b224cdcd64ec72bae553"
        ],
        [
            "exploit step_prop; eauto.",
            "VernacExtend",
            "d8a1a57e751aaa3244b6f330f9c4f9f309cfe239"
        ],
        [
            "rewrite U; auto.",
            "VernacExtend",
            "b5e2e2fb9332ac5ba2502273537dc2cae1215d4e"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "exploit step_prop; eauto.",
            "VernacExtend",
            "d8a1a57e751aaa3244b6f330f9c4f9f309cfe239"
        ],
        [
            "rewrite U; auto.",
            "VernacExtend",
            "b5e2e2fb9332ac5ba2502273537dc2cae1215d4e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ITERATION.",
            "VernacEndSegment",
            "a6d99db045f1403e7d2c0160e9a1bc3098e6b43a"
        ],
        [
            "End WfIter.",
            "VernacEndSegment",
            "f46c0a8868294b4e59f3525408b01d61105a568b"
        ],
        [
            "Module PrimIter.",
            "VernacDefineModule",
            "22b35198f693f7604a0b577de67318de0c68d0ea"
        ],
        [
            "Section ITERATION.",
            "VernacBeginSection",
            "84ebeebcbeda175559832e33976a1e2b72ec3a99"
        ],
        [
            "Variables A B: Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable step: A -> B + A.",
            "VernacAssumption",
            "c69efe53c1cc53306f8f8aebb272933e04344735"
        ],
        [
            "Definition num_iterations := 1000000000000%positive.",
            "VernacDefinition",
            "8f7fc6fed4f414ff8d954958e9f2568996521209"
        ],
        [
            "Definition iter_step (x: positive) (next: forall y, Plt y x -> A -> option B) (s: A) : option B := match peq x xH with | left EQ => None | right NOTEQ => match step s with | inl res => Some res | inr s' => next (Pos.pred x) (Ppred_Plt x NOTEQ) s' end end.",
            "VernacDefinition",
            "ee119b071fd87a86551499b82a1238941619ab3c"
        ],
        [
            "Definition iter: positive -> A -> option B := Fix Plt_wf iter_step.",
            "VernacDefinition",
            "2065a576cac542f2272006147e7628e5a10a8619"
        ],
        [
            "Definition iterate := iter num_iterations.",
            "VernacDefinition",
            "501442c1dce02371fc827906ebd9872ca3b7e5c4"
        ],
        [
            "Variable P: A -> Prop.",
            "VernacAssumption",
            "c4c1d04be97fb87f7ef5221a5c608ce908b2cefd"
        ],
        [
            "Variable Q: B -> Prop.",
            "VernacAssumption",
            "8b54880f3299cad961e2d1dcaed74a1ba1df3e32"
        ],
        [
            "Hypothesis step_prop: forall a : A, P a -> match step a with inl b => Q b | inr a' => P a' end.",
            "VernacAssumption",
            "8b86cc1f4508e2dcdd76899c44bf05023dee5b4f"
        ],
        [
            "Lemma iter_prop: forall n a b, P a -> iter n a = Some b -> Q b.",
            "VernacStartTheoremProof",
            "010440af5a6cda9462b50fa2bfcd93f2a97924ea"
        ],
        [
            "apply (well_founded_ind Plt_wf (fun p => forall a b, P a -> iter p a = Some b -> Q b)).",
            "VernacExtend",
            "eb89652c986e91f8f6b2aec27999e7a9839e2cfa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iter in H1.",
            "VernacExtend",
            "f1e2fd365ebfe61393c5868221672566e4e487cb"
        ],
        [
            "rewrite unroll_Fix in H1.",
            "VernacExtend",
            "e4110e3e0ff85190fcf3f76adcaec9adb2b36d94"
        ],
        [
            "unfold iter_step in H1.",
            "VernacExtend",
            "88f35b55100be8ca625d1631960dc40a08a860db"
        ],
        [
            "destruct (peq x 1).",
            "VernacExtend",
            "d7ac2e4f34b1ee9c05db885ea125351bcd8a5b1a"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "specialize (step_prop a H0).",
            "VernacExtend",
            "f456e0dc62eb9e8b6c4c7c12fcf3fb8a054f02d8"
        ],
        [
            "destruct (step a) as [b'|a'] eqn:?.",
            "VernacExtend",
            "b701414e937f954732a94f021e2b2f99a356c824"
        ],
        [
            "inv H1.",
            "VernacExtend",
            "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply H with (Pos.pred x) a'.",
            "VernacExtend",
            "9c1dd8dcbab3c6f0d10aea237dfd3a27b5df98d5"
        ],
        [
            "apply Ppred_Plt; auto.",
            "VernacExtend",
            "4151ab03ebb3a8e3b8c2ad053aa46591463f7d93"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iterate_prop: forall a b, iterate a = Some b -> P a -> Q b.",
            "VernacStartTheoremProof",
            "fe0ae8209a65286d3a965f61a3671deeda173768"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply iter_prop with num_iterations a; assumption.",
            "VernacExtend",
            "382ad1a802acc90a9362275aec26e5f41eec4365"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ITERATION.",
            "VernacEndSegment",
            "a6d99db045f1403e7d2c0160e9a1bc3098e6b43a"
        ],
        [
            "End PrimIter.",
            "VernacEndSegment",
            "b5689c66e40cdf9b652b1e765dd8f0cfce069259"
        ],
        [
            "Require Import Classical.",
            "VernacRequire",
            "4cc53198e8d48bbb9dcca109b0e59a015dd7a5bb"
        ],
        [
            "Require Import ClassicalDescription.",
            "VernacRequire",
            "ef19b4cb4868eaa5e9aeb1b505554cd7d4d11771"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Module GenIter.",
            "VernacDefineModule",
            "f172999db4a79859eb0348ab44ecd55c641276c0"
        ],
        [
            "Section ITERATION.",
            "VernacBeginSection",
            "84ebeebcbeda175559832e33976a1e2b72ec3a99"
        ],
        [
            "Variables A B: Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable step: A -> B + A.",
            "VernacAssumption",
            "c69efe53c1cc53306f8f8aebb272933e04344735"
        ],
        [
            "Definition B_le (x y: option B) : Prop := x = None \\/ y = x.",
            "VernacDefinition",
            "b27f9fc078791df790b1c642548138fe47c03ec9"
        ],
        [
            "Definition F_le (x y: A -> option B) : Prop := forall a, B_le (x a) (y a).",
            "VernacDefinition",
            "f86911fda190b1c2a2019b258376225251feff52"
        ],
        [
            "Definition F_iter (next: A -> option B) (a: A) : option B := match step a with | inl b => Some b | inr a' => next a' end.",
            "VernacDefinition",
            "3f427891a32727fffb740f8d9629ab69953ed10f"
        ],
        [
            "Lemma F_iter_monot: forall f g, F_le f g -> F_le (F_iter f) (F_iter g).",
            "VernacStartTheoremProof",
            "38ade60d19c9c048ef66f0897ced4c117c6d95e7"
        ],
        [
            "intros; red; intros.",
            "VernacExtend",
            "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
        ],
        [
            "unfold F_iter.",
            "VernacExtend",
            "f0828bfe3b8bed22eacebc5f7e33e2b8e3fd4b25"
        ],
        [
            "destruct (step a) as [b | a'].",
            "VernacExtend",
            "6d5df845123fdc030dfe99d8d70f60b6db8ee2ce"
        ],
        [
            "red; auto.",
            "VernacExtend",
            "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint iter (n: nat) : A -> option B := match n with | O => (fun a => None) | S m => F_iter (iter m) end.",
            "VernacFixpoint",
            "87cc512995f07671a96d78f6598c0fb63d5f656d"
        ],
        [
            "Lemma iter_monot: forall p q, (p <= q)%nat -> F_le (iter p) (iter q).",
            "VernacStartTheoremProof",
            "63e7c02b62a30d7a475b51551c9ae83c808fe1d9"
        ],
        [
            "induction p; intros.",
            "VernacExtend",
            "c75e2906013ca120a0a0b16c220ee3ee2a25b2fc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "red; intros; red; auto.",
            "VernacExtend",
            "4eec10d4f21a41d8eb245bd9a3926699ac913ab4"
        ],
        [
            "destruct q.",
            "VernacExtend",
            "b624c9d13a802d76a1bc8238bf4bfd9fc55bd69d"
        ],
        [
            "elimtype False; omega.",
            "VernacExtend",
            "528b630f62bf971d3e6394d60b9ec83d551b6f98"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply F_iter_monot.",
            "VernacExtend",
            "95276ce62742c3fa993cb4f4e62f55ce89204cd6"
        ],
        [
            "apply IHp.",
            "VernacExtend",
            "246d34d2490ae6e017eeeee5e330f76082b9a564"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_either: forall a, (exists n, exists b, iter n a = Some b) \\/ (forall n, iter n a = None).",
            "VernacStartTheoremProof",
            "904f6bfa5356846d6b0437cb685e08a29e4f1f85"
        ],
        [
            "intro a.",
            "VernacExtend",
            "14896994838b4c124c1f1123678e1f3468f5e2ea"
        ],
        [
            "elim (classic (forall n, iter n a = None)); intro.",
            "VernacExtend",
            "d73ae1264d7f24a27823ed70f3c698bd044fb865"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "generalize (not_all_ex_not nat (fun n => iter n a = None) H).",
            "VernacExtend",
            "9dbc97bfa8932ee2c32fb8c26de3cd0640bd3e3a"
        ],
        [
            "intros [n D].",
            "VernacExtend",
            "5bd9309d3b2cab13156a4deb44f20348139ae3f8"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "generalize D.",
            "VernacExtend",
            "c0d8814b5bdddb031166f968dcd1f439d05a4c93"
        ],
        [
            "case (iter n a); intros.",
            "VernacExtend",
            "9fa545b167b2c0078fa3d600ef4d3a128b0ba019"
        ],
        [
            "exists b; auto.",
            "VernacExtend",
            "2e71eac2fffee5e38189419c0aff6774b0942c8c"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition converges_to (a: A) (b: option B) : Prop := exists n, forall m, (n <= m)%nat -> iter m a = b.",
            "VernacDefinition",
            "518e54d8fee5127ff7a1ddf47677f7df7374ab56"
        ],
        [
            "Lemma converges_to_Some: forall a n b, iter n a = Some b -> converges_to a (Some b).",
            "VernacStartTheoremProof",
            "5bfa682121989c5145fa43a108b99eb698e89aa1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (B_le (iter n a) (iter m a)).",
            "VernacExtend",
            "3002818c4f3f1572c0c06544fbba60700da232fa"
        ],
        [
            "apply iter_monot.",
            "VernacExtend",
            "ddf8a26bfffc56f479c709c92a0e4bb347e9800f"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "elim H1; intro; congruence.",
            "VernacExtend",
            "70f5633228615e3f0940fafb2bd8076ad164551c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma converges_to_exists: forall a, exists b, converges_to a b.",
            "VernacStartTheoremProof",
            "a24a6b82ec7886d43379669d8e2dc6b265b987eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (iter_either a).",
            "VernacExtend",
            "c5c23cb2520a396d38cb271b91dbd0794bdd079a"
        ],
        [
            "intros [n [b EQ]].",
            "VernacExtend",
            "eff75933a94e025359bec06cecc589756f7fb46e"
        ],
        [
            "exists (Some b).",
            "VernacExtend",
            "7b9816d77c5fe564ab13111068880e02d444f4ff"
        ],
        [
            "apply converges_to_Some with n.",
            "VernacExtend",
            "10f39ca966c23eacd83fde10dd3e1d1f136af1fc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "exists (@None B).",
            "VernacExtend",
            "3b33a8c25c28dbabef018eedbdfa5310a6d4e498"
        ],
        [
            "exists O.",
            "VernacExtend",
            "857793ba1f2fca166b38dcce16bdb0403ad0f7dc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma converges_to_unique: forall a b, converges_to a b -> forall b', converges_to a b' -> b = b'.",
            "VernacStartTheoremProof",
            "32e203264b827688f2737b7140b5666daf5c4505"
        ],
        [
            "intros a b [n C] b' [n' C'].",
            "VernacExtend",
            "c546440ccd853592dab42ed6a72f2cb17c54a6eb"
        ],
        [
            "rewrite <- (C (max n n')).",
            "VernacExtend",
            "6be430b29675c04e08796860e15da4f15574d25a"
        ],
        [
            "rewrite <- (C' (max n n')).",
            "VernacExtend",
            "d8e184c80a149264dde8c80e54c07d1f555865c2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply le_max_r.",
            "VernacExtend",
            "2770eee6606c65af90cd62218f564fa7b6592164"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma converges_to_exists_uniquely: forall a, exists! b, converges_to a b .",
            "VernacStartTheoremProof",
            "5e661f2af3379c07a8c634c45c7df9314daa7718"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (converges_to_exists a) as [b CT].",
            "VernacExtend",
            "08f95578c98a515a063fa5124943eab21513872c"
        ],
        [
            "exists b.",
            "VernacExtend",
            "131ab3b1f8dceeba7698c539872e59e8413fa321"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exact (converges_to_unique _ _ CT).",
            "VernacExtend",
            "c615dbe5e270dd706e99c9d106a303aab08b73e2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition iterate (a: A) : option B := proj1_sig (constructive_definite_description (converges_to a) (converges_to_exists_uniquely a)).",
            "VernacDefinition",
            "92758d2dd84997e7e684ece4cdf6fdb7cce3682f"
        ],
        [
            "Lemma converges_to_iterate: forall a b, converges_to a b -> iterate a = b.",
            "VernacStartTheoremProof",
            "b727d0814dbb2ad2a8a47e6a421dd7e7beb9683a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iterate.",
            "VernacExtend",
            "0077039cdd474d9d0d09a74c952ea7b5f3c27cbd"
        ],
        [
            "destruct (constructive_definite_description (converges_to a) (converges_to_exists_uniquely a)) as [b' P].",
            "VernacExtend",
            "e91730132fd5acf8db5309740ac0d87e2133669b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply converges_to_unique with a; auto.",
            "VernacExtend",
            "c4b67e1e1775658ff4f159fa449ad958331f5450"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iterate_converges_to: forall a, converges_to a (iterate a).",
            "VernacStartTheoremProof",
            "7f348a0eebc86ee4b825da3ea31aebe96290bda1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iterate.",
            "VernacExtend",
            "0077039cdd474d9d0d09a74c952ea7b5f3c27cbd"
        ],
        [
            "destruct (constructive_definite_description (converges_to a) (converges_to_exists_uniquely a)) as [b' P].",
            "VernacExtend",
            "e91730132fd5acf8db5309740ac0d87e2133669b"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable P: A -> Prop.",
            "VernacAssumption",
            "c4c1d04be97fb87f7ef5221a5c608ce908b2cefd"
        ],
        [
            "Variable Q: B -> Prop.",
            "VernacAssumption",
            "8b54880f3299cad961e2d1dcaed74a1ba1df3e32"
        ],
        [
            "Hypothesis step_prop: forall a : A, P a -> match step a with inl b => Q b | inr a' => P a' end.",
            "VernacAssumption",
            "8b86cc1f4508e2dcdd76899c44bf05023dee5b4f"
        ],
        [
            "Lemma iter_prop: forall n a b, P a -> iter n a = Some b -> Q b.",
            "VernacStartTheoremProof",
            "010440af5a6cda9462b50fa2bfcd93f2a97924ea"
        ],
        [
            "induction n; intros until b; intro H; simpl.",
            "VernacExtend",
            "f9b896c2c4ec13a9e3ea1c64be3d00d964ab910c"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "unfold F_iter.",
            "VernacExtend",
            "f0828bfe3b8bed22eacebc5f7e33e2b8e3fd4b25"
        ],
        [
            "generalize (step_prop a H).",
            "VernacExtend",
            "b019e2647b489b8bd6a4673287b6f51125f08f62"
        ],
        [
            "case (step a); intros.",
            "VernacExtend",
            "4e8f24fffcb3cf1edd8eb7414618a922d67fc468"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "apply IHn with a0; auto.",
            "VernacExtend",
            "861d9d286b084c4fa9071ca1756f94c2839825a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iterate_prop: forall a b, iterate a = Some b -> P a -> Q b.",
            "VernacStartTheoremProof",
            "fe0ae8209a65286d3a965f61a3671deeda173768"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (iterate_converges_to a) as [n IT].",
            "VernacExtend",
            "2f6087842dc6527fd04d73fc1dec6fa1320a408f"
        ],
        [
            "rewrite H in IT.",
            "VernacExtend",
            "2888a5530c091faab069679d6ef3f0766773621c"
        ],
        [
            "apply iter_prop with n a.",
            "VernacExtend",
            "4dfa8cbed6fcbd493d26683b53ba64255aa60ab3"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply IT.",
            "VernacExtend",
            "4240e83e0618a9a31e52ce386592825a88d392a0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ITERATION.",
            "VernacEndSegment",
            "a6d99db045f1403e7d2c0160e9a1bc3098e6b43a"
        ],
        [
            "End GenIter.",
            "VernacEndSegment",
            "4214aed3707bd4dcc4307df69a3fe185ade09a71"
        ]
    ],
    "proofs": [
        {
            "name": "step_info",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "caseEq (step a); intros.",
                        "VernacExtend",
                        "457dfa87b016c30ecb47db057a8ce42ee08a8acd"
                    ]
                },
                {
                    "command": [
                        "left; exists b; auto.",
                        "VernacExtend",
                        "cff1f017e0ed942931e88268d2beafba8e779aca"
                    ]
                },
                {
                    "command": [
                        "right; exists a0; auto.",
                        "VernacExtend",
                        "c0ec137307e69f718b7c9bdc3a23dba8be3f189c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "iterate_prop",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros a0.",
                        "VernacExtend",
                        "038b55d24b1748caf7a23cb07a7b76ab3164a368"
                    ]
                },
                {
                    "command": [
                        "pattern a0.",
                        "VernacExtend",
                        "94780fe2e33aed50d57b496533bc69542aff7698"
                    ]
                },
                {
                    "command": [
                        "apply well_founded_ind with (R := ord).",
                        "VernacExtend",
                        "263642e34966d6a1846905a0a391e1bc681402a1"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iterate; rewrite unroll_Fix.",
                        "VernacExtend",
                        "213ffcf5e42d868f8b3bc6c1228f6257fe6d5f52"
                    ]
                },
                {
                    "command": [
                        "unfold iterate_F.",
                        "VernacExtend",
                        "bb1cdaabae2e6cd28406adf05e052ee71c07c9d4"
                    ]
                },
                {
                    "command": [
                        "destruct (step_info x) as [[b U] | [a' U V]].",
                        "VernacExtend",
                        "e44ab5d4730ae9ab7e19b224cdcd64ec72bae553"
                    ]
                },
                {
                    "command": [
                        "exploit step_prop; eauto.",
                        "VernacExtend",
                        "d8a1a57e751aaa3244b6f330f9c4f9f309cfe239"
                    ]
                },
                {
                    "command": [
                        "rewrite U; auto.",
                        "VernacExtend",
                        "b5e2e2fb9332ac5ba2502273537dc2cae1215d4e"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "exploit step_prop; eauto.",
                        "VernacExtend",
                        "d8a1a57e751aaa3244b6f330f9c4f9f309cfe239"
                    ]
                },
                {
                    "command": [
                        "rewrite U; auto.",
                        "VernacExtend",
                        "b5e2e2fb9332ac5ba2502273537dc2cae1215d4e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_prop",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "apply (well_founded_ind Plt_wf (fun p => forall a b, P a -> iter p a = Some b -> Q b)).",
                        "VernacExtend",
                        "eb89652c986e91f8f6b2aec27999e7a9839e2cfa"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iter in H1.",
                        "VernacExtend",
                        "f1e2fd365ebfe61393c5868221672566e4e487cb"
                    ]
                },
                {
                    "command": [
                        "rewrite unroll_Fix in H1.",
                        "VernacExtend",
                        "e4110e3e0ff85190fcf3f76adcaec9adb2b36d94"
                    ]
                },
                {
                    "command": [
                        "unfold iter_step in H1.",
                        "VernacExtend",
                        "88f35b55100be8ca625d1631960dc40a08a860db"
                    ]
                },
                {
                    "command": [
                        "destruct (peq x 1).",
                        "VernacExtend",
                        "d7ac2e4f34b1ee9c05db885ea125351bcd8a5b1a"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "specialize (step_prop a H0).",
                        "VernacExtend",
                        "f456e0dc62eb9e8b6c4c7c12fcf3fb8a054f02d8"
                    ]
                },
                {
                    "command": [
                        "destruct (step a) as [b'|a'] eqn:?.",
                        "VernacExtend",
                        "b701414e937f954732a94f021e2b2f99a356c824"
                    ]
                },
                {
                    "command": [
                        "inv H1.",
                        "VernacExtend",
                        "2c43d1971eb5aa98166f6ec686cc2a4f1886b0a4"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply H with (Pos.pred x) a'.",
                        "VernacExtend",
                        "9c1dd8dcbab3c6f0d10aea237dfd3a27b5df98d5"
                    ]
                },
                {
                    "command": [
                        "apply Ppred_Plt; auto.",
                        "VernacExtend",
                        "4151ab03ebb3a8e3b8c2ad053aa46591463f7d93"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "F_iter_monot",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros; red; intros.",
                        "VernacExtend",
                        "51aeefe3bf0889d494d662b4f3305dd8bbc97324"
                    ]
                },
                {
                    "command": [
                        "unfold F_iter.",
                        "VernacExtend",
                        "f0828bfe3b8bed22eacebc5f7e33e2b8e3fd4b25"
                    ]
                },
                {
                    "command": [
                        "destruct (step a) as [b | a'].",
                        "VernacExtend",
                        "6d5df845123fdc030dfe99d8d70f60b6db8ee2ce"
                    ]
                },
                {
                    "command": [
                        "red; auto.",
                        "VernacExtend",
                        "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_monot",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "induction p; intros.",
                        "VernacExtend",
                        "c75e2906013ca120a0a0b16c220ee3ee2a25b2fc"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "red; intros; red; auto.",
                        "VernacExtend",
                        "4eec10d4f21a41d8eb245bd9a3926699ac913ab4"
                    ]
                },
                {
                    "command": [
                        "destruct q.",
                        "VernacExtend",
                        "b624c9d13a802d76a1bc8238bf4bfd9fc55bd69d"
                    ]
                },
                {
                    "command": [
                        "elimtype False; omega.",
                        "VernacExtend",
                        "528b630f62bf971d3e6394d60b9ec83d551b6f98"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply F_iter_monot.",
                        "VernacExtend",
                        "95276ce62742c3fa993cb4f4e62f55ce89204cd6"
                    ]
                },
                {
                    "command": [
                        "apply IHp.",
                        "VernacExtend",
                        "246d34d2490ae6e017eeeee5e330f76082b9a564"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_either",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intro a.",
                        "VernacExtend",
                        "14896994838b4c124c1f1123678e1f3468f5e2ea"
                    ]
                },
                {
                    "command": [
                        "elim (classic (forall n, iter n a = None)); intro.",
                        "VernacExtend",
                        "d73ae1264d7f24a27823ed70f3c698bd044fb865"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "generalize (not_all_ex_not nat (fun n => iter n a = None) H).",
                        "VernacExtend",
                        "9dbc97bfa8932ee2c32fb8c26de3cd0640bd3e3a"
                    ]
                },
                {
                    "command": [
                        "intros [n D].",
                        "VernacExtend",
                        "5bd9309d3b2cab13156a4deb44f20348139ae3f8"
                    ]
                },
                {
                    "command": [
                        "exists n.",
                        "VernacExtend",
                        "a97204a252e0d9b7444ffed9b38570a756391511"
                    ]
                },
                {
                    "command": [
                        "generalize D.",
                        "VernacExtend",
                        "c0d8814b5bdddb031166f968dcd1f439d05a4c93"
                    ]
                },
                {
                    "command": [
                        "case (iter n a); intros.",
                        "VernacExtend",
                        "9fa545b167b2c0078fa3d600ef4d3a128b0ba019"
                    ]
                },
                {
                    "command": [
                        "exists b; auto.",
                        "VernacExtend",
                        "2e71eac2fffee5e38189419c0aff6774b0942c8c"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "converges_to_Some",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "exists n.",
                        "VernacExtend",
                        "a97204a252e0d9b7444ffed9b38570a756391511"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (B_le (iter n a) (iter m a)).",
                        "VernacExtend",
                        "3002818c4f3f1572c0c06544fbba60700da232fa"
                    ]
                },
                {
                    "command": [
                        "apply iter_monot.",
                        "VernacExtend",
                        "ddf8a26bfffc56f479c709c92a0e4bb347e9800f"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro; congruence.",
                        "VernacExtend",
                        "70f5633228615e3f0940fafb2bd8076ad164551c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "converges_to_exists",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (iter_either a).",
                        "VernacExtend",
                        "c5c23cb2520a396d38cb271b91dbd0794bdd079a"
                    ]
                },
                {
                    "command": [
                        "intros [n [b EQ]].",
                        "VernacExtend",
                        "eff75933a94e025359bec06cecc589756f7fb46e"
                    ]
                },
                {
                    "command": [
                        "exists (Some b).",
                        "VernacExtend",
                        "7b9816d77c5fe564ab13111068880e02d444f4ff"
                    ]
                },
                {
                    "command": [
                        "apply converges_to_Some with n.",
                        "VernacExtend",
                        "10f39ca966c23eacd83fde10dd3e1d1f136af1fc"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "exists (@None B).",
                        "VernacExtend",
                        "3b33a8c25c28dbabef018eedbdfa5310a6d4e498"
                    ]
                },
                {
                    "command": [
                        "exists O.",
                        "VernacExtend",
                        "857793ba1f2fca166b38dcce16bdb0403ad0f7dc"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "converges_to_unique",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intros a b [n C] b' [n' C'].",
                        "VernacExtend",
                        "c546440ccd853592dab42ed6a72f2cb17c54a6eb"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (C (max n n')).",
                        "VernacExtend",
                        "6be430b29675c04e08796860e15da4f15574d25a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (C' (max n n')).",
                        "VernacExtend",
                        "d8e184c80a149264dde8c80e54c07d1f555865c2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply le_max_r.",
                        "VernacExtend",
                        "2770eee6606c65af90cd62218f564fa7b6592164"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "converges_to_exists_uniquely",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct (converges_to_exists a) as [b CT].",
                        "VernacExtend",
                        "08f95578c98a515a063fa5124943eab21513872c"
                    ]
                },
                {
                    "command": [
                        "exists b.",
                        "VernacExtend",
                        "131ab3b1f8dceeba7698c539872e59e8413fa321"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "exact (converges_to_unique _ _ CT).",
                        "VernacExtend",
                        "c615dbe5e270dd706e99c9d106a303aab08b73e2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "converges_to_iterate",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iterate.",
                        "VernacExtend",
                        "0077039cdd474d9d0d09a74c952ea7b5f3c27cbd"
                    ]
                },
                {
                    "command": [
                        "destruct (constructive_definite_description (converges_to a) (converges_to_exists_uniquely a)) as [b' P].",
                        "VernacExtend",
                        "e91730132fd5acf8db5309740ac0d87e2133669b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply converges_to_unique with a; auto.",
                        "VernacExtend",
                        "c4b67e1e1775658ff4f159fa449ad958331f5450"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iterate_converges_to",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iterate.",
                        "VernacExtend",
                        "0077039cdd474d9d0d09a74c952ea7b5f3c27cbd"
                    ]
                },
                {
                    "command": [
                        "destruct (constructive_definite_description (converges_to a) (converges_to_exists_uniquely a)) as [b' P].",
                        "VernacExtend",
                        "e91730132fd5acf8db5309740ac0d87e2133669b"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}