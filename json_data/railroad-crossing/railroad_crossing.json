{
    "filename": "railroad_crossing.v",
    "coq_project": "railroad-crossing",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Require Import time_clocks.",
            "VernacRequire",
            "d1451c92af302f185edbac2e6ab112eb1da83596"
        ],
        [
            "Section Automatas_TCG.",
            "VernacBeginSection",
            "a2c49e8d5b1712b82f432711c7567ad0f1f6b261"
        ],
        [
            "Inductive Label : Set := | Approach : Label | In : Label | Exit : Label | Lower : Label | Raise : Label | Up : Label | Down : Label | Tick : Label.",
            "VernacInductive",
            "bef5ec7780828c0a4f0d984d399c39fc13fbf2f5"
        ],
        [
            "Inductive ST : Set := | Far : ST | Near : ST | Inside : ST.",
            "VernacInductive",
            "1b492f36b95a423903486fd71577a2a7316c8e33"
        ],
        [
            "Inductive SC : Set := | Sc1 : SC | Sc2 : SC | Sc3 : SC | Sc4 : SC.",
            "VernacInductive",
            "450cd9155f6550d6af4d9fedc67c7a0ec3d366c4"
        ],
        [
            "Inductive SG : Set := | Open : SG | Lowering : SG | Closed : SG | Raising : SG.",
            "VernacInductive",
            "33242f71fe9ecb5a2d7b8e3f40a0ff909eeb220b"
        ],
        [
            "Definition S_Ck (S : Set) := (S * Clock)%type.",
            "VernacDefinition",
            "5cddb05f78946aaad032bd4357e69384f77525b0"
        ],
        [
            "Definition kt1 : Instant := 8.",
            "VernacDefinition",
            "127e1ceee2c253fbb74322a7e59c711c18ebaf01"
        ],
        [
            "Definition kt2 : Instant := 20.",
            "VernacDefinition",
            "d2e700e67080acba41c49739c875263d48c9a027"
        ],
        [
            "Definition kc1 : Instant := 4.",
            "VernacDefinition",
            "2952a8226217b122c2967ac7872eb1929fbf1147"
        ],
        [
            "Definition kc2 : Instant := 4.",
            "VernacDefinition",
            "5f5800052626940c7c62f66aec9ac886c422d120"
        ],
        [
            "Definition kg1 : Instant := 4.",
            "VernacDefinition",
            "9cba71b5fdb97ed51948ae5c5acd6e4e2d90d8b3"
        ],
        [
            "Definition kg2 : Instant := 4.",
            "VernacDefinition",
            "a992d5f77046ae9af9242373bfb28777410214d9"
        ],
        [
            "Definition kg3 : Instant := 8.",
            "VernacDefinition",
            "c394283fed72c7e1dc7459c92d2415094181f875"
        ],
        [
            "Inductive InvT : S_Ck ST -> Prop := | Ifar : forall x : Clock, InvT (Far, x) | Inear : forall x : Clock, lt_Ck x kt2 -> InvT (Near, x) | Iinside : forall x : Clock, lt_Ck x kt2 -> InvT (Inside, x).",
            "VernacInductive",
            "7393ed40cc5e2b3409550d366831d05d1c053658"
        ],
        [
            "Inductive InvC : S_Ck SC -> Prop := | Isc1 : forall y : Clock, InvC (Sc1, y) | Isc2 : forall y : Clock, le_Ck y kc1 -> InvC (Sc2, y) | Isc3 : forall y : Clock, InvC (Sc3, y) | Isc4 : forall y : Clock, lt_Ck y kc2 -> InvC (Sc4, y).",
            "VernacInductive",
            "0903e360d3129fdba44acf212985258badc2c7ab"
        ],
        [
            "Inductive InvG : S_Ck SG -> Prop := | Iopen : forall z : Clock, InvG (Open, z) | Ilowering : forall z : Clock, lt_Ck z kg1 -> InvG (Lowering, z) | Iclosed : forall z : Clock, InvG (Closed, z) | Iraising : forall z : Clock, lt_Ck z kg3 -> InvG (Raising, z).",
            "VernacInductive",
            "c13b337f0a5b576c6fe9406845173a5ed1cc9626"
        ],
        [
            "Inductive TrT : S_Ck ST -> Label -> S_Ck ST -> Prop := | ttApproach : forall x : Clock, TrT (Far, x) Approach (Near, Reset) | ttIn : forall x : Clock, gt_Ck x kt1 -> lt_Ck x kt2 -> TrT (Near, x) In (Inside, x) | ttExit : forall x : Clock, lt_Ck x kt2 -> TrT (Inside, x) Exit (Far, x) | ttTick : forall (x : Clock) (s : ST), InvT (s, Inc x) -> TrT (s, x) Tick (s, Inc x).",
            "VernacInductive",
            "efa31c04e4564db9a51808dafdcf5bcbb424a7a3"
        ],
        [
            "Inductive TrC : S_Ck SC -> Label -> S_Ck SC -> Prop := | tcApproach : forall y : Clock, TrC (Sc1, y) Approach (Sc2, Reset) | tcLower : forall y : Clock, eq_Ck y kc1 -> TrC (Sc2, y) Lower (Sc3, y) | tcExit : forall y : Clock, TrC (Sc3, y) Exit (Sc4, Reset) | tcRaise : forall y : Clock, lt_Ck y kc2 -> TrC (Sc4, y) Raise (Sc1, y) | tcTick : forall (y : Clock) (s : SC), InvC (s, Inc y) -> TrC (s, y) Tick (s, Inc y).",
            "VernacInductive",
            "9c95424e875ba69dacf0e036da60fa2ab086802a"
        ],
        [
            "Inductive TrG : S_Ck SG -> Label -> S_Ck SG -> Prop := | tgLower : forall z : Clock, TrG (Open, z) Lower (Lowering, Reset) | tgDown : forall z : Clock, lt_Ck z kg1 -> TrG (Lowering, z) Down (Closed, z) | tgRaise : forall z : Clock, TrG (Closed, z) Raise (Raising, Reset) | tgUp : forall z : Clock, ge_Ck z kg2 -> lt_Ck z kg3 -> TrG (Raising, z) Up (Open, z) | tgTick : forall (z : Clock) (s : SG), InvG (s, Inc z) -> TrG (s, z) Tick (s, Inc z).",
            "VernacInductive",
            "5d0f4f8e99fc7d2e2c9c736324da1745b9cd8f48"
        ],
        [
            "Definition StGlobal := (S_Ck ST * (S_Ck SC * S_Ck SG))%type.",
            "VernacDefinition",
            "c8eab13ecf30af5c576de7bb4b76663d4ef73588"
        ],
        [
            "Inductive TrGlobal : StGlobal -> Label -> StGlobal -> Prop := | tGl_In : forall st1 st2 : S_Ck ST, TrT st1 In st2 -> forall (sc : S_Ck SC) (sg : S_Ck SG), TrGlobal (st1, (sc, sg)) In (st2, (sc, sg)) | tGl_Down : forall sg1 sg2 : S_Ck SG, TrG sg1 Down sg2 -> forall (st : S_Ck ST) (sc : S_Ck SC), TrGlobal (st, (sc, sg1)) Down (st, (sc, sg2)) | tGl_Up : forall sg1 sg2 : S_Ck SG, TrG sg1 Up sg2 -> forall (st : S_Ck ST) (sc : S_Ck SC), TrGlobal (st, (sc, sg1)) Up (st, (sc, sg2)) | tGl_Approach : forall (st1 st2 : S_Ck ST) (sc1 sc2 : S_Ck SC), TrT st1 Approach st2 -> TrC sc1 Approach sc2 -> forall sg : S_Ck SG, TrGlobal (st1, (sc1, sg)) Approach (st2, (sc2, sg)) | tGl_Exit : forall (st1 st2 : S_Ck ST) (sc1 sc2 : S_Ck SC), TrT st1 Exit st2 -> TrC sc1 Exit sc2 -> forall sg : S_Ck SG, TrGlobal (st1, (sc1, sg)) Exit (st2, (sc2, sg)) | tGl_Lower : forall (sc1 sc2 : S_Ck SC) (sg1 sg2 : S_Ck SG), TrC sc1 Lower sc2 -> TrG sg1 Lower sg2 -> forall st : S_Ck ST, TrGlobal (st, (sc1, sg1)) Lower (st, (sc2, sg2)) | tGl_Raise : forall (sc1 sc2 : S_Ck SC) (sg1 sg2 : S_Ck SG), TrC sc1 Raise sc2 -> TrG sg1 Raise sg2 -> forall st : S_Ck ST, TrGlobal (st, (sc1, sg1)) Raise (st, (sc2, sg2)) | tGl_Tick : forall (st1 st2 : S_Ck ST) (sc1 sc2 : S_Ck SC) (sg1 sg2 : S_Ck SG), TrT st1 Tick st2 -> TrC sc1 Tick sc2 -> TrG sg1 Tick sg2 -> TrGlobal (st1, (sc1, sg1)) Tick (st2, (sc2, sg2)).",
            "VernacInductive",
            "5fb09f6ef9cc32008af36cf47edd7c9cb8a8b9b0"
        ],
        [
            "Definition ini_CkT := 0.",
            "VernacDefinition",
            "58d14f8584c9becd522915b157f67d0dfd664495"
        ],
        [
            "Definition ini_CkC := 0.",
            "VernacDefinition",
            "6919f7c15510844557410b2983c289e2cfb54e62"
        ],
        [
            "Definition ini_CkG := 0.",
            "VernacDefinition",
            "b6eab839f42d8445d4958b8d9a6a6838350fd080"
        ],
        [
            "Definition SiniT : S_Ck ST := (Far, ini_CkT).",
            "VernacDefinition",
            "f6852b3ea32e909799791281ba043f69cd8e4420"
        ],
        [
            "Definition SiniC : S_Ck SC := (Sc1, ini_CkC).",
            "VernacDefinition",
            "eaf6a34ebaba2a023dd1661510be6845fa3f3b5a"
        ],
        [
            "Definition SiniG : S_Ck SG := (Open, ini_CkG).",
            "VernacDefinition",
            "6523e0176b167f91340f5fd0f535b62ab1e52936"
        ],
        [
            "Definition SiniTCG : StGlobal := (SiniT, (SiniC, SiniG)).",
            "VernacDefinition",
            "fa981b668c55d198f9efc70bfb2ecc5dc6669b74"
        ],
        [
            "End Automatas_TCG.",
            "VernacEndSegment",
            "dfa6cc94fcdcbdf4c598600fdbdee70fe1e88f01"
        ],
        [
            "Hint Constructors InvT: sysTCG.",
            "VernacHints",
            "2fd8b176578d8d9ea740ccdbf172aea012800aaf"
        ],
        [
            "Hint Constructors InvC: sysTCG.",
            "VernacHints",
            "d3c7a4a1551cf4e998b8a04b07c7482391c32fa4"
        ],
        [
            "Hint Constructors InvG: sysTCG.",
            "VernacHints",
            "3ed124d6383d493814877ca770f72a51d78252c8"
        ],
        [
            "Hint Constructors TrT: sysTCG.",
            "VernacHints",
            "f3c69ba87d298ca6c65cfaaea9942d20f7328c43"
        ],
        [
            "Hint Constructors TrC: sysTCG.",
            "VernacHints",
            "4354fe5cff0e19aa25578b45a13211bd3eaa0e02"
        ],
        [
            "Hint Constructors TrG: sysTCG.",
            "VernacHints",
            "4c2317f8fdd403812ff31b2ec4bf3b59b9c8b29d"
        ],
        [
            "Hint Constructors TrGlobal: sysTCG.",
            "VernacHints",
            "33b774dc8834acaf873b5e528ad3b330d3a4cae3"
        ],
        [
            "Load \"TemporalOperators.v\".",
            "VernacLoad",
            "e0b4b1c6d2aeaf0b62a044c869da16fa1e7b50d1"
        ],
        [
            "Lemma Trivial1 : eq_Ck ini_CkT ini_CkC.",
            "VernacStartTheoremProof",
            "2b089b37a9207025a0445d3692a41bb6f37e4aa8"
        ],
        [
            "unfold eq_Ck, ini_CkT, ini_CkC in |- *; trivial.",
            "VernacExtend",
            "2ad44bdf148f4ad3cbd35c7b2d7ad74cdf345e86"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial2 : forall x : Clock, eq_Ck x x.",
            "VernacStartTheoremProof",
            "73f457e41c36486e3ecb7f86709a4ad91b7831e6"
        ],
        [
            "unfold eq_Ck in |- *; trivial.",
            "VernacExtend",
            "90378a4ce03a05f0595fdae6e8bdc1394b1160bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial3 : forall x y : Clock, eq_Ck x y -> eq_Ck (Inc x) (Inc y).",
            "VernacStartTheoremProof",
            "a24de7ff0c92d888d2c6de39d4781869083b2f76"
        ],
        [
            "unfold eq_Ck, Inc in |- *; intros x y eq_x_y; rewrite eq_x_y; trivial.",
            "VernacExtend",
            "24f365447a1f2a1c6b588e6bfd126cddea45dde4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial4 : forall x y z : Clock, eq_Ck x (plus_Ck y z) -> eq_Ck (Inc x) (plus_Ck (Inc y) z).",
            "VernacStartTheoremProof",
            "c1221a447609ebb6751ba84d3bb4688227fa18fd"
        ],
        [
            "unfold eq_Ck, Inc, plus_Ck in |- *; intros.",
            "VernacExtend",
            "8b7f44ebf6f183efd5ef4446d0a5efedea2bb816"
        ],
        [
            "rewrite H; rewrite (plus_assoc_reverse y z tick); rewrite (plus_comm z tick); auto with *.",
            "VernacExtend",
            "0e11c26b422bdd877e0843d528e34ad1bf25df1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial5 : forall x : Clock, ge_Ck x Reset.",
            "VernacStartTheoremProof",
            "ac16822176f0c5498f1d98be9db9d0274d9b256d"
        ],
        [
            "unfold Clock, ge_Ck, Reset in |- *; auto with *.",
            "VernacExtend",
            "0f70f23efb8d317cdad2cbd67d21fcd4cfc7f3c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial6 : forall x y : Clock, ge_Ck x y -> ge_Ck (Inc x) (Inc y).",
            "VernacStartTheoremProof",
            "3b288d932ea00104bab4e5b0f624d3b9c3b75e58"
        ],
        [
            "unfold Clock, ge_Ck, Inc, plus_Ck in |- *; auto with *.",
            "VernacExtend",
            "7e8e8f71ed760ec49293c842e3f39ceca164f611"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial7 : forall x y : Clock, eq_Ck x y -> ge_Ck x y.",
            "VernacStartTheoremProof",
            "14e7f464ed8d30e9627cd78700c0caf7690ce7b8"
        ],
        [
            "unfold Clock, ge_Ck, eq_Ck in |- *; intros.",
            "VernacExtend",
            "f86d58d03280b8746aa1814a2dd3f426e409cf2c"
        ],
        [
            "rewrite H; auto with *.",
            "VernacExtend",
            "282385b832d97a0b9faa218368602e2c128e3824"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial8 : forall x y : Clock, ge_Ck x y -> ge_Ck (Inc x) y.",
            "VernacStartTheoremProof",
            "6c6290fb05fd37ac0f6aab31099608e67c4553ef"
        ],
        [
            "unfold Clock, ge_Ck, Inc, plus_Ck, tick, plus in |- *; auto with *.",
            "VernacExtend",
            "357e1ed46d03843e91e8ef00df5eb9914924eaeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial9 : forall x y : Clock, gt_Ck x y -> gt_Ck (Inc x) y.",
            "VernacStartTheoremProof",
            "b3f5901363c6af86e7d90edcd79c545d6986ac4a"
        ],
        [
            "unfold Clock, gt_Ck, Inc, plus_Ck in |- *; auto with *.",
            "VernacExtend",
            "34add5e85563d2551e1df87373b0c8ab12e248ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial10 : forall x : Clock, gt_Ck x kt1 -> gt_Ck x kc1.",
            "VernacStartTheoremProof",
            "1101b1cf1382d860aa4bfa2c22eca293108c6678"
        ],
        [
            "unfold Clock, gt_Ck, kt1, kc1 in |- *; intros.",
            "VernacExtend",
            "e2d8176b6afd53c7f1e443f5ea6b7542701ec623"
        ],
        [
            "apply (gt_trans x 8 4 H).",
            "VernacExtend",
            "02997ac012d62bca9a6847c2247b66e52c5f3f97"
        ],
        [
            "unfold gt in |- *; repeat apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "4d95ce089608f077246d168b7ca1bf5d0cd2affa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial11 : forall x : Clock, ~ gt_Ck Reset x.",
            "VernacStartTheoremProof",
            "4da6c6a72e7ece193796246d06d3eda4dcdc3da0"
        ],
        [
            "unfold Clock, gt_Ck, Reset in |- *; auto with *.",
            "VernacExtend",
            "148e91bc9c21023070308faefc66b792727b66f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial12 : forall x y : Clock, gt_Ck (Inc x) y -> eq_Ck x y \\/ gt_Ck x y.",
            "VernacStartTheoremProof",
            "590ad3cffc76daba1126b05dcdc0c733501f8d39"
        ],
        [
            "unfold Clock, Inc, eq_Ck, gt_Ck, plus_Ck, tick in |- *; intros x y.",
            "VernacExtend",
            "22d830e13a838d3ae7042b79180f8ad7d0e1b936"
        ],
        [
            "rewrite (plus_comm x 1); simpl in |- *; intros.",
            "VernacExtend",
            "a2c7be675b6773edade4b0b3be302273a9ce72f4"
        ],
        [
            "elim (le_lt_or_eq y x (gt_S_le y x H)); auto with *.",
            "VernacExtend",
            "9f1fe756264308fb42ea2e6d3a6bc93c872fe4dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial13 : forall x y z : Clock, gt_Ck (Inc x) z -> eq_Ck x y -> ~ le_Ck (Inc y) z.",
            "VernacStartTheoremProof",
            "f6482ba4af16fdf69b4d82f8f6a98e479f5b659e"
        ],
        [
            "unfold Clock, Inc, plus_Ck, tick, eq_Ck, le_Ck, gt_Ck in |- *; intros x y z.",
            "VernacExtend",
            "c4da19debcef53bcd1efb0399dd1e645802dfa7a"
        ],
        [
            "rewrite (plus_comm x 1); rewrite (plus_comm y 1); simpl in |- *; intros.",
            "VernacExtend",
            "d747243342de1da9d661c40980b0c62c25af896e"
        ],
        [
            "rewrite <- H0; apply gt_not_le; assumption.",
            "VernacExtend",
            "8402125de9a20a706344f83f66d27b7e8e7b37fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial14 : forall x : Clock, gt_Ck x kt1 \\/ eq_Ck x kt1 -> gt_Ck x kc1.",
            "VernacStartTheoremProof",
            "e88264a4b6b7052f38a7ca3051f03a4aed973d6c"
        ],
        [
            "unfold Clock, kt1, kc1, tick, eq_Ck, gt_Ck in |- *; intros.",
            "VernacExtend",
            "0f2ab1dffab68d57730a71cfd9ab414cfc47bb92"
        ],
        [
            "elim H; intro H1; [ apply (gt_trans x 8 4 H1) | rewrite H1 ]; unfold gt in |- *; repeat apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "4c14a34939b16fee6508d793ebd66fb46babe59f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial15 : forall x y z : Clock, eq_Ck x kt1 -> eq_Ck x y -> eq_Ck y (plus_Ck z kc1) -> ~ lt_Ck (Inc z) kg1.",
            "VernacStartTheoremProof",
            "5bf9414497cbfef7556912cc4450c047cc1b8116"
        ],
        [
            "unfold Clock, kt1, kc1, kg1, Inc, plus_Ck, tick, eq_Ck, lt_Ck in |- *; intros.",
            "VernacExtend",
            "1d4e7067904ff0c3c815052657cc525851823e86"
        ],
        [
            "rewrite H in H0; rewrite <- H0 in H1.",
            "VernacExtend",
            "919e15cd8c0ff273dc368115ddbb00ad5969eb1d"
        ],
        [
            "apply lt_asym.",
            "VernacExtend",
            "354dee9ea8f634564e5675f14460018639b30bca"
        ],
        [
            "rewrite (plus_comm z 4) in H1; rewrite (plus_comm z 1); simpl in |- *.",
            "VernacExtend",
            "58b3738d3a874552883f2f6ec9ffed10c48b7869"
        ],
        [
            "rewrite (plus_minus 8 4 z H1); simpl in |- *.",
            "VernacExtend",
            "2fa1956216d166af2914089f239022b47dedcdec"
        ],
        [
            "repeat apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "a38d804a1415b67cf225cc68f00122d165da66d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial16 : forall x y : Clock, lt_Ck x kc2 -> ~ eq_Ck x (plus_Ck y kc1).",
            "VernacStartTheoremProof",
            "e9f09962ac081b289e50fec049261647f48d1d22"
        ],
        [
            "unfold Clock, kc1, kc2, eq_Ck, plus_Ck, tick, lt_Ck, not in |- *; intros.",
            "VernacExtend",
            "fbf8589ef04ecad5816e2c4704b76d0dc44d626b"
        ],
        [
            "rewrite H0 in H; elim (le_not_lt 4 (y + 4) (le_plus_r y 4) H).",
            "VernacExtend",
            "b21c5e011447e2df59eb0843c5a421ff4e356476"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial17 : forall x y z : Clock, eq_Ck x y -> eq_Ck x z -> ~ le_Ck (Inc z) y.",
            "VernacStartTheoremProof",
            "0452fe63a3ca450831b59785747add7a58f0d78e"
        ],
        [
            "unfold Clock, eq_Ck, Inc, plus_Ck, tick, le_Ck in |- *; intros.",
            "VernacExtend",
            "ad4ea6f1f4b003e08865cee910fad000a7266cbe"
        ],
        [
            "rewrite <- H0; rewrite <- H.",
            "VernacExtend",
            "0e8c8d799afa7d9ff8bc75042f88d7b99ef6ae89"
        ],
        [
            "rewrite plus_comm; simpl in |- *; unfold not in |- *; intro.",
            "VernacExtend",
            "917e02f829e66184f1cf811aedfb158321674464"
        ],
        [
            "elim (n_Sn x (le_antisym x (S x) (le_n_Sn x) H1)).",
            "VernacExtend",
            "2ed988b807ae5b0161db759af286a99bc2bf6ff7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial18 : lt_Ck (Inc Reset) kc2.",
            "VernacStartTheoremProof",
            "186e5f569f5b8fcaeb5610835c93f09f8408cbb0"
        ],
        [
            "unfold lt_Ck, Inc, tick, plus_Ck, Reset, kc2 in |- *.",
            "VernacExtend",
            "75a84b71b5b8741aa489fbd9f90a05bebb98f05a"
        ],
        [
            "rewrite (plus_comm 0 1); simpl in |- *.",
            "VernacExtend",
            "a3686ddda6730190530c43505f18040cdfa1fd88"
        ],
        [
            "apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial19 : forall x y z : Clock, lt_Ck x kg1 -> eq_Ck y (plus_Ck x kc1) -> eq_Ck z y -> lt_Ck (Inc z) kt2.",
            "VernacStartTheoremProof",
            "cbde7a25c99f4dfa50f225874026d3f5d47cb1e5"
        ],
        [
            "unfold Clock, lt_Ck, eq_Ck, Inc, tick, plus_Ck, kg1, kc1, kt2 in |- *; intros.",
            "VernacExtend",
            "b645efefdcac56b692d833a5af3d660c17c2faf0"
        ],
        [
            "rewrite H0 in H1; rewrite H1.",
            "VernacExtend",
            "12c20d350a004c652b3323ec62325a12129c5150"
        ],
        [
            "rewrite (plus_comm x 4); rewrite (plus_comm (4 + x) 1); simpl in |- *.",
            "VernacExtend",
            "e4cdb78ba312edc4c0a075aa9ae19b6a9f10445a"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply (lt_le_trans x 4 15 H).",
            "VernacExtend",
            "0fdce0c3246244d0ae7bd7287977766160fa5a40"
        ],
        [
            "repeat apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "4fe44e80c528179e389e2f6c2e271d5877745da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial20 : forall x y z : Clock, lt_Ck x kg1 -> eq_Ck y (plus_Ck x kc1) -> eq_Ck z y -> ~ gt_Ck z kt1.",
            "VernacStartTheoremProof",
            "b38314174fc328d57c2faea9459771f946299cbc"
        ],
        [
            "unfold Clock, gt_Ck, lt_Ck, eq_Ck, plus_Ck, kg1, kc1, kt1, gt in |- *; intros.",
            "VernacExtend",
            "770bc3795beb5f69b0f11a218d1f9837b46401cc"
        ],
        [
            "apply le_not_lt.",
            "VernacExtend",
            "f8e2533dc073c956a7b1c186bc0eabb50b93a8cf"
        ],
        [
            "rewrite <- H1 in H0; rewrite H0.",
            "VernacExtend",
            "d21397af991e60baab3af7abfdc7b5647c3f1315"
        ],
        [
            "generalize (plus_lt_compat_r x 4 4 H); simpl in |- *; intro.",
            "VernacExtend",
            "56c887715cf378dd43aed27ac74d174fb0a9f3ff"
        ],
        [
            "apply (lt_le_weak (x + 4) 8 (plus_lt_compat_r x 4 4 H)).",
            "VernacExtend",
            "048e0df72c9ad32afb9dba372a45b3aefd7d3d46"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial21 : lt_Ck (Inc Reset) kg3.",
            "VernacStartTheoremProof",
            "69a4fedc1510b31946c8de5e0cedf09c8532cdb9"
        ],
        [
            "unfold lt_Ck, Inc, tick, plus_Ck, Reset, kg3 in |- *.",
            "VernacExtend",
            "b6ee681fad34d2ca2b12e06d98a56632b83b2ccd"
        ],
        [
            "rewrite (plus_comm 0 1); simpl in |- *.",
            "VernacExtend",
            "a3686ddda6730190530c43505f18040cdfa1fd88"
        ],
        [
            "apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial22 : forall x y : Clock, le_Ck x y -> lt_Ck x y \\/ eq_Ck x y.",
            "VernacStartTheoremProof",
            "56bc990b8ab987112ee75297670114e49cdd04e2"
        ],
        [
            "unfold Clock, le_Ck, lt_Ck, eq_Ck in |- *; intros.",
            "VernacExtend",
            "a08d4ea8911370f85ccae56c20d63d8abb473f29"
        ],
        [
            "apply (le_lt_or_eq x y H).",
            "VernacExtend",
            "5e60feb2515be7f93f748adf14e4c167f1b4b9db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial23 : forall x y : Clock, lt_Ck x kc1 -> eq_Ck y x -> Inc y < kt2.",
            "VernacStartTheoremProof",
            "8c4f632cb55c6aadc212b6dbc06bd53fa175ab7d"
        ],
        [
            "unfold Clock, lt_Ck, eq_Ck, Inc, tick, plus_Ck, kc1, kt2 in |- *; intros.",
            "VernacExtend",
            "6f998fadbc9e4407b2bbda3df4708c4a3c93f9a1"
        ],
        [
            "rewrite <- H0 in H; rewrite (plus_comm y 1); simpl in |- *.",
            "VernacExtend",
            "796eb3585f3f7b7ef85cedba9d26d764e49a2489"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply (lt_le_trans y 4 19 H).",
            "VernacExtend",
            "43a016d25414660e73c92c1c1a84dcfc2eba512e"
        ],
        [
            "repeat apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "4fe44e80c528179e389e2f6c2e271d5877745da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial24 : forall x y : Clock, lt_Ck x y -> le_Ck (Inc x) y.",
            "VernacStartTheoremProof",
            "e1585e8d8c91494c86cf925ce9e336acbe84e496"
        ],
        [
            "unfold Clock, lt_Ck, le_Ck, Inc, tick, plus_Ck in |- *; intros.",
            "VernacExtend",
            "fc8ffdaac85bac6461302ab67d1f6e281fc289de"
        ],
        [
            "rewrite (plus_comm x 1); simpl in |- *.",
            "VernacExtend",
            "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
        ],
        [
            "apply (lt_le_S x y H).",
            "VernacExtend",
            "2fa19f3bbe72c04be7bdcc9fa4b15c6115019246"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial25 : forall x y : Clock, eq_Ck y kc1 -> eq_Ck x y -> lt_Ck (Inc x) kt2.",
            "VernacStartTheoremProof",
            "d7a68ea940af33c53bd208d77274048677aa3ca4"
        ],
        [
            "unfold Clock, eq_Ck, lt_Ck, Inc, tick, plus_Ck, kc1, kt2 in |- *; intros.",
            "VernacExtend",
            "471a83c8138bfbd0782d7944bf54761707beb8ba"
        ],
        [
            "rewrite (plus_comm x 1); simpl in |- *.",
            "VernacExtend",
            "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "rewrite H in H0; rewrite H0.",
            "VernacExtend",
            "315a6ed770a71ae041b170fd87ad4618e0747c5a"
        ],
        [
            "repeat apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "a38d804a1415b67cf225cc68f00122d165da66d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial26 : lt_Ck (Inc Reset) kg1.",
            "VernacStartTheoremProof",
            "d94a8917b05bdc099730150b31bbf63453e3bf1e"
        ],
        [
            "unfold lt_Ck, Inc, plus_Ck, tick, kg1, Reset in |- *.",
            "VernacExtend",
            "5b677708beadb071a80b22c96c8b26b4e0dbb5f6"
        ],
        [
            "rewrite (plus_comm 0 1); simpl in |- *.",
            "VernacExtend",
            "a3686ddda6730190530c43505f18040cdfa1fd88"
        ],
        [
            "apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial27 : lt_Ck (Inc Reset) kt2.",
            "VernacStartTheoremProof",
            "13e57ac7c1c927a07ca3722bd3152ec164e99d5d"
        ],
        [
            "unfold lt_Ck, Inc, plus_Ck, tick, kt2, Reset in |- *.",
            "VernacExtend",
            "c83d0e4a96af16ad03a2b00d8f350ffd703cf4ca"
        ],
        [
            "rewrite (plus_comm 0 1); simpl in |- *.",
            "VernacExtend",
            "a3686ddda6730190530c43505f18040cdfa1fd88"
        ],
        [
            "apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial28 : le_Ck (Inc Reset) kc1.",
            "VernacStartTheoremProof",
            "3a18341ea19f4051b6f88569e944845d56a58191"
        ],
        [
            "unfold le_Ck, Inc, plus_Ck, tick, kc1, Reset in |- *.",
            "VernacExtend",
            "4d949361a6eb1f16e45e6e081aeee3c63149dbca"
        ],
        [
            "rewrite (plus_comm 0 1); simpl in |- *.",
            "VernacExtend",
            "a3686ddda6730190530c43505f18040cdfa1fd88"
        ],
        [
            "apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "050503db28f4619447bc14e30d11ebbc6c4e00ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial29 : forall x : Clock, lt_Ck x kg3 -> lt_Ck x kg2 \\/ ge_Ck x kg2 /\\ lt_Ck x kg3.",
            "VernacStartTheoremProof",
            "67b96d87c196965729eed53f754514776329b678"
        ],
        [
            "unfold Clock, lt_Ck, ge_Ck, kg2, kg3, ge in |- *; intros.",
            "VernacExtend",
            "6943eb00e36ef258a775c151219892dddee8fe73"
        ],
        [
            "elim (le_or_lt 4 x); auto with *.",
            "VernacExtend",
            "2b9afc5cff78030e6ead77cac1ce588927869fed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial30 : forall x : Clock, lt_Ck x kg2 -> lt_Ck (Inc x) kg3.",
            "VernacStartTheoremProof",
            "02db93fe2cc00e9a1d6397b9e340dd5e35bcad57"
        ],
        [
            "unfold Clock, lt_Ck, Inc, plus_Ck, tick, kg2, kg3 in |- *; intros.",
            "VernacExtend",
            "3c5e683618ea425c4ff5aed75e4710950855eb59"
        ],
        [
            "rewrite (plus_comm x 1); simpl in |- *.",
            "VernacExtend",
            "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply (lt_le_trans x 4 7 H).",
            "VernacExtend",
            "ab828a3c192d77cfd16fe1f5eee1c374abd8f0e6"
        ],
        [
            "repeat apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "4fe44e80c528179e389e2f6c2e271d5877745da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial31 : forall x y : Clock, eq_Ck x kc1 -> ge_Ck y x -> ge_Ck y kg2.",
            "VernacStartTheoremProof",
            "c3e9e5094ddc32038a7b390e16b475669cc87753"
        ],
        [
            "unfold Clock, ge_Ck, eq_Ck, kc1, kg2, ge in |- *; intros.",
            "VernacExtend",
            "709910dc8f5b1ef2953536c5fc9a85bd701a9859"
        ],
        [
            "rewrite H in H0; assumption.",
            "VernacExtend",
            "b80a16928a9db2554e8c10988e2015aae6d8efa3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_lt_le : forall x y : nat, ~ x < y -> y <= x.",
            "VernacStartTheoremProof",
            "32b673b1b499ab0a461bed73a0156210f818b5b4"
        ],
        [
            "unfold not in |- *; intros x y no_lt_x_y.",
            "VernacExtend",
            "f50d46d7d9d67b8c29677d8faeb4e4d28c3f90d5"
        ],
        [
            "elim (le_or_lt y x); [ trivial | intro lt_x_y; elim (no_lt_x_y lt_x_y) ].",
            "VernacExtend",
            "9ac9d0d3168b064de0e4cf31c05813df150c266a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial32 : forall x : Clock, lt_Ck x kt2 -> ~ lt_Ck (Inc x) kt2 -> gt_Ck x kt1.",
            "VernacStartTheoremProof",
            "ed33b7e6c73d2ee9228f0b48c030b34971c368a5"
        ],
        [
            "unfold Clock, lt_Ck, gt_Ck, Inc, plus_Ck, tick, kt1, kt2, gt in |- *; intros.",
            "VernacExtend",
            "3cedb011f0323edaf1cdde6265e8a9a436a2e281"
        ],
        [
            "generalize (not_lt_le H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
            "VernacExtend",
            "294e1e46c1ec252a7596a26625c4df8ce1dedc86"
        ],
        [
            "generalize (le_antisym 19 x (le_S_n 19 x H1) (lt_n_Sm_le x 19 H)); intro H4; rewrite <- H4.",
            "VernacExtend",
            "31186f0d43f64c9f8201278f765b352718b62d0d"
        ],
        [
            "repeat apply lt_n_S; apply lt_O_Sn.",
            "VernacExtend",
            "a38d804a1415b67cf225cc68f00122d165da66d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Axiom not_le_lt : forall x y : nat, ~ x <= y -> y < x.",
            "VernacAssumption",
            "1c3225aaaf9f549c7859a315a8ce47e935a1fd48"
        ],
        [
            "Lemma Trivial33 : forall x : Clock, le_Ck x kc1 -> ~ le_Ck (Inc x) kc1 -> eq_Ck x kc1.",
            "VernacStartTheoremProof",
            "9023b413855c4431284989663bfa8f15c17b8820"
        ],
        [
            "unfold Clock, le_Ck, eq_Ck, Inc, plus_Ck, tick, kc1 in |- *; intros.",
            "VernacExtend",
            "536a86e720ceb44d6e73203c044e10f7a251fbb0"
        ],
        [
            "generalize (not_le_lt H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
            "VernacExtend",
            "1c3aadacb5fbcdb805d84f5c98143fdd364ecbbb"
        ],
        [
            "apply (le_antisym x 4 H (lt_n_Sm_le 4 x H1)).",
            "VernacExtend",
            "5e8ba79517d2df04374a559e9ba0a853baa6f44b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trivial34 : forall x : Clock, lt_Ck x kg3 -> ~ lt_Ck (Inc x) kg3 -> ge_Ck x kg2.",
            "VernacStartTheoremProof",
            "6c62d6655b293fc846ba9975b7d228b5b9e78cc8"
        ],
        [
            "unfold Clock, lt_Ck, ge_Ck, Inc, plus_Ck, tick, kg3, kg2 in |- *; intros.",
            "VernacExtend",
            "6e4756ed45c71f42b456ea28ea6492e82e4018db"
        ],
        [
            "generalize (not_lt_le H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
            "VernacExtend",
            "294e1e46c1ec252a7596a26625c4df8ce1dedc86"
        ],
        [
            "generalize (le_antisym 7 x (le_S_n 7 x H1) (lt_n_Sm_le x 7 H)); intro H4; rewrite <- H4.",
            "VernacExtend",
            "31d67f2db03ae4b9241db132a58604fe3324eef0"
        ],
        [
            "unfold ge in |- *; repeat apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "3a116f4ed2f7a25c428ea6b78fd2ec0e51f4fed1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivial_inv_1 : lt_Ck Reset kt2.",
            "VernacStartTheoremProof",
            "f58490f2fab3733f67dd3c311833c62451afbb77"
        ],
        [
            "unfold lt_Ck, Reset, kt2 in |- *; auto with *.",
            "VernacExtend",
            "d64f265c7b29dd0ae17815340a31691b7c0a55db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivial_inv_2 : forall x : Clock, le_Ck Reset x.",
            "VernacStartTheoremProof",
            "7cc1e1336a61725fc629d98b912c6133e5eb6867"
        ],
        [
            "unfold Clock, le_Ck, Reset in |- *; auto with *.",
            "VernacExtend",
            "6cfabd0b10408d5ee2d177f19949d5066c3df869"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivial_inv_3 : lt_Ck Reset kc2.",
            "VernacStartTheoremProof",
            "9550023fe3b09ba76921db2d438abd63dd355885"
        ],
        [
            "unfold lt_Ck, Reset, kc2 in |- *; auto with *.",
            "VernacExtend",
            "9f36a05fc029559c357812d240440e8d8a28282c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivial_inv_4 : lt_Ck Reset kg1.",
            "VernacStartTheoremProof",
            "200eb4f4add3e1c2a3d4634e6b59ef7294e6103c"
        ],
        [
            "unfold lt_Ck, Reset, kg1 in |- *; auto with *.",
            "VernacExtend",
            "d56cb59abbd2571f475949c9362b56033ef535fb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivial_inv_5 : lt_Ck Reset kg3.",
            "VernacStartTheoremProof",
            "80f37a4ac531db73aa04b9430cd0a995deb8d1b3"
        ],
        [
            "unfold lt_Ck, Reset, kg3 in |- *; auto with *.",
            "VernacExtend",
            "0b1c9df860213d35cb17b5c82a7abed9d1349eec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Derive Inversion_clear cl_TRT_APPROACH with (forall st1 st2 : S_Ck ST, TrT st1 Approach st2) Sort Prop.",
            "VernacExtend",
            "4a4435aa8d0e802c07074bb49c4f7492bad5ef4c"
        ],
        [
            "Derive Inversion_clear cl_TRT_IN with (forall st1 st2 : S_Ck ST, TrT st1 In st2) Sort Prop.",
            "VernacExtend",
            "8a7d8710acbb239d89494af51802ce24c7868d23"
        ],
        [
            "Derive Inversion_clear cl_TRT_EXIT with (forall st1 st2 : S_Ck ST, TrT st1 Exit st2) Sort Prop.",
            "VernacExtend",
            "db6e0ccb68a90498a442a71c97e967473ecebd57"
        ],
        [
            "Derive Inversion_clear cl_TRT_INC_TIME with (forall st1 st2 : S_Ck ST, TrT st1 Tick st2) Sort Prop.",
            "VernacExtend",
            "a14200883c259b8d66ba56fea6b973757da6edbe"
        ],
        [
            "Derive Inversion_clear cl_TRC_APPROACH with (forall sc1 sc2 : S_Ck SC, TrC sc1 Approach sc2) Sort Prop.",
            "VernacExtend",
            "b9249cbdb270c71480dac990802280a9aed6ff50"
        ],
        [
            "Derive Inversion_clear cl_TRC_LOWER with (forall sc1 sc2 : S_Ck SC, TrC sc1 Lower sc2) Sort Prop.",
            "VernacExtend",
            "2318eb13f564998a5ec9870dbc327a3bdaf89582"
        ],
        [
            "Derive Inversion_clear cl_TRC_EXIT with (forall sc1 sc2 : S_Ck SC, TrC sc1 Exit sc2) Sort Prop.",
            "VernacExtend",
            "cdde7679dd6255038854c6736cadf0b81a8d4030"
        ],
        [
            "Derive Inversion_clear cl_TRC_RAISE with (forall sc1 sc2 : S_Ck SC, TrC sc1 Raise sc2) Sort Prop.",
            "VernacExtend",
            "58cd7fa51f7d622ee38bd452a1f53c86ed51ff20"
        ],
        [
            "Derive Inversion_clear cl_TRC_INC_TIME with (forall sc1 sc2 : S_Ck SC, TrC sc1 Tick sc2) Sort Prop.",
            "VernacExtend",
            "445ce9f3c13e5b250f32d254a624175c30064179"
        ],
        [
            "Derive Inversion_clear cl_TRG_LOWER with (forall sg1 sg2 : S_Ck SG, TrG sg1 Lower sg2) Sort Prop.",
            "VernacExtend",
            "0f3379e6046f34a0dc92d531ec87824fe31b3f99"
        ],
        [
            "Derive Inversion_clear cl_TRG_DOWN with (forall sg1 sg2 : S_Ck SG, TrG sg1 Down sg2) Sort Prop.",
            "VernacExtend",
            "6030703e21496b42799427ce55e1a1c71e19370d"
        ],
        [
            "Derive Inversion_clear cl_TRG_RAISE with (forall sg1 sg2 : S_Ck SG, TrG sg1 Raise sg2) Sort Prop.",
            "VernacExtend",
            "a16ee0c4bc33961e9a80fc8223e482a171ec72d9"
        ],
        [
            "Derive Inversion_clear cl_TRG_UP with (forall sg1 sg2 : S_Ck SG, TrG sg1 Up sg2) Sort Prop.",
            "VernacExtend",
            "9d4c0cd9e598e40be67bf134d025f5c20463085c"
        ],
        [
            "Derive Inversion_clear cl_TRG_INC_TIME with (forall sg1 sg2 : S_Ck SG, TrG sg1 Tick sg2) Sort Prop.",
            "VernacExtend",
            "e922e37cdf7bde4a05961223e4488b1c7539eefe"
        ],
        [
            "Derive Inversion_clear cl_Ifar with (forall x : Clock, InvT (Far, x)) Sort Prop.",
            "VernacExtend",
            "0dc5c4b4a634a64e8a20391dfbb8255036709845"
        ],
        [
            "Derive Inversion_clear cl_Inear with (forall x : Clock, InvT (Near, x)) Sort Prop.",
            "VernacExtend",
            "ac534375a11fad7ec57e0eb3e33716eae00e4f87"
        ],
        [
            "Derive Inversion_clear cl_Iinside with (forall x : Clock, InvT (Inside, x)) Sort Prop.",
            "VernacExtend",
            "7ff85ddc6a1d097f8506d5749d4b53a47819dd6d"
        ],
        [
            "Derive Inversion_clear cl_Isc1 with (forall y : Clock, InvC (Sc1, y)) Sort Prop.",
            "VernacExtend",
            "63075b6d9e4475b02f1f991b2f24f64596518ad4"
        ],
        [
            "Derive Inversion_clear cl_Isc2 with (forall y : Clock, InvC (Sc2, y)) Sort Prop.",
            "VernacExtend",
            "dd4707fca41f01299678e7083cf502a52db71683"
        ],
        [
            "Derive Inversion_clear cl_Isc3 with (forall y : Clock, InvC (Sc3, y)) Sort Prop.",
            "VernacExtend",
            "af25040298d4b306fc474aa3d5ae19113a1ed4ca"
        ],
        [
            "Derive Inversion_clear cl_Isc4 with (forall y : Clock, InvC (Sc4, y)) Sort Prop.",
            "VernacExtend",
            "e560834dc515bd1261432ee3f23a0228b502e1f3"
        ],
        [
            "Derive Inversion_clear cl_Iopen with (forall z : Clock, InvG (Open, z)) Sort Prop.",
            "VernacExtend",
            "4ed5d824f7ba15fc68b5a432e085bef7d8faeb8e"
        ],
        [
            "Derive Inversion_clear cl_Ilowering with (forall z : Clock, InvG (Lowering, z)) Sort Prop.",
            "VernacExtend",
            "87bb69d50403485f35b715eb5934222ef7bef942"
        ],
        [
            "Derive Inversion_clear cl_Iclosed with (forall z : Clock, InvG (Closed, z)) Sort Prop.",
            "VernacExtend",
            "ed1ec0365a8cea6ad50393128e732f25cec8339d"
        ],
        [
            "Derive Inversion_clear cl_Iraising with (forall z : Clock, InvG (Raising, z)) Sort Prop.",
            "VernacExtend",
            "b54bd64c37e5b2c85a9b69b7c2fb94e1dc591145"
        ],
        [
            "Ltac Easy := try discriminate; auto with *.",
            "VernacExtend",
            "4f514cdd935e08b3254e811c6103166f995b0168"
        ],
        [
            "Ltac Easy2 := intros; try discriminate; auto with *.",
            "VernacExtend",
            "1ea003548d80fff8e6f0686781c2d20f03c28263"
        ],
        [
            "Ltac Simpl_or eq := elim eq; intro; Easy.",
            "VernacExtend",
            "fd092c204dbb05f0d919ee55c4980e829ec52329"
        ],
        [
            "Ltac Simpl_and eq := elim eq; intros; Easy.",
            "VernacExtend",
            "8531166f65ca022f4cc300c2206dd0ab8f4256d0"
        ],
        [
            "Ltac Generalize_Easy eq := generalize eq; intro; Easy.",
            "VernacExtend",
            "e82bf9dd0408d3a86d25f13653561a04f5056492"
        ],
        [
            "Ltac Split3_Trivial := split; [ auto with * | split; auto with * ].",
            "VernacExtend",
            "b547f2b87d2ff3b5f94c73c01ae6099d2fb169f4"
        ],
        [
            "Ltac BeginForAll := unfold ForAll in |- *; simple induction 1; [ simpl in |- *; intros; Easy | idtac ].",
            "VernacExtend",
            "b487b31c2abd7e04868578e36c33400e656ed5d5"
        ],
        [
            "Ltac SplitTrans := intros s1 s2 l rs_s1 p_s1 tr_gl; generalize rs_s1; clear rs_s1; generalize p_s1; clear p_s1; elim tr_gl.",
            "VernacExtend",
            "187907077cf244802d99e52a4ef24020ee3f8301"
        ],
        [
            "Ltac SplitTrans_Simpl := SplitTrans; [ Simpl_In | Simpl_Down | Simpl_Up | Simpl_Approach | Simpl_Exit | Simpl_Lower | Simpl_Raise | Simpl_Tick ] with Simpl_In := intros st1 st2 trt_In; inversion trt_In using cl_TRT_IN; intros x gt_x_kt1 lt_x_kt2 sc sg; elim sc; elim sg; simpl in |- *; intros; Easy with Simpl_Down := intros sg1 sg2 trg_Down; inversion trg_Down using cl_TRG_DOWN; intros z lt_z_kg1 st sc; elim st; elim sc; simpl in |- *; intros; Easy with Simpl_Up := intros sg1 sg2 trg_Up; inversion trg_Up using cl_TRG_UP; intros z ge_z_kg2 lt_z_kg3 st sc; elim st; elim sc; simpl in |- *; intros; Easy with Simpl_Approach := intros st1 st2 sc1 sc2 trt_Approach trc_Approach; inversion trt_Approach using cl_TRT_APPROACH; inversion trc_Approach using cl_TRC_APPROACH; intros y x sg; elim sg; simpl in |- *; intros; Easy with Simpl_Exit := intros st1 st2 sc1 sc2 trt_Exit trc_Exit; inversion trt_Exit using cl_TRT_EXIT; inversion trc_Exit using cl_TRC_EXIT; intros y x lt_x_kt2 sg; elim sg; simpl in |- *; intros; Easy with Simpl_Lower := intros sc1 sc2 sg1 sg2 trc_Lower trg_Lower; inversion trc_Lower using cl_TRC_LOWER; inversion trg_Lower using cl_TRG_LOWER; intros z y eq_y_kc1 st; elim st; simpl in |- *; intros; Easy with Simpl_Raise := intros sc1 sc2 sg1 sg2 trc_Raise trg_Raise; inversion trc_Raise using cl_TRC_RAISE; inversion trg_Raise using cl_TRG_RAISE; intros z y lt_y_kc2 st; elim st; simpl in |- *; intros; Easy with Simpl_Tick := intros st1 st2 sc1 sc2 sg1 sg2 trt_Tick trc_Tick trg_Tick; inversion trt_Tick using cl_TRT_INC_TIME; inversion trc_Tick using cl_TRC_INC_TIME; inversion trg_Tick using cl_TRG_INC_TIME; simpl in |- *; intros; Easy.",
            "VernacExtend",
            "1afee72cc3889ec0b2b8cd6184d01789a0b4d44c"
        ],
        [
            "Notation InvTCG := (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) (only parsing).",
            "VernacSyntacticDefinition",
            "1d9b36855669dc20fe72bf94433fb8c763b5da61"
        ],
        [
            "Notation ForAll_TCG := (ForAll TrGlobal) (only parsing).",
            "VernacSyntacticDefinition",
            "b1a86fe3c7030354883ccbb02311e1132b10a2f8"
        ],
        [
            "Notation Exists_TCG := (Exists TrGlobal) (only parsing).",
            "VernacSyntacticDefinition",
            "e0c000c7eb7d028f63e180fa2006d4a3b5e4701c"
        ],
        [
            "Lemma Inv_SiniTCG : (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) SiniTCG.",
            "VernacStartTheoremProof",
            "b5cc5e9775314d2063e2623688d98a7e4f2de2cb"
        ],
        [
            "simpl in |- *; unfold SiniT, SiniC, SiniG in |- *; Split3_Trivial.",
            "VernacExtend",
            "6f7a2ba04f23cb922ee77c7cd56e4c3cd8197efd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv1 (s : StGlobal) := match s with | ((st, _), ((sc, _), (sg, _))) => st = Near \\/ st = Inside -> sc = Sc3 -> sg = Closed \\/ sg = Lowering end.",
            "VernacDefinition",
            "7ea41ba583b914a9bd6b474a176edd8f6c75fc7b"
        ],
        [
            "Lemma lema_Inv1 : ForAll TrGlobal SiniTCG Inv1.",
            "VernacStartTheoremProof",
            "7352f5f08780d11af88c42f321f3181311951728"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or (p_s1 H0 H1).",
            "VernacExtend",
            "371749bd05c795fd5506e80b40e0da7ef36d5c88"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv2 (s : StGlobal) := match s with | ((st, _), ((sc, _), (sg, _))) => st = Far -> sg = Open \\/ sg = Raising -> sc = Sc1 end.",
            "VernacDefinition",
            "d6ea7595df71162c9c38f377b068e34737b17558"
        ],
        [
            "Lemma lema_Inv2 : ForAll TrGlobal SiniTCG Inv2.",
            "VernacStartTheoremProof",
            "851397d394feda0f81dba8737cb08255c987639c"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or H1.",
            "VernacExtend",
            "6677d20b2d61c5e5c8310f27411b3015ff5866e2"
        ],
        [
            "elim (lema_Inv1 rs_s1 (or_intror (Inside = Near) (refl_equal Inside)) (refl_equal Sc3)); intro H2; rewrite H2 in H1; Simpl_or H1.",
            "VernacExtend",
            "bf667c106e6c81e71b567ddf4645654a75221709"
        ],
        [
            "Simpl_or H1.",
            "VernacExtend",
            "6677d20b2d61c5e5c8310f27411b3015ff5866e2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv3 (s : StGlobal) := match s with | ((st, x), ((_, y), _)) => st = Near \\/ st = Inside -> eq_Ck x y end.",
            "VernacDefinition",
            "2eac668a6dfe63d55447a603d4285bb2de1107f1"
        ],
        [
            "Lemma lema_Inv3 : ForAll TrGlobal SiniTCG Inv3.",
            "VernacStartTheoremProof",
            "ef135081561e0a65cccc10ce2dcc419fe4d4fc47"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "apply Trivial1.",
            "VernacExtend",
            "5e333b27d63618a734cbde9d0142c0c2372afb38"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or H0.",
            "VernacExtend",
            "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
        ],
        [
            "apply (Trivial3 (p_s1 H3)).",
            "VernacExtend",
            "2abc0a603a64a8dc72afdee68558e3b2c0c1a024"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv4 (s : StGlobal) := match s with | ((st, _), ((sc, _), _)) => st = Near -> sc = Sc2 \\/ sc = Sc3 end.",
            "VernacDefinition",
            "f9aa97700f488beff6f72c1c22a736da9a0a32df"
        ],
        [
            "Lemma lema_Inv4 : ForAll TrGlobal SiniTCG Inv4.",
            "VernacStartTheoremProof",
            "f7d16a0c8c138f432e867514737c3863db5d1460"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or (p_s1 H0).",
            "VernacExtend",
            "ec7f28765957ecf40ac7dc6d18546ea44b6d32fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv5 (s : StGlobal) := match s with | ((st, _), ((sc, y), (_, z))) => st = Near -> sc = Sc3 -> eq_Ck y (plus_Ck z kc1) end.",
            "VernacDefinition",
            "0d4d816f6668e39bf5fe2c0c5fb2903686e1b828"
        ],
        [
            "Lemma lema_Inv5 : ForAll TrGlobal SiniTCG Inv5.",
            "VernacStartTheoremProof",
            "4fe69cc7ff24a08ab3a9a1e60ddee39ef96fc6e8"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply (Trivial4 (p_s1 H3 H4)).",
            "VernacExtend",
            "8524d67bcd574d41675e175b79ffce11f620eda0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv6 (s : StGlobal) := match s with | ((st, x), ((sc, _), _)) => st = Near /\\ gt_Ck x kc1 \\/ st = Inside -> sc = Sc3 end.",
            "VernacDefinition",
            "120b0c987d4145aa4623022c6f84017fadae0dae"
        ],
        [
            "Lemma lema_Inv6 : ForAll TrGlobal SiniTCG Inv6.",
            "VernacStartTheoremProof",
            "e523528ff29aded0bf7eb4ff08c0805ed6e6667a"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "decompose [and or] H0; discriminate.",
            "VernacExtend",
            "3cdb2df70f70c74dd48938872b403f8a0560dad0"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply p_s1; left; split; [ auto with * | apply (Trivial10 gt_x_kt1) ].",
            "VernacExtend",
            "0698c8ba07b29b77cc584fe3986d6485a08e630e"
        ],
        [
            "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
            "VernacExtend",
            "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
        ],
        [
            "decompose [and or] H0; discriminate.",
            "VernacExtend",
            "3cdb2df70f70c74dd48938872b403f8a0560dad0"
        ],
        [
            "Generalize_Easy (p_s1 H0).",
            "VernacExtend",
            "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
        ],
        [
            "decompose [and or] H3; [ elim (Trivial12 H6) | auto with * ].",
            "VernacExtend",
            "2d94e0bb678926f7e57cde9ac45896cab3b08ddc"
        ],
        [
            "elim (lema_Inv4 rs_s1 H5); auto with *.",
            "VernacExtend",
            "9c4836dc2e2594aed23be678cdd59668290a5ed2"
        ],
        [
            "generalize (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)); intros.",
            "VernacExtend",
            "238d2d511eb79b6f48df86cf81ce9ee2a0655207"
        ],
        [
            "rewrite H7 in H1.",
            "VernacExtend",
            "a8ef67e2d05abffc621a0fcd305a8d5bdf079c37"
        ],
        [
            "inversion H1 using cl_Isc2; intro H9.",
            "VernacExtend",
            "a166b318180b3248064cc3bddb935d7051b7268b"
        ],
        [
            "elim (Trivial13 H6 H4 H9).",
            "VernacExtend",
            "7e58c3d3500a5018d1b8b025fc841ea445709d10"
        ],
        [
            "intro H7; apply p_s1; left; split; [ assumption | Generalize_Easy (Trivial9 H7) ].",
            "VernacExtend",
            "6b3865bdcb04689256711a1c33a12849354873c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv7 (s : StGlobal) := match s with | ((st, _), ((sc, _), (sg, _))) => st = Near \\/ st = Inside -> sc = Sc3 -> sg = Lowering \\/ sg = Closed end.",
            "VernacDefinition",
            "8112452dfb37847813d73e5b33e1594a1b508340"
        ],
        [
            "Lemma lema_Inv7 : ForAll TrGlobal SiniTCG Inv7.",
            "VernacStartTheoremProof",
            "e3fcb8e2164c95db5b3f4c60e59ab4b80159f42a"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or (p_s1 H0 H1).",
            "VernacExtend",
            "371749bd05c795fd5506e80b40e0da7ef36d5c88"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv8 (s : StGlobal) := match s with | ((st, x), ((sc, _), (sg, _))) => st = Near /\\ gt_Ck x kt1 \\/ st = Inside -> sg = Closed end.",
            "VernacDefinition",
            "183f8e1f74d4490986eef005f6f6f6bd9e1a63f4"
        ],
        [
            "Lemma lema_Inv8 : ForAll TrGlobal SiniTCG Inv8.",
            "VernacStartTheoremProof",
            "7a7000a9961dd3e114cf0ce13ddb230c42eaad17"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "decompose [and or] H0; discriminate.",
            "VernacExtend",
            "3cdb2df70f70c74dd48938872b403f8a0560dad0"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Generalize_Easy (p_s1 H0).",
            "VernacExtend",
            "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
        ],
        [
            "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
            "VernacExtend",
            "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
        ],
        [
            "Generalize_Easy (p_s1 H0).",
            "VernacExtend",
            "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
        ],
        [
            "generalize (lema_Inv6 rs_s1); simpl in |- *; intro.",
            "VernacExtend",
            "463d1f494e38485467482c64f8b458bad5108577"
        ],
        [
            "decompose [and or] H0.",
            "VernacExtend",
            "28a59650079b15f243ba3e7c9762111ff4974734"
        ],
        [
            "Generalize_Easy (H1 (or_introl (a = Inside) (conj H3 (Trivial14 (or_introl (eq_Ck b kt1) H4))))).",
            "VernacExtend",
            "5eaf79b877c605207407d899567a09e2f5560f86"
        ],
        [
            "Generalize_Easy (H1 (or_intror (a = Near /\\ gt_Ck b kc1) H2)).",
            "VernacExtend",
            "b3c8ce45659edb43697cdee8a2840f80f717fd96"
        ],
        [
            "decompose [and or] H3; [ Simpl_or (Trivial12 H6) | auto with * ].",
            "VernacExtend",
            "3aef75a480ca791ffee40a3f5a6096f9a4d4e033"
        ],
        [
            "generalize (lema_Inv6 rs_s1 (or_introl (s4 = Inside) (conj H5 (Trivial14 (or_intror (gt_Ck x kt1) H4))))); intro.",
            "VernacExtend",
            "a905c38d00c121e57d3b036f0f4b97b4d12c23db"
        ],
        [
            "Simpl_or (lema_Inv1 rs_s1 (or_introl (s4 = Inside) H5) H7).",
            "VernacExtend",
            "4c4ba1635c91c5c5caa2a82bdb9e5c776944792f"
        ],
        [
            "rewrite H8 in H0; inversion H0 using cl_Ilowering; intro.",
            "VernacExtend",
            "0af022bafdbb4859d6f1cbb6a593d0a02bd20129"
        ],
        [
            "elim (Trivial15 H4 (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)) (lema_Inv5 rs_s1 H5 H7) H9).",
            "VernacExtend",
            "3e88675da408ee21b271ced946f43e9090c8a961"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition safeTCG (s : StGlobal) := match s with | ((st, _), (_, (sg, _))) => st = Inside -> sg = Closed end.",
            "VernacDefinition",
            "1df2c5e22c183a779269db14dca98cc5f1d09e84"
        ],
        [
            "Lemma lema_safeTCG : ForAll TrGlobal SiniTCG safeTCG.",
            "VernacStartTheoremProof",
            "3759592e225ae51a50584fb146e7e35ad505a94e"
        ],
        [
            "apply Mon_I with (Pg := Inv8) (Pp := safeTCG); [ exact lema_Inv8 | unfold Inv8, safeTCG in |- *; simpl in |- * ].",
            "VernacExtend",
            "e289f35a75a9b9c830375f56652c533e8d269aba"
        ],
        [
            "unfold Inv8, safeTCG in |- *; simpl in |- *; intro s; elim s.",
            "VernacExtend",
            "e84081596316868da40dfdfba668a5c1f0e31406"
        ],
        [
            "intros y y0; elim y; elim y0.",
            "VernacExtend",
            "8982aaf83e6ead984272890fc587d0e8951adb04"
        ],
        [
            "intros y1 y2 y3 y4; elim y1; elim y2; auto with *.",
            "VernacExtend",
            "fb6082478c2e8b1254afc643c3d5e1b18d604c8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv9 (s : StGlobal) := match s with | ((st, x), ((_, y), (_, z))) => st = Near /\\ gt_Ck x kc1 \\/ st = Inside -> eq_Ck y (plus_Ck z kc1) end.",
            "VernacDefinition",
            "06145df70a61c207eb19283570a1a72f86f69aba"
        ],
        [
            "Lemma lema_Inv9 : ForAll TrGlobal SiniTCG Inv9.",
            "VernacStartTheoremProof",
            "f3ac530c8dc67c6bee296bcd015df6db6409f06e"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "decompose [and or] H0; discriminate.",
            "VernacExtend",
            "3cdb2df70f70c74dd48938872b403f8a0560dad0"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply p_s1; left; split; [ auto with * | apply (Trivial10 gt_x_kt1) ].",
            "VernacExtend",
            "0698c8ba07b29b77cc584fe3986d6485a08e630e"
        ],
        [
            "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
            "VernacExtend",
            "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
        ],
        [
            "decompose [and or] H0; discriminate.",
            "VernacExtend",
            "3cdb2df70f70c74dd48938872b403f8a0560dad0"
        ],
        [
            "elim (Trivial16 lt_y_kc2 (p_s1 H0)).",
            "VernacExtend",
            "0a034649d7909b87b3c03eb6938d79297247c69c"
        ],
        [
            "decompose [and or] H3.",
            "VernacExtend",
            "ca7d79fc296b29ec5842ca986b6187cd556713f0"
        ],
        [
            "elim (Trivial12 H6); intro.",
            "VernacExtend",
            "116be523d18d0e7985d43f55236276eaf234959b"
        ],
        [
            "elim (lema_Inv4 rs_s1 H5); intro.",
            "VernacExtend",
            "cd06b6075fe7564ce77ba23f906a04155c802ed3"
        ],
        [
            "rewrite H7 in H1; inversion H1 using cl_Isc2; intro.",
            "VernacExtend",
            "305d21d7c200cfff3a434244c762a6487911bd1a"
        ],
        [
            "generalize (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)); intro.",
            "VernacExtend",
            "465a2e9a3d9f5085bed3d4cc00cbe4724019dd69"
        ],
        [
            "elim (Trivial17 H4 H9 H8).",
            "VernacExtend",
            "edf1dd9ae7352ca4a5577970ac871b152fa9d59e"
        ],
        [
            "apply (Trivial4 (lema_Inv5 rs_s1 H5 H7)).",
            "VernacExtend",
            "a041ae5efec027ae9cbed857c79db866f96319fd"
        ],
        [
            "apply Trivial4; apply p_s1; left; split; assumption.",
            "VernacExtend",
            "e3bca28fcc9fbfe22040b1250c90110fb0956d44"
        ],
        [
            "apply (Trivial4 (p_s1 (or_intror (s4 = Near /\\ gt_Ck x kc1) H4))).",
            "VernacExtend",
            "f81cf20d77b296cc83d17978d26b6e526074fa33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv10 (s : StGlobal) := match s with | (_, ((sc, _), (sg, _))) => sc = Sc1 \\/ sc = Sc2 -> sg = Open \\/ sg = Raising end.",
            "VernacDefinition",
            "005140d6a098839c5d82af3f277467d120dc78df"
        ],
        [
            "Lemma lema_Inv10 : ForAll TrGlobal SiniTCG Inv10.",
            "VernacStartTheoremProof",
            "0a8b0c3f41573e87b9d07aba57d9542599d26cdd"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_or (p_s1 H0).",
            "VernacExtend",
            "ec7f28765957ecf40ac7dc6d18546ea44b6d32fa"
        ],
        [
            "Simpl_or H0.",
            "VernacExtend",
            "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
        ],
        [
            "Simpl_or H0.",
            "VernacExtend",
            "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv11 (s : StGlobal) := match s with | (_, ((sc, _), (sg, _))) => sg = Lowering \\/ sg = Closed -> sc = Sc3 \\/ sc = Sc4 end.",
            "VernacDefinition",
            "687e046b52ad6215e87488ae69412270b50703b6"
        ],
        [
            "Lemma lema_Inv11 : ForAll TrGlobal SiniTCG Inv11.",
            "VernacStartTheoremProof",
            "fc5cf4e43befb250af09d593c232a8626958d639"
        ],
        [
            "generalize (Mon_I (tr:=TrGlobal) (Sini:=SiniTCG) (Pg:=Inv10) (Pp:=Inv11)); unfold ForAll in |- *; intros.",
            "VernacExtend",
            "a873f97b57f700431d3ccb0f4153a36fb4bf6051"
        ],
        [
            "apply H; [ exact lema_Inv10 | idtac | assumption ].",
            "VernacExtend",
            "a0ef6d5d1fd41ebaf2d2e754a93b6c25a3ff86c6"
        ],
        [
            "unfold Inv10, Inv11 in |- *; simpl in |- *; intro.",
            "VernacExtend",
            "80dd2435d34dfeff056a01c3fa06c7e95bdf1de3"
        ],
        [
            "elim s0; intros y y0; elim y; elim y0; intros y1 y2 y3 y4; elim y1; elim y2.",
            "VernacExtend",
            "63f486e614fc584fe8854c2b564b8bbf91ba00d6"
        ],
        [
            "intros sg ck sc; elim sg.",
            "VernacExtend",
            "ed6a52b3297a7220b6dc50b363a23b0f7317665d"
        ],
        [
            "intros ck1 H1 H2; Simpl_or H2.",
            "VernacExtend",
            "d7fe252de24912614bb7d6290f97a1b4aa9d4972"
        ],
        [
            "elim sc; intros ck1 H1; [ elim H1; Easy2 | elim H1; Easy2 | left; auto with * | right; auto with * ].",
            "VernacExtend",
            "6e2400546eeccd037b54b975d3788cc54c80f513"
        ],
        [
            "elim sc; intros ck1 H1; [ elim H1; Easy2 | elim H1; Easy2 | left; auto with * | right; auto with * ].",
            "VernacExtend",
            "6e2400546eeccd037b54b975d3788cc54c80f513"
        ],
        [
            "intros ck1 H1 H2; Simpl_or H2.",
            "VernacExtend",
            "d7fe252de24912614bb7d6290f97a1b4aa9d4972"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv12 (s : StGlobal) := match s with | (_, ((sc, y), (_, z))) => sc = Sc2 -> ge_Ck z y end.",
            "VernacDefinition",
            "c240bee46c28b6cd1b90ff81340d0ae05225f6d4"
        ],
        [
            "Lemma lema_Inv12 : ForAll TrGlobal SiniTCG Inv12.",
            "VernacStartTheoremProof",
            "d90fa8613f4d97b9c76e0a7b0cf7223a51f52369"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply Trivial5.",
            "VernacExtend",
            "746f8cf004307fc415b2d1b71f6b787e9af52ee1"
        ],
        [
            "apply (Trivial6 (p_s1 H3)).",
            "VernacExtend",
            "66afea129050bb9e29124186708f083ae9252b50"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv13 (s : StGlobal) := match s with | ((st, _), ((sc, _), _)) => sc = Sc2 -> st = Near end.",
            "VernacDefinition",
            "9425b90fe5ac713b621d84cd78706a221aee1db6"
        ],
        [
            "Lemma lema_Inv13 : ForAll TrGlobal SiniTCG Inv13.",
            "VernacStartTheoremProof",
            "77146215832174a9bfd400f6be2d699a099a8ff9"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "generalize (lema_Inv6 rs_s1); simpl in |- *.",
            "VernacExtend",
            "d2dc2ec4f2b3c7810ef82313f129c01b786bfee7"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "intro H1; Generalize_Easy (H1 (or_introl (Near = Inside) (conj (refl_equal Near) (Trivial10 gt_x_kt1)))).",
            "VernacExtend",
            "8dc2151db2491e2e914579e71cc070e8d66a9b1a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Inv14 (s : StGlobal) := match s with | ((st, _), ((sc, _), (sg, _))) => sc = Sc4 -> st = Far /\\ sg = Closed end.",
            "VernacDefinition",
            "895733c34fd33a7a7cc22921d08862c9b5fc936a"
        ],
        [
            "Lemma lema_Inv14 : ForAll TrGlobal SiniTCG Inv14.",
            "VernacStartTheoremProof",
            "50ccc7664b67e6aa9d07ec5c7259fa320fb96fdd"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "Simpl_and (p_s1 H0).",
            "VernacExtend",
            "123cb3adcf891451e7de22de46eedd048b4f9e87"
        ],
        [
            "Simpl_and (p_s1 H0).",
            "VernacExtend",
            "123cb3adcf891451e7de22de46eedd048b4f9e87"
        ],
        [
            "Simpl_and (p_s1 H0).",
            "VernacExtend",
            "123cb3adcf891451e7de22de46eedd048b4f9e87"
        ],
        [
            "split; [ auto with * | apply (lema_safeTCG rs_s1 (refl_equal Inside)) ].",
            "VernacExtend",
            "3397b020a640eef1af5c66423a649285c1e0ea05"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition InvSc3 (s : StGlobal) := match s with | (_, ((sc, y), _)) => sc = Sc3 -> ge_Ck y kc1 end.",
            "VernacDefinition",
            "ffc06ca93a970617f7c0f0f66ffc214a1adf132a"
        ],
        [
            "Lemma lema_InvSc3 : ForAll TrGlobal SiniTCG InvSc3.",
            "VernacStartTheoremProof",
            "f80c6d9811dbde43b00e4b7c33c4ddfd32a5d315"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply (Trivial7 eq_y_kc1).",
            "VernacExtend",
            "e51a14616c690ec283b7fd40a9eeb8dbd18a96cb"
        ],
        [
            "apply (Trivial8 (p_s1 H3)).",
            "VernacExtend",
            "78fdedad916f84c1bddf9ae712cba118b5578aeb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition InvInside (s : StGlobal) := match s with | ((st, x), _) => st = Inside -> gt_Ck x kt1 end.",
            "VernacDefinition",
            "572fca12cb76d4e1d1a7ade7ac31c88461646645"
        ],
        [
            "Lemma lema_InvInside : ForAll TrGlobal SiniTCG InvInside.",
            "VernacStartTheoremProof",
            "133f717b65d89f7574ff648d8cb6a919cf6df62f"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl.",
            "VernacExtend",
            "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
        ],
        [
            "apply (Trivial9 (p_s1 H3)).",
            "VernacExtend",
            "94619b8192d410ab6d091489db4909e38ffb143f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InvT' : forall s : S_Ck ST, match s with | (st, x) => st = Far \\/ st = Near /\\ lt_Ck x kt2 \\/ st = Inside /\\ lt_Ck x kt2 -> InvT s end.",
            "VernacStartTheoremProof",
            "69e98b9d11c34cbf0f921f952ca6bb0a72ed8452"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H; [ intro st; rewrite st; auto with * | intro n_i; elim n_i; intro H1; elim H1; intros st cond; rewrite st; [ apply Inear | apply Iinside ]; auto with * ].",
            "VernacExtend",
            "b399d1f179fbef4b5874f4731dbea1981b01742f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InvC' : forall s : S_Ck SC, match s with | (sc, y) => sc = Sc1 \\/ sc = Sc2 /\\ le_Ck y kc1 \\/ sc = Sc3 \\/ sc = Sc4 /\\ lt_Ck y kc2 -> InvC s end.",
            "VernacStartTheoremProof",
            "62ae62aa358ab1d3e93f1438a8f298f7cfb338bd"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H; [ intro sc; rewrite sc; auto with * | intro sc2_4; elim sc2_4; [ intro H1; elim H1; intros sc cond; rewrite sc; apply Isc2; auto with * | intro sc3_4; elim sc3_4; [ intro sc; rewrite sc; auto with * | intro H1; elim H1; intros sc cond; rewrite sc; apply Isc4; auto with * ] ] ].",
            "VernacExtend",
            "df5c01aa78aa805bbe8c83126530c4a9a12258f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma InvG' : forall s : S_Ck SG, match s with | (sg, z) => sg = Open \\/ sg = Lowering /\\ lt_Ck z kg1 \\/ sg = Closed \\/ sg = Raising /\\ lt_Ck z kg3 -> InvG s end.",
            "VernacStartTheoremProof",
            "68313a3faf14e20e8bbc94bbb99d66fa5af2cf96"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H; [ intro sg; rewrite sg; auto with * | intro sg2_4; elim sg2_4; [ intro H1; elim H1; intros sg cond; rewrite sg; apply Ilowering; auto with * | intro sg3_4; elim sg3_4; [ intro sg; rewrite sg; auto with * | intro H1; elim H1; intros sg cond; rewrite sg; apply Iraising; auto with * ] ] ].",
            "VernacExtend",
            "8cf737e6f8e0156fcc6bb1cdebc556e8420b1904"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NoImpl : forall A B : Prop, (A -> B) -> ~ B -> ~ A.",
            "VernacStartTheoremProof",
            "9530e9cacd678e84b40c6fda00dd5f45be8625d8"
        ],
        [
            "unfold not in |- *; auto with *.",
            "VernacExtend",
            "0d804c7176ccff0ead4d61643922e7f19f86e6d1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_3_and : forall A B C : Prop, ~ (A /\\ B /\\ C) -> ~ A \\/ A /\\ ~ B \\/ A /\\ B /\\ ~ C.",
            "VernacStartTheoremProof",
            "e66a7d73c6ad429eeac0d4570afc4277ca0b7621"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (not_and_or _ _ H); intro H2; [ idtac | elim (not_and_or _ _ H2); intro ].",
            "VernacExtend",
            "937864e6515830f40c32253af17fe3f87038be98"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "elim (classic A); auto with *.",
            "VernacExtend",
            "81e4c9fb6c4796f88b7d62905d4458bddd989c58"
        ],
        [
            "elim (classic A); elim (classic B); auto with *.",
            "VernacExtend",
            "cc837df2a150b4b934a7eaeb86d10648542b7a2c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation no_invT := (fun s : S_Ck ST => match s with | (st, x) => st = Near /\\ ~ lt_Ck x kt2 \\/ st = Inside /\\ ~ lt_Ck x kt2 end) (only parsing).",
            "VernacSyntacticDefinition",
            "535f090ac23a25adf34bf017ab82b819bdf3961f"
        ],
        [
            "Lemma No_invT : forall s : S_Ck ST, ~ InvT s -> (fun s : S_Ck ST => match s with | (st, x) => st = Near /\\ ~ lt_Ck x kt2 \\/ st = Inside /\\ ~ lt_Ck x kt2 end) s.",
            "VernacStartTheoremProof",
            "028631e7ef3b0dca0791ecfea5f3c0757a2898ad"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros st x inv.",
            "VernacExtend",
            "d59bbbc79c7b8b8dd090c7fea03e74affb21d6db"
        ],
        [
            "generalize (not_or_and _ _ (NoImpl (InvT' (st, x)) inv)); elim st; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
            "VernacExtend",
            "46c91d3cf90c00666a4eb995e3dc7a9745c26ead"
        ],
        [
            "absurd (Far = Far); auto with *.",
            "VernacExtend",
            "0b9bf4bdd563b941c8f9c159b8b82969a256784c"
        ],
        [
            "elim (not_and_or _ _ H); intros; [ absurd (Near = Near); auto with * | auto with * ].",
            "VernacExtend",
            "4e44088aa2014714f2c8d0030eb45bb1f2fd3054"
        ],
        [
            "elim (not_and_or _ _ H3); intros; [ absurd (Inside = Inside); auto with * | auto with * ].",
            "VernacExtend",
            "dbf3301a4b5c90ec84329dcc254e5d08bbd12567"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation no_invC := (fun s : S_Ck SC => match s with | (sc, y) => sc = Sc2 /\\ ~ le_Ck y kc1 \\/ sc = Sc4 /\\ ~ lt_Ck y kc2 end) (only parsing).",
            "VernacSyntacticDefinition",
            "b87cd1a3b75cc83996f76b1d06f0eeff7ea65b47"
        ],
        [
            "Lemma No_invC : forall s : S_Ck SC, ~ InvC s -> (fun s : S_Ck SC => match s with | (sc, y) => sc = Sc2 /\\ ~ le_Ck y kc1 \\/ sc = Sc4 /\\ ~ lt_Ck y kc2 end) s.",
            "VernacStartTheoremProof",
            "f3df23cd47276fbb2879df3dcc5e7bce8dd9b517"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros sc y inv.",
            "VernacExtend",
            "4e2223ab54602ee08e5e58b7854614f205ad756d"
        ],
        [
            "generalize (not_or_and _ _ (NoImpl (InvC' (sc, y)) inv)); elim sc; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
            "VernacExtend",
            "6bc29996b4bb5e478afa3d057dda584e606d9549"
        ],
        [
            "absurd (Sc1 = Sc1); auto with *.",
            "VernacExtend",
            "14213d67e5a864000bd8c6b92e63108520b8b1d5"
        ],
        [
            "elim (not_and_or _ _ H); intros; [ absurd (Sc2 = Sc2); auto with * | auto with * ].",
            "VernacExtend",
            "2ac1e598e4f0461d9aa8e34298c100db025dcafe"
        ],
        [
            "elim (not_or_and _ _ H3); intros; absurd (Sc3 = Sc3); auto with *.",
            "VernacExtend",
            "a9f0600243027dcdaa92fcfdf278369ebbfbc1b2"
        ],
        [
            "elim (not_or_and _ _ H3); intros H4 H5; elim (not_and_or _ _ H5); intros; [ absurd (Sc4 = Sc4); auto with * | auto with * ].",
            "VernacExtend",
            "b5abb539d1e8d321c31a8873ee06a46a33086a2c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation no_invG := (fun s : S_Ck SG => match s with | (sg, z) => sg = Lowering /\\ ~ lt_Ck z kg1 \\/ sg = Raising /\\ ~ lt_Ck z kg3 end) (only parsing).",
            "VernacSyntacticDefinition",
            "4d74f0c2f1f6f139836ceaa7e6011cf94f1e7d46"
        ],
        [
            "Lemma No_invG : forall s : S_Ck SG, ~ InvG s -> (fun s : S_Ck SG => match s with | (sg, z) => sg = Lowering /\\ ~ lt_Ck z kg1 \\/ sg = Raising /\\ ~ lt_Ck z kg3 end) s.",
            "VernacStartTheoremProof",
            "b022e767048e13678ebad8fbf9f21e1b58eb31ae"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros sc y inv.",
            "VernacExtend",
            "4e2223ab54602ee08e5e58b7854614f205ad756d"
        ],
        [
            "generalize (not_or_and _ _ (NoImpl (InvG' (sc, y)) inv)); elim sc; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
            "VernacExtend",
            "02ec8dcde4ad7df01c09ca0c99c5a8889bff83f5"
        ],
        [
            "absurd (Open = Open); auto with *.",
            "VernacExtend",
            "047abc2c6b3a1de119d4b99baeab536ff8d85475"
        ],
        [
            "elim (not_and_or _ _ H); intros; [ absurd (Lowering = Lowering); auto with * | auto with * ].",
            "VernacExtend",
            "a9da61f7bc6c73be0d52c7c34c125624c8471928"
        ],
        [
            "elim (not_or_and _ _ H3); intros; absurd (Closed = Closed); auto with *.",
            "VernacExtend",
            "65bfbf29272dd5d9791889f47f90d514bd5c8b20"
        ],
        [
            "elim (not_or_and _ _ H3); intros H4 H5; elim (not_and_or _ _ H5); intros; [ absurd (Raising = Raising); auto with * | auto with * ].",
            "VernacExtend",
            "76668f57b662279d2c90af3c9d6c0d54020b31d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma INV_TCG_general : forall s : StGlobal, (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) s -> ForAll TrGlobal s (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end).",
            "VernacStartTheoremProof",
            "fcc0b7b75a42bf37d5996fdb78b16d7590edae4e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "SplitTrans_Simpl; elim p_s1; intros H1 H2; elim H2; intros; auto with *; (split; [ auto with * | split; auto with * ]).",
            "VernacExtend",
            "6663ead11408e1b622e2df3d395478299d789c77"
        ],
        [
            "apply Inear; apply trivial_inv_1.",
            "VernacExtend",
            "321e8446a4dd132e56978af10ecc34f26a88bead"
        ],
        [
            "apply Isc2; apply trivial_inv_2.",
            "VernacExtend",
            "4eb99983e0fe9e1def8878afa7e2c79757726b54"
        ],
        [
            "apply Isc4; apply trivial_inv_3.",
            "VernacExtend",
            "12f9d2af8c043b55ad8163329d8058d5809954fa"
        ],
        [
            "apply Ilowering; apply trivial_inv_4.",
            "VernacExtend",
            "0a12229ec398328579257c306278bb9f0e574787"
        ],
        [
            "apply Iraising; apply trivial_inv_5.",
            "VernacExtend",
            "af5a7b60fc4148b5d35f1eaa38b73b91300920d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma INV_T_general : forall s1 s2 : StGlobal, (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) s1 -> RState TrGlobal s1 s2 -> InvT (fst s2).",
            "VernacStartTheoremProof",
            "9588fb0f256b8daa6790d466705b989a364ea51b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (INV_TCG_general H H0).",
            "VernacExtend",
            "443d9e77cc386147054295280e6adceccf135590"
        ],
        [
            "elim s2; simpl in |- *.",
            "VernacExtend",
            "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
        ],
        [
            "intros st sc_sg.",
            "VernacExtend",
            "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
        ],
        [
            "elim sc_sg; intros.",
            "VernacExtend",
            "aacd3d2d45e529beef556ec4a0cd826ff7f8cfe9"
        ],
        [
            "elim H1; auto with *.",
            "VernacExtend",
            "bb458f681684764a20362937a8ffe9dff3a5f557"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma INV_C_general : forall s1 s2 : StGlobal, (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) s1 -> RState TrGlobal s1 s2 -> InvC (fst (snd s2)).",
            "VernacStartTheoremProof",
            "659763bb97e2eefbd1039753590811c248d62848"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (INV_TCG_general H H0).",
            "VernacExtend",
            "443d9e77cc386147054295280e6adceccf135590"
        ],
        [
            "elim s2; simpl in |- *.",
            "VernacExtend",
            "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
        ],
        [
            "intros st sc_sg.",
            "VernacExtend",
            "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
        ],
        [
            "elim sc_sg; simpl in |- *; intros.",
            "VernacExtend",
            "87ba9c119113e1bbeef9b06ccac961d2c1b27b7d"
        ],
        [
            "elim H1; intros inv_T inv_C_G; elim inv_C_G; auto with *.",
            "VernacExtend",
            "2373d7e28d82d8cf5cdd1664fa2016294711ced1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma INV_G_general : forall s1 s2 : StGlobal, (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) s1 -> RState TrGlobal s1 s2 -> InvG (snd (snd s2)).",
            "VernacStartTheoremProof",
            "5935d832bba23f7366f975668f499d85e2f030aa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (INV_TCG_general H H0).",
            "VernacExtend",
            "443d9e77cc386147054295280e6adceccf135590"
        ],
        [
            "elim s2; simpl in |- *.",
            "VernacExtend",
            "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
        ],
        [
            "intros st sc_sg.",
            "VernacExtend",
            "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
        ],
        [
            "elim sc_sg; simpl in |- *; intros.",
            "VernacExtend",
            "87ba9c119113e1bbeef9b06ccac961d2c1b27b7d"
        ],
        [
            "elim H1; intros inv_T inv_C_G; elim inv_C_G; auto with *.",
            "VernacExtend",
            "2373d7e28d82d8cf5cdd1664fa2016294711ced1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition InvTick (s : StGlobal) := match s with | ((st, x), ((sc, y), (sg, z))) => (fun s : StGlobal => match s with | (st_x, (sc_y, sg_z)) => InvT st_x /\\ InvC sc_y /\\ InvG sg_z end) (st, Inc x, (sc, Inc y, (sg, Inc z))) end.",
            "VernacDefinition",
            "3ae0f39774de60c7a7b45f83854f043f066d5d67"
        ],
        [
            "Definition noInvTick (s : StGlobal) := match s with | ((st, x), ((sc, y), (sg, z))) => ~ InvTick (st, x, (sc, y, (sg, z))) -> RState TrGlobal SiniTCG (st, x, (sc, y, (sg, z))) -> (st = Near /\\ gt_Ck x kt1 \\/ st = Inside) \\/ InvT (st, Inc x) /\\ (sc = Sc2 /\\ eq_Ck y kc1 \\/ sc = Sc4) \\/ InvT (st, Inc x) /\\ InvC (sc, Inc y) /\\ (sg = Lowering \\/ sg = Raising /\\ ge_Ck z kg2) end.",
            "VernacDefinition",
            "069771c078fa75594daecb72712abb86476447f7"
        ],
        [
            "Lemma NoInvTick : forall s : StGlobal, noInvTick s.",
            "VernacStartTheoremProof",
            "abccb047b04c0d60696c756c7ee0b3a29825d2f5"
        ],
        [
            "intro s; elim s.",
            "VernacExtend",
            "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
        ],
        [
            "intros st sc_sg; elim sc_sg; intros sc sg; elim st; elim sc; elim sg; intros.",
            "VernacExtend",
            "c2cfd36991862afdd2a7254f34de5963cfea2219"
        ],
        [
            "simpl in |- *; intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "elim (not_3_and H); [ intro no_invt | intro H1; decompose [and or] H1 ].",
            "VernacExtend",
            "dd05babd50491010f0af26f10f03cf03dc6609d2"
        ],
        [
            "elim (No_invT no_invt); intro H1; elim H1; intros st' x; rewrite st'; rewrite st' in H0.",
            "VernacExtend",
            "013b85cea2bb64dd56a8610a86fa2099d2275891"
        ],
        [
            "generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_near; inversion inv_near using cl_Inear; intro lt_x_kt2.",
            "VernacExtend",
            "5ea00e3d25cf56203f3a999436f2b26efb7ca55c"
        ],
        [
            "left; left; split; [ auto with * | apply (Trivial32 lt_x_kt2 x) ].",
            "VernacExtend",
            "405d159b78a64b754cea1fc4404816d47f0baa89"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "elim (No_invC H4); intro H5; elim H5; intros sc' y'; rewrite sc'; rewrite sc' in H0.",
            "VernacExtend",
            "da571e5ed4e8a7701f8ee77b6dc856bd84d5e53a"
        ],
        [
            "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_sc2; inversion inv_sc2 using cl_Isc2; intro le_y_kc1.",
            "VernacExtend",
            "35628b86f94205762d695e0b837828e5e333e991"
        ],
        [
            "generalize (Trivial33 le_y_kc1 y'); intro.",
            "VernacExtend",
            "150eeaa2121c8940365c12e7c8f3a31099ee5d48"
        ],
        [
            "right; left; auto with *.",
            "VernacExtend",
            "86e05dd417161bc915c7846787adb73a89d60a33"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "elim (No_invG H5); intro H6; elim H6; intros sg' z; rewrite sg'; rewrite sg' in H0.",
            "VernacExtend",
            "7c2b0cfc8b954c7ef07b3a2124016fcc1564917e"
        ],
        [
            "right; right; auto with *.",
            "VernacExtend",
            "a84de87e49df032eda98ac1975454ffd6845eb23"
        ],
        [
            "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_z_kg3.",
            "VernacExtend",
            "75391c5c97b2d421175a92c42484c3834b022ee7"
        ],
        [
            "generalize (Trivial34 lt_z_kg3 z); intro.",
            "VernacExtend",
            "d7a0254ad1fafce51a7dd1b93599c7c78a815e32"
        ],
        [
            "right; right; auto with *.",
            "VernacExtend",
            "a84de87e49df032eda98ac1975454ffd6845eb23"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation rsNext_In := (fun (x : Clock) (gt_x_kt1 : gt_Ck x kt1) (lt_x_kt2 : lt_Ck x kt2) (sc_y : S_Ck SC) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Near, x, (sc_y, sg_z))) (tGl_In (ttIn (x:=x) gt_x_kt1 lt_x_kt2) sc_y sg_z)) (only parsing).",
            "VernacSyntacticDefinition",
            "883a7c559f7ba4594f5433b850b403facbc1afcc"
        ],
        [
            "Notation rsNext_Down := (fun (z : Clock) (lt_z_kg1 : lt_Ck z kg1) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Lowering, z)))) (tGl_Down (tgDown lt_z_kg1) st_x sc_y)) (only parsing).",
            "VernacSyntacticDefinition",
            "477deafbffc1106649fd25ba67bd108b4c5f6f29"
        ],
        [
            "Notation rsNext_Up := (fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) (only parsing).",
            "VernacSyntacticDefinition",
            "76aa4dd1f8ee8010eb0be2e4d78d255c45247bec"
        ],
        [
            "Notation rs_Next_Approach := (fun (x y : Clock) (sg_z : S_Ck SG) => rsNext StGlobal (rsIni StGlobal TrGlobal (Far, x, (Sc1, y, sg_z))) (tGl_Approach (ttApproach x) (tcApproach y) sg_z)) (only parsing).",
            "VernacSyntacticDefinition",
            "f084635bd6d2af9c3138f71ad2a2ad150d60564b"
        ],
        [
            "Notation rsNext_Exit := (fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) (only parsing).",
            "VernacSyntacticDefinition",
            "b97d3e2c22a2afc63ececb819413568bfc4ebf7c"
        ],
        [
            "Notation rsNext_Lower := (fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) (only parsing).",
            "VernacSyntacticDefinition",
            "1f197e1cee95b979f2b74be7bb7c8b3a29e0f499"
        ],
        [
            "Notation rsNext_Raise := (fun (y z : Clock) (lt_y_kc2 : lt_Ck y kc2) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc4, y, (Closed, z)))) (tGl_Raise (tcRaise lt_y_kc2) (tgRaise z) st_x)) (only parsing).",
            "VernacSyntacticDefinition",
            "57db40b614ffdc5e972863fd48d3158f63e0fde2"
        ],
        [
            "Ltac SplitTrans' := intros s1 s2 l rs_s1 p_s1 tr_gl; generalize (rsNext rs_s1 tr_gl); generalize rs_s1; clear rs_s1; generalize p_s1; clear p_s1; elim tr_gl.",
            "VernacExtend",
            "ce128bc9dd6466aa645405504f3ddccdeecef6ed"
        ],
        [
            "Ltac SplitTrans'_Simpl := SplitTrans'; [ Simpl_In | Simpl_Down | Simpl_Up | Simpl_Approach | Simpl_Exit | Simpl_Lower | Simpl_Raise | Simpl_Tick ].",
            "VernacExtend",
            "23be7507fa09189014992662fe091b09f6ddff5d"
        ],
        [
            "Ltac ExistsHere_ITick s := apply exists_ with (tr := TrGlobal) (P := InvTick) (1 := rsIni TrGlobal s).",
            "VernacExtend",
            "31daae1a248d898ab7072fc3a3d572a6275e1a21"
        ],
        [
            "Lemma NonZeno : ForAll TrGlobal SiniTCG (fun s : StGlobal => Exists TrGlobal s InvTick).",
            "VernacStartTheoremProof",
            "b9b7a2b5a64ba889fd4c2179de07ab0885607775"
        ],
        [
            "BeginForAll.",
            "VernacExtend",
            "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
        ],
        [
            "ExistsHere_ITick SiniTCG.",
            "VernacExtend",
            "3d7bd249ad68e9f69a77d9bb639e012e3091fd85"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "SplitTrans'_Simpl; generalize H0.",
            "VernacExtend",
            "f18cb0544a41c0a3ba724276e61b5efe846f5808"
        ],
        [
            "rewrite (lema_Inv6 H0 (or_intror (Inside = Near /\\ gt_Ck x kc1) (refl_equal Inside))) .",
            "VernacExtend",
            "5664dca15020573130f361919124379b97e2772c"
        ],
        [
            "rewrite (lema_safeTCG H0 (refl_equal Inside)); intro rs_s2.",
            "VernacExtend",
            "0addc14d01787c9308e3137e7c8c401116c38543"
        ],
        [
            "apply StepsEX with (s2 := (Far, x, (Sc4, Reset, (Closed, b)))).",
            "VernacExtend",
            "5974e6584c208224e5a7d55937748479d5d90ad8"
        ],
        [
            "apply ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) x b0 lt_x_kt2 (Closed, b)).",
            "VernacExtend",
            "47a0daefe8dd4dc95ee475ef25697d8b822321ee"
        ],
        [
            "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
            "VernacExtend",
            "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
        ],
        [
            "Split3_Trivial; (apply Isc4; apply Trivial18).",
            "VernacExtend",
            "80cbc730a825ad44a970c60067ca12dce1b6b7a0"
        ],
        [
            "elim (lema_Inv11 H0 (or_intror (Closed = Lowering) (refl_equal Closed))); intro sc_closed; rewrite sc_closed.",
            "VernacExtend",
            "ec847d191ac97821c98d54e5e76fadf10a34c841"
        ],
        [
            "elim a0; intro rs_s2.",
            "VernacExtend",
            "0c4b3cfe31a464a29c5f4364759e9bcac1be89ac"
        ],
        [
            "ExistsHere_ITick (Far, b0, (Sc3, b, (Closed, z))).",
            "VernacExtend",
            "c40c1af3fe5f6b7e6e9c37702bbff4ba7f850fa6"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "ExistsHere_ITick (Near, b0, (Sc3, b, (Closed, z))).",
            "VernacExtend",
            "ef6f1308364c0ed709e764c41298ce107d716163"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "apply Inear.",
            "VernacExtend",
            "9af50372e59da0b9afe3973b9b3258d70592d2be"
        ],
        [
            "apply (Trivial19 lt_z_kg1 (lema_Inv5 rs_s2 (refl_equal Near) (refl_equal Sc3)) (lema_Inv3 rs_s2 (or_introl (Near = Inside) (refl_equal Near)))).",
            "VernacExtend",
            "92983c44a7cfd3666ee63051b8c0ab42d4e46b75"
        ],
        [
            "elim (Trivial20 lt_z_kg1 (lema_Inv9 rs_s2 (or_intror (Inside = Near /\\ gt_Ck b0 kc1) (refl_equal Inside))) (lema_Inv3 rs_s2 (or_intror (Inside = Near) (refl_equal Inside))) (lema_InvInside rs_s2 (refl_equal Inside))).",
            "VernacExtend",
            "5947ad6523625d488d2af9e5d87d71612d2e531a"
        ],
        [
            "elim a0; intro rs_s2.",
            "VernacExtend",
            "0c4b3cfe31a464a29c5f4364759e9bcac1be89ac"
        ],
        [
            "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_sc4; inversion inv_sc4 using cl_Isc4; intro le_y0_kc2.",
            "VernacExtend",
            "59da38e18edaa99665ad579d6b3d08e0d6902fbb"
        ],
        [
            "apply StepsEX with (s2 := (Far, b0, (Sc1, b, (Raising, Reset)))).",
            "VernacExtend",
            "6ed44e0814242454fea37b097ccca2658e14ac59"
        ],
        [
            "apply ((fun (y z : Clock) (lt_y_kc2 : lt_Ck y kc2) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc4, y, (Closed, z)))) (tGl_Raise (tcRaise lt_y_kc2) (tgRaise z) st_x)) b z le_y0_kc2 (Far, b0)).",
            "VernacExtend",
            "25429cf062c5afdd73948ed104ce35d0e6e4719c"
        ],
        [
            "ExistsHere_ITick (Far, b0, (Sc1, b, (Raising, Reset))).",
            "VernacExtend",
            "d0ad5f0b9a7790c1030040d10d51860bdbfb419d"
        ],
        [
            "Split3_Trivial; (apply Iraising; apply Trivial21).",
            "VernacExtend",
            "fb1beedbfa1cbde7419d766d77b3a1d396ebbf29"
        ],
        [
            "elim (lema_Inv4 rs_s2 (refl_equal Near)); intro sc_near; rewrite sc_near in sc_closed; discriminate.",
            "VernacExtend",
            "df1f1affcd55464d9266f4b29bf26e2d72c1c23f"
        ],
        [
            "elim (Trivial20 lt_z_kg1 (lema_Inv9 rs_s2 (or_intror (Inside = Near /\\ gt_Ck b0 kc1) (refl_equal Inside))) (lema_Inv3 rs_s2 (or_intror (Inside = Near) (refl_equal Inside))) (lema_InvInside rs_s2 (refl_equal Inside))).",
            "VernacExtend",
            "5947ad6523625d488d2af9e5d87d71612d2e531a"
        ],
        [
            "elim a0.",
            "VernacExtend",
            "4208e42cde901082d0825926fe0d02bc298ac8b2"
        ],
        [
            "intro rs_s2; generalize rs_s2; rewrite (lema_Inv2 rs_s2 (refl_equal Far) (or_introl (Open = Raising) (refl_equal Open))) ; intro rs_s2fin.",
            "VernacExtend",
            "17607caa9f0a1a211dbcf9967258288125f4fb33"
        ],
        [
            "ExistsHere_ITick (Far, b0, (Sc1, b, (Open, z))).",
            "VernacExtend",
            "be16f74c5be52018c21ba91aecc0b87c7dc595fc"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "intro rs_s2; generalize rs_s2; elim (lema_Inv4 rs_s2 (refl_equal Near)); intro sc_near; rewrite sc_near.",
            "VernacExtend",
            "3e92bca020e7e260a4421b4a1b314c7cda2bb4f6"
        ],
        [
            "intro rs_s2'; generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2'); simpl in |- *; intro inv_sc2; inversion inv_sc2 using cl_Isc2; intro le_y0_kc1.",
            "VernacExtend",
            "46bb8dbae6cc3c51678c44882f5eaaff2c156162"
        ],
        [
            "elim (Trivial22 le_y0_kc1); intro.",
            "VernacExtend",
            "3b0642ff1e4519be6b7ab8bc846a5a59ad6ec7dc"
        ],
        [
            "ExistsHere_ITick (Near, b0, (Sc2, b, (Open, z))).",
            "VernacExtend",
            "33abe84580eba9e7e164b2c93c646ed92c3389ad"
        ],
        [
            "split; [ apply Inear | split; [ apply Isc2 | auto with * ] ].",
            "VernacExtend",
            "d794c16b371907985079da88125fb059d937c24a"
        ],
        [
            "apply (Trivial23 H1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
            "VernacExtend",
            "9f57bca608f370c832dacca4b8249525ab24a28a"
        ],
        [
            "apply (Trivial24 H1).",
            "VernacExtend",
            "13175314e36740017e7ba59c3eabf2e70bee887b"
        ],
        [
            "apply StepsEX with (s2 := (Near, b0, (Sc3, b, (Lowering, Reset)))).",
            "VernacExtend",
            "af29086ca14fb17eed3081c3b14be4ea6fad31c7"
        ],
        [
            "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) b z H1 (Near, b0)).",
            "VernacExtend",
            "858d8c38ded6f09ed1b9d8718fe458849e41fdab"
        ],
        [
            "ExistsHere_ITick (Near, b0, (Sc3, b, (Lowering, Reset))).",
            "VernacExtend",
            "805935bd3224a3d6c5c365ad4a6721aa2ed2052a"
        ],
        [
            "split; [ apply Inear | split; [ auto with * | apply Ilowering ] ].",
            "VernacExtend",
            "3b52cdb7ecec578c93743063988cbf85b776e211"
        ],
        [
            "apply (Trivial25 H1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
            "VernacExtend",
            "3f0d5fcd55ed4b71129d34d0db3f813917ba5b5a"
        ],
        [
            "apply Trivial26.",
            "VernacExtend",
            "ce21b82048371714ef5201d4dd2afbb86e54e2d7"
        ],
        [
            "intro rs_s2fin; elim (lema_Inv1 rs_s2fin (or_introl (Near = Inside) (refl_equal Near)) (refl_equal Sc3)); intro; discriminate.",
            "VernacExtend",
            "f434b103853b8c6553899447f0f44b6b5664ed5b"
        ],
        [
            "intro rs_s2; Generalize_Easy (lema_safeTCG rs_s2 (refl_equal Inside)).",
            "VernacExtend",
            "59d0ee88623de9b5d2fc09db38cdebd18558f530"
        ],
        [
            "elim (lema_Inv10 H0 (or_intror (Sc2 = Sc1) (refl_equal Sc2))); intros H1; rewrite H1; intro rs_s2.",
            "VernacExtend",
            "9fffce66b571ea5885b1859af3e7054674788b03"
        ],
        [
            "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Open, b))).",
            "VernacExtend",
            "00a44f01251f194431f0ad1d26bd5f43f975ae7f"
        ],
        [
            "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | auto with * ] ].",
            "VernacExtend",
            "93af07c692dc3af04c369d0f46e7eef680c33584"
        ],
        [
            "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_y1_kg3.",
            "VernacExtend",
            "3d6dce6f7f8198cfcbef9ff25d4df6393f89313c"
        ],
        [
            "elim (Trivial29 lt_y1_kg3); intro.",
            "VernacExtend",
            "b26b319202813a0418246d49076d91bb14e011c8"
        ],
        [
            "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Raising, b))).",
            "VernacExtend",
            "877ed4c44f099b56bb339667f85aba580027b6fb"
        ],
        [
            "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | apply Iraising; apply (Trivial30 H2) ] ].",
            "VernacExtend",
            "575b0537155132d6216a5f98721acc38c9ae6d94"
        ],
        [
            "apply StepsEX with (s2 := (Near, Reset, (Sc2, Reset, (Open, b)))).",
            "VernacExtend",
            "fec015a9e0e23b6099611cb7ac845f5414fa62a5"
        ],
        [
            "elim H2; intros H3 H4.",
            "VernacExtend",
            "f455df15d0158e37f7e401fe8612a4a04746f291"
        ],
        [
            "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) b H3 H4 (Near, Reset) (Sc2, Reset)).",
            "VernacExtend",
            "aabeb1df07a76f655e85e85be3c661beb0ce423a"
        ],
        [
            "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Open, b))).",
            "VernacExtend",
            "00a44f01251f194431f0ad1d26bd5f43f975ae7f"
        ],
        [
            "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | auto with * ] ].",
            "VernacExtend",
            "93af07c692dc3af04c369d0f46e7eef680c33584"
        ],
        [
            "elim a; intro rs_s2.",
            "VernacExtend",
            "ae6bdfa8d1e27d354b270c22d6449b5694e21c78"
        ],
        [
            "ExistsHere_ITick (Far, x, (Sc4, Reset, (Open, b))).",
            "VernacExtend",
            "d10a68c6ff5c1799af6053a39d6f0cf8d36129e9"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "apply Isc4; apply Trivial18.",
            "VernacExtend",
            "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
        ],
        [
            "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_lowering; inversion inv_lowering using cl_Ilowering; intro lt_y1_kg1.",
            "VernacExtend",
            "7613b19968af9863c6f32c34d968df1287a185ec"
        ],
        [
            "apply StepsEX with (s2 := (Far, x, (Sc4, Reset, (Closed, b)))).",
            "VernacExtend",
            "5974e6584c208224e5a7d55937748479d5d90ad8"
        ],
        [
            "apply ((fun (z : Clock) (lt_z_kg1 : lt_Ck z kg1) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Lowering, z)))) (tGl_Down (tgDown lt_z_kg1) st_x sc_y)) b lt_y1_kg1 (Far, x) (Sc4, Reset)).",
            "VernacExtend",
            "7204c3aeb0f87bd6469962911e5b55d0b106b3fb"
        ],
        [
            "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
            "VernacExtend",
            "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "apply Isc4; apply Trivial18.",
            "VernacExtend",
            "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
        ],
        [
            "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
            "VernacExtend",
            "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "apply Isc4; apply Trivial18.",
            "VernacExtend",
            "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
        ],
        [
            "Generalize_Easy (lema_Inv2 rs_s2 (refl_equal Far) (or_intror (Raising = Open) (refl_equal Raising))).",
            "VernacExtend",
            "4b2bf5a1f0d85788afa5660e96b82f501b6fa81c"
        ],
        [
            "intro rs_s2; ExistsHere_ITick (a, b, (Sc3, y, (Lowering, Reset))).",
            "VernacExtend",
            "e558ce60956cfec19d65bf72766e49b45b0d319f"
        ],
        [
            "split; [ generalize rs_s2; elim a; intro rs_s2' | split; [ auto with * | apply Ilowering; apply Trivial26 ] ].",
            "VernacExtend",
            "778e2b2aeccd153a8bd38b9e4843628a2e25bc66"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "apply Inear; apply (Trivial25 eq_y_kc1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
            "VernacExtend",
            "617f329c2165e30faa4d0c4374314ccbb178bcaf"
        ],
        [
            "Generalize_Easy (lema_safeTCG rs_s2' (refl_equal Inside)).",
            "VernacExtend",
            "e321fffa655d2fc80104139bff7be4f6f0a85b55"
        ],
        [
            "intro rs_s2; ExistsHere_ITick (a, b, (Sc1, y, (Raising, Reset))).",
            "VernacExtend",
            "0ffacb4516454c36845fa4706d0cb7f6cd06a126"
        ],
        [
            "split; [ generalize rs_s2; elim a; intro rs_s2' | split; [ auto with * | apply Iraising; apply Trivial21 ] ].",
            "VernacExtend",
            "74667d2c2b91cb53bfb27e0b9f6e66baebfdffc2"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "Simpl_or (lema_Inv4 rs_s2' (refl_equal Near)).",
            "VernacExtend",
            "1200f30aa9ae3ee2527c638e980f1c5ca043fdd7"
        ],
        [
            "Generalize_Easy (lema_safeTCG rs_s2' (refl_equal Inside)).",
            "VernacExtend",
            "e321fffa655d2fc80104139bff7be4f6f0a85b55"
        ],
        [
            "intro; elim (classic (InvTick (s4, Inc x, (s3, Inc y, (s0, Inc z))))); intro inv_tick.",
            "VernacExtend",
            "3343a79d046232f88eb20165bc956e864e754bb2"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (s0, Inc z))); auto with *.",
            "VernacExtend",
            "1528a198a89016b855020b1b8737fb121cc243cf"
        ],
        [
            "generalize H3; elim (NoInvTick (s4, Inc x, (s3, Inc y, (s0, Inc z))) inv_tick H3).",
            "VernacExtend",
            "cbcd35ddf918befadb3243520752dc938d78d7f0"
        ],
        [
            "intro no_st; decompose [and or] no_st; [ rewrite H6 | rewrite H5 ].",
            "VernacExtend",
            "2067b62f4ea57d344dbeec99ef702d905d5033ef"
        ],
        [
            "intro rs_near; generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG rs_near); simpl in |- *; intro inv_near; inversion inv_near using cl_Inear; intro lt_incx_kt2.",
            "VernacExtend",
            "d59e5a85710089cab500b48f653d0675ebb63f7f"
        ],
        [
            "generalize ((fun (x : Clock) (gt_x_kt1 : gt_Ck x kt1) (lt_x_kt2 : lt_Ck x kt2) (sc_y : S_Ck SC) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Near, x, (sc_y, sg_z))) (tGl_In (ttIn (x:=x) gt_x_kt1 lt_x_kt2) sc_y sg_z)) (Inc x) H7 lt_incx_kt2 (s3, Inc y) (s0, Inc z)); intro rs_inside.",
            "VernacExtend",
            "378200ea36907176c3de344ba1526176d9316fcb"
        ],
        [
            "generalize rs_near; generalize rs_inside; rewrite (lema_Inv6 (RState_Trans rs_near rs_inside) (or_intror (Inside = Near /\\ gt_Ck (Inc x) kc1) (refl_equal Inside))) .",
            "VernacExtend",
            "5b2be5d1ec79ad93c041c3df32ff1f446b67150c"
        ],
        [
            "rewrite (lema_safeTCG (RState_Trans rs_near rs_inside) (refl_equal Inside)).",
            "VernacExtend",
            "e35454114bc8c0e80abf887d380a7aed2c052efb"
        ],
        [
            "intros; apply StepsEX with (s2 := (Far, Inc x, (Sc4, Reset, (Closed, Inc z)))).",
            "VernacExtend",
            "378fb03ecf78a9b886a801f31be5a45d22ed7a16"
        ],
        [
            "apply (RState_Trans rs_inside0 ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) (Inc x) (Inc y) lt_incx_kt2 (Closed, Inc z))).",
            "VernacExtend",
            "87d2b175a81bfe5236ead194badd2b4709224545"
        ],
        [
            "ExistsHere_ITick (Far, Inc x, (Sc4, Reset, (Closed, Inc z))).",
            "VernacExtend",
            "6e7e892ff423fb914cf464edeea30b104c68b319"
        ],
        [
            "Split3_Trivial; apply Isc4; apply Trivial18.",
            "VernacExtend",
            "70c2005196fd664b7301f868c920dde5807dd852"
        ],
        [
            "intro rs_inside; generalize rs_inside; rewrite (lema_safeTCG rs_inside (refl_equal Inside)); intro rs_inside0.",
            "VernacExtend",
            "b4c38cd1fc13fe5a61103e1311f47ff0f8f61913"
        ],
        [
            "generalize rs_inside0; rewrite (lema_Inv6 rs_inside0 (or_intror (Inside = Near /\\ gt_Ck (Inc x) kc1) (refl_equal Inside))) ; intro rs_inside1.",
            "VernacExtend",
            "6c10cdd3f88820ea52b4580399580d008bf0c347"
        ],
        [
            "apply StepsEX with (s2 := (Far, Inc x, (Sc4, Reset, (Closed, Inc z)))).",
            "VernacExtend",
            "aa66de0acf28f785e37998159d64d431920b000f"
        ],
        [
            "generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG rs_inside0); simpl in |- *; intro inv_inside; inversion inv_inside using cl_Iinside; intro lt_incx_kt2.",
            "VernacExtend",
            "7ec63c24a3a510132e4c9090651584f21721bf18"
        ],
        [
            "apply ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) (Inc x) (Inc y) lt_incx_kt2 (Closed, Inc z)).",
            "VernacExtend",
            "d21ae5de990721404f4a50dac2f8a591f8d5a8d8"
        ],
        [
            "ExistsHere_ITick (Far, Inc x, (Sc4, Reset, (Closed, Inc z))).",
            "VernacExtend",
            "6e7e892ff423fb914cf464edeea30b104c68b319"
        ],
        [
            "Split3_Trivial; apply Isc4; apply Trivial18.",
            "VernacExtend",
            "70c2005196fd664b7301f868c920dde5807dd852"
        ],
        [
            "intro no_sc_sg; elim no_sc_sg; [ intro st_no_sc; decompose [and or] st_no_sc | intro no_sg ].",
            "VernacExtend",
            "dfd5c196939bf4319bdbff3400b45ffcca326113"
        ],
        [
            "rewrite H6; rewrite H6 in rs_s1.",
            "VernacExtend",
            "6ffac33ee5a059ac48de31c93ae829aeff082104"
        ],
        [
            "elim (lema_Inv10 rs_s1 (or_intror (Sc2 = Sc1) (refl_equal Sc2))); intro sg'; rewrite sg'.",
            "VernacExtend",
            "3187814105650a8f4752c2c76307e7cae2971169"
        ],
        [
            "intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (Sc3, Inc y, (Lowering, Reset)))).",
            "VernacExtend",
            "5adf9822e179af1affe2925664c1657db2b6ee46"
        ],
        [
            "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) (Inc y) (Inc z) H8 (s4, Inc x)).",
            "VernacExtend",
            "3492cf8d4673bf6a3500b8f2992e85e09c068fc8"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (Sc3, Inc y, (Lowering, Reset))).",
            "VernacExtend",
            "0354593f5bb991d927277e666cb4f322027b5329"
        ],
        [
            "Split3_Trivial; apply Ilowering; apply Trivial26.",
            "VernacExtend",
            "63f4bcbc379e8d869e3b43e0c669d9284bdae7bb"
        ],
        [
            "intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (Sc2, Inc y, (Open, Inc z)))).",
            "VernacExtend",
            "207a2e6864a0c5df0a4fb104fd327dfba0a2622b"
        ],
        [
            "generalize (lema_Inv12 rs_s2 (refl_equal Sc2)); intro ge_incz_incy.",
            "VernacExtend",
            "ec8c674b6e5f5be41ce65e663696afe2048126e0"
        ],
        [
            "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_incz_kg3.",
            "VernacExtend",
            "2f59c8e5c6c00380ef4584a29b20f0e051d0566f"
        ],
        [
            "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) (Inc z) (Trivial31 H8 ge_incz_incy) lt_incz_kg3 (s4, Inc x) (Sc2, Inc y)).",
            "VernacExtend",
            "250f672c0001711dfb54fb24c4cff9956b44dea0"
        ],
        [
            "apply StepsEX with (s2 := (s4, Inc x, (Sc3, Inc y, (Lowering, Reset)))).",
            "VernacExtend",
            "07d443dea8df35e1e1ab159dcf75e72d3c038cd2"
        ],
        [
            "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) (Inc y) (Inc z) H8 (s4, Inc x)).",
            "VernacExtend",
            "3492cf8d4673bf6a3500b8f2992e85e09c068fc8"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (Sc3, Inc y, (Lowering, Reset))).",
            "VernacExtend",
            "0354593f5bb991d927277e666cb4f322027b5329"
        ],
        [
            "Split3_Trivial; apply Ilowering; apply Trivial26.",
            "VernacExtend",
            "63f4bcbc379e8d869e3b43e0c669d9284bdae7bb"
        ],
        [
            "rewrite H7; intro rs_s2; generalize rs_s2; generalize (lema_Inv14 rs_s2 (refl_equal Sc4)); intro far_closed; elim far_closed; intros far closed; rewrite closed.",
            "VernacExtend",
            "7d6ecf3fbec54a760e1e3e55d62b09c558422242"
        ],
        [
            "intro rs_s2'; apply StepsEX with (s2 := (s4, Inc x, (Sc1, Inc y, (Raising, Reset)))).",
            "VernacExtend",
            "3b7498c06e3b57f1e45e8a332df0811a9e1cb9cb"
        ],
        [
            "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2'); simpl in |- *; intro inv_sc4; inversion inv_sc4 using cl_Isc4; intro le_incy_kc2.",
            "VernacExtend",
            "13bc6efe984b59612edafdb727554fd6f28c6dae"
        ],
        [
            "apply ((fun (y z : Clock) (lt_y_kc2 : lt_Ck y kc2) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc4, y, (Closed, z)))) (tGl_Raise (tcRaise lt_y_kc2) (tgRaise z) st_x)) (Inc y) (Inc z) le_incy_kc2 (s4, Inc x)).",
            "VernacExtend",
            "d8613964e0b8c10e47a76c8c3ef9cb946f2a4289"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (Sc1, Inc y, (Raising, Reset))).",
            "VernacExtend",
            "be957e53fdd0e47af2386d61dc2130af970534ad"
        ],
        [
            "Split3_Trivial; apply Iraising; apply Trivial21.",
            "VernacExtend",
            "d5f1900f14b87cbecebc33d46a9c0d27584cb2c6"
        ],
        [
            "decompose [and or] no_sg.",
            "VernacExtend",
            "fa2b3710978a44491eb9d397b934005745a36ec7"
        ],
        [
            "rewrite H6; intro rs_s2; generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_lowering; inversion inv_lowering using cl_Ilowering; intro lt_incz_kg1.",
            "VernacExtend",
            "89210e89894158d08213151f46d2c36e74765c83"
        ],
        [
            "apply StepsEX with (s2 := (s4, Inc x, (s3, Inc y, (Closed, Inc z)))).",
            "VernacExtend",
            "f24596fc833e4fbeaec13357ef5e05bf86ec480d"
        ],
        [
            "apply ((fun (z : Clock) (lt_z_kg1 : lt_Ck z kg1) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Lowering, z)))) (tGl_Down (tgDown lt_z_kg1) st_x sc_y)) (Inc z) lt_incz_kg1 (s4, Inc x) (s3, Inc y)).",
            "VernacExtend",
            "af9a5b33a566580510721de548b128a6a3c04e78"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (Closed, Inc z))).",
            "VernacExtend",
            "1a5e54b2d9c6a0add1cb1e7c778b1505ed7daa3b"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "rewrite H8; intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (s3, Inc y, (Open, Inc z)))).",
            "VernacExtend",
            "d6bdea1ed0baa54717799a6274b86756b8ec00ae"
        ],
        [
            "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_incz_kg3.",
            "VernacExtend",
            "2f59c8e5c6c00380ef4584a29b20f0e051d0566f"
        ],
        [
            "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) (Inc z) H9 lt_incz_kg3 (s4, Inc x) (s3, Inc y)).",
            "VernacExtend",
            "9072a21824f908a76f784026bf7e9470d9335411"
        ],
        [
            "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (Open, Inc z))).",
            "VernacExtend",
            "ccae8e45891ac0209bd573fee0ffb46f965d06b0"
        ],
        [
            "Split3_Trivial.",
            "VernacExtend",
            "e4871a922f95de221cec136906c34fffb662dbb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Trivial1",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "unfold eq_Ck, ini_CkT, ini_CkC in |- *; trivial.",
                        "VernacExtend",
                        "2ad44bdf148f4ad3cbd35c7b2d7ad74cdf345e86"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial2",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "unfold eq_Ck in |- *; trivial.",
                        "VernacExtend",
                        "90378a4ce03a05f0595fdae6e8bdc1394b1160bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial3",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "unfold eq_Ck, Inc in |- *; intros x y eq_x_y; rewrite eq_x_y; trivial.",
                        "VernacExtend",
                        "24f365447a1f2a1c6b588e6bfd126cddea45dde4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial4",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "unfold eq_Ck, Inc, plus_Ck in |- *; intros.",
                        "VernacExtend",
                        "8b7f44ebf6f183efd5ef4446d0a5efedea2bb816"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite (plus_assoc_reverse y z tick); rewrite (plus_comm z tick); auto with *.",
                        "VernacExtend",
                        "0e11c26b422bdd877e0843d528e34ad1bf25df1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial5",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "unfold Clock, ge_Ck, Reset in |- *; auto with *.",
                        "VernacExtend",
                        "0f70f23efb8d317cdad2cbd67d21fcd4cfc7f3c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial6",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "unfold Clock, ge_Ck, Inc, plus_Ck in |- *; auto with *.",
                        "VernacExtend",
                        "7e8e8f71ed760ec49293c842e3f39ceca164f611"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial7",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "unfold Clock, ge_Ck, eq_Ck in |- *; intros.",
                        "VernacExtend",
                        "f86d58d03280b8746aa1814a2dd3f426e409cf2c"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto with *.",
                        "VernacExtend",
                        "282385b832d97a0b9faa218368602e2c128e3824"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial8",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "unfold Clock, ge_Ck, Inc, plus_Ck, tick, plus in |- *; auto with *.",
                        "VernacExtend",
                        "357e1ed46d03843e91e8ef00df5eb9914924eaeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial9",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "unfold Clock, gt_Ck, Inc, plus_Ck in |- *; auto with *.",
                        "VernacExtend",
                        "34add5e85563d2551e1df87373b0c8ab12e248ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial10",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "unfold Clock, gt_Ck, kt1, kc1 in |- *; intros.",
                        "VernacExtend",
                        "e2d8176b6afd53c7f1e443f5ea6b7542701ec623"
                    ]
                },
                {
                    "command": [
                        "apply (gt_trans x 8 4 H).",
                        "VernacExtend",
                        "02997ac012d62bca9a6847c2247b66e52c5f3f97"
                    ]
                },
                {
                    "command": [
                        "unfold gt in |- *; repeat apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "4d95ce089608f077246d168b7ca1bf5d0cd2affa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial11",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "unfold Clock, gt_Ck, Reset in |- *; auto with *.",
                        "VernacExtend",
                        "148e91bc9c21023070308faefc66b792727b66f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial12",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "unfold Clock, Inc, eq_Ck, gt_Ck, plus_Ck, tick in |- *; intros x y.",
                        "VernacExtend",
                        "22d830e13a838d3ae7042b79180f8ad7d0e1b936"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 1); simpl in |- *; intros.",
                        "VernacExtend",
                        "a2c7be675b6773edade4b0b3be302273a9ce72f4"
                    ]
                },
                {
                    "command": [
                        "elim (le_lt_or_eq y x (gt_S_le y x H)); auto with *.",
                        "VernacExtend",
                        "9f1fe756264308fb42ea2e6d3a6bc93c872fe4dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial13",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "unfold Clock, Inc, plus_Ck, tick, eq_Ck, le_Ck, gt_Ck in |- *; intros x y z.",
                        "VernacExtend",
                        "c4da19debcef53bcd1efb0399dd1e645802dfa7a"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 1); rewrite (plus_comm y 1); simpl in |- *; intros.",
                        "VernacExtend",
                        "d747243342de1da9d661c40980b0c62c25af896e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; apply gt_not_le; assumption.",
                        "VernacExtend",
                        "8402125de9a20a706344f83f66d27b7e8e7b37fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial14",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "unfold Clock, kt1, kc1, tick, eq_Ck, gt_Ck in |- *; intros.",
                        "VernacExtend",
                        "0f2ab1dffab68d57730a71cfd9ab414cfc47bb92"
                    ]
                },
                {
                    "command": [
                        "elim H; intro H1; [ apply (gt_trans x 8 4 H1) | rewrite H1 ]; unfold gt in |- *; repeat apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "4c14a34939b16fee6508d793ebd66fb46babe59f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial15",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "unfold Clock, kt1, kc1, kg1, Inc, plus_Ck, tick, eq_Ck, lt_Ck in |- *; intros.",
                        "VernacExtend",
                        "1d4e7067904ff0c3c815052657cc525851823e86"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0; rewrite <- H0 in H1.",
                        "VernacExtend",
                        "919e15cd8c0ff273dc368115ddbb00ad5969eb1d"
                    ]
                },
                {
                    "command": [
                        "apply lt_asym.",
                        "VernacExtend",
                        "354dee9ea8f634564e5675f14460018639b30bca"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm z 4) in H1; rewrite (plus_comm z 1); simpl in |- *.",
                        "VernacExtend",
                        "58b3738d3a874552883f2f6ec9ffed10c48b7869"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_minus 8 4 z H1); simpl in |- *.",
                        "VernacExtend",
                        "2fa1956216d166af2914089f239022b47dedcdec"
                    ]
                },
                {
                    "command": [
                        "repeat apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "a38d804a1415b67cf225cc68f00122d165da66d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial16",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "unfold Clock, kc1, kc2, eq_Ck, plus_Ck, tick, lt_Ck, not in |- *; intros.",
                        "VernacExtend",
                        "fbf8589ef04ecad5816e2c4704b76d0dc44d626b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H; elim (le_not_lt 4 (y + 4) (le_plus_r y 4) H).",
                        "VernacExtend",
                        "b21c5e011447e2df59eb0843c5a421ff4e356476"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial17",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "unfold Clock, eq_Ck, Inc, plus_Ck, tick, le_Ck in |- *; intros.",
                        "VernacExtend",
                        "ad4ea6f1f4b003e08865cee910fad000a7266cbe"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite <- H.",
                        "VernacExtend",
                        "0e8c8d799afa7d9ff8bc75042f88d7b99ef6ae89"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm; simpl in |- *; unfold not in |- *; intro.",
                        "VernacExtend",
                        "917e02f829e66184f1cf811aedfb158321674464"
                    ]
                },
                {
                    "command": [
                        "elim (n_Sn x (le_antisym x (S x) (le_n_Sn x) H1)).",
                        "VernacExtend",
                        "2ed988b807ae5b0161db759af286a99bc2bf6ff7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial18",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Inc, tick, plus_Ck, Reset, kc2 in |- *.",
                        "VernacExtend",
                        "75a84b71b5b8741aa489fbd9f90a05bebb98f05a"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm 0 1); simpl in |- *.",
                        "VernacExtend",
                        "a3686ddda6730190530c43505f18040cdfa1fd88"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial19",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, eq_Ck, Inc, tick, plus_Ck, kg1, kc1, kt2 in |- *; intros.",
                        "VernacExtend",
                        "b645efefdcac56b692d833a5af3d660c17c2faf0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H1; rewrite H1.",
                        "VernacExtend",
                        "12c20d350a004c652b3323ec62325a12129c5150"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 4); rewrite (plus_comm (4 + x) 1); simpl in |- *.",
                        "VernacExtend",
                        "e4cdb78ba312edc4c0a075aa9ae19b6a9f10445a"
                    ]
                },
                {
                    "command": [
                        "repeat apply lt_n_S.",
                        "VernacExtend",
                        "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans x 4 15 H).",
                        "VernacExtend",
                        "0fdce0c3246244d0ae7bd7287977766160fa5a40"
                    ]
                },
                {
                    "command": [
                        "repeat apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "4fe44e80c528179e389e2f6c2e271d5877745da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial20",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "unfold Clock, gt_Ck, lt_Ck, eq_Ck, plus_Ck, kg1, kc1, kt1, gt in |- *; intros.",
                        "VernacExtend",
                        "770bc3795beb5f69b0f11a218d1f9837b46401cc"
                    ]
                },
                {
                    "command": [
                        "apply le_not_lt.",
                        "VernacExtend",
                        "f8e2533dc073c956a7b1c186bc0eabb50b93a8cf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1 in H0; rewrite H0.",
                        "VernacExtend",
                        "d21397af991e60baab3af7abfdc7b5647c3f1315"
                    ]
                },
                {
                    "command": [
                        "generalize (plus_lt_compat_r x 4 4 H); simpl in |- *; intro.",
                        "VernacExtend",
                        "56c887715cf378dd43aed27ac74d174fb0a9f3ff"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_weak (x + 4) 8 (plus_lt_compat_r x 4 4 H)).",
                        "VernacExtend",
                        "048e0df72c9ad32afb9dba372a45b3aefd7d3d46"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial21",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Inc, tick, plus_Ck, Reset, kg3 in |- *.",
                        "VernacExtend",
                        "b6ee681fad34d2ca2b12e06d98a56632b83b2ccd"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm 0 1); simpl in |- *.",
                        "VernacExtend",
                        "a3686ddda6730190530c43505f18040cdfa1fd88"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial22",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "unfold Clock, le_Ck, lt_Ck, eq_Ck in |- *; intros.",
                        "VernacExtend",
                        "a08d4ea8911370f85ccae56c20d63d8abb473f29"
                    ]
                },
                {
                    "command": [
                        "apply (le_lt_or_eq x y H).",
                        "VernacExtend",
                        "5e60feb2515be7f93f748adf14e4c167f1b4b9db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial23",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, eq_Ck, Inc, tick, plus_Ck, kc1, kt2 in |- *; intros.",
                        "VernacExtend",
                        "6f998fadbc9e4407b2bbda3df4708c4a3c93f9a1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0 in H; rewrite (plus_comm y 1); simpl in |- *.",
                        "VernacExtend",
                        "796eb3585f3f7b7ef85cedba9d26d764e49a2489"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S.",
                        "VernacExtend",
                        "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans y 4 19 H).",
                        "VernacExtend",
                        "43a016d25414660e73c92c1c1a84dcfc2eba512e"
                    ]
                },
                {
                    "command": [
                        "repeat apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "4fe44e80c528179e389e2f6c2e271d5877745da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial24",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, le_Ck, Inc, tick, plus_Ck in |- *; intros.",
                        "VernacExtend",
                        "fc8ffdaac85bac6461302ab67d1f6e281fc289de"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 1); simpl in |- *.",
                        "VernacExtend",
                        "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_S x y H).",
                        "VernacExtend",
                        "2fa19f3bbe72c04be7bdcc9fa4b15c6115019246"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial25",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "unfold Clock, eq_Ck, lt_Ck, Inc, tick, plus_Ck, kc1, kt2 in |- *; intros.",
                        "VernacExtend",
                        "471a83c8138bfbd0782d7944bf54761707beb8ba"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 1); simpl in |- *.",
                        "VernacExtend",
                        "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S.",
                        "VernacExtend",
                        "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0; rewrite H0.",
                        "VernacExtend",
                        "315a6ed770a71ae041b170fd87ad4618e0747c5a"
                    ]
                },
                {
                    "command": [
                        "repeat apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "a38d804a1415b67cf225cc68f00122d165da66d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial26",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Inc, plus_Ck, tick, kg1, Reset in |- *.",
                        "VernacExtend",
                        "5b677708beadb071a80b22c96c8b26b4e0dbb5f6"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm 0 1); simpl in |- *.",
                        "VernacExtend",
                        "a3686ddda6730190530c43505f18040cdfa1fd88"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial27",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Inc, plus_Ck, tick, kt2, Reset in |- *.",
                        "VernacExtend",
                        "c83d0e4a96af16ad03a2b00d8f350ffd703cf4ca"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm 0 1); simpl in |- *.",
                        "VernacExtend",
                        "a3686ddda6730190530c43505f18040cdfa1fd88"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "1fcedea1516f721bb01bcc6754efbe06ee0b354a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial28",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "unfold le_Ck, Inc, plus_Ck, tick, kc1, Reset in |- *.",
                        "VernacExtend",
                        "4d949361a6eb1f16e45e6e081aeee3c63149dbca"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm 0 1); simpl in |- *.",
                        "VernacExtend",
                        "a3686ddda6730190530c43505f18040cdfa1fd88"
                    ]
                },
                {
                    "command": [
                        "apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "050503db28f4619447bc14e30d11ebbc6c4e00ae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial29",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, ge_Ck, kg2, kg3, ge in |- *; intros.",
                        "VernacExtend",
                        "6943eb00e36ef258a775c151219892dddee8fe73"
                    ]
                },
                {
                    "command": [
                        "elim (le_or_lt 4 x); auto with *.",
                        "VernacExtend",
                        "2b9afc5cff78030e6ead77cac1ce588927869fed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial30",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, Inc, plus_Ck, tick, kg2, kg3 in |- *; intros.",
                        "VernacExtend",
                        "3c5e683618ea425c4ff5aed75e4710950855eb59"
                    ]
                },
                {
                    "command": [
                        "rewrite (plus_comm x 1); simpl in |- *.",
                        "VernacExtend",
                        "48f4cdcff5c87fa11bb5dcb2a85ac4d432d39655"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_S.",
                        "VernacExtend",
                        "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
                    ]
                },
                {
                    "command": [
                        "apply (lt_le_trans x 4 7 H).",
                        "VernacExtend",
                        "ab828a3c192d77cfd16fe1f5eee1c374abd8f0e6"
                    ]
                },
                {
                    "command": [
                        "repeat apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "4fe44e80c528179e389e2f6c2e271d5877745da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial31",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "unfold Clock, ge_Ck, eq_Ck, kc1, kg2, ge in |- *; intros.",
                        "VernacExtend",
                        "709910dc8f5b1ef2953536c5fc9a85bd701a9859"
                    ]
                },
                {
                    "command": [
                        "rewrite H in H0; assumption.",
                        "VernacExtend",
                        "b80a16928a9db2554e8c10988e2015aae6d8efa3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_lt_le",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "unfold not in |- *; intros x y no_lt_x_y.",
                        "VernacExtend",
                        "f50d46d7d9d67b8c29677d8faeb4e4d28c3f90d5"
                    ]
                },
                {
                    "command": [
                        "elim (le_or_lt y x); [ trivial | intro lt_x_y; elim (no_lt_x_y lt_x_y) ].",
                        "VernacExtend",
                        "9ac9d0d3168b064de0e4cf31c05813df150c266a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial32",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, gt_Ck, Inc, plus_Ck, tick, kt1, kt2, gt in |- *; intros.",
                        "VernacExtend",
                        "3cedb011f0323edaf1cdde6265e8a9a436a2e281"
                    ]
                },
                {
                    "command": [
                        "generalize (not_lt_le H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
                        "VernacExtend",
                        "294e1e46c1ec252a7596a26625c4df8ce1dedc86"
                    ]
                },
                {
                    "command": [
                        "generalize (le_antisym 19 x (le_S_n 19 x H1) (lt_n_Sm_le x 19 H)); intro H4; rewrite <- H4.",
                        "VernacExtend",
                        "31186f0d43f64c9f8201278f765b352718b62d0d"
                    ]
                },
                {
                    "command": [
                        "repeat apply lt_n_S; apply lt_O_Sn.",
                        "VernacExtend",
                        "a38d804a1415b67cf225cc68f00122d165da66d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial33",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "unfold Clock, le_Ck, eq_Ck, Inc, plus_Ck, tick, kc1 in |- *; intros.",
                        "VernacExtend",
                        "536a86e720ceb44d6e73203c044e10f7a251fbb0"
                    ]
                },
                {
                    "command": [
                        "generalize (not_le_lt H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
                        "VernacExtend",
                        "1c3aadacb5fbcdb805d84f5c98143fdd364ecbbb"
                    ]
                },
                {
                    "command": [
                        "apply (le_antisym x 4 H (lt_n_Sm_le 4 x H1)).",
                        "VernacExtend",
                        "5e8ba79517d2df04374a559e9ba0a853baa6f44b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trivial34",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "unfold Clock, lt_Ck, ge_Ck, Inc, plus_Ck, tick, kg3, kg2 in |- *; intros.",
                        "VernacExtend",
                        "6e4756ed45c71f42b456ea28ea6492e82e4018db"
                    ]
                },
                {
                    "command": [
                        "generalize (not_lt_le H0); rewrite (plus_comm x 1); simpl in |- *; intro.",
                        "VernacExtend",
                        "294e1e46c1ec252a7596a26625c4df8ce1dedc86"
                    ]
                },
                {
                    "command": [
                        "generalize (le_antisym 7 x (le_S_n 7 x H1) (lt_n_Sm_le x 7 H)); intro H4; rewrite <- H4.",
                        "VernacExtend",
                        "31d67f2db03ae4b9241db132a58604fe3324eef0"
                    ]
                },
                {
                    "command": [
                        "unfold ge in |- *; repeat apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "3a116f4ed2f7a25c428ea6b78fd2ec0e51f4fed1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_inv_1",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Reset, kt2 in |- *; auto with *.",
                        "VernacExtend",
                        "d64f265c7b29dd0ae17815340a31691b7c0a55db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_inv_2",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "unfold Clock, le_Ck, Reset in |- *; auto with *.",
                        "VernacExtend",
                        "6cfabd0b10408d5ee2d177f19949d5066c3df869"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_inv_3",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Reset, kc2 in |- *; auto with *.",
                        "VernacExtend",
                        "9f36a05fc029559c357812d240440e8d8a28282c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_inv_4",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Reset, kg1 in |- *; auto with *.",
                        "VernacExtend",
                        "d56cb59abbd2571f475949c9362b56033ef535fb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_inv_5",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "unfold lt_Ck, Reset, kg3 in |- *; auto with *.",
                        "VernacExtend",
                        "0b1c9df860213d35cb17b5c82a7abed9d1349eec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Inv_SiniTCG",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "simpl in |- *; unfold SiniT, SiniC, SiniG in |- *; Split3_Trivial.",
                        "VernacExtend",
                        "6f7a2ba04f23cb922ee77c7cd56e4c3cd8197efd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv1",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (p_s1 H0 H1).",
                        "VernacExtend",
                        "371749bd05c795fd5506e80b40e0da7ef36d5c88"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv2",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or H1.",
                        "VernacExtend",
                        "6677d20b2d61c5e5c8310f27411b3015ff5866e2"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv1 rs_s1 (or_intror (Inside = Near) (refl_equal Inside)) (refl_equal Sc3)); intro H2; rewrite H2 in H1; Simpl_or H1.",
                        "VernacExtend",
                        "bf667c106e6c81e71b567ddf4645654a75221709"
                    ]
                },
                {
                    "command": [
                        "Simpl_or H1.",
                        "VernacExtend",
                        "6677d20b2d61c5e5c8310f27411b3015ff5866e2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv3",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "apply Trivial1.",
                        "VernacExtend",
                        "5e333b27d63618a734cbde9d0142c0c2372afb38"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or H0.",
                        "VernacExtend",
                        "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial3 (p_s1 H3)).",
                        "VernacExtend",
                        "2abc0a603a64a8dc72afdee68558e3b2c0c1a024"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv4",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (p_s1 H0).",
                        "VernacExtend",
                        "ec7f28765957ecf40ac7dc6d18546ea44b6d32fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv5",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial4 (p_s1 H3 H4)).",
                        "VernacExtend",
                        "8524d67bcd574d41675e175b79ffce11f620eda0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv6",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; discriminate.",
                        "VernacExtend",
                        "3cdb2df70f70c74dd48938872b403f8a0560dad0"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply p_s1; left; split; [ auto with * | apply (Trivial10 gt_x_kt1) ].",
                        "VernacExtend",
                        "0698c8ba07b29b77cc584fe3986d6485a08e630e"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
                        "VernacExtend",
                        "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; discriminate.",
                        "VernacExtend",
                        "3cdb2df70f70c74dd48938872b403f8a0560dad0"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (p_s1 H0).",
                        "VernacExtend",
                        "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H3; [ elim (Trivial12 H6) | auto with * ].",
                        "VernacExtend",
                        "2d94e0bb678926f7e57cde9ac45896cab3b08ddc"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv4 rs_s1 H5); auto with *.",
                        "VernacExtend",
                        "9c4836dc2e2594aed23be678cdd59668290a5ed2"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)); intros.",
                        "VernacExtend",
                        "238d2d511eb79b6f48df86cf81ce9ee2a0655207"
                    ]
                },
                {
                    "command": [
                        "rewrite H7 in H1.",
                        "VernacExtend",
                        "a8ef67e2d05abffc621a0fcd305a8d5bdf079c37"
                    ]
                },
                {
                    "command": [
                        "inversion H1 using cl_Isc2; intro H9.",
                        "VernacExtend",
                        "a166b318180b3248064cc3bddb935d7051b7268b"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial13 H6 H4 H9).",
                        "VernacExtend",
                        "7e58c3d3500a5018d1b8b025fc841ea445709d10"
                    ]
                },
                {
                    "command": [
                        "intro H7; apply p_s1; left; split; [ assumption | Generalize_Easy (Trivial9 H7) ].",
                        "VernacExtend",
                        "6b3865bdcb04689256711a1c33a12849354873c4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv7",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (p_s1 H0 H1).",
                        "VernacExtend",
                        "371749bd05c795fd5506e80b40e0da7ef36d5c88"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv8",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; discriminate.",
                        "VernacExtend",
                        "3cdb2df70f70c74dd48938872b403f8a0560dad0"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (p_s1 H0).",
                        "VernacExtend",
                        "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
                        "VernacExtend",
                        "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (p_s1 H0).",
                        "VernacExtend",
                        "34623166e1f304b9ef5149d2690edc7fdfdbf0d6"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv6 rs_s1); simpl in |- *; intro.",
                        "VernacExtend",
                        "463d1f494e38485467482c64f8b458bad5108577"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0.",
                        "VernacExtend",
                        "28a59650079b15f243ba3e7c9762111ff4974734"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (H1 (or_introl (a = Inside) (conj H3 (Trivial14 (or_introl (eq_Ck b kt1) H4))))).",
                        "VernacExtend",
                        "5eaf79b877c605207407d899567a09e2f5560f86"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (H1 (or_intror (a = Near /\\ gt_Ck b kc1) H2)).",
                        "VernacExtend",
                        "b3c8ce45659edb43697cdee8a2840f80f717fd96"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H3; [ Simpl_or (Trivial12 H6) | auto with * ].",
                        "VernacExtend",
                        "3aef75a480ca791ffee40a3f5a6096f9a4d4e033"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv6 rs_s1 (or_introl (s4 = Inside) (conj H5 (Trivial14 (or_intror (gt_Ck x kt1) H4))))); intro.",
                        "VernacExtend",
                        "a905c38d00c121e57d3b036f0f4b97b4d12c23db"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (lema_Inv1 rs_s1 (or_introl (s4 = Inside) H5) H7).",
                        "VernacExtend",
                        "4c4ba1635c91c5c5caa2a82bdb9e5c776944792f"
                    ]
                },
                {
                    "command": [
                        "rewrite H8 in H0; inversion H0 using cl_Ilowering; intro.",
                        "VernacExtend",
                        "0af022bafdbb4859d6f1cbb6a593d0a02bd20129"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial15 H4 (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)) (lema_Inv5 rs_s1 H5 H7) H9).",
                        "VernacExtend",
                        "3e88675da408ee21b271ced946f43e9090c8a961"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_safeTCG",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "apply Mon_I with (Pg := Inv8) (Pp := safeTCG); [ exact lema_Inv8 | unfold Inv8, safeTCG in |- *; simpl in |- * ].",
                        "VernacExtend",
                        "e289f35a75a9b9c830375f56652c533e8d269aba"
                    ]
                },
                {
                    "command": [
                        "unfold Inv8, safeTCG in |- *; simpl in |- *; intro s; elim s.",
                        "VernacExtend",
                        "e84081596316868da40dfdfba668a5c1f0e31406"
                    ]
                },
                {
                    "command": [
                        "intros y y0; elim y; elim y0.",
                        "VernacExtend",
                        "8982aaf83e6ead984272890fc587d0e8951adb04"
                    ]
                },
                {
                    "command": [
                        "intros y1 y2 y3 y4; elim y1; elim y2; auto with *.",
                        "VernacExtend",
                        "fb6082478c2e8b1254afc643c3d5e1b18d604c8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv9",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; discriminate.",
                        "VernacExtend",
                        "3cdb2df70f70c74dd48938872b403f8a0560dad0"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply p_s1; left; split; [ auto with * | apply (Trivial10 gt_x_kt1) ].",
                        "VernacExtend",
                        "0698c8ba07b29b77cc584fe3986d6485a08e630e"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; [ elim (Trivial11 H3) | discriminate ].",
                        "VernacExtend",
                        "ccbf3b96ae53f1e07a56e25442e92da94ab8bfb0"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H0; discriminate.",
                        "VernacExtend",
                        "3cdb2df70f70c74dd48938872b403f8a0560dad0"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial16 lt_y_kc2 (p_s1 H0)).",
                        "VernacExtend",
                        "0a034649d7909b87b3c03eb6938d79297247c69c"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] H3.",
                        "VernacExtend",
                        "ca7d79fc296b29ec5842ca986b6187cd556713f0"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial12 H6); intro.",
                        "VernacExtend",
                        "116be523d18d0e7985d43f55236276eaf234959b"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv4 rs_s1 H5); intro.",
                        "VernacExtend",
                        "cd06b6075fe7564ce77ba23f906a04155c802ed3"
                    ]
                },
                {
                    "command": [
                        "rewrite H7 in H1; inversion H1 using cl_Isc2; intro.",
                        "VernacExtend",
                        "305d21d7c200cfff3a434244c762a6487911bd1a"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv3 rs_s1 (or_introl (s4 = Inside) H5)); intro.",
                        "VernacExtend",
                        "465a2e9a3d9f5085bed3d4cc00cbe4724019dd69"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial17 H4 H9 H8).",
                        "VernacExtend",
                        "edf1dd9ae7352ca4a5577970ac871b152fa9d59e"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial4 (lema_Inv5 rs_s1 H5 H7)).",
                        "VernacExtend",
                        "a041ae5efec027ae9cbed857c79db866f96319fd"
                    ]
                },
                {
                    "command": [
                        "apply Trivial4; apply p_s1; left; split; assumption.",
                        "VernacExtend",
                        "e3bca28fcc9fbfe22040b1250c90110fb0956d44"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial4 (p_s1 (or_intror (s4 = Near /\\ gt_Ck x kc1) H4))).",
                        "VernacExtend",
                        "f81cf20d77b296cc83d17978d26b6e526074fa33"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv10",
            "line_nb": 366,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (p_s1 H0).",
                        "VernacExtend",
                        "ec7f28765957ecf40ac7dc6d18546ea44b6d32fa"
                    ]
                },
                {
                    "command": [
                        "Simpl_or H0.",
                        "VernacExtend",
                        "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
                    ]
                },
                {
                    "command": [
                        "Simpl_or H0.",
                        "VernacExtend",
                        "9f24449aa10f6a9b6884671078e788e1e51e2b8f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv11",
            "line_nb": 374,
            "steps": [
                {
                    "command": [
                        "generalize (Mon_I (tr:=TrGlobal) (Sini:=SiniTCG) (Pg:=Inv10) (Pp:=Inv11)); unfold ForAll in |- *; intros.",
                        "VernacExtend",
                        "a873f97b57f700431d3ccb0f4153a36fb4bf6051"
                    ]
                },
                {
                    "command": [
                        "apply H; [ exact lema_Inv10 | idtac | assumption ].",
                        "VernacExtend",
                        "a0ef6d5d1fd41ebaf2d2e754a93b6c25a3ff86c6"
                    ]
                },
                {
                    "command": [
                        "unfold Inv10, Inv11 in |- *; simpl in |- *; intro.",
                        "VernacExtend",
                        "80dd2435d34dfeff056a01c3fa06c7e95bdf1de3"
                    ]
                },
                {
                    "command": [
                        "elim s0; intros y y0; elim y; elim y0; intros y1 y2 y3 y4; elim y1; elim y2.",
                        "VernacExtend",
                        "63f486e614fc584fe8854c2b564b8bbf91ba00d6"
                    ]
                },
                {
                    "command": [
                        "intros sg ck sc; elim sg.",
                        "VernacExtend",
                        "ed6a52b3297a7220b6dc50b363a23b0f7317665d"
                    ]
                },
                {
                    "command": [
                        "intros ck1 H1 H2; Simpl_or H2.",
                        "VernacExtend",
                        "d7fe252de24912614bb7d6290f97a1b4aa9d4972"
                    ]
                },
                {
                    "command": [
                        "elim sc; intros ck1 H1; [ elim H1; Easy2 | elim H1; Easy2 | left; auto with * | right; auto with * ].",
                        "VernacExtend",
                        "6e2400546eeccd037b54b975d3788cc54c80f513"
                    ]
                },
                {
                    "command": [
                        "elim sc; intros ck1 H1; [ elim H1; Easy2 | elim H1; Easy2 | left; auto with * | right; auto with * ].",
                        "VernacExtend",
                        "6e2400546eeccd037b54b975d3788cc54c80f513"
                    ]
                },
                {
                    "command": [
                        "intros ck1 H1 H2; Simpl_or H2.",
                        "VernacExtend",
                        "d7fe252de24912614bb7d6290f97a1b4aa9d4972"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv12",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply Trivial5.",
                        "VernacExtend",
                        "746f8cf004307fc415b2d1b71f6b787e9af52ee1"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial6 (p_s1 H3)).",
                        "VernacExtend",
                        "66afea129050bb9e29124186708f083ae9252b50"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv13",
            "line_nb": 393,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv6 rs_s1); simpl in |- *.",
                        "VernacExtend",
                        "d2dc2ec4f2b3c7810ef82313f129c01b786bfee7"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "intro H1; Generalize_Easy (H1 (or_introl (Near = Inside) (conj (refl_equal Near) (Trivial10 gt_x_kt1)))).",
                        "VernacExtend",
                        "8dc2151db2491e2e914579e71cc070e8d66a9b1a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_Inv14",
            "line_nb": 401,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "Simpl_and (p_s1 H0).",
                        "VernacExtend",
                        "123cb3adcf891451e7de22de46eedd048b4f9e87"
                    ]
                },
                {
                    "command": [
                        "Simpl_and (p_s1 H0).",
                        "VernacExtend",
                        "123cb3adcf891451e7de22de46eedd048b4f9e87"
                    ]
                },
                {
                    "command": [
                        "Simpl_and (p_s1 H0).",
                        "VernacExtend",
                        "123cb3adcf891451e7de22de46eedd048b4f9e87"
                    ]
                },
                {
                    "command": [
                        "split; [ auto with * | apply (lema_safeTCG rs_s1 (refl_equal Inside)) ].",
                        "VernacExtend",
                        "3397b020a640eef1af5c66423a649285c1e0ea05"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_InvSc3",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial7 eq_y_kc1).",
                        "VernacExtend",
                        "e51a14616c690ec283b7fd40a9eeb8dbd18a96cb"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial8 (p_s1 H3)).",
                        "VernacExtend",
                        "78fdedad916f84c1bddf9ae712cba118b5578aeb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lema_InvInside",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl.",
                        "VernacExtend",
                        "ea4e16fe3428bd4b20fb157c03d2e32434a267c8"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial9 (p_s1 H3)).",
                        "VernacExtend",
                        "94619b8192d410ab6d091489db4909e38ffb143f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InvT'",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H; [ intro st; rewrite st; auto with * | intro n_i; elim n_i; intro H1; elim H1; intros st cond; rewrite st; [ apply Inear | apply Iinside ]; auto with * ].",
                        "VernacExtend",
                        "b399d1f179fbef4b5874f4731dbea1981b01742f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InvC'",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H; [ intro sc; rewrite sc; auto with * | intro sc2_4; elim sc2_4; [ intro H1; elim H1; intros sc cond; rewrite sc; apply Isc2; auto with * | intro sc3_4; elim sc3_4; [ intro sc; rewrite sc; auto with * | intro H1; elim H1; intros sc cond; rewrite sc; apply Isc4; auto with * ] ] ].",
                        "VernacExtend",
                        "df5c01aa78aa805bbe8c83126530c4a9a12258f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "InvG'",
            "line_nb": 432,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H; [ intro sg; rewrite sg; auto with * | intro sg2_4; elim sg2_4; [ intro H1; elim H1; intros sg cond; rewrite sg; apply Ilowering; auto with * | intro sg3_4; elim sg3_4; [ intro sg; rewrite sg; auto with * | intro H1; elim H1; intros sg cond; rewrite sg; apply Iraising; auto with * ] ] ].",
                        "VernacExtend",
                        "8cf737e6f8e0156fcc6bb1cdebc556e8420b1904"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NoImpl",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "unfold not in |- *; auto with *.",
                        "VernacExtend",
                        "0d804c7176ccff0ead4d61643922e7f19f86e6d1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_3_and",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (not_and_or _ _ H); intro H2; [ idtac | elim (not_and_or _ _ H2); intro ].",
                        "VernacExtend",
                        "937864e6515830f40c32253af17fe3f87038be98"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "elim (classic A); auto with *.",
                        "VernacExtend",
                        "81e4c9fb6c4796f88b7d62905d4458bddd989c58"
                    ]
                },
                {
                    "command": [
                        "elim (classic A); elim (classic B); auto with *.",
                        "VernacExtend",
                        "cc837df2a150b4b934a7eaeb86d10648542b7a2c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "No_invT",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros st x inv.",
                        "VernacExtend",
                        "d59bbbc79c7b8b8dd090c7fea03e74affb21d6db"
                    ]
                },
                {
                    "command": [
                        "generalize (not_or_and _ _ (NoImpl (InvT' (st, x)) inv)); elim st; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
                        "VernacExtend",
                        "46c91d3cf90c00666a4eb995e3dc7a9745c26ead"
                    ]
                },
                {
                    "command": [
                        "absurd (Far = Far); auto with *.",
                        "VernacExtend",
                        "0b9bf4bdd563b941c8f9c159b8b82969a256784c"
                    ]
                },
                {
                    "command": [
                        "elim (not_and_or _ _ H); intros; [ absurd (Near = Near); auto with * | auto with * ].",
                        "VernacExtend",
                        "4e44088aa2014714f2c8d0030eb45bb1f2fd3054"
                    ]
                },
                {
                    "command": [
                        "elim (not_and_or _ _ H3); intros; [ absurd (Inside = Inside); auto with * | auto with * ].",
                        "VernacExtend",
                        "dbf3301a4b5c90ec84329dcc254e5d08bbd12567"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "No_invC",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros sc y inv.",
                        "VernacExtend",
                        "4e2223ab54602ee08e5e58b7854614f205ad756d"
                    ]
                },
                {
                    "command": [
                        "generalize (not_or_and _ _ (NoImpl (InvC' (sc, y)) inv)); elim sc; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
                        "VernacExtend",
                        "6bc29996b4bb5e478afa3d057dda584e606d9549"
                    ]
                },
                {
                    "command": [
                        "absurd (Sc1 = Sc1); auto with *.",
                        "VernacExtend",
                        "14213d67e5a864000bd8c6b92e63108520b8b1d5"
                    ]
                },
                {
                    "command": [
                        "elim (not_and_or _ _ H); intros; [ absurd (Sc2 = Sc2); auto with * | auto with * ].",
                        "VernacExtend",
                        "2ac1e598e4f0461d9aa8e34298c100db025dcafe"
                    ]
                },
                {
                    "command": [
                        "elim (not_or_and _ _ H3); intros; absurd (Sc3 = Sc3); auto with *.",
                        "VernacExtend",
                        "a9f0600243027dcdaa92fcfdf278369ebbfbc1b2"
                    ]
                },
                {
                    "command": [
                        "elim (not_or_and _ _ H3); intros H4 H5; elim (not_and_or _ _ H5); intros; [ absurd (Sc4 = Sc4); auto with * | auto with * ].",
                        "VernacExtend",
                        "b5abb539d1e8d321c31a8873ee06a46a33086a2c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "No_invG",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros sc y inv.",
                        "VernacExtend",
                        "4e2223ab54602ee08e5e58b7854614f205ad756d"
                    ]
                },
                {
                    "command": [
                        "generalize (not_or_and _ _ (NoImpl (InvG' (sc, y)) inv)); elim sc; intro H0; elim H0; intros H1 H2; elim (not_or_and _ _ H2); intros.",
                        "VernacExtend",
                        "02ec8dcde4ad7df01c09ca0c99c5a8889bff83f5"
                    ]
                },
                {
                    "command": [
                        "absurd (Open = Open); auto with *.",
                        "VernacExtend",
                        "047abc2c6b3a1de119d4b99baeab536ff8d85475"
                    ]
                },
                {
                    "command": [
                        "elim (not_and_or _ _ H); intros; [ absurd (Lowering = Lowering); auto with * | auto with * ].",
                        "VernacExtend",
                        "a9da61f7bc6c73be0d52c7c34c125624c8471928"
                    ]
                },
                {
                    "command": [
                        "elim (not_or_and _ _ H3); intros; absurd (Closed = Closed); auto with *.",
                        "VernacExtend",
                        "65bfbf29272dd5d9791889f47f90d514bd5c8b20"
                    ]
                },
                {
                    "command": [
                        "elim (not_or_and _ _ H3); intros H4 H5; elim (not_and_or _ _ H5); intros; [ absurd (Raising = Raising); auto with * | auto with * ].",
                        "VernacExtend",
                        "76668f57b662279d2c90af3c9d6c0d54020b31d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "INV_TCG_general",
            "line_nb": 476,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "SplitTrans_Simpl; elim p_s1; intros H1 H2; elim H2; intros; auto with *; (split; [ auto with * | split; auto with * ]).",
                        "VernacExtend",
                        "6663ead11408e1b622e2df3d395478299d789c77"
                    ]
                },
                {
                    "command": [
                        "apply Inear; apply trivial_inv_1.",
                        "VernacExtend",
                        "321e8446a4dd132e56978af10ecc34f26a88bead"
                    ]
                },
                {
                    "command": [
                        "apply Isc2; apply trivial_inv_2.",
                        "VernacExtend",
                        "4eb99983e0fe9e1def8878afa7e2c79757726b54"
                    ]
                },
                {
                    "command": [
                        "apply Isc4; apply trivial_inv_3.",
                        "VernacExtend",
                        "12f9d2af8c043b55ad8163329d8058d5809954fa"
                    ]
                },
                {
                    "command": [
                        "apply Ilowering; apply trivial_inv_4.",
                        "VernacExtend",
                        "0a12229ec398328579257c306278bb9f0e574787"
                    ]
                },
                {
                    "command": [
                        "apply Iraising; apply trivial_inv_5.",
                        "VernacExtend",
                        "af5a7b60fc4148b5d35f1eaa38b73b91300920d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "INV_T_general",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_TCG_general H H0).",
                        "VernacExtend",
                        "443d9e77cc386147054295280e6adceccf135590"
                    ]
                },
                {
                    "command": [
                        "elim s2; simpl in |- *.",
                        "VernacExtend",
                        "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
                    ]
                },
                {
                    "command": [
                        "intros st sc_sg.",
                        "VernacExtend",
                        "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
                    ]
                },
                {
                    "command": [
                        "elim sc_sg; intros.",
                        "VernacExtend",
                        "aacd3d2d45e529beef556ec4a0cd826ff7f8cfe9"
                    ]
                },
                {
                    "command": [
                        "elim H1; auto with *.",
                        "VernacExtend",
                        "bb458f681684764a20362937a8ffe9dff3a5f557"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "INV_C_general",
            "line_nb": 494,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_TCG_general H H0).",
                        "VernacExtend",
                        "443d9e77cc386147054295280e6adceccf135590"
                    ]
                },
                {
                    "command": [
                        "elim s2; simpl in |- *.",
                        "VernacExtend",
                        "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
                    ]
                },
                {
                    "command": [
                        "intros st sc_sg.",
                        "VernacExtend",
                        "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
                    ]
                },
                {
                    "command": [
                        "elim sc_sg; simpl in |- *; intros.",
                        "VernacExtend",
                        "87ba9c119113e1bbeef9b06ccac961d2c1b27b7d"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros inv_T inv_C_G; elim inv_C_G; auto with *.",
                        "VernacExtend",
                        "2373d7e28d82d8cf5cdd1664fa2016294711ced1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "INV_G_general",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_TCG_general H H0).",
                        "VernacExtend",
                        "443d9e77cc386147054295280e6adceccf135590"
                    ]
                },
                {
                    "command": [
                        "elim s2; simpl in |- *.",
                        "VernacExtend",
                        "30ef3db11c21aa05b693f5d1e9b3352f512dfffb"
                    ]
                },
                {
                    "command": [
                        "intros st sc_sg.",
                        "VernacExtend",
                        "69f25b6359cec5b45dfe5d7393a5f86b0dce9d7f"
                    ]
                },
                {
                    "command": [
                        "elim sc_sg; simpl in |- *; intros.",
                        "VernacExtend",
                        "87ba9c119113e1bbeef9b06ccac961d2c1b27b7d"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros inv_T inv_C_G; elim inv_C_G; auto with *.",
                        "VernacExtend",
                        "2373d7e28d82d8cf5cdd1664fa2016294711ced1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NoInvTick",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "intro s; elim s.",
                        "VernacExtend",
                        "b3c41f68e27afa79ea19f82e3591c4842954fc0c"
                    ]
                },
                {
                    "command": [
                        "intros st sc_sg; elim sc_sg; intros sc sg; elim st; elim sc; elim sg; intros.",
                        "VernacExtend",
                        "c2cfd36991862afdd2a7254f34de5963cfea2219"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "elim (not_3_and H); [ intro no_invt | intro H1; decompose [and or] H1 ].",
                        "VernacExtend",
                        "dd05babd50491010f0af26f10f03cf03dc6609d2"
                    ]
                },
                {
                    "command": [
                        "elim (No_invT no_invt); intro H1; elim H1; intros st' x; rewrite st'; rewrite st' in H0.",
                        "VernacExtend",
                        "013b85cea2bb64dd56a8610a86fa2099d2275891"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_near; inversion inv_near using cl_Inear; intro lt_x_kt2.",
                        "VernacExtend",
                        "5ea00e3d25cf56203f3a999436f2b26efb7ca55c"
                    ]
                },
                {
                    "command": [
                        "left; left; split; [ auto with * | apply (Trivial32 lt_x_kt2 x) ].",
                        "VernacExtend",
                        "405d159b78a64b754cea1fc4404816d47f0baa89"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "elim (No_invC H4); intro H5; elim H5; intros sc' y'; rewrite sc'; rewrite sc' in H0.",
                        "VernacExtend",
                        "da571e5ed4e8a7701f8ee77b6dc856bd84d5e53a"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_sc2; inversion inv_sc2 using cl_Isc2; intro le_y_kc1.",
                        "VernacExtend",
                        "35628b86f94205762d695e0b837828e5e333e991"
                    ]
                },
                {
                    "command": [
                        "generalize (Trivial33 le_y_kc1 y'); intro.",
                        "VernacExtend",
                        "150eeaa2121c8940365c12e7c8f3a31099ee5d48"
                    ]
                },
                {
                    "command": [
                        "right; left; auto with *.",
                        "VernacExtend",
                        "86e05dd417161bc915c7846787adb73a89d60a33"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "elim (No_invG H5); intro H6; elim H6; intros sg' z; rewrite sg'; rewrite sg' in H0.",
                        "VernacExtend",
                        "7c2b0cfc8b954c7ef07b3a2124016fcc1564917e"
                    ]
                },
                {
                    "command": [
                        "right; right; auto with *.",
                        "VernacExtend",
                        "a84de87e49df032eda98ac1975454ffd6845eb23"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG H0); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_z_kg3.",
                        "VernacExtend",
                        "75391c5c97b2d421175a92c42484c3834b022ee7"
                    ]
                },
                {
                    "command": [
                        "generalize (Trivial34 lt_z_kg3 z); intro.",
                        "VernacExtend",
                        "d7a0254ad1fafce51a7dd1b93599c7c78a815e32"
                    ]
                },
                {
                    "command": [
                        "right; right; auto with *.",
                        "VernacExtend",
                        "a84de87e49df032eda98ac1975454ffd6845eb23"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NonZeno",
            "line_nb": 542,
            "steps": [
                {
                    "command": [
                        "BeginForAll.",
                        "VernacExtend",
                        "9300ae8d53c8bdca8f435384d8e00348cc44e14c"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick SiniTCG.",
                        "VernacExtend",
                        "3d7bd249ad68e9f69a77d9bb639e012e3091fd85"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "SplitTrans'_Simpl; generalize H0.",
                        "VernacExtend",
                        "f18cb0544a41c0a3ba724276e61b5efe846f5808"
                    ]
                },
                {
                    "command": [
                        "rewrite (lema_Inv6 H0 (or_intror (Inside = Near /\\ gt_Ck x kc1) (refl_equal Inside))) .",
                        "VernacExtend",
                        "5664dca15020573130f361919124379b97e2772c"
                    ]
                },
                {
                    "command": [
                        "rewrite (lema_safeTCG H0 (refl_equal Inside)); intro rs_s2.",
                        "VernacExtend",
                        "0addc14d01787c9308e3137e7c8c401116c38543"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Far, x, (Sc4, Reset, (Closed, b)))).",
                        "VernacExtend",
                        "5974e6584c208224e5a7d55937748479d5d90ad8"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) x b0 lt_x_kt2 (Closed, b)).",
                        "VernacExtend",
                        "47a0daefe8dd4dc95ee475ef25697d8b822321ee"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
                        "VernacExtend",
                        "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; (apply Isc4; apply Trivial18).",
                        "VernacExtend",
                        "80cbc730a825ad44a970c60067ca12dce1b6b7a0"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv11 H0 (or_intror (Closed = Lowering) (refl_equal Closed))); intro sc_closed; rewrite sc_closed.",
                        "VernacExtend",
                        "ec847d191ac97821c98d54e5e76fadf10a34c841"
                    ]
                },
                {
                    "command": [
                        "elim a0; intro rs_s2.",
                        "VernacExtend",
                        "0c4b3cfe31a464a29c5f4364759e9bcac1be89ac"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, b0, (Sc3, b, (Closed, z))).",
                        "VernacExtend",
                        "c40c1af3fe5f6b7e6e9c37702bbff4ba7f850fa6"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, b0, (Sc3, b, (Closed, z))).",
                        "VernacExtend",
                        "ef6f1308364c0ed709e764c41298ce107d716163"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "apply Inear.",
                        "VernacExtend",
                        "9af50372e59da0b9afe3973b9b3258d70592d2be"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial19 lt_z_kg1 (lema_Inv5 rs_s2 (refl_equal Near) (refl_equal Sc3)) (lema_Inv3 rs_s2 (or_introl (Near = Inside) (refl_equal Near)))).",
                        "VernacExtend",
                        "92983c44a7cfd3666ee63051b8c0ab42d4e46b75"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial20 lt_z_kg1 (lema_Inv9 rs_s2 (or_intror (Inside = Near /\\ gt_Ck b0 kc1) (refl_equal Inside))) (lema_Inv3 rs_s2 (or_intror (Inside = Near) (refl_equal Inside))) (lema_InvInside rs_s2 (refl_equal Inside))).",
                        "VernacExtend",
                        "5947ad6523625d488d2af9e5d87d71612d2e531a"
                    ]
                },
                {
                    "command": [
                        "elim a0; intro rs_s2.",
                        "VernacExtend",
                        "0c4b3cfe31a464a29c5f4364759e9bcac1be89ac"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_sc4; inversion inv_sc4 using cl_Isc4; intro le_y0_kc2.",
                        "VernacExtend",
                        "59da38e18edaa99665ad579d6b3d08e0d6902fbb"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Far, b0, (Sc1, b, (Raising, Reset)))).",
                        "VernacExtend",
                        "6ed44e0814242454fea37b097ccca2658e14ac59"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (y z : Clock) (lt_y_kc2 : lt_Ck y kc2) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc4, y, (Closed, z)))) (tGl_Raise (tcRaise lt_y_kc2) (tgRaise z) st_x)) b z le_y0_kc2 (Far, b0)).",
                        "VernacExtend",
                        "25429cf062c5afdd73948ed104ce35d0e6e4719c"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, b0, (Sc1, b, (Raising, Reset))).",
                        "VernacExtend",
                        "d0ad5f0b9a7790c1030040d10d51860bdbfb419d"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; (apply Iraising; apply Trivial21).",
                        "VernacExtend",
                        "fb1beedbfa1cbde7419d766d77b3a1d396ebbf29"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv4 rs_s2 (refl_equal Near)); intro sc_near; rewrite sc_near in sc_closed; discriminate.",
                        "VernacExtend",
                        "df1f1affcd55464d9266f4b29bf26e2d72c1c23f"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial20 lt_z_kg1 (lema_Inv9 rs_s2 (or_intror (Inside = Near /\\ gt_Ck b0 kc1) (refl_equal Inside))) (lema_Inv3 rs_s2 (or_intror (Inside = Near) (refl_equal Inside))) (lema_InvInside rs_s2 (refl_equal Inside))).",
                        "VernacExtend",
                        "5947ad6523625d488d2af9e5d87d71612d2e531a"
                    ]
                },
                {
                    "command": [
                        "elim a0.",
                        "VernacExtend",
                        "4208e42cde901082d0825926fe0d02bc298ac8b2"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; generalize rs_s2; rewrite (lema_Inv2 rs_s2 (refl_equal Far) (or_introl (Open = Raising) (refl_equal Open))) ; intro rs_s2fin.",
                        "VernacExtend",
                        "17607caa9f0a1a211dbcf9967258288125f4fb33"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, b0, (Sc1, b, (Open, z))).",
                        "VernacExtend",
                        "be16f74c5be52018c21ba91aecc0b87c7dc595fc"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; generalize rs_s2; elim (lema_Inv4 rs_s2 (refl_equal Near)); intro sc_near; rewrite sc_near.",
                        "VernacExtend",
                        "3e92bca020e7e260a4421b4a1b314c7cda2bb4f6"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2'; generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2'); simpl in |- *; intro inv_sc2; inversion inv_sc2 using cl_Isc2; intro le_y0_kc1.",
                        "VernacExtend",
                        "46bb8dbae6cc3c51678c44882f5eaaff2c156162"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial22 le_y0_kc1); intro.",
                        "VernacExtend",
                        "3b0642ff1e4519be6b7ab8bc846a5a59ad6ec7dc"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, b0, (Sc2, b, (Open, z))).",
                        "VernacExtend",
                        "33abe84580eba9e7e164b2c93c646ed92c3389ad"
                    ]
                },
                {
                    "command": [
                        "split; [ apply Inear | split; [ apply Isc2 | auto with * ] ].",
                        "VernacExtend",
                        "d794c16b371907985079da88125fb059d937c24a"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial23 H1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
                        "VernacExtend",
                        "9f57bca608f370c832dacca4b8249525ab24a28a"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial24 H1).",
                        "VernacExtend",
                        "13175314e36740017e7ba59c3eabf2e70bee887b"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Near, b0, (Sc3, b, (Lowering, Reset)))).",
                        "VernacExtend",
                        "af29086ca14fb17eed3081c3b14be4ea6fad31c7"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) b z H1 (Near, b0)).",
                        "VernacExtend",
                        "858d8c38ded6f09ed1b9d8718fe458849e41fdab"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, b0, (Sc3, b, (Lowering, Reset))).",
                        "VernacExtend",
                        "805935bd3224a3d6c5c365ad4a6721aa2ed2052a"
                    ]
                },
                {
                    "command": [
                        "split; [ apply Inear | split; [ auto with * | apply Ilowering ] ].",
                        "VernacExtend",
                        "3b52cdb7ecec578c93743063988cbf85b776e211"
                    ]
                },
                {
                    "command": [
                        "apply (Trivial25 H1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
                        "VernacExtend",
                        "3f0d5fcd55ed4b71129d34d0db3f813917ba5b5a"
                    ]
                },
                {
                    "command": [
                        "apply Trivial26.",
                        "VernacExtend",
                        "ce21b82048371714ef5201d4dd2afbb86e54e2d7"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2fin; elim (lema_Inv1 rs_s2fin (or_introl (Near = Inside) (refl_equal Near)) (refl_equal Sc3)); intro; discriminate.",
                        "VernacExtend",
                        "f434b103853b8c6553899447f0f44b6b5664ed5b"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; Generalize_Easy (lema_safeTCG rs_s2 (refl_equal Inside)).",
                        "VernacExtend",
                        "59d0ee88623de9b5d2fc09db38cdebd18558f530"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv10 H0 (or_intror (Sc2 = Sc1) (refl_equal Sc2))); intros H1; rewrite H1; intro rs_s2.",
                        "VernacExtend",
                        "9fffce66b571ea5885b1859af3e7054674788b03"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Open, b))).",
                        "VernacExtend",
                        "00a44f01251f194431f0ad1d26bd5f43f975ae7f"
                    ]
                },
                {
                    "command": [
                        "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | auto with * ] ].",
                        "VernacExtend",
                        "93af07c692dc3af04c369d0f46e7eef680c33584"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_y1_kg3.",
                        "VernacExtend",
                        "3d6dce6f7f8198cfcbef9ff25d4df6393f89313c"
                    ]
                },
                {
                    "command": [
                        "elim (Trivial29 lt_y1_kg3); intro.",
                        "VernacExtend",
                        "b26b319202813a0418246d49076d91bb14e011c8"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Raising, b))).",
                        "VernacExtend",
                        "877ed4c44f099b56bb339667f85aba580027b6fb"
                    ]
                },
                {
                    "command": [
                        "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | apply Iraising; apply (Trivial30 H2) ] ].",
                        "VernacExtend",
                        "575b0537155132d6216a5f98721acc38c9ae6d94"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Near, Reset, (Sc2, Reset, (Open, b)))).",
                        "VernacExtend",
                        "fec015a9e0e23b6099611cb7ac845f5414fa62a5"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros H3 H4.",
                        "VernacExtend",
                        "f455df15d0158e37f7e401fe8612a4a04746f291"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) b H3 H4 (Near, Reset) (Sc2, Reset)).",
                        "VernacExtend",
                        "aabeb1df07a76f655e85e85be3c661beb0ce423a"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Near, Reset, (Sc2, Reset, (Open, b))).",
                        "VernacExtend",
                        "00a44f01251f194431f0ad1d26bd5f43f975ae7f"
                    ]
                },
                {
                    "command": [
                        "split; [ apply Inear; apply Trivial27 | split; [ apply Isc2; apply Trivial28 | auto with * ] ].",
                        "VernacExtend",
                        "93af07c692dc3af04c369d0f46e7eef680c33584"
                    ]
                },
                {
                    "command": [
                        "elim a; intro rs_s2.",
                        "VernacExtend",
                        "ae6bdfa8d1e27d354b270c22d6449b5694e21c78"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, x, (Sc4, Reset, (Open, b))).",
                        "VernacExtend",
                        "d10a68c6ff5c1799af6053a39d6f0cf8d36129e9"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "apply Isc4; apply Trivial18.",
                        "VernacExtend",
                        "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_lowering; inversion inv_lowering using cl_Ilowering; intro lt_y1_kg1.",
                        "VernacExtend",
                        "7613b19968af9863c6f32c34d968df1287a185ec"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Far, x, (Sc4, Reset, (Closed, b)))).",
                        "VernacExtend",
                        "5974e6584c208224e5a7d55937748479d5d90ad8"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (z : Clock) (lt_z_kg1 : lt_Ck z kg1) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Lowering, z)))) (tGl_Down (tgDown lt_z_kg1) st_x sc_y)) b lt_y1_kg1 (Far, x) (Sc4, Reset)).",
                        "VernacExtend",
                        "7204c3aeb0f87bd6469962911e5b55d0b106b3fb"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
                        "VernacExtend",
                        "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "apply Isc4; apply Trivial18.",
                        "VernacExtend",
                        "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, x, (Sc4, Reset, (Closed, b))).",
                        "VernacExtend",
                        "0a08b10fa7234c5f819047a5a3ecf5bc0c70b9d6"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "apply Isc4; apply Trivial18.",
                        "VernacExtend",
                        "87935fcb6b35f1a2bf894bfbe85dd8c00e8733b5"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (lema_Inv2 rs_s2 (refl_equal Far) (or_intror (Raising = Open) (refl_equal Raising))).",
                        "VernacExtend",
                        "4b2bf5a1f0d85788afa5660e96b82f501b6fa81c"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; ExistsHere_ITick (a, b, (Sc3, y, (Lowering, Reset))).",
                        "VernacExtend",
                        "e558ce60956cfec19d65bf72766e49b45b0d319f"
                    ]
                },
                {
                    "command": [
                        "split; [ generalize rs_s2; elim a; intro rs_s2' | split; [ auto with * | apply Ilowering; apply Trivial26 ] ].",
                        "VernacExtend",
                        "778e2b2aeccd153a8bd38b9e4843628a2e25bc66"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "apply Inear; apply (Trivial25 eq_y_kc1 (lema_Inv3 rs_s2' (or_introl (Near = Inside) (refl_equal Near)))).",
                        "VernacExtend",
                        "617f329c2165e30faa4d0c4374314ccbb178bcaf"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (lema_safeTCG rs_s2' (refl_equal Inside)).",
                        "VernacExtend",
                        "e321fffa655d2fc80104139bff7be4f6f0a85b55"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; ExistsHere_ITick (a, b, (Sc1, y, (Raising, Reset))).",
                        "VernacExtend",
                        "0ffacb4516454c36845fa4706d0cb7f6cd06a126"
                    ]
                },
                {
                    "command": [
                        "split; [ generalize rs_s2; elim a; intro rs_s2' | split; [ auto with * | apply Iraising; apply Trivial21 ] ].",
                        "VernacExtend",
                        "74667d2c2b91cb53bfb27e0b9f6e66baebfdffc2"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "Simpl_or (lema_Inv4 rs_s2' (refl_equal Near)).",
                        "VernacExtend",
                        "1200f30aa9ae3ee2527c638e980f1c5ca043fdd7"
                    ]
                },
                {
                    "command": [
                        "Generalize_Easy (lema_safeTCG rs_s2' (refl_equal Inside)).",
                        "VernacExtend",
                        "e321fffa655d2fc80104139bff7be4f6f0a85b55"
                    ]
                },
                {
                    "command": [
                        "intro; elim (classic (InvTick (s4, Inc x, (s3, Inc y, (s0, Inc z))))); intro inv_tick.",
                        "VernacExtend",
                        "3343a79d046232f88eb20165bc956e864e754bb2"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (s0, Inc z))); auto with *.",
                        "VernacExtend",
                        "1528a198a89016b855020b1b8737fb121cc243cf"
                    ]
                },
                {
                    "command": [
                        "generalize H3; elim (NoInvTick (s4, Inc x, (s3, Inc y, (s0, Inc z))) inv_tick H3).",
                        "VernacExtend",
                        "cbcd35ddf918befadb3243520752dc938d78d7f0"
                    ]
                },
                {
                    "command": [
                        "intro no_st; decompose [and or] no_st; [ rewrite H6 | rewrite H5 ].",
                        "VernacExtend",
                        "2067b62f4ea57d344dbeec99ef702d905d5033ef"
                    ]
                },
                {
                    "command": [
                        "intro rs_near; generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG rs_near); simpl in |- *; intro inv_near; inversion inv_near using cl_Inear; intro lt_incx_kt2.",
                        "VernacExtend",
                        "d59e5a85710089cab500b48f653d0675ebb63f7f"
                    ]
                },
                {
                    "command": [
                        "generalize ((fun (x : Clock) (gt_x_kt1 : gt_Ck x kt1) (lt_x_kt2 : lt_Ck x kt2) (sc_y : S_Ck SC) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Near, x, (sc_y, sg_z))) (tGl_In (ttIn (x:=x) gt_x_kt1 lt_x_kt2) sc_y sg_z)) (Inc x) H7 lt_incx_kt2 (s3, Inc y) (s0, Inc z)); intro rs_inside.",
                        "VernacExtend",
                        "378200ea36907176c3de344ba1526176d9316fcb"
                    ]
                },
                {
                    "command": [
                        "generalize rs_near; generalize rs_inside; rewrite (lema_Inv6 (RState_Trans rs_near rs_inside) (or_intror (Inside = Near /\\ gt_Ck (Inc x) kc1) (refl_equal Inside))) .",
                        "VernacExtend",
                        "5b2be5d1ec79ad93c041c3df32ff1f446b67150c"
                    ]
                },
                {
                    "command": [
                        "rewrite (lema_safeTCG (RState_Trans rs_near rs_inside) (refl_equal Inside)).",
                        "VernacExtend",
                        "e35454114bc8c0e80abf887d380a7aed2c052efb"
                    ]
                },
                {
                    "command": [
                        "intros; apply StepsEX with (s2 := (Far, Inc x, (Sc4, Reset, (Closed, Inc z)))).",
                        "VernacExtend",
                        "378fb03ecf78a9b886a801f31be5a45d22ed7a16"
                    ]
                },
                {
                    "command": [
                        "apply (RState_Trans rs_inside0 ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) (Inc x) (Inc y) lt_incx_kt2 (Closed, Inc z))).",
                        "VernacExtend",
                        "87d2b175a81bfe5236ead194badd2b4709224545"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, Inc x, (Sc4, Reset, (Closed, Inc z))).",
                        "VernacExtend",
                        "6e7e892ff423fb914cf464edeea30b104c68b319"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; apply Isc4; apply Trivial18.",
                        "VernacExtend",
                        "70c2005196fd664b7301f868c920dde5807dd852"
                    ]
                },
                {
                    "command": [
                        "intro rs_inside; generalize rs_inside; rewrite (lema_safeTCG rs_inside (refl_equal Inside)); intro rs_inside0.",
                        "VernacExtend",
                        "b4c38cd1fc13fe5a61103e1311f47ff0f8f61913"
                    ]
                },
                {
                    "command": [
                        "generalize rs_inside0; rewrite (lema_Inv6 rs_inside0 (or_intror (Inside = Near /\\ gt_Ck (Inc x) kc1) (refl_equal Inside))) ; intro rs_inside1.",
                        "VernacExtend",
                        "6c10cdd3f88820ea52b4580399580d008bf0c347"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (Far, Inc x, (Sc4, Reset, (Closed, Inc z)))).",
                        "VernacExtend",
                        "aa66de0acf28f785e37998159d64d431920b000f"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_T_general (s1:=SiniTCG) Inv_SiniTCG rs_inside0); simpl in |- *; intro inv_inside; inversion inv_inside using cl_Iinside; intro lt_incx_kt2.",
                        "VernacExtend",
                        "7ec63c24a3a510132e4c9090651584f21721bf18"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (x y : Clock) (lt_x_kt2 : lt_Ck x kt2) (sg_z : S_Ck SG) => rsNext (rsIni TrGlobal (Inside, x, (Sc3, y, sg_z))) (tGl_Exit (ttExit lt_x_kt2) (tcExit y) sg_z)) (Inc x) (Inc y) lt_incx_kt2 (Closed, Inc z)).",
                        "VernacExtend",
                        "d21ae5de990721404f4a50dac2f8a591f8d5a8d8"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (Far, Inc x, (Sc4, Reset, (Closed, Inc z))).",
                        "VernacExtend",
                        "6e7e892ff423fb914cf464edeea30b104c68b319"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; apply Isc4; apply Trivial18.",
                        "VernacExtend",
                        "70c2005196fd664b7301f868c920dde5807dd852"
                    ]
                },
                {
                    "command": [
                        "intro no_sc_sg; elim no_sc_sg; [ intro st_no_sc; decompose [and or] st_no_sc | intro no_sg ].",
                        "VernacExtend",
                        "dfd5c196939bf4319bdbff3400b45ffcca326113"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; rewrite H6 in rs_s1.",
                        "VernacExtend",
                        "6ffac33ee5a059ac48de31c93ae829aeff082104"
                    ]
                },
                {
                    "command": [
                        "elim (lema_Inv10 rs_s1 (or_intror (Sc2 = Sc1) (refl_equal Sc2))); intro sg'; rewrite sg'.",
                        "VernacExtend",
                        "3187814105650a8f4752c2c76307e7cae2971169"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (Sc3, Inc y, (Lowering, Reset)))).",
                        "VernacExtend",
                        "5adf9822e179af1affe2925664c1657db2b6ee46"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) (Inc y) (Inc z) H8 (s4, Inc x)).",
                        "VernacExtend",
                        "3492cf8d4673bf6a3500b8f2992e85e09c068fc8"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (Sc3, Inc y, (Lowering, Reset))).",
                        "VernacExtend",
                        "0354593f5bb991d927277e666cb4f322027b5329"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; apply Ilowering; apply Trivial26.",
                        "VernacExtend",
                        "63f4bcbc379e8d869e3b43e0c669d9284bdae7bb"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (Sc2, Inc y, (Open, Inc z)))).",
                        "VernacExtend",
                        "207a2e6864a0c5df0a4fb104fd327dfba0a2622b"
                    ]
                },
                {
                    "command": [
                        "generalize (lema_Inv12 rs_s2 (refl_equal Sc2)); intro ge_incz_incy.",
                        "VernacExtend",
                        "ec8c674b6e5f5be41ce65e663696afe2048126e0"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_incz_kg3.",
                        "VernacExtend",
                        "2f59c8e5c6c00380ef4584a29b20f0e051d0566f"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) (Inc z) (Trivial31 H8 ge_incz_incy) lt_incz_kg3 (s4, Inc x) (Sc2, Inc y)).",
                        "VernacExtend",
                        "250f672c0001711dfb54fb24c4cff9956b44dea0"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (s4, Inc x, (Sc3, Inc y, (Lowering, Reset)))).",
                        "VernacExtend",
                        "07d443dea8df35e1e1ab159dcf75e72d3c038cd2"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (y z : Clock) (eq_y_kc1 : eq_Ck y kc1) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc2, y, (Open, z)))) (tGl_Lower (tcLower eq_y_kc1) (tgLower z) st_x)) (Inc y) (Inc z) H8 (s4, Inc x)).",
                        "VernacExtend",
                        "3492cf8d4673bf6a3500b8f2992e85e09c068fc8"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (Sc3, Inc y, (Lowering, Reset))).",
                        "VernacExtend",
                        "0354593f5bb991d927277e666cb4f322027b5329"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; apply Ilowering; apply Trivial26.",
                        "VernacExtend",
                        "63f4bcbc379e8d869e3b43e0c669d9284bdae7bb"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; intro rs_s2; generalize rs_s2; generalize (lema_Inv14 rs_s2 (refl_equal Sc4)); intro far_closed; elim far_closed; intros far closed; rewrite closed.",
                        "VernacExtend",
                        "7d6ecf3fbec54a760e1e3e55d62b09c558422242"
                    ]
                },
                {
                    "command": [
                        "intro rs_s2'; apply StepsEX with (s2 := (s4, Inc x, (Sc1, Inc y, (Raising, Reset)))).",
                        "VernacExtend",
                        "3b7498c06e3b57f1e45e8a332df0811a9e1cb9cb"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_C_general (s1:=SiniTCG) Inv_SiniTCG rs_s2'); simpl in |- *; intro inv_sc4; inversion inv_sc4 using cl_Isc4; intro le_incy_kc2.",
                        "VernacExtend",
                        "13bc6efe984b59612edafdb727554fd6f28c6dae"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (y z : Clock) (lt_y_kc2 : lt_Ck y kc2) (st_x : S_Ck ST) => rsNext (rsIni TrGlobal (st_x, (Sc4, y, (Closed, z)))) (tGl_Raise (tcRaise lt_y_kc2) (tgRaise z) st_x)) (Inc y) (Inc z) le_incy_kc2 (s4, Inc x)).",
                        "VernacExtend",
                        "d8613964e0b8c10e47a76c8c3ef9cb946f2a4289"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (Sc1, Inc y, (Raising, Reset))).",
                        "VernacExtend",
                        "be957e53fdd0e47af2386d61dc2130af970534ad"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial; apply Iraising; apply Trivial21.",
                        "VernacExtend",
                        "d5f1900f14b87cbecebc33d46a9c0d27584cb2c6"
                    ]
                },
                {
                    "command": [
                        "decompose [and or] no_sg.",
                        "VernacExtend",
                        "fa2b3710978a44491eb9d397b934005745a36ec7"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; intro rs_s2; generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_lowering; inversion inv_lowering using cl_Ilowering; intro lt_incz_kg1.",
                        "VernacExtend",
                        "89210e89894158d08213151f46d2c36e74765c83"
                    ]
                },
                {
                    "command": [
                        "apply StepsEX with (s2 := (s4, Inc x, (s3, Inc y, (Closed, Inc z)))).",
                        "VernacExtend",
                        "f24596fc833e4fbeaec13357ef5e05bf86ec480d"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (z : Clock) (lt_z_kg1 : lt_Ck z kg1) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Lowering, z)))) (tGl_Down (tgDown lt_z_kg1) st_x sc_y)) (Inc z) lt_incz_kg1 (s4, Inc x) (s3, Inc y)).",
                        "VernacExtend",
                        "af9a5b33a566580510721de548b128a6a3c04e78"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (Closed, Inc z))).",
                        "VernacExtend",
                        "1a5e54b2d9c6a0add1cb1e7c778b1505ed7daa3b"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "rewrite H8; intro rs_s2; apply StepsEX with (s2 := (s4, Inc x, (s3, Inc y, (Open, Inc z)))).",
                        "VernacExtend",
                        "d6bdea1ed0baa54717799a6274b86756b8ec00ae"
                    ]
                },
                {
                    "command": [
                        "generalize (INV_G_general (s1:=SiniTCG) Inv_SiniTCG rs_s2); simpl in |- *; intro inv_raising; inversion inv_raising using cl_Iraising; intro lt_incz_kg3.",
                        "VernacExtend",
                        "2f59c8e5c6c00380ef4584a29b20f0e051d0566f"
                    ]
                },
                {
                    "command": [
                        "apply ((fun (z : Clock) (ge_z_kg2 : ge_Ck z kg2) (lt_z_kg3 : lt_Ck z kg3) (st_x : S_Ck ST) (sc_y : S_Ck SC) => rsNext (rsIni TrGlobal (st_x, (sc_y, (Raising, z)))) (tGl_Up (tgUp ge_z_kg2 lt_z_kg3) st_x sc_y)) (Inc z) H9 lt_incz_kg3 (s4, Inc x) (s3, Inc y)).",
                        "VernacExtend",
                        "9072a21824f908a76f784026bf7e9470d9335411"
                    ]
                },
                {
                    "command": [
                        "ExistsHere_ITick (s4, Inc x, (s3, Inc y, (Open, Inc z))).",
                        "VernacExtend",
                        "ccae8e45891ac0209bd573fee0ffb46f965d06b0"
                    ]
                },
                {
                    "command": [
                        "Split3_Trivial.",
                        "VernacExtend",
                        "e4871a922f95de221cec136906c34fffb662dbb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}