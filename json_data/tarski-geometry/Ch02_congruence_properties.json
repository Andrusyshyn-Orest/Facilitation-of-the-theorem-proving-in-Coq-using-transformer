{
    "filename": "Ch02_congruence_properties.v",
    "coq_project": "tarski-geometry",
    "vernac_cmds": [
        [
            "Require Export Ch01_tarski_axioms.",
            "VernacRequire",
            "b650dc432631f2ef3441ec78ecb61d7a11559137"
        ],
        [
            "Lemma cong_reflexivity : forall A B : Point, Cong A B A B.",
            "VernacStartTheoremProof",
            "7283d9916e131de563338a9ac242b0a474a22eb6"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cong_reflexivity : Tarski.",
            "VernacHints",
            "623c1915cd51e34b12107de78aac2ef1d5273067"
        ],
        [
            "Lemma cong_symmetry : forall A B C D : Point, Cong A B C D -> Cong C D A B.",
            "VernacStartTheoremProof",
            "93612c671e095822f9bc1cf066069721baa977bf"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate cong_symmetry : sTarski.",
            "VernacHints",
            "9017a22b837fd75b1202c44403559d9f559b383c"
        ],
        [
            "Ltac sTarski := auto with Tarski sTarski.",
            "VernacExtend",
            "f0251e859f390673c88c1dcff862144b1410d1b7"
        ],
        [
            "Ltac esTarski := eauto with Tarski sTarski.",
            "VernacExtend",
            "170855d704ea636b4b7c841f280897879b0e751d"
        ],
        [
            "Lemma cong_transitivity : forall A B C D E F : Point, Cong A B C D -> Cong C D E F -> Cong A B E F.",
            "VernacStartTheoremProof",
            "ad93e45f9dc232d84f5ed97df4ecb02667cf36c3"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cong_left_commutativity : forall A B C D, Cong A B C D -> Cong B A C D.",
            "VernacStartTheoremProof",
            "fe16b1e0a444f8c724de474526b3000c68af9cea"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cong_right_commutativity : forall A B C D, Cong A B C D -> Cong A B D C.",
            "VernacStartTheoremProof",
            "d8278d91b2a5f8c80833bc8d51b825cc34ca3752"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cong_left_commutativity cong_right_commutativity : sTarski.",
            "VernacHints",
            "d0d7060078037e7b50348442c71738716b47d7a5"
        ],
        [
            "Lemma cong_trivial_identity : forall A B : Point, Cong A A B B.",
            "VernacStartTheoremProof",
            "c9769acff4a8094b481fac96113da46544552af1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists E : Point, Bet A B E /\\ Cong B E A A).",
            "VernacExtend",
            "551b2ac0eb4dc8adb82a6f43d96ddf82db331c2f"
        ],
        [
            "apply segment_construction with (B := B) (C := A) (D := A).",
            "VernacExtend",
            "5f2210f09e52880a4714ef05b03a32654ac30164"
        ],
        [
            "DecompExAnd H x.",
            "VernacExtend",
            "2b8304d8354345e5d4062f9be250776297083f18"
        ],
        [
            "apply cong_symmetry.",
            "VernacExtend",
            "fd7deccdff88159fd858cdfb08d0ec6336440378"
        ],
        [
            "assert (B = x).",
            "VernacExtend",
            "4af5068608ca73bb0cbe65f47adb374705c5750e"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "rewrite <- H in H2.",
            "VernacExtend",
            "7212e9b57dc63346d8b6d968606dbda76a88421d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cong_trivial_identity : Tarski.",
            "VernacHints",
            "b22a0b0c73d47d1f3f5657ebf594c0dd57d31a4f"
        ],
        [
            "Lemma cong_reverse_identity : forall A C D, Cong A A C D -> C=D.",
            "VernacStartTheoremProof",
            "b75668af5515f4f9967592b062accfed253c7e5a"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Cong C D A A)...",
            "VernacExtend",
            "8143d6b11781aafe0f262f25c8b41145f183ced9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cong_reverse_identity : Tarski.",
            "VernacHints",
            "91f8ba043cc7304d54f94432766e3c6cbd34611a"
        ],
        [
            "Lemma cong_commutativity : forall A B C D, Cong A B C D -> Cong B A D C.",
            "VernacStartTheoremProof",
            "6af273902d51a47584349a0c69c0f46154490011"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros...",
            "VernacExtend",
            "1056e51c2defbfe94d2032f9d7008334ba957959"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cong_commutativity : sTarski.",
            "VernacHints",
            "b3f116ce79f4a434d3eca7443cf484274271ba33"
        ],
        [
            "Definition OFSC := fun A B C D A' B' C' D' => Bet A B C /\\ Bet A' B' C' /\\ Cong A B A' B' /\\ Cong B C B' C' /\\ Cong A D A' D' /\\ Cong B D B' D'.",
            "VernacDefinition",
            "ec5eb29762bd2009b533d5293925102e5be0e5d2"
        ],
        [
            "Hint Unfold OFSC : Tarski.",
            "VernacHints",
            "95161971c8b4952db38a45b8c064c49dd132137c"
        ],
        [
            "Lemma five_segments_with_def : forall A B C D A' B' C' D', OFSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.",
            "VernacStartTheoremProof",
            "331c46446c4480e96f53bb62f55530e4df878ab4"
        ],
        [
            "unfold OFSC.",
            "VernacExtend",
            "492752124a3e0e575422433695b3cbf9807f06bc"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "eapply five_segments;try apply H2;Tarski.",
            "VernacExtend",
            "36b5c7f6012221152cc951d11669a8afd1c184ae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve five_segments_with_def : Tarski.",
            "VernacHints",
            "6ec513cb4864025faea6dc036df2a15db3ffd1e9"
        ],
        [
            "Lemma l2_11 : forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.",
            "VernacStartTheoremProof",
            "8bd19ce7ff6129c0e3e773e69c7fa7bb795055cd"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cases_equality A B.",
            "VernacExtend",
            "922c1da3ede1bb19316db5c6ed21721479b29b66"
        ],
        [
            "assert (A' = B').",
            "VernacExtend",
            "48f9ffaeda6f9b12aa805548f7841ab31e05315c"
        ],
        [
            "assert (Cong A' B' A B).",
            "VernacExtend",
            "da9a7a75e40dea8333433b6294fa00d2c9db43cf"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "eapply cong_identity.",
            "VernacExtend",
            "7fe683d1133ca408f417cc952748161dc8b161bc"
        ],
        [
            "rewrite H3 in H4.",
            "VernacExtend",
            "12a9614d5252b4ef580e68cb5d644e106955ef68"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite <- H3 in H2.",
            "VernacExtend",
            "93e6f7fe56ade556994cf69f2f06ef3250ec78ae"
        ],
        [
            "rewrite <- H4 in H2.",
            "VernacExtend",
            "5aa0c466b8ce31afc169acfda54419bdaec6fb90"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (Cong C A C' A').",
            "VernacExtend",
            "308abb79b4bbbb82302a335b49c2ebf5615c79d7"
        ],
        [
            "eapply five_segments; try apply H1...",
            "VernacExtend",
            "7bab88f47a41476442ab398e00f767f09e14aa29"
        ],
        [
            "eTarski.",
            "VernacExtend",
            "c3041215ba3ca821cd5339923ec62b0cbea58589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma construction_unicity : forall Q A B C x y, ~(Q=A) -> Bet Q A x -> Cong A x B C -> Bet Q A y -> Cong A y B C -> x=y.",
            "VernacStartTheoremProof",
            "0cd3db9dee1e9b163ce2fdf2620030e2aec960a2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Cong Q x Q y).",
            "VernacExtend",
            "d6cae1b43b251fe7883d9c06c6297c3134769a15"
        ],
        [
            "eapply l2_11;eTarski.",
            "VernacExtend",
            "3801d84e59081303a37881e70f0faceda6047f57"
        ],
        [
            "assert (Cong A x A y).",
            "VernacExtend",
            "a53ce619b86d231f5d72d30d6e1f21a0a4752ce7"
        ],
        [
            "eapply cong_transitivity;eauto.",
            "VernacExtend",
            "75f588a8f9ff3c0c32a19ecd7e8ee0e338421fb2"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "assert (OFSC Q A x x Q A x y).",
            "VernacExtend",
            "7e930b0cf2d1b332486004798dac246e830a8759"
        ],
        [
            "unfold OFSC.",
            "VernacExtend",
            "492752124a3e0e575422433695b3cbf9807f06bc"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Cong x x x y).",
            "VernacExtend",
            "d59b568060f9dbb14f8494ec87969b0adcaa8105"
        ],
        [
            "eapply five_segments_with_def;eTarski.",
            "VernacExtend",
            "e26955d7bd30840da4d29943b37acf2ed4bed80a"
        ],
        [
            "esTarski.",
            "VernacExtend",
            "8d590d7c94ab42b108ae5f37debd778082982ccd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "cong_reflexivity",
            "line_nb": 1,
            "steps": [
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong_symmetry",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong_transitivity",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong_left_commutativity",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong_right_commutativity",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cong_trivial_identity",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (exists E : Point, Bet A B E /\\ Cong B E A A).",
                        "VernacExtend",
                        "551b2ac0eb4dc8adb82a6f43d96ddf82db331c2f"
                    ]
                },
                {
                    "command": [
                        "apply segment_construction with (B := B) (C := A) (D := A).",
                        "VernacExtend",
                        "5f2210f09e52880a4714ef05b03a32654ac30164"
                    ]
                },
                {
                    "command": [
                        "DecompExAnd H x.",
                        "VernacExtend",
                        "2b8304d8354345e5d4062f9be250776297083f18"
                    ]
                },
                {
                    "command": [
                        "apply cong_symmetry.",
                        "VernacExtend",
                        "fd7deccdff88159fd858cdfb08d0ec6336440378"
                    ]
                },
                {
                    "command": [
                        "assert (B = x).",
                        "VernacExtend",
                        "4af5068608ca73bb0cbe65f47adb374705c5750e"
                    ]
                },
                {
                    "command": [
                        "eTarski.",
                        "VernacExtend",
                        "c3041215ba3ca821cd5339923ec62b0cbea58589"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H in H2.",
                        "VernacExtend",
                        "7212e9b57dc63346d8b6d968606dbda76a88421d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "five_segments_with_def",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "unfold OFSC.",
                        "VernacExtend",
                        "492752124a3e0e575422433695b3cbf9807f06bc"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "eapply five_segments;try apply H2;Tarski.",
                        "VernacExtend",
                        "36b5c7f6012221152cc951d11669a8afd1c184ae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "construction_unicity",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (Cong Q x Q y).",
                        "VernacExtend",
                        "d6cae1b43b251fe7883d9c06c6297c3134769a15"
                    ]
                },
                {
                    "command": [
                        "eapply l2_11;eTarski.",
                        "VernacExtend",
                        "3801d84e59081303a37881e70f0faceda6047f57"
                    ]
                },
                {
                    "command": [
                        "assert (Cong A x A y).",
                        "VernacExtend",
                        "a53ce619b86d231f5d72d30d6e1f21a0a4752ce7"
                    ]
                },
                {
                    "command": [
                        "eapply cong_transitivity;eauto.",
                        "VernacExtend",
                        "75f588a8f9ff3c0c32a19ecd7e8ee0e338421fb2"
                    ]
                },
                {
                    "command": [
                        "sTarski.",
                        "VernacExtend",
                        "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
                    ]
                },
                {
                    "command": [
                        "assert (OFSC Q A x x Q A x y).",
                        "VernacExtend",
                        "7e930b0cf2d1b332486004798dac246e830a8759"
                    ]
                },
                {
                    "command": [
                        "unfold OFSC.",
                        "VernacExtend",
                        "492752124a3e0e575422433695b3cbf9807f06bc"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Cong x x x y).",
                        "VernacExtend",
                        "d59b568060f9dbb14f8494ec87969b0adcaa8105"
                    ]
                },
                {
                    "command": [
                        "eapply five_segments_with_def;eTarski.",
                        "VernacExtend",
                        "e26955d7bd30840da4d29943b37acf2ed4bed80a"
                    ]
                },
                {
                    "command": [
                        "esTarski.",
                        "VernacExtend",
                        "8d590d7c94ab42b108ae5f37debd778082982ccd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}