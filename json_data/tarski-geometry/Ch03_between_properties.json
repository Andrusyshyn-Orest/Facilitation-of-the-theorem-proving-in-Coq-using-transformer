{
    "filename": "Ch03_between_properties.v",
    "coq_project": "tarski-geometry",
    "vernac_cmds": [
        [
            "Require Export Ch02_congruence_properties.",
            "VernacRequire",
            "2daedddeaac36480f48064829fff9739aab5ecd8"
        ],
        [
            "Lemma beetween_trivial : forall A B : Point, Bet A B B.",
            "VernacStartTheoremProof",
            "70bf17b32a7fce5d93e8edfb445d64137208e763"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists x : Point, Bet A B x /\\ Cong B x B B)...",
            "VernacExtend",
            "a98d36a12125c1df45929389996532b80439bc68"
        ],
        [
            "DecompExAnd H x.",
            "VernacExtend",
            "2b8304d8354345e5d4062f9be250776297083f18"
        ],
        [
            "assert (B = x).",
            "VernacExtend",
            "4af5068608ca73bb0cbe65f47adb374705c5750e"
        ],
        [
            "assert (Cong B B B x)...",
            "VernacExtend",
            "b17b16496e51186c544bb6ad10cb3751dde306c2"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve beetween_trivial : Tarski.",
            "VernacHints",
            "8ffd507992db0fbccfe029aba9766a9b5c0de3c7"
        ],
        [
            "Lemma between_symmetry : forall A B C : Point, Bet A B C -> Bet C B A.",
            "VernacStartTheoremProof",
            "735d053e9eee424ad4ffd814224189bcc8721dfe"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Bet B C C)...",
            "VernacExtend",
            "39bf8d553f4dd2e56efbef9f03af22f86823cb30"
        ],
        [
            "assert (exists x, Bet B x B /\\ Bet C x A)...",
            "VernacExtend",
            "faae543987501461857f14c7301de7a872003328"
        ],
        [
            "DecompExAnd H1 x.",
            "VernacExtend",
            "05d1cd841f736c7e85a82a2117e45bda8dd80d36"
        ],
        [
            "assert (B=x)...",
            "VernacExtend",
            "da1576db1d5e3cf65623a13e78d51c29daace0d9"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve between_symmetry : sTarski.",
            "VernacHints",
            "6354b7b4cd96dea678ae3857d4b2921332425f04"
        ],
        [
            "Lemma beetween_trivial2 : forall A B : Point, Bet A A B.",
            "VernacStartTheoremProof",
            "d4f4da8a6e16456f462e7b0886febe736fb23a48"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve beetween_trivial beetween_trivial2 : Tarski.",
            "VernacHints",
            "0e24ddf5c317eefd32d088ae602192903469865b"
        ],
        [
            "Lemma between_egality : forall A B C : Point, Bet A B C -> Bet B A C -> A = B.",
            "VernacStartTheoremProof",
            "65b5c7b104d51686f4ad703bf4234fa7c4421161"
        ],
        [
            "Proof with Tarski.",
            "VernacProof",
            "587b0b20da03a4a3ef25c42e584a5d0e2671c134"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists x : Point, Bet B x B /\\ Bet A x A).",
            "VernacExtend",
            "e99c81c168f12343353c811c8486a964086bef12"
        ],
        [
            "eapply inner_pasch;eauto.",
            "VernacExtend",
            "9bfda28cc0b989dd272b07a4656224c3c194c41c"
        ],
        [
            "DecompExAnd H1 x.",
            "VernacExtend",
            "05d1cd841f736c7e85a82a2117e45bda8dd80d36"
        ],
        [
            "assert (A = x)...",
            "VernacExtend",
            "71b1952438a0a56e4bc900973dd045797591337d"
        ],
        [
            "assert (B = x)...",
            "VernacExtend",
            "da1576db1d5e3cf65623a13e78d51c29daace0d9"
        ],
        [
            "rewrite <- H2 in H1.",
            "VernacExtend",
            "8866c762e9c242679de3395f9ee2e4d71a759815"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve between_egality : Tarski.",
            "VernacHints",
            "47e7866c0409091d61ea6e3811413e5d4b2fa8b4"
        ],
        [
            "Lemma between_inner_transitivity : forall A B C D, Bet A B D -> Bet B C D -> Bet A B C.",
            "VernacStartTheoremProof",
            "2b812f58dd809414e968a4c523ec176ad1967522"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists x,Bet B x B /\\ Bet C x A)...",
            "VernacExtend",
            "faae543987501461857f14c7301de7a872003328"
        ],
        [
            "DecompExAnd H1 x.",
            "VernacExtend",
            "05d1cd841f736c7e85a82a2117e45bda8dd80d36"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "assert (B=x)...",
            "VernacExtend",
            "da1576db1d5e3cf65623a13e78d51c29daace0d9"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma between_exchange3 : forall A B C D, Bet A B C -> Bet A C D -> Bet B C D.",
            "VernacStartTheoremProof",
            "fcd3cd0f3c07401da57e6d291b8843e1d2190264"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "eapply between_inner_transitivity.",
            "VernacExtend",
            "19dcf315e262e5b6c891bb290c723670da024856"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve between_exchange3 : Tarski.",
            "VernacHints",
            "615bce9dc4b6f1bc5621e77b487d270816ef388e"
        ],
        [
            "Lemma outer_transitivity_between2 : forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.",
            "VernacStartTheoremProof",
            "8a2ee155fbff39c6459de994aa0c95cdf83cd7c1"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists x, Bet A C x /\\ Cong C x C D)...",
            "VernacExtend",
            "cab44475babee30d712287294ecf576db3f0c294"
        ],
        [
            "DecompExAnd H2 x.",
            "VernacExtend",
            "b9fe94427df47eafd1fd4230e626544316beef2e"
        ],
        [
            "assert (Bet B C x)...",
            "VernacExtend",
            "642818dca3e2507e5ce488a0770fbbd8b925b091"
        ],
        [
            "assert (x=D).",
            "VernacExtend",
            "68f1bade2ef59cf7213cc6d750bbbf1133943af8"
        ],
        [
            "eapply construction_unicity;try apply H1...",
            "VernacExtend",
            "5f07df2b967819d265b8b44ff5dff2896353b2b7"
        ],
        [
            "subst x...",
            "VernacExtend",
            "6b85322d9ad29a89bc45bb270d3a6e26cb84d06f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma between_exchange2 : forall A B C D, Bet A B D -> Bet B C D -> Bet A C D.",
            "VernacStartTheoremProof",
            "ef05ed993c4fdf95c1664847d5f7eab5088479cb"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cases_equality B C.",
            "VernacExtend",
            "4754af842025da598159812cfcb0c43af979a32f"
        ],
        [
            "subst B...",
            "VernacExtend",
            "4ca371edec40c3dcf9e31080d8a2d039de724202"
        ],
        [
            "eapply outer_transitivity_between2.",
            "VernacExtend",
            "c0cb5f967ed0b308bbfebb5eba00251d4d20cba5"
        ],
        [
            "3:apply H1.",
            "VernacExtend",
            "4176e02a32f72349882e582837adf7508e99b80a"
        ],
        [
            "eapply between_inner_transitivity...",
            "VernacExtend",
            "90bae7515ee8687f473809a83a18e9c8c8e8e27a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma outer_transitivity_between : forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A B D.",
            "VernacStartTheoremProof",
            "b41fc4b2b381457c570ae4371aa7d68c0ac99f94"
        ],
        [
            "Proof with eTarski.",
            "VernacProof",
            "024dc0c3996261e87c3ae550743e7d70cc8a41a1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply between_symmetry.",
            "VernacExtend",
            "50e6ab7f97a616f2beda9e3b4479a2a107012f20"
        ],
        [
            "eapply between_exchange2;apply between_symmetry.",
            "VernacExtend",
            "7fe0a45b82f18e0331b746316be8d39d286dfb76"
        ],
        [
            "2:apply H.",
            "VernacExtend",
            "d68ca3163bed92fea701ea0e7330cbb605c3b245"
        ],
        [
            "eapply outer_transitivity_between2...",
            "VernacExtend",
            "ef3ef564c44db38bf2893e7eb9660a292164e153"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma between_exchange4 : forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.",
            "VernacStartTheoremProof",
            "a7a1601e14f7474d1ed1b4436a007aaa1aa02fa6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply between_symmetry.",
            "VernacExtend",
            "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
        ],
        [
            "apply between_exchange2 with (B:=C);sTarski.",
            "VernacExtend",
            "d1d7a1e98a78315603260d043d185a90654355b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve between_inner_transitivity : Tarski.",
            "VernacHints",
            "726f91a2c0cf8575f7493b31d7fd4f08ba6d1219"
        ],
        [
            "Hint Resolve between_exchange2 between_exchange3 between_exchange4 : Tarski.",
            "VernacHints",
            "9c6c8e28763b82d0746923d2be92b7116303c77c"
        ],
        [
            "Hint Resolve outer_transitivity_between outer_transitivity_between2 : Tarski.",
            "VernacHints",
            "9e5e1aa263ca71fddaaef0a830977d0d565e3274"
        ],
        [
            "Hint Resolve between_inner_transitivity between_exchange2 between_exchange3 between_exchange4 outer_transitivity_between outer_transitivity_between2 between_symmetry : Between.",
            "VernacHints",
            "3981f74fb2d3f40762a7b970b13071a6b03762aa"
        ],
        [
            "Ltac Between := eauto with Between.",
            "VernacExtend",
            "5ce0a725a246d2532c59110aeafa596d22f8629b"
        ],
        [
            "Definition Bet_4 := fun A1 A2 A3 A4 => Bet A1 A2 A3 /\\ Bet A2 A3 A4 /\\ Bet A1 A3 A4 /\\ Bet A1 A2 A4.",
            "VernacDefinition",
            "dc5f5ef121dd5d7e032a240626b599ffed41ce72"
        ],
        [
            "Lemma l_3_9_4 : forall A1 A2 A3 A4, Bet_4 A1 A2 A3 A4 -> Bet_4 A4 A3 A2 A1.",
            "VernacStartTheoremProof",
            "692b59b9cf1a70d2007add7f179574878c65ed16"
        ],
        [
            "unfold Bet_4.",
            "VernacExtend",
            "970a91fd4b0be5efc100cb157b1f3cef9edd34da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma two_distinct_points : exists x, exists y: Point, x <> y.",
            "VernacStartTheoremProof",
            "efb084aca807e675cff4794b26472e9f9e625f78"
        ],
        [
            "assert (ld := lower_dim).",
            "VernacExtend",
            "e29b45c343731c9b5f77d5c50af8332e457e1987"
        ],
        [
            "DecompEx ld A.",
            "VernacExtend",
            "7245e35d9a85d44cb48c00065de16086b2d89e31"
        ],
        [
            "DecompEx H B.",
            "VernacExtend",
            "b1b0f9613c457957edcee2d389a886134c4f6024"
        ],
        [
            "DecompEx H0 C.",
            "VernacExtend",
            "e15d6b061e3f86d30d6341e2b9c70a63437962a6"
        ],
        [
            "unfold Col in H.",
            "VernacExtend",
            "4ff59ad823bef04ef5effb01a66f0264e5dd36d6"
        ],
        [
            "cases_equality A B.",
            "VernacExtend",
            "922c1da3ede1bb19316db5c6ed21721479b29b66"
        ],
        [
            "subst A.",
            "VernacExtend",
            "8ca33e3809564b25475e9c050ec4fa1d0d1f1088"
        ],
        [
            "exists B.",
            "VernacExtend",
            "6af01c0c0423549b6c4629183bbae5f87e428c57"
        ],
        [
            "exists C.",
            "VernacExtend",
            "a733d49a74d79f0434672f04b7a8f57fbef1fdd4"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "exists A.",
            "VernacExtend",
            "162619f50efefbe299e58fc25ef1f54fa5097d87"
        ],
        [
            "exists B.",
            "VernacExtend",
            "6af01c0c0423549b6c4629183bbae5f87e428c57"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve two_distinct_points : Tarski.",
            "VernacHints",
            "9f5b462aa04a8f013e0a6e4f021e8577ced21aa2"
        ],
        [
            "Lemma point_construction_different : forall A B, exists C, Bet A B C /\\ B <> C.",
            "VernacStartTheoremProof",
            "8be0a54d35f1628f0291fc5a21ada7e8c75e5714"
        ],
        [
            "Proof with Tarski.",
            "VernacProof",
            "587b0b20da03a4a3ef25c42e584a5d0e2671c134"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists x, exists y:Point, x <> y)...",
            "VernacExtend",
            "6e6311a4a75230a722710896d1bd65b4bd5399a4"
        ],
        [
            "DecompEx H U.",
            "VernacExtend",
            "99347e3de34fb41f05b2af29838d99e391712a3e"
        ],
        [
            "DecompEx H0 V.",
            "VernacExtend",
            "69f457fca907615eb2b8c4692753fdb79303e89c"
        ],
        [
            "assert (exists C, Bet A B C /\\ Cong B C U V)...",
            "VernacExtend",
            "510419a945fa9ac340275efd70c8529c7afdb230"
        ],
        [
            "DecompEx H0 C.",
            "VernacExtend",
            "e15d6b061e3f86d30d6341e2b9c70a63437962a6"
        ],
        [
            "exists C.",
            "VernacExtend",
            "a733d49a74d79f0434672f04b7a8f57fbef1fdd4"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "rewrite H1 in H2.",
            "VernacExtend",
            "3ddaddaf8f89728f77671f580e26162e25035230"
        ],
        [
            "assert (U=V).",
            "VernacExtend",
            "624b70884609ed948ac77dce3226c305391d5639"
        ],
        [
            "eapply cong_identity.",
            "VernacExtend",
            "7fe683d1133ca408f417cc952748161dc8b161bc"
        ],
        [
            "apply cong_symmetry.",
            "VernacExtend",
            "fd7deccdff88159fd858cdfb08d0ec6336440378"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve point_construction_different : Tarski.",
            "VernacHints",
            "17764ec2485fed5242bf8584aee3bb10aed0b06b"
        ],
        [
            "Lemma another_point : forall A:Point, exists B, A<>B.",
            "VernacStartTheoremProof",
            "682408bb73d1d0b8ad9cdfbd96ce9bd24b872d11"
        ],
        [
            "assert (T:=two_distinct_points ).",
            "VernacExtend",
            "3cf70e10d718e589e0f01e47586c9194783de848"
        ],
        [
            "DecompEx T X.",
            "VernacExtend",
            "547867c1871448f636532ab4307af8334a6d0da8"
        ],
        [
            "DecompEx H Y.",
            "VernacExtend",
            "722f8c745fbe081f5e6e3fbd142ad99cc5773f36"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cases_equality A X.",
            "VernacExtend",
            "f475ba612c09bcd8bd7d52deaac0e14d7986a083"
        ],
        [
            "subst X.",
            "VernacExtend",
            "09234d5bde8ac2779087d6856832ce09cd699803"
        ],
        [
            "exists Y;auto.",
            "VernacExtend",
            "7b9f5c2dc2a056aecf641a382e853795f744490f"
        ],
        [
            "exists X;auto.",
            "VernacExtend",
            "a2c995c559748140c59e773282165ae4f254e7c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma l3_17 : forall A B C A' B' P, Bet A B C -> Bet A' B' C -> Bet A P A' -> exists Q, Bet P Q C /\\ Bet B Q B'.",
            "VernacStartTheoremProof",
            "d80fe4e6018b6bcf8fddb9933294aff65c3cf719"
        ],
        [
            "Proof with Tarski.",
            "VernacProof",
            "587b0b20da03a4a3ef25c42e584a5d0e2671c134"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists Q', Bet B' Q' A /\\ Bet P Q' C).",
            "VernacExtend",
            "494667f8318942c834068f4a8ca074c222aa6a39"
        ],
        [
            "eapply inner_pasch.",
            "VernacExtend",
            "2491468edcc4b7a4623bbe793e22c87079925618"
        ],
        [
            "2:apply H1.",
            "VernacExtend",
            "d18188d8e2990d57fcbebf2544560d72952a1c9f"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "DecompExAnd H2 Q'.",
            "VernacExtend",
            "961b59975e23c16e5b379ab0a7941ba35187200c"
        ],
        [
            "assert (exists x : Point, Bet B x B' /\\ Bet Q' x C).",
            "VernacExtend",
            "6a15c7d422aa9fe22b59f09e3b0210cee0facc17"
        ],
        [
            "eapply (inner_pasch C B' A B Q');auto.",
            "VernacExtend",
            "03f9185aac28e3128ac453a15cc77db2d08c297a"
        ],
        [
            "sTarski.",
            "VernacExtend",
            "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
        ],
        [
            "DecompExAnd H2 Q.",
            "VernacExtend",
            "2e2c98f379d9d4aeb89cd1748cdee4b18568725e"
        ],
        [
            "exists Q.",
            "VernacExtend",
            "be122d6c316bb03b9a9fa5a041a6e80273798333"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear H H1 H0 H4 H6.",
            "VernacExtend",
            "9a9f02013dba54e28f6ce5deeda4183388867c64"
        ],
        [
            "clear A B A' B'.",
            "VernacExtend",
            "d06c473847044c5e74df68e4abce83cfa6657400"
        ],
        [
            "esTarski.",
            "VernacExtend",
            "8d590d7c94ab42b108ae5f37debd778082982ccd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition IFSC := fun A B C D A' B' C' D' => Bet A B C /\\ Bet A' B' C' /\\ Cong A C A' C' /\\ Cong B C B' C' /\\ Cong A D A' D' /\\ Cong C D C' D'.",
            "VernacDefinition",
            "75164444bac9ad9ef811b66874104a8c1e69eb17"
        ],
        [
            "Ltac assert_cols := repeat match goal with | H:Bet ?X1 ?X2 ?X3 |- _ => not_exist_hyp (Col X1 X2 X3);assert (Col X1 X2 X3);[Tarski|idtac] end.",
            "VernacExtend",
            "899106d18d0c21de0e973cb474f37c40d784ac2a"
        ],
        [
            "Ltac clean_trivial_hyps := repeat match goal with | H:(Cong ?X1 ?X1 ?X2 ?X2) |- _ => clear H | H:(Cong ?X1 ?X2 ?X2 ?X1) |- _ => clear H | H:(Cong ?X1 ?X2 ?X1 ?X2) |- _ => clear H | H:(Bet ?X1 ?X1 ?X2) |- _ => clear H | H:(Bet ?X2 ?X1 ?X1) |- _ => clear H | H:(Col ?X1 ?X1 ?X2) |- _ => clear H | H:(Col ?X2 ?X1 ?X1) |- _ => clear H | H:(Col ?X1 ?X2 ?X1) |- _ => clear H end.",
            "VernacExtend",
            "205ec8e94190c1e62f8a3e84ad0fe8e2c9bd5f81"
        ],
        [
            "Ltac smart_subst X := subst X;clean_trivial_hyps;clean_duplicated_hyps.",
            "VernacExtend",
            "165475d64a6e82663e78526c52bcdde0817f23e2"
        ],
        [
            "Ltac treat_equalities_aux := match goal with | H:(?X1 = ?X2) |- _ => smart_subst X2 end.",
            "VernacExtend",
            "7ae8a86e01e069b75d47b9df76e1db3c7b67ae78"
        ],
        [
            "Ltac treat_equalities := try treat_equalities_aux; repeat match goal with | H:(Cong ?X3 ?X3 ?X1 ?X2) |- _ => assert (X1=X2);[apply cong_identity with (A:=X1) (B:=X2) (C:=X3);apply cong_symmetry;assumption|idtac];smart_subst X2 | H:(Cong ?X1 ?X2 ?X3 ?X3) |- _ => assert (X1=X2);[apply cong_identity with (A:=X1) (B:=X2) (C:=X3);assumption|idtac];smart_subst X2 | H:(Bet ?X1 ?X2 ?X1) |- _ => assert (X1=X2);[apply between_identity;assumption|idtac];smart_subst X2 end.",
            "VernacExtend",
            "9a4ea9e36ded49fe5a58bee27c288fe4ee4c7f03"
        ]
    ],
    "proofs": [
        {
            "name": "beetween_trivial2",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "sTarski.",
                        "VernacExtend",
                        "ac4b020aa1d7d54c2de2c769ee503a6249d4ebe9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "between_exchange4",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply between_symmetry.",
                        "VernacExtend",
                        "b9b81f2c1df9f687bb01be8ad1ad3dd1164786c4"
                    ]
                },
                {
                    "command": [
                        "apply between_exchange2 with (B:=C);sTarski.",
                        "VernacExtend",
                        "d1d7a1e98a78315603260d043d185a90654355b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "l_3_9_4",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "unfold Bet_4.",
                        "VernacExtend",
                        "970a91fd4b0be5efc100cb157b1f3cef9edd34da"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "two_distinct_points",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "assert (ld := lower_dim).",
                        "VernacExtend",
                        "e29b45c343731c9b5f77d5c50af8332e457e1987"
                    ]
                },
                {
                    "command": [
                        "DecompEx ld A.",
                        "VernacExtend",
                        "7245e35d9a85d44cb48c00065de16086b2d89e31"
                    ]
                },
                {
                    "command": [
                        "DecompEx H B.",
                        "VernacExtend",
                        "b1b0f9613c457957edcee2d389a886134c4f6024"
                    ]
                },
                {
                    "command": [
                        "DecompEx H0 C.",
                        "VernacExtend",
                        "e15d6b061e3f86d30d6341e2b9c70a63437962a6"
                    ]
                },
                {
                    "command": [
                        "unfold Col in H.",
                        "VernacExtend",
                        "4ff59ad823bef04ef5effb01a66f0264e5dd36d6"
                    ]
                },
                {
                    "command": [
                        "cases_equality A B.",
                        "VernacExtend",
                        "922c1da3ede1bb19316db5c6ed21721479b29b66"
                    ]
                },
                {
                    "command": [
                        "subst A.",
                        "VernacExtend",
                        "8ca33e3809564b25475e9c050ec4fa1d0d1f1088"
                    ]
                },
                {
                    "command": [
                        "exists B.",
                        "VernacExtend",
                        "6af01c0c0423549b6c4629183bbae5f87e428c57"
                    ]
                },
                {
                    "command": [
                        "exists C.",
                        "VernacExtend",
                        "a733d49a74d79f0434672f04b7a8f57fbef1fdd4"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "exists A.",
                        "VernacExtend",
                        "162619f50efefbe299e58fc25ef1f54fa5097d87"
                    ]
                },
                {
                    "command": [
                        "exists B.",
                        "VernacExtend",
                        "6af01c0c0423549b6c4629183bbae5f87e428c57"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "another_point",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "assert (T:=two_distinct_points ).",
                        "VernacExtend",
                        "3cf70e10d718e589e0f01e47586c9194783de848"
                    ]
                },
                {
                    "command": [
                        "DecompEx T X.",
                        "VernacExtend",
                        "547867c1871448f636532ab4307af8334a6d0da8"
                    ]
                },
                {
                    "command": [
                        "DecompEx H Y.",
                        "VernacExtend",
                        "722f8c745fbe081f5e6e3fbd142ad99cc5773f36"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cases_equality A X.",
                        "VernacExtend",
                        "f475ba612c09bcd8bd7d52deaac0e14d7986a083"
                    ]
                },
                {
                    "command": [
                        "subst X.",
                        "VernacExtend",
                        "09234d5bde8ac2779087d6856832ce09cd699803"
                    ]
                },
                {
                    "command": [
                        "exists Y;auto.",
                        "VernacExtend",
                        "7b9f5c2dc2a056aecf641a382e853795f744490f"
                    ]
                },
                {
                    "command": [
                        "exists X;auto.",
                        "VernacExtend",
                        "a2c995c559748140c59e773282165ae4f254e7c4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}