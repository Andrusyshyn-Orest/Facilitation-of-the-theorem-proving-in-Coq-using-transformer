{
    "filename": "raft/CommonDefinitions.v",
    "coq_project": "verdi-raft",
    "vernac_cmds": [
        [
            "Require Import VerdiRaft.Raft.",
            "VernacRequire",
            "36b0b9afd1c52050ce42daf3c5fa4abb91993f25"
        ],
        [
            "Section CommonDefinitions.",
            "VernacBeginSection",
            "1d20aaddbd24f5986d66601214346c8eecb27c8d"
        ],
        [
            "Context {orig_base_params : BaseParams}.",
            "VernacContext",
            "69028e681894580fbc36a6124a9136decfafb159"
        ],
        [
            "Context {one_node_params : OneNodeParams orig_base_params}.",
            "VernacContext",
            "013ed31ca1bcacb0528fc416f1059cfa49b9df65"
        ],
        [
            "Context {raft_params : RaftParams orig_base_params}.",
            "VernacContext",
            "f5c24333154da8ee6ae37600b526f95496c92448"
        ],
        [
            "Definition entries_match entries entries' := forall e e' e'', eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e entries -> In e' entries' -> eIndex e'' <= eIndex e -> (In e'' entries <-> In e'' entries').",
            "VernacDefinition",
            "139aa227ac6e40f4d6640666da83cf79e5b30e7e"
        ],
        [
            "Fixpoint sorted log := match log with | [] => True | e :: es => (forall e', In e' es -> eIndex e > eIndex e' /\\ eTerm e >= eTerm e') /\\ sorted es end.",
            "VernacFixpoint",
            "00f9b9dc67f72992ed7b29a464ce94fd1544072e"
        ],
        [
            "Fixpoint argmax {A : Type} (f : A -> nat) (l : list A) : option A := match l with | a :: l' => match argmax f l' with | Some a' => if f a' <=? f a then Some a else Some a' | None => Some a end | [] => None end.",
            "VernacFixpoint",
            "a1b8af3949a21abd6c676de61f9f563ca426f3a1"
        ],
        [
            "Fixpoint argmin {A : Type} (f : A -> nat) (l : list A) : option A := match l with | a :: l' => match argmin f l' with | Some a' => if f a <=? f a' then Some a else Some a' | None => Some a end | [] => None end.",
            "VernacFixpoint",
            "3c3f23c9eadbe09407e6fe9e8e5a8002fe2a9f5e"
        ],
        [
            "Definition applied_entries (sigma : name -> raft_data) : (list entry) := match argmax (fun h => lastApplied (sigma h)) (all_fin N) with | Some h => rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h))) | None => [] end.",
            "VernacDefinition",
            "0abd68bb5dfdabbdeeda1ac4ca5af277c807ae55"
        ],
        [
            "Definition uniqueIndices (xs : list entry) : Prop := NoDup (map eIndex xs).",
            "VernacDefinition",
            "4faf6f0919ae6db3534f5003d842473bfb5fbc5f"
        ],
        [
            "Fixpoint execute_log' (log : list entry) (st : data) (l : list (input * output)) : (list (input * output) * data) := match log with | [] => (l, st) | e :: log' => let '(o, st') := handler (eInput e) st in execute_log' log' st' (l ++ [(eInput e, o)]) end.",
            "VernacFixpoint",
            "5bd5a7238d795ef9555becd5e986b91cc5a8e070"
        ],
        [
            "Definition execute_log (log : list entry) : (list (input * output) * data) := execute_log' log init [].",
            "VernacDefinition",
            "c0e9111e22c45c27f8931225c72651e2fea44da3"
        ],
        [
            "Definition key : Type := clientId * nat.",
            "VernacDefinition",
            "6279cffb0579949fbb807c6ab216357b0a1074da"
        ],
        [
            "Definition key_eq_dec : forall x y : key, {x = y} + {x <> y}.",
            "VernacDefinition",
            "632ec8ce92d2075f524ad5091ea10493e718e221"
        ],
        [
            "decide equality; auto using clientId_eq_dec, eq_nat_dec.",
            "VernacExtend",
            "0d05d0d5b33c7c5e4202934fce248964ad2d9979"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition key_of (e : entry) := (eClient e, eId e).",
            "VernacDefinition",
            "bdbfb6fab89a0c9daf2c8bb1643a55c382e01f7d"
        ],
        [
            "Fixpoint deduplicate_log' (log : list entry) (ks : list (clientId * nat)) : list entry := match log with | [] => [] | e :: es => match assoc clientId_eq_dec ks (eClient e) with | Some n => if n <? eId e then e :: deduplicate_log' es (assoc_set clientId_eq_dec ks (eClient e) (eId e)) else deduplicate_log' es ks | None => e :: deduplicate_log' es (assoc_set clientId_eq_dec ks (eClient e) (eId e)) end end.",
            "VernacFixpoint",
            "ea59005fce386b76aec1a2c1a089d0aca1ed4dff"
        ],
        [
            "Definition deduplicate_log l := deduplicate_log' l [].",
            "VernacDefinition",
            "86755279ec4a56e2f8842421588e66398e551a06"
        ],
        [
            "Definition mEntries p := match p with | AppendEntries _ _ _ _ entries _ => Some entries | _ => None end.",
            "VernacDefinition",
            "e10c30a39c2692ae95a6ff5069105add1a7bd421"
        ],
        [
            "Definition commit_recorded net h e := In e (log (nwState net h)) /\\ (eIndex e <= lastApplied (nwState net h) \\/ eIndex e <= commitIndex (nwState net h)).",
            "VernacDefinition",
            "f820a064707bf1c721a5978809ee977c30f301bf"
        ],
        [
            "Definition prefix_within_term (l1 l2 : list entry) : Prop := forall e e', eTerm e = eTerm e' -> eIndex e <= eIndex e' -> In e l1 -> In e' l2 -> In e l2.",
            "VernacDefinition",
            "5bac7777c82c0a514e07ed9002623619a377dfb3"
        ],
        [
            "Definition output_correct client id out (aes : list entry) : Prop := exists xs e ys tr' st', deduplicate_log aes = xs ++ e :: ys /\\ eClient e = client /\\ eId e = id /\\ execute_log (xs ++ [e]) = (tr', st') /\\ hd_error (rev tr') = Some (eInput e, out).",
            "VernacDefinition",
            "afcdd43de984459a58235b214724769c1dddc7dd"
        ],
        [
            "Definition terms_and_indices_from_one (l : list entry) : Prop := forall e, In e l -> eTerm e >= 1 /\\ eIndex e >= 1.",
            "VernacDefinition",
            "3f77fbafc0e9774a800d2442dc44f029140b3db8"
        ],
        [
            "End CommonDefinitions.",
            "VernacEndSegment",
            "9333fccb8bdbbaf26d7244a80f113afc674015ef"
        ]
    ],
    "proofs": [
        {
            "name": "key_eq_dec",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "decide equality; auto using clientId_eq_dec, eq_nat_dec.",
                        "VernacExtend",
                        "0d05d0d5b33c7c5e4202934fce248964ad2d9979"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}