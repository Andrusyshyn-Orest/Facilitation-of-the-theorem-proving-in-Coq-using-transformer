{
    "filename": "raft/SpecLemmas.v",
    "coq_project": "verdi-raft",
    "vernac_cmds": [
        [
            "Require Import VerdiRaft.RaftState.",
            "VernacRequire",
            "8ce1178f48a8587a983dd6657973199772fe8baa"
        ],
        [
            "Require Import VerdiRaft.Raft.",
            "VernacRequire",
            "36b0b9afd1c52050ce42daf3c5fa4abb91993f25"
        ],
        [
            "Require Import VerdiRaft.CommonTheorems.",
            "VernacRequire",
            "7741fdc8f1b779bdc4f3d3ad167d1a5d2532d984"
        ],
        [
            "Section SpecLemmas.",
            "VernacBeginSection",
            "6b71df6eae8730cb8c5c052cd21573c00d5d1562"
        ],
        [
            "Context {orig_base_params : BaseParams}.",
            "VernacContext",
            "69028e681894580fbc36a6124a9136decfafb159"
        ],
        [
            "Context {one_node_params : OneNodeParams orig_base_params}.",
            "VernacContext",
            "013ed31ca1bcacb0528fc416f1059cfa49b9df65"
        ],
        [
            "Context {raft_params : RaftParams orig_base_params}.",
            "VernacContext",
            "f5c24333154da8ee6ae37600b526f95496c92448"
        ],
        [
            "Lemma handleRequestVote_votedFor : forall pDst t cid lli llt d d' m, handleRequestVote pDst d t cid lli llt = (d', m) -> currentTerm d = currentTerm d' -> votedFor d = None \\/ votedFor d = votedFor d'.",
            "VernacStartTheoremProof",
            "f83431e51b2f3f0d4f3aa5119f28c12fa4ff881d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; tuple_inversion; simpl in *; intuition; try discriminate; try solve [exfalso; do_bool; omega].",
            "VernacExtend",
            "cffe66b9b9f6ea88260186cdda291ab938874234"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_cases : forall h h' t lli llt st st' m, handleRequestVote h st t h' lli llt = (st', m) -> st' = st \\/ st' = advanceCurrentTerm st t \\/ (st' = {[ advanceCurrentTerm st t with votedFor := Some h']} /\\ (votedFor st = None /\\ currentTerm st = t \\/ currentTerm st < t)).",
            "VernacStartTheoremProof",
            "8f90bd3a7ec00764f2cee9bb0da16eb78814b431"
        ],
        [
            "unfold handleRequestVote.",
            "VernacExtend",
            "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat find_inversion; intuition.",
            "VernacExtend",
            "35b61487e8704cbe921450be4607c6510fd38115"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "unfold advanceCurrentTerm in *.",
            "VernacExtend",
            "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
        ],
        [
            "break_if; simpl in *; do_bool; intuition.",
            "VernacExtend",
            "9ac9c49bed761420c76903dfbfe142ab4aa13bb0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_term_votedFor_cases : forall me st src t v st', handleRequestVoteReply me st src t v = st' -> (currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st) \\/ (currentTerm st < currentTerm st' /\\ votedFor st' = None).",
            "VernacStartTheoremProof",
            "1fcd7a6f69ea030406319a9cd34a85bb5f70d885"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *; repeat break_match; subst; do_bool; intuition.",
            "VernacExtend",
            "9ee59e310649e7c7efd0ba18b1540ef687de987a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_same_term_votedFor_preserved : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "05433162334b8e283a426f3f891086fa11077cc0"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm.",
            "VernacExtend",
            "9309ae75b476a644ba82c89201667c8011237ace"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat tuple_inversion; simpl in *; do_bool; auto; try omega.",
            "VernacExtend",
            "b9e5987c9ec18f79b8f9fdeea8d2798977ece8f8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_same_term_votedFor_preserved : forall h st h' t es r st' ms, handleAppendEntriesReply h st h' t es r = (st', ms) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "0c0b093bd29869f18aee0174619925315df6eaab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; repeat tuple_inversion; simpl in *; do_bool; congruence.",
            "VernacExtend",
            "1724ced333edba7bb7436cfb80c0ffb083733abd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_currentTerm : forall h st os st' ms, doGenericServer h st = (os, st', ms) -> currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "a882aaad1dffa2ca58fab3ca54bdc7f1109e5649"
        ],
        [
            "unfold doGenericServer.",
            "VernacExtend",
            "0d9e40e5542a7a14e88cd24f242841a4e9d5a8b3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat find_inversion; use_applyEntries_spec; subst; simpl in *; auto.",
            "VernacExtend",
            "f403bdf1ed539f44ee118000d53cc002a730e9b2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_currentTerm : forall st h os st' ms, doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "013bf4b3445b3af0ecb6736ec8aacb29da154da9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_currentTerm : forall h st h' t es r st' ms, handleAppendEntriesReply h st h' t es r = (st', ms) -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "54b2a0f64f7bfd9e1a9f526494b39d7fcd7ab7f1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; tuple_inversion; do_bool; simpl; auto; omega.",
            "VernacExtend",
            "7118ba368d588976ceb4b415cc9d71342b3d3da8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_currentTerm : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "b7af3a12d6d2b1233c3b86f68be6e1d8111427ef"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; do_bool; auto.",
            "VernacExtend",
            "989fe193b052d0dfd75e57c78f666a34fe0b7143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryToBecomeLeader_currentTerm : forall h st out st' l, tryToBecomeLeader h st = (out, st', l) -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "356c65a050e368804c96e381ccf6e8014e59559a"
        ],
        [
            "unfold tryToBecomeLeader.",
            "VernacExtend",
            "5b743e7fe09b78f2728be41452000d38350215ee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_currentTerm : forall h st out st' l, handleTimeout h st = (out, st', l) -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "3b9b06f632ba15217e50cf267c24e379afe58975"
        ],
        [
            "unfold handleTimeout.",
            "VernacExtend",
            "f2cd8065a7435b5ab35417216752f0d138894ad9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_match; eauto using tryToBecomeLeader_currentTerm.",
            "VernacExtend",
            "77f4d8900f2a28e32b81c346e803faa816083587"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma haveNewEntries_not_empty : forall st es, haveNewEntries st es = true -> es <> [].",
            "VernacStartTheoremProof",
            "cd978f6dad0ffaa5ea5d6d4ae67611a25c0eddfb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold haveNewEntries, not_empty in *.",
            "VernacExtend",
            "b7d58f71141430d5048d848b4d0a60e4198f6200"
        ],
        [
            "do_bool.",
            "VernacExtend",
            "d118a15e0fdc019b84bfe1183a76e968b591dc36"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "repeat break_match; congruence.",
            "VernacExtend",
            "a2bd0842a7176f30b2192033f4c9c76191aa562f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_log : forall st t, log (advanceCurrentTerm st t) = log st.",
            "VernacStartTheoremProof",
            "b0834678c1c4757d9d0034331275a5b49319671e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold advanceCurrentTerm.",
            "VernacExtend",
            "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
        ],
        [
            "break_if; simpl in *; auto.",
            "VernacExtend",
            "c089215fe54b5bf64b11696ab0d8f866c487aaf4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_log : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st \\/ (currentTerm st <= t /\\ es <> [] /\\ pli = 0 /\\ log st' = es) \\/ (currentTerm st <= t /\\ es <> [] /\\ pli <> 0 /\\ exists e, In e (log st) /\\ eIndex e = pli /\\ eTerm e = plt) /\\ log st' = es ++ (removeAfterIndex (log st) pli).",
            "VernacStartTheoremProof",
            "95c34f71264c8c335c7d467593c49711ba6937d3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries in *.",
            "VernacExtend",
            "2bbd40341d944e9879f9887c85295c8eb4d670e0"
        ],
        [
            "break_if; [find_inversion; subst; eauto|].",
            "VernacExtend",
            "bc450bcd89a70ed7a62d98630492f43274e7104f"
        ],
        [
            "break_if; [do_bool; break_if; find_inversion; subst; try find_apply_lem_hyp haveNewEntries_not_empty; intuition; simpl in *; eauto using advanceCurrentTerm_log|].",
            "VernacExtend",
            "5bc031b80a8e70dd853306e2c75015ca123f5fe5"
        ],
        [
            "break_if.",
            "VernacExtend",
            "c247550e3c86ef9b38eaa4d1de30a9b2a63ba8cb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "break_match; [|find_inversion; subst; eauto].",
            "VernacExtend",
            "3fd0f18751d11d19457acebe4f46c5c96eabd27f"
        ],
        [
            "break_if; [find_inversion; subst; eauto|].",
            "VernacExtend",
            "bc450bcd89a70ed7a62d98630492f43274e7104f"
        ],
        [
            "find_inversion; subst; simpl in *.",
            "VernacExtend",
            "3487b3f9b038a136414ccca9419dd4110236eff8"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "find_apply_lem_hyp findAtIndex_elim.",
            "VernacExtend",
            "1bf88c8ecf3bc6555a9a8ef6d898085ddf4547a0"
        ],
        [
            "intuition; do_bool; eauto.",
            "VernacExtend",
            "99514348a2ebce3d29eae496645a878de4ebb604"
        ],
        [
            "find_apply_lem_hyp haveNewEntries_not_empty.",
            "VernacExtend",
            "f7f14de24f9f2f95437e3e67085d88e739149d2b"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "repeat break_match; find_inversion; subst; eauto.",
            "VernacExtend",
            "75ee967e35300d813955d212b6d2c644bda6ba29"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "eauto using advanceCurrentTerm_log.",
            "VernacExtend",
            "591b5db9ce7d63e66530a228bb3988ec6e9a355f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_log_ind : forall {h st t n pli plt es ci st' ps}, handleAppendEntries h st t n pli plt es ci = (st', ps) -> forall (P : list entry -> Prop), P (log st) -> (pli = 0 -> P es) -> (forall e, pli <> 0 -> In e (log st) -> eIndex e = pli -> eTerm e = plt -> P (es ++ (removeAfterIndex (log st) pli))) -> P (log st').",
            "VernacStartTheoremProof",
            "35cf1677992adfab898628fcd3c6d20ccd21b164"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_apply_lem_hyp handleAppendEntries_log.",
            "VernacExtend",
            "f7626bf57cc4064ca0364ba7383b206be1216a8f"
        ],
        [
            "intuition; subst; try find_rewrite; auto.",
            "VernacExtend",
            "e34506e3f87740341ca1fef345873bd8e3f0253c"
        ],
        [
            "break_exists.",
            "VernacExtend",
            "7914403b406cb602431a8c9ec3a15a70b4d83870"
        ],
        [
            "intuition eauto.",
            "VernacExtend",
            "dfea5151303e8e1455eb6e7dac607bb27ed86a6a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma haveNewEntries_true : forall st es, haveNewEntries st es = true -> (es <> nil /\\ (findAtIndex (log st) (maxIndex es) = None \\/ exists e, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es)).",
            "VernacStartTheoremProof",
            "41220a21ed4936d40ed9095fd65f14c17245faee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold haveNewEntries, not_empty in *.",
            "VernacExtend",
            "b7d58f71141430d5048d848b4d0a60e4198f6200"
        ],
        [
            "repeat break_match; do_bool; intuition eauto; try congruence.",
            "VernacExtend",
            "9b2d85a15650869426a3c6ea9fc5d989fb74845c"
        ],
        [
            "do_bool.",
            "VernacExtend",
            "d118a15e0fdc019b84bfe1183a76e968b591dc36"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_commitIndex : forall st t, commitIndex (advanceCurrentTerm st t) = commitIndex st.",
            "VernacStartTheoremProof",
            "6de1aaae5464f48c7b3b88ee4cac4fa281ad4f65"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold advanceCurrentTerm.",
            "VernacExtend",
            "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
        ],
        [
            "break_if; simpl in *; auto.",
            "VernacExtend",
            "c089215fe54b5bf64b11696ab0d8f866c487aaf4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma some_none : forall A (x : A), Some x = None -> False.",
            "VernacStartTheoremProof",
            "969f8ac1a41f1df284c9d21c4cabebe9a88a7a78"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_term : forall st t, currentTerm st <= t -> currentTerm (advanceCurrentTerm st t) = t.",
            "VernacStartTheoremProof",
            "d0dd73cad27be915ab882c2ad17e6ccb33e51283"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold advanceCurrentTerm in *.",
            "VernacExtend",
            "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
        ],
        [
            "break_if; do_bool; intuition.",
            "VernacExtend",
            "e230913a8a2eb03d54eec1e2303de3ab87c264dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_log_detailed : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> (commitIndex st' = commitIndex st /\\ log st' = log st) \\/ (leaderId st' <> None /\\ currentTerm st' = t /\\ commitIndex st' = max (commitIndex st) (min ci (maxIndex es)) /\\ es <> nil /\\ pli = 0 /\\ t >= currentTerm st /\\ log st' = es /\\ (findAtIndex (log st) (maxIndex es) = None \\/ exists e, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es)) \\/ (leaderId st' <> None /\\ currentTerm st' = t /\\ commitIndex st' = max (commitIndex st) (min ci (maxIndex (es ++ (removeAfterIndex (log st) pli)))) /\\ es <> nil /\\ exists e, In e (log st) /\\ eIndex e = pli /\\ eTerm e = plt) /\\ t >= currentTerm st /\\ log st' = es ++ (removeAfterIndex (log st) pli) /\\ (findAtIndex (log st) (maxIndex es) = None \\/ exists e, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es).",
            "VernacStartTheoremProof",
            "84321c36626e6c52f6b08b065c56dcfb4ec12b67"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries in *.",
            "VernacExtend",
            "2bbd40341d944e9879f9887c85295c8eb4d670e0"
        ],
        [
            "break_if; [find_inversion; subst; eauto|].",
            "VernacExtend",
            "bc450bcd89a70ed7a62d98630492f43274e7104f"
        ],
        [
            "break_if; [do_bool; break_if; find_inversion; subst; try find_apply_lem_hyp haveNewEntries_true; simpl in *; intuition eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex, some_none, advanceCurrentTerm_term|].",
            "VernacExtend",
            "85dcc19bc545c64d40b4c0f1086038b70dbccfd2"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "intuition eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex.",
            "VernacExtend",
            "00fc7399914ac872e023f302de306b6bf65a383a"
        ],
        [
            "break_match; [|find_inversion; subst; eauto].",
            "VernacExtend",
            "3fd0f18751d11d19457acebe4f46c5c96eabd27f"
        ],
        [
            "break_if; [find_inversion; subst; eauto|].",
            "VernacExtend",
            "bc450bcd89a70ed7a62d98630492f43274e7104f"
        ],
        [
            "break_if; [|find_inversion; subst; eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex].",
            "VernacExtend",
            "eb388e718b2ff40332284d188bdf92d543e08f02"
        ],
        [
            "find_inversion; subst; simpl in *.",
            "VernacExtend",
            "3487b3f9b038a136414ccca9419dd4110236eff8"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "find_apply_lem_hyp findAtIndex_elim.",
            "VernacExtend",
            "1bf88c8ecf3bc6555a9a8ef6d898085ddf4547a0"
        ],
        [
            "intuition; do_bool; find_apply_lem_hyp haveNewEntries_true; intuition eauto using advanceCurrentTerm_term; congruence.",
            "VernacExtend",
            "7b0758957cfeaf7b660f8493ffe53a217d504a8f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_currentTerm_leaderId : forall st t, currentTerm st < currentTerm (advanceCurrentTerm st t) \\/ leaderId (advanceCurrentTerm st t) = leaderId st.",
            "VernacStartTheoremProof",
            "a032658ce96cbc1ddad64fd2fe9b6397c442a00c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold advanceCurrentTerm in *.",
            "VernacExtend",
            "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
        ],
        [
            "break_if; simpl in *; do_bool; auto.",
            "VernacExtend",
            "23ce9b896623a1486c052355f62cda73dc8e25d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_currentTerm : forall st t, currentTerm st <= currentTerm (advanceCurrentTerm st t).",
            "VernacStartTheoremProof",
            "8d5a5d78ea9113a59e9c7a80524c9c3af634b636"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold advanceCurrentTerm in *.",
            "VernacExtend",
            "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
        ],
        [
            "break_if; simpl in *; do_bool; omega.",
            "VernacExtend",
            "9cef3bc378d1359f8d1df2787f609f3c25f2f280"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_currentTerm_monotonic : forall pDst t cid lli llt d d' m, handleRequestVote pDst d t cid lli llt = (d', m) -> currentTerm d <= currentTerm d'.",
            "VernacStartTheoremProof",
            "16a993a2570ca67e2c27c820868ac67db20b7f35"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote in *.",
            "VernacExtend",
            "d082e5073544ed77c1ae68c04b4818f7af8fb9db"
        ],
        [
            "repeat break_match; find_inversion; subst; auto; simpl in *; apply advanceCurrentTerm_currentTerm.",
            "VernacExtend",
            "dd921da76ecb378bc8a5e3aab70f27c07d6dc808"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_currentTerm_votedFor : forall pDst t cid lli llt d d' m, handleRequestVote pDst d t cid lli llt = (d', m) -> (currentTerm d < currentTerm d' \\/ (currentTerm d = currentTerm d' /\\ votedFor d = None) \\/ (currentTerm d = currentTerm d' /\\ votedFor d = votedFor d')).",
            "VernacStartTheoremProof",
            "0475cab485a7d2959b8331485e7d7616227c149c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_copy_apply_lem_hyp handleRequestVote_currentTerm_monotonic.",
            "VernacExtend",
            "3b08bd44934045b9648ac278bdebfd3e6a44b635"
        ],
        [
            "find_apply_lem_hyp le_lt_or_eq.",
            "VernacExtend",
            "c895d7b05f29319dac2a4976c1787ff3effa1c56"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "find_apply_lem_hyp handleRequestVote_votedFor; intuition.",
            "VernacExtend",
            "3d49b2606885be65e1a9eafa22b869ac0ccd3c60"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_currentTerm' : forall h st h' t r st', handleRequestVoteReply h st h' t r = st' -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "b5b23b9dc4398c7493de5c162d33d189e889c425"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply in *.",
            "VernacExtend",
            "0cfee7fe39cc41b4bc2da1570410a69a2719dbb8"
        ],
        [
            "repeat break_match; subst; do_bool; intuition.",
            "VernacExtend",
            "e3cd74fca41339fc5ef4753d219de6d33f400b9a"
        ],
        [
            "apply advanceCurrentTerm_currentTerm.",
            "VernacExtend",
            "5afa2344c095b67262002ca0a4cfbe9571ecc5fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_currentTerm : forall st h h' t lli llt st' m, handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st <= currentTerm st'.",
            "VernacStartTheoremProof",
            "2917bd74b4a567a57f56ca3209f0628eea28306e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote in *.",
            "VernacExtend",
            "d082e5073544ed77c1ae68c04b4818f7af8fb9db"
        ],
        [
            "repeat break_match; tuple_inversion; do_bool; simpl; auto using advanceCurrentTerm_currentTerm.",
            "VernacExtend",
            "42b01bcc874c6870a68e5af7ee67f4667209add7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_currentTerm_leaderId : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st < currentTerm st' \\/ (currentTerm st <= currentTerm st' /\\ (leaderId st' = leaderId st \\/ leaderId st' <> None)).",
            "VernacStartTheoremProof",
            "5ad077f93b6bf0221d2f34742f8856a4ef78c8eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries in *.",
            "VernacExtend",
            "2bbd40341d944e9879f9887c85295c8eb4d670e0"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto; right; intuition eauto using advanceCurrentTerm_currentTerm; right; congruence.",
            "VernacExtend",
            "151d0d1f409fed97b194b9da9c09489ab1cca044"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_currentTerm_leaderId : forall h st t c li lt st' m, handleRequestVote h st t c li lt = (st', m) -> currentTerm st < currentTerm st' \\/ (currentTerm st = currentTerm st' /\\ leaderId st' = leaderId st).",
            "VernacStartTheoremProof",
            "8a64888bb4a1b1e2e803433fe033d5b716515c9a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat (break_match; try find_inversion; simpl in *; auto); do_bool; auto.",
            "VernacExtend",
            "9e5b186a63e13a1bba8ec8c483305b5656c8f480"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_currentTerm_leaderId : forall h st h' t r st', handleRequestVoteReply h st h' t r = st' -> currentTerm st < currentTerm st' \\/ currentTerm st' = currentTerm st /\\ leaderId st' = leaderId st.",
            "VernacStartTheoremProof",
            "f0949d73f309c0a32024117e0ef3eeb016e53f7a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "repeat (break_match; try find_inversion; simpl in *; auto); do_bool; auto.",
            "VernacExtend",
            "9e5b186a63e13a1bba8ec8c483305b5656c8f480"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_log : forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> ps = [] /\\ (log st' = log st \\/ exists e, log st' = e :: log st /\\ eIndex e = S (maxIndex (log st)) /\\ eTerm e = currentTerm st /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type st = Leader).",
            "VernacStartTheoremProof",
            "63bd29f9f7e6cdd8d42273678e34d5a1605b325f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "break_match; find_inversion; subst; intuition.",
            "VernacExtend",
            "02bafb251d8d3d3dcab8d0393767b263ca685c66"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "eauto 10.",
            "VernacExtend",
            "d4f1e58d2cc2702454e588ecfdd0add1c2b68e34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleClientRequest_log_ind : forall {h st client id c out st' ps}, handleClientRequest h st client id c = (out, st', ps) -> forall (P : list entry -> Prop), P (log st) -> (forall e, eIndex e = S (maxIndex (log st)) -> eTerm e = currentTerm st -> eClient e = client -> eInput e = c -> eId e = id -> type st = Leader -> P (e :: log st)) -> P (log st').",
            "VernacStartTheoremProof",
            "66952762eb1bf9676577339cba626d5aa18926eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_apply_lem_hyp handleClientRequest_log.",
            "VernacExtend",
            "c01fa09633024868dcb1eb2b73c71c0963a39094"
        ],
        [
            "intuition; repeat find_rewrite; auto.",
            "VernacExtend",
            "90df56388fa4df36cb834826c60c4892fd0d37b6"
        ],
        [
            "break_exists.",
            "VernacExtend",
            "7914403b406cb602431a8c9ec3a15a70b4d83870"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "repeat find_rewrite.",
            "VernacExtend",
            "2e0f7af91fb6dc6a2928bc530dda4cfbd03d3e68"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_log : forall h st t candidate lli llt st' m, handleRequestVote h st t candidate lli llt = (st', m) -> log st' = log st.",
            "VernacStartTheoremProof",
            "40fb93ceb8c21f5a449c8c8ef4fc573728591306"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "cd79300c5c2d588331021532019538cf5455da02"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_log_same : forall h d out d' l, handleTimeout h d = (out, d', l) -> log d' = log d.",
            "VernacStartTheoremProof",
            "e8a46b6d0dab032bb69bf2697cf5254aa7fbf95e"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader.",
            "VernacExtend",
            "b433741f66a0132972ba28d0645b68fa0f31d1f1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat find_inversion; auto.",
            "VernacExtend",
            "c5354d2f07b070059b090c70bd2e5aab45348ce4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_log : forall h st os st' ps, doGenericServer h st = (os, st', ps) -> log st' = log st.",
            "VernacStartTheoremProof",
            "0b738617e723995441ae3ce6f690aad3a8dde821"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doGenericServer in *.",
            "VernacExtend",
            "5c4000c191ac41cf3d590af16220e79a71152959"
        ],
        [
            "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
            "VernacExtend",
            "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_spec : forall h st h' t r st', st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v, In v (votesReceived st) -> In v (votesReceived st')) /\\ ((currentTerm st' = currentTerm st /\\ type st' = type st) \\/ type st' <> Candidate) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true)).",
            "VernacStartTheoremProof",
            "95ad484e341cb5eec9638f6edd49f531e47b787c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; try find_inversion; subst; simpl in *; intuition; do_bool; intuition; try right; congruence.",
            "VernacExtend",
            "809994bc84fb63716ea2ae3c920feacdf8c36431"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_spec' : forall h st h' t r st', st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v, In v (votesReceived st) -> In v (votesReceived st')) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true) /\\ r = true /\\ currentTerm st' = currentTerm st /\\ currentTerm st = t /\\ votesReceived st' = (h' :: (votesReceived st))).",
            "VernacStartTheoremProof",
            "95cb81e4fc631b448737647df8cea811ce3a9da4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; try find_inversion; subst; simpl in *; intuition; do_bool; intuition; try right; congruence.",
            "VernacExtend",
            "809994bc84fb63716ea2ae3c920feacdf8c36431"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleTimeout_not_is_append_entries : forall h st st' ms m, handleTimeout h st = (st', ms) -> In m ms -> ~ is_append_entries (snd m).",
            "VernacStartTheoremProof",
            "c56694067d7b2f29d5ae0ddbc8c6eaf86d97226b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "break_match; find_inversion; subst; simpl in *; eauto; repeat (do_in_map; subst; simpl in *); intuition; break_exists; congruence.",
            "VernacExtend",
            "33506db42ce7ac9c6e1995d6505af319dabac5e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_type : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "3acffe88d60a2d79b9763de32c0cd228c881aca0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_type_term : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ (type st' = Follower /\\ currentTerm st' >= currentTerm st).",
            "VernacStartTheoremProof",
            "bd312681b5b6c9aec3b4d26175f78d9e2a16c992"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; do_bool; auto.",
            "VernacExtend",
            "989fe193b052d0dfd75e57c78f666a34fe0b7143"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_type : forall h st h' t es r st' ms, handleAppendEntriesReply h st h' t es r = (st', ms) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "e61734fdfcf28e581c9041689c00d0cffd9c6808"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_type_term : forall h st h' t es r st' ms, handleAppendEntriesReply h st h' t es r = (st', ms) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ (type st' = Follower /\\ currentTerm st' >= currentTerm st).",
            "VernacStartTheoremProof",
            "2d9845e0aacd6ee39ccd2565c1926b2245d5f347"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; tuple_inversion; do_bool; intuition.",
            "VernacExtend",
            "ff1645e9605b79c4ee2f1756fa14e7dbc42b0612"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_type : forall st h h' t lli llt st' m, handleRequestVote h st t h' lli llt = (st', m) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "483fa3a2fd5e337c717c53f1c7620b0855dd0b3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_type_term : forall st h h' t lli llt st' m, handleRequestVote h st t h' lli llt = (st', m) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ (type st' = Follower /\\ currentTerm st' >= currentTerm st).",
            "VernacStartTheoremProof",
            "496c10d3ccf402fb9d16fd4049e03a5169f7f51f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; tuple_inversion; do_bool; auto.",
            "VernacExtend",
            "4330eddfaa9b5b1991ad7ea741cb31aa3a8aa06d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_type : forall h st h' t r st', handleRequestVoteReply h st h' t r = st' -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ (type st' = Follower /\\ currentTerm st' > currentTerm st) \\/ (type st = Candidate /\\ type st' = Leader /\\ currentTerm st' = currentTerm st).",
            "VernacStartTheoremProof",
            "408c28f7fbabb99a9a5c1c565ae779e97beca83a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; subst; do_bool; intuition.",
            "VernacExtend",
            "e3cd74fca41339fc5ef4753d219de6d33f400b9a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleClientRequest_type : forall h st client id c out st' l, handleClientRequest h st client id c = (out, st', l) -> type st' = type st /\\ currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "87c394539f39808cf6a50c1f4e72646989f2070e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleClientRequest_currentTerm : forall h st client id c out st' l, handleClientRequest h st client id c = (out, st', l) -> currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "012b7da7ce23c32ffff351eaa92723feede34f7d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_apply_lem_hyp handleClientRequest_type.",
            "VernacExtend",
            "3050abf1a61f74d6a1f3ac2d9d3b0dd696f0d6c4"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_type : forall h st out st' l, handleTimeout h st = (out, st', l) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ type st' = Candidate.",
            "VernacStartTheoremProof",
            "c4f389940838878e83385e3d30a90b6fbe6cc94e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_type_strong : forall h st out st' l, handleTimeout h st = (out, st', l) -> (type st' = type st /\\ currentTerm st' = currentTerm st) \\/ (type st' = Candidate /\\ currentTerm st' = S (currentTerm st)).",
            "VernacStartTheoremProof",
            "0c82ae8ec678e7d1136979141e66ac3761a951e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "repeat break_match; find_inversion; simpl; intuition.",
            "VernacExtend",
            "1d109c4a4ec568f19cfc2aef6522cec2e3cd942e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_type : forall h st os st' ms, doGenericServer h st = (os, st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "2926bc30c167346fe1a397f54109fec7d289d9f1"
        ],
        [
            "unfold doGenericServer.",
            "VernacExtend",
            "0d9e40e5542a7a14e88cd24f242841a4e9d5a8b3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat find_inversion; use_applyEntries_spec; subst; simpl in *; auto.",
            "VernacExtend",
            "f403bdf1ed539f44ee118000d53cc002a730e9b2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_type : forall st h os st' ms, doLeader st h = (os, st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st.",
            "VernacStartTheoremProof",
            "0340dd2f87e1570fb2e680add36d6ed1e3ca4a6e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_log : forall st h os st' ms, doLeader st h = (os, st', ms) -> log st' = log st.",
            "VernacStartTheoremProof",
            "fb923a8588bbeaa4e3673e0ead2fec292ff1aede"
        ],
        [
            "unfold doLeader.",
            "VernacExtend",
            "28b6e3e89fec101d2477aae15ee8937c7d5ec807"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_log : forall h st h' t es r st' ms, handleAppendEntriesReply h st h' t es r = (st', ms) -> log st' = log st.",
            "VernacStartTheoremProof",
            "a7aa135f62d808246a45d23c351cd19890bec751"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm.",
            "VernacExtend",
            "bf20006d24fc956d144870f70ab8e1ad17fb5eef"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_log : forall h st h' t r st', handleRequestVoteReply h st h' t r = st' -> log st' = log st.",
            "VernacStartTheoremProof",
            "48a4ff96000f8db742832d503785bc19d750f947"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply handleRequestVoteReply_spec; eauto.",
            "VernacExtend",
            "ad5c47dbaa983cdb39537fdf0e6c0a40e2910793"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_log_rewrite : forall h st h' t r, log (handleRequestVoteReply h st h' t r) = log st.",
            "VernacStartTheoremProof",
            "29a30b65c7845de56df054ae3132ea3ae6ed0115"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "erewrite handleRequestVoteReply_log; eauto.",
            "VernacExtend",
            "3bebf283c33a1e21486fd0a411234f03d005583f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_packets : forall h st from t es s st' ps, handleAppendEntriesReply h st from t es s = (st', ps) -> ps = [].",
            "VernacStartTheoremProof",
            "51c8888e9ead09f720ed709f5bf38c77d7573644"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "cd79300c5c2d588331021532019538cf5455da02"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_packets : forall h st os st' ps, doGenericServer h st = (os, st', ps) -> ps = [].",
            "VernacStartTheoremProof",
            "1c05137cde9ba30d21ff890badf9092ebce0edc6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doGenericServer in *.",
            "VernacExtend",
            "5c4000c191ac41cf3d590af16220e79a71152959"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; subst; auto.",
            "VernacExtend",
            "3e74bf6efbe037db525e84b343d5ababb574e6a7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_not_append_entries : forall h st t n pli plt es ci st' m, handleAppendEntries h st t n pli plt es ci = (st', m) -> ~ is_append_entries m.",
            "VernacStartTheoremProof",
            "fa880fc2bdde7d6fccf94468374bf247ce29cf35"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries in *.",
            "VernacExtend",
            "2bbd40341d944e9879f9887c85295c8eb4d670e0"
        ],
        [
            "repeat break_match; find_inversion; intuition; break_exists; congruence.",
            "VernacExtend",
            "c1cd79a777026dde82c8664a6cf3ad64d9c02789"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_clientCache: forall h st (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> clientCache d = clientCache st.",
            "VernacStartTheoremProof",
            "c6f3e4b5d9ad0ef673785dda99c5e3f4ab767a23"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_clientCache: forall h st (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool) h', handleAppendEntriesReply h st h' t es res = (d, m) -> clientCache d = clientCache st.",
            "VernacStartTheoremProof",
            "e0a5b2995731bf5180c576c91979c1641d5e8535"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat (break_match; try find_inversion; simpl in *; auto).",
            "VernacExtend",
            "57b0de0e8d426aba8c3ab731ef3306f0d9980e14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_clientCache : forall st t, clientCache (advanceCurrentTerm st t) = clientCache st.",
            "VernacStartTheoremProof",
            "cf46b33102d059cb5253d35eca11b342d51441fe"
        ],
        [
            "unfold advanceCurrentTerm.",
            "VernacExtend",
            "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_if; auto.",
            "VernacExtend",
            "351317bef6ab230606e8860db8c11331cf030ef6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleTimeout_clientCache : forall h st out st' ps, handleTimeout h st = (out, st', ps) -> clientCache st' = clientCache st.",
            "VernacStartTheoremProof",
            "2fe16ec91819fbfc1cd1ba73d04874983fd3f07a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "2bf7e4be054f772a60635bd3753a832e1aca516c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_clientCache: forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> clientCache st' = clientCache st.",
            "VernacStartTheoremProof",
            "4a92f368c02059a3ebb49e32a36f292b7fe8ab52"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "2bf7e4be054f772a60635bd3753a832e1aca516c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryToBecomeLeader_clientCache : forall n st out st' ms, tryToBecomeLeader n st = (out, st', ms) -> clientCache st' = clientCache st.",
            "VernacStartTheoremProof",
            "37abea2355066883393525e45f45ea259e6ec25d"
        ],
        [
            "unfold tryToBecomeLeader.",
            "VernacExtend",
            "5b743e7fe09b78f2728be41452000d38350215ee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_clientCache : forall n st t c li lt st' ms, handleRequestVote n st t c li lt = (st', ms) -> clientCache st' = clientCache st.",
            "VernacStartTheoremProof",
            "773ba0f70e7298dc467afba3751780fefb2049ea"
        ],
        [
            "unfold handleRequestVote.",
            "VernacExtend",
            "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto using advanceCurrentTerm_clientCache.",
            "VernacExtend",
            "3054ddeb33499d0fc22e2f05cf9f75746be76b33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_clientCache : forall n st src t v, clientCache (handleRequestVoteReply n st src t v) = clientCache st.",
            "VernacStartTheoremProof",
            "b623b9a61a69c40d53876a158df038a127943762"
        ],
        [
            "unfold handleRequestVoteReply.",
            "VernacExtend",
            "6acb119be8d086ece21bff36e73ae62569227ba5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; simpl; auto using advanceCurrentTerm_clientCache.",
            "VernacExtend",
            "a30fcc7d279880bdd97116728f86c4cdb83fde0b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_clientCache : forall st h os st' ms, doLeader st h = (os, st', ms) -> clientCache st' = clientCache st.",
            "VernacStartTheoremProof",
            "3220f5117b4d23f766e8c17b4ecab2bad9987b21"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntries_stateMachine: forall h st (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> stateMachine d = stateMachine st.",
            "VernacStartTheoremProof",
            "b10c7ea8bcc5524b1577dd14e3ed5ce371913a61"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_stateMachine: forall h st (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool) h', handleAppendEntriesReply h st h' t es res = (d, m) -> stateMachine d = stateMachine st.",
            "VernacStartTheoremProof",
            "f9ac412d14edf7920e7b91d29a4895879ab5a73a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat (break_match; try find_inversion; simpl in *; auto).",
            "VernacExtend",
            "57b0de0e8d426aba8c3ab731ef3306f0d9980e14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_stateMachine : forall st t, stateMachine (advanceCurrentTerm st t) = stateMachine st.",
            "VernacStartTheoremProof",
            "b86c19160737fab76a25ff430104f7127b66d36e"
        ],
        [
            "unfold advanceCurrentTerm.",
            "VernacExtend",
            "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_if; auto.",
            "VernacExtend",
            "351317bef6ab230606e8860db8c11331cf030ef6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleTimeout_stateMachine : forall h st out st' ps, handleTimeout h st = (out, st', ps) -> stateMachine st' = stateMachine st.",
            "VernacStartTheoremProof",
            "d9bb0049fe2b04041a5d84ac69e6edccb6af0c02"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "2bf7e4be054f772a60635bd3753a832e1aca516c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_stateMachine: forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> stateMachine st' = stateMachine st.",
            "VernacStartTheoremProof",
            "97932b507b5c415136792f2725b074d1bf8fc36c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "break_match; find_inversion; subst; auto.",
            "VernacExtend",
            "2bf7e4be054f772a60635bd3753a832e1aca516c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryToBecomeLeader_stateMachine : forall n st out st' ms, tryToBecomeLeader n st = (out, st', ms) -> stateMachine st' = stateMachine st.",
            "VernacStartTheoremProof",
            "c2d6ecc4ea18e2bed80f3a5d5b952b548b83f898"
        ],
        [
            "unfold tryToBecomeLeader.",
            "VernacExtend",
            "5b743e7fe09b78f2728be41452000d38350215ee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_stateMachine : forall n st t c li lt st' ms, handleRequestVote n st t c li lt = (st', ms) -> stateMachine st' = stateMachine st.",
            "VernacStartTheoremProof",
            "10224225a12ad64be40a64bb7a5a3370769ba3b2"
        ],
        [
            "unfold handleRequestVote.",
            "VernacExtend",
            "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto using advanceCurrentTerm_stateMachine.",
            "VernacExtend",
            "1076638b22bc25aa51a3750e779ddc09aeb901b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_stateMachine : forall n st src t v, stateMachine (handleRequestVoteReply n st src t v) = stateMachine st.",
            "VernacStartTheoremProof",
            "2ae7a3029a81d22f628bd24deb8c00bcd28cc4be"
        ],
        [
            "unfold handleRequestVoteReply.",
            "VernacExtend",
            "6acb119be8d086ece21bff36e73ae62569227ba5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; simpl; auto using advanceCurrentTerm_stateMachine.",
            "VernacExtend",
            "94f9c61c28d00e57ab0bbe390f93614cbf8e4bed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_stateMachine : forall st h os st' ms, doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st.",
            "VernacStartTheoremProof",
            "4a18965a7709bcaf2f661909a68aa51807c60a71"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition matchIndex_preserved st st' := type st' = Leader -> (type st = Leader /\\ matchIndex st' = matchIndex st /\\ log st' = log st).",
            "VernacDefinition",
            "98124936b85aeb42a64bd96fd9e646510166ed13"
        ],
        [
            "Arguments matchIndex_preserved / _ _.",
            "VernacArguments",
            "7b566e1a7289539eae77cdd045e3d2752ffb4bd1"
        ],
        [
            "Definition matchIndex_preserved_except_at_host h st st' := type st' = Leader -> (type st = Leader /\\ forall h', h <> h' -> (assoc_default name_eq_dec (matchIndex st') h' 0) = (assoc_default name_eq_dec (matchIndex st) h') 0).",
            "VernacDefinition",
            "d230825d1eb1392e180965704a974c8ff248459d"
        ],
        [
            "Arguments matchIndex_preserved_except_at_host / _ _ _.",
            "VernacArguments",
            "65bc906e73bcd99055020d69afe75b1aa81902b2"
        ],
        [
            "Lemma handleAppendEntries_matchIndex_preserved: forall h st (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> matchIndex_preserved st d.",
            "VernacStartTheoremProof",
            "2f87e9c619e027b77062566dcfc14924d2e7b10a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto; intros; congruence.",
            "VernacExtend",
            "207cde9b304909ae004e3f8443df2fd065496334"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleAppendEntriesReply_matchIndex_leader_preserved: forall h st (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool) h', handleAppendEntriesReply h st h' t es res = (d, m) -> matchIndex_preserved_except_at_host h' st d.",
            "VernacStartTheoremProof",
            "e24d946535bd89fe7bd1bdb9bd30da6de5a66ed2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat (break_match; try find_inversion; simpl in *; auto); [|intros; congruence].",
            "VernacExtend",
            "2d54468b3873c7abb414008cc8951c6dcb90e6e2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "unfold assoc_default.",
            "VernacExtend",
            "49ab364639c6538637720f12978e21da4376f733"
        ],
        [
            "repeat break_match; rewrite get_set_diff in *; repeat find_rewrite; congruence.",
            "VernacExtend",
            "b063e18828fa36bd6d3d0c57f72a38fb3e3a1372"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma advanceCurrentTerm_matchIndex_preserved : forall st t, matchIndex_preserved st (advanceCurrentTerm st t).",
            "VernacStartTheoremProof",
            "c38588235f581143cee42556b3602ad158913b0f"
        ],
        [
            "unfold advanceCurrentTerm.",
            "VernacExtend",
            "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_if; simpl in *; auto; congruence.",
            "VernacExtend",
            "b4bbbe86562ba040ef8246fc027fd6ea3b399a5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleTimeout_matchIndex_preserved : forall h st out st' ps, handleTimeout h st = (out, st', ps) -> matchIndex_preserved st st'.",
            "VernacStartTheoremProof",
            "5b7ba3301f6afaf9078e904275967d35c80032f4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "break_match; simpl in *; find_inversion; subst; simpl in *; auto; congruence.",
            "VernacExtend",
            "1372f0165bce21fb097a7a71b743bcdba1843170"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_matchIndex_maxIndex: forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> (maxIndex (log st') = maxIndex (log st) /\\ matchIndex st' = matchIndex st) \\/ (assoc_default name_eq_dec (matchIndex st') h 0) = maxIndex (log st').",
            "VernacStartTheoremProof",
            "5203c2f21be7bf14fa66d4862a2438113d3a7041"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "break_match; find_inversion; subst; simpl in *; auto.",
            "VernacExtend",
            "dab90b6587d38f8944c3051b95a4ac500a068140"
        ],
        [
            "unfold assoc_default.",
            "VernacExtend",
            "49ab364639c6538637720f12978e21da4376f733"
        ],
        [
            "break_match; rewrite get_set_same in *; try congruence; find_inversion; auto.",
            "VernacExtend",
            "58283d2951a51443cbaea15cbec9ef0723ea9d77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_matchIndex : forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> (maxIndex (log st') = maxIndex (log st) /\\ matchIndex st' = matchIndex st) \\/ matchIndex st' = assoc_set name_eq_dec (matchIndex st) h (maxIndex (log st')) /\\ maxIndex (log st') = S (maxIndex (log st)).",
            "VernacStartTheoremProof",
            "874e24a49addbc20cb57876b170d422df0a62a14"
        ],
        [
            "unfold handleClientRequest.",
            "VernacExtend",
            "9600d5c1a331144e5f70f77393e9e409d932816e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; repeat find_inversion; auto.",
            "VernacExtend",
            "c5354d2f07b070059b090c70bd2e5aab45348ce4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tryToBecomeLeader_matchIndex_preserved : forall n st out st' ms, tryToBecomeLeader n st = (out, st', ms) -> matchIndex_preserved st st'.",
            "VernacStartTheoremProof",
            "557b6fcd825a6089f646987ded357cbf6a9a1c9f"
        ],
        [
            "unfold tryToBecomeLeader.",
            "VernacExtend",
            "5b743e7fe09b78f2728be41452000d38350215ee"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "simpl; intros; auto; congruence.",
            "VernacExtend",
            "897042bc151e2734f1240becefa89b32009fdb69"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_matchIndex_preserved : forall n st t c li lt st' ms, handleRequestVote n st t c li lt = (st', ms) -> matchIndex_preserved st st'.",
            "VernacStartTheoremProof",
            "f572c9d3472c35eea3a0df5c3d9bb4af8500edc5"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm.",
            "VernacExtend",
            "8765b7ee77fc0da9378d71cbe3bce4d4392982f9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto.",
            "VernacExtend",
            "d22bf46d2f886d40044f165da876435e027fe1eb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_matchIndex_preserved : forall h st os st' ps, doGenericServer h st = (os, st', ps) -> matchIndex_preserved st st'.",
            "VernacStartTheoremProof",
            "b9ae9d3eb7f819ba678460e4ea4c021b4b775141"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doGenericServer in *.",
            "VernacExtend",
            "5c4000c191ac41cf3d590af16220e79a71152959"
        ],
        [
            "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
            "VernacExtend",
            "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_matchIndex : forall n st src t v, type (handleRequestVoteReply n st src t v) = Leader -> (type st = Leader /\\ matchIndex (handleRequestVoteReply n st src t v) = matchIndex st) \\/ (assoc_default name_eq_dec (matchIndex (handleRequestVoteReply n st src t v)) n 0 = maxIndex (log (handleRequestVoteReply n st src t v))).",
            "VernacStartTheoremProof",
            "fb7daf75d923527bec8251672a990621fb6f98ed"
        ],
        [
            "unfold handleRequestVoteReply.",
            "VernacExtend",
            "6acb119be8d086ece21bff36e73ae62569227ba5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; simpl; auto using advanceCurrentTerm_matchIndex_preserved; simpl in *; try congruence.",
            "VernacExtend",
            "cee850683a1b0c8f72479f89ee1afa8cfb656e5a"
        ],
        [
            "unfold assoc_default.",
            "VernacExtend",
            "49ab364639c6538637720f12978e21da4376f733"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat break_match; simpl in *; try congruence; find_inversion; auto.",
            "VernacExtend",
            "a749922398663fc0484cc20b3beb67e75748824d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_matchIndex_preserved : forall st h os st' ms, doLeader st h = (os, st', ms) -> matchIndex_preserved st st'.",
            "VernacStartTheoremProof",
            "9a12d7706f64231325c5da4bc70ae55eb43d809d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "simpl; intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "repeat break_match; find_inversion; auto; congruence.",
            "VernacExtend",
            "6483c6e81f2d48d570871921d54a3a84cfc01444"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_lastApplied : forall st h os st' ms, doLeader st h = (os, st', ms) -> lastApplied st' = lastApplied st.",
            "VernacStartTheoremProof",
            "396e4e17d9e9b12e780fda694b29c1f0043fc802"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader in *.",
            "VernacExtend",
            "0adf37b5cf82a80d85840635a23808ea53d55f18"
        ],
        [
            "repeat break_match; find_inversion; auto.",
            "VernacExtend",
            "1a0f2280228d24f86e512fe057d03a18b2bf7109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_no_append_entries : forall st h h' t lli llt st' m, handleRequestVote h st t h' lli llt = (st', m) -> ~ is_append_entries m.",
            "VernacStartTheoremProof",
            "52f829fe0dfe196b082a26d38c48178a4c324afa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; subst; auto; intuition; break_exists; congruence.",
            "VernacExtend",
            "2c464e1bd0271cb930dce054b8d852fa86bd00d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_no_append_entries : forall h st client id c out st' ps m, handleClientRequest h st client id c = (out, st', ps) -> In m ps -> ~ is_append_entries (snd m).",
            "VernacStartTheoremProof",
            "4957157895da8aad32c91211d4f9ec378178819c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "repeat break_match; find_inversion; subst; auto; intuition; break_exists; congruence.",
            "VernacExtend",
            "2c464e1bd0271cb930dce054b8d852fa86bd00d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleClientRequest_packets : forall h st client id c out st' ps, handleClientRequest h st client id c = (out, st', ps) -> ps = [].",
            "VernacStartTheoremProof",
            "db3cbcd888068c915d691b25a16e767104b82ec1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "repeat break_match; repeat find_inversion; auto.",
            "VernacExtend",
            "c5354d2f07b070059b090c70bd2e5aab45348ce4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_packets : forall h d out d' ps m, handleTimeout h d = (out, d', ps) -> In m ps -> ~ is_append_entries (snd m).",
            "VernacStartTheoremProof",
            "933d8bac9fde4f724a0dd6fadaa0de2033814ec7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "repeat break_match; find_inversion; subst; auto; intuition; break_exists; do_in_map; subst; simpl in *; congruence.",
            "VernacExtend",
            "4fb46017f956499e68a8e6a84fccc8acb7a8a47a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_messages : forall st h os st' ms m t n pli plt es ci, doLeader st h = (os, st', ms) -> In m ms -> snd m = AppendEntries t n pli plt es ci -> t = currentTerm st /\\ log st' = log st /\\ type st = Leader /\\ ((plt = 0) \\/ ((exists e, findAtIndex (log st) pli = Some e /\\ eTerm e = plt))).",
            "VernacStartTheoremProof",
            "8d5f53c08fa8bed5c2fb12bc602eedc20de9b7fa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader, advanceCommitIndex in *.",
            "VernacExtend",
            "96aeef169aa84df791f852d119d4f19f9bb66251"
        ],
        [
            "break_match; try solve [find_inversion; simpl in *; intuition].",
            "VernacExtend",
            "9f21a9ef1e5e10a3a0afd816890d84cb37d11259"
        ],
        [
            "break_if; try solve [find_inversion; simpl in *; intuition].",
            "VernacExtend",
            "27b8259d29edf7ac56c52b864d12827dfb88f130"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "do_in_map.",
            "VernacExtend",
            "fa0be9321c6684e706bb9aefb585d66dc4eaa336"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "match goal with | |- context [pred ?x] => remember (pred x) as index end.",
            "VernacExtend",
            "dcf3573ea74f8443b2d408353a0c4580f9364a87"
        ],
        [
            "break_match; simpl in *.",
            "VernacExtend",
            "735a8fabd804f737ffe5350d2f440c3ee140d39c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct index; intuition.",
            "VernacExtend",
            "a39dcaebddd17bb1475e5cc4b8d6ab14b7e5df5c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_message_entries : forall st h os st' ms m t n pli plt es ci e, doLeader st h = (os, st', ms) -> In m ms -> snd m = AppendEntries t n pli plt es ci -> In e es -> In e (log st).",
            "VernacStartTheoremProof",
            "3d965219c34a185249e92f4a3a575768579d5d07"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doLeader, advanceCommitIndex in *.",
            "VernacExtend",
            "96aeef169aa84df791f852d119d4f19f9bb66251"
        ],
        [
            "break_match; try solve [find_inversion; simpl in *; intuition].",
            "VernacExtend",
            "9f21a9ef1e5e10a3a0afd816890d84cb37d11259"
        ],
        [
            "break_if; try solve [find_inversion; simpl in *; intuition].",
            "VernacExtend",
            "27b8259d29edf7ac56c52b864d12827dfb88f130"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "do_in_map.",
            "VernacExtend",
            "fa0be9321c6684e706bb9aefb585d66dc4eaa336"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "find_inversion.",
            "VernacExtend",
            "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
        ],
        [
            "eauto using findGtIndex_in.",
            "VernacExtend",
            "b4c1c926a7639868b88537b9814bd256f647cd1f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_log_term_type : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> (log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "477e13a46459146383dfac93ee63c045cd254ecf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_votesReceived : forall h st t n pli plt es ci st' ps, handleAppendEntries h st t n pli plt es ci = (st', ps) -> votesReceived st' = votesReceived st.",
            "VernacStartTheoremProof",
            "9834b18c072ee01f4311478ac96aaf0ef532e730"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntriesReply_log_term_type : forall h st n t es r st' ps, handleAppendEntriesReply h st n t es r = (st', ps) -> (log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "d0970ba60f3ecc400025236e283cfe8f1e20b534"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntriesReply_votesReceived : forall h st n t es r st' ps, handleAppendEntriesReply h st n t es r = (st', ps) -> votesReceived st' = votesReceived st.",
            "VernacStartTheoremProof",
            "aaed324165f48a70cec6ade0bd4637fd574f65b2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleRequestVote_log_term_type : forall h st t c li lt st' m, handleRequestVote h st t c li lt = (st', m) -> (log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st) \\/ type st' = Follower.",
            "VernacStartTheoremProof",
            "001e7b3d279a2ddf8b8fffb933eecb929aed00f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleRequestVote_votesReceived : forall h st t c li lt st' m, handleRequestVote h st t c li lt = (st', m) -> votesReceived st' = votesReceived st.",
            "VernacStartTheoremProof",
            "239adaeba640795145b0375d5dbdf76e90386eb8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto.",
            "VernacExtend",
            "024d3636ab905cef44f81da38e9c03abfbd5df8c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleRequestVoteReply_log_term_type : forall h st t h' r st', type st' = Candidate -> handleRequestVoteReply h st h' t r = st' -> (log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st).",
            "VernacStartTheoremProof",
            "993c3656cc3f55e7613b62a90355982f2b8b5400"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; subst; simpl in *; auto; congruence.",
            "VernacExtend",
            "cd995388dfb6bc39496d36cea37c9f74ee63ab28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleRequestVoteReply_votesReceived : forall h st t h' r v, In v (votesReceived (handleRequestVoteReply h st h' t r)) -> In v (votesReceived st) \\/ (r = true /\\ v = h' /\\ currentTerm (handleRequestVoteReply h st h' t r) = t).",
            "VernacStartTheoremProof",
            "b5e52ec63668ba1a0e90f554f61f896e1acb046b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; subst; simpl in *; do_bool; intuition.",
            "VernacExtend",
            "b1811615fc17c0a7d8496ea673afb6a5baaa1001"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleTimeout_log_term_type : forall h st out st' ps, handleTimeout h st = (out, st', ps) -> (log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st) \\/ currentTerm st' = S (currentTerm st).",
            "VernacStartTheoremProof",
            "f6e54f9a47e2f2b42d1637ce74229b0addbbd35c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; intuition.",
            "VernacExtend",
            "aea756d05af777ea76341a3fae6f89e85dc56d06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleClientRequest_candidate : forall h st client id c os st' m, handleClientRequest h st client id c = (os, st', m) -> type st' = Candidate -> st' = st.",
            "VernacStartTheoremProof",
            "bd20f1dcf74697e6de3c505f8cd30e7455453cfe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; congruence.",
            "VernacExtend",
            "2bbe71ef1c5dd878de0b238cff4172e847ec9589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_candidate : forall st h os st' ms, doLeader st h = (os, st', ms) -> type st' = Candidate -> st' = st.",
            "VernacStartTheoremProof",
            "4222f005eaf398959ee22dcb4962fff8a8bef848"
        ],
        [
            "unfold doLeader, advanceCommitIndex in *.",
            "VernacExtend",
            "96aeef169aa84df791f852d119d4f19f9bb66251"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; congruence.",
            "VernacExtend",
            "2bbe71ef1c5dd878de0b238cff4172e847ec9589"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doLeader_term_votedFor : forall st h os st' ms, doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "abf52cbed34b1b51ef8977b370e34dab5feae04c"
        ],
        [
            "unfold doLeader, advanceCommitIndex in *.",
            "VernacExtend",
            "96aeef169aa84df791f852d119d4f19f9bb66251"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; intuition.",
            "VernacExtend",
            "aea756d05af777ea76341a3fae6f89e85dc56d06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doGenericServer_log_type_term_votesReceived : forall h st os st' ps, doGenericServer h st = (os, st', ps) -> log st' = log st /\\ type st' = type st /\\ currentTerm st' = currentTerm st /\\ votesReceived st' = votesReceived st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "0b69e0b0f72f7b6727fe80f78f5b3fc9ed62d312"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold doGenericServer in *.",
            "VernacExtend",
            "5c4000c191ac41cf3d590af16220e79a71152959"
        ],
        [
            "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
            "VernacExtend",
            "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleClientRequest_term_votedFor : forall h st client id c os st' m, handleClientRequest h st client id c = (os, st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "7b876520ce77657f0d780fab68537633e14c8545"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleClientRequest in *.",
            "VernacExtend",
            "b992e8a79a6573fd599e45ad0be3139256249f09"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; intuition.",
            "VernacExtend",
            "aea756d05af777ea76341a3fae6f89e85dc56d06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntries_term_votedFor : forall h st t n pli plt es ci st' ps h', handleAppendEntries h st t n pli plt es ci = (st', ps) -> votedFor st' = Some h' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "43b59b5ea5a16eda8847af42a55c129e879e90e0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntries, advanceCurrentTerm in *.",
            "VernacExtend",
            "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto; congruence.",
            "VernacExtend",
            "dc24a6583bf66f2594c97e154640003bfa798c3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleAppendEntriesReply_term_votedFor : forall h st n t es r st' ps h', handleAppendEntriesReply h st n t es r = (st', ps) -> votedFor st' = Some h' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "7e5e880018c6b417d7d6c0bebfa362a01d538375"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "d4fa9450703386e4bd24725d4aa91941ff82bb02"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto; congruence.",
            "VernacExtend",
            "dc24a6583bf66f2594c97e154640003bfa798c3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem handleRequestVoteReply_term_votedFor : forall h st t h' h'' r st', handleRequestVoteReply h st h' t r = st' -> votedFor st' = Some h'' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st.",
            "VernacStartTheoremProof",
            "2b5284c24cfadeb2e1972aa3e7521c425ab59496"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
            "VernacExtend",
            "131527c00e72f47d7359298267b2cfaea69cf182"
        ],
        [
            "repeat break_match; subst; simpl in *; auto; congruence.",
            "VernacExtend",
            "cd995388dfb6bc39496d36cea37c9f74ee63ab28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_reply_true: forall h h' st t lli llt st' t', handleRequestVote h st t h' lli llt = (st', RequestVoteReply t' true) -> votedFor st' = Some h' /\\ currentTerm st' = t'.",
            "VernacStartTheoremProof",
            "f82bd69503e370679658be349091280c90b6918b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; intuition.",
            "VernacExtend",
            "aea756d05af777ea76341a3fae6f89e85dc56d06"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleTimeout_messages: forall (out : list raft_output) (st : raft_data) (l : list (name * msg)) h (mi : logIndex) (mt : term) m st' t n, handleTimeout h st = (out, st', l) -> In m l -> snd m = RequestVote t n mi mt -> maxIndex (log st') = mi /\\ maxTerm (log st') = mt /\\ t = currentTerm st'.",
            "VernacStartTheoremProof",
            "02284a48e17dda2d67f388742c95cdd488c0b92a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleTimeout, tryToBecomeLeader in *.",
            "VernacExtend",
            "1c31bff15c7a09d78ea2050008d5ccda27e13448"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; intuition; do_in_map; subst; simpl in *; find_inversion; auto.",
            "VernacExtend",
            "e22ff98a52cc5a14d26f62f17ba27e936fc2f32f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVoteReply_currentTerm : forall h st h' t r x, x <= currentTerm st -> x <= currentTerm (handleRequestVoteReply h st h' t r).",
            "VernacStartTheoremProof",
            "1ff3be4e18afd125ac759afd118357451d2f601a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold handleRequestVoteReply, advanceCurrentTerm.",
            "VernacExtend",
            "e20360113b123bc49b23044935a15f4562ee7759"
        ],
        [
            "repeat break_match; subst; simpl in *; auto; try omega.",
            "VernacExtend",
            "1ff9ddd2db1d5bb43222f7fd022ff5efa3ca1f2d"
        ],
        [
            "do_bool.",
            "VernacExtend",
            "d118a15e0fdc019b84bfe1183a76e968b591dc36"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma handleRequestVote_reply_true': forall (h : name) (h' : fin N) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t lli llt : nat) (st' : raft_data) (t' : term), handleRequestVote h st t h' lli llt = (st', RequestVoteReply t' true) -> t' = t /\\ currentTerm st' = t.",
            "VernacStartTheoremProof",
            "0a18642e32f891ef28ef2f5c570970cfb2dab35e"
        ],
        [
            "unfold handleRequestVote, advanceCurrentTerm in *.",
            "VernacExtend",
            "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "repeat break_match; find_inversion; simpl in *; auto; try congruence; do_bool; try omega; eauto using le_antisym.",
            "VernacExtend",
            "b6191b81cd6647d3fbfa15fc1748abd5b2a2d470"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SpecLemmas.",
            "VernacEndSegment",
            "bccf48ed8e94b0884313f8a1bb5ed9f19332563c"
        ]
    ],
    "proofs": [
        {
            "name": "handleRequestVote_votedFor",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; tuple_inversion; simpl in *; intuition; try discriminate; try solve [exfalso; do_bool; omega].",
                        "VernacExtend",
                        "cffe66b9b9f6ea88260186cdda291ab938874234"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_cases",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVote.",
                        "VernacExtend",
                        "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; intuition.",
                        "VernacExtend",
                        "35b61487e8704cbe921450be4607c6510fd38115"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm in *.",
                        "VernacExtend",
                        "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; do_bool; intuition.",
                        "VernacExtend",
                        "9ac9c49bed761420c76903dfbfe142ab4aa13bb0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_term_votedFor_cases",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *; repeat break_match; subst; do_bool; intuition.",
                        "VernacExtend",
                        "9ee59e310649e7c7efd0ba18b1540ef687de987a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_same_term_votedFor_preserved",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm.",
                        "VernacExtend",
                        "9309ae75b476a644ba82c89201667c8011237ace"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat tuple_inversion; simpl in *; do_bool; auto; try omega.",
                        "VernacExtend",
                        "b9e5987c9ec18f79b8f9fdeea8d2798977ece8f8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_same_term_votedFor_preserved",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat tuple_inversion; simpl in *; do_bool; congruence.",
                        "VernacExtend",
                        "1724ced333edba7bb7436cfb80c0ffb083733abd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_currentTerm",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "unfold doGenericServer.",
                        "VernacExtend",
                        "0d9e40e5542a7a14e88cd24f242841a4e9d5a8b3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; use_applyEntries_spec; subst; simpl in *; auto.",
                        "VernacExtend",
                        "f403bdf1ed539f44ee118000d53cc002a730e9b2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_currentTerm",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_currentTerm",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; tuple_inversion; do_bool; simpl; auto; omega.",
                        "VernacExtend",
                        "7118ba368d588976ceb4b415cc9d71342b3d3da8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_currentTerm",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; do_bool; auto.",
                        "VernacExtend",
                        "989fe193b052d0dfd75e57c78f666a34fe0b7143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryToBecomeLeader_currentTerm",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "unfold tryToBecomeLeader.",
                        "VernacExtend",
                        "5b743e7fe09b78f2728be41452000d38350215ee"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_currentTerm",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "unfold handleTimeout.",
                        "VernacExtend",
                        "f2cd8065a7435b5ab35417216752f0d138894ad9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_match; eauto using tryToBecomeLeader_currentTerm.",
                        "VernacExtend",
                        "77f4d8900f2a28e32b81c346e803faa816083587"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "haveNewEntries_not_empty",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold haveNewEntries, not_empty in *.",
                        "VernacExtend",
                        "b7d58f71141430d5048d848b4d0a60e4198f6200"
                    ]
                },
                {
                    "command": [
                        "do_bool.",
                        "VernacExtend",
                        "d118a15e0fdc019b84bfe1183a76e968b591dc36"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; congruence.",
                        "VernacExtend",
                        "a2bd0842a7176f30b2192033f4c9c76191aa562f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_log",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm.",
                        "VernacExtend",
                        "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; auto.",
                        "VernacExtend",
                        "c089215fe54b5bf64b11696ab0d8f866c487aaf4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_log",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries in *.",
                        "VernacExtend",
                        "2bbd40341d944e9879f9887c85295c8eb4d670e0"
                    ]
                },
                {
                    "command": [
                        "break_if; [find_inversion; subst; eauto|].",
                        "VernacExtend",
                        "bc450bcd89a70ed7a62d98630492f43274e7104f"
                    ]
                },
                {
                    "command": [
                        "break_if; [do_bool; break_if; find_inversion; subst; try find_apply_lem_hyp haveNewEntries_not_empty; intuition; simpl in *; eauto using advanceCurrentTerm_log|].",
                        "VernacExtend",
                        "5bc031b80a8e70dd853306e2c75015ca123f5fe5"
                    ]
                },
                {
                    "command": [
                        "break_if.",
                        "VernacExtend",
                        "c247550e3c86ef9b38eaa4d1de30a9b2a63ba8cb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "break_match; [|find_inversion; subst; eauto].",
                        "VernacExtend",
                        "3fd0f18751d11d19457acebe4f46c5c96eabd27f"
                    ]
                },
                {
                    "command": [
                        "break_if; [find_inversion; subst; eauto|].",
                        "VernacExtend",
                        "bc450bcd89a70ed7a62d98630492f43274e7104f"
                    ]
                },
                {
                    "command": [
                        "find_inversion; subst; simpl in *.",
                        "VernacExtend",
                        "3487b3f9b038a136414ccca9419dd4110236eff8"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp findAtIndex_elim.",
                        "VernacExtend",
                        "1bf88c8ecf3bc6555a9a8ef6d898085ddf4547a0"
                    ]
                },
                {
                    "command": [
                        "intuition; do_bool; eauto.",
                        "VernacExtend",
                        "99514348a2ebce3d29eae496645a878de4ebb604"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp haveNewEntries_not_empty.",
                        "VernacExtend",
                        "f7f14de24f9f2f95437e3e67085d88e739149d2b"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; eauto.",
                        "VernacExtend",
                        "75ee967e35300d813955d212b6d2c644bda6ba29"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "eauto using advanceCurrentTerm_log.",
                        "VernacExtend",
                        "591b5db9ce7d63e66530a228bb3988ec6e9a355f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_log_ind",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp handleAppendEntries_log.",
                        "VernacExtend",
                        "f7626bf57cc4064ca0364ba7383b206be1216a8f"
                    ]
                },
                {
                    "command": [
                        "intuition; subst; try find_rewrite; auto.",
                        "VernacExtend",
                        "e34506e3f87740341ca1fef345873bd8e3f0253c"
                    ]
                },
                {
                    "command": [
                        "break_exists.",
                        "VernacExtend",
                        "7914403b406cb602431a8c9ec3a15a70b4d83870"
                    ]
                },
                {
                    "command": [
                        "intuition eauto.",
                        "VernacExtend",
                        "dfea5151303e8e1455eb6e7dac607bb27ed86a6a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "haveNewEntries_true",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold haveNewEntries, not_empty in *.",
                        "VernacExtend",
                        "b7d58f71141430d5048d848b4d0a60e4198f6200"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; do_bool; intuition eauto; try congruence.",
                        "VernacExtend",
                        "9b2d85a15650869426a3c6ea9fc5d989fb74845c"
                    ]
                },
                {
                    "command": [
                        "do_bool.",
                        "VernacExtend",
                        "d118a15e0fdc019b84bfe1183a76e968b591dc36"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_commitIndex",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm.",
                        "VernacExtend",
                        "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; auto.",
                        "VernacExtend",
                        "c089215fe54b5bf64b11696ab0d8f866c487aaf4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "some_none",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_term",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm in *.",
                        "VernacExtend",
                        "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
                    ]
                },
                {
                    "command": [
                        "break_if; do_bool; intuition.",
                        "VernacExtend",
                        "e230913a8a2eb03d54eec1e2303de3ab87c264dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_log_detailed",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries in *.",
                        "VernacExtend",
                        "2bbd40341d944e9879f9887c85295c8eb4d670e0"
                    ]
                },
                {
                    "command": [
                        "break_if; [find_inversion; subst; eauto|].",
                        "VernacExtend",
                        "bc450bcd89a70ed7a62d98630492f43274e7104f"
                    ]
                },
                {
                    "command": [
                        "break_if; [do_bool; break_if; find_inversion; subst; try find_apply_lem_hyp haveNewEntries_true; simpl in *; intuition eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex, some_none, advanceCurrentTerm_term|].",
                        "VernacExtend",
                        "85dcc19bc545c64d40b4c0f1086038b70dbccfd2"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "intuition eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex.",
                        "VernacExtend",
                        "00fc7399914ac872e023f302de306b6bf65a383a"
                    ]
                },
                {
                    "command": [
                        "break_match; [|find_inversion; subst; eauto].",
                        "VernacExtend",
                        "3fd0f18751d11d19457acebe4f46c5c96eabd27f"
                    ]
                },
                {
                    "command": [
                        "break_if; [find_inversion; subst; eauto|].",
                        "VernacExtend",
                        "bc450bcd89a70ed7a62d98630492f43274e7104f"
                    ]
                },
                {
                    "command": [
                        "break_if; [|find_inversion; subst; eauto using advanceCurrentTerm_log, advanceCurrentTerm_commitIndex].",
                        "VernacExtend",
                        "eb388e718b2ff40332284d188bdf92d543e08f02"
                    ]
                },
                {
                    "command": [
                        "find_inversion; subst; simpl in *.",
                        "VernacExtend",
                        "3487b3f9b038a136414ccca9419dd4110236eff8"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp findAtIndex_elim.",
                        "VernacExtend",
                        "1bf88c8ecf3bc6555a9a8ef6d898085ddf4547a0"
                    ]
                },
                {
                    "command": [
                        "intuition; do_bool; find_apply_lem_hyp haveNewEntries_true; intuition eauto using advanceCurrentTerm_term; congruence.",
                        "VernacExtend",
                        "7b0758957cfeaf7b660f8493ffe53a217d504a8f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_currentTerm_leaderId",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm in *.",
                        "VernacExtend",
                        "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; do_bool; auto.",
                        "VernacExtend",
                        "23ce9b896623a1486c052355f62cda73dc8e25d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_currentTerm",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold advanceCurrentTerm in *.",
                        "VernacExtend",
                        "f363b5b39d7ab83b717a3fdad4fc4cddbcbd1c74"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; do_bool; omega.",
                        "VernacExtend",
                        "9cef3bc378d1359f8d1df2787f609f3c25f2f280"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_currentTerm_monotonic",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote in *.",
                        "VernacExtend",
                        "d082e5073544ed77c1ae68c04b4818f7af8fb9db"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto; simpl in *; apply advanceCurrentTerm_currentTerm.",
                        "VernacExtend",
                        "dd921da76ecb378bc8a5e3aab70f27c07d6dc808"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_currentTerm_votedFor",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_copy_apply_lem_hyp handleRequestVote_currentTerm_monotonic.",
                        "VernacExtend",
                        "3b08bd44934045b9648ac278bdebfd3e6a44b635"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp le_lt_or_eq.",
                        "VernacExtend",
                        "c895d7b05f29319dac2a4976c1787ff3effa1c56"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp handleRequestVote_votedFor; intuition.",
                        "VernacExtend",
                        "3d49b2606885be65e1a9eafa22b869ac0ccd3c60"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_currentTerm'",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply in *.",
                        "VernacExtend",
                        "0cfee7fe39cc41b4bc2da1570410a69a2719dbb8"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; do_bool; intuition.",
                        "VernacExtend",
                        "e3cd74fca41339fc5ef4753d219de6d33f400b9a"
                    ]
                },
                {
                    "command": [
                        "apply advanceCurrentTerm_currentTerm.",
                        "VernacExtend",
                        "5afa2344c095b67262002ca0a4cfbe9571ecc5fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_currentTerm",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote in *.",
                        "VernacExtend",
                        "d082e5073544ed77c1ae68c04b4818f7af8fb9db"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; tuple_inversion; do_bool; simpl; auto using advanceCurrentTerm_currentTerm.",
                        "VernacExtend",
                        "42b01bcc874c6870a68e5af7ee67f4667209add7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_currentTerm_leaderId",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries in *.",
                        "VernacExtend",
                        "2bbd40341d944e9879f9887c85295c8eb4d670e0"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto; right; intuition eauto using advanceCurrentTerm_currentTerm; right; congruence.",
                        "VernacExtend",
                        "151d0d1f409fed97b194b9da9c09489ab1cca044"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_currentTerm_leaderId",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try find_inversion; simpl in *; auto); do_bool; auto.",
                        "VernacExtend",
                        "9e5b186a63e13a1bba8ec8c483305b5656c8f480"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_currentTerm_leaderId",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try find_inversion; simpl in *; auto); do_bool; auto.",
                        "VernacExtend",
                        "9e5b186a63e13a1bba8ec8c483305b5656c8f480"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_log",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; intuition.",
                        "VernacExtend",
                        "02bafb251d8d3d3dcab8d0393767b263ca685c66"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "eauto 10.",
                        "VernacExtend",
                        "d4f1e58d2cc2702454e588ecfdd0add1c2b68e34"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_log_ind",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp handleClientRequest_log.",
                        "VernacExtend",
                        "c01fa09633024868dcb1eb2b73c71c0963a39094"
                    ]
                },
                {
                    "command": [
                        "intuition; repeat find_rewrite; auto.",
                        "VernacExtend",
                        "90df56388fa4df36cb834826c60c4892fd0d37b6"
                    ]
                },
                {
                    "command": [
                        "break_exists.",
                        "VernacExtend",
                        "7914403b406cb602431a8c9ec3a15a70b4d83870"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "repeat find_rewrite.",
                        "VernacExtend",
                        "2e0f7af91fb6dc6a2928bc530dda4cfbd03d3e68"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_log",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "cd79300c5c2d588331021532019538cf5455da02"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_log_same",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader.",
                        "VernacExtend",
                        "b433741f66a0132972ba28d0645b68fa0f31d1f1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; auto.",
                        "VernacExtend",
                        "c5354d2f07b070059b090c70bd2e5aab45348ce4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_log",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doGenericServer in *.",
                        "VernacExtend",
                        "5c4000c191ac41cf3d590af16220e79a71152959"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
                        "VernacExtend",
                        "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_spec",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; try find_inversion; subst; simpl in *; intuition; do_bool; intuition; try right; congruence.",
                        "VernacExtend",
                        "809994bc84fb63716ea2ae3c920feacdf8c36431"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_spec'",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; try find_inversion; subst; simpl in *; intuition; do_bool; intuition; try right; congruence.",
                        "VernacExtend",
                        "809994bc84fb63716ea2ae3c920feacdf8c36431"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_not_is_append_entries",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; simpl in *; eauto; repeat (do_in_map; subst; simpl in *); intuition; break_exists; congruence.",
                        "VernacExtend",
                        "33506db42ce7ac9c6e1995d6505af319dabac5e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_type",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_type_term",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; do_bool; auto.",
                        "VernacExtend",
                        "989fe193b052d0dfd75e57c78f666a34fe0b7143"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_type",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_type_term",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; tuple_inversion; do_bool; intuition.",
                        "VernacExtend",
                        "ff1645e9605b79c4ee2f1756fa14e7dbc42b0612"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_type",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_type_term",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; tuple_inversion; do_bool; auto.",
                        "VernacExtend",
                        "4330eddfaa9b5b1991ad7ea741cb31aa3a8aa06d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_type",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; do_bool; intuition.",
                        "VernacExtend",
                        "e3cd74fca41339fc5ef4753d219de6d33f400b9a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_type",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_currentTerm",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp handleClientRequest_type.",
                        "VernacExtend",
                        "3050abf1a61f74d6a1f3ac2d9d3b0dd696f0d6c4"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_type",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_type_strong",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl; intuition.",
                        "VernacExtend",
                        "1d109c4a4ec568f19cfc2aef6522cec2e3cd942e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_type",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "unfold doGenericServer.",
                        "VernacExtend",
                        "0d9e40e5542a7a14e88cd24f242841a4e9d5a8b3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; use_applyEntries_spec; subst; simpl in *; auto.",
                        "VernacExtend",
                        "f403bdf1ed539f44ee118000d53cc002a730e9b2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_type",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_log",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "unfold doLeader.",
                        "VernacExtend",
                        "28b6e3e89fec101d2477aae15ee8937c7d5ec807"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_log",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm.",
                        "VernacExtend",
                        "bf20006d24fc956d144870f70ab8e1ad17fb5eef"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_log",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply handleRequestVoteReply_spec; eauto.",
                        "VernacExtend",
                        "ad5c47dbaa983cdb39537fdf0e6c0a40e2910793"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_log_rewrite",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "erewrite handleRequestVoteReply_log; eauto.",
                        "VernacExtend",
                        "3bebf283c33a1e21486fd0a411234f03d005583f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_packets",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "cd79300c5c2d588331021532019538cf5455da02"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_packets",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doGenericServer in *.",
                        "VernacExtend",
                        "5c4000c191ac41cf3d590af16220e79a71152959"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; subst; auto.",
                        "VernacExtend",
                        "3e74bf6efbe037db525e84b343d5ababb574e6a7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_not_append_entries",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries in *.",
                        "VernacExtend",
                        "2bbd40341d944e9879f9887c85295c8eb4d670e0"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; intuition; break_exists; congruence.",
                        "VernacExtend",
                        "c1cd79a777026dde82c8664a6cf3ad64d9c02789"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_clientCache",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_clientCache",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try find_inversion; simpl in *; auto).",
                        "VernacExtend",
                        "57b0de0e8d426aba8c3ab731ef3306f0d9980e14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_clientCache",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "unfold advanceCurrentTerm.",
                        "VernacExtend",
                        "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_if; auto.",
                        "VernacExtend",
                        "351317bef6ab230606e8860db8c11331cf030ef6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_clientCache",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "2bf7e4be054f772a60635bd3753a832e1aca516c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_clientCache",
            "line_nb": 362,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "2bf7e4be054f772a60635bd3753a832e1aca516c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryToBecomeLeader_clientCache",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "unfold tryToBecomeLeader.",
                        "VernacExtend",
                        "5b743e7fe09b78f2728be41452000d38350215ee"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_clientCache",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVote.",
                        "VernacExtend",
                        "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto using advanceCurrentTerm_clientCache.",
                        "VernacExtend",
                        "3054ddeb33499d0fc22e2f05cf9f75746be76b33"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_clientCache",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVoteReply.",
                        "VernacExtend",
                        "6acb119be8d086ece21bff36e73ae62569227ba5"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; simpl; auto using advanceCurrentTerm_clientCache.",
                        "VernacExtend",
                        "a30fcc7d279880bdd97116728f86c4cdb83fde0b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_clientCache",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_stateMachine",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_stateMachine",
            "line_nb": 393,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try find_inversion; simpl in *; auto).",
                        "VernacExtend",
                        "57b0de0e8d426aba8c3ab731ef3306f0d9980e14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_stateMachine",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "unfold advanceCurrentTerm.",
                        "VernacExtend",
                        "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_if; auto.",
                        "VernacExtend",
                        "351317bef6ab230606e8860db8c11331cf030ef6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_stateMachine",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "2bf7e4be054f772a60635bd3753a832e1aca516c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_stateMachine",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; auto.",
                        "VernacExtend",
                        "2bf7e4be054f772a60635bd3753a832e1aca516c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryToBecomeLeader_stateMachine",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "unfold tryToBecomeLeader.",
                        "VernacExtend",
                        "5b743e7fe09b78f2728be41452000d38350215ee"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_stateMachine",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVote.",
                        "VernacExtend",
                        "2189e9b2c1ba70d974abaa0243dfd603a1f65d55"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto using advanceCurrentTerm_stateMachine.",
                        "VernacExtend",
                        "1076638b22bc25aa51a3750e779ddc09aeb901b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_stateMachine",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVoteReply.",
                        "VernacExtend",
                        "6acb119be8d086ece21bff36e73ae62569227ba5"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; simpl; auto using advanceCurrentTerm_stateMachine.",
                        "VernacExtend",
                        "94f9c61c28d00e57ab0bbe390f93614cbf8e4bed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_stateMachine",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_matchIndex_preserved",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto; intros; congruence.",
                        "VernacExtend",
                        "207cde9b304909ae004e3f8443df2fd065496334"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_matchIndex_leader_preserved",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try find_inversion; simpl in *; auto); [|intros; congruence].",
                        "VernacExtend",
                        "2d54468b3873c7abb414008cc8951c6dcb90e6e2"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "unfold assoc_default.",
                        "VernacExtend",
                        "49ab364639c6538637720f12978e21da4376f733"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; rewrite get_set_diff in *; repeat find_rewrite; congruence.",
                        "VernacExtend",
                        "b063e18828fa36bd6d3d0c57f72a38fb3e3a1372"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "advanceCurrentTerm_matchIndex_preserved",
            "line_nb": 452,
            "steps": [
                {
                    "command": [
                        "unfold advanceCurrentTerm.",
                        "VernacExtend",
                        "2aac90a1e6ed44eb3330dd45dcb722d57674772c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_if; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "b4bbbe86562ba040ef8246fc027fd6ea3b399a5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_matchIndex_preserved",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "break_match; simpl in *; find_inversion; subst; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "1372f0165bce21fb097a7a71b743bcdba1843170"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_matchIndex_maxIndex",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "break_match; find_inversion; subst; simpl in *; auto.",
                        "VernacExtend",
                        "dab90b6587d38f8944c3051b95a4ac500a068140"
                    ]
                },
                {
                    "command": [
                        "unfold assoc_default.",
                        "VernacExtend",
                        "49ab364639c6538637720f12978e21da4376f733"
                    ]
                },
                {
                    "command": [
                        "break_match; rewrite get_set_same in *; try congruence; find_inversion; auto.",
                        "VernacExtend",
                        "58283d2951a51443cbaea15cbec9ef0723ea9d77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_matchIndex",
            "line_nb": 469,
            "steps": [
                {
                    "command": [
                        "unfold handleClientRequest.",
                        "VernacExtend",
                        "9600d5c1a331144e5f70f77393e9e409d932816e"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; auto.",
                        "VernacExtend",
                        "c5354d2f07b070059b090c70bd2e5aab45348ce4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tryToBecomeLeader_matchIndex_preserved",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "unfold tryToBecomeLeader.",
                        "VernacExtend",
                        "5b743e7fe09b78f2728be41452000d38350215ee"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; auto; congruence.",
                        "VernacExtend",
                        "897042bc151e2734f1240becefa89b32009fdb69"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_matchIndex_preserved",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm.",
                        "VernacExtend",
                        "8765b7ee77fc0da9378d71cbe3bce4d4392982f9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat (break_match; try discriminate; repeat (find_inversion; simpl in *)); auto.",
                        "VernacExtend",
                        "d22bf46d2f886d40044f165da876435e027fe1eb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_matchIndex_preserved",
            "line_nb": 485,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doGenericServer in *.",
                        "VernacExtend",
                        "5c4000c191ac41cf3d590af16220e79a71152959"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
                        "VernacExtend",
                        "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_matchIndex",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVoteReply.",
                        "VernacExtend",
                        "6acb119be8d086ece21bff36e73ae62569227ba5"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; simpl; auto using advanceCurrentTerm_matchIndex_preserved; simpl in *; try congruence.",
                        "VernacExtend",
                        "cee850683a1b0c8f72479f89ee1afa8cfb656e5a"
                    ]
                },
                {
                    "command": [
                        "unfold assoc_default.",
                        "VernacExtend",
                        "49ab364639c6538637720f12978e21da4376f733"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; simpl in *; try congruence; find_inversion; auto.",
                        "VernacExtend",
                        "a749922398663fc0484cc20b3beb67e75748824d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_matchIndex_preserved",
            "line_nb": 498,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "simpl; intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto; congruence.",
                        "VernacExtend",
                        "6483c6e81f2d48d570871921d54a3a84cfc01444"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_lastApplied",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader in *.",
                        "VernacExtend",
                        "0adf37b5cf82a80d85840635a23808ea53d55f18"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; auto.",
                        "VernacExtend",
                        "1a0f2280228d24f86e512fe057d03a18b2bf7109"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_no_append_entries",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto; intuition; break_exists; congruence.",
                        "VernacExtend",
                        "2c464e1bd0271cb930dce054b8d852fa86bd00d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_no_append_entries",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto; intuition; break_exists; congruence.",
                        "VernacExtend",
                        "2c464e1bd0271cb930dce054b8d852fa86bd00d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_packets",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; repeat find_inversion; auto.",
                        "VernacExtend",
                        "c5354d2f07b070059b090c70bd2e5aab45348ce4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_packets",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; subst; auto; intuition; break_exists; do_in_map; subst; simpl in *; congruence.",
                        "VernacExtend",
                        "4fb46017f956499e68a8e6a84fccc8acb7a8a47a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_messages",
            "line_nb": 529,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader, advanceCommitIndex in *.",
                        "VernacExtend",
                        "96aeef169aa84df791f852d119d4f19f9bb66251"
                    ]
                },
                {
                    "command": [
                        "break_match; try solve [find_inversion; simpl in *; intuition].",
                        "VernacExtend",
                        "9f21a9ef1e5e10a3a0afd816890d84cb37d11259"
                    ]
                },
                {
                    "command": [
                        "break_if; try solve [find_inversion; simpl in *; intuition].",
                        "VernacExtend",
                        "27b8259d29edf7ac56c52b864d12827dfb88f130"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "do_in_map.",
                        "VernacExtend",
                        "fa0be9321c6684e706bb9aefb585d66dc4eaa336"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "match goal with | |- context [pred ?x] => remember (pred x) as index end.",
                        "VernacExtend",
                        "dcf3573ea74f8443b2d408353a0c4580f9364a87"
                    ]
                },
                {
                    "command": [
                        "break_match; simpl in *.",
                        "VernacExtend",
                        "735a8fabd804f737ffe5350d2f440c3ee140d39c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct index; intuition.",
                        "VernacExtend",
                        "a39dcaebddd17bb1475e5cc4b8d6ab14b7e5df5c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_message_entries",
            "line_nb": 549,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doLeader, advanceCommitIndex in *.",
                        "VernacExtend",
                        "96aeef169aa84df791f852d119d4f19f9bb66251"
                    ]
                },
                {
                    "command": [
                        "break_match; try solve [find_inversion; simpl in *; intuition].",
                        "VernacExtend",
                        "9f21a9ef1e5e10a3a0afd816890d84cb37d11259"
                    ]
                },
                {
                    "command": [
                        "break_if; try solve [find_inversion; simpl in *; intuition].",
                        "VernacExtend",
                        "27b8259d29edf7ac56c52b864d12827dfb88f130"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "do_in_map.",
                        "VernacExtend",
                        "fa0be9321c6684e706bb9aefb585d66dc4eaa336"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "find_inversion.",
                        "VernacExtend",
                        "f1dd355c7c2f63f8f275fc6f55ac72ee2c39f687"
                    ]
                },
                {
                    "command": [
                        "eauto using findGtIndex_in.",
                        "VernacExtend",
                        "b4c1c926a7639868b88537b9814bd256f647cd1f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_log_term_type",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_votesReceived",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_log_term_type",
            "line_nb": 572,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_votesReceived",
            "line_nb": 577,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_log_term_type",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_votesReceived",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto.",
                        "VernacExtend",
                        "024d3636ab905cef44f81da38e9c03abfbd5df8c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_log_term_type",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "cd995388dfb6bc39496d36cea37c9f74ee63ab28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_votesReceived",
            "line_nb": 597,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; simpl in *; do_bool; intuition.",
                        "VernacExtend",
                        "b1811615fc17c0a7d8496ea673afb6a5baaa1001"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_log_term_type",
            "line_nb": 602,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; intuition.",
                        "VernacExtend",
                        "aea756d05af777ea76341a3fae6f89e85dc56d06"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_candidate",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; congruence.",
                        "VernacExtend",
                        "2bbe71ef1c5dd878de0b238cff4172e847ec9589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_candidate",
            "line_nb": 612,
            "steps": [
                {
                    "command": [
                        "unfold doLeader, advanceCommitIndex in *.",
                        "VernacExtend",
                        "96aeef169aa84df791f852d119d4f19f9bb66251"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; congruence.",
                        "VernacExtend",
                        "2bbe71ef1c5dd878de0b238cff4172e847ec9589"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doLeader_term_votedFor",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "unfold doLeader, advanceCommitIndex in *.",
                        "VernacExtend",
                        "96aeef169aa84df791f852d119d4f19f9bb66251"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; intuition.",
                        "VernacExtend",
                        "aea756d05af777ea76341a3fae6f89e85dc56d06"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doGenericServer_log_type_term_votesReceived",
            "line_nb": 622,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold doGenericServer in *.",
                        "VernacExtend",
                        "5c4000c191ac41cf3d590af16220e79a71152959"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; use_applyEntries_spec; simpl in *; subst; auto.",
                        "VernacExtend",
                        "c5e528f78bc6942a60fba7a9ca0e0f52f08f674a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleClientRequest_term_votedFor",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleClientRequest in *.",
                        "VernacExtend",
                        "b992e8a79a6573fd599e45ad0be3139256249f09"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; intuition.",
                        "VernacExtend",
                        "aea756d05af777ea76341a3fae6f89e85dc56d06"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntries_term_votedFor",
            "line_nb": 632,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntries, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "4947e058e30f2cabab42f1672ed2573eb4c35cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "dc24a6583bf66f2594c97e154640003bfa798c3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleAppendEntriesReply_term_votedFor",
            "line_nb": 637,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleAppendEntriesReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "d4fa9450703386e4bd24725d4aa91941ff82bb02"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "dc24a6583bf66f2594c97e154640003bfa798c3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_term_votedFor",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "131527c00e72f47d7359298267b2cfaea69cf182"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; simpl in *; auto; congruence.",
                        "VernacExtend",
                        "cd995388dfb6bc39496d36cea37c9f74ee63ab28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_reply_true",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; intuition.",
                        "VernacExtend",
                        "aea756d05af777ea76341a3fae6f89e85dc56d06"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleTimeout_messages",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleTimeout, tryToBecomeLeader in *.",
                        "VernacExtend",
                        "1c31bff15c7a09d78ea2050008d5ccda27e13448"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; intuition; do_in_map; subst; simpl in *; find_inversion; auto.",
                        "VernacExtend",
                        "e22ff98a52cc5a14d26f62f17ba27e936fc2f32f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVoteReply_currentTerm",
            "line_nb": 657,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold handleRequestVoteReply, advanceCurrentTerm.",
                        "VernacExtend",
                        "e20360113b123bc49b23044935a15f4562ee7759"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; subst; simpl in *; auto; try omega.",
                        "VernacExtend",
                        "1ff9ddd2db1d5bb43222f7fd022ff5efa3ca1f2d"
                    ]
                },
                {
                    "command": [
                        "do_bool.",
                        "VernacExtend",
                        "d118a15e0fdc019b84bfe1183a76e968b591dc36"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "handleRequestVote_reply_true'",
            "line_nb": 664,
            "steps": [
                {
                    "command": [
                        "unfold handleRequestVote, advanceCurrentTerm in *.",
                        "VernacExtend",
                        "525ae7b860ac9f3d674c33649aaee39a47b62cdd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "repeat break_match; find_inversion; simpl in *; auto; try congruence; do_bool; try omega; eauto using le_antisym.",
                        "VernacExtend",
                        "b6191b81cd6647d3fbfa15fc1748abd5b2a2d470"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}