{
    "filename": "decompose_traversal.v",
    "coq_project": "traversable-fincontainer",
    "vernac_cmds": [
        [
            "Require Vector.",
            "VernacRequire",
            "145bcbe9535700f6fddf277a7fc43bb4df45a9f9"
        ],
        [
            "Require Import Arith List Eqdep_dec.",
            "VernacRequire",
            "d6926d52f14f1ae297d7aac18bdcdeb560e8ca3c"
        ],
        [
            "Require Import FunctionalExtensionality.",
            "VernacRequire",
            "bb1bf6a28f9de1b2ad0dab7920189198216ed486"
        ],
        [
            "Set Asymmetric Patterns.",
            "VernacSetOption",
            "3fcd9e746ba5a1aabd289acfb9ab99bec474567d"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Lemma Vector_map_id n a (f : a -> a) (v : Vector.t a n) : (forall x, f x = x) -> (Vector.map f v) = v.",
            "VernacStartTheoremProof",
            "4c7e13398391869366001c814d8f2734cbfb595c"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv, H.",
            "VernacExtend",
            "4080ac66cace4faaa315548e453e31ba5b4762ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Vector_map_compose n a b c (g : b -> c) (f : a -> b) (h : a -> c) (v : Vector.t a n) : (forall x, g (f x) = h x) -> Vector.map g (Vector.map f v) = Vector.map h v.",
            "VernacStartTheoremProof",
            "420cd29ba669a5a0d1e2965db781e86206bcfd63"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv, H.",
            "VernacExtend",
            "4080ac66cace4faaa315548e453e31ba5b4762ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Vector_map_append n m a b (f : a -> b) (v1 : Vector.t a n) (v2 : Vector.t a m) : Vector.map f (Vector.append v1 v2) = Vector.append (Vector.map f v1) (Vector.map f v2).",
            "VernacStartTheoremProof",
            "10f3092d3e78bd9c9f932452cfefe97b3eddea02"
        ],
        [
            "induction v1.",
            "VernacExtend",
            "8233e58a25881e708b8947eaefec6715fc42d548"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv1.",
            "VernacExtend",
            "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma append_inj a n m (v1 v1' : Vector.t a n) (v2 v2' : Vector.t a m) : Vector.append v1 v2 = Vector.append v1' v2' -> v1 = v1' /\\ v2 = v2'.",
            "VernacStartTheoremProof",
            "f21f01233bdcb00887d525e31cf1d0c2ea22c229"
        ],
        [
            "revert n v1 v1'.",
            "VernacExtend",
            "70516782c2eceb4742b0faade1435e65bd8c530e"
        ],
        [
            "apply (Vector.rect2 (fun n v1 v1' => Vector.append v1 v2 = Vector.append v1' v2' -> v1 = v1' /\\ v2 = v2')).",
            "VernacExtend",
            "f2a7243b1f222dc5eba085a914d00f2fa902cdab"
        ],
        [
            "intros H; split.",
            "VernacExtend",
            "c41591be4dc03ccc6f8840b8a05dfd08db9444b6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros n t t' IH h h' H.",
            "VernacExtend",
            "d141ccc229a055d3ddb30eada3ece9907eea522f"
        ],
        [
            "injection H.",
            "VernacExtend",
            "0b4168b75c87f7c322bfb81e661f04001b54052d"
        ],
        [
            "intros dep1 Hh.",
            "VernacExtend",
            "b2f9f45811f7bf30b88204fbb45ef956d4e1c576"
        ],
        [
            "rewrite Hh; clear Hh.",
            "VernacExtend",
            "f1d3c33cd505784376032af636a438a6ce3a97c6"
        ],
        [
            "destruct IH as [IH1 IH2].",
            "VernacExtend",
            "5add3aa89566669c2c4c99661e59b47a344109e7"
        ],
        [
            "refine (inj_pair2_eq_dec _ _ _ _ _ _ dep1).",
            "VernacExtend",
            "78b993e58400964a5651614783ca1fca5deea833"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "rewrite IH1.",
            "VernacExtend",
            "fc638d7679d1559e613110f8328f9332b35882f0"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma append_assoc a n m p (v1 : Vector.t a n) (v2 : Vector.t a m) (v3 : Vector.t a p) (e : n + (m + p) = n + m + p) : eq_rect _ _ (Vector.append v1 (Vector.append v2 v3)) _ e = Vector.append (Vector.append v1 v2) v3.",
            "VernacStartTheoremProof",
            "cee06b9689ee913f394e05c472f25b105921d1aa"
        ],
        [
            "induction v1; simpl in *.",
            "VernacExtend",
            "b8399b735443bca08c7a5b8e4828e65dcfca84bf"
        ],
        [
            "pattern e.",
            "VernacExtend",
            "c86fc71c50a92e67c16208bd92e3b0292fe7be3c"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "injection e.",
            "VernacExtend",
            "cf626cd0773aba2024ccc3777f2dc35cfa2cad6f"
        ],
        [
            "intros e'.",
            "VernacExtend",
            "2cdedb6c5a7c1a3ab21ae9fa56ad18156a7f58fc"
        ],
        [
            "rewrite <- (IHv1 e').",
            "VernacExtend",
            "f4a781937c2239757a90a495f2d9a6293ec7b275"
        ],
        [
            "clear IHv1.",
            "VernacExtend",
            "61632aa07f0c31b6792554e4b10afc74985ba397"
        ],
        [
            "revert e.",
            "VernacExtend",
            "4811b158d691c94ab1f08ec87b3994375d2608de"
        ],
        [
            "generalize e'.",
            "VernacExtend",
            "2dc0f7d75ad9efa5eec1a1305b7a02cbf1cd7437"
        ],
        [
            "rewrite <- e'.",
            "VernacExtend",
            "9c805d7b9b6f34f243b2c6fe892365a027ca91de"
        ],
        [
            "clear e'; intros e'.",
            "VernacExtend",
            "1e12d492a542f6ac7abd37bab3bacfe98f5971e8"
        ],
        [
            "pattern e'.",
            "VernacExtend",
            "d04217cd73bddd2d8b2a3755b2e3a272090e28a8"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_list_eq A n m (e: n = m) : forall (v1 : Vector.t A n) (v2 : Vector.t A m), Vector.to_list v1 = Vector.to_list v2 -> eq_rect _ (Vector.t A) v1 _ e = v2.",
            "VernacStartTheoremProof",
            "ac7375ed7b7137624f52dba1c303a621deb7e370"
        ],
        [
            "rewrite e.",
            "VernacExtend",
            "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "clear n e.",
            "VernacExtend",
            "77fd27e600380fdb407acfc4a04a8e88c15d3961"
        ],
        [
            "revert m.",
            "VernacExtend",
            "43cfb708640da71e43e04c57468c99e6fc662c0f"
        ],
        [
            "apply (Vector.rect2 (fun m (v1 v2 : Vector.t A m) => Vector.to_list v1 = Vector.to_list v2 -> v1 = v2)).",
            "VernacExtend",
            "0936bbc406bd7469cde2e646299733bafaa4d58f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros n v1 v2 IH a b H.",
            "VernacExtend",
            "3672c2b3bf9105e77827090f7ec62256d0e4472a"
        ],
        [
            "injection H; intros H1 H2.",
            "VernacExtend",
            "f3aa2ceb4fd2629fc04c26948fbcbb85fbc8a3ac"
        ],
        [
            "rewrite IH.",
            "VernacExtend",
            "dbf4f765dab656705bc8df8600fa3b3017a20858"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record KleeneStore i j a := kleeneStore { dim : nat ; peek : Vector.t j dim -> a ; pos : Vector.t i dim }.",
            "VernacInductive",
            "a610a04b591aca49adf953874721dfa74ecc50be"
        ],
        [
            "Definition extract i a (s : KleeneStore i i a) : a := peek (pos s).",
            "VernacDefinition",
            "2098d8239356158161b5bfe4e721db77141a7b2c"
        ],
        [
            "Definition KSmap i j a b (f : a -> b) (s : KleeneStore i j a) : KleeneStore i j b := kleeneStore (fun v => f (peek v)) (pos s).",
            "VernacDefinition",
            "ae5e11b068547216b77287f477d92ff3e678ffd1"
        ],
        [
            "Definition duplicate i j k a (s : KleeneStore i k a) : KleeneStore i j (KleeneStore j k a) := kleeneStore (fun v => kleeneStore (peek (k:=s)) v) (pos s).",
            "VernacDefinition",
            "c5644f6e79ff4728f1da7bfd56a7ff440cc2312c"
        ],
        [
            "Record KleeneCoalg (i o : Type -> Type) := kleeneCoalg { coalg :> forall a b, (o a) -> KleeneStore (i a) (i b) (o b) ; coalg_extract : forall a (x:o a), extract (coalg _ x) = x ; coalg_duplicate : forall a b c (x:o a), duplicate (i b) (coalg c x) = KSmap (coalg c) (coalg b x) }.",
            "VernacInductive",
            "eb9df2f2cb582cae8713e5bd7e4a67f8d78ffedd"
        ],
        [
            "Lemma free_b_dim i o (k : KleeneCoalg i o) a b b' (x : o a) : dim (coalg k b x) = dim (coalg k b' x).",
            "VernacStartTheoremProof",
            "39b135ec3321221ca08422beb8129e9f71b21c61"
        ],
        [
            "apply (f_equal (fun x=> dim x) (@coalg_duplicate i o k a b' b x)).",
            "VernacExtend",
            "0c5a47b0c9b837b9aec2e8ad5d69555c8de35f94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma free_b_pos i o (k : KleeneCoalg i o) a b b' (x : o a) : eq_rect _ _ (pos (coalg k b x)) _ (free_b_dim k _ _ x) = pos (coalg k b' x).",
            "VernacStartTheoremProof",
            "2f64829623780cfd4e43fd8893a219907fd3f6db"
        ],
        [
            "assert (H := (@coalg_duplicate i o k a b' b x)).",
            "VernacExtend",
            "62c6d1d8a218c34a6cd1b53626317ae915374d22"
        ],
        [
            "change (pos (k a b' x)) with (pos (KSmap (k b' b) (k a b' x))).",
            "VernacExtend",
            "241c6edad577a4c05ac5e442ef657a6b26aae204"
        ],
        [
            "change (pos (k a b x)) with (pos (duplicate (i b') (k a b x))).",
            "VernacExtend",
            "e54e654b44b800b1cfdbcb1422a3e644fd0906b9"
        ],
        [
            "generalize (free_b_dim k b b' x).",
            "VernacExtend",
            "e8e9f3a2f0091db53843bcc8221efb31342048f9"
        ],
        [
            "change (dim (k a b' x)) with (dim (KSmap (k b' b) (k a b' x))).",
            "VernacExtend",
            "5a253cd3bfa17bef2ea3b054a3fd5c9466f13b40"
        ],
        [
            "change (dim (k a b x)) with (dim (duplicate (i b') (k a b x))).",
            "VernacExtend",
            "19f2c326f45fd350cac77de7753e525db2fe1e79"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Traversable.",
            "VernacBeginSection",
            "70e591639a00aba85c4664ebc21859b329764ae8"
        ],
        [
            "Variable t : Type -> Type.",
            "VernacAssumption",
            "77c7c6609d5b29bf038a2dda6675f2edfcfab762"
        ],
        [
            "Variable traverse : KleeneCoalg (fun x => x) t.",
            "VernacAssumption",
            "943baf74a94425cc47b057742cc0539d5030fa94"
        ],
        [
            "Definition size a (x:t a) : nat := dim (traverse a a x).",
            "VernacDefinition",
            "d87148b754a29357f8c8982af5560e2b75417979"
        ],
        [
            "Lemma size_preservation a b (x: t a) v : size (peek (k:=traverse a b x) v) = size x.",
            "VernacStartTheoremProof",
            "4603a4f1495552887dabb067f0287199b836bb63"
        ],
        [
            "unfold size.",
            "VernacExtend",
            "6586c1161ea57c3be59fcba0d0ae22ea35a8f85d"
        ],
        [
            "replace (coalg traverse (a:=b) b (peek (k:=traverse a b x) v)) with (peek (k:=(duplicate b (coalg traverse b x))) v).",
            "VernacExtend",
            "611deecac4ba8c34e942cc4a60997cb26e9f550a"
        ],
        [
            "rewrite (free_b_dim traverse a b).",
            "VernacExtend",
            "ac4f8412dd8ec02a4b5dd34d17574129111c3a4b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "change v with (eq_rect (dim (traverse a b x)) (Vector.t b) v (dim (duplicate b (traverse a b x))) (refl_equal _)) at 1.",
            "VernacExtend",
            "48513a3478250ad08e621d6b31a1f46dd5e7be77"
        ],
        [
            "generalize (eq_refl (dim (traverse a b x))).",
            "VernacExtend",
            "c9bb355af936ba10355325965499b530b425ef1c"
        ],
        [
            "change (dim (traverse a b x)) with (dim (duplicate b (traverse a b x))) at 2.",
            "VernacExtend",
            "ac7519bd6d59b8aea189c205b03a70fbf436064f"
        ],
        [
            "rewrite (coalg_duplicate traverse b b x).",
            "VernacExtend",
            "34f1ff1c9139deaaa75308c513caa271116bf866"
        ],
        [
            "apply K_dec_set; [ decide equality |].",
            "VernacExtend",
            "f83ff957fb4ea034007d0b47d72ad5170fb1a933"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_preservation a a' b b' (x: t a) v : dim (traverse b b' (peek (k:=traverse a b x) v)) = dim (traverse a a' x).",
            "VernacStartTheoremProof",
            "4900299d685eb8b938b4dadeb8ee1ef7a4b841e3"
        ],
        [
            "change (dim (peek (k:=KSmap (traverse b b') (traverse a b x)) v) = dim (traverse a a' x)).",
            "VernacExtend",
            "0683d4c2e51422f19254dead3e107b2233ae0df7"
        ],
        [
            "change (Vector.t b (dim (KSmap (traverse b b') (traverse a b x)))) in v.",
            "VernacExtend",
            "625b97f01840c69f0e9be06045b58c7df10c284b"
        ],
        [
            "revert v.",
            "VernacExtend",
            "55aebda61020e9d48822205f777e478cfdb94d83"
        ],
        [
            "rewrite <- (coalg_duplicate traverse b b').",
            "VernacExtend",
            "b46c8c8c9bc688f7128b7bc83974f81bf032b825"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "rewrite (free_b_dim traverse a' b').",
            "VernacExtend",
            "6fd7643f7db3c1ba58e4dc56e33f873b5d3396af"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition iso1 a (x: t a) : {x : t unit & Vector.t a (size x)} := let s := coalg traverse unit x in existT (fun x : t unit => Vector.t a (size x)) (peek (k:=s) (Vector.const tt _)) (eq_rect _ (Vector.t a) (pos s) _ (eq_sym (dim_preservation _ _ _))).",
            "VernacDefinition",
            "d0513a22c5559b8146b9503ae58da1a4517aafbf"
        ],
        [
            "Definition iso2 a (y : {x : t unit & Vector.t a (size x)}) : t a := let (t,s) := y in peek (k:=coalg traverse a t) (eq_rect _ (Vector.t a) s _ (eq_sym (free_b_dim _ _ _ _))).",
            "VernacDefinition",
            "5078e8acd1da287cf75aa509a75808a1c980ab72"
        ],
        [
            "Lemma iso2_iso1 a (x : t a) : iso2 (iso1 x) = x.",
            "VernacStartTheoremProof",
            "9f56a04cddad01bc57f8831cf7730ce71535f970"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold size.",
            "VernacExtend",
            "6586c1161ea57c3be59fcba0d0ae22ea35a8f85d"
        ],
        [
            "set (e1 := (eq_sym (dim_preservation _ _ _))).",
            "VernacExtend",
            "b31be1d3039875677d1555cb3152715cab083da7"
        ],
        [
            "set (e2 := (eq_sym (free_b_dim traverse (a:=unit) a unit (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))))).",
            "VernacExtend",
            "fedf3fed69994a786f0a800e533a4e68d57d5684"
        ],
        [
            "generalize e1 e2.",
            "VernacExtend",
            "d3fb1460296d244587186c34cbee317d53d1d75e"
        ],
        [
            "rewrite <- e1.",
            "VernacExtend",
            "d3d4ff8a4a4037c96fda124d82caeaa71e576740"
        ],
        [
            "clear e1 e2.",
            "VernacExtend",
            "93a70996c79b53d2781e88189120b01232b25fdf"
        ],
        [
            "apply (fun H => K_dec_set H (fun e1 : dim (traverse a unit x) = dim (traverse a unit x) => forall e2 : dim (traverse a unit x) = dim (traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))), peek (k:=traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))) (eq_rect (dim (traverse a unit x)) (Vector.t a) (eq_rect (dim (traverse a unit x)) (Vector.t a) (pos (traverse a unit x)) (dim (traverse a unit x)) e1) (dim (traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x)))))) e2) = x)).",
            "VernacExtend",
            "99964cd85f95f4ccd5937b3bd1d61ca09a69f4d8"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "pose (Z0 := KSmap (traverse unit a) (traverse a unit x)).",
            "VernacExtend",
            "f5eaff6fa431b7d0dbea34da6d435df97fc19da9"
        ],
        [
            "pose (Z1 := peek (k:=Z0) (Vector.const tt _)).",
            "VernacExtend",
            "576bba52e6a6ed8414471e0622ce30f829cd614e"
        ],
        [
            "change (traverse unit a (peek (k:= traverse a unit x) (Vector.const tt _))) with (peek (k:=Z0) (Vector.const tt _)).",
            "VernacExtend",
            "ae7c79102ea66cacde4a55ea0bc6f0d38ae5ccc2"
        ],
        [
            "unfold Z0.",
            "VernacExtend",
            "2373da9f32bf7f0b1bdb4b0edc90280e8c70776c"
        ],
        [
            "rewrite <- (coalg_duplicate traverse).",
            "VernacExtend",
            "5f14c833b7606a0ecd8b290eb153652d45b0a159"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- (free_b_pos traverse a unit x).",
            "VernacExtend",
            "06ba8f7338dd6af06ef930c1fa267d41f0bd2bbf"
        ],
        [
            "generalize (free_b_dim traverse a unit x).",
            "VernacExtend",
            "21e9ce30621ccaa7601eacdec6d8bc4a91dbd15f"
        ],
        [
            "intros e.",
            "VernacExtend",
            "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
        ],
        [
            "generalize e.",
            "VernacExtend",
            "6531a90dcea6ccb14823627ef81b68708e51e645"
        ],
        [
            "rewrite <- e.",
            "VernacExtend",
            "038d705295bc042ea4f7eab695069943e9f585f2"
        ],
        [
            "apply (fun H => K_dec_set H (fun e0 : dim (traverse a a x) = dim (traverse a a x) => forall e2 : dim (traverse a a x) = dim (traverse a a x), peek (k:=traverse a a x) (eq_rect (dim (traverse a a x)) (Vector.t a) (eq_rect (dim (traverse a a x)) (Vector.t a) (pos (traverse a a x)) (dim (traverse a a x)) e0) (dim (traverse a a x)) e2) = x)).",
            "VernacExtend",
            "5e9132a1f114f2fb318aea5e44f25fee58ab509d"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "change (extract (traverse a a x) = x).",
            "VernacExtend",
            "ac154e69c6a65d3db5b92812f2bb2297e1facdb0"
        ],
        [
            "apply (coalg_extract traverse x).",
            "VernacExtend",
            "ed4e16d645de306f4a453b8f531893ad4112be1f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iso1_iso2_1 a (y : {x : t unit & Vector.t a (size x)}) : projT1 (iso1 (iso2 y)) = projT1 y.",
            "VernacStartTheoremProof",
            "69b314d6ffff20eec92387377ba11f609887281e"
        ],
        [
            "destruct y as [x v].",
            "VernacExtend",
            "ac1697e36b3c83f2fe30eb45cc5ea98749f88bd4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "set (a' := (eq_rect (size x) (Vector.t a) v (dim _) _)).",
            "VernacExtend",
            "05bb1c300ba3715aebc3cb573eb8b89f4db7131b"
        ],
        [
            "clearbody a'.",
            "VernacExtend",
            "f74e4c62f4054f5b04a2b4b968f5b9e7b69e2a73"
        ],
        [
            "pose (X := KSmap (traverse a unit) (traverse unit a x)).",
            "VernacExtend",
            "c63d1e5a75d365258bd9570f81dafaa5f390b239"
        ],
        [
            "change (Vector.t a (dim X)) in a'.",
            "VernacExtend",
            "b2c67b262d27fbea4e7231ea75272779bdd4997b"
        ],
        [
            "change (peek (k:=(peek (k:=X) a')) (Vector.const tt _) = x).",
            "VernacExtend",
            "193ade10c615df444f20a44e7d4b353e53c6b436"
        ],
        [
            "generalize a'.",
            "VernacExtend",
            "6f97b447e7da8234b7724c91eeb0386c5fd75594"
        ],
        [
            "unfold X.",
            "VernacExtend",
            "c78419a47346ebcf47d37e322df77d31130e80f7"
        ],
        [
            "rewrite <- (coalg_duplicate traverse a unit).",
            "VernacExtend",
            "63f9a91953383e1510d706b7ca57289dc969db89"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros _.",
            "VernacExtend",
            "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
        ],
        [
            "replace (Vector.const tt (dim (traverse unit unit x))) with (pos (traverse unit unit x)).",
            "VernacExtend",
            "d628015649ceb8cadecfef2643043c252b02dd1e"
        ],
        [
            "apply (coalg_extract traverse).",
            "VernacExtend",
            "fdc806ccae28174488533c8804c3a4d62c474032"
        ],
        [
            "generalize (pos (traverse unit unit x)).",
            "VernacExtend",
            "41c28de54b0f7e846d82061c6ea5af01e235be25"
        ],
        [
            "clear - x.",
            "VernacExtend",
            "015c595a14fe97ef674bbde239ccc3506e6b9c2c"
        ],
        [
            "induction t0.",
            "VernacExtend",
            "9c97f52da61902068bb36723f05c846658b6ceb1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite IHt0.",
            "VernacExtend",
            "6c4e824f96296512a78316e523b833cc199248e5"
        ],
        [
            "destruct h.",
            "VernacExtend",
            "ac5c00ffcee6d385c2dbd6b1548e82bb5791bade"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iso1_iso2_2 a (y : {x : t unit & Vector.t a (size x)}) : eq_rect _ (Vector.t a) (projT2 (iso1 (iso2 y))) _ (f_equal (@size unit) (iso1_iso2_1 y)) = projT2 y.",
            "VernacStartTheoremProof",
            "fd667efe8bcb04879bc9e3251ccfe109fdc86b7f"
        ],
        [
            "set (e := (f_equal _ _)).",
            "VernacExtend",
            "09da883a3f9e6df042cc8b7c4cc6eb7cddf8135f"
        ],
        [
            "clearbody e.",
            "VernacExtend",
            "3423d3130faadb6bdd2273eb2d46600b9cfd1dec"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "set (t1 := projT1 (iso1 _)) in *.",
            "VernacExtend",
            "a7e7dd859c439f29659ceb08eb65b104ca6d8212"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "set (e1 := (eq_sym (dim_preservation _ _ _))).",
            "VernacExtend",
            "b31be1d3039875677d1555cb3152715cab083da7"
        ],
        [
            "clearbody e1.",
            "VernacExtend",
            "308538ed5a4aaeb67d0f67fc902a2a9dea102c49"
        ],
        [
            "fold t1 in e1 |- *.",
            "VernacExtend",
            "baa8162e937ffe6a32bc4e2be96edb01af473068"
        ],
        [
            "change (dim (traverse unit unit t1)) with (size t1) in e1 |- *.",
            "VernacExtend",
            "263a2d3db72b7444837024792d5ca2be527748e0"
        ],
        [
            "generalize e e1.",
            "VernacExtend",
            "9bc1c5845ed064151d7fe06205ce31ac4b05a475"
        ],
        [
            "rewrite e.",
            "VernacExtend",
            "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
        ],
        [
            "apply (fun H => K_dec_set H (fun e0 : size x = size x => forall (e2 : dim (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x))))) = size x), eq_rect (size x) (Vector.t a) (eq_rect (dim (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x)))))) (Vector.t a) (pos (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x)))))) (size x) e2) (size x) e0 = t0)).",
            "VernacExtend",
            "be21f86662447bc7ae1896ebe0c94fdf0f93be0c"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "clear e e1 t1.",
            "VernacExtend",
            "87ea05b63503feca9696c77d2458e74aac79c06c"
        ],
        [
            "pose (X := KSmap (traverse a unit) (traverse unit a x)).",
            "VernacExtend",
            "c63d1e5a75d365258bd9570f81dafaa5f390b239"
        ],
        [
            "set (e :=(eq_sym (free_b_dim traverse (a:=unit) a unit x))).",
            "VernacExtend",
            "cff76c3c5b3462351bff5ec83b83fc7bc8dc0a93"
        ],
        [
            "clearbody e.",
            "VernacExtend",
            "3423d3130faadb6bdd2273eb2d46600b9cfd1dec"
        ],
        [
            "change (dim (traverse unit a x)) with (dim X) in e|- *.",
            "VernacExtend",
            "37653d615fdc53ec2064741857094e154504fdd5"
        ],
        [
            "set (a' := eq_rect (size x) _ _ (dim X) e).",
            "VernacExtend",
            "3b9f731871e316c48271a3f8f1c035aa0e5499a9"
        ],
        [
            "change (traverse a unit _) with (peek (k:=X) a').",
            "VernacExtend",
            "5ff1c9d5478afbf61059bbb878a0944f6344e487"
        ],
        [
            "unfold a'; clear a'.",
            "VernacExtend",
            "38b1791bb6321782c4da1cd43d200872563d2bbf"
        ],
        [
            "revert e.",
            "VernacExtend",
            "4811b158d691c94ab1f08ec87b3994375d2608de"
        ],
        [
            "replace X with (duplicate a (traverse unit unit x)); [|rewrite (coalg_duplicate traverse); reflexivity].",
            "VernacExtend",
            "90f99f44e1cccf98718b5d10a9960185cb159f71"
        ],
        [
            "apply (fun H => K_dec_set H (fun e : dim (traverse unit unit x) = dim (duplicate a (traverse unit unit x)) => forall (e1 : dim (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e)) = dim (traverse unit unit x)), eq_rect (dim (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e))) (Vector.t a) (pos (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e))) (dim (traverse unit unit x)) e1 = t0)).",
            "VernacExtend",
            "644feffb66fe0c819b938fc49bdecbe893e17989"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iso1_iso2 a (y : {x : t unit & Vector.t a (size x)}) : (iso1 (iso2 y)) = y.",
            "VernacStartTheoremProof",
            "5ee97e1f52cc1d681466fcba8cc675fdec79d031"
        ],
        [
            "assert (H2 := iso1_iso2_2 y).",
            "VernacExtend",
            "2d87a2004579d4a73ebad11c587a268affa436f7"
        ],
        [
            "revert H2.",
            "VernacExtend",
            "bf608dd02211921a8a3468ac1ffcc4e8bdf3c9e3"
        ],
        [
            "set (e:= (f_equal _ _)).",
            "VernacExtend",
            "09da883a3f9e6df042cc8b7c4cc6eb7cddf8135f"
        ],
        [
            "generalize e; clear e.",
            "VernacExtend",
            "4bc8aaf4ee3af7d80469840376b32fb39016a273"
        ],
        [
            "assert (H2 := iso1_iso2_1 y).",
            "VernacExtend",
            "45306c8d9994d7cace8a2bbab7f03fdf39569974"
        ],
        [
            "revert H2.",
            "VernacExtend",
            "bf608dd02211921a8a3468ac1ffcc4e8bdf3c9e3"
        ],
        [
            "destruct (iso1 (iso2 y)).",
            "VernacExtend",
            "ace67efaefeb1d36eaa30706ee16226241f9c1c2"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros e.",
            "VernacExtend",
            "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
        ],
        [
            "revert t0.",
            "VernacExtend",
            "10806bbab726eb168cd3436f25d8b4bc7cf64ad8"
        ],
        [
            "rewrite e.",
            "VernacExtend",
            "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
        ],
        [
            "intros t0.",
            "VernacExtend",
            "40f9ff2210b79a23ddd0914835d0090a279e138c"
        ],
        [
            "apply (fun H => K_dec_set H (fun e0 : size x0 = size x0 =>eq_rect (size x0) (Vector.t a) t0 (size x0) e0 = t1 -> existT (fun x1 : t unit => Vector.t a (size x1)) x0 t0 = existT (fun x1 : t unit => Vector.t a (size x1)) x0 t1)).",
            "VernacExtend",
            "ccc5c6e2392ba48cde100be6a1373051cf5f1cdc"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros e0; rewrite e0.",
            "VernacExtend",
            "d703480c6fefa3aae416107c991f6f1ea869bd73"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iso_coalg a b (x : t a) : (let (s,v) := iso1 x in kleeneStore (fun b => iso2 (existT _ s b)) v) = traverse a b x.",
            "VernacStartTheoremProof",
            "6f788b3fdb8f8417a4b17947f0c3c5f14b32ae6c"
        ],
        [
            "unfold iso1; simpl.",
            "VernacExtend",
            "18631b9c000ba46efe403185909c3fd89dff13a4"
        ],
        [
            "unfold size; simpl.",
            "VernacExtend",
            "53f1ef26b76253be77523860c90b274f194e2da6"
        ],
        [
            "generalize (eq_sym (dim_preservation unit unit (x:=x) (Vector.const tt (dim (traverse a unit x))))).",
            "VernacExtend",
            "109ba42c92e3b8018c62f4888e92ef0011839f93"
        ],
        [
            "set (e' := (eq_sym (free_b_dim traverse (a:=unit) b unit (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))))).",
            "VernacExtend",
            "4805f59ff753c8d69d4659cba8d4edee93efebfe"
        ],
        [
            "generalize e'.",
            "VernacExtend",
            "2dc0f7d75ad9efa5eec1a1305b7a02cbf1cd7437"
        ],
        [
            "clear e'.",
            "VernacExtend",
            "5f30f14811c4901df828042a9b0d80a9ca3914ad"
        ],
        [
            "rewrite (dim_preservation unit unit (Vector.const tt (dim (traverse a unit x)))).",
            "VernacExtend",
            "0ec556f1cb9575fc7c64d537fc05be02dbef3a06"
        ],
        [
            "set (d:= dim (traverse a unit x)).",
            "VernacExtend",
            "fb768d3c6461e88b34a1e7eea8908bdea1666013"
        ],
        [
            "unfold d at 1 3 4 5 6 8 10 11.",
            "VernacExtend",
            "b27ff96216059e8fed36d055472a434c41fa1e32"
        ],
        [
            "intros e.",
            "VernacExtend",
            "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "revert e.",
            "VernacExtend",
            "4811b158d691c94ab1f08ec87b3994375d2608de"
        ],
        [
            "rewrite <- (free_b_pos traverse (a:=a) b unit x).",
            "VernacExtend",
            "07d397f39ef666cc8f9dffa5823cf004dbda7441"
        ],
        [
            "generalize (free_b_dim traverse (a:=a) b unit x).",
            "VernacExtend",
            "c5cfaf92d07097a2e87309d69ad6ae51e89c5247"
        ],
        [
            "intros e; generalize e; rewrite <- e; clear e.",
            "VernacExtend",
            "46f949e7b108041eb22c9fcc8fc24d4f59a09e20"
        ],
        [
            "apply (fun H => K_dec_set H (fun e : dim (traverse a b x) = dim (traverse a b x) => forall (e0 : dim (traverse a b x) = dim (traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d)))), {| dim := dim (traverse a b x); peek := fun b0 : Vector.t b (dim (traverse a b x)) => peek (k:=traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d))) (eq_rect (dim (traverse a b x)) (Vector.t b) b0 (dim (traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d)))) e0); pos := eq_rect (dim (traverse a b x)) (Vector.t a) (pos (traverse a b x)) (dim (traverse a b x)) e |} = traverse a b x)).",
            "VernacExtend",
            "90ee8fc649bbf68b41d8982a93a5d4f16bf8777e"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros e.",
            "VernacExtend",
            "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
        ],
        [
            "transitivity (kleeneStore (peek (k:=traverse a b x)) (pos (traverse a b x))); [|destruct (traverse a b x); reflexivity].",
            "VernacExtend",
            "4e2f2631ddc685cf15c3a77e6708b3f9c2eb671a"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality; intros v.",
            "VernacExtend",
            "f0f168cc2ac7023c827b1c250dd2eb8df6c327c6"
        ],
        [
            "revert e.",
            "VernacExtend",
            "4811b158d691c94ab1f08ec87b3994375d2608de"
        ],
        [
            "change (forall e : dim (traverse a b x) = (dim (peek (k:=(KSmap (traverse unit b) (traverse a unit x))) (Vector.const tt d))), peek (k:=(peek (k:=KSmap (traverse unit b) (traverse a unit x)) (Vector.const tt d))) (eq_rect (dim (traverse a b x)) (Vector.t b) v (dim (peek (k:=(KSmap (traverse unit b) (traverse a unit x))) (Vector.const tt d))) e) = peek (k:=traverse a b x) v).",
            "VernacExtend",
            "918719fbb71384159de00643d4172ea5121b387b"
        ],
        [
            "change d with (dim (KSmap (traverse unit b) (traverse a unit x))).",
            "VernacExtend",
            "5f3dd28b9e69aabcdee47cf12e3c24645a326ed3"
        ],
        [
            "clear d.",
            "VernacExtend",
            "a191aa7598001bcefdf95c10e68534f45581934f"
        ],
        [
            "set (X:=(KSmap (traverse unit b) (traverse a unit x))).",
            "VernacExtend",
            "aaa1b1f0ab0059ac8de6f547ee91c544f8608b1a"
        ],
        [
            "replace X with (duplicate unit (traverse a b x)) by apply (coalg_duplicate traverse unit b x).",
            "VernacExtend",
            "bbe3c53545274eac4f7d0ee5b18793b2a579a7e9"
        ],
        [
            "clear X.",
            "VernacExtend",
            "42e1c1ca5cee451bb28bc87827e0d0c519748b39"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Traversable.",
            "VernacEndSegment",
            "96e378c5d106f7041b60d4a2e92733a2d7b9cf03"
        ],
        [
            "Record Applicative := applicative { carrier :> Type -> Type ; pure : forall a, a -> carrier a ; ap : forall a b, carrier (a -> b) -> carrier a -> carrier b ; map := fun a b (f : a -> b) x => ap (pure f) x ; _ : forall (a : Type) x, map (fun (y : a) => y) x = x ; _ : forall a b c x y z, ap (ap (map (fun (f : b -> c) (g : a -> b) (w:a) => f (g w)) x) y) z = ap x (ap y z) ; _ : forall a b (f : a -> b) x, map f (pure x) = pure (f x) ; _ : forall a b (f : carrier (a -> b)) x, ap f (pure x) = map (fun g => g x) f }.",
            "VernacInductive",
            "9650f91d3d035e48622ed7d64777fe9ffc6165e2"
        ],
        [
            "Fixpoint sequenceVector n a (F:Applicative) (v: Vector.t (F a) n) : F (Vector.t a n) := match v in Vector.t _ n return F (Vector.t a n) with | Vector.nil => pure _ (Vector.nil _) | Vector.cons h m t => ap (map (fun x => Vector.cons _ x m) h) (sequenceVector t) end.",
            "VernacFixpoint",
            "211b194d1fba5d34ade5c7c0853f3e9e05c821f4"
        ],
        [
            "Definition traverseVector n a b (F:Applicative) (f : a -> F b) (v : Vector.t a n) : F (Vector.t b n) := sequenceVector (Vector.map f v).",
            "VernacDefinition",
            "8e59040a29be3362d7221ce4cfee138b03130181"
        ],
        [
            "Lemma identity_law (F : Applicative) a (x : F a) : map (fun (y : a) => y) x = x.",
            "VernacStartTheoremProof",
            "84dcbea139ae0c06555d2cf189c6a4de63b13ecc"
        ],
        [
            "destruct F.",
            "VernacExtend",
            "e1303f88777128c097feaccddeb2cd8942e777dc"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma composition_law (F : Applicative) a b c x y (z : F a) : ap (ap (map (fun (f : b -> c) (g : a -> b) (w:a) => f (g w)) x) y) z = ap x (ap y z).",
            "VernacStartTheoremProof",
            "608af28c05bdaf429f996cf796ee937bcaf943f5"
        ],
        [
            "destruct F.",
            "VernacExtend",
            "e1303f88777128c097feaccddeb2cd8942e777dc"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homomorphism_law (F : Applicative) a b (f : a -> b) x : ap (pure F f) (pure F x) = pure F (f x).",
            "VernacStartTheoremProof",
            "2596c92d0b0cf7c0ed3e42483729ea0cb192e1bc"
        ],
        [
            "fold (map f (pure F x)).",
            "VernacExtend",
            "95f231ff7c93f67734ef553fa41cafa0ab22a566"
        ],
        [
            "destruct F.",
            "VernacExtend",
            "e1303f88777128c097feaccddeb2cd8942e777dc"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma interchange_law (F : Applicative) a b (f : F (a -> b)) x : ap f (pure F x) = map (fun g => g x) f.",
            "VernacStartTheoremProof",
            "5401d5f6b48b942dd615d0638f2aeaa03c01e151"
        ],
        [
            "destruct F.",
            "VernacExtend",
            "e1303f88777128c097feaccddeb2cd8942e777dc"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_compose a b c (F : Applicative) (g : b -> c) (f: a -> b) (h : a -> c) (x : F a) : (forall x, g (f x) = h x) -> map g (map f x) = map h x.",
            "VernacStartTheoremProof",
            "bb1028bcc5a7f798896582b558882f7268ba0299"
        ],
        [
            "intros H.",
            "VernacExtend",
            "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
        ],
        [
            "unfold map; rewrite <- composition_law.",
            "VernacExtend",
            "753110ca027b027b2a10a409e44b241b0fe9b03b"
        ],
        [
            "unfold map; rewrite !homomorphism_law.",
            "VernacExtend",
            "bb1b1b967c7ee48cae889eeef17cee9c19fd4695"
        ],
        [
            "repeat f_equal.",
            "VernacExtend",
            "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition IdApplicative : Applicative.",
            "VernacDefinition",
            "40c54b7083bba4cfd7858f72c3977431807ab890"
        ],
        [
            "exists (fun A => A) (fun a (x : a) => x) (fun a b (f : a -> b) => f); try reflexivity.",
            "VernacExtend",
            "b1f25566f21bbe1146167efc9f52bd2ae8e0f972"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition NatPlusApplicative : Applicative.",
            "VernacDefinition",
            "4463558560c1a8ece7eee1cefb0643299db10c4a"
        ],
        [
            "exists (fun _ => nat) (fun _ _ => 0) (fun a b => plus).",
            "VernacExtend",
            "a3af42a3c8735b14164e7cb4b5246f2ba5300166"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros _ _ _ x y z.",
            "VernacExtend",
            "c72174ab66d4b56d600c9c1cd063d1328d409321"
        ],
        [
            "apply plus_assoc_reverse.",
            "VernacExtend",
            "070005ab7dc7c0ff455a2fae7e2e9be157b60085"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros _ _ x _.",
            "VernacExtend",
            "f2a3978c978c34e7aed4dccde4a70091cb5cc904"
        ],
        [
            "apply plus_0_r.",
            "VernacExtend",
            "1bb2e62d3f2920b099502f5b5298fe0b404a5dac"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition ConstListApplicative (a : Type) : Applicative.",
            "VernacDefinition",
            "2cff7ef2b01eabad555352fa5b797ce88fc42707"
        ],
        [
            "exists (fun _ => list a) (fun _ _ => nil) (fun _ _ => (@app a)).",
            "VernacExtend",
            "4a3a7dad5ff1159a92215d08385b534f521431f2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros _ _ _ x y z.",
            "VernacExtend",
            "c72174ab66d4b56d600c9c1cd063d1328d409321"
        ],
        [
            "apply app_assoc_reverse.",
            "VernacExtend",
            "b2389261ed5ef59a5c185051f9a62cf60ac3d53b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros _ _ x _.",
            "VernacExtend",
            "f2a3978c978c34e7aed4dccde4a70091cb5cc904"
        ],
        [
            "apply app_nil_r.",
            "VernacExtend",
            "1acc6e41b925ad1735e846b2af9e7fd2a73a745d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition KSpure i j a (x : a) : KleeneStore i j a := kleeneStore (fun v => x) (Vector.nil _).",
            "VernacDefinition",
            "4ebbd423c21e8d3922f8813f6fe893aa2a2968b4"
        ],
        [
            "Definition append_view A n p (P : Vector.t A (n + p) -> Type) : (forall v1 v2, P (Vector.append v1 v2)) -> forall v, P v.",
            "VernacDefinition",
            "2ded9ca266049ce1692d85d2c4021eaa3d67cc09"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "intros f v.",
            "VernacExtend",
            "7f024824679d59817e562487ab467f1cfd4aee11"
        ],
        [
            "apply (f (Vector.nil _)).",
            "VernacExtend",
            "33ae66f40e8a14f488ca62011f2ac7a097a7d82d"
        ],
        [
            "intros f v.",
            "VernacExtend",
            "7f024824679d59817e562487ab467f1cfd4aee11"
        ],
        [
            "replace v with (Vector.cons _ (Vector.hd v) (n + p) (Vector.tl v)).",
            "VernacExtend",
            "3e1d25c04ecb8dbf209fdf880e4456badee59281"
        ],
        [
            "destruct (Vector.tl v) as [v1 v2] using IHn.",
            "VernacExtend",
            "8e4e1660bc44d58fa8e01c27cdbe8f7a3db76577"
        ],
        [
            "apply (f (Vector.cons _ (Vector.hd v) _ v1)).",
            "VernacExtend",
            "8f8df97358972939f3b31e2c4fc4b886fe13834f"
        ],
        [
            "assert (forall m (v : Vector.t A (S m)), Vector.cons A (Vector.hd v) m (Vector.tl v) = v).",
            "VernacExtend",
            "6a9f7ca50c3026084a41de34b86dc4ac38988c5b"
        ],
        [
            "clear -A.",
            "VernacExtend",
            "8bbde9e022a1f94dbc55e4d7811cae01dc79d1d2"
        ],
        [
            "apply Vector.caseS.",
            "VernacExtend",
            "7cc06bafc2c0b4c2e588ee115d9885165728080c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma append_view_append A n p (P : Vector.t A (n + p) -> Type) f v1 v2 : append_view (P:=P) f (Vector.append v1 v2) = f v1 v2.",
            "VernacStartTheoremProof",
            "bc6978fb8c3713b10fb58744be0070d045d24f53"
        ],
        [
            "induction v1.",
            "VernacExtend",
            "8233e58a25881e708b8947eaefec6715fc42d548"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv1.",
            "VernacExtend",
            "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition KSap i j a b (g : KleeneStore i j (a -> b)) (k : KleeneStore i j a) : KleeneStore i j b := kleeneStore (fun v => append_view (P := fun _ => b) (fun v1 v2 => (peek (k:=g) v1) (peek (k:=k) v2)) v) (Vector.append (pos g) (pos k)).",
            "VernacDefinition",
            "0afda4cf3881978a4da6d6a38fade355784aae05"
        ],
        [
            "Lemma KSpure_KSap_KSmap i j a b (f : a -> b) (k : KleeneStore i j a) : KSap (KSpure i j f) k = KSmap f k.",
            "VernacStartTheoremProof",
            "3edd9e03a2f425747ccd9002cc98ab64dca63377"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma KSpure_id i j a (k : KleeneStore i j a) : KSap (KSpure i j (fun x => x)) k = k.",
            "VernacStartTheoremProof",
            "fc9c755cccedba5ec67c69ab29e4fff0ed0471cd"
        ],
        [
            "destruct k.",
            "VernacExtend",
            "276a2174e55489a07c8e0fd8db1630e98ae9c376"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivalent_KS i j a (dim1 dim2 : nat) (peek1 : Vector.t j dim1 -> a) (peek2 : Vector.t j dim2 -> a) (pos1 : Vector.t i dim1) (pos2 : Vector.t i dim2) (e : dim1 = dim2) : (forall (v1 : Vector.t j dim1) (v2 : Vector.t j dim2), (eq_rect _ _ v1 _ e) = v2 -> peek1 v1 = peek2 v2) -> eq_rect _ _ pos1 _ e = pos2 -> kleeneStore peek1 pos1 = kleeneStore peek2 pos2.",
            "VernacStartTheoremProof",
            "c9545ea361bc9a458cd219be89aaa01973ff9a73"
        ],
        [
            "intros Hpeek Hpos.",
            "VernacExtend",
            "95929025efba9eab1ef9c2707f2b1db463b77a1b"
        ],
        [
            "transitivity (kleeneStore (fun v => peek1 (eq_rect _ _ v _ (eq_sym e))) (eq_rect _ _ pos1 _ e)).",
            "VernacExtend",
            "ae0364e00d7f0eae6da2249aa7d4c778900292c5"
        ],
        [
            "clear Hpeek Hpos.",
            "VernacExtend",
            "ca6bf49790ee1b63e3499a13406314991dd0843c"
        ],
        [
            "generalize e.",
            "VernacExtend",
            "6531a90dcea6ccb14823627ef81b68708e51e645"
        ],
        [
            "rewrite <- e.",
            "VernacExtend",
            "038d705295bc042ea4f7eab695069943e9f585f2"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite Hpos.",
            "VernacExtend",
            "0c3a64985e5fcb13c0e749f852e1e9610ba931bb"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality; intros v.",
            "VernacExtend",
            "f0f168cc2ac7023c827b1c250dd2eb8df6c327c6"
        ],
        [
            "apply Hpeek.",
            "VernacExtend",
            "421ec11098a6154d297df2be09a41a97eb68a60e"
        ],
        [
            "generalize e.",
            "VernacExtend",
            "6531a90dcea6ccb14823627ef81b68708e51e645"
        ],
        [
            "rewrite e.",
            "VernacExtend",
            "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
        ],
        [
            "apply K_dec_set.",
            "VernacExtend",
            "1433f227a3b1332604e31b26476cfee592fad273"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma composition_KS i j a b c x y (z : KleeneStore i j a) : KSap (KSap (KSap (KSpure i j (fun (f : b -> c) (g : a -> b) (x : a) => f (g x))) x) y) z = KSap x (KSap y z).",
            "VernacStartTheoremProof",
            "ab591f1b33cbcca49f47eb3eef087feca050bac9"
        ],
        [
            "destruct x; destruct y; destruct z.",
            "VernacExtend",
            "7efe0b53954a08107bc20c48d2a99f39d419a4b0"
        ],
        [
            "unfold KSap.",
            "VernacExtend",
            "f0ab55bf5b54dc87d72ec411040831cda664e62a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply (equivalent_KS (e:=(eq_sym (plus_assoc dim0 dim1 dim2)))).",
            "VernacExtend",
            "2256abbe8d802c2e09f37ba3e46448f407b55f13"
        ],
        [
            "intros v1 v2.",
            "VernacExtend",
            "4b0633b0986b00376ef8bea145410b501f7ac049"
        ],
        [
            "pattern v1; apply append_view; intros v1' v1c.",
            "VernacExtend",
            "9b378c7c7e7827729164713c7e88eee1170da622"
        ],
        [
            "pattern v1'; apply append_view; intros v1a v1b.",
            "VernacExtend",
            "a4b78627a4c268685654e01af6fff142eb6ad754"
        ],
        [
            "pattern v2; apply append_view; intros v2a v2'.",
            "VernacExtend",
            "f61d8e06ef3411f082835a660ba9a2aa81e9580e"
        ],
        [
            "pattern v2'; apply append_view; intros v2b v2c.",
            "VernacExtend",
            "84f455260f85db24c52448615fd8e24b09fba6b0"
        ],
        [
            "repeat rewrite append_view_append.",
            "VernacExtend",
            "6f7466b0cd15f60985e6e0ad54279fe75bff154d"
        ],
        [
            "clear -v2c.",
            "VernacExtend",
            "28041f489297eefc44787a752a1ed59d20d078ff"
        ],
        [
            "rewrite <- (append_assoc _ _ _ (plus_assoc _ _ _)).",
            "VernacExtend",
            "1a9caebcd7483bbdafade28e0a4087523af948bf"
        ],
        [
            "generalize (eq_sym (plus_assoc dim0 dim1 dim2)).",
            "VernacExtend",
            "d27af0a88ede5da4a7160b524a3a0e5793ac868f"
        ],
        [
            "generalize (plus_assoc dim0 dim1 dim2).",
            "VernacExtend",
            "dd0ac5c796aca8fb689e512558645dbb5dcf83a8"
        ],
        [
            "intros e; generalize e; rewrite <- e; clear e.",
            "VernacExtend",
            "46f949e7b108041eb22c9fcc8fc24d4f59a09e20"
        ],
        [
            "intros e; pattern e; apply K_dec_set; clear e.",
            "VernacExtend",
            "15b771c5fbba3b3e7919fe250cebf551a9143977"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "intros e; pattern e; apply K_dec_set; clear e.",
            "VernacExtend",
            "15b771c5fbba3b3e7919fe250cebf551a9143977"
        ],
        [
            "decide equality.",
            "VernacExtend",
            "10aba07d521545accbb51a4c2e0695a9ddce3199"
        ],
        [
            "simpl; intros H.",
            "VernacExtend",
            "b5476f89307becbcdf3b38db9846f4e56f6d806f"
        ],
        [
            "destruct (append_inj H) as [H0 H'].",
            "VernacExtend",
            "2023283db94443ccbc71eec3745d11aa6fa68aa6"
        ],
        [
            "destruct (append_inj H') as [H1 H2].",
            "VernacExtend",
            "175e0d44afd44a524424915df95c19fcfce8805b"
        ],
        [
            "rewrite H0, H1, H2.",
            "VernacExtend",
            "cd3fdf72e4e686d2bbce96455d5c26ea96210738"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "clear -i.",
            "VernacExtend",
            "853bac592d8a2336003dd9e5fa5759db2ca873db"
        ],
        [
            "apply to_list_eq.",
            "VernacExtend",
            "31e69a983ee53b165576561a49779d0799315791"
        ],
        [
            "induction pos0.",
            "VernacExtend",
            "3cca325f7aa043459d51a6dd9df9b2832a0bf99a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Vector.to_list in *.",
            "VernacExtend",
            "48d4a2f4cee5b51a91372b4196cf676df2484a35"
        ],
        [
            "rewrite IHpos0.",
            "VernacExtend",
            "e22e70325197f9a5538692dd62f653d12bd86848"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma KSpure_KSpure i j a b (f : a -> b) (x : a): KSap (KSpure i j f) (KSpure i j x) = KSpure i j (f x).",
            "VernacStartTheoremProof",
            "a788e4cf32156bba7797982333198d552f59da58"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma interchange_KSpure i j a b (f : KleeneStore i j (a -> b)) (x : a): KSap f (KSpure i j x) = KSap (KSpure i j (fun f => f x)) f.",
            "VernacStartTheoremProof",
            "0087c79ce7656be8c3792e152e5ae9c20141f237"
        ],
        [
            "destruct f as [dimf peekf posf].",
            "VernacExtend",
            "35e6e8d9208c6a2213ce4ecf6c9c028402115cc0"
        ],
        [
            "unfold KSap.",
            "VernacExtend",
            "f0ab55bf5b54dc87d72ec411040831cda664e62a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply (equivalent_KS (e:=(eq_sym (plus_0_r dimf)))).",
            "VernacExtend",
            "ffab5137a3fc21add6f6ef5206a35f34d159c5ba"
        ],
        [
            "intros v1 v2 Hv.",
            "VernacExtend",
            "7d12d8a103e4b052adb4aab3ac681c7f86c2b38c"
        ],
        [
            "replace v2 with (Vector.append v1 (Vector.nil _)).",
            "VernacExtend",
            "ea257a6fb30b9b93eb22725d41165db01197ea55"
        ],
        [
            "rewrite append_view_append; reflexivity.",
            "VernacExtend",
            "379b93d1cea76ac8a6081eef6e99dbc6c0d50303"
        ],
        [
            "rewrite <- Hv.",
            "VernacExtend",
            "b431c79ef7b5eaca13f0994a796bd709d6bf7375"
        ],
        [
            "clear -v1.",
            "VernacExtend",
            "c1d51939a1d54b6d71a5f1fb6218372191305fc8"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply to_list_eq.",
            "VernacExtend",
            "31e69a983ee53b165576561a49779d0799315791"
        ],
        [
            "induction v1.",
            "VernacExtend",
            "8233e58a25881e708b8947eaefec6715fc42d548"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Vector.to_list in *.",
            "VernacExtend",
            "48d4a2f4cee5b51a91372b4196cf676df2484a35"
        ],
        [
            "rewrite IHv1.",
            "VernacExtend",
            "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply to_list_eq.",
            "VernacExtend",
            "31e69a983ee53b165576561a49779d0799315791"
        ],
        [
            "clear -posf.",
            "VernacExtend",
            "0606c9947ede595aadf4fa86005331965f16cb67"
        ],
        [
            "induction posf.",
            "VernacExtend",
            "54efc84f3337ca77428a017e0e7adbc426d3a82d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Vector.to_list in *.",
            "VernacExtend",
            "48d4a2f4cee5b51a91372b4196cf676df2484a35"
        ],
        [
            "rewrite IHposf.",
            "VernacExtend",
            "5dbad2835192c296fead01d58d6b2aa6d52ef7b5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition KSApplicative (i j : Type) : Applicative.",
            "VernacDefinition",
            "4cc45ffb6bc267fc90a151849ba0a8fa421602b7"
        ],
        [
            "exists (KleeneStore i j) (KSpure i j) (@KSap i j).",
            "VernacExtend",
            "36b9444cb475c0bf7ecf8c9bd2cb94ddb38d43e0"
        ],
        [
            "apply KSpure_id.",
            "VernacExtend",
            "6e753cd992e75262067c1a9110e5ddf819c3b987"
        ],
        [
            "apply composition_KS.",
            "VernacExtend",
            "bbe2e3871fd91f568ed3c338643634c70f56366f"
        ],
        [
            "apply KSpure_KSpure.",
            "VernacExtend",
            "934fcbc3a43380c2b8955db0ae4924deafa12ace"
        ],
        [
            "apply interchange_KSpure.",
            "VernacExtend",
            "d57771867f138d0d10c1495d6654c90e8b0d4ce7"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Section ComposeApplicative.",
            "VernacBeginSection",
            "251f6bb780c62cab03ec32a67ffb4d4df21f8349"
        ],
        [
            "Variable (F G :Applicative).",
            "VernacAssumption",
            "23c7636b2595c2a9581b686145fa946e8bebf4e5"
        ],
        [
            "Let FG (a:Type) := F (G a).",
            "VernacDefinition",
            "ee264f94b8362a0b188ed9f1cdd1da299b35f710"
        ],
        [
            "Definition Compose_pure (a:Type) (x:a) : FG a := pure F (pure G x).",
            "VernacDefinition",
            "4978f03498f03a0d2ff71da2d0c2a4c894a85ab3"
        ],
        [
            "Definition Compose_ap (a b:Type) (f:FG (a -> b)) (x:FG a) : FG b := ap (ap (pure F (fun g x => ap g x)) f) x.",
            "VernacDefinition",
            "9f227f9671000d61d80f05353bc05002aa1ae891"
        ],
        [
            "Lemma Compose_identity (a:Type) (x : FG a): Compose_ap (Compose_pure (fun y : a => y)) x = x.",
            "VernacStartTheoremProof",
            "3f5d22d4990674e59beac6d3ee5d4c95578e04e0"
        ],
        [
            "unfold Compose_ap, Compose_pure.",
            "VernacExtend",
            "52117850a88906872726c758c38a9c195dd172b9"
        ],
        [
            "rewrite homomorphism_law.",
            "VernacExtend",
            "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
        ],
        [
            "replace (fun x0 : G a => ap (a:=G) (a0:=a) (b:=a) (pure G (fun y : a => y)) x0) with (fun (y : G a) => y).",
            "VernacExtend",
            "1cec791b32c05883f99005b2204706bdb45db503"
        ],
        [
            "apply identity_law.",
            "VernacExtend",
            "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
        ],
        [
            "apply functional_extensionality; intro y.",
            "VernacExtend",
            "e3c8f46be89ddd936f80438ca48795b71d827640"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply identity_law.",
            "VernacExtend",
            "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Compose_composition (a b c:Type) x y (z : FG a) : Compose_ap (Compose_ap (Compose_ap (Compose_pure (fun (f : b -> c) (g : a -> b) (w:a) => f (g w))) x) y) z = Compose_ap x (Compose_ap y z).",
            "VernacStartTheoremProof",
            "b5421573c73542752f73ee4b05d2385326c90b0d"
        ],
        [
            "unfold Compose_ap, Compose_pure.",
            "VernacExtend",
            "52117850a88906872726c758c38a9c195dd172b9"
        ],
        [
            "repeat rewrite homomorphism_law.",
            "VernacExtend",
            "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
        ],
        [
            "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
            "VernacExtend",
            "f5aa78392c04a40675db451d8176aefc979abae6"
        ],
        [
            "unfold map; simpl; repeat rewrite homomorphism_law.",
            "VernacExtend",
            "e2ad0bf2d68c31df353087b3204df611aaa1759b"
        ],
        [
            "repeat rewrite interchange_law.",
            "VernacExtend",
            "679344af48000ab6217a6a994d8b34b76c11125d"
        ],
        [
            "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
            "VernacExtend",
            "f5aa78392c04a40675db451d8176aefc979abae6"
        ],
        [
            "unfold map; simpl; repeat rewrite homomorphism_law.",
            "VernacExtend",
            "e2ad0bf2d68c31df353087b3204df611aaa1759b"
        ],
        [
            "replace (fun (w : G (b -> c)) (w0 : G (a -> b)) (x0 : G a) => ap (a:=G) (a0:=a) (b:=c) (ap (a:=G) (a0:=a -> b) (b:=a -> c) (ap (a:=G) (a0:=b -> c) (b:=(a -> b) -> a -> c) (pure G (fun (f : b -> c) (g : a -> b) (w1 : a) => f (g w1))) w) w0) x0) with (fun (w : G (b -> c)) (w0 : G (a -> b)) (w1 : G a) => ap (a:=G) (a0:=b) (b:=c) w (ap (a:=G) (a0:=a) (b:=b) w0 w1)).",
            "VernacExtend",
            "1633601aedb0fbb5b2a334d4ad8cc24519b2ecd8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat (apply functional_extensionality; intro).",
            "VernacExtend",
            "68fec5b98ab4a8bdd25eb93f9e3fc20717d834ca"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply composition_law.",
            "VernacExtend",
            "207c5038608d3b22be514f6cbf64ae57284b86fe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Compose_homomorphism a b (f : a -> b) x : Compose_ap (Compose_pure f) (Compose_pure x) = Compose_pure (f x).",
            "VernacStartTheoremProof",
            "dedf0f748a535ac95983a6f9793ece110a53b845"
        ],
        [
            "unfold Compose_ap, Compose_pure.",
            "VernacExtend",
            "52117850a88906872726c758c38a9c195dd172b9"
        ],
        [
            "repeat rewrite homomorphism_law.",
            "VernacExtend",
            "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Compose_interchange a b (f : FG (a -> b)) x : Compose_ap f (Compose_pure x) = Compose_ap (Compose_pure (fun g => g x)) f.",
            "VernacStartTheoremProof",
            "16ef10236ab5f1f3ab0dac99a4a3d87670b57820"
        ],
        [
            "unfold Compose_ap, Compose_pure.",
            "VernacExtend",
            "52117850a88906872726c758c38a9c195dd172b9"
        ],
        [
            "repeat rewrite homomorphism_law.",
            "VernacExtend",
            "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
        ],
        [
            "repeat rewrite interchange_law.",
            "VernacExtend",
            "679344af48000ab6217a6a994d8b34b76c11125d"
        ],
        [
            "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
            "VernacExtend",
            "f5aa78392c04a40675db451d8176aefc979abae6"
        ],
        [
            "repeat rewrite interchange_law.",
            "VernacExtend",
            "679344af48000ab6217a6a994d8b34b76c11125d"
        ],
        [
            "unfold map; simpl; repeat rewrite homomorphism_law.",
            "VernacExtend",
            "e2ad0bf2d68c31df353087b3204df611aaa1759b"
        ],
        [
            "replace (fun w : G (a -> b) => ap (a:=G) (a0:=a) (b:=b) w (pure G x)) with (fun x0 : G (a -> b) => ap (a:=G) (a0:=a -> b) (b:=b) (pure G (fun g : a -> b => g x)) x0).",
            "VernacExtend",
            "65962b0da869f7a2454f1a1eb7833618b0bdbe43"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply functional_extensionality; intro.",
            "VernacExtend",
            "f3c604ae176c5a963bda3c0a2df4c82ec46e027b"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply interchange_law.",
            "VernacExtend",
            "fc638a5a4ed600439051e1558c698f9ee083edcb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ComposeApplicative : Applicative.",
            "VernacDefinition",
            "c7d3319ab71ff833526cb4c9ae87011779a1cac7"
        ],
        [
            "exists FG Compose_pure Compose_ap.",
            "VernacExtend",
            "ccb606cbdf98a187aff221f7db43d56e4ee27bcf"
        ],
        [
            "apply Compose_identity.",
            "VernacExtend",
            "4366237b6eb7130911da1647298b26278e18b288"
        ],
        [
            "apply Compose_composition.",
            "VernacExtend",
            "c3d1ef6560caf0e20407353410247c159ef455da"
        ],
        [
            "apply Compose_homomorphism.",
            "VernacExtend",
            "2d37f55973705b84d1471be84f977c35c41238b6"
        ],
        [
            "apply Compose_interchange.",
            "VernacExtend",
            "cb156dab7f167098d26e6f55e5dab6e1e7e8ae0c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End ComposeApplicative.",
            "VernacEndSegment",
            "27cbb1f8942a78441f21c7f80ae720e372592d6b"
        ],
        [
            "Lemma sequenceVector_Id n a (v: Vector.t a n) : sequenceVector (F:=IdApplicative) v = v.",
            "VernacStartTheoremProof",
            "e92b399b1f20cdf1e168f4563fd7711dd19a4d1f"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv.",
            "VernacExtend",
            "d570bae52c78555f17eecb129b7bf9ea398c0157"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sequenceVector_map n a b (F:Applicative) (f : a -> b) (v :Vector.t (F a) n) : map (Vector.map f) (sequenceVector v) = sequenceVector (Vector.map (map f) v).",
            "VernacStartTheoremProof",
            "d359d04ff4588e09e341d7f9571efa1bac80734d"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "unfold map; simpl.",
            "VernacExtend",
            "077c6c5584153664e735f893b6fbd7dc9207967b"
        ],
        [
            "rewrite homomorphism_law.",
            "VernacExtend",
            "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- IHv.",
            "VernacExtend",
            "8eadb789af177fe704cb2a0e227c181d84af98b2"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sequenceVector_compose n a (F G:Applicative) (v :Vector.t (F (G a)) n) : sequenceVector (F:=ComposeApplicative F G) v = map (fun x => sequenceVector x) (sequenceVector v).",
            "VernacStartTheoremProof",
            "6369ec9b79f479a7cd577d473184ba60ecfd99f2"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold map.",
            "VernacExtend",
            "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
        ],
        [
            "rewrite homomorphism_law.",
            "VernacExtend",
            "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHv.",
            "VernacExtend",
            "d570bae52c78555f17eecb129b7bf9ea398c0157"
        ],
        [
            "unfold map.",
            "VernacExtend",
            "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
        ],
        [
            "unfold Compose_ap, Compose_pure.",
            "VernacExtend",
            "52117850a88906872726c758c38a9c195dd172b9"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sequenceVector_append n m a (F:Applicative) (v1:Vector.t (F a) n) (v2:Vector.t (F a) m) : sequenceVector (Vector.append v1 v2) = ap (map (fun x y => Vector.append x y) (sequenceVector v1)) (sequenceVector v2).",
            "VernacStartTheoremProof",
            "6f0424b352d95d7883d015116e1ddbb1df0182a5"
        ],
        [
            "induction v1; simpl.",
            "VernacExtend",
            "1e34611a454855eca9c18c4354315b92ed75f45c"
        ],
        [
            "unfold map; rewrite homomorphism_law; simpl.",
            "VernacExtend",
            "d52a6af6d9d41bd85db088b4630947c6eb1080e5"
        ],
        [
            "symmetry; apply identity_law.",
            "VernacExtend",
            "4f18ac84e400847808381ccfc667cd3390217f52"
        ],
        [
            "rewrite IHv1; clear IHv1.",
            "VernacExtend",
            "eeb2f7f96818b9797193495fbea392ae167cb992"
        ],
        [
            "unfold map.",
            "VernacExtend",
            "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record IdiomaticTransformation (F G:Applicative) := idiomaticTransformation { transform :> forall a, F a -> G a ; _ : forall a (x:a), transform (pure F x) = pure G x ; _ : forall a b (f : F (a -> b)) x, transform (ap f x) = ap (transform f) (transform x) }.",
            "VernacInductive",
            "9134ef47f2d81388608869229eb79d70f7f644b1"
        ],
        [
            "Section IdiomaticTransformation.",
            "VernacBeginSection",
            "2ea1cef75bbb9d59e7070a0c06b86ae17b9c09d5"
        ],
        [
            "Variables (F G:Applicative).",
            "VernacAssumption",
            "23c7636b2595c2a9581b686145fa946e8bebf4e5"
        ],
        [
            "Variable (eta : IdiomaticTransformation F G).",
            "VernacAssumption",
            "03a9fece970abe494d3e99425efa32c8b38709b1"
        ],
        [
            "Lemma idiomaticTransform_pure a (x:a) : eta _ (pure F x) = pure G x.",
            "VernacStartTheoremProof",
            "0c7b345732ef38f5fdb323cb649f01bc8a720872"
        ],
        [
            "destruct eta.",
            "VernacExtend",
            "56d2a4bc3e0774100be698221c898df2f6715fbb"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma idiomaticTransform_ap a b (f: F (a -> b)) (x: F a) : eta _ (ap f x) = ap (eta _ f) (eta _ x).",
            "VernacStartTheoremProof",
            "2a94c641b3333ea7cfd9a2e17b158e37ae9ced54"
        ],
        [
            "destruct eta.",
            "VernacExtend",
            "56d2a4bc3e0774100be698221c898df2f6715fbb"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma idiomaticTransform_map a b (f: a -> b) (x: F a) : eta _ (map f x) = map f (eta _ x).",
            "VernacStartTheoremProof",
            "6086c7472de8104f8d4110745b976fb5a76c17d6"
        ],
        [
            "unfold map.",
            "VernacExtend",
            "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
        ],
        [
            "rewrite idiomaticTransform_ap, idiomaticTransform_pure.",
            "VernacExtend",
            "14376b4367ca4481d66fe3d33eb2562aa9f70626"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma idiomaticTransform_sequenceVector n a (v : Vector.t (F a) n) : eta _ (sequenceVector v) = sequenceVector (Vector.map (eta _) v).",
            "VernacStartTheoremProof",
            "aae6a7baaad18b5faf4e0f8c8dc20f204f28e39a"
        ],
        [
            "induction v.",
            "VernacExtend",
            "10789bb90c6621e796afae189b61bc10f356257b"
        ],
        [
            "apply idiomaticTransform_pure.",
            "VernacExtend",
            "3dce977bbe3ac0775fff7f1c4b3123c8a3cd80bc"
        ],
        [
            "simpl; rewrite idiomaticTransform_ap, idiomaticTransform_map, IHv.",
            "VernacExtend",
            "1830ca98ffd84e906198db4c887eb3a2561da74e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma idiomaticTransform_traverseVector n a b (f : a -> F b) (v : Vector.t a n) : eta _ (traverseVector f v) = traverseVector (fun y => eta _ (f y)) v.",
            "VernacStartTheoremProof",
            "125aabe7775ecc3d7dc4fe544f97ebe3282b7532"
        ],
        [
            "unfold traverseVector.",
            "VernacExtend",
            "74337443214591e61fadcaba257fa05a181657a2"
        ],
        [
            "rewrite idiomaticTransform_sequenceVector.",
            "VernacExtend",
            "adcb3001075e811965cd20039ef9978be7e751f5"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply Vector_map_compose.",
            "VernacExtend",
            "ae075cab0eb9ce350ed2621267907c82fcb6ff8c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IdiomaticTransformation.",
            "VernacEndSegment",
            "9bd920d23e43885faa05db07339da40a8662f2d7"
        ],
        [
            "Lemma extract_pure i a (x : a) : extract (KSpure i i x) = x.",
            "VernacStartTheoremProof",
            "c46a8f0900d35036a18fed87ac77c1a90fa90012"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extract_ap i a b (f : KleeneStore i i (a -> b)) (x : KleeneStore i i a) : extract (KSap f x) = extract f (extract x).",
            "VernacStartTheoremProof",
            "e1c80f5aa1229645ea514c45d6ba04bd874107e1"
        ],
        [
            "destruct f; destruct x.",
            "VernacExtend",
            "88e11e7b769723016fb41c4271828a18941b386a"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite append_view_append.",
            "VernacExtend",
            "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition extractIT i : IdiomaticTransformation (KSApplicative i i) IdApplicative.",
            "VernacDefinition",
            "8ef7728d2ccb41404d7c5e4da3fc50d17478e2f9"
        ],
        [
            "exists (@extract i).",
            "VernacExtend",
            "1cb92db2106b55244346e1d10107ec867a5760c2"
        ],
        [
            "exact (@extract_pure i).",
            "VernacExtend",
            "5aa61debdceae837e5b8015d96565d09aa24fdd8"
        ],
        [
            "exact (@extract_ap i).",
            "VernacExtend",
            "4c6bfdb1c694874089d8dc13fe638b33a6b2bd5f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma duplicate_pure i j k a (x : a) : duplicate j (KSpure i k x) = KSpure i j (KSpure j k x).",
            "VernacStartTheoremProof",
            "0585f90fa6ec15ef314a8e3fd988d3f25806b7d7"
        ],
        [
            "unfold KSpure, duplicate.",
            "VernacExtend",
            "3b627220a3e67b03ddbd5cd9ed0e71b66d670b3e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "apply Vector.case0.",
            "VernacExtend",
            "b4fef8c44c49d28962385a2235ccd2bf370820f5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma duplicate_ap i j k a b (f : KleeneStore i k (a -> b)) (x : KleeneStore i k a): duplicate j (KSap f x) = ap (a:=ComposeApplicative (KSApplicative i j) (KSApplicative j k)) (duplicate j f) (duplicate j x).",
            "VernacStartTheoremProof",
            "4542a44944f4cffdd6421d32a82cef7c7dfe8dc4"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold KSap, duplicate.",
            "VernacExtend",
            "24e1a8d83fe9e5fbfc19a204d779889b6766e245"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "apply append_view; intros v1 v2.",
            "VernacExtend",
            "6480aab32b602745ce72a8e56ad8fd09f5681212"
        ],
        [
            "rewrite append_view_append.",
            "VernacExtend",
            "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition duplicateIT i j k : IdiomaticTransformation (KSApplicative i k) (ComposeApplicative (KSApplicative i j) (KSApplicative j k)).",
            "VernacDefinition",
            "6101348880b5ce84453972f6c6db8f94eefdbe23"
        ],
        [
            "exists (@duplicate i j k).",
            "VernacExtend",
            "c07489bbd2788447d3fb8bea01fe902398acc5c5"
        ],
        [
            "exact (@duplicate_pure i j k).",
            "VernacExtend",
            "cb574c7f8b9c30abbdd399357fddb2499bd9661c"
        ],
        [
            "exact (@duplicate_ap i j k).",
            "VernacExtend",
            "093462c93ec00fcdb4271425ad666f7c13905871"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition dimIT i j : IdiomaticTransformation (KSApplicative i j) NatPlusApplicative.",
            "VernacDefinition",
            "794e5a3003d8bd65d3097d02dce966bc66c4472f"
        ],
        [
            "exists (@dim i j).",
            "VernacExtend",
            "1cefbecc38412e26f4c87cb4aaa169aeb7a84812"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma pos_ap i j a b (f : KleeneStore i j (a -> b)) (x : KleeneStore i j a) : Vector.to_list (pos (KSap f x)) = app (Vector.to_list (pos f)) (Vector.to_list (pos x)).",
            "VernacStartTheoremProof",
            "dad726bc209b64b3a99cfe993458965c553991ca"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (pos f).",
            "VernacExtend",
            "8003300266c53a8fa2df3757893c70162d8c4191"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold Vector.to_list in *.",
            "VernacExtend",
            "48d4a2f4cee5b51a91372b4196cf676df2484a35"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite IHt.",
            "VernacExtend",
            "d7c6a10da1c3b93e6cd1b076977ec06f52b9b586"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition posIT i j : IdiomaticTransformation (KSApplicative i j) (ConstListApplicative i).",
            "VernacDefinition",
            "a5b859e7e517d635b0c06394a3fff4ddda4dd484"
        ],
        [
            "exists (fun a (x : KSApplicative i j a) => Vector.to_list (pos x)).",
            "VernacExtend",
            "aa550d1e2bc6ec679cc912443916762dbfa54a59"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply (@pos_ap i j).",
            "VernacExtend",
            "d0398ddf966ea70b01afc50bec6f05ddd72bbfb7"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Section Research.",
            "VernacBeginSection",
            "97a119adae707840e32b93222cad07d09b1824c4"
        ],
        [
            "Variables (F:Applicative) (a b : Type) (h : a -> F b).",
            "VernacAssumption",
            "24eddb6c9d86d5eae8caa284d23927f4fef2cc23"
        ],
        [
            "Definition research c (k : KSApplicative a b c) : F c := map (peek (k:=k)) (sequenceVector (Vector.map h (pos k))).",
            "VernacDefinition",
            "e33eb8006b277a135ed46847b0e225c1b659586a"
        ],
        [
            "Lemma research_pure c (x : c) : research (pure _ x) = pure _ x.",
            "VernacStartTheoremProof",
            "ca1258a0996057e644115d02c9445dd6ed4aaea6"
        ],
        [
            "apply homomorphism_law.",
            "VernacExtend",
            "82721c599eb932b909607d3bd42f75ce546cfdb8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma research_ap c d (f : KSApplicative a b (c -> d)) (x : KSApplicative a b c): research (ap f x) = ap (research f) (research x).",
            "VernacStartTheoremProof",
            "71d689cd461a8928448f4f11ec809a0ea1eac0bf"
        ],
        [
            "unfold research; simpl.",
            "VernacExtend",
            "153562ad6550731b8e11c870650fc8d25eb86d29"
        ],
        [
            "unfold map; simpl.",
            "VernacExtend",
            "077c6c5584153664e735f893b6fbd7dc9207967b"
        ],
        [
            "rewrite Vector_map_append, sequenceVector_append.",
            "VernacExtend",
            "a0e8cf1427394161c78cb0989f96eabccbdd047a"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "repeat f_equal.",
            "VernacExtend",
            "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
        ],
        [
            "apply functional_extensionality_dep; intros v1.",
            "VernacExtend",
            "c91d79a99b70e535d0398a3fefab49ce24f992d5"
        ],
        [
            "apply functional_extensionality; intros v2.",
            "VernacExtend",
            "3e2224b1ef5fbdcf5c4c78390b46e154dd0b09b9"
        ],
        [
            "rewrite append_view_append.",
            "VernacExtend",
            "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Research : IdiomaticTransformation (KSApplicative a b) F.",
            "VernacDefinition",
            "0695062012622fb131c0998df9811ea7eab32a7d"
        ],
        [
            "exists research.",
            "VernacExtend",
            "f3598f49c65754d6e619042a565ae1a88b7d0970"
        ],
        [
            "exact research_pure.",
            "VernacExtend",
            "0b71a9d7bf6845fdd2531a1055fc898114bcc976"
        ],
        [
            "exact research_ap.",
            "VernacExtend",
            "7b05d61e985649a9507b87bd9f396969beaeedcf"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Research.",
            "VernacEndSegment",
            "c8fb4ea1d27461b838c75d43fd8e75baaeba39a4"
        ],
        [
            "Record Traversal := traversal { container :> Type -> Type ; traverse : forall a b (F : Applicative), (a -> F b) -> container a -> F (container b) ; free_applicative : forall a b (F G : Applicative) (eta : IdiomaticTransformation F G) (f : a -> F b) (x : container a), eta _ (traverse f x) = traverse (fun y => eta _ (f y)) x ; traverse_identity : forall a (x : container a), traverse (F:=IdApplicative) (fun y => y) x = x ; traverse_compose : forall a b c (F G : Applicative) (f : a -> F b) (g : b -> G c) (x : container a), traverse (F:=ComposeApplicative F G) (fun y => map g (f y)) x = map (traverse g) (traverse f x) }.",
            "VernacInductive",
            "534dc7a70cc6044dfe92db11904fb74f7e375d45"
        ],
        [
            "Lemma traverseVector_free_applicative n a b (F G : Applicative) (eta :IdiomaticTransformation F G) (f : a -> F b) (x : Vector.t a n) : eta _ (traverseVector f x) = traverseVector (fun y => eta _ (f y)) x.",
            "VernacStartTheoremProof",
            "beda0daeb20ba453bc5fa9518ffae325754e562d"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "unfold traverseVector; simpl.",
            "VernacExtend",
            "b8cbbce4cd3436e266e1241c914da925ebbdef40"
        ],
        [
            "rewrite idiomaticTransform_pure.",
            "VernacExtend",
            "ae6047d3ee0e92d87532731788f4303fb2003514"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold traverseVector in *; simpl.",
            "VernacExtend",
            "6ab494717ffe8fa8be54bd520c0e332f92dca404"
        ],
        [
            "rewrite idiomaticTransform_ap, idiomaticTransform_map.",
            "VernacExtend",
            "a7d29b60320a01437a08a8b1ff387777d6ff3997"
        ],
        [
            "rewrite IHx.",
            "VernacExtend",
            "357385fc8aa6d86ac175f8be191ce152840328d1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma traverseVector_identity n a (x : Vector.t a n) : traverseVector (F:=IdApplicative) (fun y => y) x = x.",
            "VernacStartTheoremProof",
            "c21606619bf9c9299fd9bea54410d7acacb94f33"
        ],
        [
            "unfold traverseVector.",
            "VernacExtend",
            "74337443214591e61fadcaba257fa05a181657a2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Vector_map_id.",
            "VernacExtend",
            "6cb9e611c58a4d655e40c5454f0f7cf46bcd4fb4"
        ],
        [
            "apply (sequenceVector_Id x).",
            "VernacExtend",
            "aafa173db71c96df4b2f2674077b0c778e291a91"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma traverseVector_compose n a b c (F G : Applicative) (f : a -> F b) (g : b -> G c) (x : Vector.t a n) : traverseVector (F:=ComposeApplicative F G) (fun y => map g (f y)) x = map (traverseVector g) (traverseVector f x).",
            "VernacStartTheoremProof",
            "2f0b894578034690a6bb91a1e83e454308352f5e"
        ],
        [
            "unfold traverseVector.",
            "VernacExtend",
            "74337443214591e61fadcaba257fa05a181657a2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite (sequenceVector_compose (Vector.map (fun y : a => map (a:=F) g (f y)) x)).",
            "VernacExtend",
            "4b06e57251df65dffb3005a15b586c6f7a217587"
        ],
        [
            "rewrite <- (Vector_map_compose (g:=map (a:=F) g) (f:=f) (h:= (fun y : a => map (a:=F) g (f y)))); [|reflexivity].",
            "VernacExtend",
            "852672df22f0f5b8901b01d09914362953e82d06"
        ],
        [
            "rewrite <- sequenceVector_map.",
            "VernacExtend",
            "f3cc766236002221883d251b2b16a08d6211156c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply map_compose.",
            "VernacExtend",
            "a25c76172f7bb4477a9442eaa3129040ef9b6bc8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Vector (n : nat) : Traversal.",
            "VernacDefinition",
            "942a368d3d63956b2e1b62a5c44b4cf012b97ac1"
        ],
        [
            "exists (fun a => Vector.t a n) (@traverseVector n).",
            "VernacExtend",
            "635b859a673c84b65bc3e9505dec0373e1bcfae1"
        ],
        [
            "apply traverseVector_free_applicative.",
            "VernacExtend",
            "b54c114b9e1a0b7b9e789d2ba23fecfbe4ca478c"
        ],
        [
            "apply traverseVector_identity.",
            "VernacExtend",
            "7bb3b46ca58585246dffcce792126bbb5a4a4114"
        ],
        [
            "apply traverseVector_compose.",
            "VernacExtend",
            "a51ab9caa6d6e36b74804752e188c4e3480ba37c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Section Traversal.",
            "VernacBeginSection",
            "6e997a52b0b6eea2ea7d2b1d52e7cc36a5196267"
        ],
        [
            "Definition impure a b (x : a) : KleeneStore a b b := kleeneStore (fun v => Vector.hd v) (Vector.cons _ x _ (Vector.nil _)).",
            "VernacDefinition",
            "9a7e2721b34c29dbd3805e1edc8ae2d3a3b259ac"
        ],
        [
            "Lemma research_impure (F:Applicative) a b (h : a -> F b) (x : a) : research h (impure b x) = h x.",
            "VernacStartTheoremProof",
            "beb41c18063c932c2db08786f6995749935e90b0"
        ],
        [
            "unfold research; simpl; unfold map.",
            "VernacExtend",
            "7f34e77061dad57b902e29fdb7a3e07a38711218"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "replace (fun w : b => Vector.hd (Vector.cons b w 0 (Vector.nil b))) with (fun y : b => y).",
            "VernacExtend",
            "ea518c55ece9e6579751f62de97514be1564ca84"
        ],
        [
            "apply identity_law.",
            "VernacExtend",
            "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
        ],
        [
            "apply functional_extensionality.",
            "VernacExtend",
            "9c7e1fe6d23159d5580801709782c72a6cb0684f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable T : Traversal.",
            "VernacAssumption",
            "c2bb247f1411b5efb0b2c365fbe63ebe91577c51"
        ],
        [
            "Let traversal_coalg a b := traverse (t:=T) (F:=KSApplicative a b) (impure (a:=a) b).",
            "VernacDefinition",
            "ab3841baca9b5bf50c50727273a7e6ce9c00379b"
        ],
        [
            "Lemma traversal_coalg_extract a (x: T a) : extractIT _ _ (traversal_coalg _ x) = x.",
            "VernacStartTheoremProof",
            "6b9b6adb0081a299569d0247fbdc0f45563780f2"
        ],
        [
            "unfold traversal_coalg.",
            "VernacExtend",
            "d6e685ecfdabcd9a149ba77d4998410a105550e0"
        ],
        [
            "rewrite free_applicative.",
            "VernacExtend",
            "634fb6fcb1fd647e0dcce44454af752321ee45a6"
        ],
        [
            "apply traverse_identity.",
            "VernacExtend",
            "1e827be01fda31b8388cb7471ec52108163d4895"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma traversal_coalg_duplicate a b c (x: T a) : duplicateIT a b c _ (traversal_coalg c x) = KSmap (traversal_coalg c) (traversal_coalg b x).",
            "VernacStartTheoremProof",
            "0a9e7c35d29d67ca7a3ebc5ed06a8244e5992057"
        ],
        [
            "unfold traversal_coalg.",
            "VernacExtend",
            "d6e685ecfdabcd9a149ba77d4998410a105550e0"
        ],
        [
            "rewrite free_applicative.",
            "VernacExtend",
            "634fb6fcb1fd647e0dcce44454af752321ee45a6"
        ],
        [
            "replace (fun y : a => (duplicateIT a b c) c (impure c y)) with (fun y : a => (KSmap (impure c) (impure b y))).",
            "VernacExtend",
            "b091e458dea060539f9be980cad1bc41241c4e72"
        ],
        [
            "rewrite (@traverse_compose T a b c (KSApplicative a b) (KSApplicative b c) (impure b) (impure c)).",
            "VernacExtend",
            "23df7e78f2e627cfca0b2722a6ecad14cf478581"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply functional_extensionality; intros y.",
            "VernacExtend",
            "c6101591a1180e185329f53db444e3e4fdb7586e"
        ],
        [
            "simpl; unfold KSmap, duplicate; simpl.",
            "VernacExtend",
            "a71e96a6cf167c87c32f194588311353334940ea"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality; intros v; clear -v.",
            "VernacExtend",
            "7be070a11a61da24812276e44f4944e5b129fac3"
        ],
        [
            "unfold impure.",
            "VernacExtend",
            "669d623d10c8b4fc5cf5925c2e5b02542b2b00aa"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "transitivity (Vector.cons b (Vector.hd v) 0 (Vector.tl v)).",
            "VernacExtend",
            "738a60e9b2b1d416bb0c2bfd49c99723678f5d4e"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply Vector.case0.",
            "VernacExtend",
            "b4fef8c44c49d28962385a2235ccd2bf370820f5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply (Vector.caseS (fun n v => forall (t : Vector.t b n), Vector.cons b (Vector.hd v) n (Vector.tl v) = v)).",
            "VernacExtend",
            "3e7b1c3f54b9a68fdb5705798efff92a9ffecd1c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition traversal_is_coalg : KleeneCoalg (fun a => a) T.",
            "VernacDefinition",
            "b8bafc992b02fd3810e3601731834f3144dbe896"
        ],
        [
            "exists traversal_coalg.",
            "VernacExtend",
            "3aa8b0c4a06dca49f9025e679015318386cf6a26"
        ],
        [
            "exact traversal_coalg_extract.",
            "VernacExtend",
            "13b15e5dc0a4eacf4f5e480b1b073e425f6bb13f"
        ],
        [
            "exact traversal_coalg_duplicate.",
            "VernacExtend",
            "645c8eb8fba99c385df010a5cfb8a0730c33bd96"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Traversal.",
            "VernacEndSegment",
            "0c750ca34144830ecfaf2b62ecad0d92dc2575de"
        ],
        [
            "Record FinContainerSpec := finContainerSpec { shape : Type ; card : shape -> nat }.",
            "VernacInductive",
            "da724e3d626e0fbde49d60409dfdd1c69a17f4bf"
        ],
        [
            "Section FinContainer.",
            "VernacBeginSection",
            "20ccaabb137e5d3fc90db7aafb3bb05d53c18d6b"
        ],
        [
            "Variable spec : FinContainerSpec.",
            "VernacAssumption",
            "a5e0349d6846008040983f1d071f280e16b1d12b"
        ],
        [
            "Definition finContainer (a:Type) := {x : shape spec & Vector (card x) a}.",
            "VernacDefinition",
            "52f6a76ee57838d6f4837e6c9ed4ebd9efff3724"
        ],
        [
            "Definition finContainer_traverse a b (F : Applicative) (f : a -> F b) (x : finContainer a) : F (finContainer b) := let (s, v) := x in map (existT _ s) (traverse f v).",
            "VernacDefinition",
            "e5b240f9be6b6f1ecc9e72cf7ba22a7f04f55ff1"
        ],
        [
            "Lemma finContainer_free_applicative a b (F G : Applicative) (eta : IdiomaticTransformation F G) (f : a -> F b) (x : finContainer a) : eta _ (finContainer_traverse f x) = finContainer_traverse (fun y => eta _ (f y)) x.",
            "VernacStartTheoremProof",
            "f7f9f3a2c778c8c1c8ca1a5c4b8dac8c8d84c6d1"
        ],
        [
            "destruct x as [s v].",
            "VernacExtend",
            "ce676ad913d0003184c864b903918e6b1e9eb3dd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "change (traverseVector (b:=b) (F:=G) (fun y : a => eta b (f y)) v) with (traverse (fun y : a => eta b (f y)) v).",
            "VernacExtend",
            "abb79327ace65dfc68962ab054f97cce8cfd1963"
        ],
        [
            "rewrite <- free_applicative.",
            "VernacExtend",
            "4585a87f8ae99b940fd4a8c56d66ebb66fb6734d"
        ],
        [
            "rewrite idiomaticTransform_map.",
            "VernacExtend",
            "3ce9cc268adffa6c0b094fe57b339bed3ff8f8d4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finContainer_traverse_identity a (x : finContainer a) : finContainer_traverse (F:=IdApplicative) (fun y => y) x = x.",
            "VernacStartTheoremProof",
            "2ac6957d8dde1dca67a557583ef69ca53b94faca"
        ],
        [
            "destruct x as [s v].",
            "VernacExtend",
            "ce676ad913d0003184c864b903918e6b1e9eb3dd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold traverseVector.",
            "VernacExtend",
            "74337443214591e61fadcaba257fa05a181657a2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Vector_map_id;[| reflexivity].",
            "VernacExtend",
            "c538f3daf8e03851480e3c2ac25829ca55e38e46"
        ],
        [
            "rewrite (sequenceVector_Id v).",
            "VernacExtend",
            "c5b708b8fede02d878808b88f992955d5444df6c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finContainer_traverse_compose a b c (F G : Applicative) (f : a -> F b) (g : b -> G c) (x : finContainer a) : finContainer_traverse (F:=ComposeApplicative F G) (fun y => map g (f y)) x = map (finContainer_traverse g) (finContainer_traverse f x).",
            "VernacStartTheoremProof",
            "bf77f1ffcca10a3e33a9aabb034bc075dd6782da"
        ],
        [
            "destruct x as [s v].",
            "VernacExtend",
            "ce676ad913d0003184c864b903918e6b1e9eb3dd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "change (traverseVector (b:=b) (F:=F) f v) with (traverse f v).",
            "VernacExtend",
            "0f5705da162ea08c83a367db4721a83506117661"
        ],
        [
            "pose (h:= fun y => finContainer_traverse (b:=c) (F:=G) g (existT (fun x : shape spec => Vector.t b (card (f:=spec) x)) s y)).",
            "VernacExtend",
            "51640bc42328c186100d601d0a37168ad8c3ff09"
        ],
        [
            "rewrite (map_compose (h:= h));[|reflexivity].",
            "VernacExtend",
            "279794d86fecff731be2b1159dd017fda4bcd0f0"
        ],
        [
            "unfold h; simpl.",
            "VernacExtend",
            "11b9c74b7fb0ef8bc33404e7142f803a70f492fc"
        ],
        [
            "rewrite <- (map_compose (g:=map (a:=G) (existT (fun x : shape spec => Vector.t c (card (f:=spec) x)) s)) (f:=traverseVector (b:=c) (F:=G) g) (h:= h));[|reflexivity].",
            "VernacExtend",
            "78e45f2666795dd3e49e2786e6668a0f3230e1fc"
        ],
        [
            "change (map (a:=F) (traverseVector (b:=c) (F:=G) g) (traverseVector (b:=b) (F:=F) f v)) with (map (a:=F) (traverse (b:=c) (F:=G) g) (traverse (b:=b) (F:=F) f v)).",
            "VernacExtend",
            "ff83f8fd84e6720cab093fcedce55ba807f16f2b"
        ],
        [
            "rewrite <- (traverse_compose f g).",
            "VernacExtend",
            "49ef5d2c19516b59c90cace072f626a81a9c5a9b"
        ],
        [
            "unfold Compose_ap, Compose_pure, map.",
            "VernacExtend",
            "9c2d18eb80c571699166ed2b40596800d7729d76"
        ],
        [
            "rewrite interchange_law.",
            "VernacExtend",
            "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
        ],
        [
            "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
            "VernacExtend",
            "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition FinContainer : Traversal.",
            "VernacDefinition",
            "4fcdb02e3c8f044137a17fb2ef911d5514f4888d"
        ],
        [
            "exists finContainer finContainer_traverse.",
            "VernacExtend",
            "307c3192fd8a676a8fec193e9862473dca91a6dc"
        ],
        [
            "apply finContainer_free_applicative.",
            "VernacExtend",
            "517836a47e1321746b219ae29bd9690157ef4151"
        ],
        [
            "apply finContainer_traverse_identity.",
            "VernacExtend",
            "47c27239a72e285c42a7ee77e0d11bc1e0e6eddb"
        ],
        [
            "apply finContainer_traverse_compose.",
            "VernacExtend",
            "b780dfc2d30351783fa2a23a1a95d170071f4e52"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End FinContainer.",
            "VernacEndSegment",
            "8562d57c528b697155a5627e9541785d73cf046b"
        ],
        [
            "Theorem Traversal_is_finite_container : forall (T:Traversal), exists (spec : FinContainerSpec) (f : forall a, T a -> FinContainer spec a) (g : forall a, FinContainer spec a -> T a), (forall a, (forall x, g a (f a x) = x) /\\ forall y, f a (g a y) = y) /\\ (forall a b (F : Applicative) (h: a -> F b) (x : T a), map (f b) (traverse h x) = traverse h (f a x)).",
            "VernacStartTheoremProof",
            "74433ab74b876b29531ce2e986f389a11ab21d8d"
        ],
        [
            "intros T.",
            "VernacExtend",
            "7231b6aa2a7e82a8551ec62f54be1c5ea82d33fb"
        ],
        [
            "pose (K := traversal_is_coalg T).",
            "VernacExtend",
            "cb598d44e74947611df8b814dcdb1f5fd265d211"
        ],
        [
            "exists (finContainerSpec (size K (a:=unit))).",
            "VernacExtend",
            "10efffa25430bff668538971dae4d28c0a5ebac3"
        ],
        [
            "exists (iso1 K).",
            "VernacExtend",
            "a34be2dcc3de1d702a6c60a39ec9f886adb05230"
        ],
        [
            "exists (iso2 (traverse:=K)).",
            "VernacExtend",
            "8f832059926f71fac3e9e9ea3ec7b2007e933e70"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros a.",
            "VernacExtend",
            "9fef235d1a71132a4c9de7f87ab95d540098d91d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply iso2_iso1.",
            "VernacExtend",
            "18cfb15e873030bb71202b4a44e14e2509b286cb"
        ],
        [
            "apply iso1_iso2.",
            "VernacExtend",
            "701384515e573bcead0d8f1b26a6d0e816e090fb"
        ],
        [
            "intros a b F h x.",
            "VernacExtend",
            "1d12e9572200c44bf54c62fbe46be901dc38d7e3"
        ],
        [
            "rewrite <- identity_law.",
            "VernacExtend",
            "2981538d0c3c8eea63e00bec021b69681b5d3d83"
        ],
        [
            "replace (fun y : (FinContainer {| shape := T unit; card := size K (a:=unit) |}) b => y) with (fun y => iso1 K (iso2 (traverse:=K) (a:=b) y)) by (apply functional_extensionality; apply iso1_iso2).",
            "VernacExtend",
            "2c50aa9fa03eea14174ddce26fade3077b268f9c"
        ],
        [
            "rewrite <- (map_compose (g:=iso1 K (a:=b)) (f:=iso2 (traverse:=K) (a:=b))); [|reflexivity].",
            "VernacExtend",
            "ea07dd99d0d4cdb14c2504b42bb3e0a694feee4d"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "unfold traverse at 2; simpl.",
            "VernacExtend",
            "b9aebce10cdf7793e7d1abe8b87eea4c81634632"
        ],
        [
            "unfold traverseVector; simpl.",
            "VernacExtend",
            "b8cbbce4cd3436e266e1241c914da925ebbdef40"
        ],
        [
            "set (z := (fun b0 : Vector.t b (size K (a:=unit) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) => peek (k:=traverse (t:=T) (b:=b) (F:=KSApplicative unit b) (impure b) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) (eq_rect (size K (a:=unit) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) (Vector.t b) b0 (dim (traverse (t:=T) (b:=b) (F:=KSApplicative unit b) (impure b) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x)))))) (eq_sym (free_b_dim K (a:=unit) b unit (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))))))).",
            "VernacExtend",
            "50d3d9fdc89368def85e290e339974150e69e488"
        ],
        [
            "rewrite (map_compose (h:=z));[|reflexivity].",
            "VernacExtend",
            "59db1ab4612bc3e05038f7e63a5a64a095d2b4d3"
        ],
        [
            "change (traverse h x = research h (let (s,v) := iso1 K (a:=a) x in kleeneStore (fun b => iso2 (existT _ s b)) v)).",
            "VernacExtend",
            "f5ea58a474ff6fd2d90a7954ab2ffd1b1ce2ac51"
        ],
        [
            "clear z.",
            "VernacExtend",
            "c7008215d0062fac2181e178ac87a11a66138287"
        ],
        [
            "transitivity (Research h _ (K a b x)).",
            "VernacExtend",
            "2544c442ae02b6c53040e581a69cfeefe568d364"
        ],
        [
            "unfold K.",
            "VernacExtend",
            "f3493d693cfeb3fd3e5f90658cfafb53a08c16be"
        ],
        [
            "simpl ((traversal_is_coalg T) a b x).",
            "VernacExtend",
            "2d59a40c81a341db6f203089755437f833d071ea"
        ],
        [
            "rewrite free_applicative.",
            "VernacExtend",
            "634fb6fcb1fd647e0dcce44454af752321ee45a6"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "apply functional_extensionality; intros y.",
            "VernacExtend",
            "c6101591a1180e185329f53db444e3e4fdb7586e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite research_impure.",
            "VernacExtend",
            "9cff27eb5d9a128fada5eb759836e94b2c2e7b3c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl ((Research (F:=F) (b:=b) h) (T b)).",
            "VernacExtend",
            "085edb2f3ae71ba0c88a00a5413eb5bb02b46756"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "apply iso_coalg.",
            "VernacExtend",
            "03ffca487bd6b50e43607d63758c101842f65953"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Print Assumptions Traversal_is_finite_container.",
            "VernacPrint",
            "ff52f0f7839dfebba0356c1aa8605bb68ea6bba2"
        ]
    ],
    "proofs": [
        {
            "name": "Vector_map_id",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv, H.",
                        "VernacExtend",
                        "4080ac66cace4faaa315548e453e31ba5b4762ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vector_map_compose",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv, H.",
                        "VernacExtend",
                        "4080ac66cace4faaa315548e453e31ba5b4762ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vector_map_append",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "induction v1.",
                        "VernacExtend",
                        "8233e58a25881e708b8947eaefec6715fc42d548"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv1.",
                        "VernacExtend",
                        "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "append_inj",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "revert n v1 v1'.",
                        "VernacExtend",
                        "70516782c2eceb4742b0faade1435e65bd8c530e"
                    ]
                },
                {
                    "command": [
                        "apply (Vector.rect2 (fun n v1 v1' => Vector.append v1 v2 = Vector.append v1' v2' -> v1 = v1' /\\ v2 = v2')).",
                        "VernacExtend",
                        "f2a7243b1f222dc5eba085a914d00f2fa902cdab"
                    ]
                },
                {
                    "command": [
                        "intros H; split.",
                        "VernacExtend",
                        "c41591be4dc03ccc6f8840b8a05dfd08db9444b6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros n t t' IH h h' H.",
                        "VernacExtend",
                        "d141ccc229a055d3ddb30eada3ece9907eea522f"
                    ]
                },
                {
                    "command": [
                        "injection H.",
                        "VernacExtend",
                        "0b4168b75c87f7c322bfb81e661f04001b54052d"
                    ]
                },
                {
                    "command": [
                        "intros dep1 Hh.",
                        "VernacExtend",
                        "b2f9f45811f7bf30b88204fbb45ef956d4e1c576"
                    ]
                },
                {
                    "command": [
                        "rewrite Hh; clear Hh.",
                        "VernacExtend",
                        "f1d3c33cd505784376032af636a438a6ce3a97c6"
                    ]
                },
                {
                    "command": [
                        "destruct IH as [IH1 IH2].",
                        "VernacExtend",
                        "5add3aa89566669c2c4c99661e59b47a344109e7"
                    ]
                },
                {
                    "command": [
                        "refine (inj_pair2_eq_dec _ _ _ _ _ _ dep1).",
                        "VernacExtend",
                        "78b993e58400964a5651614783ca1fca5deea833"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "rewrite IH1.",
                        "VernacExtend",
                        "fc638d7679d1559e613110f8328f9332b35882f0"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "append_assoc",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "induction v1; simpl in *.",
                        "VernacExtend",
                        "b8399b735443bca08c7a5b8e4828e65dcfca84bf"
                    ]
                },
                {
                    "command": [
                        "pattern e.",
                        "VernacExtend",
                        "c86fc71c50a92e67c16208bd92e3b0292fe7be3c"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "injection e.",
                        "VernacExtend",
                        "cf626cd0773aba2024ccc3777f2dc35cfa2cad6f"
                    ]
                },
                {
                    "command": [
                        "intros e'.",
                        "VernacExtend",
                        "2cdedb6c5a7c1a3ab21ae9fa56ad18156a7f58fc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (IHv1 e').",
                        "VernacExtend",
                        "f4a781937c2239757a90a495f2d9a6293ec7b275"
                    ]
                },
                {
                    "command": [
                        "clear IHv1.",
                        "VernacExtend",
                        "61632aa07f0c31b6792554e4b10afc74985ba397"
                    ]
                },
                {
                    "command": [
                        "revert e.",
                        "VernacExtend",
                        "4811b158d691c94ab1f08ec87b3994375d2608de"
                    ]
                },
                {
                    "command": [
                        "generalize e'.",
                        "VernacExtend",
                        "2dc0f7d75ad9efa5eec1a1305b7a02cbf1cd7437"
                    ]
                },
                {
                    "command": [
                        "rewrite <- e'.",
                        "VernacExtend",
                        "9c805d7b9b6f34f243b2c6fe892365a027ca91de"
                    ]
                },
                {
                    "command": [
                        "clear e'; intros e'.",
                        "VernacExtend",
                        "1e12d492a542f6ac7abd37bab3bacfe98f5971e8"
                    ]
                },
                {
                    "command": [
                        "pattern e'.",
                        "VernacExtend",
                        "d04217cd73bddd2d8b2a3755b2e3a272090e28a8"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_list_eq",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "rewrite e.",
                        "VernacExtend",
                        "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "clear n e.",
                        "VernacExtend",
                        "77fd27e600380fdb407acfc4a04a8e88c15d3961"
                    ]
                },
                {
                    "command": [
                        "revert m.",
                        "VernacExtend",
                        "43cfb708640da71e43e04c57468c99e6fc662c0f"
                    ]
                },
                {
                    "command": [
                        "apply (Vector.rect2 (fun m (v1 v2 : Vector.t A m) => Vector.to_list v1 = Vector.to_list v2 -> v1 = v2)).",
                        "VernacExtend",
                        "0936bbc406bd7469cde2e646299733bafaa4d58f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros n v1 v2 IH a b H.",
                        "VernacExtend",
                        "3672c2b3bf9105e77827090f7ec62256d0e4472a"
                    ]
                },
                {
                    "command": [
                        "injection H; intros H1 H2.",
                        "VernacExtend",
                        "f3aa2ceb4fd2629fc04c26948fbcbb85fbc8a3ac"
                    ]
                },
                {
                    "command": [
                        "rewrite IH.",
                        "VernacExtend",
                        "dbf4f765dab656705bc8df8600fa3b3017a20858"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "free_b_dim",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "apply (f_equal (fun x=> dim x) (@coalg_duplicate i o k a b' b x)).",
                        "VernacExtend",
                        "0c5a47b0c9b837b9aec2e8ad5d69555c8de35f94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "free_b_pos",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "assert (H := (@coalg_duplicate i o k a b' b x)).",
                        "VernacExtend",
                        "62c6d1d8a218c34a6cd1b53626317ae915374d22"
                    ]
                },
                {
                    "command": [
                        "change (pos (k a b' x)) with (pos (KSmap (k b' b) (k a b' x))).",
                        "VernacExtend",
                        "241c6edad577a4c05ac5e442ef657a6b26aae204"
                    ]
                },
                {
                    "command": [
                        "change (pos (k a b x)) with (pos (duplicate (i b') (k a b x))).",
                        "VernacExtend",
                        "e54e654b44b800b1cfdbcb1422a3e644fd0906b9"
                    ]
                },
                {
                    "command": [
                        "generalize (free_b_dim k b b' x).",
                        "VernacExtend",
                        "e8e9f3a2f0091db53843bcc8221efb31342048f9"
                    ]
                },
                {
                    "command": [
                        "change (dim (k a b' x)) with (dim (KSmap (k b' b) (k a b' x))).",
                        "VernacExtend",
                        "5a253cd3bfa17bef2ea3b054a3fd5c9466f13b40"
                    ]
                },
                {
                    "command": [
                        "change (dim (k a b x)) with (dim (duplicate (i b') (k a b x))).",
                        "VernacExtend",
                        "19f2c326f45fd350cac77de7753e525db2fe1e79"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_preservation",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "unfold size.",
                        "VernacExtend",
                        "6586c1161ea57c3be59fcba0d0ae22ea35a8f85d"
                    ]
                },
                {
                    "command": [
                        "replace (coalg traverse (a:=b) b (peek (k:=traverse a b x) v)) with (peek (k:=(duplicate b (coalg traverse b x))) v).",
                        "VernacExtend",
                        "611deecac4ba8c34e942cc4a60997cb26e9f550a"
                    ]
                },
                {
                    "command": [
                        "rewrite (free_b_dim traverse a b).",
                        "VernacExtend",
                        "ac4f8412dd8ec02a4b5dd34d17574129111c3a4b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "change v with (eq_rect (dim (traverse a b x)) (Vector.t b) v (dim (duplicate b (traverse a b x))) (refl_equal _)) at 1.",
                        "VernacExtend",
                        "48513a3478250ad08e621d6b31a1f46dd5e7be77"
                    ]
                },
                {
                    "command": [
                        "generalize (eq_refl (dim (traverse a b x))).",
                        "VernacExtend",
                        "c9bb355af936ba10355325965499b530b425ef1c"
                    ]
                },
                {
                    "command": [
                        "change (dim (traverse a b x)) with (dim (duplicate b (traverse a b x))) at 2.",
                        "VernacExtend",
                        "ac7519bd6d59b8aea189c205b03a70fbf436064f"
                    ]
                },
                {
                    "command": [
                        "rewrite (coalg_duplicate traverse b b x).",
                        "VernacExtend",
                        "34f1ff1c9139deaaa75308c513caa271116bf866"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set; [ decide equality |].",
                        "VernacExtend",
                        "f83ff957fb4ea034007d0b47d72ad5170fb1a933"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_preservation",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "change (dim (peek (k:=KSmap (traverse b b') (traverse a b x)) v) = dim (traverse a a' x)).",
                        "VernacExtend",
                        "0683d4c2e51422f19254dead3e107b2233ae0df7"
                    ]
                },
                {
                    "command": [
                        "change (Vector.t b (dim (KSmap (traverse b b') (traverse a b x)))) in v.",
                        "VernacExtend",
                        "625b97f01840c69f0e9be06045b58c7df10c284b"
                    ]
                },
                {
                    "command": [
                        "revert v.",
                        "VernacExtend",
                        "55aebda61020e9d48822205f777e478cfdb94d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (coalg_duplicate traverse b b').",
                        "VernacExtend",
                        "b46c8c8c9bc688f7128b7bc83974f81bf032b825"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros _.",
                        "VernacExtend",
                        "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
                    ]
                },
                {
                    "command": [
                        "rewrite (free_b_dim traverse a' b').",
                        "VernacExtend",
                        "6fd7643f7db3c1ba58e4dc56e33f873b5d3396af"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iso2_iso1",
            "line_nb": 131,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold size.",
                        "VernacExtend",
                        "6586c1161ea57c3be59fcba0d0ae22ea35a8f85d"
                    ]
                },
                {
                    "command": [
                        "set (e1 := (eq_sym (dim_preservation _ _ _))).",
                        "VernacExtend",
                        "b31be1d3039875677d1555cb3152715cab083da7"
                    ]
                },
                {
                    "command": [
                        "set (e2 := (eq_sym (free_b_dim traverse (a:=unit) a unit (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))))).",
                        "VernacExtend",
                        "fedf3fed69994a786f0a800e533a4e68d57d5684"
                    ]
                },
                {
                    "command": [
                        "generalize e1 e2.",
                        "VernacExtend",
                        "d3fb1460296d244587186c34cbee317d53d1d75e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- e1.",
                        "VernacExtend",
                        "d3d4ff8a4a4037c96fda124d82caeaa71e576740"
                    ]
                },
                {
                    "command": [
                        "clear e1 e2.",
                        "VernacExtend",
                        "93a70996c79b53d2781e88189120b01232b25fdf"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e1 : dim (traverse a unit x) = dim (traverse a unit x) => forall e2 : dim (traverse a unit x) = dim (traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))), peek (k:=traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))) (eq_rect (dim (traverse a unit x)) (Vector.t a) (eq_rect (dim (traverse a unit x)) (Vector.t a) (pos (traverse a unit x)) (dim (traverse a unit x)) e1) (dim (traverse unit a (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x)))))) e2) = x)).",
                        "VernacExtend",
                        "99964cd85f95f4ccd5937b3bd1d61ca09a69f4d8"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "pose (Z0 := KSmap (traverse unit a) (traverse a unit x)).",
                        "VernacExtend",
                        "f5eaff6fa431b7d0dbea34da6d435df97fc19da9"
                    ]
                },
                {
                    "command": [
                        "pose (Z1 := peek (k:=Z0) (Vector.const tt _)).",
                        "VernacExtend",
                        "576bba52e6a6ed8414471e0622ce30f829cd614e"
                    ]
                },
                {
                    "command": [
                        "change (traverse unit a (peek (k:= traverse a unit x) (Vector.const tt _))) with (peek (k:=Z0) (Vector.const tt _)).",
                        "VernacExtend",
                        "ae7c79102ea66cacde4a55ea0bc6f0d38ae5ccc2"
                    ]
                },
                {
                    "command": [
                        "unfold Z0.",
                        "VernacExtend",
                        "2373da9f32bf7f0b1bdb4b0edc90280e8c70776c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (coalg_duplicate traverse).",
                        "VernacExtend",
                        "5f14c833b7606a0ecd8b290eb153652d45b0a159"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (free_b_pos traverse a unit x).",
                        "VernacExtend",
                        "06ba8f7338dd6af06ef930c1fa267d41f0bd2bbf"
                    ]
                },
                {
                    "command": [
                        "generalize (free_b_dim traverse a unit x).",
                        "VernacExtend",
                        "21e9ce30621ccaa7601eacdec6d8bc4a91dbd15f"
                    ]
                },
                {
                    "command": [
                        "intros e.",
                        "VernacExtend",
                        "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
                    ]
                },
                {
                    "command": [
                        "generalize e.",
                        "VernacExtend",
                        "6531a90dcea6ccb14823627ef81b68708e51e645"
                    ]
                },
                {
                    "command": [
                        "rewrite <- e.",
                        "VernacExtend",
                        "038d705295bc042ea4f7eab695069943e9f585f2"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e0 : dim (traverse a a x) = dim (traverse a a x) => forall e2 : dim (traverse a a x) = dim (traverse a a x), peek (k:=traverse a a x) (eq_rect (dim (traverse a a x)) (Vector.t a) (eq_rect (dim (traverse a a x)) (Vector.t a) (pos (traverse a a x)) (dim (traverse a a x)) e0) (dim (traverse a a x)) e2) = x)).",
                        "VernacExtend",
                        "5e9132a1f114f2fb318aea5e44f25fee58ab509d"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "change (extract (traverse a a x) = x).",
                        "VernacExtend",
                        "ac154e69c6a65d3db5b92812f2bb2297e1facdb0"
                    ]
                },
                {
                    "command": [
                        "apply (coalg_extract traverse x).",
                        "VernacExtend",
                        "ed4e16d645de306f4a453b8f531893ad4112be1f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iso1_iso2_1",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "destruct y as [x v].",
                        "VernacExtend",
                        "ac1697e36b3c83f2fe30eb45cc5ea98749f88bd4"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "set (a' := (eq_rect (size x) (Vector.t a) v (dim _) _)).",
                        "VernacExtend",
                        "05bb1c300ba3715aebc3cb573eb8b89f4db7131b"
                    ]
                },
                {
                    "command": [
                        "clearbody a'.",
                        "VernacExtend",
                        "f74e4c62f4054f5b04a2b4b968f5b9e7b69e2a73"
                    ]
                },
                {
                    "command": [
                        "pose (X := KSmap (traverse a unit) (traverse unit a x)).",
                        "VernacExtend",
                        "c63d1e5a75d365258bd9570f81dafaa5f390b239"
                    ]
                },
                {
                    "command": [
                        "change (Vector.t a (dim X)) in a'.",
                        "VernacExtend",
                        "b2c67b262d27fbea4e7231ea75272779bdd4997b"
                    ]
                },
                {
                    "command": [
                        "change (peek (k:=(peek (k:=X) a')) (Vector.const tt _) = x).",
                        "VernacExtend",
                        "193ade10c615df444f20a44e7d4b353e53c6b436"
                    ]
                },
                {
                    "command": [
                        "generalize a'.",
                        "VernacExtend",
                        "6f97b447e7da8234b7724c91eeb0386c5fd75594"
                    ]
                },
                {
                    "command": [
                        "unfold X.",
                        "VernacExtend",
                        "c78419a47346ebcf47d37e322df77d31130e80f7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (coalg_duplicate traverse a unit).",
                        "VernacExtend",
                        "63f9a91953383e1510d706b7ca57289dc969db89"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros _.",
                        "VernacExtend",
                        "eb0e518a4896777a9a76b3ab973eaf7b4f1b52db"
                    ]
                },
                {
                    "command": [
                        "replace (Vector.const tt (dim (traverse unit unit x))) with (pos (traverse unit unit x)).",
                        "VernacExtend",
                        "d628015649ceb8cadecfef2643043c252b02dd1e"
                    ]
                },
                {
                    "command": [
                        "apply (coalg_extract traverse).",
                        "VernacExtend",
                        "fdc806ccae28174488533c8804c3a4d62c474032"
                    ]
                },
                {
                    "command": [
                        "generalize (pos (traverse unit unit x)).",
                        "VernacExtend",
                        "41c28de54b0f7e846d82061c6ea5af01e235be25"
                    ]
                },
                {
                    "command": [
                        "clear - x.",
                        "VernacExtend",
                        "015c595a14fe97ef674bbde239ccc3506e6b9c2c"
                    ]
                },
                {
                    "command": [
                        "induction t0.",
                        "VernacExtend",
                        "9c97f52da61902068bb36723f05c846658b6ceb1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt0.",
                        "VernacExtend",
                        "6c4e824f96296512a78316e523b833cc199248e5"
                    ]
                },
                {
                    "command": [
                        "destruct h.",
                        "VernacExtend",
                        "ac5c00ffcee6d385c2dbd6b1548e82bb5791bade"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iso1_iso2_2",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "set (e := (f_equal _ _)).",
                        "VernacExtend",
                        "09da883a3f9e6df042cc8b7c4cc6eb7cddf8135f"
                    ]
                },
                {
                    "command": [
                        "clearbody e.",
                        "VernacExtend",
                        "3423d3130faadb6bdd2273eb2d46600b9cfd1dec"
                    ]
                },
                {
                    "command": [
                        "destruct y.",
                        "VernacExtend",
                        "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
                    ]
                },
                {
                    "command": [
                        "set (t1 := projT1 (iso1 _)) in *.",
                        "VernacExtend",
                        "a7e7dd859c439f29659ceb08eb65b104ca6d8212"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "set (e1 := (eq_sym (dim_preservation _ _ _))).",
                        "VernacExtend",
                        "b31be1d3039875677d1555cb3152715cab083da7"
                    ]
                },
                {
                    "command": [
                        "clearbody e1.",
                        "VernacExtend",
                        "308538ed5a4aaeb67d0f67fc902a2a9dea102c49"
                    ]
                },
                {
                    "command": [
                        "fold t1 in e1 |- *.",
                        "VernacExtend",
                        "baa8162e937ffe6a32bc4e2be96edb01af473068"
                    ]
                },
                {
                    "command": [
                        "change (dim (traverse unit unit t1)) with (size t1) in e1 |- *.",
                        "VernacExtend",
                        "263a2d3db72b7444837024792d5ca2be527748e0"
                    ]
                },
                {
                    "command": [
                        "generalize e e1.",
                        "VernacExtend",
                        "9bc1c5845ed064151d7fe06205ce31ac4b05a475"
                    ]
                },
                {
                    "command": [
                        "rewrite e.",
                        "VernacExtend",
                        "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e0 : size x = size x => forall (e2 : dim (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x))))) = size x), eq_rect (size x) (Vector.t a) (eq_rect (dim (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x)))))) (Vector.t a) (pos (traverse a unit (peek (k:=traverse unit a x) (eq_rect (size x) (Vector.t a) t0 (dim (traverse unit a x)) (eq_sym (free_b_dim traverse (a:=unit) a unit x)))))) (size x) e2) (size x) e0 = t0)).",
                        "VernacExtend",
                        "be21f86662447bc7ae1896ebe0c94fdf0f93be0c"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "clear e e1 t1.",
                        "VernacExtend",
                        "87ea05b63503feca9696c77d2458e74aac79c06c"
                    ]
                },
                {
                    "command": [
                        "pose (X := KSmap (traverse a unit) (traverse unit a x)).",
                        "VernacExtend",
                        "c63d1e5a75d365258bd9570f81dafaa5f390b239"
                    ]
                },
                {
                    "command": [
                        "set (e :=(eq_sym (free_b_dim traverse (a:=unit) a unit x))).",
                        "VernacExtend",
                        "cff76c3c5b3462351bff5ec83b83fc7bc8dc0a93"
                    ]
                },
                {
                    "command": [
                        "clearbody e.",
                        "VernacExtend",
                        "3423d3130faadb6bdd2273eb2d46600b9cfd1dec"
                    ]
                },
                {
                    "command": [
                        "change (dim (traverse unit a x)) with (dim X) in e|- *.",
                        "VernacExtend",
                        "37653d615fdc53ec2064741857094e154504fdd5"
                    ]
                },
                {
                    "command": [
                        "set (a' := eq_rect (size x) _ _ (dim X) e).",
                        "VernacExtend",
                        "3b9f731871e316c48271a3f8f1c035aa0e5499a9"
                    ]
                },
                {
                    "command": [
                        "change (traverse a unit _) with (peek (k:=X) a').",
                        "VernacExtend",
                        "5ff1c9d5478afbf61059bbb878a0944f6344e487"
                    ]
                },
                {
                    "command": [
                        "unfold a'; clear a'.",
                        "VernacExtend",
                        "38b1791bb6321782c4da1cd43d200872563d2bbf"
                    ]
                },
                {
                    "command": [
                        "revert e.",
                        "VernacExtend",
                        "4811b158d691c94ab1f08ec87b3994375d2608de"
                    ]
                },
                {
                    "command": [
                        "replace X with (duplicate a (traverse unit unit x)); [|rewrite (coalg_duplicate traverse); reflexivity].",
                        "VernacExtend",
                        "90f99f44e1cccf98718b5d10a9960185cb159f71"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e : dim (traverse unit unit x) = dim (duplicate a (traverse unit unit x)) => forall (e1 : dim (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e)) = dim (traverse unit unit x)), eq_rect (dim (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e))) (Vector.t a) (pos (peek (k:=duplicate a (traverse unit unit x)) (eq_rect (size x) (Vector.t a) t0 (dim (duplicate a (traverse unit unit x))) e))) (dim (traverse unit unit x)) e1 = t0)).",
                        "VernacExtend",
                        "644feffb66fe0c819b938fc49bdecbe893e17989"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iso1_iso2",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "assert (H2 := iso1_iso2_2 y).",
                        "VernacExtend",
                        "2d87a2004579d4a73ebad11c587a268affa436f7"
                    ]
                },
                {
                    "command": [
                        "revert H2.",
                        "VernacExtend",
                        "bf608dd02211921a8a3468ac1ffcc4e8bdf3c9e3"
                    ]
                },
                {
                    "command": [
                        "set (e:= (f_equal _ _)).",
                        "VernacExtend",
                        "09da883a3f9e6df042cc8b7c4cc6eb7cddf8135f"
                    ]
                },
                {
                    "command": [
                        "generalize e; clear e.",
                        "VernacExtend",
                        "4bc8aaf4ee3af7d80469840376b32fb39016a273"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := iso1_iso2_1 y).",
                        "VernacExtend",
                        "45306c8d9994d7cace8a2bbab7f03fdf39569974"
                    ]
                },
                {
                    "command": [
                        "revert H2.",
                        "VernacExtend",
                        "bf608dd02211921a8a3468ac1ffcc4e8bdf3c9e3"
                    ]
                },
                {
                    "command": [
                        "destruct (iso1 (iso2 y)).",
                        "VernacExtend",
                        "ace67efaefeb1d36eaa30706ee16226241f9c1c2"
                    ]
                },
                {
                    "command": [
                        "destruct y.",
                        "VernacExtend",
                        "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros e.",
                        "VernacExtend",
                        "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
                    ]
                },
                {
                    "command": [
                        "revert t0.",
                        "VernacExtend",
                        "10806bbab726eb168cd3436f25d8b4bc7cf64ad8"
                    ]
                },
                {
                    "command": [
                        "rewrite e.",
                        "VernacExtend",
                        "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
                    ]
                },
                {
                    "command": [
                        "intros t0.",
                        "VernacExtend",
                        "40f9ff2210b79a23ddd0914835d0090a279e138c"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e0 : size x0 = size x0 =>eq_rect (size x0) (Vector.t a) t0 (size x0) e0 = t1 -> existT (fun x1 : t unit => Vector.t a (size x1)) x0 t0 = existT (fun x1 : t unit => Vector.t a (size x1)) x0 t1)).",
                        "VernacExtend",
                        "ccc5c6e2392ba48cde100be6a1373051cf5f1cdc"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros e0; rewrite e0.",
                        "VernacExtend",
                        "d703480c6fefa3aae416107c991f6f1ea869bd73"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iso_coalg",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "unfold iso1; simpl.",
                        "VernacExtend",
                        "18631b9c000ba46efe403185909c3fd89dff13a4"
                    ]
                },
                {
                    "command": [
                        "unfold size; simpl.",
                        "VernacExtend",
                        "53f1ef26b76253be77523860c90b274f194e2da6"
                    ]
                },
                {
                    "command": [
                        "generalize (eq_sym (dim_preservation unit unit (x:=x) (Vector.const tt (dim (traverse a unit x))))).",
                        "VernacExtend",
                        "109ba42c92e3b8018c62f4888e92ef0011839f93"
                    ]
                },
                {
                    "command": [
                        "set (e' := (eq_sym (free_b_dim traverse (a:=unit) b unit (peek (k:=traverse a unit x) (Vector.const tt (dim (traverse a unit x))))))).",
                        "VernacExtend",
                        "4805f59ff753c8d69d4659cba8d4edee93efebfe"
                    ]
                },
                {
                    "command": [
                        "generalize e'.",
                        "VernacExtend",
                        "2dc0f7d75ad9efa5eec1a1305b7a02cbf1cd7437"
                    ]
                },
                {
                    "command": [
                        "clear e'.",
                        "VernacExtend",
                        "5f30f14811c4901df828042a9b0d80a9ca3914ad"
                    ]
                },
                {
                    "command": [
                        "rewrite (dim_preservation unit unit (Vector.const tt (dim (traverse a unit x)))).",
                        "VernacExtend",
                        "0ec556f1cb9575fc7c64d537fc05be02dbef3a06"
                    ]
                },
                {
                    "command": [
                        "set (d:= dim (traverse a unit x)).",
                        "VernacExtend",
                        "fb768d3c6461e88b34a1e7eea8908bdea1666013"
                    ]
                },
                {
                    "command": [
                        "unfold d at 1 3 4 5 6 8 10 11.",
                        "VernacExtend",
                        "b27ff96216059e8fed36d055472a434c41fa1e32"
                    ]
                },
                {
                    "command": [
                        "intros e.",
                        "VernacExtend",
                        "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "revert e.",
                        "VernacExtend",
                        "4811b158d691c94ab1f08ec87b3994375d2608de"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (free_b_pos traverse (a:=a) b unit x).",
                        "VernacExtend",
                        "07d397f39ef666cc8f9dffa5823cf004dbda7441"
                    ]
                },
                {
                    "command": [
                        "generalize (free_b_dim traverse (a:=a) b unit x).",
                        "VernacExtend",
                        "c5cfaf92d07097a2e87309d69ad6ae51e89c5247"
                    ]
                },
                {
                    "command": [
                        "intros e; generalize e; rewrite <- e; clear e.",
                        "VernacExtend",
                        "46f949e7b108041eb22c9fcc8fc24d4f59a09e20"
                    ]
                },
                {
                    "command": [
                        "apply (fun H => K_dec_set H (fun e : dim (traverse a b x) = dim (traverse a b x) => forall (e0 : dim (traverse a b x) = dim (traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d)))), {| dim := dim (traverse a b x); peek := fun b0 : Vector.t b (dim (traverse a b x)) => peek (k:=traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d))) (eq_rect (dim (traverse a b x)) (Vector.t b) b0 (dim (traverse unit b (peek (k:=traverse a unit x) (Vector.const tt d)))) e0); pos := eq_rect (dim (traverse a b x)) (Vector.t a) (pos (traverse a b x)) (dim (traverse a b x)) e |} = traverse a b x)).",
                        "VernacExtend",
                        "90ee8fc649bbf68b41d8982a93a5d4f16bf8777e"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros e.",
                        "VernacExtend",
                        "fbf6e34ba1d32ba2da6d52f1b2b34e5349941b8e"
                    ]
                },
                {
                    "command": [
                        "transitivity (kleeneStore (peek (k:=traverse a b x)) (pos (traverse a b x))); [|destruct (traverse a b x); reflexivity].",
                        "VernacExtend",
                        "4e2f2631ddc685cf15c3a77e6708b3f9c2eb671a"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros v.",
                        "VernacExtend",
                        "f0f168cc2ac7023c827b1c250dd2eb8df6c327c6"
                    ]
                },
                {
                    "command": [
                        "revert e.",
                        "VernacExtend",
                        "4811b158d691c94ab1f08ec87b3994375d2608de"
                    ]
                },
                {
                    "command": [
                        "change (forall e : dim (traverse a b x) = (dim (peek (k:=(KSmap (traverse unit b) (traverse a unit x))) (Vector.const tt d))), peek (k:=(peek (k:=KSmap (traverse unit b) (traverse a unit x)) (Vector.const tt d))) (eq_rect (dim (traverse a b x)) (Vector.t b) v (dim (peek (k:=(KSmap (traverse unit b) (traverse a unit x))) (Vector.const tt d))) e) = peek (k:=traverse a b x) v).",
                        "VernacExtend",
                        "918719fbb71384159de00643d4172ea5121b387b"
                    ]
                },
                {
                    "command": [
                        "change d with (dim (KSmap (traverse unit b) (traverse a unit x))).",
                        "VernacExtend",
                        "5f3dd28b9e69aabcdee47cf12e3c24645a326ed3"
                    ]
                },
                {
                    "command": [
                        "clear d.",
                        "VernacExtend",
                        "a191aa7598001bcefdf95c10e68534f45581934f"
                    ]
                },
                {
                    "command": [
                        "set (X:=(KSmap (traverse unit b) (traverse a unit x))).",
                        "VernacExtend",
                        "aaa1b1f0ab0059ac8de6f547ee91c544f8608b1a"
                    ]
                },
                {
                    "command": [
                        "replace X with (duplicate unit (traverse a b x)) by apply (coalg_duplicate traverse unit b x).",
                        "VernacExtend",
                        "bbe3c53545274eac4f7d0ee5b18793b2a579a7e9"
                    ]
                },
                {
                    "command": [
                        "clear X.",
                        "VernacExtend",
                        "42e1c1ca5cee451bb28bc87827e0d0c519748b39"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "identity_law",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "destruct F.",
                        "VernacExtend",
                        "e1303f88777128c097feaccddeb2cd8942e777dc"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "composition_law",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "destruct F.",
                        "VernacExtend",
                        "e1303f88777128c097feaccddeb2cd8942e777dc"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homomorphism_law",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "fold (map f (pure F x)).",
                        "VernacExtend",
                        "95f231ff7c93f67734ef553fa41cafa0ab22a566"
                    ]
                },
                {
                    "command": [
                        "destruct F.",
                        "VernacExtend",
                        "e1303f88777128c097feaccddeb2cd8942e777dc"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "interchange_law",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "destruct F.",
                        "VernacExtend",
                        "e1303f88777128c097feaccddeb2cd8942e777dc"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_compose",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "intros H.",
                        "VernacExtend",
                        "5cfae87a34fa7b59a257c9640f1b674f6e6d780b"
                    ]
                },
                {
                    "command": [
                        "unfold map; rewrite <- composition_law.",
                        "VernacExtend",
                        "753110ca027b027b2a10a409e44b241b0fe9b03b"
                    ]
                },
                {
                    "command": [
                        "unfold map; rewrite !homomorphism_law.",
                        "VernacExtend",
                        "bb1b1b967c7ee48cae889eeef17cee9c19fd4695"
                    ]
                },
                {
                    "command": [
                        "repeat f_equal.",
                        "VernacExtend",
                        "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IdApplicative",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "exists (fun A => A) (fun a (x : a) => x) (fun a b (f : a -> b) => f); try reflexivity.",
                        "VernacExtend",
                        "b1f25566f21bbe1146167efc9f52bd2ae8e0f972"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "NatPlusApplicative",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "exists (fun _ => nat) (fun _ _ => 0) (fun a b => plus).",
                        "VernacExtend",
                        "a3af42a3c8735b14164e7cb4b5246f2ba5300166"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros _ _ _ x y z.",
                        "VernacExtend",
                        "c72174ab66d4b56d600c9c1cd063d1328d409321"
                    ]
                },
                {
                    "command": [
                        "apply plus_assoc_reverse.",
                        "VernacExtend",
                        "070005ab7dc7c0ff455a2fae7e2e9be157b60085"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros _ _ x _.",
                        "VernacExtend",
                        "f2a3978c978c34e7aed4dccde4a70091cb5cc904"
                    ]
                },
                {
                    "command": [
                        "apply plus_0_r.",
                        "VernacExtend",
                        "1bb2e62d3f2920b099502f5b5298fe0b404a5dac"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "ConstListApplicative",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "exists (fun _ => list a) (fun _ _ => nil) (fun _ _ => (@app a)).",
                        "VernacExtend",
                        "4a3a7dad5ff1159a92215d08385b534f521431f2"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros _ _ _ x y z.",
                        "VernacExtend",
                        "c72174ab66d4b56d600c9c1cd063d1328d409321"
                    ]
                },
                {
                    "command": [
                        "apply app_assoc_reverse.",
                        "VernacExtend",
                        "b2389261ed5ef59a5c185051f9a62cf60ac3d53b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros _ _ x _.",
                        "VernacExtend",
                        "f2a3978c978c34e7aed4dccde4a70091cb5cc904"
                    ]
                },
                {
                    "command": [
                        "apply app_nil_r.",
                        "VernacExtend",
                        "1acc6e41b925ad1735e846b2af9e7fd2a73a745d"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "append_view",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "intros f v.",
                        "VernacExtend",
                        "7f024824679d59817e562487ab467f1cfd4aee11"
                    ]
                },
                {
                    "command": [
                        "apply (f (Vector.nil _)).",
                        "VernacExtend",
                        "33ae66f40e8a14f488ca62011f2ac7a097a7d82d"
                    ]
                },
                {
                    "command": [
                        "intros f v.",
                        "VernacExtend",
                        "7f024824679d59817e562487ab467f1cfd4aee11"
                    ]
                },
                {
                    "command": [
                        "replace v with (Vector.cons _ (Vector.hd v) (n + p) (Vector.tl v)).",
                        "VernacExtend",
                        "3e1d25c04ecb8dbf209fdf880e4456badee59281"
                    ]
                },
                {
                    "command": [
                        "destruct (Vector.tl v) as [v1 v2] using IHn.",
                        "VernacExtend",
                        "8e4e1660bc44d58fa8e01c27cdbe8f7a3db76577"
                    ]
                },
                {
                    "command": [
                        "apply (f (Vector.cons _ (Vector.hd v) _ v1)).",
                        "VernacExtend",
                        "8f8df97358972939f3b31e2c4fc4b886fe13834f"
                    ]
                },
                {
                    "command": [
                        "assert (forall m (v : Vector.t A (S m)), Vector.cons A (Vector.hd v) m (Vector.tl v) = v).",
                        "VernacExtend",
                        "6a9f7ca50c3026084a41de34b86dc4ac38988c5b"
                    ]
                },
                {
                    "command": [
                        "clear -A.",
                        "VernacExtend",
                        "8bbde9e022a1f94dbc55e4d7811cae01dc79d1d2"
                    ]
                },
                {
                    "command": [
                        "apply Vector.caseS.",
                        "VernacExtend",
                        "7cc06bafc2c0b4c2e588ee115d9885165728080c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "append_view_append",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "induction v1.",
                        "VernacExtend",
                        "8233e58a25881e708b8947eaefec6715fc42d548"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv1.",
                        "VernacExtend",
                        "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KSpure_KSap_KSmap",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KSpure_id",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "destruct k.",
                        "VernacExtend",
                        "276a2174e55489a07c8e0fd8db1630e98ae9c376"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivalent_KS",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "intros Hpeek Hpos.",
                        "VernacExtend",
                        "95929025efba9eab1ef9c2707f2b1db463b77a1b"
                    ]
                },
                {
                    "command": [
                        "transitivity (kleeneStore (fun v => peek1 (eq_rect _ _ v _ (eq_sym e))) (eq_rect _ _ pos1 _ e)).",
                        "VernacExtend",
                        "ae0364e00d7f0eae6da2249aa7d4c778900292c5"
                    ]
                },
                {
                    "command": [
                        "clear Hpeek Hpos.",
                        "VernacExtend",
                        "ca6bf49790ee1b63e3499a13406314991dd0843c"
                    ]
                },
                {
                    "command": [
                        "generalize e.",
                        "VernacExtend",
                        "6531a90dcea6ccb14823627ef81b68708e51e645"
                    ]
                },
                {
                    "command": [
                        "rewrite <- e.",
                        "VernacExtend",
                        "038d705295bc042ea4f7eab695069943e9f585f2"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite Hpos.",
                        "VernacExtend",
                        "0c3a64985e5fcb13c0e749f852e1e9610ba931bb"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros v.",
                        "VernacExtend",
                        "f0f168cc2ac7023c827b1c250dd2eb8df6c327c6"
                    ]
                },
                {
                    "command": [
                        "apply Hpeek.",
                        "VernacExtend",
                        "421ec11098a6154d297df2be09a41a97eb68a60e"
                    ]
                },
                {
                    "command": [
                        "generalize e.",
                        "VernacExtend",
                        "6531a90dcea6ccb14823627ef81b68708e51e645"
                    ]
                },
                {
                    "command": [
                        "rewrite e.",
                        "VernacExtend",
                        "1896cbdbda80ea761a6be423aaedd9d6b23173b0"
                    ]
                },
                {
                    "command": [
                        "apply K_dec_set.",
                        "VernacExtend",
                        "1433f227a3b1332604e31b26476cfee592fad273"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "composition_KS",
            "line_nb": 371,
            "steps": [
                {
                    "command": [
                        "destruct x; destruct y; destruct z.",
                        "VernacExtend",
                        "7efe0b53954a08107bc20c48d2a99f39d419a4b0"
                    ]
                },
                {
                    "command": [
                        "unfold KSap.",
                        "VernacExtend",
                        "f0ab55bf5b54dc87d72ec411040831cda664e62a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply (equivalent_KS (e:=(eq_sym (plus_assoc dim0 dim1 dim2)))).",
                        "VernacExtend",
                        "2256abbe8d802c2e09f37ba3e46448f407b55f13"
                    ]
                },
                {
                    "command": [
                        "intros v1 v2.",
                        "VernacExtend",
                        "4b0633b0986b00376ef8bea145410b501f7ac049"
                    ]
                },
                {
                    "command": [
                        "pattern v1; apply append_view; intros v1' v1c.",
                        "VernacExtend",
                        "9b378c7c7e7827729164713c7e88eee1170da622"
                    ]
                },
                {
                    "command": [
                        "pattern v1'; apply append_view; intros v1a v1b.",
                        "VernacExtend",
                        "a4b78627a4c268685654e01af6fff142eb6ad754"
                    ]
                },
                {
                    "command": [
                        "pattern v2; apply append_view; intros v2a v2'.",
                        "VernacExtend",
                        "f61d8e06ef3411f082835a660ba9a2aa81e9580e"
                    ]
                },
                {
                    "command": [
                        "pattern v2'; apply append_view; intros v2b v2c.",
                        "VernacExtend",
                        "84f455260f85db24c52448615fd8e24b09fba6b0"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite append_view_append.",
                        "VernacExtend",
                        "6f7466b0cd15f60985e6e0ad54279fe75bff154d"
                    ]
                },
                {
                    "command": [
                        "clear -v2c.",
                        "VernacExtend",
                        "28041f489297eefc44787a752a1ed59d20d078ff"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (append_assoc _ _ _ (plus_assoc _ _ _)).",
                        "VernacExtend",
                        "1a9caebcd7483bbdafade28e0a4087523af948bf"
                    ]
                },
                {
                    "command": [
                        "generalize (eq_sym (plus_assoc dim0 dim1 dim2)).",
                        "VernacExtend",
                        "d27af0a88ede5da4a7160b524a3a0e5793ac868f"
                    ]
                },
                {
                    "command": [
                        "generalize (plus_assoc dim0 dim1 dim2).",
                        "VernacExtend",
                        "dd0ac5c796aca8fb689e512558645dbb5dcf83a8"
                    ]
                },
                {
                    "command": [
                        "intros e; generalize e; rewrite <- e; clear e.",
                        "VernacExtend",
                        "46f949e7b108041eb22c9fcc8fc24d4f59a09e20"
                    ]
                },
                {
                    "command": [
                        "intros e; pattern e; apply K_dec_set; clear e.",
                        "VernacExtend",
                        "15b771c5fbba3b3e7919fe250cebf551a9143977"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "intros e; pattern e; apply K_dec_set; clear e.",
                        "VernacExtend",
                        "15b771c5fbba3b3e7919fe250cebf551a9143977"
                    ]
                },
                {
                    "command": [
                        "decide equality.",
                        "VernacExtend",
                        "10aba07d521545accbb51a4c2e0695a9ddce3199"
                    ]
                },
                {
                    "command": [
                        "simpl; intros H.",
                        "VernacExtend",
                        "b5476f89307becbcdf3b38db9846f4e56f6d806f"
                    ]
                },
                {
                    "command": [
                        "destruct (append_inj H) as [H0 H'].",
                        "VernacExtend",
                        "2023283db94443ccbc71eec3745d11aa6fa68aa6"
                    ]
                },
                {
                    "command": [
                        "destruct (append_inj H') as [H1 H2].",
                        "VernacExtend",
                        "175e0d44afd44a524424915df95c19fcfce8805b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0, H1, H2.",
                        "VernacExtend",
                        "cd3fdf72e4e686d2bbce96455d5c26ea96210738"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "clear -i.",
                        "VernacExtend",
                        "853bac592d8a2336003dd9e5fa5759db2ca873db"
                    ]
                },
                {
                    "command": [
                        "apply to_list_eq.",
                        "VernacExtend",
                        "31e69a983ee53b165576561a49779d0799315791"
                    ]
                },
                {
                    "command": [
                        "induction pos0.",
                        "VernacExtend",
                        "3cca325f7aa043459d51a6dd9df9b2832a0bf99a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Vector.to_list in *.",
                        "VernacExtend",
                        "48d4a2f4cee5b51a91372b4196cf676df2484a35"
                    ]
                },
                {
                    "command": [
                        "rewrite IHpos0.",
                        "VernacExtend",
                        "e22e70325197f9a5538692dd62f653d12bd86848"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KSpure_KSpure",
            "line_nb": 405,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "interchange_KSpure",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "destruct f as [dimf peekf posf].",
                        "VernacExtend",
                        "35e6e8d9208c6a2213ce4ecf6c9c028402115cc0"
                    ]
                },
                {
                    "command": [
                        "unfold KSap.",
                        "VernacExtend",
                        "f0ab55bf5b54dc87d72ec411040831cda664e62a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply (equivalent_KS (e:=(eq_sym (plus_0_r dimf)))).",
                        "VernacExtend",
                        "ffab5137a3fc21add6f6ef5206a35f34d159c5ba"
                    ]
                },
                {
                    "command": [
                        "intros v1 v2 Hv.",
                        "VernacExtend",
                        "7d12d8a103e4b052adb4aab3ac681c7f86c2b38c"
                    ]
                },
                {
                    "command": [
                        "replace v2 with (Vector.append v1 (Vector.nil _)).",
                        "VernacExtend",
                        "ea257a6fb30b9b93eb22725d41165db01197ea55"
                    ]
                },
                {
                    "command": [
                        "rewrite append_view_append; reflexivity.",
                        "VernacExtend",
                        "379b93d1cea76ac8a6081eef6e99dbc6c0d50303"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hv.",
                        "VernacExtend",
                        "b431c79ef7b5eaca13f0994a796bd709d6bf7375"
                    ]
                },
                {
                    "command": [
                        "clear -v1.",
                        "VernacExtend",
                        "c1d51939a1d54b6d71a5f1fb6218372191305fc8"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply to_list_eq.",
                        "VernacExtend",
                        "31e69a983ee53b165576561a49779d0799315791"
                    ]
                },
                {
                    "command": [
                        "induction v1.",
                        "VernacExtend",
                        "8233e58a25881e708b8947eaefec6715fc42d548"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Vector.to_list in *.",
                        "VernacExtend",
                        "48d4a2f4cee5b51a91372b4196cf676df2484a35"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv1.",
                        "VernacExtend",
                        "999fb5b2a9a1e1a8f0693cd799378c0c85bfc887"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply to_list_eq.",
                        "VernacExtend",
                        "31e69a983ee53b165576561a49779d0799315791"
                    ]
                },
                {
                    "command": [
                        "clear -posf.",
                        "VernacExtend",
                        "0606c9947ede595aadf4fa86005331965f16cb67"
                    ]
                },
                {
                    "command": [
                        "induction posf.",
                        "VernacExtend",
                        "54efc84f3337ca77428a017e0e7adbc426d3a82d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Vector.to_list in *.",
                        "VernacExtend",
                        "48d4a2f4cee5b51a91372b4196cf676df2484a35"
                    ]
                },
                {
                    "command": [
                        "rewrite IHposf.",
                        "VernacExtend",
                        "5dbad2835192c296fead01d58d6b2aa6d52ef7b5"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KSApplicative",
            "line_nb": 436,
            "steps": [
                {
                    "command": [
                        "exists (KleeneStore i j) (KSpure i j) (@KSap i j).",
                        "VernacExtend",
                        "36b9444cb475c0bf7ecf8c9bd2cb94ddb38d43e0"
                    ]
                },
                {
                    "command": [
                        "apply KSpure_id.",
                        "VernacExtend",
                        "6e753cd992e75262067c1a9110e5ddf819c3b987"
                    ]
                },
                {
                    "command": [
                        "apply composition_KS.",
                        "VernacExtend",
                        "bbe2e3871fd91f568ed3c338643634c70f56366f"
                    ]
                },
                {
                    "command": [
                        "apply KSpure_KSpure.",
                        "VernacExtend",
                        "934fcbc3a43380c2b8955db0ae4924deafa12ace"
                    ]
                },
                {
                    "command": [
                        "apply interchange_KSpure.",
                        "VernacExtend",
                        "d57771867f138d0d10c1495d6654c90e8b0d4ce7"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Compose_identity",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure.",
                        "VernacExtend",
                        "52117850a88906872726c758c38a9c195dd172b9"
                    ]
                },
                {
                    "command": [
                        "rewrite homomorphism_law.",
                        "VernacExtend",
                        "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
                    ]
                },
                {
                    "command": [
                        "replace (fun x0 : G a => ap (a:=G) (a0:=a) (b:=a) (pure G (fun y : a => y)) x0) with (fun (y : G a) => y).",
                        "VernacExtend",
                        "1cec791b32c05883f99005b2204706bdb45db503"
                    ]
                },
                {
                    "command": [
                        "apply identity_law.",
                        "VernacExtend",
                        "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intro y.",
                        "VernacExtend",
                        "e3c8f46be89ddd936f80438ca48795b71d827640"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply identity_law.",
                        "VernacExtend",
                        "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Compose_composition",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure.",
                        "VernacExtend",
                        "52117850a88906872726c758c38a9c195dd172b9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
                    ]
                },
                {
                    "command": [
                        "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
                        "VernacExtend",
                        "f5aa78392c04a40675db451d8176aefc979abae6"
                    ]
                },
                {
                    "command": [
                        "unfold map; simpl; repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "e2ad0bf2d68c31df353087b3204df611aaa1759b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite interchange_law.",
                        "VernacExtend",
                        "679344af48000ab6217a6a994d8b34b76c11125d"
                    ]
                },
                {
                    "command": [
                        "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
                        "VernacExtend",
                        "f5aa78392c04a40675db451d8176aefc979abae6"
                    ]
                },
                {
                    "command": [
                        "unfold map; simpl; repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "e2ad0bf2d68c31df353087b3204df611aaa1759b"
                    ]
                },
                {
                    "command": [
                        "replace (fun (w : G (b -> c)) (w0 : G (a -> b)) (x0 : G a) => ap (a:=G) (a0:=a) (b:=c) (ap (a:=G) (a0:=a -> b) (b:=a -> c) (ap (a:=G) (a0:=b -> c) (b:=(a -> b) -> a -> c) (pure G (fun (f : b -> c) (g : a -> b) (w1 : a) => f (g w1))) w) w0) x0) with (fun (w : G (b -> c)) (w0 : G (a -> b)) (w1 : G a) => ap (a:=G) (a0:=b) (b:=c) w (ap (a:=G) (a0:=a) (b:=b) w0 w1)).",
                        "VernacExtend",
                        "1633601aedb0fbb5b2a334d4ad8cc24519b2ecd8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "repeat (apply functional_extensionality; intro).",
                        "VernacExtend",
                        "68fec5b98ab4a8bdd25eb93f9e3fc20717d834ca"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply composition_law.",
                        "VernacExtend",
                        "207c5038608d3b22be514f6cbf64ae57284b86fe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Compose_homomorphism",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure.",
                        "VernacExtend",
                        "52117850a88906872726c758c38a9c195dd172b9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Compose_interchange",
            "line_nb": 476,
            "steps": [
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure.",
                        "VernacExtend",
                        "52117850a88906872726c758c38a9c195dd172b9"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "5ebbbb34de5d3bb6aa161347d318c63433b1be72"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite interchange_law.",
                        "VernacExtend",
                        "679344af48000ab6217a6a994d8b34b76c11125d"
                    ]
                },
                {
                    "command": [
                        "repeat (unfold map; simpl; (repeat rewrite homomorphism_law); rewrite <- composition_law).",
                        "VernacExtend",
                        "f5aa78392c04a40675db451d8176aefc979abae6"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite interchange_law.",
                        "VernacExtend",
                        "679344af48000ab6217a6a994d8b34b76c11125d"
                    ]
                },
                {
                    "command": [
                        "unfold map; simpl; repeat rewrite homomorphism_law.",
                        "VernacExtend",
                        "e2ad0bf2d68c31df353087b3204df611aaa1759b"
                    ]
                },
                {
                    "command": [
                        "replace (fun w : G (a -> b) => ap (a:=G) (a0:=a) (b:=b) w (pure G x)) with (fun x0 : G (a -> b) => ap (a:=G) (a0:=a -> b) (b:=b) (pure G (fun g : a -> b => g x)) x0).",
                        "VernacExtend",
                        "65962b0da869f7a2454f1a1eb7833618b0bdbe43"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intro.",
                        "VernacExtend",
                        "f3c604ae176c5a963bda3c0a2df4c82ec46e027b"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply interchange_law.",
                        "VernacExtend",
                        "fc638a5a4ed600439051e1558c698f9ee083edcb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ComposeApplicative",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "exists FG Compose_pure Compose_ap.",
                        "VernacExtend",
                        "ccb606cbdf98a187aff221f7db43d56e4ee27bcf"
                    ]
                },
                {
                    "command": [
                        "apply Compose_identity.",
                        "VernacExtend",
                        "4366237b6eb7130911da1647298b26278e18b288"
                    ]
                },
                {
                    "command": [
                        "apply Compose_composition.",
                        "VernacExtend",
                        "c3d1ef6560caf0e20407353410247c159ef455da"
                    ]
                },
                {
                    "command": [
                        "apply Compose_homomorphism.",
                        "VernacExtend",
                        "2d37f55973705b84d1471be84f977c35c41238b6"
                    ]
                },
                {
                    "command": [
                        "apply Compose_interchange.",
                        "VernacExtend",
                        "cb156dab7f167098d26e6f55e5dab6e1e7e8ae0c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "sequenceVector_Id",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv.",
                        "VernacExtend",
                        "d570bae52c78555f17eecb129b7bf9ea398c0157"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sequenceVector_map",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "unfold map; simpl.",
                        "VernacExtend",
                        "077c6c5584153664e735f893b6fbd7dc9207967b"
                    ]
                },
                {
                    "command": [
                        "rewrite homomorphism_law.",
                        "VernacExtend",
                        "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHv.",
                        "VernacExtend",
                        "8eadb789af177fe704cb2a0e227c181d84af98b2"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sequenceVector_compose",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold map.",
                        "VernacExtend",
                        "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
                    ]
                },
                {
                    "command": [
                        "rewrite homomorphism_law.",
                        "VernacExtend",
                        "9066568dd70392ec5d76ee66d1ba5fdc8d0e1f25"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv.",
                        "VernacExtend",
                        "d570bae52c78555f17eecb129b7bf9ea398c0157"
                    ]
                },
                {
                    "command": [
                        "unfold map.",
                        "VernacExtend",
                        "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
                    ]
                },
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure.",
                        "VernacExtend",
                        "52117850a88906872726c758c38a9c195dd172b9"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sequenceVector_append",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "induction v1; simpl.",
                        "VernacExtend",
                        "1e34611a454855eca9c18c4354315b92ed75f45c"
                    ]
                },
                {
                    "command": [
                        "unfold map; rewrite homomorphism_law; simpl.",
                        "VernacExtend",
                        "d52a6af6d9d41bd85db088b4630947c6eb1080e5"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply identity_law.",
                        "VernacExtend",
                        "4f18ac84e400847808381ccfc667cd3390217f52"
                    ]
                },
                {
                    "command": [
                        "rewrite IHv1; clear IHv1.",
                        "VernacExtend",
                        "eeb2f7f96818b9797193495fbea392ae167cb992"
                    ]
                },
                {
                    "command": [
                        "unfold map.",
                        "VernacExtend",
                        "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idiomaticTransform_pure",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "destruct eta.",
                        "VernacExtend",
                        "56d2a4bc3e0774100be698221c898df2f6715fbb"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idiomaticTransform_ap",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "destruct eta.",
                        "VernacExtend",
                        "56d2a4bc3e0774100be698221c898df2f6715fbb"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idiomaticTransform_map",
            "line_nb": 554,
            "steps": [
                {
                    "command": [
                        "unfold map.",
                        "VernacExtend",
                        "d6f3bc771467f8d4970eb68d25db08fab4a0a015"
                    ]
                },
                {
                    "command": [
                        "rewrite idiomaticTransform_ap, idiomaticTransform_pure.",
                        "VernacExtend",
                        "14376b4367ca4481d66fe3d33eb2562aa9f70626"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idiomaticTransform_sequenceVector",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "induction v.",
                        "VernacExtend",
                        "10789bb90c6621e796afae189b61bc10f356257b"
                    ]
                },
                {
                    "command": [
                        "apply idiomaticTransform_pure.",
                        "VernacExtend",
                        "3dce977bbe3ac0775fff7f1c4b3123c8a3cd80bc"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite idiomaticTransform_ap, idiomaticTransform_map, IHv.",
                        "VernacExtend",
                        "1830ca98ffd84e906198db4c887eb3a2561da74e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "idiomaticTransform_traverseVector",
            "line_nb": 565,
            "steps": [
                {
                    "command": [
                        "unfold traverseVector.",
                        "VernacExtend",
                        "74337443214591e61fadcaba257fa05a181657a2"
                    ]
                },
                {
                    "command": [
                        "rewrite idiomaticTransform_sequenceVector.",
                        "VernacExtend",
                        "adcb3001075e811965cd20039ef9978be7e751f5"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply Vector_map_compose.",
                        "VernacExtend",
                        "ae075cab0eb9ce350ed2621267907c82fcb6ff8c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extract_pure",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extract_ap",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "destruct f; destruct x.",
                        "VernacExtend",
                        "88e11e7b769723016fb41c4271828a18941b386a"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite append_view_append.",
                        "VernacExtend",
                        "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extractIT",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "exists (@extract i).",
                        "VernacExtend",
                        "1cb92db2106b55244346e1d10107ec867a5760c2"
                    ]
                },
                {
                    "command": [
                        "exact (@extract_pure i).",
                        "VernacExtend",
                        "5aa61debdceae837e5b8015d96565d09aa24fdd8"
                    ]
                },
                {
                    "command": [
                        "exact (@extract_ap i).",
                        "VernacExtend",
                        "4c6bfdb1c694874089d8dc13fe638b33a6b2bd5f"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "duplicate_pure",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "unfold KSpure, duplicate.",
                        "VernacExtend",
                        "3b627220a3e67b03ddbd5cd9ed0e71b66d670b3e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "apply Vector.case0.",
                        "VernacExtend",
                        "b4fef8c44c49d28962385a2235ccd2bf370820f5"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "duplicate_ap",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold KSap, duplicate.",
                        "VernacExtend",
                        "24e1a8d83fe9e5fbfc19a204d779889b6766e245"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "apply append_view; intros v1 v2.",
                        "VernacExtend",
                        "6480aab32b602745ce72a8e56ad8fd09f5681212"
                    ]
                },
                {
                    "command": [
                        "rewrite append_view_append.",
                        "VernacExtend",
                        "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "duplicateIT",
            "line_nb": 605,
            "steps": [
                {
                    "command": [
                        "exists (@duplicate i j k).",
                        "VernacExtend",
                        "c07489bbd2788447d3fb8bea01fe902398acc5c5"
                    ]
                },
                {
                    "command": [
                        "exact (@duplicate_pure i j k).",
                        "VernacExtend",
                        "cb574c7f8b9c30abbdd399357fddb2499bd9661c"
                    ]
                },
                {
                    "command": [
                        "exact (@duplicate_ap i j k).",
                        "VernacExtend",
                        "093462c93ec00fcdb4271425ad666f7c13905871"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "dimIT",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "exists (@dim i j).",
                        "VernacExtend",
                        "1cefbecc38412e26f4c87cb4aaa169aeb7a84812"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "pos_ap",
            "line_nb": 615,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction (pos f).",
                        "VernacExtend",
                        "8003300266c53a8fa2df3757893c70162d8c4191"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold Vector.to_list in *.",
                        "VernacExtend",
                        "48d4a2f4cee5b51a91372b4196cf676df2484a35"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt.",
                        "VernacExtend",
                        "d7c6a10da1c3b93e6cd1b076977ec06f52b9b586"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "posIT",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "exists (fun a (x : KSApplicative i j a) => Vector.to_list (pos x)).",
                        "VernacExtend",
                        "aa550d1e2bc6ec679cc912443916762dbfa54a59"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply (@pos_ap i j).",
                        "VernacExtend",
                        "d0398ddf966ea70b01afc50bec6f05ddd72bbfb7"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "research_pure",
            "line_nb": 632,
            "steps": [
                {
                    "command": [
                        "apply homomorphism_law.",
                        "VernacExtend",
                        "82721c599eb932b909607d3bd42f75ce546cfdb8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "research_ap",
            "line_nb": 635,
            "steps": [
                {
                    "command": [
                        "unfold research; simpl.",
                        "VernacExtend",
                        "153562ad6550731b8e11c870650fc8d25eb86d29"
                    ]
                },
                {
                    "command": [
                        "unfold map; simpl.",
                        "VernacExtend",
                        "077c6c5584153664e735f893b6fbd7dc9207967b"
                    ]
                },
                {
                    "command": [
                        "rewrite Vector_map_append, sequenceVector_append.",
                        "VernacExtend",
                        "a0e8cf1427394161c78cb0989f96eabccbdd047a"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "repeat f_equal.",
                        "VernacExtend",
                        "ef52a498e8dfd0e6e312a5f55aa7a117295c3b16"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality_dep; intros v1.",
                        "VernacExtend",
                        "c91d79a99b70e535d0398a3fefab49ce24f992d5"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros v2.",
                        "VernacExtend",
                        "3e2224b1ef5fbdcf5c4c78390b46e154dd0b09b9"
                    ]
                },
                {
                    "command": [
                        "rewrite append_view_append.",
                        "VernacExtend",
                        "7ff42108e9e31311693a357a3a7e365c0eaa1c5e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Research",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "exists research.",
                        "VernacExtend",
                        "f3598f49c65754d6e619042a565ae1a88b7d0970"
                    ]
                },
                {
                    "command": [
                        "exact research_pure.",
                        "VernacExtend",
                        "0b71a9d7bf6845fdd2531a1055fc898114bcc976"
                    ]
                },
                {
                    "command": [
                        "exact research_ap.",
                        "VernacExtend",
                        "7b05d61e985649a9507b87bd9f396969beaeedcf"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "traverseVector_free_applicative",
            "line_nb": 655,
            "steps": [
                {
                    "command": [
                        "induction x.",
                        "VernacExtend",
                        "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
                    ]
                },
                {
                    "command": [
                        "unfold traverseVector; simpl.",
                        "VernacExtend",
                        "b8cbbce4cd3436e266e1241c914da925ebbdef40"
                    ]
                },
                {
                    "command": [
                        "rewrite idiomaticTransform_pure.",
                        "VernacExtend",
                        "ae6047d3ee0e92d87532731788f4303fb2003514"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold traverseVector in *; simpl.",
                        "VernacExtend",
                        "6ab494717ffe8fa8be54bd520c0e332f92dca404"
                    ]
                },
                {
                    "command": [
                        "rewrite idiomaticTransform_ap, idiomaticTransform_map.",
                        "VernacExtend",
                        "a7d29b60320a01437a08a8b1ff387777d6ff3997"
                    ]
                },
                {
                    "command": [
                        "rewrite IHx.",
                        "VernacExtend",
                        "357385fc8aa6d86ac175f8be191ce152840328d1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "traverseVector_identity",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "unfold traverseVector.",
                        "VernacExtend",
                        "74337443214591e61fadcaba257fa05a181657a2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Vector_map_id.",
                        "VernacExtend",
                        "6cb9e611c58a4d655e40c5454f0f7cf46bcd4fb4"
                    ]
                },
                {
                    "command": [
                        "apply (sequenceVector_Id x).",
                        "VernacExtend",
                        "aafa173db71c96df4b2f2674077b0c778e291a91"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "traverseVector_compose",
            "line_nb": 672,
            "steps": [
                {
                    "command": [
                        "unfold traverseVector.",
                        "VernacExtend",
                        "74337443214591e61fadcaba257fa05a181657a2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite (sequenceVector_compose (Vector.map (fun y : a => map (a:=F) g (f y)) x)).",
                        "VernacExtend",
                        "4b06e57251df65dffb3005a15b586c6f7a217587"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Vector_map_compose (g:=map (a:=F) g) (f:=f) (h:= (fun y : a => map (a:=F) g (f y)))); [|reflexivity].",
                        "VernacExtend",
                        "852672df22f0f5b8901b01d09914362953e82d06"
                    ]
                },
                {
                    "command": [
                        "rewrite <- sequenceVector_map.",
                        "VernacExtend",
                        "f3cc766236002221883d251b2b16a08d6211156c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply map_compose.",
                        "VernacExtend",
                        "a25c76172f7bb4477a9442eaa3129040ef9b6bc8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vector",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "exists (fun a => Vector.t a n) (@traverseVector n).",
                        "VernacExtend",
                        "635b859a673c84b65bc3e9505dec0373e1bcfae1"
                    ]
                },
                {
                    "command": [
                        "apply traverseVector_free_applicative.",
                        "VernacExtend",
                        "b54c114b9e1a0b7b9e789d2ba23fecfbe4ca478c"
                    ]
                },
                {
                    "command": [
                        "apply traverseVector_identity.",
                        "VernacExtend",
                        "7bb3b46ca58585246dffcce792126bbb5a4a4114"
                    ]
                },
                {
                    "command": [
                        "apply traverseVector_compose.",
                        "VernacExtend",
                        "a51ab9caa6d6e36b74804752e188c4e3480ba37c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "research_impure",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "unfold research; simpl; unfold map.",
                        "VernacExtend",
                        "7f34e77061dad57b902e29fdb7a3e07a38711218"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "replace (fun w : b => Vector.hd (Vector.cons b w 0 (Vector.nil b))) with (fun y : b => y).",
                        "VernacExtend",
                        "ea518c55ece9e6579751f62de97514be1564ca84"
                    ]
                },
                {
                    "command": [
                        "apply identity_law.",
                        "VernacExtend",
                        "14f6f81bf29bcbf02522ce8ecda3cc7053e765b9"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality.",
                        "VernacExtend",
                        "9c7e1fe6d23159d5580801709782c72a6cb0684f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "traversal_coalg_extract",
            "line_nb": 702,
            "steps": [
                {
                    "command": [
                        "unfold traversal_coalg.",
                        "VernacExtend",
                        "d6e685ecfdabcd9a149ba77d4998410a105550e0"
                    ]
                },
                {
                    "command": [
                        "rewrite free_applicative.",
                        "VernacExtend",
                        "634fb6fcb1fd647e0dcce44454af752321ee45a6"
                    ]
                },
                {
                    "command": [
                        "apply traverse_identity.",
                        "VernacExtend",
                        "1e827be01fda31b8388cb7471ec52108163d4895"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "traversal_coalg_duplicate",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "unfold traversal_coalg.",
                        "VernacExtend",
                        "d6e685ecfdabcd9a149ba77d4998410a105550e0"
                    ]
                },
                {
                    "command": [
                        "rewrite free_applicative.",
                        "VernacExtend",
                        "634fb6fcb1fd647e0dcce44454af752321ee45a6"
                    ]
                },
                {
                    "command": [
                        "replace (fun y : a => (duplicateIT a b c) c (impure c y)) with (fun y : a => (KSmap (impure c) (impure b y))).",
                        "VernacExtend",
                        "b091e458dea060539f9be980cad1bc41241c4e72"
                    ]
                },
                {
                    "command": [
                        "rewrite (@traverse_compose T a b c (KSApplicative a b) (KSApplicative b c) (impure b) (impure c)).",
                        "VernacExtend",
                        "23df7e78f2e627cfca0b2722a6ecad14cf478581"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros y.",
                        "VernacExtend",
                        "c6101591a1180e185329f53db444e3e4fdb7586e"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold KSmap, duplicate; simpl.",
                        "VernacExtend",
                        "a71e96a6cf167c87c32f194588311353334940ea"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros v; clear -v.",
                        "VernacExtend",
                        "7be070a11a61da24812276e44f4944e5b129fac3"
                    ]
                },
                {
                    "command": [
                        "unfold impure.",
                        "VernacExtend",
                        "669d623d10c8b4fc5cf5925c2e5b02542b2b00aa"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "transitivity (Vector.cons b (Vector.hd v) 0 (Vector.tl v)).",
                        "VernacExtend",
                        "738a60e9b2b1d416bb0c2bfd49c99723678f5d4e"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply Vector.case0.",
                        "VernacExtend",
                        "b4fef8c44c49d28962385a2235ccd2bf370820f5"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply (Vector.caseS (fun n v => forall (t : Vector.t b n), Vector.cons b (Vector.hd v) n (Vector.tl v) = v)).",
                        "VernacExtend",
                        "3e7b1c3f54b9a68fdb5705798efff92a9ffecd1c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "traversal_is_coalg",
            "line_nb": 727,
            "steps": [
                {
                    "command": [
                        "exists traversal_coalg.",
                        "VernacExtend",
                        "3aa8b0c4a06dca49f9025e679015318386cf6a26"
                    ]
                },
                {
                    "command": [
                        "exact traversal_coalg_extract.",
                        "VernacExtend",
                        "13b15e5dc0a4eacf4f5e480b1b073e425f6bb13f"
                    ]
                },
                {
                    "command": [
                        "exact traversal_coalg_duplicate.",
                        "VernacExtend",
                        "645c8eb8fba99c385df010a5cfb8a0730c33bd96"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "finContainer_free_applicative",
            "line_nb": 738,
            "steps": [
                {
                    "command": [
                        "destruct x as [s v].",
                        "VernacExtend",
                        "ce676ad913d0003184c864b903918e6b1e9eb3dd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "change (traverseVector (b:=b) (F:=G) (fun y : a => eta b (f y)) v) with (traverse (fun y : a => eta b (f y)) v).",
                        "VernacExtend",
                        "abb79327ace65dfc68962ab054f97cce8cfd1963"
                    ]
                },
                {
                    "command": [
                        "rewrite <- free_applicative.",
                        "VernacExtend",
                        "4585a87f8ae99b940fd4a8c56d66ebb66fb6734d"
                    ]
                },
                {
                    "command": [
                        "rewrite idiomaticTransform_map.",
                        "VernacExtend",
                        "3ce9cc268adffa6c0b094fe57b339bed3ff8f8d4"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finContainer_traverse_identity",
            "line_nb": 746,
            "steps": [
                {
                    "command": [
                        "destruct x as [s v].",
                        "VernacExtend",
                        "ce676ad913d0003184c864b903918e6b1e9eb3dd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold traverseVector.",
                        "VernacExtend",
                        "74337443214591e61fadcaba257fa05a181657a2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Vector_map_id;[| reflexivity].",
                        "VernacExtend",
                        "c538f3daf8e03851480e3c2ac25829ca55e38e46"
                    ]
                },
                {
                    "command": [
                        "rewrite (sequenceVector_Id v).",
                        "VernacExtend",
                        "c5b708b8fede02d878808b88f992955d5444df6c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finContainer_traverse_compose",
            "line_nb": 755,
            "steps": [
                {
                    "command": [
                        "destruct x as [s v].",
                        "VernacExtend",
                        "ce676ad913d0003184c864b903918e6b1e9eb3dd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "change (traverseVector (b:=b) (F:=F) f v) with (traverse f v).",
                        "VernacExtend",
                        "0f5705da162ea08c83a367db4721a83506117661"
                    ]
                },
                {
                    "command": [
                        "pose (h:= fun y => finContainer_traverse (b:=c) (F:=G) g (existT (fun x : shape spec => Vector.t b (card (f:=spec) x)) s y)).",
                        "VernacExtend",
                        "51640bc42328c186100d601d0a37168ad8c3ff09"
                    ]
                },
                {
                    "command": [
                        "rewrite (map_compose (h:= h));[|reflexivity].",
                        "VernacExtend",
                        "279794d86fecff731be2b1159dd017fda4bcd0f0"
                    ]
                },
                {
                    "command": [
                        "unfold h; simpl.",
                        "VernacExtend",
                        "11b9c74b7fb0ef8bc33404e7142f803a70f492fc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (map_compose (g:=map (a:=G) (existT (fun x : shape spec => Vector.t c (card (f:=spec) x)) s)) (f:=traverseVector (b:=c) (F:=G) g) (h:= h));[|reflexivity].",
                        "VernacExtend",
                        "78e45f2666795dd3e49e2786e6668a0f3230e1fc"
                    ]
                },
                {
                    "command": [
                        "change (map (a:=F) (traverseVector (b:=c) (F:=G) g) (traverseVector (b:=b) (F:=F) f v)) with (map (a:=F) (traverse (b:=c) (F:=G) g) (traverse (b:=b) (F:=F) f v)).",
                        "VernacExtend",
                        "ff83f8fd84e6720cab093fcedce55ba807f16f2b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (traverse_compose f g).",
                        "VernacExtend",
                        "49ef5d2c19516b59c90cace072f626a81a9c5a9b"
                    ]
                },
                {
                    "command": [
                        "unfold Compose_ap, Compose_pure, map.",
                        "VernacExtend",
                        "9c2d18eb80c571699166ed2b40596800d7729d76"
                    ]
                },
                {
                    "command": [
                        "rewrite interchange_law.",
                        "VernacExtend",
                        "a1cfa17f2b9698db48a89e36884adfbb10b71c67"
                    ]
                },
                {
                    "command": [
                        "repeat (repeat rewrite homomorphism_law; repeat rewrite <- composition_law; unfold map).",
                        "VernacExtend",
                        "f6fd12896ac1f1baf400f84a4152fd65c86c4cf3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FinContainer",
            "line_nb": 770,
            "steps": [
                {
                    "command": [
                        "exists finContainer finContainer_traverse.",
                        "VernacExtend",
                        "307c3192fd8a676a8fec193e9862473dca91a6dc"
                    ]
                },
                {
                    "command": [
                        "apply finContainer_free_applicative.",
                        "VernacExtend",
                        "517836a47e1321746b219ae29bd9690157ef4151"
                    ]
                },
                {
                    "command": [
                        "apply finContainer_traverse_identity.",
                        "VernacExtend",
                        "47c27239a72e285c42a7ee77e0d11bc1e0e6eddb"
                    ]
                },
                {
                    "command": [
                        "apply finContainer_traverse_compose.",
                        "VernacExtend",
                        "b780dfc2d30351783fa2a23a1a95d170071f4e52"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Traversal_is_finite_container",
            "line_nb": 777,
            "steps": [
                {
                    "command": [
                        "intros T.",
                        "VernacExtend",
                        "7231b6aa2a7e82a8551ec62f54be1c5ea82d33fb"
                    ]
                },
                {
                    "command": [
                        "pose (K := traversal_is_coalg T).",
                        "VernacExtend",
                        "cb598d44e74947611df8b814dcdb1f5fd265d211"
                    ]
                },
                {
                    "command": [
                        "exists (finContainerSpec (size K (a:=unit))).",
                        "VernacExtend",
                        "10efffa25430bff668538971dae4d28c0a5ebac3"
                    ]
                },
                {
                    "command": [
                        "exists (iso1 K).",
                        "VernacExtend",
                        "a34be2dcc3de1d702a6c60a39ec9f886adb05230"
                    ]
                },
                {
                    "command": [
                        "exists (iso2 (traverse:=K)).",
                        "VernacExtend",
                        "8f832059926f71fac3e9e9ea3ec7b2007e933e70"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros a.",
                        "VernacExtend",
                        "9fef235d1a71132a4c9de7f87ab95d540098d91d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply iso2_iso1.",
                        "VernacExtend",
                        "18cfb15e873030bb71202b4a44e14e2509b286cb"
                    ]
                },
                {
                    "command": [
                        "apply iso1_iso2.",
                        "VernacExtend",
                        "701384515e573bcead0d8f1b26a6d0e816e090fb"
                    ]
                },
                {
                    "command": [
                        "intros a b F h x.",
                        "VernacExtend",
                        "1d12e9572200c44bf54c62fbe46be901dc38d7e3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- identity_law.",
                        "VernacExtend",
                        "2981538d0c3c8eea63e00bec021b69681b5d3d83"
                    ]
                },
                {
                    "command": [
                        "replace (fun y : (FinContainer {| shape := T unit; card := size K (a:=unit) |}) b => y) with (fun y => iso1 K (iso2 (traverse:=K) (a:=b) y)) by (apply functional_extensionality; apply iso1_iso2).",
                        "VernacExtend",
                        "2c50aa9fa03eea14174ddce26fade3077b268f9c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (map_compose (g:=iso1 K (a:=b)) (f:=iso2 (traverse:=K) (a:=b))); [|reflexivity].",
                        "VernacExtend",
                        "ea07dd99d0d4cdb14c2504b42bb3e0a694feee4d"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "unfold traverse at 2; simpl.",
                        "VernacExtend",
                        "b9aebce10cdf7793e7d1abe8b87eea4c81634632"
                    ]
                },
                {
                    "command": [
                        "unfold traverseVector; simpl.",
                        "VernacExtend",
                        "b8cbbce4cd3436e266e1241c914da925ebbdef40"
                    ]
                },
                {
                    "command": [
                        "set (z := (fun b0 : Vector.t b (size K (a:=unit) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) => peek (k:=traverse (t:=T) (b:=b) (F:=KSApplicative unit b) (impure b) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) (eq_rect (size K (a:=unit) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))) (Vector.t b) b0 (dim (traverse (t:=T) (b:=b) (F:=KSApplicative unit b) (impure b) (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x)))))) (eq_sym (free_b_dim K (a:=unit) b unit (peek (k:=traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x) (Vector.const tt (dim (traverse (t:=T) (b:=unit) (F:=KSApplicative a unit) (impure unit) x))))))))).",
                        "VernacExtend",
                        "50d3d9fdc89368def85e290e339974150e69e488"
                    ]
                },
                {
                    "command": [
                        "rewrite (map_compose (h:=z));[|reflexivity].",
                        "VernacExtend",
                        "59db1ab4612bc3e05038f7e63a5a64a095d2b4d3"
                    ]
                },
                {
                    "command": [
                        "change (traverse h x = research h (let (s,v) := iso1 K (a:=a) x in kleeneStore (fun b => iso2 (existT _ s b)) v)).",
                        "VernacExtend",
                        "f5ea58a474ff6fd2d90a7954ab2ffd1b1ce2ac51"
                    ]
                },
                {
                    "command": [
                        "clear z.",
                        "VernacExtend",
                        "c7008215d0062fac2181e178ac87a11a66138287"
                    ]
                },
                {
                    "command": [
                        "transitivity (Research h _ (K a b x)).",
                        "VernacExtend",
                        "2544c442ae02b6c53040e581a69cfeefe568d364"
                    ]
                },
                {
                    "command": [
                        "unfold K.",
                        "VernacExtend",
                        "f3493d693cfeb3fd3e5f90658cfafb53a08c16be"
                    ]
                },
                {
                    "command": [
                        "simpl ((traversal_is_coalg T) a b x).",
                        "VernacExtend",
                        "2d59a40c81a341db6f203089755437f833d071ea"
                    ]
                },
                {
                    "command": [
                        "rewrite free_applicative.",
                        "VernacExtend",
                        "634fb6fcb1fd647e0dcce44454af752321ee45a6"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality; intros y.",
                        "VernacExtend",
                        "c6101591a1180e185329f53db444e3e4fdb7586e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite research_impure.",
                        "VernacExtend",
                        "9cff27eb5d9a128fada5eb759836e94b2c2e7b3c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl ((Research (F:=F) (b:=b) h) (T b)).",
                        "VernacExtend",
                        "085edb2f3ae71ba0c88a00a5413eb5bb02b46756"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "apply iso_coalg.",
                        "VernacExtend",
                        "03ffca487bd6b50e43607d63758c101842f65953"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}