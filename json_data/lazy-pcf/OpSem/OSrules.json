{
    "filename": "OpSem/OSrules.v",
    "coq_project": "lazy-pcf",
    "vernac_cmds": [
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Require Import syntax.",
            "VernacRequire",
            "fade23789687b5b286a50d71d8c4dc25f4366224"
        ],
        [
            "Require Import environments.",
            "VernacRequire",
            "3dc9988885c5131265613d4f106c7911dfca4ead"
        ],
        [
            "Require Import typecheck.",
            "VernacRequire",
            "4a2f74fc48f0cc3cb2832a6fa9670d808dae00c2"
        ],
        [
            "Require Import rename.",
            "VernacRequire",
            "95fdd53a23d7c8cbaae1aadd8be5af652181b678"
        ],
        [
            "Definition OScons (v : vari) (t : ty) (e : tm) (A : OS_env) := (v, t, e) :: A.",
            "VernacDefinition",
            "7f9221e5a0eed11a8d03b52664a69f4eb2d0fb5b"
        ],
        [
            "Inductive Ap (a : tm) : tm -> OS_env -> tm -> vari -> ty -> Prop := | Ap_abs : forall (nv v : vari) (t : ty) (e ne : tm) (A : OS_env), ~ member vari nv (OS_Dom A) -> rename nv v e ne -> Ap a (abs v t e) A ne nv t | Ap_clos : forall (n v : vari) (s t : ty) (e ne e1 : tm) (A : OS_env), Ap a e (OScons v s e1 A) ne n t -> Ap a (clos e v s e1) A (clos ne v s e1) n t.",
            "VernacInductive",
            "8e451b74c408b15a1f3c52aaf8e5aa3d13ff8c7b"
        ],
        [
            "Goal forall (a fun_ b : tm) (A : OS_env) (n : vari) (t : ty), Ap a fun_ A b n t -> ~ member vari n (OS_Dom A).",
            "VernacDefinition",
            "0bff3c8885101472d0918fbc70e592244ab836ff"
        ],
        [
            "simple induction 1; intros.",
            "VernacExtend",
            "8b54c80df1b4890684639c3f84a62f176fb57476"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "red in |- *; intro; apply H1; simpl in |- *.",
            "VernacExtend",
            "6e0ead836617436ea20acdcc2596bc8ec0a883ec"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "Save ApNewVar.",
            "VernacEndProof",
            "df9a096b1a0e3ae3431781e86a8fa04686b295fc"
        ],
        [
            "Inductive OSred : config -> config -> Prop := | OS_C0 : forall A : OS_env, OSred (cfg o A) (cfg o A) | OS_CT : forall A : OS_env, OSred (cfg ttt A) (cfg ttt A) | OS_CF : forall A : OS_env, OSred (cfg fff A) (cfg fff A) | OS_L : forall (A : OS_env) (e : tm) (t : ty) (x : vari), OSred (cfg (abs x t e) A) (cfg (abs x t e) A) | OS_P0 : forall (A A' : OS_env) (e : tm), OSred (cfg e A) (cfg o A') -> OSred (cfg (prd e) A) (cfg o A') | OS_P : forall (A A' : OS_env) (e e1 : tm), OSred (cfg e A) (cfg (succ e1) A') -> OSred (cfg (prd e) A) (cfg e1 A') | OS_ZT : forall (A A' : OS_env) (e : tm), OSred (cfg e A) (cfg o A') -> OSred (cfg (is_o e) A) (cfg ttt A') | OS_ZF : forall (A A' : OS_env) (e e1 : tm), OSred (cfg e A) (cfg (succ e1) A') -> OSred (cfg (is_o e) A) (cfg fff A') | OS_S : forall (A A' : OS_env) (e e1 : tm), OSred (cfg e A) (cfg e1 A') -> OSred (cfg (succ e) A) (cfg (succ e1) A') | OS_Var1 : forall (A A' : OS_env) (e en : tm) (t : ty) (x : vari), ~ member vari x (OS_Dom A) -> OSred (cfg e A) (cfg en A') -> OSred (cfg (var x) (OScons x t e A)) (cfg en (OScons x t en A')) | OS_Var2 : forall (A A' : OS_env) (e en : tm) (t : ty) (x y : vari), x <> y -> ~ member vari x (OS_Dom A) -> OSred (cfg (var y) A) (cfg en A') -> OSred (cfg (var y) (OScons x t e A)) (cfg en (OScons x t e A')) | OS_Appl : forall (A A' A'' : OS_env) (e1 e2 en en' enf : tm) (n : vari) (t : ty), OSred (cfg e1 A) (cfg en A') -> Ap e2 en A en' n t -> OSred (cfg (clos en' n t e2) A') (cfg enf A'') -> OSred (cfg (appl e1 e2) A) (cfg enf A'') | OS_IfTrue : forall (A A' A'' : OS_env) (e1 e2 e3 en : tm), OSred (cfg e1 A) (cfg ttt A') -> OSred (cfg e2 A') (cfg en A'') -> OSred (cfg (cond e1 e2 e3) A) (cfg en A'') | OS_IfFalse : forall (A A' A'' : OS_env) (e1 e2 e3 en : tm), OSred (cfg e1 A) (cfg fff A') -> OSred (cfg e3 A') (cfg en A'') -> OSred (cfg (cond e1 e2 e3) A) (cfg en A'') | OS_Fix : forall (A A' : OS_env) (e e' en : tm) (x nx : vari) (t : ty), ~ member vari nx (OS_Dom A) -> rename nx x e e' -> OSred (cfg (clos e' nx t (Fix x t e)) A) (cfg en A') -> OSred (cfg (Fix x t e) A) (cfg en A') | OS_CL : forall (A A' : OS_env) (e e1 en e1' : tm) (x : vari) (t : ty), OSred (cfg e (OScons x t e1 A)) (cfg en (OScons x t e1' A')) -> forall s : ty, TC (OS_Dom_ty (OScons x t e1 A)) en s -> ~ (s = nat_ty \\/ s = bool_ty) -> OSred (cfg (clos e x t e1) A) (cfg (clos en x t e1') A') | OS_CL' : forall (A A' : OS_env) (e e1 en e1' : tm) (x : vari) (t : ty), OSred (cfg e (OScons x t e1 A)) (cfg en (OScons x t e1' A')) -> forall s : ty, TC (OS_Dom_ty (OScons x t e1 A)) en s -> s = nat_ty \\/ s = bool_ty -> OSred (cfg (clos e x t e1) A) (cfg en A').",
            "VernacInductive",
            "b6eefe90faead57998aba7f08c75ae45ab5c8f02"
        ]
    ],
    "proofs": [
        {
            "name": "ApNewVar",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "simple induction 1; intros.",
                        "VernacExtend",
                        "8b54c80df1b4890684639c3f84a62f176fb57476"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intro; apply H1; simpl in |- *.",
                        "VernacExtend",
                        "6e0ead836617436ea20acdcc2596bc8ec0a883ec"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "Save ApNewVar.",
                        "VernacEndProof",
                        "df9a096b1a0e3ae3431781e86a8fa04686b295fc"
                    ]
                }
            ]
        }
    ]
}