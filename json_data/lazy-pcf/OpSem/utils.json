{
    "filename": "OpSem/utils.v",
    "coq_project": "lazy-pcf",
    "vernac_cmds": [
        [
            "Require Import syntax.",
            "VernacRequire",
            "fade23789687b5b286a50d71d8c4dc25f4366224"
        ],
        [
            "Definition valu (v : vari) := match v return nat with | x n => n end.",
            "VernacDefinition",
            "6ac56f85aa55bd9d10fa1e9a7e0f608c0cdc3f52"
        ],
        [
            "Goal forall m n : nat, x m = x n :>vari -> m = n :>nat.",
            "VernacDefinition",
            "032cd2fd67257de68955a724e5fc078e41efe844"
        ],
        [
            "intros m n Q.",
            "VernacExtend",
            "0b3800a7a978b419567fd5ca691cb33348c4b342"
        ],
        [
            "replace m with (valu (x m)).",
            "VernacExtend",
            "48e2df39a40b23d425b2cf1943bde448308b3e36"
        ],
        [
            "rewrite Q.",
            "VernacExtend",
            "57be6514ee62d229cd4f20fa2e393850b2fc4579"
        ],
        [
            "simpl in |- *; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "simpl in |- *; reflexivity.",
            "VernacExtend",
            "929257572def0332e6c079b4ed3a916720086e3a"
        ],
        [
            "Save vari_nat.",
            "VernacEndProof",
            "8c8e2341aff9778312599174e68a88c73d0f399c"
        ],
        [
            "Definition Rator_ty (t : ty) := match t with | nat_ty => t | bool_ty => t | arr t0 _ => t0 end.",
            "VernacDefinition",
            "1d74058dc0a9f611cc7bca732b5e83ed88afc9cf"
        ],
        [
            "Definition Rand_ty (t : ty) := match t with | nat_ty => t | bool_ty => t | arr _ t0 => t0 end.",
            "VernacDefinition",
            "f8029d54dfd12733625f6fa5c9772d68cbc861b6"
        ],
        [
            "Goal forall s1 t1 s2 t2 : ty, arr s1 t1 = arr s2 t2 :>ty -> s1 = s2 :>ty /\\ t1 = t2 :>ty.",
            "VernacDefinition",
            "d5a571aad4c453da3c051065182ae7b87434b7e2"
        ],
        [
            "intros s1 t1 s2 t2 Q.",
            "VernacExtend",
            "487b662374aa258ae2e5674efacda2c39684d039"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "change (Rator_ty (arr s1 t1) = Rator_ty (arr s2 t2) :>ty) in |- *.",
            "VernacExtend",
            "6ea43c35a3fa3ee286578815f4f5eb5576b5cb1b"
        ],
        [
            "apply (f_equal Rator_ty).",
            "VernacExtend",
            "9d1d7a5f4840aca9b7094b75b1229a31929882a1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "change (Rand_ty (arr s1 t1) = Rand_ty (arr s2 t2) :>ty) in |- *.",
            "VernacExtend",
            "ce3c7c2af9a000e4c99a581a382d6e5cbdc59661"
        ],
        [
            "apply (f_equal Rand_ty); assumption.",
            "VernacExtend",
            "1fe47e13c02f2c47d8ededaa00c5205662eca314"
        ],
        [
            "Save subty_eq.",
            "VernacEndProof",
            "f88531a93f925b63867764bbd75b4b1f030c89b3"
        ],
        [
            "Definition is_nat (t : ty) := match t with | nat_ty => True | bool_ty => False | arr _ _ => False end.",
            "VernacDefinition",
            "788ba0df972990d2e39e74f116b2bd28a9e68856"
        ],
        [
            "Definition is_bool (t : ty) := match t with | nat_ty => False | bool_ty => True | arr _ _ => False end.",
            "VernacDefinition",
            "e8a812ac9f23bfe36afc32eaf1142bc0798e3625"
        ],
        [
            "Definition is_arr (t : ty) := match t with | nat_ty => False | bool_ty => False | arr _ _ => True end.",
            "VernacDefinition",
            "c6674e0a4edea94c07cdfb23c0c198c7469aada0"
        ],
        [
            "Goal nat_ty <> bool_ty :>ty.",
            "VernacDefinition",
            "0ef8c614163974e3df2b3887006fdd7716119f39"
        ],
        [
            "red in |- *; intro H; change (is_nat bool_ty) in |- *; elim H; exact I.",
            "VernacExtend",
            "5640fd6ab637e10c0e87b07c155eeafa26119ba5"
        ],
        [
            "Save nat_not_bool.",
            "VernacEndProof",
            "f66d663d315b82539cb1110e12ef7c4f6f6db31f"
        ],
        [
            "Goal forall t s : ty, nat_ty <> arr t s :>ty.",
            "VernacDefinition",
            "573ce34a93a89cb6483d4708b958ac6efbdf51eb"
        ],
        [
            "red in |- *; intros t s H; change (is_nat (arr t s)) in |- *; elim H; exact I.",
            "VernacExtend",
            "54c80ce92f3f60f0870fbe7240e6319b8eedccc9"
        ],
        [
            "Save nat_not_arr.",
            "VernacEndProof",
            "ab951d274b53624794e17040fd0b8d4d0b6c7d7a"
        ],
        [
            "Goal forall t s : ty, bool_ty <> arr t s :>ty.",
            "VernacDefinition",
            "fedb09cb6ccd1dea6b35ac74d18da5406c527108"
        ],
        [
            "red in |- *; intros t s H; change (is_bool (arr t s)) in |- *; elim H; exact I.",
            "VernacExtend",
            "c794e061c54b7a497fd5757b5cb8c78deac2a94a"
        ],
        [
            "Save bool_not_arr.",
            "VernacEndProof",
            "c39aa81ae25e4835294238ca90e2cf66cacde4e2"
        ],
        [
            "Goal forall m n : nat, m = n \\/ m <> n.",
            "VernacDefinition",
            "ce73741c816303483d0d87050ab2252d39e5b066"
        ],
        [
            "simple induction m.",
            "VernacExtend",
            "c6b53704a73119c9ff4383bfeec236079504e73a"
        ],
        [
            "simple induction n.",
            "VernacExtend",
            "55f6dddaea9189658ce497de54569ba3016f1fd5"
        ],
        [
            "left; reflexivity.",
            "VernacExtend",
            "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
        ],
        [
            "intros; right; apply O_S.",
            "VernacExtend",
            "70b0c4c278699ee5d4ed9fd50380a6cc5eb44906"
        ],
        [
            "intros y H n; elim n.",
            "VernacExtend",
            "3b4bb507204ed76ecc8d19528394acb03f67447b"
        ],
        [
            "right; red in |- *; intro; apply (O_S y); symmetry in |- *; assumption.",
            "VernacExtend",
            "fd1f3fb4d4931ec13e1fc424509e1bd86ef33b75"
        ],
        [
            "intros y0 I.",
            "VernacExtend",
            "bd7b91cc79764eb67672391b76583b97ac586e93"
        ],
        [
            "elim (H y0); intro E.",
            "VernacExtend",
            "6f6eabb4351e168cd9582b26010c68dd139f0046"
        ],
        [
            "left; elim E; reflexivity.",
            "VernacExtend",
            "42f5592bcba9d5bfe49f9b714d4d7ae7e7034615"
        ],
        [
            "right; red in |- *; intro.",
            "VernacExtend",
            "78941758c4a1f041e58c485c593b5d261991cc32"
        ],
        [
            "apply E; apply eq_add_S; assumption.",
            "VernacExtend",
            "e7f53f543803d6197b3eb084abdf33937bced2f0"
        ],
        [
            "Save Xmidnat.",
            "VernacEndProof",
            "983f5fdc2fa7c69bdec08c1873324567d1d8f315"
        ],
        [
            "Goal forall v w : vari, v = w \\/ v <> w.",
            "VernacDefinition",
            "b56f7b4758fe0a93c84a975c64fbd15b6e7d7933"
        ],
        [
            "simple induction v.",
            "VernacExtend",
            "800a36ba7fc4c2edf4b70d3e51cdd934e7c61ff3"
        ],
        [
            "simple induction w.",
            "VernacExtend",
            "0e0a8ce590f0850017bde9458898d7178f53c85a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "specialize (Xmidnat n n0).",
            "VernacExtend",
            "f7f8df7d9efa9d0dca3c2469811f120050974fc8"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "intro eq; left; elim eq; reflexivity.",
            "VernacExtend",
            "f4bbd652e8a45e25e6d44081b395cd27379d109e"
        ],
        [
            "intro neq; right; red in |- *; intro; apply neq.",
            "VernacExtend",
            "7e2fe05a14f351d901fae5ff781ae6b8fc237be1"
        ],
        [
            "apply vari_nat; assumption.",
            "VernacExtend",
            "e901e631b7de337635f0a41f5c2487e1073591b2"
        ],
        [
            "Save Xmidvar.",
            "VernacEndProof",
            "62de87a760b6afe4be25e3cde65b29017de04e41"
        ],
        [
            "Goal forall A B C : Prop, (IF A then B else C) -> A -> B.",
            "VernacDefinition",
            "b5bee5f90ff1b8516d68d68ca339bd08f2db82a8"
        ],
        [
            "unfold IF_then_else in |- *; simple induction 1.",
            "VernacExtend",
            "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
        ],
        [
            "simple induction 1; intros; assumption.",
            "VernacExtend",
            "22da252642c5f8d884df9af106319b918787a779"
        ],
        [
            "simple induction 1; intros; absurd A; assumption.",
            "VernacExtend",
            "ca56d62f5324feb38e1cb361e2f44b3c63c4583d"
        ],
        [
            "Save If_T.",
            "VernacEndProof",
            "83203329e365ddb88f41fde090f4eaa730188c5f"
        ],
        [
            "Goal forall A B C : Prop, (IF A then B else C) -> ~ A -> C.",
            "VernacDefinition",
            "3db1f227c9e1a2eda93478d5a1cbab08fd6e882f"
        ],
        [
            "unfold IF_then_else in |- *; simple induction 1.",
            "VernacExtend",
            "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
        ],
        [
            "simple induction 1; intros; absurd A; assumption.",
            "VernacExtend",
            "ca56d62f5324feb38e1cb361e2f44b3c63c4583d"
        ],
        [
            "simple induction 1; intros; assumption.",
            "VernacExtend",
            "22da252642c5f8d884df9af106319b918787a779"
        ],
        [
            "Save If_F.",
            "VernacEndProof",
            "01ad3040ef5d8b60fd4e83574fbea3def70a4f44"
        ],
        [
            "Goal forall A B C : Prop, A -> B -> IF A then B else C.",
            "VernacDefinition",
            "19812cd1916aa92e950e85fbc22058f928e816db"
        ],
        [
            "unfold IF_then_else in |- *; intros.",
            "VernacExtend",
            "db4da1c8e16b11a049f26027ac23425bd14c5d1e"
        ],
        [
            "left; split; assumption.",
            "VernacExtend",
            "2ecb8adefac38ee52bdc75f1f53b6f085f7df95c"
        ],
        [
            "Save T_If.",
            "VernacEndProof",
            "e2ecc29d0fdd3e846fae111d5ddc8bcd0cd5d8b4"
        ],
        [
            "Goal forall A B C : Prop, ~ A -> C -> IF A then B else C.",
            "VernacDefinition",
            "1dde21bc23269f7f01abe52875bc81c0278a544b"
        ],
        [
            "unfold IF_then_else in |- *; intros.",
            "VernacExtend",
            "db4da1c8e16b11a049f26027ac23425bd14c5d1e"
        ],
        [
            "right; split; assumption.",
            "VernacExtend",
            "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
        ],
        [
            "Save F_If.",
            "VernacEndProof",
            "7af7976e4310e89a0420a27979a8591ac80c549d"
        ],
        [
            "Goal forall A B C D : Prop, (IF A then B else C) -> IF A then B else (IF A then D else C).",
            "VernacDefinition",
            "da697f4c07517d9be8840477f0b049bef45f974f"
        ],
        [
            "unfold IF_then_else in |- *; simple induction 1.",
            "VernacExtend",
            "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
        ],
        [
            "intro T; left; assumption.",
            "VernacExtend",
            "d4e8fa176d4b79585ddeb66bc5773ad0e18140ad"
        ],
        [
            "intro F; right; elim F; intros; split.",
            "VernacExtend",
            "4c3f92df6fdb1892f42c19204a2454aced23aeaa"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "right; split; assumption.",
            "VernacExtend",
            "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
        ],
        [
            "Save IfA_IfAIfA.",
            "VernacEndProof",
            "71091d547be41859153c515e34f7f11d98a58d5f"
        ],
        [
            "Goal forall A B C D : Prop, A \\/ D /\\ C -> (D -> A \\/ B) -> A \\/ B /\\ C.",
            "VernacDefinition",
            "affa24c64b538dc44fff0b7342bc52561afad67f"
        ],
        [
            "intros A B C D A1 A2.",
            "VernacExtend",
            "11d0de4afe2b1fa0930b40cb32617b779d813810"
        ],
        [
            "elim A1.",
            "VernacExtend",
            "9ed186eee3843244774d3c22c6a3e6a7947cff6e"
        ],
        [
            "intro; left; assumption.",
            "VernacExtend",
            "55bd4d39f4218be47b36c778b79ad9d28761a4ad"
        ],
        [
            "simple induction 1; intros DH CH.",
            "VernacExtend",
            "af65c906b991ad2de5f5fae2c8029b23c876b1b0"
        ],
        [
            "specialize A2 with (1 := DH); induction A2.",
            "VernacExtend",
            "5e171df64b4425c46e3e89a55d9bc6884bc37ac4"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; split; assumption.",
            "VernacExtend",
            "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
        ],
        [
            "Save AABC_ABC.",
            "VernacEndProof",
            "2c660295e5e3d1e34f6b00c38b9e6a03296faec5"
        ]
    ],
    "proofs": [
        {
            "name": "vari_nat",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "intros m n Q.",
                        "VernacExtend",
                        "0b3800a7a978b419567fd5ca691cb33348c4b342"
                    ]
                },
                {
                    "command": [
                        "replace m with (valu (x m)).",
                        "VernacExtend",
                        "48e2df39a40b23d425b2cf1943bde448308b3e36"
                    ]
                },
                {
                    "command": [
                        "rewrite Q.",
                        "VernacExtend",
                        "57be6514ee62d229cd4f20fa2e393850b2fc4579"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; reflexivity.",
                        "VernacExtend",
                        "929257572def0332e6c079b4ed3a916720086e3a"
                    ]
                },
                {
                    "command": [
                        "Save vari_nat.",
                        "VernacEndProof",
                        "8c8e2341aff9778312599174e68a88c73d0f399c"
                    ]
                }
            ]
        },
        {
            "name": "subty_eq",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros s1 t1 s2 t2 Q.",
                        "VernacExtend",
                        "487b662374aa258ae2e5674efacda2c39684d039"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "change (Rator_ty (arr s1 t1) = Rator_ty (arr s2 t2) :>ty) in |- *.",
                        "VernacExtend",
                        "6ea43c35a3fa3ee286578815f4f5eb5576b5cb1b"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal Rator_ty).",
                        "VernacExtend",
                        "9d1d7a5f4840aca9b7094b75b1229a31929882a1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "change (Rand_ty (arr s1 t1) = Rand_ty (arr s2 t2) :>ty) in |- *.",
                        "VernacExtend",
                        "ce3c7c2af9a000e4c99a581a382d6e5cbdc59661"
                    ]
                },
                {
                    "command": [
                        "apply (f_equal Rand_ty); assumption.",
                        "VernacExtend",
                        "1fe47e13c02f2c47d8ededaa00c5205662eca314"
                    ]
                },
                {
                    "command": [
                        "Save subty_eq.",
                        "VernacEndProof",
                        "f88531a93f925b63867764bbd75b4b1f030c89b3"
                    ]
                }
            ]
        },
        {
            "name": "nat_not_bool",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "red in |- *; intro H; change (is_nat bool_ty) in |- *; elim H; exact I.",
                        "VernacExtend",
                        "5640fd6ab637e10c0e87b07c155eeafa26119ba5"
                    ]
                },
                {
                    "command": [
                        "Save nat_not_bool.",
                        "VernacEndProof",
                        "f66d663d315b82539cb1110e12ef7c4f6f6db31f"
                    ]
                }
            ]
        },
        {
            "name": "nat_not_arr",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros t s H; change (is_nat (arr t s)) in |- *; elim H; exact I.",
                        "VernacExtend",
                        "54c80ce92f3f60f0870fbe7240e6319b8eedccc9"
                    ]
                },
                {
                    "command": [
                        "Save nat_not_arr.",
                        "VernacEndProof",
                        "ab951d274b53624794e17040fd0b8d4d0b6c7d7a"
                    ]
                }
            ]
        },
        {
            "name": "bool_not_arr",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "red in |- *; intros t s H; change (is_bool (arr t s)) in |- *; elim H; exact I.",
                        "VernacExtend",
                        "c794e061c54b7a497fd5757b5cb8c78deac2a94a"
                    ]
                },
                {
                    "command": [
                        "Save bool_not_arr.",
                        "VernacEndProof",
                        "c39aa81ae25e4835294238ca90e2cf66cacde4e2"
                    ]
                }
            ]
        },
        {
            "name": "Xmidnat",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "simple induction m.",
                        "VernacExtend",
                        "c6b53704a73119c9ff4383bfeec236079504e73a"
                    ]
                },
                {
                    "command": [
                        "simple induction n.",
                        "VernacExtend",
                        "55f6dddaea9189658ce497de54569ba3016f1fd5"
                    ]
                },
                {
                    "command": [
                        "left; reflexivity.",
                        "VernacExtend",
                        "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
                    ]
                },
                {
                    "command": [
                        "intros; right; apply O_S.",
                        "VernacExtend",
                        "70b0c4c278699ee5d4ed9fd50380a6cc5eb44906"
                    ]
                },
                {
                    "command": [
                        "intros y H n; elim n.",
                        "VernacExtend",
                        "3b4bb507204ed76ecc8d19528394acb03f67447b"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intro; apply (O_S y); symmetry in |- *; assumption.",
                        "VernacExtend",
                        "fd1f3fb4d4931ec13e1fc424509e1bd86ef33b75"
                    ]
                },
                {
                    "command": [
                        "intros y0 I.",
                        "VernacExtend",
                        "bd7b91cc79764eb67672391b76583b97ac586e93"
                    ]
                },
                {
                    "command": [
                        "elim (H y0); intro E.",
                        "VernacExtend",
                        "6f6eabb4351e168cd9582b26010c68dd139f0046"
                    ]
                },
                {
                    "command": [
                        "left; elim E; reflexivity.",
                        "VernacExtend",
                        "42f5592bcba9d5bfe49f9b714d4d7ae7e7034615"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intro.",
                        "VernacExtend",
                        "78941758c4a1f041e58c485c593b5d261991cc32"
                    ]
                },
                {
                    "command": [
                        "apply E; apply eq_add_S; assumption.",
                        "VernacExtend",
                        "e7f53f543803d6197b3eb084abdf33937bced2f0"
                    ]
                },
                {
                    "command": [
                        "Save Xmidnat.",
                        "VernacEndProof",
                        "983f5fdc2fa7c69bdec08c1873324567d1d8f315"
                    ]
                }
            ]
        },
        {
            "name": "Xmidvar",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "simple induction v.",
                        "VernacExtend",
                        "800a36ba7fc4c2edf4b70d3e51cdd934e7c61ff3"
                    ]
                },
                {
                    "command": [
                        "simple induction w.",
                        "VernacExtend",
                        "0e0a8ce590f0850017bde9458898d7178f53c85a"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "specialize (Xmidnat n n0).",
                        "VernacExtend",
                        "f7f8df7d9efa9d0dca3c2469811f120050974fc8"
                    ]
                },
                {
                    "command": [
                        "simple induction 1.",
                        "VernacExtend",
                        "b1f838dd75029717483785a8785c7867663c75bc"
                    ]
                },
                {
                    "command": [
                        "intro eq; left; elim eq; reflexivity.",
                        "VernacExtend",
                        "f4bbd652e8a45e25e6d44081b395cd27379d109e"
                    ]
                },
                {
                    "command": [
                        "intro neq; right; red in |- *; intro; apply neq.",
                        "VernacExtend",
                        "7e2fe05a14f351d901fae5ff781ae6b8fc237be1"
                    ]
                },
                {
                    "command": [
                        "apply vari_nat; assumption.",
                        "VernacExtend",
                        "e901e631b7de337635f0a41f5c2487e1073591b2"
                    ]
                },
                {
                    "command": [
                        "Save Xmidvar.",
                        "VernacEndProof",
                        "62de87a760b6afe4be25e3cde65b29017de04e41"
                    ]
                }
            ]
        },
        {
            "name": "If_T",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "unfold IF_then_else in |- *; simple induction 1.",
                        "VernacExtend",
                        "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros; assumption.",
                        "VernacExtend",
                        "22da252642c5f8d884df9af106319b918787a779"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros; absurd A; assumption.",
                        "VernacExtend",
                        "ca56d62f5324feb38e1cb361e2f44b3c63c4583d"
                    ]
                },
                {
                    "command": [
                        "Save If_T.",
                        "VernacEndProof",
                        "83203329e365ddb88f41fde090f4eaa730188c5f"
                    ]
                }
            ]
        },
        {
            "name": "If_F",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "unfold IF_then_else in |- *; simple induction 1.",
                        "VernacExtend",
                        "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros; absurd A; assumption.",
                        "VernacExtend",
                        "ca56d62f5324feb38e1cb361e2f44b3c63c4583d"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros; assumption.",
                        "VernacExtend",
                        "22da252642c5f8d884df9af106319b918787a779"
                    ]
                },
                {
                    "command": [
                        "Save If_F.",
                        "VernacEndProof",
                        "01ad3040ef5d8b60fd4e83574fbea3def70a4f44"
                    ]
                }
            ]
        },
        {
            "name": "T_If",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "unfold IF_then_else in |- *; intros.",
                        "VernacExtend",
                        "db4da1c8e16b11a049f26027ac23425bd14c5d1e"
                    ]
                },
                {
                    "command": [
                        "left; split; assumption.",
                        "VernacExtend",
                        "2ecb8adefac38ee52bdc75f1f53b6f085f7df95c"
                    ]
                },
                {
                    "command": [
                        "Save T_If.",
                        "VernacEndProof",
                        "e2ecc29d0fdd3e846fae111d5ddc8bcd0cd5d8b4"
                    ]
                }
            ]
        },
        {
            "name": "F_If",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "unfold IF_then_else in |- *; intros.",
                        "VernacExtend",
                        "db4da1c8e16b11a049f26027ac23425bd14c5d1e"
                    ]
                },
                {
                    "command": [
                        "right; split; assumption.",
                        "VernacExtend",
                        "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
                    ]
                },
                {
                    "command": [
                        "Save F_If.",
                        "VernacEndProof",
                        "7af7976e4310e89a0420a27979a8591ac80c549d"
                    ]
                }
            ]
        },
        {
            "name": "IfA_IfAIfA",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "unfold IF_then_else in |- *; simple induction 1.",
                        "VernacExtend",
                        "657a45e6bab05cf10548fdd9f878e3e402d7ee14"
                    ]
                },
                {
                    "command": [
                        "intro T; left; assumption.",
                        "VernacExtend",
                        "d4e8fa176d4b79585ddeb66bc5773ad0e18140ad"
                    ]
                },
                {
                    "command": [
                        "intro F; right; elim F; intros; split.",
                        "VernacExtend",
                        "4c3f92df6fdb1892f42c19204a2454aced23aeaa"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "right; split; assumption.",
                        "VernacExtend",
                        "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
                    ]
                },
                {
                    "command": [
                        "Save IfA_IfAIfA.",
                        "VernacEndProof",
                        "71091d547be41859153c515e34f7f11d98a58d5f"
                    ]
                }
            ]
        },
        {
            "name": "AABC_ABC",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros A B C D A1 A2.",
                        "VernacExtend",
                        "11d0de4afe2b1fa0930b40cb32617b779d813810"
                    ]
                },
                {
                    "command": [
                        "elim A1.",
                        "VernacExtend",
                        "9ed186eee3843244774d3c22c6a3e6a7947cff6e"
                    ]
                },
                {
                    "command": [
                        "intro; left; assumption.",
                        "VernacExtend",
                        "55bd4d39f4218be47b36c778b79ad9d28761a4ad"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros DH CH.",
                        "VernacExtend",
                        "af65c906b991ad2de5f5fae2c8029b23c876b1b0"
                    ]
                },
                {
                    "command": [
                        "specialize A2 with (1 := DH); induction A2.",
                        "VernacExtend",
                        "5e171df64b4425c46e3e89a55d9bc6884bc37ac4"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; split; assumption.",
                        "VernacExtend",
                        "f8c53f3fda216a7af7e4160ee3e1d04af9c9ed38"
                    ]
                },
                {
                    "command": [
                        "Save AABC_ABC.",
                        "VernacEndProof",
                        "2c660295e5e3d1e34f6b00c38b9e6a03296faec5"
                    ]
                }
            ]
        }
    ]
}