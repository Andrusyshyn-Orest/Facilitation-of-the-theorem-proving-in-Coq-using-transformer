{
    "filename": "area_coords_constructions.v",
    "coq_project": "area-method",
    "vernac_cmds": [
        [
            "Require Export pythagoras_difference_lemmas.",
            "VernacRequire",
            "86b44d4422fb8eb420b746b96bb601a2d91620e5"
        ],
        [
            "Definition a_ratio A O U V ro ru rv := ~ Col O U V /\\ S A U V / S O U V = ro /\\ S O A V / S O U V = ru /\\ S O U A / S O U V = rv.",
            "VernacDefinition",
            "c278c34ac67aaa3e7c1970a8ef87cb6548349cfc"
        ],
        [
            "Definition is_centroid G A B C := a_ratio G A B C (1/(2+1)) (1/(2+1)) (1/(2+1)).",
            "VernacDefinition",
            "c23651b8abecc4d5b77c0b456eb56da4530e4b3c"
        ],
        [
            "Definition is_orthocenter' H A B C := a_ratio H A B C (Py A B C * Py A C B / ((2*2*2*2) * (S A B C * S A B C))) (Py B A C * Py B C A / ((2*2*2*2) * (S A B C * S A B C))) (Py C A B * Py C B A / ((2*2*2*2) * (S A B C * S A B C))).",
            "VernacDefinition",
            "2a07b59a1d7270f5ddd6c99275a7a9c7b0b090eb"
        ],
        [
            "Definition is_orthocenter H A B C := a_ratio H A B C (Py A B C * Py A C B / (Py A B A * Py A C A - Py B A C * Py B A C)) (Py B A C * Py B C A / (Py A B A * Py A C A - Py B A C * Py B A C)) (Py C A B * Py C B A / (Py A B A * Py A C A - Py B A C * Py B A C)).",
            "VernacDefinition",
            "fc72c66a5e4d59ee8e31cb3bd56ee0b21f2dbd91"
        ],
        [
            "Lemma is_orthocenter_non_zero' : forall H A B C, is_orthocenter H A B C -> (2*2*2*2) * (S A B C * S A B C) <> 0.",
            "VernacStartTheoremProof",
            "ebdf1b56de4a7dc9e71fc8277bdf037162f0cd70"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_orthocenter in H0.",
            "VernacExtend",
            "02e3994097f16ea1ead82d76bdb568302674e555"
        ],
        [
            "unfold a_ratio in H0.",
            "VernacExtend",
            "e12b9b7f37b8ad658c8dccb699f642a8415fd36d"
        ],
        [
            "use H0.",
            "VernacExtend",
            "c62e84d0fd72d6a0f77ba51cdd27398b909c0df0"
        ],
        [
            "repeat (apply nonzeromult);auto with Geom.",
            "VernacExtend",
            "66951cbc53c48f44d04659fa6c439eda65b6b736"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_non_zero : forall H A B C, is_orthocenter H A B C -> (Py A B A * Py A C A - Py B A C * Py B A C) <> 0.",
            "VernacStartTheoremProof",
            "af13656a50b1d146859d13b9beb1c6b4b11acff2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_orthocenter_non_zero' in H0.",
            "VernacExtend",
            "23b05619448b7f9c6caa085dc8ce7d10540df7b7"
        ],
        [
            "rewrite (herron_qin A B C) in *.",
            "VernacExtend",
            "a9489e5e32fe817bce2796a973e679c7109b11e6"
        ],
        [
            "replace (2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with ((Py A B A * Py A C A - Py B A C * Py B A C)) in * by (field;solve_conds).",
            "VernacExtend",
            "c4829334f37382ceb4caa0195c18bf496163eece"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_orthocenter_equiv : forall H A B C, is_orthocenter' H A B C <-> is_orthocenter H A B C.",
            "VernacStartTheoremProof",
            "f32f6a3fd8ad74f2b29baa4bcabd761fe86eda75"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_orthocenter in *.",
            "VernacExtend",
            "78fdfe169c65c146aef72faaffa7dbfbe905700f"
        ],
        [
            "unfold is_orthocenter' in *.",
            "VernacExtend",
            "7c5559938d92db0d05b2a2da9388148314e47321"
        ],
        [
            "rewrite (herron_qin A B C).",
            "VernacExtend",
            "63ec02ed3df5bf794e0c250088bb57521bbc71d5"
        ],
        [
            "replace (2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (Py A B A * Py A C A - Py B A C * Py B A C) by (field;solve_conds).",
            "VernacExtend",
            "c91d67aad9ec20befffeae045e5f23c8671fe76b"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_circumcenter' O A B C := a_ratio O A B C (Py B C B * Py B A C / ((2*2*2*2*2) * (S A B C * S A B C))) (Py A C A * Py A B C / ((2*2*2*2*2) * (S A B C * S A B C))) (Py A B A * Py A C B / ((2*2*2*2*2) * (S A B C * S A B C))).",
            "VernacDefinition",
            "ca42a99467cb1f8d6d5d017d44c36ba6acfb300d"
        ],
        [
            "Definition is_circumcenter O A B C := a_ratio O A B C (Py B C B * Py B A C / (2*(Py A B A * Py A C A - Py B A C * Py B A C))) (Py A C A * Py A B C /(2*(Py A B A * Py A C A - Py B A C * Py B A C))) (Py A B A * Py A C B / (2*(Py A B A * Py A C A - Py B A C * Py B A C))).",
            "VernacDefinition",
            "5e721eb86deb2906b54fe850b8775f3d61f4391c"
        ],
        [
            "Lemma is_circumcenter_non_zero' : forall H A B C, is_circumcenter H A B C -> (2*2*2*2*2) * (S A B C * S A B C) <> 0.",
            "VernacStartTheoremProof",
            "dbc01694a57d06c4a164dfa75009d942782d0015"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_circumcenter in H0.",
            "VernacExtend",
            "0711637388323ac0b862c289efd41eb7fcfcad70"
        ],
        [
            "unfold a_ratio in H0.",
            "VernacExtend",
            "e12b9b7f37b8ad658c8dccb699f642a8415fd36d"
        ],
        [
            "use H0.",
            "VernacExtend",
            "c62e84d0fd72d6a0f77ba51cdd27398b909c0df0"
        ],
        [
            "repeat (apply nonzeromult);auto with Geom.",
            "VernacExtend",
            "66951cbc53c48f44d04659fa6c439eda65b6b736"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_circumcenter_non_zero : forall H A B C, is_circumcenter H A B C -> 2*(Py A B A * Py A C A - Py B A C * Py B A C) <> 0.",
            "VernacStartTheoremProof",
            "2853aeb10cae05b23cd5006d5581b298cab11d38"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply is_circumcenter_non_zero' in H0.",
            "VernacExtend",
            "c2b4513537cb2a7e76e870f5d916a6489bd7acfd"
        ],
        [
            "rewrite (herron_qin A B C) in *.",
            "VernacExtend",
            "a9489e5e32fe817bce2796a973e679c7109b11e6"
        ],
        [
            "replace (2 * 2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (2 * (Py A B A * Py A C A - Py B A C * Py B A C)) in * by (field;solve_conds).",
            "VernacExtend",
            "05e3fb4e1eba78ecf2c43e30b65a6eb87176d907"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_circumcenter_equiv : forall H A B C, is_circumcenter' H A B C <-> is_circumcenter H A B C.",
            "VernacStartTheoremProof",
            "da3f84179a11d8b7b6201b373b9c1fb9a4e09a03"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_circumcenter in *.",
            "VernacExtend",
            "3855ae548e7bcdc77fe30fac4f0b853b4e236988"
        ],
        [
            "unfold is_circumcenter' in *.",
            "VernacExtend",
            "43382d80969bc4c775ddd70cf615476bbfbf6a8d"
        ],
        [
            "rewrite (herron_qin A B C).",
            "VernacExtend",
            "63ec02ed3df5bf794e0c250088bb57521bbc71d5"
        ],
        [
            "replace (2 * 2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (2*(Py A B A * Py A C A - Py B A C * Py B A C)) by (field;solve_conds).",
            "VernacExtend",
            "fe0414ae68eadfeb7acd85706c12dc02dcda97c2"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_Lemoine L A B C := a_ratio L A B C (Py B C B / (Py A B A + Py B C B + Py A C A)) (Py A C A / (Py A B A + Py B C B + Py A C A)) (Py A B A / (Py A B A + Py B C B + Py A C A)).",
            "VernacDefinition",
            "2c6a392eba5398926e2711df13527915e0f41a8d"
        ]
    ],
    "proofs": [
        {
            "name": "is_orthocenter_non_zero'",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in H0.",
                        "VernacExtend",
                        "02e3994097f16ea1ead82d76bdb568302674e555"
                    ]
                },
                {
                    "command": [
                        "unfold a_ratio in H0.",
                        "VernacExtend",
                        "e12b9b7f37b8ad658c8dccb699f642a8415fd36d"
                    ]
                },
                {
                    "command": [
                        "use H0.",
                        "VernacExtend",
                        "c62e84d0fd72d6a0f77ba51cdd27398b909c0df0"
                    ]
                },
                {
                    "command": [
                        "repeat (apply nonzeromult);auto with Geom.",
                        "VernacExtend",
                        "66951cbc53c48f44d04659fa6c439eda65b6b736"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_non_zero",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_orthocenter_non_zero' in H0.",
                        "VernacExtend",
                        "23b05619448b7f9c6caa085dc8ce7d10540df7b7"
                    ]
                },
                {
                    "command": [
                        "rewrite (herron_qin A B C) in *.",
                        "VernacExtend",
                        "a9489e5e32fe817bce2796a973e679c7109b11e6"
                    ]
                },
                {
                    "command": [
                        "replace (2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with ((Py A B A * Py A C A - Py B A C * Py B A C)) in * by (field;solve_conds).",
                        "VernacExtend",
                        "c4829334f37382ceb4caa0195c18bf496163eece"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_orthocenter_equiv",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter in *.",
                        "VernacExtend",
                        "78fdfe169c65c146aef72faaffa7dbfbe905700f"
                    ]
                },
                {
                    "command": [
                        "unfold is_orthocenter' in *.",
                        "VernacExtend",
                        "7c5559938d92db0d05b2a2da9388148314e47321"
                    ]
                },
                {
                    "command": [
                        "rewrite (herron_qin A B C).",
                        "VernacExtend",
                        "63ec02ed3df5bf794e0c250088bb57521bbc71d5"
                    ]
                },
                {
                    "command": [
                        "replace (2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (Py A B A * Py A C A - Py B A C * Py B A C) by (field;solve_conds).",
                        "VernacExtend",
                        "c91d67aad9ec20befffeae045e5f23c8671fe76b"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_circumcenter_non_zero'",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in H0.",
                        "VernacExtend",
                        "0711637388323ac0b862c289efd41eb7fcfcad70"
                    ]
                },
                {
                    "command": [
                        "unfold a_ratio in H0.",
                        "VernacExtend",
                        "e12b9b7f37b8ad658c8dccb699f642a8415fd36d"
                    ]
                },
                {
                    "command": [
                        "use H0.",
                        "VernacExtend",
                        "c62e84d0fd72d6a0f77ba51cdd27398b909c0df0"
                    ]
                },
                {
                    "command": [
                        "repeat (apply nonzeromult);auto with Geom.",
                        "VernacExtend",
                        "66951cbc53c48f44d04659fa6c439eda65b6b736"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_circumcenter_non_zero",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply is_circumcenter_non_zero' in H0.",
                        "VernacExtend",
                        "c2b4513537cb2a7e76e870f5d916a6489bd7acfd"
                    ]
                },
                {
                    "command": [
                        "rewrite (herron_qin A B C) in *.",
                        "VernacExtend",
                        "a9489e5e32fe817bce2796a973e679c7109b11e6"
                    ]
                },
                {
                    "command": [
                        "replace (2 * 2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (2 * (Py A B A * Py A C A - Py B A C * Py B A C)) in * by (field;solve_conds).",
                        "VernacExtend",
                        "05e3fb4e1eba78ecf2c43e30b65a6eb87176d907"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_circumcenter_equiv",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter in *.",
                        "VernacExtend",
                        "3855ae548e7bcdc77fe30fac4f0b853b4e236988"
                    ]
                },
                {
                    "command": [
                        "unfold is_circumcenter' in *.",
                        "VernacExtend",
                        "43382d80969bc4c775ddd70cf615476bbfbf6a8d"
                    ]
                },
                {
                    "command": [
                        "rewrite (herron_qin A B C).",
                        "VernacExtend",
                        "63ec02ed3df5bf794e0c250088bb57521bbc71d5"
                    ]
                },
                {
                    "command": [
                        "replace (2 * 2 * 2 * 2 * 2 * (1 / (2 * 2 * 2 * 2) * (Py A B A * Py A C A - Py B A C * Py B A C))) with (2*(Py A B A * Py A C A - Py B A C * Py B A C)) by (field;solve_conds).",
                        "VernacExtend",
                        "fe0414ae68eadfeb7acd85706c12dc02dcda97c2"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}