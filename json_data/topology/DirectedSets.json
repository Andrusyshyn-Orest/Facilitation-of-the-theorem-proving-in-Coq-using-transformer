{
    "filename": "DirectedSets.v",
    "coq_project": "topology",
    "vernac_cmds": [
        [
            "Require Export Relation_Definitions.",
            "VernacRequire",
            "7609fde823572a97bac3f20d213dd37544e5ef7e"
        ],
        [
            "From ZornsLemma Require Import Relation_Definitions_Implicit.",
            "VernacRequire",
            "96b9a7b8792ffab84483463f69836275b684d7de"
        ],
        [
            "Require Import Classical.",
            "VernacRequire",
            "4cc53198e8d48bbb9dcca109b0e59a015dd7a5bb"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Record DirectedSet := { DS_set : Type; DS_ord : relation DS_set; DS_ord_cond : preorder DS_ord; DS_join_cond : forall i j:DS_set, exists k:DS_set, DS_ord i k /\\ DS_ord j k }.",
            "VernacInductive",
            "09c533faca05ea50d7a3562f8c6097f04f458f63"
        ],
        [
            "Arguments DS_ord {d}.",
            "VernacArguments",
            "0f736d076c0c0fc4ad4db427a98bdbdd45589211"
        ],
        [
            "Arguments DS_ord_cond {d}.",
            "VernacArguments",
            "9b45df32f6234624c7a2a35ffb10b630e3cced21"
        ],
        [
            "Arguments DS_join_cond {d}.",
            "VernacArguments",
            "da76dee372f25eda7d4b9bee1388e4c54423d468"
        ],
        [
            "Section for_large.",
            "VernacBeginSection",
            "bdc4413997ce2b2f518c4f997b50730465c0eb14"
        ],
        [
            "Variable I : DirectedSet.",
            "VernacAssumption",
            "c165ae66c9ae7d8f1715857172d79b44ae5693ac"
        ],
        [
            "Definition eventually (P : DS_set I -> Prop) : Prop := exists i:DS_set I, forall j:DS_set I, DS_ord i j -> P j.",
            "VernacDefinition",
            "e42b5f8d3381d2f13c4b025793405855be49cded"
        ],
        [
            "Lemma eventually_and: forall (P Q: DS_set I -> Prop), eventually P -> eventually Q -> eventually (fun i:DS_set I => P i /\\ Q i).",
            "VernacStartTheoremProof",
            "73220009910f7abc343058fb826695f7cf5f8b6a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "destruct (DS_join_cond x x0) as [? [? ?]].",
            "VernacExtend",
            "6be5b06f71eefdaca72712c7a9f6022f0f2f4c77"
        ],
        [
            "exists x1.",
            "VernacExtend",
            "41149f92e5f2a0109418d3e02971541f67fbd3df"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply preord_trans with x1; trivial.",
            "VernacExtend",
            "f599848d407040a852ad632eab4c3d544e196622"
        ],
        [
            "apply DS_ord_cond.",
            "VernacExtend",
            "8f6e119f55b8c0e98bb6e64bf4693914ab9946de"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply preord_trans with x1; trivial.",
            "VernacExtend",
            "f599848d407040a852ad632eab4c3d544e196622"
        ],
        [
            "apply DS_ord_cond.",
            "VernacExtend",
            "8f6e119f55b8c0e98bb6e64bf4693914ab9946de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eventually_impl_base: forall (P Q: DS_set I -> Prop), (forall i:DS_set I, P i -> Q i) -> eventually P -> eventually Q.",
            "VernacStartTheoremProof",
            "1b0d2fc96389fd4c0b7430bd96a600738eb99d44"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eventually_impl: forall (P Q: DS_set I -> Prop), eventually P -> eventually (fun i:DS_set I => P i -> Q i) -> eventually Q.",
            "VernacStartTheoremProof",
            "eb58a8cf0dae93ad8158512a61e32483cc5bc78a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply eventually_impl_base with (P := fun (i:DS_set I) => P i /\\ (P i -> Q i)).",
            "VernacExtend",
            "fea1b3fd4db61b1eda8d4489eccf7fb943360f38"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "apply eventually_and; assumption.",
            "VernacExtend",
            "7ceaa01885e93810e164e9a31edc0bf6716656ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition exists_arbitrarily_large (P: DS_set I -> Prop) := forall i:DS_set I, exists j:DS_set I, DS_ord i j /\\ P j.",
            "VernacDefinition",
            "24edd271d880526721b50f720db3bc95c537c1b2"
        ],
        [
            "Lemma not_eal_eventually_not: forall (P: DS_set I -> Prop), ~ exists_arbitrarily_large P -> eventually (fun i:DS_set I => ~ P i).",
            "VernacStartTheoremProof",
            "fd3c95aff0c8551167e4fc38e997c1954046e477"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply not_all_ex_not in H.",
            "VernacExtend",
            "5e4ab0a34d7c97f5fb87218f6284db221ca0e1d8"
        ],
        [
            "destruct H as [i].",
            "VernacExtend",
            "31affd53f86a0c85027995ddb3063a5ce39f955c"
        ],
        [
            "exists i.",
            "VernacExtend",
            "ae2fe3148a26e095e063f5cbf6e22a0a1c748d3c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "contradiction H.",
            "VernacExtend",
            "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
        ],
        [
            "exists j; split; trivial.",
            "VernacExtend",
            "61eabc3d0804f6914a3c6bf0ee34afe021c1bdd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_eventually_eal_not: forall (P: DS_set I -> Prop), ~ eventually P -> exists_arbitrarily_large (fun i:DS_set I => ~ P i).",
            "VernacStartTheoremProof",
            "1b5596e9ed990f14717f4a52757bdcd09b1d2ca0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "red; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "apply NNPP; intro.",
            "VernacExtend",
            "55e5f4eb66528dc4c7274b2b611cda0433510c40"
        ],
        [
            "contradiction H.",
            "VernacExtend",
            "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
        ],
        [
            "exists i.",
            "VernacExtend",
            "ae2fe3148a26e095e063f5cbf6e22a0a1c748d3c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply NNPP; intro.",
            "VernacExtend",
            "55e5f4eb66528dc4c7274b2b611cda0433510c40"
        ],
        [
            "contradiction H0.",
            "VernacExtend",
            "198cc5fe08678df71b7d70ff1acc682532bbeeca"
        ],
        [
            "exists j; split; trivial.",
            "VernacExtend",
            "61eabc3d0804f6914a3c6bf0ee34afe021c1bdd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End for_large.",
            "VernacEndSegment",
            "65e86a800f62b3b8ce9f786131fe12d90976b19b"
        ],
        [
            "Arguments eventually {I}.",
            "VernacArguments",
            "5662bb9d14d8b5484220fc9c2a1961798acd3a88"
        ],
        [
            "Arguments eventually_and {I}.",
            "VernacArguments",
            "715c468dccfddc94b02068feb9ecf029ccae8e00"
        ],
        [
            "Arguments eventually_impl_base {I}.",
            "VernacArguments",
            "4d7a6e75bb5f171fec2b24a5f507c7deefc4b539"
        ],
        [
            "Arguments eventually_impl {I}.",
            "VernacArguments",
            "88347ffc21fbf06f272042215a8bb055687222fc"
        ],
        [
            "Arguments exists_arbitrarily_large {I}.",
            "VernacArguments",
            "acabd1a94f63b1bbc48f912e16626b45d1b0b096"
        ],
        [
            "Arguments not_eal_eventually_not {I}.",
            "VernacArguments",
            "94499fdb246ceef6f62d348e85cc2c5b0ede7369"
        ],
        [
            "Arguments not_eventually_eal_not {I}.",
            "VernacArguments",
            "e93676e98425d542d926e42259442a1a9f7bc783"
        ],
        [
            "Notation \"'for' 'large' i : I , p\" := (eventually (fun i:I => p)) (at level 200, i ident, right associativity).",
            "VernacNotation",
            "f758f4d955dcd4c7f7f90ad6799b3ebdd567bef7"
        ],
        [
            "Notation \"'exists' 'arbitrarily' 'large' i : I , p\" := (exists_arbitrarily_large (fun i:I => p)) (at level 200, i ident, right associativity).",
            "VernacNotation",
            "4522fb121072280cbfeb450661821ce3be18ff28"
        ],
        [
            "Section nat_DS.",
            "VernacBeginSection",
            "19048f7a526a972d2c1d68281857279465ce5efd"
        ],
        [
            "Definition nat_DS : DirectedSet.",
            "VernacDefinition",
            "76bb96b9ce4bb6b4d312bdb22b579e0608aea9ea"
        ],
        [
            "refine (Build_DirectedSet nat le _ _).",
            "VernacExtend",
            "d5b3f8a15a4e902392bc9c06c576fc6eab4b60ee"
        ],
        [
            "constructor; red; intros; auto with arith.",
            "VernacExtend",
            "b48929515bdbd1402601cdd4688f27edacabcaa5"
        ],
        [
            "apply le_trans with y; assumption.",
            "VernacExtend",
            "0ec1f686b7cf356d119a5e226df78591b0da99c0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (lt_eq_lt_dec i j).",
            "VernacExtend",
            "d1931aad1eef1ae5265f1de204cf3c52e983a79f"
        ],
        [
            "exists j.",
            "VernacExtend",
            "34f8af49c4413794fc3fdb3be61eeb946a616022"
        ],
        [
            "destruct s; auto with arith.",
            "VernacExtend",
            "d8eec542e110ddcd738e51779eef4bd185bddf56"
        ],
        [
            "destruct e; auto with arith.",
            "VernacExtend",
            "f0d749b0af4765defaf0b38d6efafa09cd23b984"
        ],
        [
            "exists i; auto with arith.",
            "VernacExtend",
            "7ed815f9c55eac29b7b49c6ea49cb23561734141"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End nat_DS.",
            "VernacEndSegment",
            "eefa88cc85e948464ef95c382c60c9de6b60704a"
        ]
    ],
    "proofs": [
        {
            "name": "eventually_and",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "destruct (DS_join_cond x x0) as [? [? ?]].",
                        "VernacExtend",
                        "6be5b06f71eefdaca72712c7a9f6022f0f2f4c77"
                    ]
                },
                {
                    "command": [
                        "exists x1.",
                        "VernacExtend",
                        "41149f92e5f2a0109418d3e02971541f67fbd3df"
                    ]
                },
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply preord_trans with x1; trivial.",
                        "VernacExtend",
                        "f599848d407040a852ad632eab4c3d544e196622"
                    ]
                },
                {
                    "command": [
                        "apply DS_ord_cond.",
                        "VernacExtend",
                        "8f6e119f55b8c0e98bb6e64bf4693914ab9946de"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply preord_trans with x1; trivial.",
                        "VernacExtend",
                        "f599848d407040a852ad632eab4c3d544e196622"
                    ]
                },
                {
                    "command": [
                        "apply DS_ord_cond.",
                        "VernacExtend",
                        "8f6e119f55b8c0e98bb6e64bf4693914ab9946de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eventually_impl_base",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eventually_impl",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply eventually_impl_base with (P := fun (i:DS_set I) => P i /\\ (P i -> Q i)).",
                        "VernacExtend",
                        "fea1b3fd4db61b1eda8d4489eccf7fb943360f38"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "apply eventually_and; assumption.",
                        "VernacExtend",
                        "7ceaa01885e93810e164e9a31edc0bf6716656ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_eal_eventually_not",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not in H.",
                        "VernacExtend",
                        "5e4ab0a34d7c97f5fb87218f6284db221ca0e1d8"
                    ]
                },
                {
                    "command": [
                        "destruct H as [i].",
                        "VernacExtend",
                        "31affd53f86a0c85027995ddb3063a5ce39f955c"
                    ]
                },
                {
                    "command": [
                        "exists i.",
                        "VernacExtend",
                        "ae2fe3148a26e095e063f5cbf6e22a0a1c748d3c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "contradiction H.",
                        "VernacExtend",
                        "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
                    ]
                },
                {
                    "command": [
                        "exists j; split; trivial.",
                        "VernacExtend",
                        "61eabc3d0804f6914a3c6bf0ee34afe021c1bdd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_eventually_eal_not",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "red; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "apply NNPP; intro.",
                        "VernacExtend",
                        "55e5f4eb66528dc4c7274b2b611cda0433510c40"
                    ]
                },
                {
                    "command": [
                        "contradiction H.",
                        "VernacExtend",
                        "9921ae0c19723fc5886b29e1f0df9d58a7efc3f6"
                    ]
                },
                {
                    "command": [
                        "exists i.",
                        "VernacExtend",
                        "ae2fe3148a26e095e063f5cbf6e22a0a1c748d3c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply NNPP; intro.",
                        "VernacExtend",
                        "55e5f4eb66528dc4c7274b2b611cda0433510c40"
                    ]
                },
                {
                    "command": [
                        "contradiction H0.",
                        "VernacExtend",
                        "198cc5fe08678df71b7d70ff1acc682532bbeeca"
                    ]
                },
                {
                    "command": [
                        "exists j; split; trivial.",
                        "VernacExtend",
                        "61eabc3d0804f6914a3c6bf0ee34afe021c1bdd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_DS",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "refine (Build_DirectedSet nat le _ _).",
                        "VernacExtend",
                        "d5b3f8a15a4e902392bc9c06c576fc6eab4b60ee"
                    ]
                },
                {
                    "command": [
                        "constructor; red; intros; auto with arith.",
                        "VernacExtend",
                        "b48929515bdbd1402601cdd4688f27edacabcaa5"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with y; assumption.",
                        "VernacExtend",
                        "0ec1f686b7cf356d119a5e226df78591b0da99c0"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (lt_eq_lt_dec i j).",
                        "VernacExtend",
                        "d1931aad1eef1ae5265f1de204cf3c52e983a79f"
                    ]
                },
                {
                    "command": [
                        "exists j.",
                        "VernacExtend",
                        "34f8af49c4413794fc3fdb3be61eeb946a616022"
                    ]
                },
                {
                    "command": [
                        "destruct s; auto with arith.",
                        "VernacExtend",
                        "d8eec542e110ddcd738e51779eef4bd185bddf56"
                    ]
                },
                {
                    "command": [
                        "destruct e; auto with arith.",
                        "VernacExtend",
                        "f0d749b0af4765defaf0b38d6efafa09cd23b984"
                    ]
                },
                {
                    "command": [
                        "exists i; auto with arith.",
                        "VernacExtend",
                        "7ed815f9c55eac29b7b49c6ea49cb23561734141"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}