{
    "filename": "bool_fun.v",
    "coq_project": "smc",
    "vernac_cmds": [
        [
            "Require Import Bool.",
            "VernacRequire",
            "a27d9a6c92262b970381301472e9a1100c206680"
        ],
        [
            "Require Import Sumbool.",
            "VernacRequire",
            "555a25fa361ace801dc7927d5872def951dfbee5"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import ZArith NArith Nnat Ndec Ndigits.",
            "VernacRequire",
            "c2baea4a0fda1451ad00e307f8a2db5ff87567aa"
        ],
        [
            "From IntMap Require Import Allmaps.",
            "VernacRequire",
            "d3a19fbc306700804973888ef7ccf716277e64fb"
        ],
        [
            "Require Import misc.",
            "VernacRequire",
            "cb0a0f95cbb16dccbd6e9271405cb8d23475f804"
        ],
        [
            "Section Bool_fun.",
            "VernacBeginSection",
            "0893e571044bf410a05dbff5cace0c7bda2ccc67"
        ],
        [
            "Definition var_env := BDDvar -> bool.",
            "VernacDefinition",
            "56ad67f2db78c0bc6053801d52e26a298638b5e4"
        ],
        [
            "Definition bool_fun := var_env -> bool.",
            "VernacDefinition",
            "3bec3f97782e046a74f5218edaa4e65462719267"
        ],
        [
            "Definition bool_fun_eq (bf1 bf2 : bool_fun) := forall vb : var_env, bf1 vb = bf2 vb.",
            "VernacDefinition",
            "bb6d4649a7918a5c7bb8e857c6df954ff788e740"
        ],
        [
            "Definition bool_fun_zero (vb : var_env) := false.",
            "VernacDefinition",
            "0f675c57b8be7af8ff6e621846291b32e50314ad"
        ],
        [
            "Definition bool_fun_one (vb : var_env) := true.",
            "VernacDefinition",
            "7988550530acc0481042d174bb37a390927f2c03"
        ],
        [
            "Definition bool_fun_neg (bf : bool_fun) : bool_fun := fun vb : var_env => negb (bf vb).",
            "VernacDefinition",
            "d7aec9f1ccbf3cb7ec47454c9480fa41a6cef2e5"
        ],
        [
            "Definition bool_fun_or (bf1 bf2 : bool_fun) : bool_fun := fun vb : var_env => bf1 vb || bf2 vb.",
            "VernacDefinition",
            "081d998f92438699838904d536e4e2b581deeb9c"
        ],
        [
            "Definition bool_fun_and (bf1 bf2 : bool_fun) : bool_fun := fun vb : var_env => bf1 vb && bf2 vb.",
            "VernacDefinition",
            "b777b7bbed633bc75a2d01d473f2766775c3e7a9"
        ],
        [
            "Definition bool_fun_impl (bf1 bf2 : bool_fun) : bool_fun := fun vb : var_env => implb (bf1 vb) (bf2 vb).",
            "VernacDefinition",
            "b1e68262730f5141ec8fdc5569ed6708c711b157"
        ],
        [
            "Definition bool_fun_iff (bf1 bf2 : bool_fun) : bool_fun := fun vb : var_env => eqb (bf1 vb) (bf2 vb).",
            "VernacDefinition",
            "97ed067d8dbfbb31109a8d907396949c9dc68fe3"
        ],
        [
            "Definition bool_fun_if (x : BDDvar) (bf1 bf2 : bool_fun) : bool_fun := fun vb : var_env => ifb (vb x) (bf1 vb) (bf2 vb).",
            "VernacDefinition",
            "21f11d4a8f0f4ca784cf139266181d39af1405b0"
        ],
        [
            "Definition bool_fun_var (x : BDDvar) : bool_fun := fun vb : var_env => vb x.",
            "VernacDefinition",
            "4e14d5622bdf0eb05a2e66b1f2d7b529de1d94d1"
        ],
        [
            "Definition augment (vb : var_env) (x : BDDvar) (b : bool) : var_env := fun y : BDDvar => if Neqb x y then b else vb y.",
            "VernacDefinition",
            "ae82cb27a51f83ef824ff6a9f1eb51e22f567da8"
        ],
        [
            "Definition bool_fun_restrict (bf : bool_fun) (x : BDDvar) (b : bool) : bool_fun := fun vb : var_env => bf (augment vb x b).",
            "VernacDefinition",
            "c960917a7b954df12dd57782c5f8ab088e57df39"
        ],
        [
            "Definition bool_fun_independent (bf : bool_fun) (x : BDDvar) := forall b : bool, bool_fun_eq (bool_fun_restrict bf x b) bf.",
            "VernacDefinition",
            "a77290bcf6797aa22e3e2ac82226167f1f95b344"
        ],
        [
            "Definition bool_fun_forall (x : BDDvar) (bf : bool_fun) := bool_fun_and (bool_fun_restrict bf x true) (bool_fun_restrict bf x false).",
            "VernacDefinition",
            "be8c934a6704489afd9a9c5f7db04c9c7f12bb32"
        ],
        [
            "Definition bool_fun_ex (x : BDDvar) (bf : bool_fun) := bool_fun_or (bool_fun_restrict bf x true) (bool_fun_restrict bf x false).",
            "VernacDefinition",
            "40eb7e71e39ecae05aecd34ab799d5d706db7eee"
        ],
        [
            "Definition bool_fun_ext (bf : bool_fun) := forall vb vb' : var_env, (forall x : BDDvar, vb x = vb' x) -> bf vb = bf vb'.",
            "VernacDefinition",
            "6210c8126e55b6ddafb730335af207abf89a8d7a"
        ],
        [
            "Inductive bool_expr : Set := | Zero : bool_expr | One : bool_expr | Var : BDDvar -> bool_expr | Neg : bool_expr -> bool_expr | Or : bool_expr -> bool_expr -> bool_expr | ANd : bool_expr -> bool_expr -> bool_expr | Impl : bool_expr -> bool_expr -> bool_expr | Iff : bool_expr -> bool_expr -> bool_expr.",
            "VernacInductive",
            "76e4f10a990f4e95f370f6496bdd1bfcef777689"
        ],
        [
            "Fixpoint bool_fun_of_bool_expr (be : bool_expr) : bool_fun := match be with | Zero => bool_fun_zero | One => bool_fun_one | Var x => bool_fun_var x | Neg be' => bool_fun_neg (bool_fun_of_bool_expr be') | Or be1 be2 => bool_fun_or (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2) | ANd be1 be2 => bool_fun_and (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2) | Impl be1 be2 => bool_fun_impl (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2) | Iff be1 be2 => bool_fun_iff (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2) end.",
            "VernacFixpoint",
            "69a010853fbddf07ef745545abbf43d2b93c0c99"
        ],
        [
            "Lemma bool_fun_eq_refl : forall bf : bool_fun, bool_fun_eq bf bf.",
            "VernacStartTheoremProof",
            "6744672ce4937a3eae494c645c3ab18f7464f5a2"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_eq_sym : forall bf1 bf2 : bool_fun, bool_fun_eq bf1 bf2 -> bool_fun_eq bf2 bf1.",
            "VernacStartTheoremProof",
            "f5bf7b50e354cab7815dd0c534bfbd1339019c6c"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_eq_trans : forall bf1 bf2 bf3 : bool_fun, bool_fun_eq bf1 bf2 -> bool_fun_eq bf2 bf3 -> bool_fun_eq bf1 bf3.",
            "VernacStartTheoremProof",
            "e0a39082a7a6789e7ad7d9c46fbe4a73048631f3"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite <- (H0 vb).",
            "VernacExtend",
            "7cd58aa8ee7d0645942ce061b7498dcada528c69"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_neg_preserves_eq : forall bf1 bf2 : bool_fun, bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_neg bf1) (bool_fun_neg bf2).",
            "VernacStartTheoremProof",
            "3442dc27e209e04ed66939ee6bd78885f81371ab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_neg in |- *.",
            "VernacExtend",
            "15474425d055d8f2a73dcade21589d615b677e28"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_preserves_eq : forall bf1 bf1' bf2 bf2' : bool_fun, bool_fun_eq bf1 bf1' -> bool_fun_eq bf2 bf2' -> bool_fun_eq (bool_fun_or bf1 bf2) (bool_fun_or bf1' bf2').",
            "VernacStartTheoremProof",
            "b046a7c0d1f904d56870ddf77557407e510f4aa8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or in |- *.",
            "VernacExtend",
            "02b970fd93a97bc61f420d79dbeff1afb4b043e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite (H0 vb).",
            "VernacExtend",
            "0e3eb373d99b49ae6447fc9829c6aef902870147"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_preserves_eq : forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun), bool_fun_eq bf1 bf1' -> bool_fun_eq bf2 bf2' -> bool_fun_eq (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2').",
            "VernacStartTheoremProof",
            "3be69feb14cd46de44a8c074cd74b14369815823"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if in |- *.",
            "VernacExtend",
            "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite (H0 vb).",
            "VernacExtend",
            "0e3eb373d99b49ae6447fc9829c6aef902870147"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_and_preserves_eq : forall bf1 bf1' bf2 bf2' : bool_fun, bool_fun_eq bf1 bf1' -> bool_fun_eq bf2 bf2' -> bool_fun_eq (bool_fun_and bf1 bf2) (bool_fun_and bf1' bf2').",
            "VernacStartTheoremProof",
            "c5d253bbcfc75d07a06ea760a32ef0919a1ab89d"
        ],
        [
            "unfold bool_fun_eq, bool_fun_and in |- *.",
            "VernacExtend",
            "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite (H0 vb).",
            "VernacExtend",
            "0e3eb373d99b49ae6447fc9829c6aef902870147"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_impl_preserves_eq : forall bf1 bf1' bf2 bf2' : bool_fun, bool_fun_eq bf1 bf1' -> bool_fun_eq bf2 bf2' -> bool_fun_eq (bool_fun_impl bf1 bf2) (bool_fun_impl bf1' bf2').",
            "VernacStartTheoremProof",
            "83e3fc676fb8b0e85d430df5f03640447c4cebd8"
        ],
        [
            "unfold bool_fun_eq, bool_fun_impl in |- *.",
            "VernacExtend",
            "23612e45a082dce3611984a1a313ef7080ccfe1e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite (H0 vb).",
            "VernacExtend",
            "0e3eb373d99b49ae6447fc9829c6aef902870147"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_iff_preserves_eq : forall bf1 bf1' bf2 bf2' : bool_fun, bool_fun_eq bf1 bf1' -> bool_fun_eq bf2 bf2' -> bool_fun_eq (bool_fun_iff bf1 bf2) (bool_fun_iff bf1' bf2').",
            "VernacStartTheoremProof",
            "456c34660079b9473ca6d85746c6e6859f01a69d"
        ],
        [
            "unfold bool_fun_eq, bool_fun_iff in |- *.",
            "VernacExtend",
            "347da3c8db18703b877365d9e3b7b5e8545dde57"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "rewrite (H0 vb).",
            "VernacExtend",
            "0e3eb373d99b49ae6447fc9829c6aef902870147"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_preserves_eq : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_forall x bf1) (bool_fun_forall x bf2).",
            "VernacStartTheoremProof",
            "d03dbcecea5ff1e17eb743eb17babc618ac7f247"
        ],
        [
            "unfold bool_fun_eq, bool_fun_forall, bool_fun_and in |- *.",
            "VernacExtend",
            "243d6cbf410f73c4369351d8642542cf5ca82226"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_restrict in |- *.",
            "VernacExtend",
            "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
        ],
        [
            "rewrite (H (augment vb x true)).",
            "VernacExtend",
            "adbc97e002f38b3c4b0757daab10f7c4f65f55b7"
        ],
        [
            "rewrite (H (augment vb x false)).",
            "VernacExtend",
            "3ef4f8afe04cff2e9b8a5f5fae17ed0a525833ae"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_ex_preserves_eq : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_ex x bf1) (bool_fun_ex x bf2).",
            "VernacStartTheoremProof",
            "71502b3f47e8927b4c1a6b082cc64eb9d659c274"
        ],
        [
            "unfold bool_fun_eq, bool_fun_ex, bool_fun_or in |- *.",
            "VernacExtend",
            "527780289115515c357f3be05eafb57da71c2cab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_restrict in |- *.",
            "VernacExtend",
            "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
        ],
        [
            "rewrite (H (augment vb x true)).",
            "VernacExtend",
            "adbc97e002f38b3c4b0757daab10f7c4f65f55b7"
        ],
        [
            "rewrite (H (augment vb x false)).",
            "VernacExtend",
            "3ef4f8afe04cff2e9b8a5f5fae17ed0a525833ae"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_neg_zero : bool_fun_eq (bool_fun_neg bool_fun_zero) bool_fun_one.",
            "VernacStartTheoremProof",
            "00f6c1f229ca125e33faddd0f169225fe9b355cb"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_neg_one : bool_fun_eq (bool_fun_neg bool_fun_one) bool_fun_zero.",
            "VernacStartTheoremProof",
            "457e27be383f39e463c3420c25c3ed1c62056bc7"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_and_lemma : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_and bf1 bf2) (bool_fun_neg (bool_fun_or (bool_fun_neg bf1) (bool_fun_neg bf2))).",
            "VernacStartTheoremProof",
            "c1671277b6e3610286054179035eab9cd2e013df"
        ],
        [
            "unfold bool_fun_eq, bool_fun_neg, bool_fun_or, bool_fun_and in |- *.",
            "VernacExtend",
            "d79a3180e34aa6f25d9c51e65fecb02999def879"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf1 vb); elim (bf2 vb); reflexivity.",
            "VernacExtend",
            "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_impl_lemma : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_impl bf1 bf2) (bool_fun_or (bool_fun_neg bf1) bf2).",
            "VernacStartTheoremProof",
            "b868787347627845bcd54e3ea729d3c1d2fdc0a3"
        ],
        [
            "unfold bool_fun_eq, bool_fun_impl, bool_fun_or, bool_fun_neg in |- *.",
            "VernacExtend",
            "bed467fe3efbe20c5d198bd6c389ddb747985010"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf1 vb); elim (bf2 vb); reflexivity.",
            "VernacExtend",
            "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_iff_lemma : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_iff bf1 bf2) (bool_fun_impl (bool_fun_or bf1 bf2) (bool_fun_and bf1 bf2)).",
            "VernacStartTheoremProof",
            "79111c65f39b57532a5608bcb051dc9f595e87c3"
        ],
        [
            "unfold bool_fun_eq, bool_fun_iff, bool_fun_impl, bool_fun_or, bool_fun_and in |- *.",
            "VernacExtend",
            "bb897b33c1ac56c86385b03ae6f3bc5579489cad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf1 vb); elim (bf2 vb); reflexivity.",
            "VernacExtend",
            "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_ex_lemma : forall (bf : bool_fun) (x : BDDvar), bool_fun_eq (bool_fun_ex x bf) (bool_fun_neg (bool_fun_forall x (bool_fun_neg bf))).",
            "VernacStartTheoremProof",
            "7632b4691d382ae371b9167ea72bf946c584b84e"
        ],
        [
            "unfold bool_fun_ex in |- *.",
            "VernacExtend",
            "6387e9b4aeb07d5b82932cd1cf941dec063de1cd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_forall in |- *.",
            "VernacExtend",
            "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
        ],
        [
            "unfold bool_fun_or, bool_fun_and, bool_fun_neg, bool_fun_restrict in |- *.",
            "VernacExtend",
            "430d4eb344d164132e159b81142ff901a5b03393"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (bf (augment vb x true)); elim (bf (augment vb x false)); reflexivity.",
            "VernacExtend",
            "5592c551267660fed217d4b96d623d27c936c6a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_var_lemma : forall x : BDDvar, bool_fun_eq (bool_fun_var x) (bool_fun_if x bool_fun_one bool_fun_zero).",
            "VernacStartTheoremProof",
            "55c835cbc7336e449bcfa2e32e224692244d0025"
        ],
        [
            "unfold bool_fun_var, bool_fun_one, bool_fun_zero, bool_fun_if, bool_fun_eq in |- *.",
            "VernacExtend",
            "5918c70554cb86aa6f560dd390ea61ef8c8afd4b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x); reflexivity.",
            "VernacExtend",
            "89f93a40ff17cd38ae9950fe7fd1e89488ce6fbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_eq_neg_eq : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_neg bf1) (bool_fun_neg bf2) -> bool_fun_eq bf1 bf2.",
            "VernacStartTheoremProof",
            "fea3daeac2df414c92f8c5152f9249c5ca4b907f"
        ],
        [
            "unfold bool_fun_eq, bool_fun_neg in |- *.",
            "VernacExtend",
            "15474425d055d8f2a73dcade21589d615b677e28"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (negb (bf1 vb) = negb (bf2 vb)).",
            "VernacExtend",
            "826f84db8ab056213b99d2a965215171838bd545"
        ],
        [
            "elim (bf1 vb).",
            "VernacExtend",
            "2ae6295527d6318ededa3786074beb1d1bbf842f"
        ],
        [
            "elim (bf2 vb).",
            "VernacExtend",
            "2f5c2ddf2d0b4640112df7d3aab097031b9e9a1c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intro; discriminate.",
            "VernacExtend",
            "d63764752b13c9777fe3ccb54c65ae24ab510154"
        ],
        [
            "elim (bf2 vb).",
            "VernacExtend",
            "2f5c2ddf2d0b4640112df7d3aab097031b9e9a1c"
        ],
        [
            "intro; discriminate.",
            "VernacExtend",
            "d63764752b13c9777fe3ccb54c65ae24ab510154"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_neg_orthogonal : forall (x : BDDvar) (bf1 bf2 : bool_fun), bool_fun_eq (bool_fun_neg (bool_fun_if x bf1 bf2)) (bool_fun_if x (bool_fun_neg bf1) (bool_fun_neg bf2)).",
            "VernacStartTheoremProof",
            "34d30d03a00e36e372e1b862168de8f11c02937e"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if, bool_fun_neg in |- *.",
            "VernacExtend",
            "105e40201e1167855862feb741fc17a9d7469a87"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_zero : forall bf : bool_fun, bool_fun_eq (bool_fun_or bf bool_fun_zero) bf.",
            "VernacStartTheoremProof",
            "97e4c2a001a46c917a49bb4dba7163bfd5ff6e9e"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or, bool_fun_zero in |- *.",
            "VernacExtend",
            "e3f301b40eaf8d84b4e05edf99b7bc61fa856b7c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf vb); reflexivity.",
            "VernacExtend",
            "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_one : forall bf : bool_fun, bool_fun_eq (bool_fun_or bf bool_fun_one) bool_fun_one.",
            "VernacStartTheoremProof",
            "fb89a502b34603eda298c29931e4bd6839f776cc"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or, bool_fun_one in |- *.",
            "VernacExtend",
            "26d641891cedaa18ac0ee5fa2c764fcbd16b3d25"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf vb); reflexivity.",
            "VernacExtend",
            "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_comm : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_or bf1 bf2) (bool_fun_or bf2 bf1).",
            "VernacStartTheoremProof",
            "51f2fdd97b2e72b3ee23756ca3ff58d56cadf307"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or in |- *.",
            "VernacExtend",
            "02b970fd93a97bc61f420d79dbeff1afb4b043e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf1 vb); elim (bf2 vb); reflexivity.",
            "VernacExtend",
            "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_and_comm : forall bf1 bf2 : bool_fun, bool_fun_eq (bool_fun_and bf1 bf2) (bool_fun_and bf2 bf1).",
            "VernacStartTheoremProof",
            "ffbd244f2ad0c6e6b6f382780042c92dd21dc9cb"
        ],
        [
            "unfold bool_fun_eq, bool_fun_and in |- *.",
            "VernacExtend",
            "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf1 vb); elim (bf2 vb); reflexivity.",
            "VernacExtend",
            "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_and_idempotent : forall bf : bool_fun, bool_fun_eq (bool_fun_and bf bf) bf.",
            "VernacStartTheoremProof",
            "e02b42dd292b54d2896d04965faaf8a90e169310"
        ],
        [
            "unfold bool_fun_eq, bool_fun_and in |- *.",
            "VernacExtend",
            "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (bf vb); reflexivity.",
            "VernacExtend",
            "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_orthogonal : forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun), bool_fun_eq (bool_fun_or (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2')) (bool_fun_if x (bool_fun_or bf1 bf1') (bool_fun_or bf2 bf2')).",
            "VernacStartTheoremProof",
            "e961a3a3fa9f93b08377828e6ffcb36e452c883b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
            "VernacExtend",
            "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_orthogonal_right : forall (x : BDDvar) (bf bf1' bf2' : bool_fun), bool_fun_eq (bool_fun_or bf (bool_fun_if x bf1' bf2')) (bool_fun_if x (bool_fun_or bf bf1') (bool_fun_or bf bf2')).",
            "VernacStartTheoremProof",
            "cfba0079fb4501d8034b60d55ea7aaca546b7b0a"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
            "VernacExtend",
            "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_or_orthogonal_left : forall (x : BDDvar) (bf1 bf2 bf' : bool_fun), bool_fun_eq (bool_fun_or (bool_fun_if x bf1 bf2) bf') (bool_fun_if x (bool_fun_or bf1 bf') (bool_fun_or bf2 bf')).",
            "VernacStartTheoremProof",
            "becf43c0e9706b2512e8b930d74d3bc3d7094597"
        ],
        [
            "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
            "VernacExtend",
            "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_and_orthogonal : forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun), bool_fun_eq (bool_fun_and (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2')) (bool_fun_if x (bool_fun_and bf1 bf1') (bool_fun_and bf2 bf2')).",
            "VernacStartTheoremProof",
            "cdbfcf30741ace98e4785349fe12fe15d930a55a"
        ],
        [
            "unfold bool_fun_eq, bool_fun_and, bool_fun_if in |- *.",
            "VernacExtend",
            "ffae9d2e54167373639ed89360ba6d056496438a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_independent : forall (x : BDDvar) (bf : bool_fun), bool_fun_independent bf x -> bool_fun_eq (bool_fun_forall x bf) bf.",
            "VernacStartTheoremProof",
            "8501b4ededfa5300d43810a13d6083a492fb1cb0"
        ],
        [
            "unfold bool_fun_forall in |- *.",
            "VernacExtend",
            "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
        ],
        [
            "unfold bool_fun_independent in |- *.",
            "VernacExtend",
            "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_and bf bf).",
            "VernacExtend",
            "93cd7b1bd4e838c1494580748d381c7fe67587c8"
        ],
        [
            "apply bool_fun_and_preserves_eq.",
            "VernacExtend",
            "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply bool_fun_and_idempotent.",
            "VernacExtend",
            "a002849e63e5fc31cb4337e907471d7e9a7c936f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_zero : forall x : BDDvar, bool_fun_eq (bool_fun_forall x bool_fun_zero) bool_fun_zero.",
            "VernacStartTheoremProof",
            "5a8e40faa65e28febd2f5b64af7fab959e2008e9"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold bool_fun_eq, bool_fun_forall, bool_fun_zero, bool_fun_restrict in |- *.",
            "VernacExtend",
            "a83ba3ca1915dd2581fa3ebcfaaedfcb6feb3c5d"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_one : forall x : BDDvar, bool_fun_eq (bool_fun_forall x bool_fun_one) bool_fun_one.",
            "VernacStartTheoremProof",
            "e6696f9eaaeea17842a6595f0c0264265b9e0905"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold bool_fun_eq, bool_fun_forall, bool_fun_one, bool_fun_restrict in |- *.",
            "VernacExtend",
            "a925bf223801bcb74d696297d26e1dc4c3bcbdaf"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_restrict_zero : forall (x : BDDvar) (b : bool), bool_fun_eq (bool_fun_restrict bool_fun_zero x b) bool_fun_zero.",
            "VernacStartTheoremProof",
            "a778c1b5ca25d93d0ad108e0371bda88d4ff7bfe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_restrict, bool_fun_zero, bool_fun_one in |- *.",
            "VernacExtend",
            "f2f2c7cb38e85f71d23261f416449e69db1cf33d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold augment in |- *.",
            "VernacExtend",
            "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_restrict_one : forall (x : BDDvar) (b : bool), bool_fun_eq (bool_fun_restrict bool_fun_one x b) bool_fun_one.",
            "VernacStartTheoremProof",
            "5eb6b16675e323a64ca937ee08536691c8c13af2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_restrict, bool_fun_zero, bool_fun_one in |- *.",
            "VernacExtend",
            "f2f2c7cb38e85f71d23261f416449e69db1cf33d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold augment in |- *.",
            "VernacExtend",
            "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_restrict_preserves_eq : forall (bf1 bf2 : bool_fun) (x : BDDvar) (b : bool), bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_restrict bf1 x b) (bool_fun_restrict bf2 x b).",
            "VernacStartTheoremProof",
            "d4321b8dc4c811f0251e12a8cfd3316db3581a8a"
        ],
        [
            "unfold bool_fun_eq, bool_fun_restrict in |- *.",
            "VernacExtend",
            "fe8cf0917459534b0cf0b40bf124d48562621c9b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H (augment vb x b)).",
            "VernacExtend",
            "f37c0b81cc5ea7c848d7c184c0a9180c7d88237e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_independent_zero : forall x : BDDvar, bool_fun_independent bool_fun_zero x.",
            "VernacStartTheoremProof",
            "e09360d357bcca2e4e2af39a12fe6b875733001d"
        ],
        [
            "unfold bool_fun_independent, bool_fun_zero in |- *.",
            "VernacExtend",
            "3eccf2f7f3f12fa698ebe7619745b2d6a90a5538"
        ],
        [
            "unfold bool_fun_restrict, bool_fun_eq in |- *.",
            "VernacExtend",
            "c10c896c9b8d859344f42d68594a6fb623cc0f57"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_independent_one : forall x : BDDvar, bool_fun_independent bool_fun_one x.",
            "VernacStartTheoremProof",
            "11e84e1f497788e5a68c8183a59aa5eeb3815b00"
        ],
        [
            "unfold bool_fun_independent, bool_fun_one in |- *.",
            "VernacExtend",
            "02b3038099efe1280147fdd03d460aa99c6ddd3e"
        ],
        [
            "unfold bool_fun_restrict, bool_fun_eq in |- *.",
            "VernacExtend",
            "c10c896c9b8d859344f42d68594a6fb623cc0f57"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_eq_independent : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq bf1 bf2 -> bool_fun_independent bf1 x -> bool_fun_independent bf2 x.",
            "VernacStartTheoremProof",
            "0871f404cd36256dc07fc52d8517eeb1021da899"
        ],
        [
            "unfold bool_fun_independent in |- *.",
            "VernacExtend",
            "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf1 x b).",
            "VernacExtend",
            "ed14441c1c04cb9c11263700f5953cdd94ad7edb"
        ],
        [
            "apply bool_fun_restrict_preserves_eq.",
            "VernacExtend",
            "7fea6f63d0afbb692cb9df3ccbe0db190a4c2d42"
        ],
        [
            "apply bool_fun_eq_sym.",
            "VernacExtend",
            "16f43a5008c8d829f642c7852f9ea935544b8db0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bf1).",
            "VernacExtend",
            "33bf8f2d23b74b4a87f61353c53e3ed50def88e5"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_restrict_true : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x true) (bool_fun_restrict bf1 x true).",
            "VernacStartTheoremProof",
            "16ee552e6cfebbb38c05d64e6561956d10b46d1c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if in |- *.",
            "VernacExtend",
            "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
        ],
        [
            "unfold bool_fun_restrict in |- *.",
            "VernacExtend",
            "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
        ],
        [
            "unfold augment at 1 in |- *.",
            "VernacExtend",
            "1d433c78b96755eca7e111353b73a069bdea35fd"
        ],
        [
            "rewrite (Neqb_correct x).",
            "VernacExtend",
            "da8b6d946372164e1780b02ab6fe93f9751eb2ca"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_restrict_false : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x false) (bool_fun_restrict bf2 x false).",
            "VernacStartTheoremProof",
            "a850e53b81f5689dc60a79cc14e76e432a82d3ca"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if in |- *.",
            "VernacExtend",
            "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
        ],
        [
            "unfold bool_fun_restrict in |- *.",
            "VernacExtend",
            "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
        ],
        [
            "unfold augment at 1 in |- *.",
            "VernacExtend",
            "1d433c78b96755eca7e111353b73a069bdea35fd"
        ],
        [
            "rewrite (Neqb_correct x).",
            "VernacExtend",
            "da8b6d946372164e1780b02ab6fe93f9751eb2ca"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_restrict : forall (bf1 bf2 : bool_fun) (x y : BDDvar) (b : bool), Neqb x y = false -> bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) y b) (bool_fun_if x (bool_fun_restrict bf1 y b) (bool_fun_restrict bf2 y b)).",
            "VernacStartTheoremProof",
            "a7ebb38f16acc9c66f3c7cd1a1c003d2b9145740"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_restrict in |- *.",
            "VernacExtend",
            "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
        ],
        [
            "unfold bool_fun_eq in |- *.",
            "VernacExtend",
            "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold augment in |- *.",
            "VernacExtend",
            "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
        ],
        [
            "unfold bool_fun_if in |- *.",
            "VernacExtend",
            "cb8d8d5bf8b355d1ae4a4c698ef377d1bfe7a333"
        ],
        [
            "rewrite (Neqb_comm x y) in H.",
            "VernacExtend",
            "2f01019fb0c47f5f533a0d3697310d670054bf8c"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_restrict_true_independent : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_independent bf1 x -> bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x true) bf1.",
            "VernacStartTheoremProof",
            "9b41b137e584e0a5d0154ae6ff5e23a69a8c30b7"
        ],
        [
            "unfold bool_fun_independent in |- *.",
            "VernacExtend",
            "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf1 x true).",
            "VernacExtend",
            "f930b804ba1d66a51633329dfccba8b41f0c93c4"
        ],
        [
            "apply bool_fun_if_restrict_true.",
            "VernacExtend",
            "ea9068a92d255b06b5cf6be73142358289803262"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_restrict_false_independent : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_independent bf2 x -> bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x false) bf2.",
            "VernacStartTheoremProof",
            "dd2eae7d356718725fa8e0bd2f98c8e02940be29"
        ],
        [
            "unfold bool_fun_independent in |- *.",
            "VernacExtend",
            "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf2 x false).",
            "VernacExtend",
            "67676d89e7b824020ab26a05de007b2503f712ba"
        ],
        [
            "apply bool_fun_if_restrict_false.",
            "VernacExtend",
            "8bf5d0d26c172aa4bed0dbc92779cd7a719a36a5"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_orthogonal : forall (x u : BDDvar) (bf1 bf2 : bool_fun), Neqb x u = false -> bool_fun_eq (bool_fun_forall u (bool_fun_if x bf1 bf2)) (bool_fun_if x (bool_fun_forall u bf1) (bool_fun_forall u bf2)).",
            "VernacStartTheoremProof",
            "40f04b11108e8e9d7d519ed2073ebf80e196d3fc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_forall at 1 in |- *.",
            "VernacExtend",
            "2e5391477811ab8e18c820fc46073b17a1a9414d"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_and (bool_fun_if x (bool_fun_restrict bf1 u true) (bool_fun_restrict bf2 u true)) (bool_fun_if x (bool_fun_restrict bf1 u false) (bool_fun_restrict bf2 u false))).",
            "VernacExtend",
            "969bf55d3a24d4d17395843e89ff70d01cb7e32f"
        ],
        [
            "apply bool_fun_and_preserves_eq.",
            "VernacExtend",
            "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
        ],
        [
            "apply bool_fun_if_restrict.",
            "VernacExtend",
            "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply bool_fun_if_restrict.",
            "VernacExtend",
            "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold bool_fun_forall in |- *.",
            "VernacExtend",
            "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
        ],
        [
            "apply bool_fun_and_orthogonal.",
            "VernacExtend",
            "41b562c481e5e90bc08da429f7f4247d2c4141c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_independent_if : forall (x y : BDDvar) (bf1 bf2 : bool_fun), bool_fun_independent bf1 x -> bool_fun_independent bf2 x -> Neqb x y = false -> bool_fun_independent (bool_fun_if y bf1 bf2) x.",
            "VernacStartTheoremProof",
            "0cd126b2579fbd80387239092db0f17787ae88a6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_independent in |- *.",
            "VernacExtend",
            "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply bool_fun_eq_trans with (bf2 := bool_fun_if y (bool_fun_restrict bf1 x b) (bool_fun_restrict bf2 x b)).",
            "VernacExtend",
            "103c49c1d66c7d6371f17d9f02a0b6913c6840e5"
        ],
        [
            "apply bool_fun_if_restrict.",
            "VernacExtend",
            "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
        ],
        [
            "rewrite (Neqb_comm x y) in H1; assumption.",
            "VernacExtend",
            "2d84559f020e16cd8b75893dab08cb79bc6273da"
        ],
        [
            "apply bool_fun_if_preserves_eq.",
            "VernacExtend",
            "1c2a4f5b6b88ee3776baaeedd296c8f06bd07398"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_forall_if_egal : forall (x : BDDvar) (bf1 bf2 : bool_fun), bool_fun_independent bf1 x -> bool_fun_independent bf2 x -> bool_fun_eq (bool_fun_forall x (bool_fun_if x bf1 bf2)) (bool_fun_and bf1 bf2).",
            "VernacStartTheoremProof",
            "35fd16cb95e4bdeeaec318b518edb653786b7f7f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold bool_fun_forall in |- *.",
            "VernacExtend",
            "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
        ],
        [
            "apply bool_fun_and_preserves_eq.",
            "VernacExtend",
            "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
        ],
        [
            "apply bool_fun_if_restrict_true_independent.",
            "VernacExtend",
            "38d2a071897a648934f6793dea0fac65db1ce00e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply bool_fun_if_restrict_false_independent.",
            "VernacExtend",
            "08e688bfea57ec50b03da5f5d41bea7d5e2cd55c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_eq_1 : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_if x bf1 bf2) bf1.",
            "VernacStartTheoremProof",
            "b92d2516900ed21aa1dc943c53d035af54bafc19"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if in |- *.",
            "VernacExtend",
            "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_if_eq_2 : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_if x bf1 bf2) bf2.",
            "VernacStartTheoremProof",
            "62054634a83910b38d687bb2dc986f8361f0b840"
        ],
        [
            "unfold bool_fun_eq, bool_fun_if in |- *.",
            "VernacExtend",
            "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb).",
            "VernacExtend",
            "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
        ],
        [
            "elim (vb x).",
            "VernacExtend",
            "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_ext_zero : bool_fun_ext bool_fun_zero.",
            "VernacStartTheoremProof",
            "e3695bd3e7ec1e80972665049010c6f178f14666"
        ],
        [
            "unfold bool_fun_ext, bool_fun_zero in |- *.",
            "VernacExtend",
            "49f55d6bcc28ce8146b0cebb10f0143e6389d5e8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_ext_one : bool_fun_ext bool_fun_one.",
            "VernacStartTheoremProof",
            "5ba340bb33a8e7d740a00806f6344e399a9d31f9"
        ],
        [
            "unfold bool_fun_ext, bool_fun_one in |- *.",
            "VernacExtend",
            "cbfe1d3cb2fe64164411cde7f1ceb58c95de79d9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_fun_ext_if : forall (bf1 bf2 : bool_fun) (x : BDDvar), bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_if x bf1 bf2).",
            "VernacStartTheoremProof",
            "a58aac6ff973b9edd20392222f4b08fc02e97203"
        ],
        [
            "unfold bool_fun_ext, bool_fun_if in |- *.",
            "VernacExtend",
            "3015525d6900e13afaf8a5925bc3ba743fdf5fba"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H vb vb' H1).",
            "VernacExtend",
            "7fbcde78e744b0e4751414aafeec422503eb9b34"
        ],
        [
            "rewrite (H0 vb vb' H1).",
            "VernacExtend",
            "7c8219c191cba9d2419580024474931bd3ae6abd"
        ],
        [
            "rewrite (H1 x).",
            "VernacExtend",
            "1d0d89b9224ac0489f594eef21088ea177b3b11d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Bool_fun.",
            "VernacEndSegment",
            "2d4af126cc4402e0cd603e5fd762ddde2f41b620"
        ]
    ],
    "proofs": [
        {
            "name": "bool_fun_eq_refl",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_eq_sym",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_eq_trans",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H0 vb).",
                        "VernacExtend",
                        "7cd58aa8ee7d0645942ce061b7498dcada528c69"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_neg_preserves_eq",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_neg in |- *.",
                        "VernacExtend",
                        "15474425d055d8f2a73dcade21589d615b677e28"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_preserves_eq",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or in |- *.",
                        "VernacExtend",
                        "02b970fd93a97bc61f420d79dbeff1afb4b043e1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb).",
                        "VernacExtend",
                        "0e3eb373d99b49ae6447fc9829c6aef902870147"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_preserves_eq",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if in |- *.",
                        "VernacExtend",
                        "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb).",
                        "VernacExtend",
                        "0e3eb373d99b49ae6447fc9829c6aef902870147"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_and_preserves_eq",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_and in |- *.",
                        "VernacExtend",
                        "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb).",
                        "VernacExtend",
                        "0e3eb373d99b49ae6447fc9829c6aef902870147"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_impl_preserves_eq",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_impl in |- *.",
                        "VernacExtend",
                        "23612e45a082dce3611984a1a313ef7080ccfe1e"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb).",
                        "VernacExtend",
                        "0e3eb373d99b49ae6447fc9829c6aef902870147"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_iff_preserves_eq",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_iff in |- *.",
                        "VernacExtend",
                        "347da3c8db18703b877365d9e3b7b5e8545dde57"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb).",
                        "VernacExtend",
                        "0e3eb373d99b49ae6447fc9829c6aef902870147"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_preserves_eq",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_forall, bool_fun_and in |- *.",
                        "VernacExtend",
                        "243d6cbf410f73c4369351d8642542cf5ca82226"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (augment vb x true)).",
                        "VernacExtend",
                        "adbc97e002f38b3c4b0757daab10f7c4f65f55b7"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (augment vb x false)).",
                        "VernacExtend",
                        "3ef4f8afe04cff2e9b8a5f5fae17ed0a525833ae"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_ex_preserves_eq",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_ex, bool_fun_or in |- *.",
                        "VernacExtend",
                        "527780289115515c357f3be05eafb57da71c2cab"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (augment vb x true)).",
                        "VernacExtend",
                        "adbc97e002f38b3c4b0757daab10f7c4f65f55b7"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (augment vb x false)).",
                        "VernacExtend",
                        "3ef4f8afe04cff2e9b8a5f5fae17ed0a525833ae"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_neg_zero",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_neg_one",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_and_lemma",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_neg, bool_fun_or, bool_fun_and in |- *.",
                        "VernacExtend",
                        "d79a3180e34aa6f25d9c51e65fecb02999def879"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb); elim (bf2 vb); reflexivity.",
                        "VernacExtend",
                        "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_impl_lemma",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_impl, bool_fun_or, bool_fun_neg in |- *.",
                        "VernacExtend",
                        "bed467fe3efbe20c5d198bd6c389ddb747985010"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb); elim (bf2 vb); reflexivity.",
                        "VernacExtend",
                        "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_iff_lemma",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_iff, bool_fun_impl, bool_fun_or, bool_fun_and in |- *.",
                        "VernacExtend",
                        "bb897b33c1ac56c86385b03ae6f3bc5579489cad"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb); elim (bf2 vb); reflexivity.",
                        "VernacExtend",
                        "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_ex_lemma",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_ex in |- *.",
                        "VernacExtend",
                        "6387e9b4aeb07d5b82932cd1cf941dec063de1cd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_forall in |- *.",
                        "VernacExtend",
                        "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_or, bool_fun_and, bool_fun_neg, bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "430d4eb344d164132e159b81142ff901a5b03393"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (bf (augment vb x true)); elim (bf (augment vb x false)); reflexivity.",
                        "VernacExtend",
                        "5592c551267660fed217d4b96d623d27c936c6a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_var_lemma",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_var, bool_fun_one, bool_fun_zero, bool_fun_if, bool_fun_eq in |- *.",
                        "VernacExtend",
                        "5918c70554cb86aa6f560dd390ea61ef8c8afd4b"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x); reflexivity.",
                        "VernacExtend",
                        "89f93a40ff17cd38ae9950fe7fd1e89488ce6fbb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_eq_neg_eq",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_neg in |- *.",
                        "VernacExtend",
                        "15474425d055d8f2a73dcade21589d615b677e28"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (negb (bf1 vb) = negb (bf2 vb)).",
                        "VernacExtend",
                        "826f84db8ab056213b99d2a965215171838bd545"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb).",
                        "VernacExtend",
                        "2ae6295527d6318ededa3786074beb1d1bbf842f"
                    ]
                },
                {
                    "command": [
                        "elim (bf2 vb).",
                        "VernacExtend",
                        "2f5c2ddf2d0b4640112df7d3aab097031b9e9a1c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intro; discriminate.",
                        "VernacExtend",
                        "d63764752b13c9777fe3ccb54c65ae24ab510154"
                    ]
                },
                {
                    "command": [
                        "elim (bf2 vb).",
                        "VernacExtend",
                        "2f5c2ddf2d0b4640112df7d3aab097031b9e9a1c"
                    ]
                },
                {
                    "command": [
                        "intro; discriminate.",
                        "VernacExtend",
                        "d63764752b13c9777fe3ccb54c65ae24ab510154"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_neg_orthogonal",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if, bool_fun_neg in |- *.",
                        "VernacExtend",
                        "105e40201e1167855862feb741fc17a9d7469a87"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_zero",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or, bool_fun_zero in |- *.",
                        "VernacExtend",
                        "e3f301b40eaf8d84b4e05edf99b7bc61fa856b7c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf vb); reflexivity.",
                        "VernacExtend",
                        "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_one",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or, bool_fun_one in |- *.",
                        "VernacExtend",
                        "26d641891cedaa18ac0ee5fa2c764fcbd16b3d25"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf vb); reflexivity.",
                        "VernacExtend",
                        "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_comm",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or in |- *.",
                        "VernacExtend",
                        "02b970fd93a97bc61f420d79dbeff1afb4b043e1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb); elim (bf2 vb); reflexivity.",
                        "VernacExtend",
                        "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_and_comm",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_and in |- *.",
                        "VernacExtend",
                        "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf1 vb); elim (bf2 vb); reflexivity.",
                        "VernacExtend",
                        "c53dde4ac94ecd964d0dfe10c3092ae28bf513d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_and_idempotent",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_and in |- *.",
                        "VernacExtend",
                        "d73b301fd5ffca867e8f3fc4ac1de0ef55676224"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (bf vb); reflexivity.",
                        "VernacExtend",
                        "79f9ea7a91263ba76e1a34a1b8585d5628d6bd87"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_orthogonal",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
                        "VernacExtend",
                        "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_orthogonal_right",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
                        "VernacExtend",
                        "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_or_orthogonal_left",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_or, bool_fun_if in |- *.",
                        "VernacExtend",
                        "a3150f8f3439e26d15f565dbee23be5f8bbf61e1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_and_orthogonal",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_and, bool_fun_if in |- *.",
                        "VernacExtend",
                        "ffae9d2e54167373639ed89360ba6d056496438a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_independent",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_forall in |- *.",
                        "VernacExtend",
                        "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_independent in |- *.",
                        "VernacExtend",
                        "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_and bf bf).",
                        "VernacExtend",
                        "93cd7b1bd4e838c1494580748d381c7fe67587c8"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_and_preserves_eq.",
                        "VernacExtend",
                        "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_and_idempotent.",
                        "VernacExtend",
                        "a002849e63e5fc31cb4337e907471d7e9a7c936f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_zero",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_forall, bool_fun_zero, bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "a83ba3ca1915dd2581fa3ebcfaaedfcb6feb3c5d"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_one",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_forall, bool_fun_one, bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "a925bf223801bcb74d696297d26e1dc4c3bcbdaf"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_restrict_zero",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_restrict, bool_fun_zero, bool_fun_one in |- *.",
                        "VernacExtend",
                        "f2f2c7cb38e85f71d23261f416449e69db1cf33d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold augment in |- *.",
                        "VernacExtend",
                        "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_restrict_one",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_restrict, bool_fun_zero, bool_fun_one in |- *.",
                        "VernacExtend",
                        "f2f2c7cb38e85f71d23261f416449e69db1cf33d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold augment in |- *.",
                        "VernacExtend",
                        "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_restrict_preserves_eq",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "fe8cf0917459534b0cf0b40bf124d48562621c9b"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H (augment vb x b)).",
                        "VernacExtend",
                        "f37c0b81cc5ea7c848d7c184c0a9180c7d88237e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_independent_zero",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_independent, bool_fun_zero in |- *.",
                        "VernacExtend",
                        "3eccf2f7f3f12fa698ebe7619745b2d6a90a5538"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict, bool_fun_eq in |- *.",
                        "VernacExtend",
                        "c10c896c9b8d859344f42d68594a6fb623cc0f57"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_independent_one",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_independent, bool_fun_one in |- *.",
                        "VernacExtend",
                        "02b3038099efe1280147fdd03d460aa99c6ddd3e"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict, bool_fun_eq in |- *.",
                        "VernacExtend",
                        "c10c896c9b8d859344f42d68594a6fb623cc0f57"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_eq_independent",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_independent in |- *.",
                        "VernacExtend",
                        "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf1 x b).",
                        "VernacExtend",
                        "ed14441c1c04cb9c11263700f5953cdd94ad7edb"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_restrict_preserves_eq.",
                        "VernacExtend",
                        "7fea6f63d0afbb692cb9df3ccbe0db190a4c2d42"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_sym.",
                        "VernacExtend",
                        "16f43a5008c8d829f642c7852f9ea935544b8db0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bf1).",
                        "VernacExtend",
                        "33bf8f2d23b74b4a87f61353c53e3ed50def88e5"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_restrict_true",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if in |- *.",
                        "VernacExtend",
                        "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
                    ]
                },
                {
                    "command": [
                        "unfold augment at 1 in |- *.",
                        "VernacExtend",
                        "1d433c78b96755eca7e111353b73a069bdea35fd"
                    ]
                },
                {
                    "command": [
                        "rewrite (Neqb_correct x).",
                        "VernacExtend",
                        "da8b6d946372164e1780b02ab6fe93f9751eb2ca"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_restrict_false",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if in |- *.",
                        "VernacExtend",
                        "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
                    ]
                },
                {
                    "command": [
                        "unfold augment at 1 in |- *.",
                        "VernacExtend",
                        "1d433c78b96755eca7e111353b73a069bdea35fd"
                    ]
                },
                {
                    "command": [
                        "rewrite (Neqb_correct x).",
                        "VernacExtend",
                        "da8b6d946372164e1780b02ab6fe93f9751eb2ca"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_restrict",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_restrict in |- *.",
                        "VernacExtend",
                        "8f5a662d1228cd59b9d9d647a9421f5c9c13ed3a"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_eq in |- *.",
                        "VernacExtend",
                        "471f86567c2f15e28ea8da234e3f79e1a6f48d8d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold augment in |- *.",
                        "VernacExtend",
                        "2541ca0b2d7a468c91ad53f9af6a38fcb4e83a32"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_if in |- *.",
                        "VernacExtend",
                        "cb8d8d5bf8b355d1ae4a4c698ef377d1bfe7a333"
                    ]
                },
                {
                    "command": [
                        "rewrite (Neqb_comm x y) in H.",
                        "VernacExtend",
                        "2f01019fb0c47f5f533a0d3697310d670054bf8c"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_restrict_true_independent",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_independent in |- *.",
                        "VernacExtend",
                        "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf1 x true).",
                        "VernacExtend",
                        "f930b804ba1d66a51633329dfccba8b41f0c93c4"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict_true.",
                        "VernacExtend",
                        "ea9068a92d255b06b5cf6be73142358289803262"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_restrict_false_independent",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_independent in |- *.",
                        "VernacExtend",
                        "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_restrict bf2 x false).",
                        "VernacExtend",
                        "67676d89e7b824020ab26a05de007b2503f712ba"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict_false.",
                        "VernacExtend",
                        "8bf5d0d26c172aa4bed0dbc92779cd7a719a36a5"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_orthogonal",
            "line_nb": 321,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_forall at 1 in |- *.",
                        "VernacExtend",
                        "2e5391477811ab8e18c820fc46073b17a1a9414d"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_and (bool_fun_if x (bool_fun_restrict bf1 u true) (bool_fun_restrict bf2 u true)) (bool_fun_if x (bool_fun_restrict bf1 u false) (bool_fun_restrict bf2 u false))).",
                        "VernacExtend",
                        "969bf55d3a24d4d17395843e89ff70d01cb7e32f"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_and_preserves_eq.",
                        "VernacExtend",
                        "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict.",
                        "VernacExtend",
                        "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict.",
                        "VernacExtend",
                        "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_forall in |- *.",
                        "VernacExtend",
                        "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_and_orthogonal.",
                        "VernacExtend",
                        "41b562c481e5e90bc08da429f7f4247d2c4141c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_independent_if",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_independent in |- *.",
                        "VernacExtend",
                        "a9c1518f7123ea1f62c19e6eac44b0ba3fdabf3f"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_eq_trans with (bf2 := bool_fun_if y (bool_fun_restrict bf1 x b) (bool_fun_restrict bf2 x b)).",
                        "VernacExtend",
                        "103c49c1d66c7d6371f17d9f02a0b6913c6840e5"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict.",
                        "VernacExtend",
                        "e92e2c5cdae7eeaee3bab00f0cc9cd91c27e6d50"
                    ]
                },
                {
                    "command": [
                        "rewrite (Neqb_comm x y) in H1; assumption.",
                        "VernacExtend",
                        "2d84559f020e16cd8b75893dab08cb79bc6273da"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_preserves_eq.",
                        "VernacExtend",
                        "1c2a4f5b6b88ee3776baaeedd296c8f06bd07398"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_forall_if_egal",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold bool_fun_forall in |- *.",
                        "VernacExtend",
                        "a0d83ad470123c4181b156f3ecd5b21fcdaee104"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_and_preserves_eq.",
                        "VernacExtend",
                        "d225a60f2f17c108cd208cbd9bcc30a027e0d0fc"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict_true_independent.",
                        "VernacExtend",
                        "38d2a071897a648934f6793dea0fac65db1ce00e"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply bool_fun_if_restrict_false_independent.",
                        "VernacExtend",
                        "08e688bfea57ec50b03da5f5d41bea7d5e2cd55c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_eq_1",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if in |- *.",
                        "VernacExtend",
                        "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_if_eq_2",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_eq, bool_fun_if in |- *.",
                        "VernacExtend",
                        "077b397f97ce5f2d8b5e9fdcb979f69c0a6acc10"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb).",
                        "VernacExtend",
                        "5f8f0e0bd001e0d639aa027ce77f5c051e20756a"
                    ]
                },
                {
                    "command": [
                        "elim (vb x).",
                        "VernacExtend",
                        "bdbc6a37fd219b2eda683294f92e97189d99e4ee"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_ext_zero",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_ext, bool_fun_zero in |- *.",
                        "VernacExtend",
                        "49f55d6bcc28ce8146b0cebb10f0143e6389d5e8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_ext_one",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_ext, bool_fun_one in |- *.",
                        "VernacExtend",
                        "cbfe1d3cb2fe64164411cde7f1ceb58c95de79d9"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_fun_ext_if",
            "line_nb": 377,
            "steps": [
                {
                    "command": [
                        "unfold bool_fun_ext, bool_fun_if in |- *.",
                        "VernacExtend",
                        "3015525d6900e13afaf8a5925bc3ba743fdf5fba"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H vb vb' H1).",
                        "VernacExtend",
                        "7fbcde78e744b0e4751414aafeec422503eb9b34"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 vb vb' H1).",
                        "VernacExtend",
                        "7c8219c191cba9d2419580024474931bd3ae6abd"
                    ]
                },
                {
                    "command": [
                        "rewrite (H1 x).",
                        "VernacExtend",
                        "1d0d89b9224ac0489f594eef21088ea177b3b11d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}