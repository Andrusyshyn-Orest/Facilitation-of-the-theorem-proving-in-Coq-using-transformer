{
    "filename": "Diadic.v",
    "coq_project": "ieee754",
    "vernac_cmds": [
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Require Import Zcomplements.",
            "VernacRequire",
            "3cd8f2b027f364e079f07c52e42edee09bd60e8f"
        ],
        [
            "Require Import Zpower.",
            "VernacRequire",
            "44b7927c3167c292b8362f581f351216eb66d0cd"
        ],
        [
            "Require Import Zlogarithm.",
            "VernacRequire",
            "a780a49622ecbd3b77aea52ea06c238bf4a477f9"
        ],
        [
            "Require Import ZArithRing.",
            "VernacRequire",
            "1792ea5bd3f37db98704504fc8fd627a7843b280"
        ],
        [
            "Section definitions.",
            "VernacBeginSection",
            "fdfd379719da878c92b736fc79cf86ad05197e48"
        ],
        [
            "Record diadic : Set := Diadic {Dnum : Z; Dexp : Z}.",
            "VernacInductive",
            "e7df694e0105e8cc7804d1ffadaff3ed45f237a2"
        ],
        [
            "Definition Dshift (n : Z) (x : diadic) := Diadic (Dnum x) (Dexp x + n).",
            "VernacDefinition",
            "30d1f9b69ae50af8cb384e479ae00a4d4e710085"
        ],
        [
            "Definition Dzero (x : Z) := Diadic 0 x.",
            "VernacDefinition",
            "04b8cfcf0f40070d713183edca47d9fca2d7adc6"
        ],
        [
            "Definition is_Dzero (x : diadic) := Dnum x = 0%Z.",
            "VernacDefinition",
            "6fb28ecf021f3b72b12a51248cbfe364378e2a18"
        ],
        [
            "Inductive rounding_mode : Set := | Rounding_sup : rounding_mode | Rounding_inf : rounding_mode | Rounding_nearest : rounding_mode | Rounding_zero : rounding_mode.",
            "VernacInductive",
            "468fa62835da5257dc81df68841170c7e71c5357"
        ],
        [
            "Definition Rounding_mode_opp (m : rounding_mode) := match m with | Rounding_sup => Rounding_inf | Rounding_inf => Rounding_sup | Rounding_nearest => Rounding_nearest | Rounding_zero => Rounding_zero end.",
            "VernacDefinition",
            "19fea4c0acfeba5442f664c365388b4c67563a94"
        ],
        [
            "End definitions.",
            "VernacEndSegment",
            "5fb3137667be6315275ff521d58fdbace0980737"
        ],
        [
            "Section comparisons.",
            "VernacBeginSection",
            "522397f3b04243377c5a6908c6201d46f1d54fb1"
        ],
        [
            "Definition Dcompare (x y : diadic) : Datatypes.comparison := let nx := Dnum x in let ny := Dnum y in let ex := Dexp x in let ey := Dexp y in (two_p (ex - Zmin ex ey) * nx ?= two_p (ey - Zmin ex ey) * ny)%Z.",
            "VernacDefinition",
            "3d9921f3f68f345cb5fd1c5d5056318ea665dfad"
        ],
        [
            "Definition Deq (x y : diadic) := match Dcompare x y with | Datatypes.Eq => True | Datatypes.Lt => False | Datatypes.Gt => False end.",
            "VernacDefinition",
            "aa4f945ac54e940a465e22e8608b5d6cb17bdc61"
        ],
        [
            "Definition Dneq (x y : diadic) := match Dcompare x y with | Datatypes.Eq => False | Datatypes.Lt => True | Datatypes.Gt => True end.",
            "VernacDefinition",
            "6ef3937e297a1a432d330356db2fce22ada605b2"
        ],
        [
            "Definition Dle (x y : diadic) := match Dcompare x y with | Datatypes.Eq => True | Datatypes.Lt => True | Datatypes.Gt => False end.",
            "VernacDefinition",
            "7cac08a667781aba5e376d3608b2ff9923089ac3"
        ],
        [
            "Definition Dlt (x y : diadic) := match Dcompare x y with | Datatypes.Eq => False | Datatypes.Lt => True | Datatypes.Gt => False end.",
            "VernacDefinition",
            "1705d26c9dd705dbd43068158cd144ddc300cbc9"
        ],
        [
            "Definition Dge (x y : diadic) := match Dcompare x y with | Datatypes.Eq => True | Datatypes.Lt => False | Datatypes.Gt => True end.",
            "VernacDefinition",
            "f8f556b0e72c7faf5dd388cadf239b2c0bc5aac5"
        ],
        [
            "Definition Dgt (x y : diadic) := match Dcompare x y with | Datatypes.Eq => False | Datatypes.Lt => False | Datatypes.Gt => True end.",
            "VernacDefinition",
            "8f2b1755ce1c1eff56436bf9826718f510f4fab8"
        ],
        [
            "Definition Deq_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => true | Datatypes.Lt => false | Datatypes.Gt => false end.",
            "VernacDefinition",
            "da125177fdb48f7be849b331baf76669b23337b1"
        ],
        [
            "Definition Dneq_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => false | Datatypes.Lt => true | Datatypes.Gt => true end.",
            "VernacDefinition",
            "3752ddf51ffa0186005acc7964161514c9d9a2c2"
        ],
        [
            "Definition Dle_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => true | Datatypes.Lt => true | Datatypes.Gt => false end.",
            "VernacDefinition",
            "5c796fc78084563d0cbf1f125c6fa7cc1e22a6a5"
        ],
        [
            "Definition Dlt_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => false | Datatypes.Lt => true | Datatypes.Gt => false end.",
            "VernacDefinition",
            "1ba0a066ac138e6fb068d500ba194cb4ea3614e4"
        ],
        [
            "Definition Dge_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => true | Datatypes.Lt => false | Datatypes.Gt => true end.",
            "VernacDefinition",
            "6aef03bddbb52733c48c6649e03ddc949cb55880"
        ],
        [
            "Definition Dgt_bool (x y : diadic) := match Dcompare x y with | Datatypes.Eq => false | Datatypes.Lt => false | Datatypes.Gt => true end.",
            "VernacDefinition",
            "705c71eba10c052119f9a0230aa505277643b1bb"
        ],
        [
            "Lemma Dcompare_shift : forall (x y : diadic) (n : Z), Dcompare (Dshift n x) (Dshift n y) = Dcompare x y.",
            "VernacStartTheoremProof",
            "bd6c05617c8451939440bcbc423463ea9220895d"
        ],
        [
            "unfold Dcompare in |- *; simpl in |- *; intros; rewrite (Zmin.Zmin_plus (Dexp x) (Dexp y) n).",
            "VernacExtend",
            "005b9a9027b7e5bdefd96857e32b513fd0bf452c"
        ],
        [
            "do 2 rewrite BinInt.Zminus_plus_simpl_r.",
            "VernacExtend",
            "8124c62d8685936d8a201d673a1bd6c8e667815e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_Deq : forall x y : diadic, x = y -> Deq x y.",
            "VernacStartTheoremProof",
            "8bd9f207c21ca94bac278f39d0aa49349a18c17b"
        ],
        [
            "intros; rewrite H; unfold Deq in |- *; unfold Dcompare in |- *; apply Zcompare.Zcompare_eq_case; trivial.",
            "VernacExtend",
            "2351326b6638aeaa5579ea0669f4abc3de717dad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dcompare_zero : forall (x : diadic) (n : Z), Dcompare x (Dzero n) = (Dnum x ?= 0)%Z.",
            "VernacStartTheoremProof",
            "09847760cc9a9b73e552e9ff49b99d1022170cf2"
        ],
        [
            "intros (nx, ex) n.",
            "VernacExtend",
            "2277b5c7ec72eebd3229efc9ac770f8926133caa"
        ],
        [
            "unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "ddab086198ecee3a08c9a475db7fa905fdc055da"
        ],
        [
            "symmetry in |- *.",
            "VernacExtend",
            "dc33a39a53e296ef5e59fd831d55212be2a42f22"
        ],
        [
            "replace (two_p (n - Zmin ex n) * 0)%Z with (two_p (ex - Zmin ex n) * 0)%Z.",
            "VernacExtend",
            "392f3377bf45d4fcd6d74147e3bb32fdb5b0924f"
        ],
        [
            "apply Zmult_compare_compat_l.",
            "VernacExtend",
            "94eee7586824692645d1cd12fb2282c09f64ff51"
        ],
        [
            "apply two_p_gt_ZERO.",
            "VernacExtend",
            "9690045ae69e536e22b7db6c37ee985732e7c4b7"
        ],
        [
            "generalize (Zle_min_l ex n); generalize (Zmin ex n); intro; omega.",
            "VernacExtend",
            "9144dd17fd7b1c3071240de545bd75ff72ee6492"
        ],
        [
            "do 2 rewrite Zmult_0_r; reflexivity.",
            "VernacExtend",
            "2715a0c7d943a00173b9e3c9e35b6f7379c626d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Deq_shift : forall (x y : diadic) (n : Z), Deq x y -> Deq (Dshift n x) (Dshift n y).",
            "VernacStartTheoremProof",
            "56d174701d552c16ff0bfed85917f2311897f75f"
        ],
        [
            "unfold Deq in |- *; intros; rewrite (Dcompare_shift x y n); trivial.",
            "VernacExtend",
            "177b86bbcf2168a5ab83f05a1034242d83141d89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Deq_x_shift_x : forall (x : diadic) (n : Z), (0 <= n)%Z -> Deq x (Diadic (Dnum x * two_p n) (Dexp x - n)).",
            "VernacStartTheoremProof",
            "10a595c9027a016dc2cf8ac8efb3829736143170"
        ],
        [
            "intros (nx, ex) n Hn; unfold Deq in |- *; unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "88c9766575a4fa410a5665919fda76fbbdaed550"
        ],
        [
            "cut ((two_p (ex - Zmin ex (ex - n)) * nx)%Z = (two_p (ex - n - Zmin ex (ex - n)) * (nx * two_p n))%Z).",
            "VernacExtend",
            "1e26480bc355a8cb0bea99467c94701ee5b20794"
        ],
        [
            "intro H; rewrite H.",
            "VernacExtend",
            "463bad8d1aaeafe800e98afc79ced7ec083bb8da"
        ],
        [
            "generalize (two_p (ex - n - Zmin ex (ex - n)) * (nx * two_p n))%Z.",
            "VernacExtend",
            "91438dad66db47463a9ad11ffdbc2b1ffbdb66fc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (Zcompare.Zcompare_refl z).",
            "VernacExtend",
            "1202094dd6d8697e4a561d5f9f26b79fbedadaff"
        ],
        [
            "elim (z ?= z)%Z; discriminate || trivial.",
            "VernacExtend",
            "b2b32ee439099039bb4d1b1682fbdcbeb2277cd4"
        ],
        [
            "rewrite (Zmult_comm nx (two_p n)).",
            "VernacExtend",
            "d818c72231a8ecc8d530d8b2b301140655bfd793"
        ],
        [
            "rewrite <- Zmult_assoc_reverse.",
            "VernacExtend",
            "fb3f70f676d38d40458316f868e7b6ab5177d78f"
        ],
        [
            "rewrite <- two_p_is_exp.",
            "VernacExtend",
            "3e5dd28ca80a1938686082ddc0a22c4345d87d29"
        ],
        [
            "ring_simplify (ex - n - Zmin ex (ex - n) + n)%Z (ex - Zmin ex (ex - n))%Z.",
            "VernacExtend",
            "4c9266adb78c5f8215d6d107bf3562bba1fcc4e9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "generalize (Zle_min_l ex (ex - n)) (Zle_min_r ex (ex - n)).",
            "VernacExtend",
            "eab9d0ce3996e1d21c19cd41b4145095fc057c02"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dle_Zle : forall n1 n2 d : Z, (n1 <= n2)%Z -> Dle (Diadic n1 d) (Diadic n2 d).",
            "VernacStartTheoremProof",
            "0be2f6e40b3d6bb7720ab655c7b2bce0c71e6945"
        ],
        [
            "intros; unfold Dle in |- *; unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "10d6d9f7895c0abecae050429d98dc9b6d14edfc"
        ],
        [
            "rewrite (Zmin_n_n d).",
            "VernacExtend",
            "2c039e432f4d942d373d32ec736f84c88e863077"
        ],
        [
            "rewrite <- (Zminus_diag_reverse d).",
            "VernacExtend",
            "0f845be253c416e5fb956b6884935791ef77256e"
        ],
        [
            "unfold two_p in |- *.",
            "VernacExtend",
            "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
        ],
        [
            "rewrite (Zcompare_mult_compat 1 n1 n2).",
            "VernacExtend",
            "f2010b7e985d1b6171844d7c743b67e95df106e8"
        ],
        [
            "apply Zcompare.Zle_compare; assumption.",
            "VernacExtend",
            "d2270053bbd005ccf8baaa62d5efea9ea05eb6ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dlt_Zlt : forall n1 n2 d : Z, (n1 < n2)%Z -> Dlt (Diadic n1 d) (Diadic n2 d).",
            "VernacStartTheoremProof",
            "f0120f13a9cb99f4a5076afbc1ce85e88a42f71a"
        ],
        [
            "intros; unfold Dlt in |- *; unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "6fd8c8dac54e70ac802ee147761eed0c50384d9f"
        ],
        [
            "rewrite (Zmin_n_n d).",
            "VernacExtend",
            "2c039e432f4d942d373d32ec736f84c88e863077"
        ],
        [
            "rewrite <- (Zminus_diag_reverse d).",
            "VernacExtend",
            "0f845be253c416e5fb956b6884935791ef77256e"
        ],
        [
            "unfold two_p in |- *.",
            "VernacExtend",
            "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
        ],
        [
            "rewrite (Zcompare_mult_compat 1 n1 n2).",
            "VernacExtend",
            "f2010b7e985d1b6171844d7c743b67e95df106e8"
        ],
        [
            "apply Zcompare.Zlt_compare; assumption.",
            "VernacExtend",
            "84cc0ec248f0171ff64d1ec6d0cf88c7a930818d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dge_Zge : forall n1 n2 d : Z, (n1 >= n2)%Z -> Dge (Diadic n1 d) (Diadic n2 d).",
            "VernacStartTheoremProof",
            "2e0512b5978c78557f409f8c17ed30a404283624"
        ],
        [
            "intros; unfold Dge in |- *; unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "de16d699b3fd2898865cad9324d4e363972f828b"
        ],
        [
            "rewrite (Zmin_n_n d).",
            "VernacExtend",
            "2c039e432f4d942d373d32ec736f84c88e863077"
        ],
        [
            "rewrite <- (Zminus_diag_reverse d).",
            "VernacExtend",
            "0f845be253c416e5fb956b6884935791ef77256e"
        ],
        [
            "unfold two_p in |- *.",
            "VernacExtend",
            "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
        ],
        [
            "rewrite (Zcompare_mult_compat 1 n1 n2).",
            "VernacExtend",
            "f2010b7e985d1b6171844d7c743b67e95df106e8"
        ],
        [
            "apply Zcompare.Zge_compare; assumption.",
            "VernacExtend",
            "74ac92e548db5057fe6aff120b941b411e2af1c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dgt_Zgt : forall n1 n2 d : Z, (n1 > n2)%Z -> Dgt (Diadic n1 d) (Diadic n2 d).",
            "VernacStartTheoremProof",
            "09a4aee73eed6fa30adaa998ce332a53a3c96255"
        ],
        [
            "intros; unfold Dgt in |- *; unfold Dcompare in |- *; simpl in |- *.",
            "VernacExtend",
            "91eaf7bc142ee29aa0d05b762a24f0539cad5a65"
        ],
        [
            "rewrite (Zmin_n_n d).",
            "VernacExtend",
            "2c039e432f4d942d373d32ec736f84c88e863077"
        ],
        [
            "rewrite <- (Zminus_diag_reverse d).",
            "VernacExtend",
            "0f845be253c416e5fb956b6884935791ef77256e"
        ],
        [
            "unfold two_p in |- *.",
            "VernacExtend",
            "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
        ],
        [
            "rewrite (Zcompare_mult_compat 1 n1 n2).",
            "VernacExtend",
            "f2010b7e985d1b6171844d7c743b67e95df106e8"
        ],
        [
            "apply Zcompare.Zgt_compare; assumption.",
            "VernacExtend",
            "f937b9f3fa32db37bb854328f312593cf7f59153"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dle_refl : forall x y : diadic, Deq x y -> Dle x y.",
            "VernacStartTheoremProof",
            "37a036b91bccf2067ec8a900a021337651aad661"
        ],
        [
            "unfold Deq in |- *; unfold Dle in |- *; intros x y; elim (Dcompare x y); trivial.",
            "VernacExtend",
            "fb59b2b5e0dd9fad8a23261a50badb3cb93d182c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End comparisons.",
            "VernacEndSegment",
            "4ecaf785ca964de0d53e99f3e7e19269cabec2c3"
        ],
        [
            "Section operations.",
            "VernacBeginSection",
            "6e4aa1410af2b013d3c994423569827266b14f3c"
        ],
        [
            "Definition Dsucc (x : diadic) := Diadic (Dnum x + 1) (Dexp x).",
            "VernacDefinition",
            "0141ad75e1e1ab46280870400764840c1b446f37"
        ],
        [
            "Definition Dpred (x : diadic) := Diadic (Dnum x - 1) (Dexp x).",
            "VernacDefinition",
            "710ab4f55c3231d155e0969761e41cc00aa2ac6e"
        ],
        [
            "Definition Dadd (x y : diadic) := let nx := Dnum x in let ny := Dnum y in let ex := Dexp x in let ey := Dexp y in Diadic (two_p (ex - Zmin ex ey) * nx + two_p (ey - Zmin ex ey) * ny) (Zmin ex ey).",
            "VernacDefinition",
            "aebf52bac4231a0fbd603d00ad2afa9cca953941"
        ],
        [
            "Definition Dopp (x : diadic) := Diadic (- Dnum x) (Dexp x).",
            "VernacDefinition",
            "8bd15086383ee22e008fefb34da2ecc3f24dedc0"
        ],
        [
            "Definition Dabs (x : diadic) := Diadic (Zabs (Dnum x)) (Dexp x).",
            "VernacDefinition",
            "2b183f61efd33d2701f9124f72ac31cf4a6918db"
        ],
        [
            "Definition Dminus (x y : diadic) := Dadd x (Dopp y).",
            "VernacDefinition",
            "963b250d75418b498d147e8aee5fc232a8f537e9"
        ],
        [
            "Definition Dmult (x y : diadic) := Diadic (Dnum x * Dnum y) (Dexp x + Dexp y).",
            "VernacDefinition",
            "85b9219decab6c6a9d7e266f2b662c955679f000"
        ],
        [
            "Definition Dproj (m : rounding_mode) (x : diadic) (P : diadic -> Prop) (y : diadic) := P y /\\ match m with | Rounding_sup => forall z : diadic, P z -> Dle x z -> Dle y z | Rounding_inf => forall z : diadic, P z -> Dle z x -> Dle z y | Rounding_nearest => forall z : diadic, P z -> Dle (Dabs (Dminus x y)) (Dabs (Dminus x z)) | Rounding_zero => forall z : diadic, P z -> IF Dle (Dzero 0) x then Dle z x -> Dle z y else Dle z x -> Dle z y end.",
            "VernacDefinition",
            "58dd184786fb0dd03398f7dbf5d10299fb544e81"
        ],
        [
            "Lemma ZROUND_inf_spec : forall (p : positive) (x : Z), {y : Z | (y * two_power_pos p <= x < Zsucc y * two_power_pos p)%Z}.",
            "VernacStartTheoremProof",
            "b4b8c7ac57ef9924a9f7785c458788159a575a02"
        ],
        [
            "intros; elim (Zdiv_rest_correct x p); intros q r Hx Hr1 Hr2; exists q; rewrite (Zplus_0_r_reverse (q * two_power_pos p)); rewrite Hx; split; [ apply Zplus_le_compat_l; assumption | unfold Zsucc in |- *; rewrite Zmult_plus_distr_l; apply Zplus_lt_compat_l; rewrite Zmult_1_l; assumption ].",
            "VernacExtend",
            "806433dc43d06e0bf713ce09b78fad35d7b63efb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ZROUND_inf (p : positive) (x : Z) := let (x', p) := ZROUND_inf_spec p x in x'.",
            "VernacDefinition",
            "a50962fe1f7858a2bc9d0c9ca3ff09b8b699f393"
        ],
        [
            "Lemma ZROUND_sup_spec : forall (p : positive) (x : Z), {y : Z | (Zpred y * two_power_pos p < x <= y * two_power_pos p)%Z}.",
            "VernacStartTheoremProof",
            "734939599bdcc3fb25591bdfc276205e2632b792"
        ],
        [
            "intros; elim (Zdiv_rest_correct x p); intros q r; elim r; [ intros Hx Hr; exists q; rewrite Hx; rewrite <- Zplus_0_r_reverse; split; [ apply Zmult_gt_0_lt_compat_r; [ compute in |- *; reflexivity | apply Zlt_pred ] | apply Zle_refl ] | intros p0 Hx Hr1 Hr2; exists (Zsucc q); rewrite Hx; split; [ replace (Zpred (Zsucc q) * two_power_pos p)%Z with (q * two_power_pos p + 0)%Z; [ apply Zplus_lt_compat_l; compute in |- *; reflexivity | rewrite <- Zpred_succ; rewrite <- Zplus_0_r_reverse; reflexivity ] | unfold Zsucc in |- *; rewrite Zmult_plus_distr_l; apply Zplus_le_compat_l; rewrite Zmult_1_l; apply Zlt_le_weak; assumption ] | intros p0 Hx Hr1 Hr2; absurd (Datatypes.Gt = Datatypes.Gt); [ exact Hr1 | reflexivity ] ].",
            "VernacExtend",
            "4f32450a98e804a6064cf13aa947e13000d2ebe6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ZROUND_sup (p : positive) (x : Z) := let (x', p) := ZROUND_sup_spec p x in x'.",
            "VernacDefinition",
            "196e273f789e84b6d956883cde1bca1dcb68c8b7"
        ],
        [
            "Lemma ZROUND_correct : forall (m : rounding_mode) (p : positive) (x : Z), {y : Z | match m with | Rounding_inf => (y * two_power_pos p <= x < Zsucc y * two_power_pos p)%Z | Rounding_sup => (Zpred y * two_power_pos p < x <= y * two_power_pos p)%Z | Rounding_nearest => match (x - ZROUND_inf p x ?= ZROUND_sup p x - x)%Z with | Datatypes.Eq => if Zeven.Zeven_bool (ZROUND_inf p x) then (y * two_power_pos p <= x < Zsucc y * two_power_pos p)%Z else (Zpred y * two_power_pos p < x <= y * two_power_pos p)%Z | Datatypes.Gt => (Zpred y * two_power_pos p < x <= y * two_power_pos p)%Z | Datatypes.Lt => (y * two_power_pos p <= x < Zsucc y * two_power_pos p)%Z end | Rounding_zero => match x with | Zpos _ => (y * two_power_pos p <= x < Zsucc y * two_power_pos p)%Z | Z0 => y = 0%Z | Zneg _ => (Zpred y * two_power_pos p < x <= y * two_power_pos p)%Z end end}.",
            "VernacStartTheoremProof",
            "223e7220fb16028268776c5d9078d7f2c2c86240"
        ],
        [
            "simple destruct m; [ exact ZROUND_sup_spec | exact ZROUND_inf_spec | intros p x; elim (x - ZROUND_inf p x ?= ZROUND_sup p x - x)%Z; [ elim (Zeven.Zeven_bool (ZROUND_inf p x)); [ apply ZROUND_inf_spec | apply ZROUND_sup_spec ] | apply ZROUND_inf_spec | apply ZROUND_sup_spec ] | simple induction x; [ exists 0%Z; reflexivity | intro; apply ZROUND_inf_spec | intro; apply ZROUND_sup_spec ] ].",
            "VernacExtend",
            "35ab57b006450c1232d86009381b665d71aa8ed0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ZROUND (m : rounding_mode) (p : positive) (x : Z) := let (x', p) := ZROUND_correct m p x in x'.",
            "VernacDefinition",
            "5547ec5916758f6205d12a7930c41bde3192fa7f"
        ],
        [
            "Definition POS_ROUND (m : rounding_mode) (p n : positive) := BinInt.Zabs_N (ZROUND m p (Zpos n)).",
            "VernacDefinition",
            "369df093da9204dd3321025b2e2c0bd032631782"
        ],
        [
            "Definition NEG_ROUND (m : rounding_mode) (p n : positive) := BinInt.Zabs_N (- ZROUND m p (Zneg n)).",
            "VernacDefinition",
            "b96dfa0fdcfabef289f35be733db1a31ccd3c9c5"
        ],
        [
            "Definition Ddouble (d : diadic) := Dshift 1 d.",
            "VernacDefinition",
            "c47cbc502e7ff81bf7aea6547f287d9c6067c70a"
        ],
        [
            "Axiom ROUND_spec : forall (m : rounding_mode) (p : Z) (x : diadic), {y : diadic | N_digits (Dexp y) = p /\\ match m with | Rounding_inf => Dle y x /\\ Dlt x (Dsucc y) | Rounding_sup => Dlt (Dpred y) x /\\ Dle x y | Rounding_nearest => Dle (Dpred (Ddouble y)) (Ddouble x) /\\ Dle (Ddouble x) (Dsucc (Ddouble y)) | Rounding_zero => IF Dlt (Dzero 0) x then Dle y x /\\ Dlt x (Dsucc y) else Dlt (Dpred y) x /\\ Dle x y end}.",
            "VernacAssumption",
            "4a93d21fc5b645b6159351205ba9589ac3429b34"
        ],
        [
            "Definition ROUND (m : rounding_mode) (p : Z) (d : diadic) := let (x, _) := ROUND_spec m p d in x.",
            "VernacDefinition",
            "22739fb06600000818b149c1937f6d6c6827873f"
        ],
        [
            "Definition ANTIROUND (m : rounding_mode) (p : Z) (x : diadic) := let nx := Dnum x in let ex := Dexp x in match (p - ex)%Z with | Zpos q => ZROUND m q nx | Zneg q => (nx * two_power_pos q)%Z | Z0 => nx end.",
            "VernacDefinition",
            "2fbb23cfcf9102edbec1d7cc6bd7d5f9c6a35ade"
        ],
        [
            "Parameter Ddiv : rounding_mode -> Z -> diadic -> diadic -> diadic.",
            "VernacAssumption",
            "fac3d7997c398ae79f2ec8c643f4adc6b8e3ed01"
        ],
        [
            "Parameter Dsqrt : rounding_mode -> Z -> positive -> Z -> diadic.",
            "VernacAssumption",
            "97521c6d17bc2f6720b19c2c45e93c2ab94dab4f"
        ],
        [
            "End operations.",
            "VernacEndSegment",
            "4efab57c716df2f81cad56eabc95088e320f660c"
        ]
    ],
    "proofs": [
        {
            "name": "Dcompare_shift",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "unfold Dcompare in |- *; simpl in |- *; intros; rewrite (Zmin.Zmin_plus (Dexp x) (Dexp y) n).",
                        "VernacExtend",
                        "005b9a9027b7e5bdefd96857e32b513fd0bf452c"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite BinInt.Zminus_plus_simpl_r.",
                        "VernacExtend",
                        "8124c62d8685936d8a201d673a1bd6c8e667815e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_Deq",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros; rewrite H; unfold Deq in |- *; unfold Dcompare in |- *; apply Zcompare.Zcompare_eq_case; trivial.",
                        "VernacExtend",
                        "2351326b6638aeaa5579ea0669f4abc3de717dad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dcompare_zero",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros (nx, ex) n.",
                        "VernacExtend",
                        "2277b5c7ec72eebd3229efc9ac770f8926133caa"
                    ]
                },
                {
                    "command": [
                        "unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ddab086198ecee3a08c9a475db7fa905fdc055da"
                    ]
                },
                {
                    "command": [
                        "symmetry in |- *.",
                        "VernacExtend",
                        "dc33a39a53e296ef5e59fd831d55212be2a42f22"
                    ]
                },
                {
                    "command": [
                        "replace (two_p (n - Zmin ex n) * 0)%Z with (two_p (ex - Zmin ex n) * 0)%Z.",
                        "VernacExtend",
                        "392f3377bf45d4fcd6d74147e3bb32fdb5b0924f"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_compare_compat_l.",
                        "VernacExtend",
                        "94eee7586824692645d1cd12fb2282c09f64ff51"
                    ]
                },
                {
                    "command": [
                        "apply two_p_gt_ZERO.",
                        "VernacExtend",
                        "9690045ae69e536e22b7db6c37ee985732e7c4b7"
                    ]
                },
                {
                    "command": [
                        "generalize (Zle_min_l ex n); generalize (Zmin ex n); intro; omega.",
                        "VernacExtend",
                        "9144dd17fd7b1c3071240de545bd75ff72ee6492"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Zmult_0_r; reflexivity.",
                        "VernacExtend",
                        "2715a0c7d943a00173b9e3c9e35b6f7379c626d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Deq_shift",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "unfold Deq in |- *; intros; rewrite (Dcompare_shift x y n); trivial.",
                        "VernacExtend",
                        "177b86bbcf2168a5ab83f05a1034242d83141d89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Deq_x_shift_x",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros (nx, ex) n Hn; unfold Deq in |- *; unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "88c9766575a4fa410a5665919fda76fbbdaed550"
                    ]
                },
                {
                    "command": [
                        "cut ((two_p (ex - Zmin ex (ex - n)) * nx)%Z = (two_p (ex - n - Zmin ex (ex - n)) * (nx * two_p n))%Z).",
                        "VernacExtend",
                        "1e26480bc355a8cb0bea99467c94701ee5b20794"
                    ]
                },
                {
                    "command": [
                        "intro H; rewrite H.",
                        "VernacExtend",
                        "463bad8d1aaeafe800e98afc79ced7ec083bb8da"
                    ]
                },
                {
                    "command": [
                        "generalize (two_p (ex - n - Zmin ex (ex - n)) * (nx * two_p n))%Z.",
                        "VernacExtend",
                        "91438dad66db47463a9ad11ffdbc2b1ffbdb66fc"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (Zcompare.Zcompare_refl z).",
                        "VernacExtend",
                        "1202094dd6d8697e4a561d5f9f26b79fbedadaff"
                    ]
                },
                {
                    "command": [
                        "elim (z ?= z)%Z; discriminate || trivial.",
                        "VernacExtend",
                        "b2b32ee439099039bb4d1b1682fbdcbeb2277cd4"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmult_comm nx (two_p n)).",
                        "VernacExtend",
                        "d818c72231a8ecc8d530d8b2b301140655bfd793"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Zmult_assoc_reverse.",
                        "VernacExtend",
                        "fb3f70f676d38d40458316f868e7b6ab5177d78f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- two_p_is_exp.",
                        "VernacExtend",
                        "3e5dd28ca80a1938686082ddc0a22c4345d87d29"
                    ]
                },
                {
                    "command": [
                        "ring_simplify (ex - n - Zmin ex (ex - n) + n)%Z (ex - Zmin ex (ex - n))%Z.",
                        "VernacExtend",
                        "4c9266adb78c5f8215d6d107bf3562bba1fcc4e9"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "generalize (Zle_min_l ex (ex - n)) (Zle_min_r ex (ex - n)).",
                        "VernacExtend",
                        "eab9d0ce3996e1d21c19cd41b4145095fc057c02"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dle_Zle",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros; unfold Dle in |- *; unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "10d6d9f7895c0abecae050429d98dc9b6d14edfc"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmin_n_n d).",
                        "VernacExtend",
                        "2c039e432f4d942d373d32ec736f84c88e863077"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zminus_diag_reverse d).",
                        "VernacExtend",
                        "0f845be253c416e5fb956b6884935791ef77256e"
                    ]
                },
                {
                    "command": [
                        "unfold two_p in |- *.",
                        "VernacExtend",
                        "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zcompare_mult_compat 1 n1 n2).",
                        "VernacExtend",
                        "f2010b7e985d1b6171844d7c743b67e95df106e8"
                    ]
                },
                {
                    "command": [
                        "apply Zcompare.Zle_compare; assumption.",
                        "VernacExtend",
                        "d2270053bbd005ccf8baaa62d5efea9ea05eb6ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dlt_Zlt",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "intros; unfold Dlt in |- *; unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "6fd8c8dac54e70ac802ee147761eed0c50384d9f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmin_n_n d).",
                        "VernacExtend",
                        "2c039e432f4d942d373d32ec736f84c88e863077"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zminus_diag_reverse d).",
                        "VernacExtend",
                        "0f845be253c416e5fb956b6884935791ef77256e"
                    ]
                },
                {
                    "command": [
                        "unfold two_p in |- *.",
                        "VernacExtend",
                        "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zcompare_mult_compat 1 n1 n2).",
                        "VernacExtend",
                        "f2010b7e985d1b6171844d7c743b67e95df106e8"
                    ]
                },
                {
                    "command": [
                        "apply Zcompare.Zlt_compare; assumption.",
                        "VernacExtend",
                        "84cc0ec248f0171ff64d1ec6d0cf88c7a930818d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dge_Zge",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "intros; unfold Dge in |- *; unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "de16d699b3fd2898865cad9324d4e363972f828b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmin_n_n d).",
                        "VernacExtend",
                        "2c039e432f4d942d373d32ec736f84c88e863077"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zminus_diag_reverse d).",
                        "VernacExtend",
                        "0f845be253c416e5fb956b6884935791ef77256e"
                    ]
                },
                {
                    "command": [
                        "unfold two_p in |- *.",
                        "VernacExtend",
                        "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zcompare_mult_compat 1 n1 n2).",
                        "VernacExtend",
                        "f2010b7e985d1b6171844d7c743b67e95df106e8"
                    ]
                },
                {
                    "command": [
                        "apply Zcompare.Zge_compare; assumption.",
                        "VernacExtend",
                        "74ac92e548db5057fe6aff120b941b411e2af1c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dgt_Zgt",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros; unfold Dgt in |- *; unfold Dcompare in |- *; simpl in |- *.",
                        "VernacExtend",
                        "91eaf7bc142ee29aa0d05b762a24f0539cad5a65"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zmin_n_n d).",
                        "VernacExtend",
                        "2c039e432f4d942d373d32ec736f84c88e863077"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Zminus_diag_reverse d).",
                        "VernacExtend",
                        "0f845be253c416e5fb956b6884935791ef77256e"
                    ]
                },
                {
                    "command": [
                        "unfold two_p in |- *.",
                        "VernacExtend",
                        "e4dfd2859e28701eb58966e5b850aeae2aa3ce57"
                    ]
                },
                {
                    "command": [
                        "rewrite (Zcompare_mult_compat 1 n1 n2).",
                        "VernacExtend",
                        "f2010b7e985d1b6171844d7c743b67e95df106e8"
                    ]
                },
                {
                    "command": [
                        "apply Zcompare.Zgt_compare; assumption.",
                        "VernacExtend",
                        "f937b9f3fa32db37bb854328f312593cf7f59153"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dle_refl",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "unfold Deq in |- *; unfold Dle in |- *; intros x y; elim (Dcompare x y); trivial.",
                        "VernacExtend",
                        "fb59b2b5e0dd9fad8a23261a50badb3cb93d182c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZROUND_inf_spec",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zdiv_rest_correct x p); intros q r Hx Hr1 Hr2; exists q; rewrite (Zplus_0_r_reverse (q * two_power_pos p)); rewrite Hx; split; [ apply Zplus_le_compat_l; assumption | unfold Zsucc in |- *; rewrite Zmult_plus_distr_l; apply Zplus_lt_compat_l; rewrite Zmult_1_l; assumption ].",
                        "VernacExtend",
                        "806433dc43d06e0bf713ce09b78fad35d7b63efb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZROUND_sup_spec",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zdiv_rest_correct x p); intros q r; elim r; [ intros Hx Hr; exists q; rewrite Hx; rewrite <- Zplus_0_r_reverse; split; [ apply Zmult_gt_0_lt_compat_r; [ compute in |- *; reflexivity | apply Zlt_pred ] | apply Zle_refl ] | intros p0 Hx Hr1 Hr2; exists (Zsucc q); rewrite Hx; split; [ replace (Zpred (Zsucc q) * two_power_pos p)%Z with (q * two_power_pos p + 0)%Z; [ apply Zplus_lt_compat_l; compute in |- *; reflexivity | rewrite <- Zpred_succ; rewrite <- Zplus_0_r_reverse; reflexivity ] | unfold Zsucc in |- *; rewrite Zmult_plus_distr_l; apply Zplus_le_compat_l; rewrite Zmult_1_l; apply Zlt_le_weak; assumption ] | intros p0 Hx Hr1 Hr2; absurd (Datatypes.Gt = Datatypes.Gt); [ exact Hr1 | reflexivity ] ].",
                        "VernacExtend",
                        "4f32450a98e804a6064cf13aa947e13000d2ebe6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZROUND_correct",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "simple destruct m; [ exact ZROUND_sup_spec | exact ZROUND_inf_spec | intros p x; elim (x - ZROUND_inf p x ?= ZROUND_sup p x - x)%Z; [ elim (Zeven.Zeven_bool (ZROUND_inf p x)); [ apply ZROUND_inf_spec | apply ZROUND_sup_spec ] | apply ZROUND_inf_spec | apply ZROUND_sup_spec ] | simple induction x; [ exists 0%Z; reflexivity | intro; apply ZROUND_inf_spec | intro; apply ZROUND_sup_spec ] ].",
                        "VernacExtend",
                        "35ab57b006450c1232d86009381b665d71aa8ed0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}