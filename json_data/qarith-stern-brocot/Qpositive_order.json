{
    "filename": "Qpositive_order.v",
    "coq_project": "qarith-stern-brocot",
    "vernac_cmds": [
        [
            "Require Export Qpositive_le.",
            "VernacRequire",
            "ddd63b939a03134e46b1868d2a4c079d02a260a1"
        ],
        [
            "Require Export Qpositive_plus_mult.",
            "VernacRequire",
            "f52a6264fb87fe4c56a18b0e9fa4389e62db563b"
        ],
        [
            "Ltac make_fraction w p q Heq := elim (interp_non_zero w); intros p (q, Heq).",
            "VernacExtend",
            "da5fb0d5e92f73a7ecd35931b602f3563f6c608b"
        ],
        [
            "Ltac expand a b c d p q Heq Heq1 Heq2 := elim (construct_correct2' c a b); [ intros d; elim (interp_non_zero (Qpositive_c a b c)); intros p (q, Heq); rewrite Heq; unfold fst, snd in |- *; intros (Heq1, Heq2) | try (simpl in |- *; auto with arith; fail) | try (simpl in |- *; auto with arith; fail) | auto ].",
            "VernacExtend",
            "dbb056b9d1c1e243a40508b41931ff5fbd9a420a"
        ],
        [
            "Theorem Qpositive_le_add : forall w w' w'' : Qpositive, Qpositive_le w w' -> Qpositive_le (Qpositive_plus w w'') (Qpositive_plus w' w'').",
            "VernacStartTheoremProof",
            "50a290315dbe725a2527197233e96cda3985360b"
        ],
        [
            "intros w w' w''; make_fraction w ipattern:(p) ipattern:(q) ipattern:(Heq); make_fraction w' ipattern:(p') ipattern:(q') ipattern:(Heq'); make_fraction w'' ipattern:(p'') ipattern:(q'') ipattern:(Heq'').",
            "VernacExtend",
            "6cbc244478fba433c9b7a97236ef88dd124977c4"
        ],
        [
            "intros H; apply Qpositive_le'_to_Qpositive_le; generalize (Qpositive_le_to_Qpositive_le' _ _ H); clear H.",
            "VernacExtend",
            "d8abf1e6383f7ef281bfe8d839cde839c35e4229"
        ],
        [
            "unfold Qpositive_le' in |- *; simpl in |- *.",
            "VernacExtend",
            "2b6a2928d782c5d566b5fdfa6da8868dc1688e8b"
        ],
        [
            "unfold Qpositive_le', Qpositive_plus in |- *; simpl in |- *; rewrite Heq; rewrite Heq'; rewrite Heq''.",
            "VernacExtend",
            "5b12555ddc1551b62140b5cb5209b42465ee1193"
        ],
        [
            "expand (S p * S q'' + S p'' * S q) (S q * S q'') (S p * S q'' + S p'' * S q + S q * S q'') ipattern:(d) ipattern:(p3) ipattern:(q3) ipattern:(Heq3) ipattern:(Heq1) ipattern:(Heq2).",
            "VernacExtend",
            "b0593786d171ea9e3dbb60b2ec833e3e70d4bef6"
        ],
        [
            "expand (S p' * S q'' + S p'' * S q') (S q' * S q'') (S p' * S q'' + S p'' * S q' + S q' * S q'') ipattern:(d') ipattern:(p4) ipattern:(q4) ipattern:(Heq4) ipattern:(Heq5) ipattern:(Heq6).",
            "VernacExtend",
            "76e7e4590520846f5d14e2011dcd217a05741aac"
        ],
        [
            "intros Hle; apply mult_S_le_reg_l with d; rewrite (mult_comm (S p3)); repeat rewrite (mult_comm (S d)); repeat rewrite <- mult_assoc.",
            "VernacExtend",
            "72b5ca33b3a26fea71ba1597ca57e09f6f332578"
        ],
        [
            "rewrite <- Heq1; rewrite <- Heq2.",
            "VernacExtend",
            "e936a5d2e98ffa8da88b653f1a12370fab2526d0"
        ],
        [
            "apply mult_S_le_reg_l with d'; repeat rewrite mult_assoc; repeat rewrite (mult_comm (S d')).",
            "VernacExtend",
            "0df36ff36c11abec7bf486a9b8714f3e48a90599"
        ],
        [
            "rewrite <- Heq5; rewrite <- Heq6.",
            "VernacExtend",
            "ace3598d43235177cf046e67db9ae17f6007d157"
        ],
        [
            "rewrite mult_plus_distr_l; repeat rewrite mult_plus_distr_r.",
            "VernacExtend",
            "55ce9d9c0b9546df8f3b8e653d42b3e84af5f65a"
        ],
        [
            "match goal with | |- (_ + ?X1 <= _ + ?X2) => replace X1 with X2; [ try apply plus_le_compat_r | ring ] end.",
            "VernacExtend",
            "ad536f64084e896053f86880a8c2ab83a17113f4"
        ],
        [
            "repeat rewrite <- (mult_comm (S q'')); repeat rewrite <- mult_assoc.",
            "VernacExtend",
            "52a032dae03f8cacd0dff13af580f8c546986595"
        ],
        [
            "apply (fun m n p : nat => mult_le_compat_l p n m).",
            "VernacExtend",
            "9b93a44abd170d009312a936714084d575370e2e"
        ],
        [
            "rewrite mult_assoc; rewrite <- (mult_comm (S q'')); rewrite <- mult_assoc; apply (fun m n p : nat => mult_le_compat_l p n m).",
            "VernacExtend",
            "5b8cf198b16f2c4b43d29701a1702bc63789e7cb"
        ],
        [
            "rewrite (mult_comm (S q')); exact Hle.",
            "VernacExtend",
            "7b1cc8d8930e91699291fcb6996b5c096b62a5bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Qpositive_le_mult : forall w w' w'' : Qpositive, Qpositive_le w w' -> Qpositive_le (Qpositive_mult w w'') (Qpositive_mult w' w'').",
            "VernacStartTheoremProof",
            "b1bbb9f9ed58cd3c188b70658ad5b997645b0fce"
        ],
        [
            "intros w w' w''; make_fraction w ipattern:(p) ipattern:(q) ipattern:(Heq); make_fraction w' ipattern:(p') ipattern:(q') ipattern:(Heq'); make_fraction w'' ipattern:(p'') ipattern:(q'') ipattern:(Heq'').",
            "VernacExtend",
            "6cbc244478fba433c9b7a97236ef88dd124977c4"
        ],
        [
            "intros H; apply Qpositive_le'_to_Qpositive_le; generalize (Qpositive_le_to_Qpositive_le' _ _ H); clear H.",
            "VernacExtend",
            "d8abf1e6383f7ef281bfe8d839cde839c35e4229"
        ],
        [
            "unfold Qpositive_le', Qpositive_mult in |- *; simpl in |- *; rewrite Heq; rewrite Heq'; rewrite Heq''.",
            "VernacExtend",
            "8988c5e27134a33b2671b861ba356c141c3dff1e"
        ],
        [
            "expand (S p * S p'') (S q * S q'') (S p * S p'' + S q * S q'') ipattern:(d) ipattern:(p3) ipattern:(q3) ipattern:(Heq3) ipattern:(Heq1) ipattern:(Heq2).",
            "VernacExtend",
            "7597f964a7234379a3f3f3f83df1aa3ade626680"
        ],
        [
            "expand (S p' * S p'') (S q' * S q'') (S p' * S p'' + S q' * S q'') ipattern:(d') ipattern:(p4) ipattern:(q4) ipattern:(Heq4) ipattern:(Heq5) ipattern:(Heq6).",
            "VernacExtend",
            "d4dbc07e8e8038db46d6a32f3524e477a10a41b2"
        ],
        [
            "intros Hle; apply mult_S_le_reg_l with d; rewrite (mult_comm (S p3)); repeat rewrite (mult_comm (S d)); repeat rewrite <- mult_assoc.",
            "VernacExtend",
            "72b5ca33b3a26fea71ba1597ca57e09f6f332578"
        ],
        [
            "rewrite <- Heq1; rewrite <- Heq2.",
            "VernacExtend",
            "e936a5d2e98ffa8da88b653f1a12370fab2526d0"
        ],
        [
            "apply mult_S_le_reg_l with d'; repeat rewrite mult_assoc; repeat rewrite (mult_comm (S d')); rewrite <- Heq5; rewrite <- Heq6.",
            "VernacExtend",
            "f7a2011c08a475e082b4e1febaebaeeedc1ce928"
        ],
        [
            "replace (S q' * S q'' * S p * S p'') with (S q'' * S p'' * (S p * S q')).",
            "VernacExtend",
            "7a7d148aa7ad12dbeee2346014ca5cb34d3884ea"
        ],
        [
            "replace (S p' * S p'' * S q * S q'') with (S q'' * S p'' * (S p' * S q)).",
            "VernacExtend",
            "380551612974565b157c08dd8eda8499a5cc39f4"
        ],
        [
            "apply (fun m n p : nat => mult_le_compat_l p n m); exact Hle.",
            "VernacExtend",
            "dd999150968cf1a9b45c9f9aa6ef78d3526f4529"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Qpositive_plus_le : forall w w' : Qpositive, Qpositive_le w (Qpositive_plus w w').",
            "VernacStartTheoremProof",
            "ebf5ae4a3c467d5cc8db9aef5ee39838bbd753a8"
        ],
        [
            "intros w w'; apply Qpositive_le'_to_Qpositive_le.",
            "VernacExtend",
            "8cdab9f524593db65afe0f1106e51df0b14a7b33"
        ],
        [
            "unfold Qpositive_le' in |- *.",
            "VernacExtend",
            "75c58350b705dc22c3b31f02c15c3d5f28820c39"
        ],
        [
            "unfold Qpositive_plus in |- *.",
            "VernacExtend",
            "baca3c0b6cace94221022a23bdea7cafdd06399e"
        ],
        [
            "elim (interp_non_zero w); intros p (q, Heq); elim (interp_non_zero w'); intros p' (q', Heq').",
            "VernacExtend",
            "8768df80139c82cb2c11fa50b91257f1005a35bc"
        ],
        [
            "rewrite Heq; rewrite Heq'.",
            "VernacExtend",
            "818baca3996621605a5202ee2fdb9f6c6147db89"
        ],
        [
            "expand (S p * S q' + S p' * S q) (S q * S q') (S p * S q' + S p' * S q + S q * S q') ipattern:(d) ipattern:(p'') ipattern:(q'') ipattern:(Heq2) ipattern:(Heq3) ipattern:(Heq4).",
            "VernacExtend",
            "0c73691f42f81c4143d30755b9dcadbcfd4918f6"
        ],
        [
            "apply mult_S_le_reg_l with d.",
            "VernacExtend",
            "6bd588d3baa47765832f67956542390e14a4f218"
        ],
        [
            "rewrite (mult_assoc (S d) (S p'')); repeat rewrite (mult_comm (S d)); rewrite <- (mult_assoc (S p)); rewrite <- Heq3; rewrite <- Heq4.",
            "VernacExtend",
            "f09e8cc594587d94951f9afd91fe385bc476e97c"
        ],
        [
            "rewrite mult_plus_distr_r.",
            "VernacExtend",
            "c98266c52d81f9d2eb96b49e4fc06afcb0572340"
        ],
        [
            "replace (S p * S q' * S q) with (S p * (S q * S q')).",
            "VernacExtend",
            "83c1153ec3e804b5264718bac229d90df75756fd"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Qpositive_le_add",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros w w' w''; make_fraction w ipattern:(p) ipattern:(q) ipattern:(Heq); make_fraction w' ipattern:(p') ipattern:(q') ipattern:(Heq'); make_fraction w'' ipattern:(p'') ipattern:(q'') ipattern:(Heq'').",
                        "VernacExtend",
                        "6cbc244478fba433c9b7a97236ef88dd124977c4"
                    ]
                },
                {
                    "command": [
                        "intros H; apply Qpositive_le'_to_Qpositive_le; generalize (Qpositive_le_to_Qpositive_le' _ _ H); clear H.",
                        "VernacExtend",
                        "d8abf1e6383f7ef281bfe8d839cde839c35e4229"
                    ]
                },
                {
                    "command": [
                        "unfold Qpositive_le' in |- *; simpl in |- *.",
                        "VernacExtend",
                        "2b6a2928d782c5d566b5fdfa6da8868dc1688e8b"
                    ]
                },
                {
                    "command": [
                        "unfold Qpositive_le', Qpositive_plus in |- *; simpl in |- *; rewrite Heq; rewrite Heq'; rewrite Heq''.",
                        "VernacExtend",
                        "5b12555ddc1551b62140b5cb5209b42465ee1193"
                    ]
                },
                {
                    "command": [
                        "expand (S p * S q'' + S p'' * S q) (S q * S q'') (S p * S q'' + S p'' * S q + S q * S q'') ipattern:(d) ipattern:(p3) ipattern:(q3) ipattern:(Heq3) ipattern:(Heq1) ipattern:(Heq2).",
                        "VernacExtend",
                        "b0593786d171ea9e3dbb60b2ec833e3e70d4bef6"
                    ]
                },
                {
                    "command": [
                        "expand (S p' * S q'' + S p'' * S q') (S q' * S q'') (S p' * S q'' + S p'' * S q' + S q' * S q'') ipattern:(d') ipattern:(p4) ipattern:(q4) ipattern:(Heq4) ipattern:(Heq5) ipattern:(Heq6).",
                        "VernacExtend",
                        "76e7e4590520846f5d14e2011dcd217a05741aac"
                    ]
                },
                {
                    "command": [
                        "intros Hle; apply mult_S_le_reg_l with d; rewrite (mult_comm (S p3)); repeat rewrite (mult_comm (S d)); repeat rewrite <- mult_assoc.",
                        "VernacExtend",
                        "72b5ca33b3a26fea71ba1597ca57e09f6f332578"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq1; rewrite <- Heq2.",
                        "VernacExtend",
                        "e936a5d2e98ffa8da88b653f1a12370fab2526d0"
                    ]
                },
                {
                    "command": [
                        "apply mult_S_le_reg_l with d'; repeat rewrite mult_assoc; repeat rewrite (mult_comm (S d')).",
                        "VernacExtend",
                        "0df36ff36c11abec7bf486a9b8714f3e48a90599"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq5; rewrite <- Heq6.",
                        "VernacExtend",
                        "ace3598d43235177cf046e67db9ae17f6007d157"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_plus_distr_l; repeat rewrite mult_plus_distr_r.",
                        "VernacExtend",
                        "55ce9d9c0b9546df8f3b8e653d42b3e84af5f65a"
                    ]
                },
                {
                    "command": [
                        "match goal with | |- (_ + ?X1 <= _ + ?X2) => replace X1 with X2; [ try apply plus_le_compat_r | ring ] end.",
                        "VernacExtend",
                        "ad536f64084e896053f86880a8c2ab83a17113f4"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- (mult_comm (S q'')); repeat rewrite <- mult_assoc.",
                        "VernacExtend",
                        "52a032dae03f8cacd0dff13af580f8c546986595"
                    ]
                },
                {
                    "command": [
                        "apply (fun m n p : nat => mult_le_compat_l p n m).",
                        "VernacExtend",
                        "9b93a44abd170d009312a936714084d575370e2e"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_assoc; rewrite <- (mult_comm (S q'')); rewrite <- mult_assoc; apply (fun m n p : nat => mult_le_compat_l p n m).",
                        "VernacExtend",
                        "5b8cf198b16f2c4b43d29701a1702bc63789e7cb"
                    ]
                },
                {
                    "command": [
                        "rewrite (mult_comm (S q')); exact Hle.",
                        "VernacExtend",
                        "7b1cc8d8930e91699291fcb6996b5c096b62a5bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Qpositive_le_mult",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros w w' w''; make_fraction w ipattern:(p) ipattern:(q) ipattern:(Heq); make_fraction w' ipattern:(p') ipattern:(q') ipattern:(Heq'); make_fraction w'' ipattern:(p'') ipattern:(q'') ipattern:(Heq'').",
                        "VernacExtend",
                        "6cbc244478fba433c9b7a97236ef88dd124977c4"
                    ]
                },
                {
                    "command": [
                        "intros H; apply Qpositive_le'_to_Qpositive_le; generalize (Qpositive_le_to_Qpositive_le' _ _ H); clear H.",
                        "VernacExtend",
                        "d8abf1e6383f7ef281bfe8d839cde839c35e4229"
                    ]
                },
                {
                    "command": [
                        "unfold Qpositive_le', Qpositive_mult in |- *; simpl in |- *; rewrite Heq; rewrite Heq'; rewrite Heq''.",
                        "VernacExtend",
                        "8988c5e27134a33b2671b861ba356c141c3dff1e"
                    ]
                },
                {
                    "command": [
                        "expand (S p * S p'') (S q * S q'') (S p * S p'' + S q * S q'') ipattern:(d) ipattern:(p3) ipattern:(q3) ipattern:(Heq3) ipattern:(Heq1) ipattern:(Heq2).",
                        "VernacExtend",
                        "7597f964a7234379a3f3f3f83df1aa3ade626680"
                    ]
                },
                {
                    "command": [
                        "expand (S p' * S p'') (S q' * S q'') (S p' * S p'' + S q' * S q'') ipattern:(d') ipattern:(p4) ipattern:(q4) ipattern:(Heq4) ipattern:(Heq5) ipattern:(Heq6).",
                        "VernacExtend",
                        "d4dbc07e8e8038db46d6a32f3524e477a10a41b2"
                    ]
                },
                {
                    "command": [
                        "intros Hle; apply mult_S_le_reg_l with d; rewrite (mult_comm (S p3)); repeat rewrite (mult_comm (S d)); repeat rewrite <- mult_assoc.",
                        "VernacExtend",
                        "72b5ca33b3a26fea71ba1597ca57e09f6f332578"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq1; rewrite <- Heq2.",
                        "VernacExtend",
                        "e936a5d2e98ffa8da88b653f1a12370fab2526d0"
                    ]
                },
                {
                    "command": [
                        "apply mult_S_le_reg_l with d'; repeat rewrite mult_assoc; repeat rewrite (mult_comm (S d')); rewrite <- Heq5; rewrite <- Heq6.",
                        "VernacExtend",
                        "f7a2011c08a475e082b4e1febaebaeeedc1ce928"
                    ]
                },
                {
                    "command": [
                        "replace (S q' * S q'' * S p * S p'') with (S q'' * S p'' * (S p * S q')).",
                        "VernacExtend",
                        "7a7d148aa7ad12dbeee2346014ca5cb34d3884ea"
                    ]
                },
                {
                    "command": [
                        "replace (S p' * S p'' * S q * S q'') with (S q'' * S p'' * (S p' * S q)).",
                        "VernacExtend",
                        "380551612974565b157c08dd8eda8499a5cc39f4"
                    ]
                },
                {
                    "command": [
                        "apply (fun m n p : nat => mult_le_compat_l p n m); exact Hle.",
                        "VernacExtend",
                        "dd999150968cf1a9b45c9f9aa6ef78d3526f4529"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Qpositive_plus_le",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros w w'; apply Qpositive_le'_to_Qpositive_le.",
                        "VernacExtend",
                        "8cdab9f524593db65afe0f1106e51df0b14a7b33"
                    ]
                },
                {
                    "command": [
                        "unfold Qpositive_le' in |- *.",
                        "VernacExtend",
                        "75c58350b705dc22c3b31f02c15c3d5f28820c39"
                    ]
                },
                {
                    "command": [
                        "unfold Qpositive_plus in |- *.",
                        "VernacExtend",
                        "baca3c0b6cace94221022a23bdea7cafdd06399e"
                    ]
                },
                {
                    "command": [
                        "elim (interp_non_zero w); intros p (q, Heq); elim (interp_non_zero w'); intros p' (q', Heq').",
                        "VernacExtend",
                        "8768df80139c82cb2c11fa50b91257f1005a35bc"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq; rewrite Heq'.",
                        "VernacExtend",
                        "818baca3996621605a5202ee2fdb9f6c6147db89"
                    ]
                },
                {
                    "command": [
                        "expand (S p * S q' + S p' * S q) (S q * S q') (S p * S q' + S p' * S q + S q * S q') ipattern:(d) ipattern:(p'') ipattern:(q'') ipattern:(Heq2) ipattern:(Heq3) ipattern:(Heq4).",
                        "VernacExtend",
                        "0c73691f42f81c4143d30755b9dcadbcfd4918f6"
                    ]
                },
                {
                    "command": [
                        "apply mult_S_le_reg_l with d.",
                        "VernacExtend",
                        "6bd588d3baa47765832f67956542390e14a4f218"
                    ]
                },
                {
                    "command": [
                        "rewrite (mult_assoc (S d) (S p'')); repeat rewrite (mult_comm (S d)); rewrite <- (mult_assoc (S p)); rewrite <- Heq3; rewrite <- Heq4.",
                        "VernacExtend",
                        "f09e8cc594587d94951f9afd91fe385bc476e97c"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_plus_distr_r.",
                        "VernacExtend",
                        "c98266c52d81f9d2eb96b49e4fc06afcb0572340"
                    ]
                },
                {
                    "command": [
                        "replace (S p * S q' * S q) with (S p * (S q * S q')).",
                        "VernacExtend",
                        "83c1153ec3e804b5264718bac229d90df75756fd"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}