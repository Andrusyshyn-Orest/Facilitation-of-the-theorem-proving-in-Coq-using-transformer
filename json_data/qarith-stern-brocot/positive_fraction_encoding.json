{
    "filename": "positive_fraction_encoding.v",
    "coq_project": "qarith-stern-brocot",
    "vernac_cmds": [
        [
            "Require Export Zaux.",
            "VernacRequire",
            "607b9d93059256bebc37787a334fc09ee1881545"
        ],
        [
            "Require Import ZArithRing.",
            "VernacRequire",
            "1792ea5bd3f37db98704504fc8fd627a7843b280"
        ],
        [
            "Require Export Qpositive.",
            "VernacRequire",
            "db37c88f2bf38e4b2b48198769906bd26338c3ae"
        ],
        [
            "Require Export Q_field.",
            "VernacRequire",
            "dac883985cbc2ba49ea26c87f611a3dc3ea34190"
        ],
        [
            "Require Import FunInd.",
            "VernacRequire",
            "1f538423fd5f4dcde5fea5ac239a919904a47729"
        ],
        [
            "Inductive fractionalAcc : Z -> Z -> Prop := | fractionalacc0 : forall m n : Z, m = n -> fractionalAcc m n | fractionalacc1 : forall m n : Z, (0 < m)%Z -> (m < n)%Z -> fractionalAcc m (n - m)%Z -> fractionalAcc m n | fractionalacc2 : forall m n : Z, (0 < n)%Z -> (n < m)%Z -> fractionalAcc (m - n)%Z n -> fractionalAcc m n.",
            "VernacInductive",
            "1cef367992b93323fe2ff7537ea29d1495ddc77f"
        ],
        [
            "Lemma fractionalacc_0 : forall m : Z, fractionalAcc m m.",
            "VernacStartTheoremProof",
            "64f81a8001ce870515c3983e4fa6236c5deecc31"
        ],
        [
            "intros; apply fractionalacc0; reflexivity.",
            "VernacExtend",
            "4e19d45c674c3abeb81c6aefe2f5f1379caabf17"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma fractionalacc_1 : forall m n : Z, fractionalAcc m n -> (0 < m)%Z -> (m < n)%Z -> fractionalAcc m (n - m).",
            "VernacStartTheoremProof",
            "d6226b3f702d0dc4193c10fa67e3a40a00518163"
        ],
        [
            "simple destruct 1; intros; trivial; Falsum; apply (Z.lt_irrefl n0); [ rewrite H0 in H2 | apply Z.lt_trans with m0 ]; assumption.",
            "VernacExtend",
            "78ec2268df6c2e91490528098332354870b7c270"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma fractionalacc_2 : forall m n : Z, fractionalAcc m n -> (0 < n)%Z -> (n < m)%Z -> fractionalAcc (m - n) n.",
            "VernacStartTheoremProof",
            "c91de592babb99c5786ac35de2c12936c18c51c7"
        ],
        [
            "simple destruct 1; intros; trivial; Falsum; apply (Z.lt_irrefl n0); [ rewrite H0 in H2 | apply Z.lt_trans with m0 ]; assumption.",
            "VernacExtend",
            "78ec2268df6c2e91490528098332354870b7c270"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition encoding_algorithm : forall (x y : Z) (h1 : (0 < x)%Z) (h2 : (0 < y)%Z) (H : fractionalAcc x y), Qpositive.",
            "VernacDefinition",
            "cab9b10271e6796d9893c0e0dc7f64522bd5a7af"
        ],
        [
            "fix encoding_algorithm 5.",
            "VernacExtend",
            "6fbde4c3210bda0487ef2de0eb3e5b65c257c67e"
        ],
        [
            "intros x y h1 h2 H.",
            "VernacExtend",
            "5530001b1a92092232083688729c39f23e138532"
        ],
        [
            "refine match Z_dec' x y with | inleft H_x_neq_y => match H_x_neq_y with | left Hx_lt_y => dL (encoding_algorithm x (y - x)%Z h1 _ (fractionalacc_1 x y H h1 Hx_lt_y)) | right Hy_lt_x => nR (encoding_algorithm (x - y)%Z y _ h2 (fractionalacc_2 x y H h2 Hy_lt_x)) end | inright _ => One end; unfold Zminus in |- *; apply Zlt_left_lt; assumption.",
            "VernacExtend",
            "29582ce98fd211e46ea15bdc0d89001c08fc07da"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem Zminus2_wf : forall x y : Z, (0%nat < x)%Z -> (0 < y)%Z -> fractionalAcc x y.",
            "VernacStartTheoremProof",
            "66f7b148b8c377ee0081d55ebe45635e26deeba7"
        ],
        [
            "intros x y.",
            "VernacExtend",
            "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
        ],
        [
            "case (Z_lt_le_dec 0 x).",
            "VernacExtend",
            "fcfbef142782cc1ee2f2f140ea23f04fb74828b9"
        ],
        [
            "intro H.",
            "VernacExtend",
            "a9535760040671e8853f25f0b4e9eda38ca392a6"
        ],
        [
            "case (Z_lt_le_dec 0 y).",
            "VernacExtend",
            "3a40fa2e75e149a28b1c23c8776674d72e650dfe"
        ],
        [
            "intro H2.",
            "VernacExtend",
            "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
        ],
        [
            "apply Zind_wf_double with (P := fun x y : Z => (0 < x)%Z -> (0 < y)%Z -> fractionalAcc x y) (p0 := 1%Z) (q0 := 1%Z).",
            "VernacExtend",
            "1c1f50ce82b368019ae92e27138a5505659618b3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (Z.eq_dec n m).",
            "VernacExtend",
            "6fb47933f2756a94a8e19b3d293e36959998e3f5"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply fractionalacc0.",
            "VernacExtend",
            "dae1017b938d9874b6d987fcc30f1b29399159ad"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro H5.",
            "VernacExtend",
            "df8458cb0188ba8e62e60b153cb1dc140bf39afb"
        ],
        [
            "case (not_Zeq_inf n m H5).",
            "VernacExtend",
            "093ba76169e0b6ef579d69fb91645dca3ec091cd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply fractionalacc1.",
            "VernacExtend",
            "f23e5f86b41a611800e68f30130395b66b43d0c7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Zplus_le_reg_l with n.",
            "VernacExtend",
            "fba1af7b7737e727e30b5060b80bb315bc817346"
        ],
        [
            "replace (n + (m - n))%Z with m.",
            "VernacExtend",
            "ce01da9344f751fd58aa7c9c3a72944fcad0c210"
        ],
        [
            "change (Z.succ n <= m)%Z in |- *.",
            "VernacExtend",
            "d730ca945f5a141bf19813484149a7652c88b882"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Zplus_lt_reg_l with (n - m)%Z.",
            "VernacExtend",
            "4b07130bb1c11f1b157295df83ca690d15788fc6"
        ],
        [
            "replace (n - m + (m - n))%Z with 0%Z.",
            "VernacExtend",
            "04ccd557377abe75e46b3f499f6dc2664e37e8c3"
        ],
        [
            "replace (n - m + m)%Z with n.",
            "VernacExtend",
            "23fd439af53591ef3578b8612710926c5b8d2e1d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Zminus in |- *.",
            "VernacExtend",
            "7085d4231409167767072da1bd24eb73ce98a683"
        ],
        [
            "apply Zlt_left_lt.",
            "VernacExtend",
            "2634fab4a8b69d696d88cb2ffa3b4c79784a8e2b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply fractionalacc2.",
            "VernacExtend",
            "91897beaf2a96c78bfd8cbb49b86a49298b2e522"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "change (Z.succ 0 <= m)%Z in |- *.",
            "VernacExtend",
            "1a30e17c7db3229d0f5bc3ef376ff2bfdf080e2f"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Zplus_le_reg_l with m.",
            "VernacExtend",
            "26253669c7fbb9259e3bf1e9483ac9194e401d5a"
        ],
        [
            "replace (m + (n - m))%Z with n.",
            "VernacExtend",
            "db8ba6763ecb5c1b3ac897726b9e353278d58922"
        ],
        [
            "change (Z.succ m <= n)%Z in |- *.",
            "VernacExtend",
            "2248afbe797fc6b3a4713082d34ca348ed8a768c"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Zplus_lt_reg_l with (m - n)%Z.",
            "VernacExtend",
            "b5ceaf9721590cb0dfa8656237d883171aab1b61"
        ],
        [
            "replace (m - n + (n - m))%Z with 0%Z.",
            "VernacExtend",
            "9a2f9e1ac6d3a2952e1cce1f123aba088c2c42a9"
        ],
        [
            "replace (m - n + n)%Z with m.",
            "VernacExtend",
            "f31376fef6bdba217580b569a838a0556b66a991"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Zminus in |- *.",
            "VernacExtend",
            "7085d4231409167767072da1bd24eb73ce98a683"
        ],
        [
            "apply Zlt_left_lt.",
            "VernacExtend",
            "2634fab4a8b69d696d88cb2ffa3b4c79784a8e2b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "change (Z.succ 0 <= y)%Z in |- *.",
            "VernacExtend",
            "dbc7a4a909782ebdb0c2f80f2ca74c5d4d364cb0"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "change (Z.succ 0 <= x)%Z in |- *.",
            "VernacExtend",
            "a235bb1b074aaefb51d09124d3f23a1cbef2ef23"
        ],
        [
            "apply Zlt_le_succ.",
            "VernacExtend",
            "070de595889f014f0a173659377506422eb25080"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "absurd (y <= 0)%Z.",
            "VernacExtend",
            "ba4d7a0441d41498398873e1c95baa8d81a8c5ab"
        ],
        [
            "apply Zgt_not_le.",
            "VernacExtend",
            "b677cb24ebdb4758864967d9be1fb740fc73130e"
        ],
        [
            "Flip.",
            "VernacExtend",
            "8a36616bb0c1e47859f8e7474de3c43d210d67d5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "absurd (x <= 0)%Z.",
            "VernacExtend",
            "18b6b7b427f0340fcdda46f75db1605d46a0c953"
        ],
        [
            "apply Zgt_not_le.",
            "VernacExtend",
            "b677cb24ebdb4758864967d9be1fb740fc73130e"
        ],
        [
            "Flip.",
            "VernacExtend",
            "8a36616bb0c1e47859f8e7474de3c43d210d67d5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition positive_fraction_encoding (x y : Z) (Hx : (0 < x)%Z) (Hy : (0 < y)%Z) := encoding_algorithm x y Hx Hy (Zminus2_wf x y Hx Hy).",
            "VernacDefinition",
            "32fcfde34681631403249e71482298ea4c989b58"
        ],
        [
            "Definition fraction_encoding (m n : Z) (Hn : n <> 0%Z) : Q.",
            "VernacDefinition",
            "234835e04501833d0ab9cc7933fc1e927a7203cb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (s := (Z.sgn m * Z.sgn n)%Z) in *.",
            "VernacExtend",
            "5d532015847e5beab5aa5aaa765f169e2c1452a8"
        ],
        [
            "case (Z_dec s 0).",
            "VernacExtend",
            "ecd5c6089825c5a681ab71b810fbf66dd5813811"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "case s0.",
            "VernacExtend",
            "a22ff67b3b893ca8d20fce9cac3c70ad94d717c5"
        ],
        [
            "intro z.",
            "VernacExtend",
            "4eaa711923e3411ac49bd57d091f8de45ca09388"
        ],
        [
            "refine (Qneg (positive_fraction_encoding (Z.abs m) (Z.abs n) _ _)).",
            "VernacExtend",
            "58b407f8b313be3b0e2f2c89790c22ba8300fe85"
        ],
        [
            "apply Zabs_11.",
            "VernacExtend",
            "b9a57b7352a87a95b95a1b55b110f28bf362f682"
        ],
        [
            "generalize (Zorder.Zlt_not_eq _ _ z).",
            "VernacExtend",
            "f8c0b56514f51dc1558093c311f8c32be16bc245"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "unfold s in |- *.",
            "VernacExtend",
            "468b9a7311ea5214f512899350df06f1241bf032"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply Zabs_11.",
            "VernacExtend",
            "b9a57b7352a87a95b95a1b55b110f28bf362f682"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro z.",
            "VernacExtend",
            "4eaa711923e3411ac49bd57d091f8de45ca09388"
        ],
        [
            "refine (Qpos (positive_fraction_encoding (Z.abs m) (Z.abs n) _ _)).",
            "VernacExtend",
            "06c9dab3074a25433591cbab4e983809487d4df1"
        ],
        [
            "apply Zabs_11.",
            "VernacExtend",
            "b9a57b7352a87a95b95a1b55b110f28bf362f682"
        ],
        [
            "generalize (Zgt_not_eq _ _ z).",
            "VernacExtend",
            "7c75df448f26093b725659fc598b48d2e24baf4a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "unfold s in |- *.",
            "VernacExtend",
            "468b9a7311ea5214f512899350df06f1241bf032"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply Zabs_11.",
            "VernacExtend",
            "b9a57b7352a87a95b95a1b55b110f28bf362f682"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "exact Zero.",
            "VernacExtend",
            "8491d5c35f88b2fe0ca4d7d291f62d8c9a74a26b"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Ltac Irreflex := try solve [ elimtype False; match goal with | id1:(?X1 <> ?X1) |- _ => apply id1; reflexivity | id1:(?X1 < ?X1)%Z |- _ => apply (Z.lt_irrefl X1); assumption | id1:(?X1 < ?X2)%Z,id2:(?X1 = ?X2) |- _ => rewrite id2 in id1; apply (Z.lt_irrefl X2); assumption | id1:(?X1 < ?X2)%Z,id2:(?X2 = ?X1) |- _ => rewrite id2 in id1; apply (Z.lt_irrefl X1); assumption | id1:(?X1 < ?X2)%Z,id2:(?X2 < ?X1)%Z |- _ => apply (Z.lt_irrefl X2); apply Z.lt_trans with X1; assumption | id1:_ |- _ => idtac end ].",
            "VernacExtend",
            "05caf61f0b84783ae4208e9cc845a3ee5bd14f52"
        ],
        [
            "Scheme fractionalAcc_ind_dep := Induction for fractionalAcc Sort Prop.",
            "VernacScheme",
            "b9f0b0d5c8c0461b947f4b16edb80906b9644b34"
        ],
        [
            "Functional Scheme encoding_algorithm_ind := Induction for encoding_algorithm Sort Prop.",
            "VernacExtend",
            "3b2873c06d252575658e4a1ed410290f118172b9"
        ],
        [
            "Lemma encoding_algorithm_equal_1 : forall (a b : Z) (Ha : (0 < a)%Z) (Hb : (0 < b)%Z) (H1 H2 : fractionalAcc a b), encoding_algorithm a b Ha Hb H1 = encoding_algorithm a b Ha Hb H2.",
            "VernacStartTheoremProof",
            "da5e54558d3ad7d8baf1110cc3363284e4e2fc49"
        ],
        [
            "intros a b Ha Hb H1 H2.",
            "VernacExtend",
            "49c7571fda6f542f28983fee9784089cdb29837a"
        ],
        [
            "generalize Ha Hb H2.",
            "VernacExtend",
            "925fe3747544100ce1ac1644e275429073f8d79c"
        ],
        [
            "clear Ha Hb H2.",
            "VernacExtend",
            "0214c0c7a77f54f9312a99ef043c2e9bd91790b9"
        ],
        [
            "pattern a, b, H1 in |- *.",
            "VernacExtend",
            "1c5bbda5bebbd56c3a1e640e26eb1c57a7b1a4b8"
        ],
        [
            "elim H1 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "05a2cc9d1449d558f1ad4a1951fc24314fe33765"
        ],
        [
            "intros m n e Ha Hb H3; generalize e Ha Hb; clear e Ha Hb; pattern m, n, H3 in |- *; elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "284364ddd115128e0942f1842aaedf1707ac122e"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H_falsum]; Irreflex | trivial ].",
            "VernacExtend",
            "566fccfe8c405af52592934f9e7a26c919bfe026"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros m n z z0 H1' H_ind Ha Hb H3.",
            "VernacExtend",
            "249a78203e930f18a133c238cdf8367b6a774cdb"
        ],
        [
            "generalize z z0 H1' H_ind Ha Hb.",
            "VernacExtend",
            "0cc503fbc2d80d4690b113e3d67b76e1a80161f5"
        ],
        [
            "clear a b H1 z z0 H_ind H1' Ha Hb.",
            "VernacExtend",
            "fa49f6b8043dbf7be20a6d3531c322453091b7a6"
        ],
        [
            "pattern m, n, H3 in |- *.",
            "VernacExtend",
            "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
        ],
        [
            "elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "95694b1e92638c317cd8a4694fec56e6055eda91"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
            "VernacExtend",
            "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
            "VernacExtend",
            "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
        ],
        [
            "intros m n z z0 H1' H_ind Ha Hb H3.",
            "VernacExtend",
            "249a78203e930f18a133c238cdf8367b6a774cdb"
        ],
        [
            "generalize z z0 H1' H_ind Ha Hb.",
            "VernacExtend",
            "0cc503fbc2d80d4690b113e3d67b76e1a80161f5"
        ],
        [
            "clear a b H1 z z0 H_ind H1' Ha Hb.",
            "VernacExtend",
            "fa49f6b8043dbf7be20a6d3531c322453091b7a6"
        ],
        [
            "pattern m, n, H3 in |- *.",
            "VernacExtend",
            "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
        ],
        [
            "elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "95694b1e92638c317cd8a4694fec56e6055eda91"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
            "VernacExtend",
            "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
            "VernacExtend",
            "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma encoding_algorithm_equal : forall (a b : Z) (Ha1 Ha2 : (0 < a)%Z) (Hb1 Hb2 : (0 < b)%Z) (H1 H2 : fractionalAcc a b), encoding_algorithm a b Ha1 Hb1 H1 = encoding_algorithm a b Ha2 Hb2 H2.",
            "VernacStartTheoremProof",
            "e0dcdcda5b374b3e146acc6d48b41b911deb913f"
        ],
        [
            "intros a b Ha1 Ha2 Hb1 Hb2 H1 H2.",
            "VernacExtend",
            "64a833700adc267bbace3353d0ffcae9f71d53ba"
        ],
        [
            "generalize Ha1 Hb1 Ha2 Hb2 H2.",
            "VernacExtend",
            "18c6b8c2ba241f742ff206c1292305575c8d4bb7"
        ],
        [
            "clear Ha1 Hb1 Ha2 Hb2 H2.",
            "VernacExtend",
            "c25bece2eaf7f9e61c158c9f0a53c24bdfe5b2fd"
        ],
        [
            "pattern a, b, H1 in |- *.",
            "VernacExtend",
            "1c5bbda5bebbd56c3a1e640e26eb1c57a7b1a4b8"
        ],
        [
            "elim H1 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "05a2cc9d1449d558f1ad4a1951fc24314fe33765"
        ],
        [
            "intros m n e Ha3 Hb3 Ha4 Hb4 H3; generalize e Ha3 Hb3 Ha4 Hb4; clear e Ha3 Hb3 Ha4 Hb4; pattern m, n, H3 in |- *; elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "32753c5bd33158c9b949e4129734069052744c38"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H_falsum]; Irreflex | trivial ].",
            "VernacExtend",
            "566fccfe8c405af52592934f9e7a26c919bfe026"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros m n z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4 H3.",
            "VernacExtend",
            "644521dd9e172c9ae491a47d78f236435a6c8ff4"
        ],
        [
            "generalize z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4.",
            "VernacExtend",
            "c66fea0b78367021d35187877482c98d7d673c22"
        ],
        [
            "clear a b H1 z z0 H_ind H1' Ha3 Hb3 Ha4 Hb4.",
            "VernacExtend",
            "22748a70a147ec1ff0714403b54904664fc9b1ee"
        ],
        [
            "pattern m, n, H3 in |- *.",
            "VernacExtend",
            "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
        ],
        [
            "elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "95694b1e92638c317cd8a4694fec56e6055eda91"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
            "VernacExtend",
            "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
            "VernacExtend",
            "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
        ],
        [
            "intros m n z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4 H3.",
            "VernacExtend",
            "644521dd9e172c9ae491a47d78f236435a6c8ff4"
        ],
        [
            "generalize z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4.",
            "VernacExtend",
            "c66fea0b78367021d35187877482c98d7d673c22"
        ],
        [
            "clear a b H1 z z0 H_ind H1' Ha3 Hb3 Ha4 Hb4.",
            "VernacExtend",
            "22748a70a147ec1ff0714403b54904664fc9b1ee"
        ],
        [
            "pattern m, n, H3 in |- *.",
            "VernacExtend",
            "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
        ],
        [
            "elim H3 using fractionalAcc_ind_dep.",
            "VernacExtend",
            "95694b1e92638c317cd8a4694fec56e6055eda91"
        ],
        [
            "intros; Irreflex.",
            "VernacExtend",
            "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
            "VernacExtend",
            "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
        ],
        [
            "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
            "VernacExtend",
            "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma encoding_algorithm_equal_strong : forall (a1 a2 b1 b2 : Z) (Ha1 : (0 < a1)%Z) (Ha2 : (0 < a2)%Z) (Hb1 : (0 < b1)%Z) (Hb2 : (0 < b2)%Z) (H1 : fractionalAcc a1 b1) (H2 : fractionalAcc a2 b2), a1 = a2 -> b1 = b2 -> encoding_algorithm a1 b1 Ha1 Hb1 H1 = encoding_algorithm a2 b2 Ha2 Hb2 H2.",
            "VernacStartTheoremProof",
            "423d0142f479d99976aa05827adff30f7f70c525"
        ],
        [
            "intros; subst; apply encoding_algorithm_equal.",
            "VernacExtend",
            "ba8b3b8da9157c6b03c768df55329b2e16560944"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma encoding_algorithm_0 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z) (H : fractionalAcc m n), m = n -> encoding_algorithm m n Hm Hn H = One.",
            "VernacStartTheoremProof",
            "f313edb8f7c93f99b470730f551b2bdc2b7feb18"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply trans_eq with (encoding_algorithm m m Hm Hm (fractionalacc0 m m (refl_equal m))).",
            "VernacExtend",
            "0a5badcaeacb7b663bf0793cdd5f0185b2c9666d"
        ],
        [
            "apply encoding_algorithm_equal_strong.",
            "VernacExtend",
            "699110e84962a8558313e6ac3b198081e9991cb0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "symmetry in |- *.",
            "VernacExtend",
            "dc33a39a53e296ef5e59fd831d55212be2a42f22"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in |- *; case (Z_dec' m m); [ intros [H_falsum| H_falsum] | trivial ]; Irreflex.",
            "VernacExtend",
            "7a613c42d008aedf41b95f9972bd1d7b93e2b4ce"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma encoding_algorithm_1 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z) (H : fractionalAcc m n), (m < n)%Z -> forall (H'm : (0 < m)%Z) (H'nm : (0 < n - m)%Z) (H' : fractionalAcc m (n - m)), encoding_algorithm m n Hm Hn H = dL (encoding_algorithm m (n - m) H'm H'nm H').",
            "VernacStartTheoremProof",
            "60d3cd6a1e62af7d5aae95141f64288436f85517"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply trans_eq with (encoding_algorithm m n Hm Hn (fractionalacc1 m n Hm H0 H')).",
            "VernacExtend",
            "e654db555ab54fd196994dd1f60112b1585c7212"
        ],
        [
            "apply encoding_algorithm_equal.",
            "VernacExtend",
            "ff8661672fe977fe1bfb1462ec00162392e51451"
        ],
        [
            "simpl in |- *; case (Z_dec' m n); [ intros [H_11| H_falsum] | intro H_falsum ]; Irreflex; apply f_equal with Qpositive; apply encoding_algorithm_equal.",
            "VernacExtend",
            "1e997daad938301acd7ad744804c08739164b18b"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma encoding_algorithm_2 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z) (H : fractionalAcc m n), (n < m)%Z -> forall (H'mn : (0 < m - n)%Z) (H'n : (0 < n)%Z) (H' : fractionalAcc (m - n) n), encoding_algorithm m n Hm Hn H = nR (encoding_algorithm (m - n) n H'mn H'n H').",
            "VernacStartTheoremProof",
            "bb360f87fa7f419ec82b8c26ac884014a21821e1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply trans_eq with (encoding_algorithm m n Hm Hn (fractionalacc2 m n Hn H0 H')).",
            "VernacExtend",
            "4b06051c341c1c531e9c96151745bdd054c805fa"
        ],
        [
            "apply encoding_algorithm_equal.",
            "VernacExtend",
            "ff8661672fe977fe1bfb1462ec00162392e51451"
        ],
        [
            "simpl in |- *; case (Z_dec' m n); [ intros [H_11| H_falsum] | intro H_falsum ]; Irreflex; apply f_equal with Qpositive; apply encoding_algorithm_equal.",
            "VernacExtend",
            "1e997daad938301acd7ad744804c08739164b18b"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma positive_fraction_encoding_equal : forall (a b : Z) (Ha1 Ha2 : (0 < a)%Z) (Hb1 Hb2 : (0 < b)%Z), positive_fraction_encoding a b Ha1 Hb1 = positive_fraction_encoding a b Ha2 Hb2.",
            "VernacStartTheoremProof",
            "4770ad78e8d3ad47ef957325a5f24914c40498cf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold positive_fraction_encoding in |- *.",
            "VernacExtend",
            "83f5ca7ad1e5516826107b30def13eb5d201a140"
        ],
        [
            "apply encoding_algorithm_equal.",
            "VernacExtend",
            "ff8661672fe977fe1bfb1462ec00162392e51451"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma positive_fraction_encoding_equal_strong : forall (a1 a2 b1 b2 : Z) (Ha1 : (0 < a1)%Z) (Ha2 : (0 < a2)%Z) (Hb1 : (0 < b1)%Z) (Hb2 : (0 < b2)%Z), a1 = a2 -> b1 = b2 -> positive_fraction_encoding a1 b1 Ha1 Hb1 = positive_fraction_encoding a2 b2 Ha2 Hb2.",
            "VernacStartTheoremProof",
            "d700a983fbe4f827ec5c7ccab45afd11c76a2653"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold positive_fraction_encoding in |- *.",
            "VernacExtend",
            "83f5ca7ad1e5516826107b30def13eb5d201a140"
        ],
        [
            "apply encoding_algorithm_equal_strong.",
            "VernacExtend",
            "699110e84962a8558313e6ac3b198081e9991cb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma positive_fraction_encoding_0 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z), m = n -> positive_fraction_encoding m n Hm Hn = One.",
            "VernacStartTheoremProof",
            "e1c20440ee1de9502d6b96deabd3cb1b81a6b4d6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold positive_fraction_encoding in |- *.",
            "VernacExtend",
            "83f5ca7ad1e5516826107b30def13eb5d201a140"
        ],
        [
            "apply encoding_algorithm_0.",
            "VernacExtend",
            "3033fc80bdfa912afac4b9258711ad9c4fac71fb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma positive_fraction_encoding_1 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z), (m < n)%Z -> forall (H'm : (0 < m)%Z) (H'nm : (0 < n - m)%Z), positive_fraction_encoding m n Hm Hn = dL (positive_fraction_encoding m (n - m) H'm H'nm).",
            "VernacStartTheoremProof",
            "301e0b775463829eca68c81307cab27ed870ec3e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold positive_fraction_encoding in |- *.",
            "VernacExtend",
            "83f5ca7ad1e5516826107b30def13eb5d201a140"
        ],
        [
            "apply encoding_algorithm_1.",
            "VernacExtend",
            "d40a04058211fed29c5f25bbc8fe3185f5f76835"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma positive_fraction_encoding_2 : forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z), (n < m)%Z -> forall (H'mn : (0 < m - n)%Z) (H'n : (0 < n)%Z), positive_fraction_encoding m n Hm Hn = nR (positive_fraction_encoding (m - n) n H'mn H'n).",
            "VernacStartTheoremProof",
            "8ea0c0a51ed490a9e8506e93ddda6d187b589c5c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold positive_fraction_encoding in |- *.",
            "VernacExtend",
            "83f5ca7ad1e5516826107b30def13eb5d201a140"
        ],
        [
            "apply encoding_algorithm_2.",
            "VernacExtend",
            "acc30666a183637f5576600a760f86b551781bbf"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "fractionalacc_0",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros; apply fractionalacc0; reflexivity.",
                        "VernacExtend",
                        "4e19d45c674c3abeb81c6aefe2f5f1379caabf17"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "fractionalacc_1",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "simple destruct 1; intros; trivial; Falsum; apply (Z.lt_irrefl n0); [ rewrite H0 in H2 | apply Z.lt_trans with m0 ]; assumption.",
                        "VernacExtend",
                        "78ec2268df6c2e91490528098332354870b7c270"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "fractionalacc_2",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "simple destruct 1; intros; trivial; Falsum; apply (Z.lt_irrefl n0); [ rewrite H0 in H2 | apply Z.lt_trans with m0 ]; assumption.",
                        "VernacExtend",
                        "78ec2268df6c2e91490528098332354870b7c270"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "fix encoding_algorithm 5.",
                        "VernacExtend",
                        "6fbde4c3210bda0487ef2de0eb3e5b65c257c67e"
                    ]
                },
                {
                    "command": [
                        "intros x y h1 h2 H.",
                        "VernacExtend",
                        "5530001b1a92092232083688729c39f23e138532"
                    ]
                },
                {
                    "command": [
                        "refine match Z_dec' x y with | inleft H_x_neq_y => match H_x_neq_y with | left Hx_lt_y => dL (encoding_algorithm x (y - x)%Z h1 _ (fractionalacc_1 x y H h1 Hx_lt_y)) | right Hy_lt_x => nR (encoding_algorithm (x - y)%Z y _ h2 (fractionalacc_2 x y H h2 Hy_lt_x)) end | inright _ => One end; unfold Zminus in |- *; apply Zlt_left_lt; assumption.",
                        "VernacExtend",
                        "29582ce98fd211e46ea15bdc0d89001c08fc07da"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Zminus2_wf",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros x y.",
                        "VernacExtend",
                        "be08ce6238d7df02469dd8e9e4a4f4eef3cfb51f"
                    ]
                },
                {
                    "command": [
                        "case (Z_lt_le_dec 0 x).",
                        "VernacExtend",
                        "fcfbef142782cc1ee2f2f140ea23f04fb74828b9"
                    ]
                },
                {
                    "command": [
                        "intro H.",
                        "VernacExtend",
                        "a9535760040671e8853f25f0b4e9eda38ca392a6"
                    ]
                },
                {
                    "command": [
                        "case (Z_lt_le_dec 0 y).",
                        "VernacExtend",
                        "3a40fa2e75e149a28b1c23c8776674d72e650dfe"
                    ]
                },
                {
                    "command": [
                        "intro H2.",
                        "VernacExtend",
                        "dec8eeff0df79bb9fb9b43f21bb02b0e6c67c603"
                    ]
                },
                {
                    "command": [
                        "apply Zind_wf_double with (P := fun x y : Z => (0 < x)%Z -> (0 < y)%Z -> fractionalAcc x y) (p0 := 1%Z) (q0 := 1%Z).",
                        "VernacExtend",
                        "1c1f50ce82b368019ae92e27138a5505659618b3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (Z.eq_dec n m).",
                        "VernacExtend",
                        "6fb47933f2756a94a8e19b3d293e36959998e3f5"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply fractionalacc0.",
                        "VernacExtend",
                        "dae1017b938d9874b6d987fcc30f1b29399159ad"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro H5.",
                        "VernacExtend",
                        "df8458cb0188ba8e62e60b153cb1dc140bf39afb"
                    ]
                },
                {
                    "command": [
                        "case (not_Zeq_inf n m H5).",
                        "VernacExtend",
                        "093ba76169e0b6ef579d69fb91645dca3ec091cd"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply fractionalacc1.",
                        "VernacExtend",
                        "f23e5f86b41a611800e68f30130395b66b43d0c7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with n.",
                        "VernacExtend",
                        "fba1af7b7737e727e30b5060b80bb315bc817346"
                    ]
                },
                {
                    "command": [
                        "replace (n + (m - n))%Z with m.",
                        "VernacExtend",
                        "ce01da9344f751fd58aa7c9c3a72944fcad0c210"
                    ]
                },
                {
                    "command": [
                        "change (Z.succ n <= m)%Z in |- *.",
                        "VernacExtend",
                        "d730ca945f5a141bf19813484149a7652c88b882"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_lt_reg_l with (n - m)%Z.",
                        "VernacExtend",
                        "4b07130bb1c11f1b157295df83ca690d15788fc6"
                    ]
                },
                {
                    "command": [
                        "replace (n - m + (m - n))%Z with 0%Z.",
                        "VernacExtend",
                        "04ccd557377abe75e46b3f499f6dc2664e37e8c3"
                    ]
                },
                {
                    "command": [
                        "replace (n - m + m)%Z with n.",
                        "VernacExtend",
                        "23fd439af53591ef3578b8612710926c5b8d2e1d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Zminus in |- *.",
                        "VernacExtend",
                        "7085d4231409167767072da1bd24eb73ce98a683"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_left_lt.",
                        "VernacExtend",
                        "2634fab4a8b69d696d88cb2ffa3b4c79784a8e2b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply fractionalacc2.",
                        "VernacExtend",
                        "91897beaf2a96c78bfd8cbb49b86a49298b2e522"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "change (Z.succ 0 <= m)%Z in |- *.",
                        "VernacExtend",
                        "1a30e17c7db3229d0f5bc3ef376ff2bfdf080e2f"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_le_reg_l with m.",
                        "VernacExtend",
                        "26253669c7fbb9259e3bf1e9483ac9194e401d5a"
                    ]
                },
                {
                    "command": [
                        "replace (m + (n - m))%Z with n.",
                        "VernacExtend",
                        "db8ba6763ecb5c1b3ac897726b9e353278d58922"
                    ]
                },
                {
                    "command": [
                        "change (Z.succ m <= n)%Z in |- *.",
                        "VernacExtend",
                        "2248afbe797fc6b3a4713082d34ca348ed8a768c"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Zplus_lt_reg_l with (m - n)%Z.",
                        "VernacExtend",
                        "b5ceaf9721590cb0dfa8656237d883171aab1b61"
                    ]
                },
                {
                    "command": [
                        "replace (m - n + (n - m))%Z with 0%Z.",
                        "VernacExtend",
                        "9a2f9e1ac6d3a2952e1cce1f123aba088c2c42a9"
                    ]
                },
                {
                    "command": [
                        "replace (m - n + n)%Z with m.",
                        "VernacExtend",
                        "f31376fef6bdba217580b569a838a0556b66a991"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Zminus in |- *.",
                        "VernacExtend",
                        "7085d4231409167767072da1bd24eb73ce98a683"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_left_lt.",
                        "VernacExtend",
                        "2634fab4a8b69d696d88cb2ffa3b4c79784a8e2b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "change (Z.succ 0 <= y)%Z in |- *.",
                        "VernacExtend",
                        "dbc7a4a909782ebdb0c2f80f2ca74c5d4d364cb0"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "change (Z.succ 0 <= x)%Z in |- *.",
                        "VernacExtend",
                        "a235bb1b074aaefb51d09124d3f23a1cbef2ef23"
                    ]
                },
                {
                    "command": [
                        "apply Zlt_le_succ.",
                        "VernacExtend",
                        "070de595889f014f0a173659377506422eb25080"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "absurd (y <= 0)%Z.",
                        "VernacExtend",
                        "ba4d7a0441d41498398873e1c95baa8d81a8c5ab"
                    ]
                },
                {
                    "command": [
                        "apply Zgt_not_le.",
                        "VernacExtend",
                        "b677cb24ebdb4758864967d9be1fb740fc73130e"
                    ]
                },
                {
                    "command": [
                        "Flip.",
                        "VernacExtend",
                        "8a36616bb0c1e47859f8e7474de3c43d210d67d5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "absurd (x <= 0)%Z.",
                        "VernacExtend",
                        "18b6b7b427f0340fcdda46f75db1605d46a0c953"
                    ]
                },
                {
                    "command": [
                        "apply Zgt_not_le.",
                        "VernacExtend",
                        "b677cb24ebdb4758864967d9be1fb740fc73130e"
                    ]
                },
                {
                    "command": [
                        "Flip.",
                        "VernacExtend",
                        "8a36616bb0c1e47859f8e7474de3c43d210d67d5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "fraction_encoding",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (s := (Z.sgn m * Z.sgn n)%Z) in *.",
                        "VernacExtend",
                        "5d532015847e5beab5aa5aaa765f169e2c1452a8"
                    ]
                },
                {
                    "command": [
                        "case (Z_dec s 0).",
                        "VernacExtend",
                        "ecd5c6089825c5a681ab71b810fbf66dd5813811"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "case s0.",
                        "VernacExtend",
                        "a22ff67b3b893ca8d20fce9cac3c70ad94d717c5"
                    ]
                },
                {
                    "command": [
                        "intro z.",
                        "VernacExtend",
                        "4eaa711923e3411ac49bd57d091f8de45ca09388"
                    ]
                },
                {
                    "command": [
                        "refine (Qneg (positive_fraction_encoding (Z.abs m) (Z.abs n) _ _)).",
                        "VernacExtend",
                        "58b407f8b313be3b0e2f2c89790c22ba8300fe85"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_11.",
                        "VernacExtend",
                        "b9a57b7352a87a95b95a1b55b110f28bf362f682"
                    ]
                },
                {
                    "command": [
                        "generalize (Zorder.Zlt_not_eq _ _ z).",
                        "VernacExtend",
                        "f8c0b56514f51dc1558093c311f8c32be16bc245"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "unfold s in |- *.",
                        "VernacExtend",
                        "468b9a7311ea5214f512899350df06f1241bf032"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_11.",
                        "VernacExtend",
                        "b9a57b7352a87a95b95a1b55b110f28bf362f682"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro z.",
                        "VernacExtend",
                        "4eaa711923e3411ac49bd57d091f8de45ca09388"
                    ]
                },
                {
                    "command": [
                        "refine (Qpos (positive_fraction_encoding (Z.abs m) (Z.abs n) _ _)).",
                        "VernacExtend",
                        "06c9dab3074a25433591cbab4e983809487d4df1"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_11.",
                        "VernacExtend",
                        "b9a57b7352a87a95b95a1b55b110f28bf362f682"
                    ]
                },
                {
                    "command": [
                        "generalize (Zgt_not_eq _ _ z).",
                        "VernacExtend",
                        "7c75df448f26093b725659fc598b48d2e24baf4a"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "unfold s in |- *.",
                        "VernacExtend",
                        "468b9a7311ea5214f512899350df06f1241bf032"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply Zabs_11.",
                        "VernacExtend",
                        "b9a57b7352a87a95b95a1b55b110f28bf362f682"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "exact Zero.",
                        "VernacExtend",
                        "8491d5c35f88b2fe0ca4d7d291f62d8c9a74a26b"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_equal_1",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intros a b Ha Hb H1 H2.",
                        "VernacExtend",
                        "49c7571fda6f542f28983fee9784089cdb29837a"
                    ]
                },
                {
                    "command": [
                        "generalize Ha Hb H2.",
                        "VernacExtend",
                        "925fe3747544100ce1ac1644e275429073f8d79c"
                    ]
                },
                {
                    "command": [
                        "clear Ha Hb H2.",
                        "VernacExtend",
                        "0214c0c7a77f54f9312a99ef043c2e9bd91790b9"
                    ]
                },
                {
                    "command": [
                        "pattern a, b, H1 in |- *.",
                        "VernacExtend",
                        "1c5bbda5bebbd56c3a1e640e26eb1c57a7b1a4b8"
                    ]
                },
                {
                    "command": [
                        "elim H1 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "05a2cc9d1449d558f1ad4a1951fc24314fe33765"
                    ]
                },
                {
                    "command": [
                        "intros m n e Ha Hb H3; generalize e Ha Hb; clear e Ha Hb; pattern m, n, H3 in |- *; elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "284364ddd115128e0942f1842aaedf1707ac122e"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H_falsum]; Irreflex | trivial ].",
                        "VernacExtend",
                        "566fccfe8c405af52592934f9e7a26c919bfe026"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros m n z z0 H1' H_ind Ha Hb H3.",
                        "VernacExtend",
                        "249a78203e930f18a133c238cdf8367b6a774cdb"
                    ]
                },
                {
                    "command": [
                        "generalize z z0 H1' H_ind Ha Hb.",
                        "VernacExtend",
                        "0cc503fbc2d80d4690b113e3d67b76e1a80161f5"
                    ]
                },
                {
                    "command": [
                        "clear a b H1 z z0 H_ind H1' Ha Hb.",
                        "VernacExtend",
                        "fa49f6b8043dbf7be20a6d3531c322453091b7a6"
                    ]
                },
                {
                    "command": [
                        "pattern m, n, H3 in |- *.",
                        "VernacExtend",
                        "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
                    ]
                },
                {
                    "command": [
                        "elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "95694b1e92638c317cd8a4694fec56e6055eda91"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
                        "VernacExtend",
                        "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
                        "VernacExtend",
                        "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
                    ]
                },
                {
                    "command": [
                        "intros m n z z0 H1' H_ind Ha Hb H3.",
                        "VernacExtend",
                        "249a78203e930f18a133c238cdf8367b6a774cdb"
                    ]
                },
                {
                    "command": [
                        "generalize z z0 H1' H_ind Ha Hb.",
                        "VernacExtend",
                        "0cc503fbc2d80d4690b113e3d67b76e1a80161f5"
                    ]
                },
                {
                    "command": [
                        "clear a b H1 z z0 H_ind H1' Ha Hb.",
                        "VernacExtend",
                        "fa49f6b8043dbf7be20a6d3531c322453091b7a6"
                    ]
                },
                {
                    "command": [
                        "pattern m, n, H3 in |- *.",
                        "VernacExtend",
                        "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
                    ]
                },
                {
                    "command": [
                        "elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "95694b1e92638c317cd8a4694fec56e6055eda91"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
                        "VernacExtend",
                        "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
                        "VernacExtend",
                        "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_equal",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "intros a b Ha1 Ha2 Hb1 Hb2 H1 H2.",
                        "VernacExtend",
                        "64a833700adc267bbace3353d0ffcae9f71d53ba"
                    ]
                },
                {
                    "command": [
                        "generalize Ha1 Hb1 Ha2 Hb2 H2.",
                        "VernacExtend",
                        "18c6b8c2ba241f742ff206c1292305575c8d4bb7"
                    ]
                },
                {
                    "command": [
                        "clear Ha1 Hb1 Ha2 Hb2 H2.",
                        "VernacExtend",
                        "c25bece2eaf7f9e61c158c9f0a53c24bdfe5b2fd"
                    ]
                },
                {
                    "command": [
                        "pattern a, b, H1 in |- *.",
                        "VernacExtend",
                        "1c5bbda5bebbd56c3a1e640e26eb1c57a7b1a4b8"
                    ]
                },
                {
                    "command": [
                        "elim H1 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "05a2cc9d1449d558f1ad4a1951fc24314fe33765"
                    ]
                },
                {
                    "command": [
                        "intros m n e Ha3 Hb3 Ha4 Hb4 H3; generalize e Ha3 Hb3 Ha4 Hb4; clear e Ha3 Hb3 Ha4 Hb4; pattern m, n, H3 in |- *; elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "32753c5bd33158c9b949e4129734069052744c38"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H_falsum]; Irreflex | trivial ].",
                        "VernacExtend",
                        "566fccfe8c405af52592934f9e7a26c919bfe026"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros m n z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4 H3.",
                        "VernacExtend",
                        "644521dd9e172c9ae491a47d78f236435a6c8ff4"
                    ]
                },
                {
                    "command": [
                        "generalize z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4.",
                        "VernacExtend",
                        "c66fea0b78367021d35187877482c98d7d673c22"
                    ]
                },
                {
                    "command": [
                        "clear a b H1 z z0 H_ind H1' Ha3 Hb3 Ha4 Hb4.",
                        "VernacExtend",
                        "22748a70a147ec1ff0714403b54904664fc9b1ee"
                    ]
                },
                {
                    "command": [
                        "pattern m, n, H3 in |- *.",
                        "VernacExtend",
                        "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
                    ]
                },
                {
                    "command": [
                        "elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "95694b1e92638c317cd8a4694fec56e6055eda91"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
                        "VernacExtend",
                        "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H11| H_falsum] | trivial ]; [ apply f_equal with Qpositive; apply H_ind | Irreflex ].",
                        "VernacExtend",
                        "416a09c80b7c7099884cd1f2671c2b44ef63bec4"
                    ]
                },
                {
                    "command": [
                        "intros m n z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4 H3.",
                        "VernacExtend",
                        "644521dd9e172c9ae491a47d78f236435a6c8ff4"
                    ]
                },
                {
                    "command": [
                        "generalize z z0 H1' H_ind Ha3 Hb3 Ha4 Hb4.",
                        "VernacExtend",
                        "c66fea0b78367021d35187877482c98d7d673c22"
                    ]
                },
                {
                    "command": [
                        "clear a b H1 z z0 H_ind H1' Ha3 Hb3 Ha4 Hb4.",
                        "VernacExtend",
                        "22748a70a147ec1ff0714403b54904664fc9b1ee"
                    ]
                },
                {
                    "command": [
                        "pattern m, n, H3 in |- *.",
                        "VernacExtend",
                        "5ac03e0c83eb546493c78ff59c5d6bba970e89e6"
                    ]
                },
                {
                    "command": [
                        "elim H3 using fractionalAcc_ind_dep.",
                        "VernacExtend",
                        "95694b1e92638c317cd8a4694fec56e6055eda91"
                    ]
                },
                {
                    "command": [
                        "intros; Irreflex.",
                        "VernacExtend",
                        "9e27c6923e03cdaf95c61db29cd69a1ef8f3cf02"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
                        "VernacExtend",
                        "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *; case (Z_dec' m0 n0); [ intros [H_falsum| H11] | trivial ]; [ Irreflex | apply f_equal with Qpositive; apply H_ind ].",
                        "VernacExtend",
                        "28861ad772d8b66aa2323e4cff0fa3432e2b98e4"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_equal_strong",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "intros; subst; apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "ba8b3b8da9157c6b03c768df55329b2e16560944"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_0",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (encoding_algorithm m m Hm Hm (fractionalacc0 m m (refl_equal m))).",
                        "VernacExtend",
                        "0a5badcaeacb7b663bf0793cdd5f0185b2c9666d"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_equal_strong.",
                        "VernacExtend",
                        "699110e84962a8558313e6ac3b198081e9991cb0"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "symmetry in |- *.",
                        "VernacExtend",
                        "dc33a39a53e296ef5e59fd831d55212be2a42f22"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; case (Z_dec' m m); [ intros [H_falsum| H_falsum] | trivial ]; Irreflex.",
                        "VernacExtend",
                        "7a613c42d008aedf41b95f9972bd1d7b93e2b4ce"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_1",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (encoding_algorithm m n Hm Hn (fractionalacc1 m n Hm H0 H')).",
                        "VernacExtend",
                        "e654db555ab54fd196994dd1f60112b1585c7212"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "ff8661672fe977fe1bfb1462ec00162392e51451"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; case (Z_dec' m n); [ intros [H_11| H_falsum] | intro H_falsum ]; Irreflex; apply f_equal with Qpositive; apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "1e997daad938301acd7ad744804c08739164b18b"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "encoding_algorithm_2",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply trans_eq with (encoding_algorithm m n Hm Hn (fractionalacc2 m n Hn H0 H')).",
                        "VernacExtend",
                        "4b06051c341c1c531e9c96151745bdd054c805fa"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "ff8661672fe977fe1bfb1462ec00162392e51451"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; case (Z_dec' m n); [ intros [H_11| H_falsum] | intro H_falsum ]; Irreflex; apply f_equal with Qpositive; apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "1e997daad938301acd7ad744804c08739164b18b"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "positive_fraction_encoding_equal",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold positive_fraction_encoding in |- *.",
                        "VernacExtend",
                        "83f5ca7ad1e5516826107b30def13eb5d201a140"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_equal.",
                        "VernacExtend",
                        "ff8661672fe977fe1bfb1462ec00162392e51451"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "positive_fraction_encoding_equal_strong",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold positive_fraction_encoding in |- *.",
                        "VernacExtend",
                        "83f5ca7ad1e5516826107b30def13eb5d201a140"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_equal_strong.",
                        "VernacExtend",
                        "699110e84962a8558313e6ac3b198081e9991cb0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "positive_fraction_encoding_0",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold positive_fraction_encoding in |- *.",
                        "VernacExtend",
                        "83f5ca7ad1e5516826107b30def13eb5d201a140"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_0.",
                        "VernacExtend",
                        "3033fc80bdfa912afac4b9258711ad9c4fac71fb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "positive_fraction_encoding_1",
            "line_nb": 233,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold positive_fraction_encoding in |- *.",
                        "VernacExtend",
                        "83f5ca7ad1e5516826107b30def13eb5d201a140"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_1.",
                        "VernacExtend",
                        "d40a04058211fed29c5f25bbc8fe3185f5f76835"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "positive_fraction_encoding_2",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold positive_fraction_encoding in |- *.",
                        "VernacExtend",
                        "83f5ca7ad1e5516826107b30def13eb5d201a140"
                    ]
                },
                {
                    "command": [
                        "apply encoding_algorithm_2.",
                        "VernacExtend",
                        "acc30666a183637f5576600a760f86b551781bbf"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}