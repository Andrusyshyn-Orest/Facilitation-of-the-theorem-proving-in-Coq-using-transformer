{
    "filename": "Metalib/CoqMSetDecide.v",
    "coq_project": "metalib",
    "vernac_cmds": [
        [
            "Require Import Decidable DecidableTypeEx MSetFacts Setoid.",
            "VernacRequire",
            "5a8dacdc21789b09cfc59359752fc02207a09321"
        ],
        [
            "Module WDecide_fun (E : DecidableType)(Import M : WSetsOn E).",
            "VernacDefineModule",
            "c316e03766a3d124356410fa92aaeca6693bfadb"
        ],
        [
            "Module F := MSetFacts.WFactsOn E M.",
            "VernacDefineModule",
            "e7e8515840447aa58404df0c00c07fb9bfa97010"
        ],
        [
            "Module FSetLogicalFacts.",
            "VernacDefineModule",
            "8b7f32eb5a9659050660380fcc5cbc8dd447698c"
        ],
        [
            "Export Decidable.",
            "VernacImport",
            "66eb7e6a2950df9ca4d095189589cd0014f2ef2d"
        ],
        [
            "Export Setoid.",
            "VernacImport",
            "46cff0d3f01da9aad58f8269ed818c10f3288829"
        ],
        [
            "Tactic Notation \"fold\" \"any\" \"not\" := repeat ( match goal with | H: context [?P -> False] |- _ => fold (~ P) in H | |- context [?P -> False] => fold (~ P) end).",
            "VernacExtend",
            "81210c2d2bd57a41909c294f7108b62f43a7b8d2"
        ],
        [
            "Ltac or_not_l_iff P Q tac := (rewrite (or_not_l_iff_1 P Q) by tac) || (rewrite (or_not_l_iff_2 P Q) by tac).",
            "VernacExtend",
            "c1a831c48b87c040dfab64457d8a86108204da07"
        ],
        [
            "Ltac or_not_r_iff P Q tac := (rewrite (or_not_r_iff_1 P Q) by tac) || (rewrite (or_not_r_iff_2 P Q) by tac).",
            "VernacExtend",
            "e19f72051159c7757af0eea129d3d31d29b7c2dd"
        ],
        [
            "Ltac or_not_l_iff_in P Q H tac := (rewrite (or_not_l_iff_1 P Q) in H by tac) || (rewrite (or_not_l_iff_2 P Q) in H by tac).",
            "VernacExtend",
            "1a4e6fa08dc14c6de4674cda1bd9ede1d81d9ecb"
        ],
        [
            "Ltac or_not_r_iff_in P Q H tac := (rewrite (or_not_r_iff_1 P Q) in H by tac) || (rewrite (or_not_r_iff_2 P Q) in H by tac).",
            "VernacExtend",
            "a8d9517a96a4020a44dd621ddd62fc57d16b5925"
        ],
        [
            "Tactic Notation \"push\" \"not\" \"using\" ident(db) := let dec := solve_decidable using db in unfold not, iff; repeat ( match goal with | |- context [True -> False] => rewrite not_true_iff | |- context [False -> False] => rewrite not_false_iff | |- context [(?P -> False) -> False] => rewrite (not_not_iff P) by dec | |- context [(?P -> False) -> (?Q -> False)] => rewrite (contrapositive P Q) by dec | |- context [(?P -> False) \\/ ?Q] => or_not_l_iff P Q dec | |- context [?P \\/ (?Q -> False)] => or_not_r_iff P Q dec | |- context [(?P -> False) -> ?Q] => rewrite (imp_not_l P Q) by dec | |- context [?P \\/ ?Q -> False] => rewrite (not_or_iff P Q) | |- context [?P /\\ ?Q -> False] => rewrite (not_and_iff P Q) | |- context [(?P -> ?Q) -> False] => rewrite (not_imp_iff P Q) by dec end); fold any not.",
            "VernacExtend",
            "049c131f6b2a8123da1e0103eeb3f0c5fb7fc795"
        ],
        [
            "Tactic Notation \"push\" \"not\" := push not using core.",
            "VernacExtend",
            "0af9897d39ae77b7cbf155da0a3893205d6411da"
        ],
        [
            "Tactic Notation \"push\" \"not\" \"in\" \"*\" \"|-\" \"using\" ident(db) := let dec := solve_decidable using db in unfold not, iff in * |-; repeat ( match goal with | H: context [True -> False] |- _ => rewrite not_true_iff in H | H: context [False -> False] |- _ => rewrite not_false_iff in H | H: context [(?P -> False) -> False] |- _ => rewrite (not_not_iff P) in H by dec | H: context [(?P -> False) -> (?Q -> False)] |- _ => rewrite (contrapositive P Q) in H by dec | H: context [(?P -> False) \\/ ?Q] |- _ => or_not_l_iff_in P Q H dec | H: context [?P \\/ (?Q -> False)] |- _ => or_not_r_iff_in P Q H dec | H: context [(?P -> False) -> ?Q] |- _ => rewrite (imp_not_l P Q) in H by dec | H: context [?P \\/ ?Q -> False] |- _ => rewrite (not_or_iff P Q) in H | H: context [?P /\\ ?Q -> False] |- _ => rewrite (not_and_iff P Q) in H | H: context [(?P -> ?Q) -> False] |- _ => rewrite (not_imp_iff P Q) in H by dec end); fold any not.",
            "VernacExtend",
            "34c0177e8d0799174f761ea418b8c90d74ea4c86"
        ],
        [
            "Tactic Notation \"push\" \"not\" \"in\" \"*\" \"|-\" := push not in * |- using core.",
            "VernacExtend",
            "9cff4a2c3257dd0ed46ed1f379dd90db4b7a6b11"
        ],
        [
            "Tactic Notation \"push\" \"not\" \"in\" \"*\" \"using\" ident(db) := push not using db; push not in * |- using db.",
            "VernacExtend",
            "20c795df5c081db29d96c122e70ac09dcb8c5c19"
        ],
        [
            "Tactic Notation \"push\" \"not\" \"in\" \"*\" := push not in * using core.",
            "VernacExtend",
            "306569dea0079aca255e6810161bb381191acd57"
        ],
        [
            "Lemma test_push : forall P Q R : Prop, decidable P -> decidable Q -> (~ True) -> (~ False) -> (~ ~ P) -> (~ (P /\\ Q) -> ~ R) -> ((P /\\ Q) \\/ ~ R) -> (~ (P /\\ Q) \\/ R) -> (R \\/ ~ (P /\\ Q)) -> (~ R \\/ (P /\\ Q)) -> (~ P -> R) -> (~ ((R -> P) \\/ (Q -> R))) -> (~ (P /\\ R)) -> (~ (P -> R)) -> True.",
            "VernacStartTheoremProof",
            "40a89fea1f577e1e2da4d1d9f96052adaa5373b5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "push not in *.",
            "VernacExtend",
            "c25126c643f198bb2af33c592b4ac591d5daf779"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Tactic Notation \"pull\" \"not\" \"using\" ident(db) := let dec := solve_decidable using db in unfold not, iff; repeat ( match goal with | |- context [True -> False] => rewrite not_true_iff | |- context [False -> False] => rewrite not_false_iff | |- context [(?P -> False) -> False] => rewrite (not_not_iff P) by dec | |- context [(?P -> False) -> (?Q -> False)] => rewrite (contrapositive P Q) by dec | |- context [(?P -> False) \\/ ?Q] => or_not_l_iff P Q dec | |- context [?P \\/ (?Q -> False)] => or_not_r_iff P Q dec | |- context [(?P -> False) -> ?Q] => rewrite (imp_not_l P Q) by dec | |- context [(?P -> False) /\\ (?Q -> False)] => rewrite <- (not_or_iff P Q) | |- context [?P -> ?Q -> False] => rewrite <- (not_and_iff P Q) | |- context [?P /\\ (?Q -> False)] => rewrite <- (not_imp_iff P Q) by dec | |- context [(?Q -> False) /\\ ?P] => rewrite <- (not_imp_rev_iff P Q) by dec end); fold any not.",
            "VernacExtend",
            "9f7744278bc75714d6f929ae1fe1f6de19e986fc"
        ],
        [
            "Tactic Notation \"pull\" \"not\" := pull not using core.",
            "VernacExtend",
            "2d14bbb0591fe64ee438a6c34f356785184cdbd1"
        ],
        [
            "Tactic Notation \"pull\" \"not\" \"in\" \"*\" \"|-\" \"using\" ident(db) := let dec := solve_decidable using db in unfold not, iff in * |-; repeat ( match goal with | H: context [True -> False] |- _ => rewrite not_true_iff in H | H: context [False -> False] |- _ => rewrite not_false_iff in H | H: context [(?P -> False) -> False] |- _ => rewrite (not_not_iff P) in H by dec | H: context [(?P -> False) -> (?Q -> False)] |- _ => rewrite (contrapositive P Q) in H by dec | H: context [(?P -> False) \\/ ?Q] |- _ => or_not_l_iff_in P Q H dec | H: context [?P \\/ (?Q -> False)] |- _ => or_not_r_iff_in P Q H dec | H: context [(?P -> False) -> ?Q] |- _ => rewrite (imp_not_l P Q) in H by dec | H: context [(?P -> False) /\\ (?Q -> False)] |- _ => rewrite <- (not_or_iff P Q) in H | H: context [?P -> ?Q -> False] |- _ => rewrite <- (not_and_iff P Q) in H | H: context [?P /\\ (?Q -> False)] |- _ => rewrite <- (not_imp_iff P Q) in H by dec | H: context [(?Q -> False) /\\ ?P] |- _ => rewrite <- (not_imp_rev_iff P Q) in H by dec end); fold any not.",
            "VernacExtend",
            "86ce0d213d87bf9541936c5a2fa1ff57fdcda218"
        ],
        [
            "Tactic Notation \"pull\" \"not\" \"in\" \"*\" \"|-\" := pull not in * |- using core.",
            "VernacExtend",
            "ebedf76942cd3a7954bb7999a929cf6bf1d2fce4"
        ],
        [
            "Tactic Notation \"pull\" \"not\" \"in\" \"*\" \"using\" ident(db) := pull not using db; pull not in * |- using db.",
            "VernacExtend",
            "b75ac809d008b966c9945693207500820f353c74"
        ],
        [
            "Tactic Notation \"pull\" \"not\" \"in\" \"*\" := pull not in * using core.",
            "VernacExtend",
            "75cac8abb01f3819a2ec74baa2029f5ff2c155ae"
        ],
        [
            "Lemma test_pull : forall P Q R : Prop, decidable P -> decidable Q -> (~ True) -> (~ False) -> (~ ~ P) -> (~ (P /\\ Q) -> ~ R) -> ((P /\\ Q) \\/ ~ R) -> (~ (P /\\ Q) \\/ R) -> (R \\/ ~ (P /\\ Q)) -> (~ R \\/ (P /\\ Q)) -> (~ P -> R) -> (~ (R -> P) /\\ ~ (Q -> R)) -> (~ P \\/ ~ R) -> (P /\\ ~ R) -> (~ R /\\ P) -> True.",
            "VernacStartTheoremProof",
            "feee83a8eed4c8ca9d63a63be0e0aa66831362b3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pull not in *.",
            "VernacExtend",
            "d55fd5cf7eae1f811e21162c8e82cc55e8d974e6"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FSetLogicalFacts.",
            "VernacEndSegment",
            "753c1a0ff5abf566520ec675a84e08a81ca78e8b"
        ],
        [
            "Import FSetLogicalFacts.",
            "VernacImport",
            "bcd8ac22ea6685c2fa33b8e6f41fc4876085aee0"
        ],
        [
            "Module FSetDecideAuxiliary.",
            "VernacDefineModule",
            "968b84306e0d509d101acdf963bff34977b8d682"
        ],
        [
            "Tactic Notation \"if\" tactic(t) \"then\" tactic(t1) \"else\" tactic(t2) := first [ t; first [ t1 | fail 2 ] | t2 ].",
            "VernacExtend",
            "567d78d09630f3afb077930ab0ba25986dc89481"
        ],
        [
            "Tactic Notation \"prop\" constr(P) \"holds\" \"by\" tactic(t) := let H := fresh in assert P as H by t; clear H.",
            "VernacExtend",
            "b35ebd44089b4b2fdd5a3f5e0887c9a9e6079151"
        ],
        [
            "Tactic Notation \"assert\" \"new\" constr(e) \"by\" tactic(t) := match goal with | H: e |- _ => fail 1 | _ => assert e by t end.",
            "VernacExtend",
            "80bcde5d8f81192e1fe017e4670ec0c405c2b4aa"
        ],
        [
            "Tactic Notation \"subst\" \"++\" := repeat ( match goal with | x : _ |- _ => subst x end); cbv zeta beta in *.",
            "VernacExtend",
            "0a74bf41e6f15559bb0ea7b55cf94d98fa1c5860"
        ],
        [
            "Tactic Notation \"decompose\" \"records\" := repeat ( match goal with | H: _ |- _ => progress (decompose record H); clear H end).",
            "VernacExtend",
            "e2fc9ea3f578ede0cc53f0dcbc90a56074bf8eed"
        ],
        [
            "Inductive FSet_elt_Prop : Prop -> Prop := | eq_Prop : forall (S : Type) (x y : S), FSet_elt_Prop (x = y) | eq_elt_prop : forall x y, FSet_elt_Prop (E.eq x y) | In_elt_prop : forall x s, FSet_elt_Prop (In x s) | True_elt_prop : FSet_elt_Prop True | False_elt_prop : FSet_elt_Prop False | conj_elt_prop : forall P Q, FSet_elt_Prop P -> FSet_elt_Prop Q -> FSet_elt_Prop (P /\\ Q) | disj_elt_prop : forall P Q, FSet_elt_Prop P -> FSet_elt_Prop Q -> FSet_elt_Prop (P \\/ Q) | impl_elt_prop : forall P Q, FSet_elt_Prop P -> FSet_elt_Prop Q -> FSet_elt_Prop (P -> Q) | not_elt_prop : forall P, FSet_elt_Prop P -> FSet_elt_Prop (~ P).",
            "VernacInductive",
            "8f848efdc161ace4f41dffb9cc553f44353ff3ef"
        ],
        [
            "Inductive FSet_Prop : Prop -> Prop := | elt_FSet_Prop : forall P, FSet_elt_Prop P -> FSet_Prop P | Empty_FSet_Prop : forall s, FSet_Prop (Empty s) | Subset_FSet_Prop : forall s1 s2, FSet_Prop (Subset s1 s2) | Equal_FSet_Prop : forall s1 s2, FSet_Prop (Equal s1 s2).",
            "VernacInductive",
            "810acba4db466fe30089f160a82d1d876838d0af"
        ],
        [
            "Hint Constructors FSet_elt_Prop FSet_Prop : FSet_Prop.",
            "VernacHints",
            "3a7d4261d3286a86f2b6d7f057248a34dae942dd"
        ],
        [
            "Ltac discard_nonFSet := repeat ( match goal with | H : ?P |- _ => if prop (FSet_Prop P) holds by (auto 100 with FSet_Prop) then fail else clear H end).",
            "VernacExtend",
            "d26286c629968512e656bdeff947d72ec5661cec"
        ],
        [
            "Hint Rewrite F.empty_iff F.singleton_iff F.add_iff F.remove_iff F.union_iff F.inter_iff F.diff_iff : set_simpl.",
            "VernacExtend",
            "e3f02462aea79dd5a409aace2d43183fcb1a1c74"
        ],
        [
            "Lemma dec_In : forall x s, decidable (In x s).",
            "VernacStartTheoremProof",
            "55da3e063fd87269135bb9a530fb614a77f4e99e"
        ],
        [
            "red; intros; generalize (F.mem_iff s x); case (mem x s); intuition.",
            "VernacExtend",
            "4e563fde95f98d9fdad2b36855e389c726396e51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dec_eq : forall (x y : E.t), decidable (E.eq x y).",
            "VernacStartTheoremProof",
            "78f3e8b142a007d245fca0d1404134531dce9273"
        ],
        [
            "red; intros x y; destruct (E.eq_dec x y); auto.",
            "VernacExtend",
            "9de6f04f85b297a2fd600ba2be5ae0304ea34c51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve dec_In dec_eq : FSet_decidability.",
            "VernacHints",
            "badd57939faa388197aeb0571af70c91805ebe71"
        ],
        [
            "Ltac change_to_E_t := repeat ( match goal with | H : ?T |- _ => progress (change T with E.t in H); repeat ( match goal with | J : _ |- _ => progress (change T with E.t in J) | |- _ => progress (change T with E.t) end ) | H : forall x : ?T, _ |- _ => progress (change T with E.t in H); repeat ( match goal with | J : _ |- _ => progress (change T with E.t in J) | |- _ => progress (change T with E.t) end ) end).",
            "VernacExtend",
            "5547907826a3a546b1f4d8d1bfdfda4a0b70ffc5"
        ],
        [
            "Ltac Logic_eq_to_E_eq := repeat ( match goal with | H: _ |- _ => progress (change (@Logic.eq E.t) with E.eq in H) | |- _ => progress (change (@Logic.eq E.t) with E.eq) end).",
            "VernacExtend",
            "7ffe64fdf6635eb4af3044b497332b3bf26f27e4"
        ],
        [
            "Ltac E_eq_to_Logic_eq := repeat ( match goal with | H: _ |- _ => progress (change E.eq with (@Logic.eq E.t) in H) | |- _ => progress (change E.eq with (@Logic.eq E.t)) end).",
            "VernacExtend",
            "c7ce2be313846c4f81b7b7dc3dd3f418e918387d"
        ],
        [
            "Ltac substFSet := repeat ( match goal with | H: E.eq ?x ?y |- _ => rewrite H in *; clear H end).",
            "VernacExtend",
            "1404c383611d1a89a5409e163ea1802aebea2575"
        ],
        [
            "Ltac assert_decidability := repeat ( match goal with | H: context [~ E.eq ?x ?y] |- _ => assert new (E.eq x y \\/ ~ E.eq x y) by (apply dec_eq) | H: context [~ In ?x ?s] |- _ => assert new (In x s \\/ ~ In x s) by (apply dec_In) | |- context [~ E.eq ?x ?y] => assert new (E.eq x y \\/ ~ E.eq x y) by (apply dec_eq) | |- context [~ In ?x ?s] => assert new (In x s \\/ ~ In x s) by (apply dec_In) end); repeat ( match goal with | _: ~ ?P, H : ?P \\/ ~ ?P |- _ => clear H end).",
            "VernacExtend",
            "e9101456a82eeca2e70bcf97cec9b79f9012d620"
        ],
        [
            "Ltac inst_FSet_hypotheses := repeat ( match goal with | H : forall a : E.t, _, _ : context [ In ?x _ ] |- _ => let P := type of (H x) in assert new P by (exact (H x)) | H : forall a : E.t, _ |- context [ In ?x _ ] => let P := type of (H x) in assert new P by (exact (H x)) | H : forall a : E.t, _, _ : context [ E.eq ?x _ ] |- _ => let P := type of (H x) in assert new P by (exact (H x)) | H : forall a : E.t, _ |- context [ E.eq ?x _ ] => let P := type of (H x) in assert new P by (exact (H x)) | H : forall a : E.t, _, _ : context [ E.eq _ ?x ] |- _ => let P := type of (H x) in assert new P by (exact (H x)) | H : forall a : E.t, _ |- context [ E.eq _ ?x ] => let P := type of (H x) in assert new P by (exact (H x)) end); repeat ( match goal with | H : forall a : E.t, _ |- _ => clear H end).",
            "VernacExtend",
            "11ce89d827c176a4e85dadd2573626345abd396f"
        ],
        [
            "Hint Resolve (E.eq_equiv.(@Equivalence_Reflexive _ _)) : FSet_Auto.",
            "VernacHints",
            "ae6b340062427873abea9541ce661096a3a8ddfc"
        ],
        [
            "Ltac fsetdec_rec := auto with FSet_Auto; subst++; try (match goal with | H: E.eq ?x ?x -> False |- _ => destruct H end); (reflexivity || contradiction || (progress substFSet; intuition fsetdec_rec)).",
            "VernacExtend",
            "3f33f6ff84c8e73a44defe33a658f073214d9b55"
        ],
        [
            "Ltac fsetdec_body := inst_FSet_hypotheses; autorewrite with set_simpl in *; push not in * using FSet_decidability; substFSet; assert_decidability; auto with FSet_Auto; (intuition fsetdec_rec) || fail 1 \"because the goal is beyond the scope of this tactic\".",
            "VernacExtend",
            "551459e8a92a338c429c6f13be8115cbf889d5a1"
        ],
        [
            "End FSetDecideAuxiliary.",
            "VernacEndSegment",
            "1239806e41729a728675d9a1f0eb0e1d351673b2"
        ],
        [
            "Import FSetDecideAuxiliary.",
            "VernacImport",
            "3ca6e358388d613712053d021c93b5453bb4ce95"
        ],
        [
            "Ltac fsetdec := unfold iff in *; fold any not; intros; decompose records; discard_nonFSet; unfold Empty, Subset, Equal in *; intros; autorewrite with set_simpl in *; change_to_E_t; E_eq_to_Logic_eq; subst++; Logic_eq_to_E_eq; pull not using FSet_decidability; unfold not in *; match goal with | H: (In ?x ?r) -> False |- (In ?x ?s) -> False => contradict H; fsetdec_body | H: (In ?x ?r) -> False |- (E.eq ?x ?y) -> False => contradict H; fsetdec_body | H: (In ?x ?r) -> False |- (E.eq ?y ?x) -> False => contradict H; fsetdec_body | H: ?P -> False |- ?Q -> False => if prop (FSet_elt_Prop P) holds by (auto 100 with FSet_Prop) then (contradict H; fsetdec_body) else fsetdec_body | |- _ => fsetdec_body end.",
            "VernacExtend",
            "21f87ddae5eb44fc77860dccf878e2ec99c85945"
        ],
        [
            "Module FSetDecideTestCases.",
            "VernacDefineModule",
            "0222120cb541da2402ace19c6232261dcddf23d7"
        ],
        [
            "Lemma test_eq_trans_1 : forall x y z s, E.eq x y -> ~ ~ E.eq z y -> In x s -> In z s.",
            "VernacStartTheoremProof",
            "349d8ecf9512b45d13c2bfc91c540c0ac46eaa12"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_eq_trans_2 : forall x y z r s, In x (singleton y) -> ~ In z r -> ~ ~ In z (add y r) -> In x s -> In z s.",
            "VernacStartTheoremProof",
            "a67c5dc9d4ac5e225ca13830797a763fe8ab6f54"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_eq_neq_trans_1 : forall w x y z s, E.eq x w -> ~ ~ E.eq x y -> ~ E.eq y z -> In w s -> In w (remove z s).",
            "VernacStartTheoremProof",
            "ae26a0674a4aee413d7a28064384536937976026"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_eq_neq_trans_2 : forall w x y z r1 r2 s, In x (singleton w) -> ~ In x r1 -> In x (add y r1) -> In y r2 -> In y (remove z r2) -> In w s -> In w (remove z s).",
            "VernacStartTheoremProof",
            "d7c1a8a1509c7fc13ee245489ab5f428f214c9ed"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_In_singleton : forall x, In x (singleton x).",
            "VernacStartTheoremProof",
            "8bde1ea4e2280fa38548ae9e2f4430831086f32b"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_add_In : forall x y s, In x (add y s) -> ~ E.eq x y -> In x s.",
            "VernacStartTheoremProof",
            "1881f6ad61769dc71a9b7dafc9cee98278915141"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_Subset_add_remove : forall x s, s [<=] (add x (remove x s)).",
            "VernacStartTheoremProof",
            "dba7d8c51ec6ff72e126d85ac6d2a3028b111e67"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_eq_disjunction : forall w x y z, In w (add x (add y (singleton z))) -> E.eq w x \\/ E.eq w y \\/ E.eq w z.",
            "VernacStartTheoremProof",
            "df93beb320d370433468a22b9162b6456ac8c73c"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_not_In_disj : forall x y s1 s2 s3 s4, ~ In x (union s1 (union s2 (union s3 (add y s4)))) -> ~ (In x s1 \\/ In x s4 \\/ E.eq y x).",
            "VernacStartTheoremProof",
            "2f1f4390407abc227aee408d0b29a1236a3e8dc6"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_not_In_conj : forall x y s1 s2 s3 s4, ~ In x (union s1 (union s2 (union s3 (add y s4)))) -> ~ In x s1 /\\ ~ In x s4 /\\ ~ E.eq y x.",
            "VernacStartTheoremProof",
            "11b30a32f201612c718decad335fefd37f07c0b4"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_iff_conj : forall a x s s', (In a s' <-> E.eq x a \\/ In a s) -> (In a s' <-> In a (add x s)).",
            "VernacStartTheoremProof",
            "554be3ca98c1227ac32bb187e482063ee1a07855"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_set_ops_1 : forall x q r s, (singleton x) [<=] s -> Empty (union q r) -> Empty (inter (diff s q) (diff s r)) -> ~ In x s.",
            "VernacStartTheoremProof",
            "4b9a12432c166d93d1cad3f7889b40e9ed8d1f31"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_chain_test : forall x1 x2 x3 x4 s1 s2 s3 s4, Empty s1 -> In x2 (add x1 s1) -> In x3 s2 -> ~ In x3 (remove x2 s2) -> ~ In x4 s3 -> In x4 (add x3 s3) -> In x1 s4 -> Subset (add x4 s4) s4.",
            "VernacStartTheoremProof",
            "69954225de7ad83272c5876cf9c29df23b586bd6"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_too_complex : forall x y z r s, E.eq x y -> (In x (singleton y) -> r [<=] s) -> In z r -> In z s.",
            "VernacStartTheoremProof",
            "457e2708f8fa5409ecae7ddd02e372da43e7be81"
        ],
        [
            "intros until s; intros Heq H Hr; lapply H; fsetdec.",
            "VernacExtend",
            "5f3dfb8e5d8f361bdc1d303df383a7419d8f490d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma function_test_1 : forall (f : t -> t), forall (g : elt -> elt), forall (s1 s2 : t), forall (x1 x2 : elt), Equal s1 (f s2) -> E.eq x1 (g (g x2)) -> In x1 s1 -> In (g (g x2)) (f s2).",
            "VernacStartTheoremProof",
            "cf24c8326e6deb9247a54093a34958362e79d134"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma function_test_2 : forall (f : t -> t), forall (g : elt -> elt), forall (s1 s2 : t), forall (x1 x2 : elt), Equal s1 (f s2) -> E.eq x1 (g x2) -> In x1 s1 -> g x2 = g (g x2) -> In (g (g x2)) (f s2).",
            "VernacStartTheoremProof",
            "8871fb2060b52ca5a07900fa7ef1ae67803cd65d"
        ],
        [
            "intros until 3.",
            "VernacExtend",
            "ff302bf5852981d9e67cf7ae7bc83794cf9c9928"
        ],
        [
            "intros g_eq.",
            "VernacExtend",
            "55696e44b20b66eeaac24b77d39e82fed13a6313"
        ],
        [
            "rewrite <- g_eq.",
            "VernacExtend",
            "b52d44c50c258581b64de2e1db33a4ad8f5c52e4"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_baydemir : forall (f : t -> t), forall (s : t), forall (x y : elt), In x (add y (f s)) -> ~ E.eq x y -> In x (f s).",
            "VernacStartTheoremProof",
            "7a16127071c89f64d3e312052a598f090f99f886"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_baydemir_2 : forall (x : elt) (s : t), Subset (inter (singleton x) s) empty -> ~ In x s.",
            "VernacStartTheoremProof",
            "89fc2703a337109a34ff69eb674b576e78edd742"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_baydemir_3 : forall (x y : elt) (s : t), ~ In x (add y s) -> x = y -> False.",
            "VernacStartTheoremProof",
            "e6b6d98025d0b9c13327e5607dd8e22e72346e9e"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_baydemir_4 : forall (x : elt) (s : t), Equal (inter (add x empty) s) empty -> ~ In x s.",
            "VernacStartTheoremProof",
            "8131bfaf3eb84a2d22d3cafb2a37c782f4e671b4"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma test_sweirich : forall (x : elt) (s : t), In x s -> Subset (singleton x) s.",
            "VernacStartTheoremProof",
            "6c5f198d58daa0b02aadb6fed6fbed3c375377f9"
        ],
        [
            "fsetdec.",
            "VernacExtend",
            "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FSetDecideTestCases.",
            "VernacEndSegment",
            "338ca5f7c4e6233a5928c8e92284e513788685e7"
        ],
        [
            "End WDecide_fun.",
            "VernacEndSegment",
            "6b94dd062f99de003e5b6dd304e0f76b7d48c05e"
        ],
        [
            "Require Import CoqMSetInterface.",
            "VernacRequire",
            "412273d32e53f00de1dbc3a4ac04dc6597815958"
        ],
        [
            "Module WDecide (M:WSets) := !WDecide_fun M.E M.",
            "VernacDefineModule",
            "4259912e7262dc023fc6eb6052b0046506ecf63f"
        ],
        [
            "Module Decide := WDecide.",
            "VernacDefineModule",
            "a068faf23871022a52e4426dddb859cdf4f29a15"
        ]
    ],
    "proofs": [
        {
            "name": "test_push",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "push not in *.",
                        "VernacExtend",
                        "c25126c643f198bb2af33c592b4ac591d5daf779"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_pull",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pull not in *.",
                        "VernacExtend",
                        "d55fd5cf7eae1f811e21162c8e82cc55e8d974e6"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dec_In",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "red; intros; generalize (F.mem_iff s x); case (mem x s); intuition.",
                        "VernacExtend",
                        "4e563fde95f98d9fdad2b36855e389c726396e51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dec_eq",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "red; intros x y; destruct (E.eq_dec x y); auto.",
                        "VernacExtend",
                        "9de6f04f85b297a2fd600ba2be5ae0304ea34c51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_eq_trans_1",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_eq_trans_2",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_eq_neq_trans_1",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_eq_neq_trans_2",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_In_singleton",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_add_In",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_Subset_add_remove",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_eq_disjunction",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_not_In_disj",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_not_In_conj",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_iff_conj",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_set_ops_1",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_chain_test",
            "line_nb": 102,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_too_complex",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "intros until s; intros Heq H Hr; lapply H; fsetdec.",
                        "VernacExtend",
                        "5f3dfb8e5d8f361bdc1d303df383a7419d8f490d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "function_test_1",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "function_test_2",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros until 3.",
                        "VernacExtend",
                        "ff302bf5852981d9e67cf7ae7bc83794cf9c9928"
                    ]
                },
                {
                    "command": [
                        "intros g_eq.",
                        "VernacExtend",
                        "55696e44b20b66eeaac24b77d39e82fed13a6313"
                    ]
                },
                {
                    "command": [
                        "rewrite <- g_eq.",
                        "VernacExtend",
                        "b52d44c50c258581b64de2e1db33a4ad8f5c52e4"
                    ]
                },
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_baydemir",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_baydemir_2",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_baydemir_3",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_baydemir_4",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "test_sweirich",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "fsetdec.",
                        "VernacExtend",
                        "d9651132b72f95a28a33945b2cbaaf1d88dd00d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}