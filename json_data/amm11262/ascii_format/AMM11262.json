{
    "filename": "ascii_format/AMM11262.v",
    "coq_project": "amm11262",
    "vernac_cmds": [
        [
            "Require Import Arith Omega.",
            "VernacRequire",
            "7f8e7c2ae08d85ede94e169d9bc690e35b0fe0d2"
        ],
        [
            "Require OrderedTypeEx.",
            "VernacRequire",
            "5aaf48a387991e90dc9e6df4f96826e0c4867dc3"
        ],
        [
            "Require FSetList.",
            "VernacRequire",
            "dafa3f60cbe7ff3107b870bbaa663a21b9119d3b"
        ],
        [
            "Module NatSet := FSetList.Make(OrderedTypeEx.Nat_as_OT).",
            "VernacDefineModule",
            "1bda3fac15e90bb5065be285d9857f12c81026d2"
        ],
        [
            "Import NatSet.",
            "VernacImport",
            "f51284e6787040d64207cb00c45dbb9f2da64250"
        ],
        [
            "Infix \"++\" := add (at level 60, right associativity).",
            "VernacInfix",
            "53271f2e90a55c0e7b2ea0db7a0f4f812c60d6cb"
        ],
        [
            "Notation \"s [=] t\" := (Equal s t) (at level 70, no associativity).",
            "VernacNotation",
            "fe66fdd33169c40e8504d8b0396ee6bbcf562ffb"
        ],
        [
            "Require FSetFacts FSetProperties.",
            "VernacRequire",
            "d040203d82a7286f3e5525f4777c19b679242eb8"
        ],
        [
            "Require Extraction.",
            "VernacRequire",
            "a069c64e62ed08461c719459a8307243d23db2df"
        ],
        [
            "Module GeneralProperties := FSetProperties.Properties NatSet.",
            "VernacDefineModule",
            "a6932bf983c38be0f75114b32befcc062040c693"
        ],
        [
            "Import GeneralProperties.",
            "VernacImport",
            "47ffb6935bec5fc88c33600b1bf6c990bc89c5bd"
        ],
        [
            "Section problem_knows_not_refl.",
            "VernacBeginSection",
            "e87cb05c068a60e8cf06d35c353acc226c3cd205"
        ],
        [
            "Variable town: t.",
            "VernacAssumption",
            "ed73caa321123a90dbd735767dc791658d6e7645"
        ],
        [
            "Variable n:nat.",
            "VernacAssumption",
            "07bef83858f70772f30ae2a622ca53ce45548b68"
        ],
        [
            "Variable cardinality: cardinal town = 2*n+1.",
            "VernacAssumption",
            "e59de4cd966360d2b6ab9b0b1b26e1bfc9b31b4d"
        ],
        [
            "Variable knows: elt -> elt -> Prop.",
            "VernacAssumption",
            "0240ef3d48398c5a5c97a88dc91ecca307ec2b10"
        ],
        [
            "Variable knows_sym: forall m n, knows m n -> knows n m.",
            "VernacAssumption",
            "6068d900e687a3b00cbc81fa631395f9f60bfce0"
        ],
        [
            "Variable knows_extensional:forall m n p, E.eq n p -> knows m n-> knows m p.",
            "VernacAssumption",
            "09d07ca140e35f3a3858e2629df6fbb7e4ed0c82"
        ],
        [
            "Variable property: forall B, Subset B town -> cardinal B = n -> {d:elt | In d (diff town B)/\\(forall b, In b B -> knows d b)}.",
            "VernacAssumption",
            "3138fdbe8d87a68f1c2cbff0775f6f51358ddb17"
        ],
        [
            "Lemma extendible_by_one:forall B', cardinal B' <= (cardinal town)-1 -> {d:elt| In d town /\\ ~(In d B')}.",
            "VernacStartTheoremProof",
            "321a028ffa7fd36aa5f78411d0ceb6048b5b81c3"
        ],
        [
            "clear knows knows_sym knows_extensional property.",
            "VernacExtend",
            "5053a209c032726fccf5f91d19c0fe7c410ded77"
        ],
        [
            "intros B' H_cardinal_town.",
            "VernacExtend",
            "390237cdf11889234f8e0d92333f1ba65c3378ce"
        ],
        [
            "assert (H_town:1<=(cardinal town)); [omega|].",
            "VernacExtend",
            "16b15d96eb47f6319b2e2dc95f3373b25267a50a"
        ],
        [
            "rewrite <- (diff_inter_cardinal town B') in H_cardinal_town.",
            "VernacExtend",
            "cf16e69473158720457d095612062208b99bb2f1"
        ],
        [
            "rewrite <- (diff_inter_cardinal town B') in H_town.",
            "VernacExtend",
            "37ab0f20bcd1d5f5217238da879d4ed86fa6f404"
        ],
        [
            "assert (H_inter:cardinal (inter town B') <= cardinal B'); [apply (subset_cardinal);apply (inter_subset_2)|].",
            "VernacExtend",
            "712ab8c197f4dd71ff90cf8be5c79389d9f90cf9"
        ],
        [
            "generalize (le_trans _ _ _ H_inter H_cardinal_town); intro H1.",
            "VernacExtend",
            "a0aa0d4b345f1f4d8912c0b0a337c9d211182934"
        ],
        [
            "assert (H2:1<=cardinal (diff town B')); [omega|].",
            "VernacExtend",
            "2e6423b8c6ec92445dc927afcc2e56e1a5ba9712"
        ],
        [
            "assert (H3:=(S_pred _ _ H2)).",
            "VernacExtend",
            "dce43516ab1a64a665ff364bc05074ae74df3735"
        ],
        [
            "destruct (cardinal_inv_2 H3) as [d Hd].",
            "VernacExtend",
            "87be3a0a1cbd624e0590777f5902ff84e4a90963"
        ],
        [
            "exists d; split.",
            "VernacExtend",
            "a1fcb883b1c5fcd25ed6ebd6b983148f883d1f7b"
        ],
        [
            "apply diff_1 with B'; assumption.",
            "VernacExtend",
            "1e05c94be4b191de58c93419f83a7b0f1acca7f5"
        ],
        [
            "apply diff_2 with town; assumption.",
            "VernacExtend",
            "54ffdb30dd7c536197e89c5a0da05dbd1c845d12"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extendible_to_n:forall B', Subset B' town -> cardinal B' <= n -> {B:t| cardinal B = n /\\ Subset B' B /\\ Subset B town}.",
            "VernacStartTheoremProof",
            "f3151206d26aeae3bf27e4bd9c83cbb55f1577e3"
        ],
        [
            "intros B' H_sub H_B'_cardinal.",
            "VernacExtend",
            "b0db108900d8faed68e050cdbb689e53c1debe9d"
        ],
        [
            "assert (H_cardinal_aux_3:2*n<=(cardinal town)-1);[apply le_trans with (2*n); omega|].",
            "VernacExtend",
            "7d6cb695ee3d9f9c00982c5c1c1199a005df5801"
        ],
        [
            "clear property.",
            "VernacExtend",
            "2114763744a84cd5ef0b8835d4c9b1eb54dc0949"
        ],
        [
            "induction n in H_B'_cardinal, H_cardinal_aux_3 |- *.",
            "VernacExtend",
            "e1e800a39bd7df00d7873de85eba82d5599d0fc9"
        ],
        [
            "generalize (sym_eq (le_n_O_eq _ H_B'_cardinal)); intro H_eq.",
            "VernacExtend",
            "6249a83531e1314d763c3625ced2fff4bb8e74fb"
        ],
        [
            "generalize (empty_is_empty_1 (cardinal_inv_1 H_eq)).",
            "VernacExtend",
            "c71ab865ae30214af55bc0da81ae80ca95607ebb"
        ],
        [
            "intro H_B'.",
            "VernacExtend",
            "7b559ff03550b73551c39048447ceaca7780c939"
        ],
        [
            "exists empty; repeat split.",
            "VernacExtend",
            "266e12f5f6ad7f55b6fb3ad431a4a35366173b09"
        ],
        [
            "rewrite H_B'; apply subset_empty.",
            "VernacExtend",
            "102d70e9cbba54088b61272c66e689094bfed047"
        ],
        [
            "apply subset_empty.",
            "VernacExtend",
            "df5eb1fe9c02b5a6cd43dd4897d16788683ae465"
        ],
        [
            "destruct (le_lt_eq_dec _ _ H_B'_cardinal) as [H_lt|H_le].",
            "VernacExtend",
            "b306eab014f91141f2094ba55d98cd2a0717c8d7"
        ],
        [
            "generalize (lt_n_Sm_le _ _ H_lt); clear H_lt; intro H_le.",
            "VernacExtend",
            "87b15b5e9e3bca70012e987589ff66989dd522aa"
        ],
        [
            "assert (H_cardinal_town_2:2 * n0 <= cardinal town - 1);[omega|].",
            "VernacExtend",
            "3e56178e6fef9a44a2ad990bfec319e569802e6b"
        ],
        [
            "destruct (IHn0 H_le H_cardinal_town_2) as [C [HC1 [HC2 HC3]]].",
            "VernacExtend",
            "50a56658bcc29377db822008854b096142586d82"
        ],
        [
            "assert (HC5:cardinal C <= cardinal town - 1).",
            "VernacExtend",
            "90913c6b69ff7f13a36b4f428964f824d7d289e0"
        ],
        [
            "rewrite HC1; apply le_trans with (2*(S n0));[omega| assumption].",
            "VernacExtend",
            "7c1da9d35f2a1103e2095539a560a22207d38545"
        ],
        [
            "destruct (extendible_by_one C HC5) as [d [Hd1 Hd2]].",
            "VernacExtend",
            "6e4df83a09c39e24adf5ec1bbf8704984b9ab8db"
        ],
        [
            "exists (d ++ C).",
            "VernacExtend",
            "588e9d5d43e5c0a1073dfa221d653c7f4e39631c"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "rewrite (add_cardinal_2 Hd2); rewrite HC1; reflexivity.",
            "VernacExtend",
            "635570542846dfd9227ad7d793d114f0e6be1ec7"
        ],
        [
            "apply subset_add_2; assumption.",
            "VernacExtend",
            "577f5fae80697ef48fa26bb173b344093f0427ae"
        ],
        [
            "apply subset_add_3; assumption.",
            "VernacExtend",
            "a1ac930a6b29e85b40068910c5014e1109686689"
        ],
        [
            "exists B'.",
            "VernacExtend",
            "bcb20d6cf63fc499dc5f940bb4e74610c8e37255"
        ],
        [
            "repeat split; trivial; apply subset_refl.",
            "VernacExtend",
            "d36cbdd116553b3ba38538384d7fcda3938e5dfa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inductive_invariant:forall m, m<= n -> {B':t| Subset B' town /\\ cardinal B' = m /\\ forall b'0 b'1, In b'0 B' -> In b'1 B' -> ~(E.eq b'0 b'1) -> knows b'0 b'1}.",
            "VernacStartTheoremProof",
            "d44826007ba0934b180925d4523fcd73895c6496"
        ],
        [
            "intros m.",
            "VernacExtend",
            "c09fb64a4c58d7cc03a731f8399ff847939fe4f0"
        ],
        [
            "induction m; intros H_le.",
            "VernacExtend",
            "e73cbd2612f55ac4a5f6e9ac54db9366f7b615e4"
        ],
        [
            "exists empty.",
            "VernacExtend",
            "b8697772cc1df68277db1689ba20785af349d7d9"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply subset_empty.",
            "VernacExtend",
            "df5eb1fe9c02b5a6cd43dd4897d16788683ae465"
        ],
        [
            "intros b'0 b'1 H0 H1; apply False_ind.",
            "VernacExtend",
            "17646b9b1b21782ebbdff56d4e27fbf64130a590"
        ],
        [
            "elim (FM.empty_iff b'0); intros H2 _; apply H2; assumption.",
            "VernacExtend",
            "49f3a7b28f286255e5f4da3731e5b0f35d78e119"
        ],
        [
            "assert (H_le0:=le_Sn_le _ _ H_le).",
            "VernacExtend",
            "4f107945e7978e7c1069d70a93f757b2e6eeb78b"
        ],
        [
            "destruct (IHm H_le0) as [B' [H3' [H1 H2]]].",
            "VernacExtend",
            "3c53329927e8df1757b199e312a991f6babb3d0e"
        ],
        [
            "rewrite <- H1 in H_le0.",
            "VernacExtend",
            "341483f202679daed7908847195466e97a87a2b6"
        ],
        [
            "destruct (extendible_to_n B' H3' H_le0) as [B [HB1 [HB2 HB3]]].",
            "VernacExtend",
            "f13033bf578d1ead0a65802c0ec016aadf9d8421"
        ],
        [
            "destruct (property B HB3 HB1) as [d [Hd1 Hd2]].",
            "VernacExtend",
            "feac155aab201a31dc885183663293a2d83445d9"
        ],
        [
            "exists (add d B'); repeat split.",
            "VernacExtend",
            "9791ef6ab688a22548f65ed49d95956e2ef712a7"
        ],
        [
            "apply subset_add_3.",
            "VernacExtend",
            "f7b25efd070bed76a920a8b40e308699625aa40b"
        ],
        [
            "apply diff_1 with B; assumption.",
            "VernacExtend",
            "b3b2a183b3cefedd83c37a8cd70a43e6d7fc290f"
        ],
        [
            "apply subset_trans with B; assumption.",
            "VernacExtend",
            "189806e6c8759a775b8960e53bb2830f68260291"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "apply add_cardinal_2.",
            "VernacExtend",
            "0260de60ddb29b143b060798e6be0e197427fb2a"
        ],
        [
            "intro Hd4.",
            "VernacExtend",
            "41fd793d6840c564ca3c63e0c9688fd56ded0be3"
        ],
        [
            "generalize (in_subset Hd4 HB2).",
            "VernacExtend",
            "877508c8632ca28bf9edbebc55c29bace305ff7f"
        ],
        [
            "apply diff_2 with town; assumption.",
            "VernacExtend",
            "54ffdb30dd7c536197e89c5a0da05dbd1c845d12"
        ],
        [
            "intros b'0 b'1 H_b'0 H_b'1 H_neq.",
            "VernacExtend",
            "7c4747bc831e8c63056ed10c3fdb21da2356ea95"
        ],
        [
            "destruct ((proj1 (FM.add_iff B' d b'0)) H_b'0) as [H3|H3].",
            "VernacExtend",
            "2737d2a981f49d5b4171beb35b12c46e37a120f3"
        ],
        [
            "apply knows_sym; apply knows_extensional with d; trivial.",
            "VernacExtend",
            "b1fd769bcaefb11913364cfc2e5d976fe6979859"
        ],
        [
            "destruct ((proj1 (FM.add_iff B' d b'1)) H_b'1) as [H4|H4].",
            "VernacExtend",
            "59be80c0e24b8ad07512d32ea02c3713fdb3344b"
        ],
        [
            "apply False_ind; apply H_neq; rewrite <- H3; assumption.",
            "VernacExtend",
            "abe77105a528243608b54cbe49ec3245ab80aab7"
        ],
        [
            "apply knows_sym.",
            "VernacExtend",
            "88bbf3649863eef50842a8d742a722535339d908"
        ],
        [
            "apply Hd2; apply in_subset with B'; trivial.",
            "VernacExtend",
            "b41ef72b405b4dbde944f8b3a558ff07ce27fa93"
        ],
        [
            "destruct ((proj1 (FM.add_iff B' d b'1)) H_b'1) as [H4|H4].",
            "VernacExtend",
            "59be80c0e24b8ad07512d32ea02c3713fdb3344b"
        ],
        [
            "apply knows_extensional with d; trivial.",
            "VernacExtend",
            "4e92374603ba4f3d24c6efdbb760f6a32c342579"
        ],
        [
            "apply knows_sym.",
            "VernacExtend",
            "88bbf3649863eef50842a8d742a722535339d908"
        ],
        [
            "apply Hd2; apply in_subset with B'; trivial.",
            "VernacExtend",
            "b41ef72b405b4dbde944f8b3a558ff07ce27fa93"
        ],
        [
            "apply H2; assumption.",
            "VernacExtend",
            "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem AMM11262: {e:elt | In e town /\\ forall u, In u town /\\ ~(E.eq u e)-> knows e u}.",
            "VernacStartTheoremProof",
            "9148a1a312c74e2abd0630d80a6360fe4c2d9975"
        ],
        [
            "destruct (inductive_invariant n (le_refl n)) as [B [HB1 [HB2 HB3]]].",
            "VernacExtend",
            "ab941b2b006369e0a645d196a79d2c56b6f079b5"
        ],
        [
            "destruct (property B HB1 HB2) as [d [Hd1 Hd2]].",
            "VernacExtend",
            "afd047080abd88c8a40dbdf1e7e7e1a6141cef80"
        ],
        [
            "set (C:=(diff town (d ++ B))).",
            "VernacExtend",
            "334d2788160f445dc3ab725152663409ab85ceef"
        ],
        [
            "assert (H_susbset_C:Subset C town); [ subst C; apply subset_diff; apply subset_refl | ].",
            "VernacExtend",
            "25e839fb76fbdc15b3275f549db19f21f27c4302"
        ],
        [
            "assert (H_inter_town: inter town (d ++ B)[=]d ++ B).",
            "VernacExtend",
            "fb2bfa13b1040bc0f3d49f3084375ae82cca1c7e"
        ],
        [
            "rewrite inter_sym; apply inter_subset_equal; apply subset_add_3; trivial; apply diff_1 with B; assumption.",
            "VernacExtend",
            "6fc54677d5ee7de0b8bc092fa9cee677bb262c62"
        ],
        [
            "assert (H_d_nin_B:~In d B); [apply diff_2 with town; assumption|].",
            "VernacExtend",
            "179cabfe4c8b08cfe92faac22cdf0775e6a1bfee"
        ],
        [
            "assert (H_cardinal_C:cardinal C=n).",
            "VernacExtend",
            "eae4a428c91544343301a85835dda2c42395e1be"
        ],
        [
            "assert (H_aux:cardinal (inter town (d ++ B))=S n).",
            "VernacExtend",
            "3d4af5f0c507b51535dc7bc849a37608255f0d79"
        ],
        [
            "rewrite (@Equal_cardinal (inter town (d ++ B)) (d++B) H_inter_town); rewrite (add_cardinal_2 H_d_nin_B); rewrite HB2; reflexivity.",
            "VernacExtend",
            "b45777e862d36fbc261a4cb4d9739ba220a22b53"
        ],
        [
            "generalize (diff_inter_cardinal town (d++B)); fold C; rewrite H_aux; rewrite cardinality; omega.",
            "VernacExtend",
            "46e459c54cd4ec6349b7f39a00ec91510b4de390"
        ],
        [
            "destruct (property C H_susbset_C H_cardinal_C) as [e [He1 He2]].",
            "VernacExtend",
            "a24e13d2888e484bed3d2d2561929f88a50a6436"
        ],
        [
            "exists e.",
            "VernacExtend",
            "4e644c830fdbbe811077e17f446c7832b57a4f89"
        ],
        [
            "assert (H_dB_town:Subset (d++B) town).",
            "VernacExtend",
            "05664915d553d2ce7b0165901c245920d47226ca"
        ],
        [
            "intros a Ha0; destruct ((proj1 (FM.add_iff B d a)) Ha0) as [Had|HaB].",
            "VernacExtend",
            "282a2ca4fa4b9bbd936afbdf5edbc12dbfc5b936"
        ],
        [
            "rewrite <- Had; apply diff_1 with B; assumption.",
            "VernacExtend",
            "ea4e2336ed6a41f3a95a88b9a7fb22ff56942258"
        ],
        [
            "apply HB1; assumption.",
            "VernacExtend",
            "d41aaf4f8f194c6920bcab77ad69c0b887e6b9a6"
        ],
        [
            "assert (H_diff:diff town C [=] d++B ).",
            "VernacExtend",
            "dfca2b73acee39917af209e19891fa409fdfb80f"
        ],
        [
            "unfold C; split; intro H_mem.",
            "VernacExtend",
            "a5ae6bf306366fecf9657b03af61e8969778dca1"
        ],
        [
            "assert (H_a0:=diff_1 H_mem); assert (H_a1:=diff_2 H_mem); destruct (In_dec a (d++B)) as [H_a2|H_a2]; trivial; apply False_ind; apply H_a1; exact (diff_3 H_a0 H_a2).",
            "VernacExtend",
            "96a04e6c7fb58633efb4dd94eaf26c6a13a3c871"
        ],
        [
            "destruct (In_dec a (diff town (d++B))) as [H_a2|H_a2].",
            "VernacExtend",
            "fd2dcd4c6a5ffec35aa66d5a9fee256636bc9f3a"
        ],
        [
            "apply False_ind; exact (diff_2 H_a2 H_mem).",
            "VernacExtend",
            "72d258ed7a7388a82f5a650780f364e2c8924f55"
        ],
        [
            "apply diff_3; trivial; apply H_dB_town; assumption.",
            "VernacExtend",
            "38360e13fb85e152c882e21de9d975e39ec27bcf"
        ],
        [
            "assert (H_e_dB:In e (d++B)); [rewrite <- H_diff; assumption|].",
            "VernacExtend",
            "1ec3f78b910ba8e77e7cab4cbf129c876df06b31"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply diff_1 with C; assumption...",
            "VernacExtend",
            "0b18b807637d3b02748ca1ff78754714dfc604c3"
        ],
        [
            "intros u [Hu Hu'].",
            "VernacExtend",
            "61c5b06144bc91985349ddcb056ca79eb6ee4ff4"
        ],
        [
            "assert (H_town_part:town [=] (union C (d++B))).",
            "VernacExtend",
            "3ad45cdb0c590ecb91ee4f6deeaf192aa28e3f73"
        ],
        [
            "rewrite <- (diff_inter_all town (d++B)); rewrite H_inter_town; apply equal_refl.",
            "VernacExtend",
            "3a5f3e22100febd95b1fa40111bb9533f45dce02"
        ],
        [
            "rewrite H_town_part in Hu.",
            "VernacExtend",
            "390c4c2faf12e8d792b793ea05f04b7207864f3d"
        ],
        [
            "destruct (union_1 Hu) as [HuC|HudB].",
            "VernacExtend",
            "6101ec18afc249bb67be7fca5e2e8306a3d97297"
        ],
        [
            "apply He2; assumption.",
            "VernacExtend",
            "ea3e47f86052466650d0235c99d67e551dbb15c7"
        ],
        [
            "destruct ((proj1 (FM.add_iff B d u)) HudB) as [Hud|HuB].",
            "VernacExtend",
            "887ba51476ad5ecbd6237ccc4ec2b0c1339945b3"
        ],
        [
            "apply knows_extensional with d; trivial.",
            "VernacExtend",
            "4e92374603ba4f3d24c6efdbb760f6a32c342579"
        ],
        [
            "apply knows_sym.",
            "VernacExtend",
            "88bbf3649863eef50842a8d742a722535339d908"
        ],
        [
            "destruct ((proj1 (FM.add_iff B d e)) H_e_dB) as [Hed|HeB].",
            "VernacExtend",
            "8f499310a991af10ae3fe83f70df48522699b491"
        ],
        [
            "apply False_ind; apply Hu'; rewrite <- Hud; assumption.",
            "VernacExtend",
            "0cef6674badbe752b9abe8d9d5ecf4684da08e4d"
        ],
        [
            "apply Hd2; assumption.",
            "VernacExtend",
            "69635204046e428cb1ff00c9ac14ecc98a4804a3"
        ],
        [
            "destruct ((proj1 (FM.add_iff B d e)) H_e_dB) as [Hed|HeB].",
            "VernacExtend",
            "8f499310a991af10ae3fe83f70df48522699b491"
        ],
        [
            "apply knows_sym; apply knows_extensional with d; trivial; apply knows_sym; apply Hd2; assumption.",
            "VernacExtend",
            "29dbe92e7e57c8d5b891ef74f3ada457cc5997a3"
        ],
        [
            "apply HB3; assumption || contradict Hu'; auto with *.",
            "VernacExtend",
            "6ac82b8e61f4914d88625fa8d97acd140903ca3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End problem_knows_not_refl.",
            "VernacEndSegment",
            "7d158ece8612b61d8cb3c4022aa7e8095b2a9abc"
        ],
        [
            "Extraction \"amm11262\" AMM11262.",
            "VernacExtend",
            "651682de874aefbfe0c4a764aa4bd0bf6747e304"
        ]
    ],
    "proofs": [
        {
            "name": "extendible_by_one",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "clear knows knows_sym knows_extensional property.",
                        "VernacExtend",
                        "5053a209c032726fccf5f91d19c0fe7c410ded77"
                    ]
                },
                {
                    "command": [
                        "intros B' H_cardinal_town.",
                        "VernacExtend",
                        "390237cdf11889234f8e0d92333f1ba65c3378ce"
                    ]
                },
                {
                    "command": [
                        "assert (H_town:1<=(cardinal town)); [omega|].",
                        "VernacExtend",
                        "16b15d96eb47f6319b2e2dc95f3373b25267a50a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (diff_inter_cardinal town B') in H_cardinal_town.",
                        "VernacExtend",
                        "cf16e69473158720457d095612062208b99bb2f1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (diff_inter_cardinal town B') in H_town.",
                        "VernacExtend",
                        "37ab0f20bcd1d5f5217238da879d4ed86fa6f404"
                    ]
                },
                {
                    "command": [
                        "assert (H_inter:cardinal (inter town B') <= cardinal B'); [apply (subset_cardinal);apply (inter_subset_2)|].",
                        "VernacExtend",
                        "712ab8c197f4dd71ff90cf8be5c79389d9f90cf9"
                    ]
                },
                {
                    "command": [
                        "generalize (le_trans _ _ _ H_inter H_cardinal_town); intro H1.",
                        "VernacExtend",
                        "a0aa0d4b345f1f4d8912c0b0a337c9d211182934"
                    ]
                },
                {
                    "command": [
                        "assert (H2:1<=cardinal (diff town B')); [omega|].",
                        "VernacExtend",
                        "2e6423b8c6ec92445dc927afcc2e56e1a5ba9712"
                    ]
                },
                {
                    "command": [
                        "assert (H3:=(S_pred _ _ H2)).",
                        "VernacExtend",
                        "dce43516ab1a64a665ff364bc05074ae74df3735"
                    ]
                },
                {
                    "command": [
                        "destruct (cardinal_inv_2 H3) as [d Hd].",
                        "VernacExtend",
                        "87be3a0a1cbd624e0590777f5902ff84e4a90963"
                    ]
                },
                {
                    "command": [
                        "exists d; split.",
                        "VernacExtend",
                        "a1fcb883b1c5fcd25ed6ebd6b983148f883d1f7b"
                    ]
                },
                {
                    "command": [
                        "apply diff_1 with B'; assumption.",
                        "VernacExtend",
                        "1e05c94be4b191de58c93419f83a7b0f1acca7f5"
                    ]
                },
                {
                    "command": [
                        "apply diff_2 with town; assumption.",
                        "VernacExtend",
                        "54ffdb30dd7c536197e89c5a0da05dbd1c845d12"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extendible_to_n",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros B' H_sub H_B'_cardinal.",
                        "VernacExtend",
                        "b0db108900d8faed68e050cdbb689e53c1debe9d"
                    ]
                },
                {
                    "command": [
                        "assert (H_cardinal_aux_3:2*n<=(cardinal town)-1);[apply le_trans with (2*n); omega|].",
                        "VernacExtend",
                        "7d6cb695ee3d9f9c00982c5c1c1199a005df5801"
                    ]
                },
                {
                    "command": [
                        "clear property.",
                        "VernacExtend",
                        "2114763744a84cd5ef0b8835d4c9b1eb54dc0949"
                    ]
                },
                {
                    "command": [
                        "induction n in H_B'_cardinal, H_cardinal_aux_3 |- *.",
                        "VernacExtend",
                        "e1e800a39bd7df00d7873de85eba82d5599d0fc9"
                    ]
                },
                {
                    "command": [
                        "generalize (sym_eq (le_n_O_eq _ H_B'_cardinal)); intro H_eq.",
                        "VernacExtend",
                        "6249a83531e1314d763c3625ced2fff4bb8e74fb"
                    ]
                },
                {
                    "command": [
                        "generalize (empty_is_empty_1 (cardinal_inv_1 H_eq)).",
                        "VernacExtend",
                        "c71ab865ae30214af55bc0da81ae80ca95607ebb"
                    ]
                },
                {
                    "command": [
                        "intro H_B'.",
                        "VernacExtend",
                        "7b559ff03550b73551c39048447ceaca7780c939"
                    ]
                },
                {
                    "command": [
                        "exists empty; repeat split.",
                        "VernacExtend",
                        "266e12f5f6ad7f55b6fb3ad431a4a35366173b09"
                    ]
                },
                {
                    "command": [
                        "rewrite H_B'; apply subset_empty.",
                        "VernacExtend",
                        "102d70e9cbba54088b61272c66e689094bfed047"
                    ]
                },
                {
                    "command": [
                        "apply subset_empty.",
                        "VernacExtend",
                        "df5eb1fe9c02b5a6cd43dd4897d16788683ae465"
                    ]
                },
                {
                    "command": [
                        "destruct (le_lt_eq_dec _ _ H_B'_cardinal) as [H_lt|H_le].",
                        "VernacExtend",
                        "b306eab014f91141f2094ba55d98cd2a0717c8d7"
                    ]
                },
                {
                    "command": [
                        "generalize (lt_n_Sm_le _ _ H_lt); clear H_lt; intro H_le.",
                        "VernacExtend",
                        "87b15b5e9e3bca70012e987589ff66989dd522aa"
                    ]
                },
                {
                    "command": [
                        "assert (H_cardinal_town_2:2 * n0 <= cardinal town - 1);[omega|].",
                        "VernacExtend",
                        "3e56178e6fef9a44a2ad990bfec319e569802e6b"
                    ]
                },
                {
                    "command": [
                        "destruct (IHn0 H_le H_cardinal_town_2) as [C [HC1 [HC2 HC3]]].",
                        "VernacExtend",
                        "50a56658bcc29377db822008854b096142586d82"
                    ]
                },
                {
                    "command": [
                        "assert (HC5:cardinal C <= cardinal town - 1).",
                        "VernacExtend",
                        "90913c6b69ff7f13a36b4f428964f824d7d289e0"
                    ]
                },
                {
                    "command": [
                        "rewrite HC1; apply le_trans with (2*(S n0));[omega| assumption].",
                        "VernacExtend",
                        "7c1da9d35f2a1103e2095539a560a22207d38545"
                    ]
                },
                {
                    "command": [
                        "destruct (extendible_by_one C HC5) as [d [Hd1 Hd2]].",
                        "VernacExtend",
                        "6e4df83a09c39e24adf5ec1bbf8704984b9ab8db"
                    ]
                },
                {
                    "command": [
                        "exists (d ++ C).",
                        "VernacExtend",
                        "588e9d5d43e5c0a1073dfa221d653c7f4e39631c"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "rewrite (add_cardinal_2 Hd2); rewrite HC1; reflexivity.",
                        "VernacExtend",
                        "635570542846dfd9227ad7d793d114f0e6be1ec7"
                    ]
                },
                {
                    "command": [
                        "apply subset_add_2; assumption.",
                        "VernacExtend",
                        "577f5fae80697ef48fa26bb173b344093f0427ae"
                    ]
                },
                {
                    "command": [
                        "apply subset_add_3; assumption.",
                        "VernacExtend",
                        "a1ac930a6b29e85b40068910c5014e1109686689"
                    ]
                },
                {
                    "command": [
                        "exists B'.",
                        "VernacExtend",
                        "bcb20d6cf63fc499dc5f940bb4e74610c8e37255"
                    ]
                },
                {
                    "command": [
                        "repeat split; trivial; apply subset_refl.",
                        "VernacExtend",
                        "d36cbdd116553b3ba38538384d7fcda3938e5dfa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inductive_invariant",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "intros m.",
                        "VernacExtend",
                        "c09fb64a4c58d7cc03a731f8399ff847939fe4f0"
                    ]
                },
                {
                    "command": [
                        "induction m; intros H_le.",
                        "VernacExtend",
                        "e73cbd2612f55ac4a5f6e9ac54db9366f7b615e4"
                    ]
                },
                {
                    "command": [
                        "exists empty.",
                        "VernacExtend",
                        "b8697772cc1df68277db1689ba20785af349d7d9"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "apply subset_empty.",
                        "VernacExtend",
                        "df5eb1fe9c02b5a6cd43dd4897d16788683ae465"
                    ]
                },
                {
                    "command": [
                        "intros b'0 b'1 H0 H1; apply False_ind.",
                        "VernacExtend",
                        "17646b9b1b21782ebbdff56d4e27fbf64130a590"
                    ]
                },
                {
                    "command": [
                        "elim (FM.empty_iff b'0); intros H2 _; apply H2; assumption.",
                        "VernacExtend",
                        "49f3a7b28f286255e5f4da3731e5b0f35d78e119"
                    ]
                },
                {
                    "command": [
                        "assert (H_le0:=le_Sn_le _ _ H_le).",
                        "VernacExtend",
                        "4f107945e7978e7c1069d70a93f757b2e6eeb78b"
                    ]
                },
                {
                    "command": [
                        "destruct (IHm H_le0) as [B' [H3' [H1 H2]]].",
                        "VernacExtend",
                        "3c53329927e8df1757b199e312a991f6babb3d0e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1 in H_le0.",
                        "VernacExtend",
                        "341483f202679daed7908847195466e97a87a2b6"
                    ]
                },
                {
                    "command": [
                        "destruct (extendible_to_n B' H3' H_le0) as [B [HB1 [HB2 HB3]]].",
                        "VernacExtend",
                        "f13033bf578d1ead0a65802c0ec016aadf9d8421"
                    ]
                },
                {
                    "command": [
                        "destruct (property B HB3 HB1) as [d [Hd1 Hd2]].",
                        "VernacExtend",
                        "feac155aab201a31dc885183663293a2d83445d9"
                    ]
                },
                {
                    "command": [
                        "exists (add d B'); repeat split.",
                        "VernacExtend",
                        "9791ef6ab688a22548f65ed49d95956e2ef712a7"
                    ]
                },
                {
                    "command": [
                        "apply subset_add_3.",
                        "VernacExtend",
                        "f7b25efd070bed76a920a8b40e308699625aa40b"
                    ]
                },
                {
                    "command": [
                        "apply diff_1 with B; assumption.",
                        "VernacExtend",
                        "b3b2a183b3cefedd83c37a8cd70a43e6d7fc290f"
                    ]
                },
                {
                    "command": [
                        "apply subset_trans with B; assumption.",
                        "VernacExtend",
                        "189806e6c8759a775b8960e53bb2830f68260291"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "apply add_cardinal_2.",
                        "VernacExtend",
                        "0260de60ddb29b143b060798e6be0e197427fb2a"
                    ]
                },
                {
                    "command": [
                        "intro Hd4.",
                        "VernacExtend",
                        "41fd793d6840c564ca3c63e0c9688fd56ded0be3"
                    ]
                },
                {
                    "command": [
                        "generalize (in_subset Hd4 HB2).",
                        "VernacExtend",
                        "877508c8632ca28bf9edbebc55c29bace305ff7f"
                    ]
                },
                {
                    "command": [
                        "apply diff_2 with town; assumption.",
                        "VernacExtend",
                        "54ffdb30dd7c536197e89c5a0da05dbd1c845d12"
                    ]
                },
                {
                    "command": [
                        "intros b'0 b'1 H_b'0 H_b'1 H_neq.",
                        "VernacExtend",
                        "7c4747bc831e8c63056ed10c3fdb21da2356ea95"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B' d b'0)) H_b'0) as [H3|H3].",
                        "VernacExtend",
                        "2737d2a981f49d5b4171beb35b12c46e37a120f3"
                    ]
                },
                {
                    "command": [
                        "apply knows_sym; apply knows_extensional with d; trivial.",
                        "VernacExtend",
                        "b1fd769bcaefb11913364cfc2e5d976fe6979859"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B' d b'1)) H_b'1) as [H4|H4].",
                        "VernacExtend",
                        "59be80c0e24b8ad07512d32ea02c3713fdb3344b"
                    ]
                },
                {
                    "command": [
                        "apply False_ind; apply H_neq; rewrite <- H3; assumption.",
                        "VernacExtend",
                        "abe77105a528243608b54cbe49ec3245ab80aab7"
                    ]
                },
                {
                    "command": [
                        "apply knows_sym.",
                        "VernacExtend",
                        "88bbf3649863eef50842a8d742a722535339d908"
                    ]
                },
                {
                    "command": [
                        "apply Hd2; apply in_subset with B'; trivial.",
                        "VernacExtend",
                        "b41ef72b405b4dbde944f8b3a558ff07ce27fa93"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B' d b'1)) H_b'1) as [H4|H4].",
                        "VernacExtend",
                        "59be80c0e24b8ad07512d32ea02c3713fdb3344b"
                    ]
                },
                {
                    "command": [
                        "apply knows_extensional with d; trivial.",
                        "VernacExtend",
                        "4e92374603ba4f3d24c6efdbb760f6a32c342579"
                    ]
                },
                {
                    "command": [
                        "apply knows_sym.",
                        "VernacExtend",
                        "88bbf3649863eef50842a8d742a722535339d908"
                    ]
                },
                {
                    "command": [
                        "apply Hd2; apply in_subset with B'; trivial.",
                        "VernacExtend",
                        "b41ef72b405b4dbde944f8b3a558ff07ce27fa93"
                    ]
                },
                {
                    "command": [
                        "apply H2; assumption.",
                        "VernacExtend",
                        "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AMM11262",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "destruct (inductive_invariant n (le_refl n)) as [B [HB1 [HB2 HB3]]].",
                        "VernacExtend",
                        "ab941b2b006369e0a645d196a79d2c56b6f079b5"
                    ]
                },
                {
                    "command": [
                        "destruct (property B HB1 HB2) as [d [Hd1 Hd2]].",
                        "VernacExtend",
                        "afd047080abd88c8a40dbdf1e7e7e1a6141cef80"
                    ]
                },
                {
                    "command": [
                        "set (C:=(diff town (d ++ B))).",
                        "VernacExtend",
                        "334d2788160f445dc3ab725152663409ab85ceef"
                    ]
                },
                {
                    "command": [
                        "assert (H_susbset_C:Subset C town); [ subst C; apply subset_diff; apply subset_refl | ].",
                        "VernacExtend",
                        "25e839fb76fbdc15b3275f549db19f21f27c4302"
                    ]
                },
                {
                    "command": [
                        "assert (H_inter_town: inter town (d ++ B)[=]d ++ B).",
                        "VernacExtend",
                        "fb2bfa13b1040bc0f3d49f3084375ae82cca1c7e"
                    ]
                },
                {
                    "command": [
                        "rewrite inter_sym; apply inter_subset_equal; apply subset_add_3; trivial; apply diff_1 with B; assumption.",
                        "VernacExtend",
                        "6fc54677d5ee7de0b8bc092fa9cee677bb262c62"
                    ]
                },
                {
                    "command": [
                        "assert (H_d_nin_B:~In d B); [apply diff_2 with town; assumption|].",
                        "VernacExtend",
                        "179cabfe4c8b08cfe92faac22cdf0775e6a1bfee"
                    ]
                },
                {
                    "command": [
                        "assert (H_cardinal_C:cardinal C=n).",
                        "VernacExtend",
                        "eae4a428c91544343301a85835dda2c42395e1be"
                    ]
                },
                {
                    "command": [
                        "assert (H_aux:cardinal (inter town (d ++ B))=S n).",
                        "VernacExtend",
                        "3d4af5f0c507b51535dc7bc849a37608255f0d79"
                    ]
                },
                {
                    "command": [
                        "rewrite (@Equal_cardinal (inter town (d ++ B)) (d++B) H_inter_town); rewrite (add_cardinal_2 H_d_nin_B); rewrite HB2; reflexivity.",
                        "VernacExtend",
                        "b45777e862d36fbc261a4cb4d9739ba220a22b53"
                    ]
                },
                {
                    "command": [
                        "generalize (diff_inter_cardinal town (d++B)); fold C; rewrite H_aux; rewrite cardinality; omega.",
                        "VernacExtend",
                        "46e459c54cd4ec6349b7f39a00ec91510b4de390"
                    ]
                },
                {
                    "command": [
                        "destruct (property C H_susbset_C H_cardinal_C) as [e [He1 He2]].",
                        "VernacExtend",
                        "a24e13d2888e484bed3d2d2561929f88a50a6436"
                    ]
                },
                {
                    "command": [
                        "exists e.",
                        "VernacExtend",
                        "4e644c830fdbbe811077e17f446c7832b57a4f89"
                    ]
                },
                {
                    "command": [
                        "assert (H_dB_town:Subset (d++B) town).",
                        "VernacExtend",
                        "05664915d553d2ce7b0165901c245920d47226ca"
                    ]
                },
                {
                    "command": [
                        "intros a Ha0; destruct ((proj1 (FM.add_iff B d a)) Ha0) as [Had|HaB].",
                        "VernacExtend",
                        "282a2ca4fa4b9bbd936afbdf5edbc12dbfc5b936"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Had; apply diff_1 with B; assumption.",
                        "VernacExtend",
                        "ea4e2336ed6a41f3a95a88b9a7fb22ff56942258"
                    ]
                },
                {
                    "command": [
                        "apply HB1; assumption.",
                        "VernacExtend",
                        "d41aaf4f8f194c6920bcab77ad69c0b887e6b9a6"
                    ]
                },
                {
                    "command": [
                        "assert (H_diff:diff town C [=] d++B ).",
                        "VernacExtend",
                        "dfca2b73acee39917af209e19891fa409fdfb80f"
                    ]
                },
                {
                    "command": [
                        "unfold C; split; intro H_mem.",
                        "VernacExtend",
                        "a5ae6bf306366fecf9657b03af61e8969778dca1"
                    ]
                },
                {
                    "command": [
                        "assert (H_a0:=diff_1 H_mem); assert (H_a1:=diff_2 H_mem); destruct (In_dec a (d++B)) as [H_a2|H_a2]; trivial; apply False_ind; apply H_a1; exact (diff_3 H_a0 H_a2).",
                        "VernacExtend",
                        "96a04e6c7fb58633efb4dd94eaf26c6a13a3c871"
                    ]
                },
                {
                    "command": [
                        "destruct (In_dec a (diff town (d++B))) as [H_a2|H_a2].",
                        "VernacExtend",
                        "fd2dcd4c6a5ffec35aa66d5a9fee256636bc9f3a"
                    ]
                },
                {
                    "command": [
                        "apply False_ind; exact (diff_2 H_a2 H_mem).",
                        "VernacExtend",
                        "72d258ed7a7388a82f5a650780f364e2c8924f55"
                    ]
                },
                {
                    "command": [
                        "apply diff_3; trivial; apply H_dB_town; assumption.",
                        "VernacExtend",
                        "38360e13fb85e152c882e21de9d975e39ec27bcf"
                    ]
                },
                {
                    "command": [
                        "assert (H_e_dB:In e (d++B)); [rewrite <- H_diff; assumption|].",
                        "VernacExtend",
                        "1ec3f78b910ba8e77e7cab4cbf129c876df06b31"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply diff_1 with C; assumption...",
                        "VernacExtend",
                        "0b18b807637d3b02748ca1ff78754714dfc604c3"
                    ]
                },
                {
                    "command": [
                        "intros u [Hu Hu'].",
                        "VernacExtend",
                        "61c5b06144bc91985349ddcb056ca79eb6ee4ff4"
                    ]
                },
                {
                    "command": [
                        "assert (H_town_part:town [=] (union C (d++B))).",
                        "VernacExtend",
                        "3ad45cdb0c590ecb91ee4f6deeaf192aa28e3f73"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (diff_inter_all town (d++B)); rewrite H_inter_town; apply equal_refl.",
                        "VernacExtend",
                        "3a5f3e22100febd95b1fa40111bb9533f45dce02"
                    ]
                },
                {
                    "command": [
                        "rewrite H_town_part in Hu.",
                        "VernacExtend",
                        "390c4c2faf12e8d792b793ea05f04b7207864f3d"
                    ]
                },
                {
                    "command": [
                        "destruct (union_1 Hu) as [HuC|HudB].",
                        "VernacExtend",
                        "6101ec18afc249bb67be7fca5e2e8306a3d97297"
                    ]
                },
                {
                    "command": [
                        "apply He2; assumption.",
                        "VernacExtend",
                        "ea3e47f86052466650d0235c99d67e551dbb15c7"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B d u)) HudB) as [Hud|HuB].",
                        "VernacExtend",
                        "887ba51476ad5ecbd6237ccc4ec2b0c1339945b3"
                    ]
                },
                {
                    "command": [
                        "apply knows_extensional with d; trivial.",
                        "VernacExtend",
                        "4e92374603ba4f3d24c6efdbb760f6a32c342579"
                    ]
                },
                {
                    "command": [
                        "apply knows_sym.",
                        "VernacExtend",
                        "88bbf3649863eef50842a8d742a722535339d908"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B d e)) H_e_dB) as [Hed|HeB].",
                        "VernacExtend",
                        "8f499310a991af10ae3fe83f70df48522699b491"
                    ]
                },
                {
                    "command": [
                        "apply False_ind; apply Hu'; rewrite <- Hud; assumption.",
                        "VernacExtend",
                        "0cef6674badbe752b9abe8d9d5ecf4684da08e4d"
                    ]
                },
                {
                    "command": [
                        "apply Hd2; assumption.",
                        "VernacExtend",
                        "69635204046e428cb1ff00c9ac14ecc98a4804a3"
                    ]
                },
                {
                    "command": [
                        "destruct ((proj1 (FM.add_iff B d e)) H_e_dB) as [Hed|HeB].",
                        "VernacExtend",
                        "8f499310a991af10ae3fe83f70df48522699b491"
                    ]
                },
                {
                    "command": [
                        "apply knows_sym; apply knows_extensional with d; trivial; apply knows_sym; apply Hd2; assumption.",
                        "VernacExtend",
                        "29dbe92e7e57c8d5b891ef74f3ada457cc5997a3"
                    ]
                },
                {
                    "command": [
                        "apply HB3; assumption || contradict Hu'; auto with *.",
                        "VernacExtend",
                        "6ac82b8e61f4914d88625fa8d97acd140903ca3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}