{
    "filename": "FOL/Semantics.v",
    "coq_project": "coq-library-undecidability",
    "vernac_cmds": [
        [
            "Require Export Undecidability.FOL.FOL.",
            "VernacRequire",
            "e1edbea8d711f4cb867c0eac6caedcc6464f5a5f"
        ],
        [
            "Fixpoint vars_t (t : term) : list var := match t with | V v => [v] | P p => [] | t_f b t => vars_t t | t_e => [] end.",
            "VernacFixpoint",
            "c9a2cb2e522a021fb9437118d413d1f09e1a6263"
        ],
        [
            "Fixpoint consts_t (t : term) : list var := match t with | V v => [] | P p => [p] | t_f b t => consts_t t | t_e => [] end.",
            "VernacFixpoint",
            "617482c3c6c66cd499d0e71e48f6fa3cadafd7cc"
        ],
        [
            "Fixpoint subst_t x y (t : term) : term := match t with | V v => if Dec (v = x) then y else V v | P p => P p | t_e => t_e | t_f b t => t_f b (subst_t x y t) end.",
            "VernacFixpoint",
            "e904d143c8dba6f9d1ca34baa3362c0fb055ec0b"
        ],
        [
            "Fixpoint consts {b} (phi : form b) : list var := match phi with | Pr t1 t2 => consts_t t1 ++ consts_t t2 | Fal | Q => [] | Impl phi psi => consts phi ++ consts psi | All v phi => v :: consts phi end.",
            "VernacFixpoint",
            "8c6b56cbb6c31f0112262b4c32c70437ed49d119"
        ],
        [
            "Fixpoint subst {b} x t phi := match phi with | Pr t1 t2 => Pr (subst_t x t t1) (subst_t x t t2) | Q => Q | Fal => Fal | Impl phi1 phi2 => Impl (subst x t phi1) (subst x t phi2) | All v phi => All v (if Dec (x = v) then phi else subst x t phi) end.",
            "VernacFixpoint",
            "9aea355b518585731879473db6f4aa175f9b5bdb"
        ],
        [
            "Definition consts_l {b} A := flat_map (@consts b) A.",
            "VernacDefinition",
            "1813b2fdef26b3937e72fbb6b4713b1caf236a95"
        ],
        [
            "Definition fresh (y : var) A := ~ y el A.",
            "VernacDefinition",
            "c8c3792b5a283887d8e2a1d4435eab2b132b5062"
        ],
        [
            "Fixpoint mkfresh (l : list nat) := match l with | [] => 0 | x :: l => S x + mkfresh l end.",
            "VernacFixpoint",
            "1c10f0f6a6be89e18bf0132d69c1218de799652a"
        ],
        [
            "Lemma mkfresh_spec l a : a el l -> a < mkfresh l.",
            "VernacStartTheoremProof",
            "c9d4ce299ecbc8147513925224496e63b8725d8f"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "cbn; intros [ | ]; firstorder omega.",
            "VernacExtend",
            "bc155e863baa7057ef017f3135d0e6627d7db6c9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma make_fresh A : {z | fresh z A}.",
            "VernacStartTheoremProof",
            "2490aa543e85c725701e9d212d980e5c99266747"
        ],
        [
            "exists (mkfresh A).",
            "VernacExtend",
            "960fdc01129c19f747ab6428f09bdc4132932b57"
        ],
        [
            "intros ? % mkfresh_spec.",
            "VernacExtend",
            "bbc9444b2d4ec1d730c31d8d72cc64f3bcb6c94f"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma app_sub X (A A' B B' : list X) : A <<= A' -> B <<= B' -> A ++ B <<= A' ++ B'.",
            "VernacStartTheoremProof",
            "b09b20fcd916e490d6533202a21a4a1a42b587c8"
        ],
        [
            "intros H1 H2 x [H|H] % in_app_iff.",
            "VernacExtend",
            "48cd34218b5f27053122dc0945351352cee8f608"
        ],
        [
            "all: apply in_app_iff; auto.",
            "VernacExtend",
            "7ec029aa57b03fee5168a9afc7590d0c87a960ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Class interp (domain : Type) (rho : nat -> domain) := { i_f : bool -> domain -> domain ; i_e : domain ; i_P : domain -> domain -> Prop ; i_Q : Prop }.",
            "VernacInductive",
            "0a7dfaf1b56ac0aa038d0d4b35668408422c98a5"
        ],
        [
            "Section Semantics.",
            "VernacBeginSection",
            "953f79511cd8a79b370eea8018dc813a7b2222e3"
        ],
        [
            "Notation const := nat.",
            "VernacSyntacticDefinition",
            "728d7b773f292f67f7414f743438329a9317789a"
        ],
        [
            "Variable domain : Type.",
            "VernacAssumption",
            "3f58beea01f77dd502ef1bf15b7f7ef3be7a42d5"
        ],
        [
            "Definition env := var -> domain.",
            "VernacDefinition",
            "74ae77c6ef6eaecda186d6d1b16ab02c445a4c00"
        ],
        [
            "Variable (eta : env).",
            "VernacAssumption",
            "33c8a75351541ee11347ca09f9738fe5c7579495"
        ],
        [
            "Context {I : interp eta}.",
            "VernacContext",
            "ab9c5ab064b6b761e4bded7b75b6b0390c48027a"
        ],
        [
            "Fixpoint eval (rho : env) (t : term) : domain := match t with | V s => rho s | P p => eta p | t_f b t => i_f b (eval rho t) | t_e => i_e end.",
            "VernacFixpoint",
            "e5b2cedb1fa86b9f425ce3e65200cffc4ef1fb31"
        ],
        [
            "Definition update {X} (rho : var -> X) (v : var) (d : X) := (fun v' => if (Dec (v = v')) then d else rho v').",
            "VernacDefinition",
            "3403b646673be62ec92f882a18a9dab465d2512f"
        ],
        [
            "Notation \"rho [[ v := d ]]\" := (update rho v d) (at level 20).",
            "VernacNotation",
            "b452f8cfd30f77812b636b34964e04a3680debdb"
        ],
        [
            "Fixpoint sat {b} (rho : env) (phi : form b) : Prop := match phi with | Pr t1 t2 => i_P (eval rho t1) (eval rho t2) | Q => i_Q | Fal => False | Impl phi psi => sat rho phi -> sat rho psi | All v phi => forall d : domain, sat (rho [[ v := d ]]) phi end.",
            "VernacFixpoint",
            "75ce61df0635b42bc6db1575de479dd48f144db4"
        ],
        [
            "Notation \"rho \u22ab A\" := (forall psi, psi el A -> sat rho psi) (at level 20).",
            "VernacNotation",
            "38b08eb319d783c0f271fcaa4afd42d20ea2dd4a"
        ],
        [
            "Notation \"rho \u22a8 phi\" := (sat rho phi) (at level 20).",
            "VernacNotation",
            "0b5d6d400be712eb2739c9608d4b45fabd71b765"
        ],
        [
            "Context {b : logic}.",
            "VernacContext",
            "f8d7ca49b41a46823834c26f9d78a1751a7f7815"
        ],
        [
            "Lemma impl_sat A rho phi : sat rho (A ==> phi) <-> ((forall psi, psi el A -> sat rho psi) -> sat rho phi).",
            "VernacStartTheoremProof",
            "f73088914d20b42bcd6dce0a042e75692727c263"
        ],
        [
            "induction A; cbn; firstorder congruence.",
            "VernacExtend",
            "15334341d8489c2a01ef0b308bed3d1eea36e20b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma impl_sat' A rho phi : sat rho (A ==> phi) -> ((forall psi, psi el A -> sat rho psi) -> sat rho phi).",
            "VernacStartTheoremProof",
            "50e22d3f834c132009849b0006480999f162a989"
        ],
        [
            "eapply impl_sat.",
            "VernacExtend",
            "fe0a91cfa2ceee549ccd9929ea67acb06ed0fda4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Semantics.",
            "VernacEndSegment",
            "82a9afba3fa8f88bae2d19f616f1af04fb0fce6d"
        ],
        [
            "Ltac decs := unfold update; repeat destruct _; subst; cbn; try congruence; try reflexivity; auto.",
            "VernacExtend",
            "195a318eafbfb78b1cf7a53e2e202f13197889ee"
        ],
        [
            "Notation \"rho [[ v := d ]]\" := (update rho v d) (at level 20).",
            "VernacNotation",
            "b452f8cfd30f77812b636b34964e04a3680debdb"
        ],
        [
            "Arguments sat {_ _} _ {_} _ _, {_} _ _ {_} _ _.",
            "VernacArguments",
            "85b1cd9ae8fdcbe68ce75f0f1d17327469eed05d"
        ],
        [
            "Arguments interp {_} _, _ _.",
            "VernacArguments",
            "b9b47b622a2010aedb5f01bdaaf19393259d9e96"
        ],
        [
            "Notation \"p \u22ab A\" := (forall psi, psi el A -> sat _ p psi) (at level 20).",
            "VernacNotation",
            "0ccfe9eb4bb87c198c8b74b8277c8ad2efc38f67"
        ],
        [
            "Notation \"p \u22a8 phi\" := (sat _ p phi) (at level 20).",
            "VernacNotation",
            "0e322c059a07f5c4a252031ad49a7cfa9c835fee"
        ],
        [
            "Implicit Type b : logic.",
            "VernacReserve",
            "748676997bde6b4335271e3837ecaf6028985319"
        ],
        [
            "Definition valid b phi := forall D eta (I : interp D eta) rho, rho \u22a8 phi.",
            "VernacDefinition",
            "6d89d7c5d92288fcb601c6527a53190b9b9a5178"
        ],
        [
            "Definition valid_L b A := forall D eta (I : interp D eta) rho, rho \u22ab A.",
            "VernacDefinition",
            "f06fecebf312d408fc1cec647b5c665752dc83eb"
        ],
        [
            "Definition satis b phi := exists D eta (I : interp D eta) rho, rho \u22a8 phi.",
            "VernacDefinition",
            "8e887e79f8a397cc09067ee12207910f877de1c6"
        ],
        [
            "Definition fullsatis b A := exists D eta (I : interp D eta) rho, rho \u22ab A.",
            "VernacDefinition",
            "5d8a406f819bf1f2ecfd998cee9ea3fd491af78d"
        ],
        [
            "Section TM.",
            "VernacBeginSection",
            "8a0e15b5657b0f3d86dc34c6eb4173ed20254404"
        ],
        [
            "Instance TM : interp unit (fun _ => tt) := {| i_f := fun _ _ => tt; i_e := tt; i_P := fun _ _ => True; i_Q := True |}.",
            "VernacInstance",
            "c6c437eb2e5b5e897e38326449ad5d18344eb295"
        ],
        [
            "Fact TM_sat (rho : var -> unit) (phi : form frag) : sat TM rho phi.",
            "VernacStartTheoremProof",
            "34f6ab142e32f188e3a2514c210074bf312310ef"
        ],
        [
            "revert rho.",
            "VernacExtend",
            "c79752f3099dcdfbddc74846c0d559b866ae15ec"
        ],
        [
            "induction phi using form_frag_ind; cbn; auto.",
            "VernacExtend",
            "10508fda9b3a28820b7b595c7fbad4e802fe8957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TM.",
            "VernacEndSegment",
            "09058ae4fe55637e3e9a0e4d2c106fea7291d499"
        ]
    ],
    "proofs": [
        {
            "name": "mkfresh_spec",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "cbn; intros [ | ]; firstorder omega.",
                        "VernacExtend",
                        "bc155e863baa7057ef017f3135d0e6627d7db6c9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "make_fresh",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "exists (mkfresh A).",
                        "VernacExtend",
                        "960fdc01129c19f747ab6428f09bdc4132932b57"
                    ]
                },
                {
                    "command": [
                        "intros ? % mkfresh_spec.",
                        "VernacExtend",
                        "bbc9444b2d4ec1d730c31d8d72cc64f3bcb6c94f"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "impl_sat",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "induction A; cbn; firstorder congruence.",
                        "VernacExtend",
                        "15334341d8489c2a01ef0b308bed3d1eea36e20b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impl_sat'",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "eapply impl_sat.",
                        "VernacExtend",
                        "fe0a91cfa2ceee549ccd9929ea67acb06ed0fda4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TM_sat",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "revert rho.",
                        "VernacExtend",
                        "c79752f3099dcdfbddc74846c0d559b866ae15ec"
                    ]
                },
                {
                    "command": [
                        "induction phi using form_frag_ind; cbn; auto.",
                        "VernacExtend",
                        "10508fda9b3a28820b7b595c7fbad4e802fe8957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}