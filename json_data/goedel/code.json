{
    "filename": "code.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import fol.",
            "VernacRequire",
            "4368ac542f107c78f52f38cd5ea87c64155e7889"
        ],
        [
            "Require Import folProof.",
            "VernacRequire",
            "a0193d39f532e35a330dca71bfab163ef1b5dd49"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Section Code_Term_Formula_Proof.",
            "VernacBeginSection",
            "7d1dc45fc640cd16ff6cc769118e3265c2ef6943"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Variable codeR : Relations L -> nat.",
            "VernacAssumption",
            "7d46e7172e4f8afe9c452578494a18d04f3dd4f3"
        ],
        [
            "Hypothesis codeFInj : forall f g : Functions L, codeF f = codeF g -> f = g.",
            "VernacAssumption",
            "4b0b91012823ec8b2df957736530fa372d1dd248"
        ],
        [
            "Hypothesis codeRInj : forall R S : Relations L, codeR R = codeR S -> R = S.",
            "VernacAssumption",
            "e4c0a75f6c8e28817a24963d05324e3490fd84e4"
        ],
        [
            "Let Formula := Formula L.",
            "VernacDefinition",
            "3d32ab58ebf838c2a87fdc2e6124bfb77b6c785b"
        ],
        [
            "Let Formulas := Formulas L.",
            "VernacDefinition",
            "3e58c6132e0d63871e6929fdf8514df1ca805073"
        ],
        [
            "Let System := System L.",
            "VernacDefinition",
            "cca6eba541a212b17367017275b463c5608aa66d"
        ],
        [
            "Let Term := Term L.",
            "VernacDefinition",
            "38e1762c57b9701000a89090666997db5d597a34"
        ],
        [
            "Let Terms := Terms L.",
            "VernacDefinition",
            "ac274971655c7d87e7a366522fa4f11f94117e84"
        ],
        [
            "Let var := var L.",
            "VernacDefinition",
            "387b134d06ce79979638575c6631443c7143b913"
        ],
        [
            "Let apply := apply L.",
            "VernacDefinition",
            "171f7b3946ad56564d4a09c4656739ed07770a44"
        ],
        [
            "Let equal := equal L.",
            "VernacDefinition",
            "a97cb35845ad0374b8596fd6d66f5c04065714a3"
        ],
        [
            "Let atomic := atomic L.",
            "VernacDefinition",
            "7638f14f126e2c8e95075078253a597eea7fd9ac"
        ],
        [
            "Let impH := impH L.",
            "VernacDefinition",
            "b3d855010528c91b0d1d6c2d64740a3e6e7417a6"
        ],
        [
            "Let notH := notH L.",
            "VernacDefinition",
            "096b324518e16c165cd803fe11de91b995393f24"
        ],
        [
            "Let forallH := forallH L.",
            "VernacDefinition",
            "eaf4bad969f5571f26e0bbda77b3d70e626f3102"
        ],
        [
            "Let orH := orH L.",
            "VernacDefinition",
            "0ac8832e88ec1801dd7f8e764071579c4014e425"
        ],
        [
            "Let andH := andH L.",
            "VernacDefinition",
            "4daa82892653c0883a5d6ebec876be8ae9f5ec12"
        ],
        [
            "Let existH := existH L.",
            "VernacDefinition",
            "0ba7f517f2c1b7f1a555803e43ae56c5f61ebcae"
        ],
        [
            "Let iffH := iffH L.",
            "VernacDefinition",
            "c97762ff458ff51e91985121c0ae88a85a82e865"
        ],
        [
            "Let ifThenElseH := ifThenElseH L.",
            "VernacDefinition",
            "34c02609686a38b645af860458ab18a92957ea25"
        ],
        [
            "Let Prf := Prf L.",
            "VernacDefinition",
            "d67c53d8c574b544ea8a06853dee07e5d9b2b128"
        ],
        [
            "Let SysPrf := SysPrf L.",
            "VernacDefinition",
            "af3eb4e9887a702b1ec42772618df5c6c558b3fc"
        ],
        [
            "Fixpoint codeTerm (t : Term) : nat := match t with | fol.var n => cPair 0 n | fol.apply f ts => cPair (S (codeF f)) (codeTerms _ ts) end with codeTerms (n : nat) (ts : Terms n) {struct ts} : nat := match ts with | Tnil => 0 | Tcons n t ss => S (cPair (codeTerm t) (codeTerms n ss)) end.",
            "VernacFixpoint",
            "a71a858e420c0bb78e896b8e37fedc4eda72fe2b"
        ],
        [
            "Lemma codeTermInj : forall t s : Term, codeTerm t = codeTerm s -> t = s.",
            "VernacStartTheoremProof",
            "4150bacf1870a057ad8696508ab4cd6a8b10c0aa"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => forall ss : Terms n, codeTerms n ts = codeTerms n ss -> ts = ss).",
            "VernacExtend",
            "7a345fdadfd8d257dff77f0a843e3d45511e26fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s.",
            "VernacExtend",
            "25b900e268e7851d959aa45edce33af62b3fca65"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "replace n with n0.",
            "VernacExtend",
            "016f906ab7d1c5a2591a0930545de72cc280fee3"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "symmetry in |- *.",
            "VernacExtend",
            "dc33a39a53e296ef5e59fd831d55212be2a42f22"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (0 = S (codeF f)).",
            "VernacExtend",
            "765c3b854076c4956039ce88cc30e0903ad910cc"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "discriminate H0.",
            "VernacExtend",
            "cd7043143d6a4e1505f0ccbc30dbfce403162dec"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct s.",
            "VernacExtend",
            "25b900e268e7851d959aa45edce33af62b3fca65"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assert (S (codeF f) = 0).",
            "VernacExtend",
            "eedc227cd99982f4ab77e1d4276229624cb4ea29"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assert (f = f0).",
            "VernacExtend",
            "2897ec35e8a01053275be11eb0adefd0ddb3e25b"
        ],
        [
            "apply codeFInj.",
            "VernacExtend",
            "5bc66c4fc0d3e1d499e056b7037142ab4b5b8c92"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "cut (cPair (S (codeF f)) (codeTerms (arity L (inr (Relations L) f)) t0) = cPair (S (codeF f0)) (codeTerms (arity L (inr (Relations L) f0)) t1)).",
            "VernacExtend",
            "20ad2fab3e6e8154d99693ba986b5723405bc500"
        ],
        [
            "generalize t1.",
            "VernacExtend",
            "0ce378a9a86764153e35c0ef4c7ecab6e8107294"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "clear H1 H0 t1.",
            "VernacExtend",
            "e64d737377075d7dc87b846d386479f93f694451"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (H t1).",
            "VernacExtend",
            "ba31d42e3be4d81f43fe7fc78192e1bf03e0d053"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- nilTerms.",
            "VernacExtend",
            "daee75e4e29c16b346ef13355b268d2fa9adb660"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (consTerms L n ss).",
            "VernacExtend",
            "ff0040cb282288095c90680ba729fd944955c265"
        ],
        [
            "induction x as (a, b).",
            "VernacExtend",
            "08bbcfffb4e63254bbdb31c0af343bc501d7e0e7"
        ],
        [
            "simpl in p.",
            "VernacExtend",
            "758a283616e7f958e765c456c9c1fef6ebb53020"
        ],
        [
            "rewrite <- p.",
            "VernacExtend",
            "388bccc4339b5f5d63163534189e8e2fc069dd7b"
        ],
        [
            "rewrite <- p in H1.",
            "VernacExtend",
            "cf798e57c23eb4bf04ab433ada1ab0d44585ac80"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "rewrite (H a).",
            "VernacExtend",
            "be35d756e8aa66557ae3a68a26d1df5f5614de37"
        ],
        [
            "rewrite (H0 b).",
            "VernacExtend",
            "cce4510a44b15032b323b58e1a984b1c2dc7f5d3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeTermsInj : forall (n : nat) (ts ss : Terms n), codeTerms n ts = codeTerms n ss -> ts = ss.",
            "VernacStartTheoremProof",
            "2308674daf8581fa3f5b9560b017e1f575e06197"
        ],
        [
            "intros n ts.",
            "VernacExtend",
            "6f2e2a04928352590107871b6dbaeb7a81f8daa9"
        ],
        [
            "induction ts as [| n t ts Hrects].",
            "VernacExtend",
            "4a72ca30982cf76b6ad63620c27c0db203f25a01"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- (nilTerms L ss).",
            "VernacExtend",
            "3c514333f41a75262233293ef355bade0166b6a7"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (consTerms L n ss).",
            "VernacExtend",
            "ff0040cb282288095c90680ba729fd944955c265"
        ],
        [
            "induction x as (a, b).",
            "VernacExtend",
            "08bbcfffb4e63254bbdb31c0af343bc501d7e0e7"
        ],
        [
            "simpl in p.",
            "VernacExtend",
            "758a283616e7f958e765c456c9c1fef6ebb53020"
        ],
        [
            "rewrite <- p.",
            "VernacExtend",
            "388bccc4339b5f5d63163534189e8e2fc069dd7b"
        ],
        [
            "rewrite <- p in H.",
            "VernacExtend",
            "1081f8d5430fc82f7c69aa1c04719a3d7f49c7e4"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite (Hrects b).",
            "VernacExtend",
            "79c5edc69d534d70346cc75ff85affd27db06dd7"
        ],
        [
            "rewrite (codeTermInj t a).",
            "VernacExtend",
            "e45c72d8dfb3bd72c2475fd7a9c0ce56523549a9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply eq_add_S.",
            "VernacExtend",
            "8d4d3e3ae50c51a73d942cd0765a2d1f975f43b5"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint codeFormula (f : Formula) : nat := match f with | fol.equal t1 t2 => cPair 0 (cPair (codeTerm t1) (codeTerm t2)) | fol.impH f1 f2 => cPair 1 (cPair (codeFormula f1) (codeFormula f2)) | fol.notH f1 => cPair 2 (codeFormula f1) | fol.forallH n f1 => cPair 3 (cPair n (codeFormula f1)) | fol.atomic R ts => cPair (4+(codeR R)) (codeTerms _ ts) end.",
            "VernacFixpoint",
            "4e8af733525bda4aca96862bfef9dbdf014554ff"
        ],
        [
            "Lemma codeFormulaInj : forall f g : Formula, codeFormula f = codeFormula g -> f = g.",
            "VernacStartTheoremProof",
            "9c3fccbb73e1c75f34a4be7f9c2147abd91f1594"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction f as [t t0| r t| f1 Hrecf1 f0 Hrecf0| f Hrecf| n f Hrecf]; intros; [ destruct g as [t1 t2| r t1| f f0| f| n f] | destruct g as [t0 t1| r0 t0| f f0| f| n f] | destruct g as [t t0| r t| f f2| f| n f] | destruct g as [t t0| r t| f0 f1| f0| n f0] | destruct g as [t t0| r t| f0 f1| f0| n0 f0] ]; (simpl in H; try match goal with | h:(cPair ?X1 ?X2 = cPair ?X3 ?X4) |- _ => elimtype False; cut (X1 = X3); [ discriminate | eapply cPairInj1; apply h ] end).",
            "VernacExtend",
            "0a494bba79f90dfd3da49f49668a2850aa83ebd0"
        ],
        [
            "rewrite (codeTermInj t t1).",
            "VernacExtend",
            "34a0d142bba331ca5489f06e4a5adfb1edd28aff"
        ],
        [
            "rewrite (codeTermInj t0 t2).",
            "VernacExtend",
            "e3dbdbe88fbaed01efeddbb4d0726727c92cfa46"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (r = r0).",
            "VernacExtend",
            "5713a0b8b66a53aa0f8161b714fcb14f2abd823e"
        ],
        [
            "apply codeRInj.",
            "VernacExtend",
            "61098097bbe9a9c08fc0a3970c96e2deb9f32ddc"
        ],
        [
            "do 4 apply eq_add_S.",
            "VernacExtend",
            "69889ad9fc22d92e5a324b12e59c3f9b27b7c599"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "cut (cPair (S (S (S (S (codeR r))))) (codeTerms (arity L (inl (Functions L) r)) t) = cPair (S (S (S (S (codeR r0))))) (codeTerms (arity L (inl (Functions L) r0)) t0)).",
            "VernacExtend",
            "0f0365d46ef16b1c0c5be7014a93850895e218b1"
        ],
        [
            "generalize t0.",
            "VernacExtend",
            "3a4ad7fa99884723094c4608b0891b4b9c21e461"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "clear H0 H t0.",
            "VernacExtend",
            "35ab3fb1323d9b646495c08d587d242a1e3aacad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (codeTermsInj _ t t0).",
            "VernacExtend",
            "7401611c6749c1aa67584f2241f013dff5a13836"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite (Hrecf1 f).",
            "VernacExtend",
            "7ffffc15626ab22ce74e364bed9b4e01ee199e1c"
        ],
        [
            "rewrite (Hrecf0 f2).",
            "VernacExtend",
            "2a45c3a4af4dc8ebf3eae229c20a2c556088f408"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite (Hrecf f0).",
            "VernacExtend",
            "e7c531b279bb5af68201dca6a523ec753fc053d6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite (Hrecf f0).",
            "VernacExtend",
            "e7c531b279bb5af68201dca6a523ec753fc053d6"
        ],
        [
            "replace n0 with n.",
            "VernacExtend",
            "f69e94a9d1ef10f3c9303d066c02e13e91ef3a03"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint codePrf (Z : Formulas) (f : Formula) (prf : Prf Z f) {struct prf} : nat := match prf with | AXM A => cPair 0 (codeFormula A) | MP Axm1 Axm2 A B rec1 rec2 => cPair 1 (cPair (cPair (cPair 1 (cPair (codeFormula A) (codeFormula B))) (codePrf _ _ rec1)) (cPair (codeFormula A) (codePrf _ _ rec2))) | GEN Axm A v _ rec => cPair 2 (cPair v (cPair (codeFormula A) (codePrf _ _ rec))) | IMP1 A B => cPair 3 (cPair (codeFormula A) (codeFormula B)) | IMP2 A B C => cPair 4 (cPair (codeFormula A) (cPair (codeFormula B) (codeFormula C))) | CP A B => cPair 5 (cPair (codeFormula A) (codeFormula B)) | FA1 A v t => cPair 6 (cPair (codeFormula A) (cPair v (codeTerm t))) | FA2 A v _ => cPair 7 (cPair (codeFormula A) v) | FA3 A B v => cPair 8 (cPair (codeFormula A) (cPair (codeFormula B) v)) | EQ1 => cPair 9 0 | EQ2 => cPair 10 0 | EQ3 => cPair 11 0 | EQ4 r => cPair 12 (codeR r) | EQ5 f => cPair 13 (codeF f) end.",
            "VernacFixpoint",
            "37d5a2b592d8c9d0f517b030186007670eef426a"
        ],
        [
            "Lemma codePrfInjAxm : forall (a b : Formula) (A B : Formulas) (p : Prf A a) (q : Prf B b), codePrf A a p = codePrf B b q -> A = B.",
            "VernacStartTheoremProof",
            "fd27aa3feeb9429a6d2520a89d85f4677ba946dd"
        ],
        [
            "intros a b A B p.",
            "VernacExtend",
            "6623188d2b192ba8bb6622d225eac38b61646c6c"
        ],
        [
            "generalize B b.",
            "VernacExtend",
            "a433da17b10239bc12e387ab5c5c48ea535a0455"
        ],
        [
            "clear B b.",
            "VernacExtend",
            "86ed417043b7026ca3a9f16e702132bdbd818fe8"
        ],
        [
            "induction p as [A| Axm1 Axm2 A B p1 Hrecp1 p0 Hrecp0| Axm A v n p Hrecp| A B| A B C| A B| A v t| A v n| A B v| | | | R| f]; intros; [ destruct q as [A0| Axm1 Axm2 A0 B p p0| Axm A0 v n p| A0 B| A0 B C| A0 B| A0 v t| A0 v n| A0 B v| | | | R| f] | destruct q as [A0| Axm0 Axm3 A0 B0 p p2| Axm A0 v n p| A0 B0| A0 B0 C| A0 B0| A0 v t| A0 v n| A0 B0 v| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B p0 p1| Axm0 A0 v0 n0 p0| A0 B| A0 B C| A0 B| A0 v0 t| A0 v0 n0| A0 B v0| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B0 p p0| Axm A0 v n p| A0 B0| A0 B0 C| A0 B0| A0 v t| A0 v n| A0 B0 v| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B0 p p0| Axm A0 v n p| A0 B0| A0 B0 C0| A0 B0| A0 v t| A0 v n| A0 B0 v| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B0 p p0| Axm A0 v n p| A0 B0| A0 B0 C| A0 B0| A0 v t| A0 v n| A0 B0 v| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B p p0| Axm A0 v0 n p| A0 B| A0 B C| A0 B| A0 v0 t0| A0 v0 n| A0 B v0| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B p p0| Axm A0 v0 n0 p| A0 B| A0 B C| A0 B| A0 v0 t| A0 v0 n0| A0 B v0| | | | R| f] | destruct q as [A0| Axm1 Axm2 A0 B0 p p0| Axm A0 v0 n p| A0 B0| A0 B0 C| A0 B0| A0 v0 t| A0 v0 n| A0 B0 v0| | | | R| f] | destruct q as [A| Axm1 Axm2 A B p p0| Axm A v n p| A B| A B C| A B| A v t| A v n| A B v| | | | R| f] | destruct q as [A| Axm1 Axm2 A B p p0| Axm A v n p| A B| A B C| A B| A v t| A v n| A B v| | | | R| f] | destruct q as [A| Axm1 Axm2 A B p p0| Axm A v n p| A B| A B C| A B| A v t| A v n| A B v| | | | R| f] | destruct q as [A| Axm1 Axm2 A B p p0| Axm A v n p| A B| A B C| A B| A v t| A v n| A B v| | | | R0| f] | destruct q as [A| Axm1 Axm2 A B p p0| Axm A v n p| A B| A B C| A B| A v t| A v n| A B v| | | | R| f0] ]; (simpl in H; try match goal with | h:(cPair ?X1 ?X2 = cPair ?X3 ?X4) |- _ => elimtype False; cut (X1 = X3); [ discriminate | eapply cPairInj1; apply h ] end); try reflexivity.",
            "VernacExtend",
            "0d506bdfe5f65c4a00812bd476f033a409dc561a"
        ],
        [
            "replace A0 with A.",
            "VernacExtend",
            "91e56426b5c3a8946ba5cb280684f3f116855436"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply codeFormulaInj.",
            "VernacExtend",
            "a1236b5bba9d8563115d8e49480e8f4a40b56024"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "replace Axm0 with Axm1.",
            "VernacExtend",
            "c8c0012dd3efe90d9db9e656b9af0dc113c0a883"
        ],
        [
            "replace Axm3 with Axm2.",
            "VernacExtend",
            "42742c06f33ce4019cdc028636813b47cc7a6206"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply Hrecp0 with A0 p2.",
            "VernacExtend",
            "d8f8017998caac35ee245b8f87fd3fc4f5ccbf52"
        ],
        [
            "do 3 eapply cPairInj2.",
            "VernacExtend",
            "fda05828d3bce1b160022d0fb37583ef3dd3223a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply Hrecp1 with (fol.impH L A0 B0) p.",
            "VernacExtend",
            "8ff2293eb3989a794fb88488c5a62c5a49d640d0"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply Hrecp with A0 p0.",
            "VernacExtend",
            "506bf177a02371a727fd525d1a7ae35d0ed5d7df"
        ],
        [
            "do 3 eapply cPairInj2.",
            "VernacExtend",
            "fda05828d3bce1b160022d0fb37583ef3dd3223a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeImp (a b : nat) := cPair 1 (cPair a b).",
            "VernacDefinition",
            "80d930a9afbde582cf7c19a0d48ec3d02779d8ac"
        ],
        [
            "Lemma codeImpCorrect : forall a b : Formula, codeImp (codeFormula a) (codeFormula b) = codeFormula (impH a b).",
            "VernacStartTheoremProof",
            "045c5bb0b4e5ca511072c66b9ff2d4d4b1cb03cf"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeNot (a : nat) := cPair 2 a.",
            "VernacDefinition",
            "eea434677b2174f4a3fc5143885f7423e0582fd8"
        ],
        [
            "Lemma codeNotCorrect : forall a : Formula, codeNot (codeFormula a) = codeFormula (notH a).",
            "VernacStartTheoremProof",
            "d3ea719f34f1cfb3a711e5636d98ef74f5614003"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeForall (n a : nat) := cPair 3 (cPair n a).",
            "VernacDefinition",
            "5503098831c3685eae964cd35e2aaa6bc015ffaa"
        ],
        [
            "Lemma codeForallCorrect : forall (n : nat) (a : Formula), codeForall n (codeFormula a) = codeFormula (forallH n a).",
            "VernacStartTheoremProof",
            "9850608da57dce0131f2664f792571dbc291f0f6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeOr (a b : nat) := codeImp (codeNot a) b.",
            "VernacDefinition",
            "870bb4a0f5e56738a66c777a6f0b12302bf99c5d"
        ],
        [
            "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).",
            "VernacStartTheoremProof",
            "f4de3e9c361df0b9c252dfac8f96b350eda70511"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeAnd (a b : nat) := codeNot (codeOr (codeNot a) (codeNot b)).",
            "VernacDefinition",
            "055bba9410649ed75464e3550399c73e293299ea"
        ],
        [
            "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).",
            "VernacStartTheoremProof",
            "72fbb03f6f3efb5c8cbd708d879e2eee68e0b028"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeIff (a b : nat) := codeAnd (codeImp a b) (codeImp b a).",
            "VernacDefinition",
            "538b069b1b1158ce65ec317726020ee84ed0d207"
        ],
        [
            "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).",
            "VernacStartTheoremProof",
            "da7c3dc554db90ba257b0aff7f5332d0559b151a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Code_Term_Formula_Proof.",
            "VernacEndSegment",
            "a80b9abc963280bf2860533dc6ade72730cdba6e"
        ]
    ],
    "proofs": [
        {
            "name": "codeImpCorrect",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNotCorrect",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeForallCorrect",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeOrCorrect",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeAndCorrect",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeIffCorrect",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}