{
    "filename": "goedel1.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import Ensembles.",
            "VernacRequire",
            "63f80d6be2b42bad6c3542a86c69acf401d90a4a"
        ],
        [
            "Require Import Coq.Lists.List.",
            "VernacRequire",
            "3f8620a911f16f9e8918ea7512dbb594c917da38"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import folProof.",
            "VernacRequire",
            "a0193d39f532e35a330dca71bfab163ef1b5dd49"
        ],
        [
            "Require Import subProp.",
            "VernacRequire",
            "958f8351edff1532d30f0dc5037e19d46aa66886"
        ],
        [
            "Require Import ListExt.",
            "VernacRequire",
            "8c4c029b2c43ab5886e4af5e6402bea050085fed"
        ],
        [
            "Require Import fixPoint.",
            "VernacRequire",
            "81001b53f78f30fa31b303df48e39737cf991f77"
        ],
        [
            "Require Import codeSysPrf.",
            "VernacRequire",
            "c875f0cd33c9421a710a46155f450a2ca5b08dbf"
        ],
        [
            "Require Import wConsistent.",
            "VernacRequire",
            "0eb0815b93b9b90d626e48c2d63fe7a6e7f4ae5d"
        ],
        [
            "Require Import NN.",
            "VernacRequire",
            "c73098c556eb177eea838625bcd046ff391019a4"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import checkPrf.",
            "VernacRequire",
            "5a29ee489ac8df5f00052a53f5501424e1e39b98"
        ],
        [
            "Section Goedel's_1st_Incompleteness.",
            "VernacBeginSection",
            "07b6ec438dd1f2a200c8464e05c469de840cb975"
        ],
        [
            "Definition codeFormula := codeFormula LNN codeLNTFunction codeLNNRelation.",
            "VernacDefinition",
            "1b21e11a1f2f098095043af7e44ca93610c9d691"
        ],
        [
            "Variable T : System.",
            "VernacAssumption",
            "61341f859d94b5ad138d74bb056a5fff161c13cc"
        ],
        [
            "Hypothesis extendsNN : Included _ NN T.",
            "VernacAssumption",
            "92f6c2809bdac4ac1361bccf09d580aa965da5f8"
        ],
        [
            "Variable repT : Formula.",
            "VernacAssumption",
            "1fc071214564e149cc512a6fcea70a579f01413e"
        ],
        [
            "Variable v0 : nat.",
            "VernacAssumption",
            "ee8e59e21c3303f371fc7265e0c385dce3bc812c"
        ],
        [
            "Hypothesis freeVarRepT : forall v : nat, In v (freeVarFormula LNN repT) -> v = v0.",
            "VernacAssumption",
            "4398f177341f47391f38bd58eab4d8b0ced1dc06"
        ],
        [
            "Hypothesis expressT1 : forall f : Formula, mem _ T f -> SysPrf T (substituteFormula LNN repT v0 (natToTerm (codeFormula f))).",
            "VernacAssumption",
            "c7fdfd487f22d5427f016c6c280bf2d39ac11b94"
        ],
        [
            "Hypothesis expressT2 : forall f : Formula, ~ mem _ T f -> SysPrf T (notH (substituteFormula LNN repT v0 (natToTerm (codeFormula f)))).",
            "VernacAssumption",
            "6e47d302c9c01991cc440b3e02344ce310433607"
        ],
        [
            "Definition codeSysPrf := codeSysPrf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNNRIsPR repT v0.",
            "VernacDefinition",
            "2649640d5ce76a0c28f510d3410c542ae9fdbd1d"
        ],
        [
            "Definition codeSysPf := codeSysPf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNNRIsPR repT v0.",
            "VernacDefinition",
            "9d615e4f4de6fb258c8222a4a92882b723f5198a"
        ],
        [
            "Definition codeSysPfCorrect := codeSysPfCorrect LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNTFIsCorrect1 codeArityLNNRIsPR codeArityLNNRIsCorrect1 T extendsNN T repT v0 freeVarRepT expressT1.",
            "VernacDefinition",
            "6b64830fc13457241bbe6b05a09d2f6e1469b02f"
        ],
        [
            "Definition codeSysPrfCorrect2 := codeSysPrfCorrect2 LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNTFIsCorrect1 codeArityLNNRIsPR codeArityLNNRIsCorrect1 T extendsNN T repT v0 freeVarRepT expressT2.",
            "VernacDefinition",
            "7530fc6af80845e326889b61d279ac9a50dad645"
        ],
        [
            "Definition codeSysPrfCorrect3 := codeSysPrfCorrect3 LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNTFIsCorrect1 codeArityLNTFIsCorrect2 codeArityLNNRIsPR codeArityLNNRIsCorrect1 codeArityLNNRIsCorrect2 codeLNTFunctionInj codeLNNRelationInj T extendsNN.",
            "VernacDefinition",
            "857f61bc9ff6dbeceb8fae4b0750d429c125767e"
        ],
        [
            "Definition G := let (a,_) := FixPointLNN (notH codeSysPf) 0 in a.",
            "VernacDefinition",
            "bd8d6b11490af8d9016a3798c6434a6105c8c336"
        ],
        [
            "Lemma freeVarG : forall v : nat, ~ In v (freeVarFormula LNN G).",
            "VernacStartTheoremProof",
            "02e7bbcf71125ee273153aa97779dd767f955441"
        ],
        [
            "unfold G.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "destruct (FixPointLNN (notH codeSysPf) 0) as [x [H1 H2]].",
            "VernacExtend",
            "5daa7de38c2dff5c30826f69bc10689011f64c47"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (H2 v).",
            "VernacExtend",
            "c9bb0820210e6325e2e9022f70cf3b00158d2b64"
        ],
        [
            "rename H3 into foo.",
            "VernacExtend",
            "8d72b5821af1295b609da1e3c1378eeeb839957a"
        ],
        [
            "rename H0 into H3.",
            "VernacExtend",
            "c58c203a8c385a16ca80263dc31ca1cbe8e94ad6"
        ],
        [
            "absurd (v = 0).",
            "VernacExtend",
            "49e8d9b842ea9cce162e9d0d86e9be40746c95fd"
        ],
        [
            "eapply In_list_remove2.",
            "VernacExtend",
            "7eb1b8eb89512c806e1e243a61da5303249e789b"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply (freeVarCodeSysPf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsPR codeArityLNNRIsPR) .",
            "VernacExtend",
            "bf4dc7800ffe0f9ff3e01f9305d4b1d7b70b01d6"
        ],
        [
            "apply freeVarRepT.",
            "VernacExtend",
            "d7f927fffc7d72393c628f7a98d5ef3989e6ae70"
        ],
        [
            "assert (H5:(forall f : Formula, In v (freeVarFormula LNN (notH f)) -> In v (freeVarFormula LNN f))).",
            "VernacExtend",
            "efa030e67efcdc4fd5716eb3b6da178f8c2deb1f"
        ],
        [
            "intros f H5.",
            "VernacExtend",
            "d2be4f56897cdac461b77022f615773b65a8a720"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "unfold codeSysPf in H3.",
            "VernacExtend",
            "91560e75e085065e6b089021c29e3d2e8557b67f"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FirstIncompletenessA : SysPrf T G -> Inconsistent LNN T.",
            "VernacStartTheoremProof",
            "ef9aa9315d207c2537a2c2854aba007b634dd8f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold G in H.",
            "VernacExtend",
            "8a8300ba25c1a044fd0432979fce56f23aec5213"
        ],
        [
            "destruct (FixPointLNN (notH codeSysPf) 0) as [x [H1 H2]].",
            "VernacExtend",
            "5daa7de38c2dff5c30826f69bc10689011f64c47"
        ],
        [
            "unfold Inconsistent in |- *.",
            "VernacExtend",
            "0eb00ce7c934ae4c564ebd33a299653286c3d1be"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply contradiction with x.",
            "VernacExtend",
            "2266ada3188d9d1556a1827a05b9a18c0c28ed99"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (notH codeSysPf) 0 (codeNatToTerm.natToTermLNN (code.codeFormula LNN codeLNTFunction codeLNNRelation x)))).",
            "VernacExtend",
            "e0379675ad3d0ea88928ef6cd2c737f060842964"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "apply nnI.",
            "VernacExtend",
            "66b449152f47964e58c25d0d1e0c14d75b459018"
        ],
        [
            "apply codeSysPfCorrect.",
            "VernacExtend",
            "cc2e2e55ba2d2a8f8cf9bfb8c0105a69a0c0ed90"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FirstIncompletenessB : wConsistent T -> ~ SysPrf T (notH G).",
            "VernacStartTheoremProof",
            "91212d6cf84673b0436a907dd1a5c1074daf66a6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (con : (forall f:Formula, SysPrf T f) -> False).",
            "VernacExtend",
            "2a1ab89e181fce610071f24f6bf9d2c0a63dc3ba"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (wCon2Con T).",
            "VernacExtend",
            "3301bd24cf0591c6ca0fa1cfe6a12464ef098644"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold G.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "destruct (FixPointLNN (notH codeSysPf) 0) as [x [H1 H2]].",
            "VernacExtend",
            "5daa7de38c2dff5c30826f69bc10689011f64c47"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "set (codeX := code.codeFormula LNN codeLNTFunction codeLNNRelation x) in *.",
            "VernacExtend",
            "92c39a1eeb74684f13370c98131d54b5b8a9b105"
        ],
        [
            "unfold wConsistent in H.",
            "VernacExtend",
            "e0bea1a0c3c5cbcb65388fd92e73a53890c3567c"
        ],
        [
            "set (y := notH (substituteFormula LNN codeSysPrf 0 (codeNatToTerm.natToTermLNN codeX))) in *.",
            "VernacExtend",
            "0c99a5d0d2f615edd3941a9a7a438c3d187c8015"
        ],
        [
            "assert (forall x : nat, In x (freeVarFormula LNN y) -> 1 = x).",
            "VernacExtend",
            "91a48fcde5c7a7551ac1b380021fc4dfade00d64"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold y in H3.",
            "VernacExtend",
            "f2c3bdf55357b84e3b7fd6d9705d53042e3f277d"
        ],
        [
            "assert (In x0 (freeVarFormula LNN (substituteFormula LNN codeSysPrf 0 (codeNatToTerm.natToTermLNN codeX)))).",
            "VernacExtend",
            "502426b652e921a638b3b5f33efb509b61568648"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H4).",
            "VernacExtend",
            "5c8621e56555d16295ceed311519d01e133ca795"
        ],
        [
            "destruct x0 as [| n].",
            "VernacExtend",
            "617a50bbf1472217c7973b827910bf172e4255ef"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H5).",
            "VernacExtend",
            "6cbbe386b1a989e3a87b6393efce25332f616239"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim (le_not_lt (S (S n)) 1).",
            "VernacExtend",
            "b0088ee26f073eda35c952ff47f5e3a06e074129"
        ],
        [
            "assert (In (S (S n)) (freeVarFormula LNN codeSysPrf)).",
            "VernacExtend",
            "3c71d42ddc37efd3b99bbe7f1882c0f7d5c45804"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "apply (freeVarCodeSysPrf _ _ _ _ _ _ _ _ _ freeVarRepT _ H6).",
            "VernacExtend",
            "918524f9e0f9034a18ef74daf0634006b6487182"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "elim (closedNatToTerm _ _ H5).",
            "VernacExtend",
            "0fc146805b9ae08bf05d4a019dfc41cd88ee3bef"
        ],
        [
            "induction (H _ _ H3).",
            "VernacExtend",
            "db17488c1126ac64ade7cbbba4ca7a6c1af615f8"
        ],
        [
            "unfold y in H4.",
            "VernacExtend",
            "1b0dd22b827058cc88d02f2df0289b9f6db84e18"
        ],
        [
            "induction (eq_nat_dec (checkPrf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR (codeFormula x) x0) 0).",
            "VernacExtend",
            "4da4f008a8d81aa07c7440c7c7250d4dd8d157b5"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "unfold codeSysPrf, codeX in |- *.",
            "VernacExtend",
            "1de369e55c6672b692353d78c177a1bab34398b7"
        ],
        [
            "apply codeSysPrfCorrect3.",
            "VernacExtend",
            "309f35915f9d62a88f521addba92c5b42de43a91"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (checkPrf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR (codeFormula x) (codePrf LNN codeLNTFunction codeLNNRelation A x p) = S (cPair.codeList (map codeFormula A))).",
            "VernacExtend",
            "df6b99e3c77f664d64031fdc91c01734da585ace"
        ],
        [
            "apply (checkPrfCorrect1 LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsCorrect1 codeArityLNNRIsCorrect1 A x p).",
            "VernacExtend",
            "6b3cd50633b6eea0fd929c97ada894968174f3de"
        ],
        [
            "rewrite <- H5 in H6.",
            "VernacExtend",
            "0e2593e66ddc11ba696cd3441b08171fe9e36aa1"
        ],
        [
            "rewrite H6 in a.",
            "VernacExtend",
            "9e59799b12306c44a01aea9f2090247500ad170f"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "assert (checkPrf LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR (codeFormula x) x0 <> 0).",
            "VernacExtend",
            "53b30b671505fe845213a3797be19274044ec2f8"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear b.",
            "VernacExtend",
            "b4db797e37f57242b034a9c4bdb4e65c1ad08b36"
        ],
        [
            "decompose record (checkPrfCorrect2 LNN codeLNTFunction codeLNNRelation codeArityLNTF codeArityLNNR codeArityLNTFIsCorrect1 codeArityLNTFIsCorrect2 codeArityLNNRIsCorrect1 codeArityLNNRIsCorrect2 codeLNTFunctionInj codeLNNRelationInj _ _ H5).",
            "VernacExtend",
            "1489f4a3061206bf75b36f4c2ed6e7b6eea074b2"
        ],
        [
            "assert (x1 = x).",
            "VernacExtend",
            "609f35015c0ff551b1d85a8a3c8ac27c8209e16e"
        ],
        [
            "eapply codeFormulaInj.",
            "VernacExtend",
            "7852cde31d2de1fdfaf1d6936ecd082d0f4ee492"
        ],
        [
            "apply codeLNTFunctionInj.",
            "VernacExtend",
            "ed64377aae3a02a204f9d3d3a3c8aa16a98aeacb"
        ],
        [
            "apply codeLNNRelationInj.",
            "VernacExtend",
            "66d84f2c5206ac16732def0ef6bff1d83a7b7e3a"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "cut (codePrf LNN codeLNTFunction codeLNNRelation x2 x1 x3 = x0).",
            "VernacExtend",
            "0423cdddefff11c5ea6fc269c16d941d2a7ada28"
        ],
        [
            "generalize x3.",
            "VernacExtend",
            "b27cbf3babc0a4d8daa3f7e190d42c2ef6a15cbe"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "clear H6 H8 x3 H7 x1.",
            "VernacExtend",
            "1a61191a743d1c907d8a1d2800308127d6724115"
        ],
        [
            "assert (~ (forall g : fol.Formula LNN, In g x2 -> mem (fol.Formula LNN) T g)).",
            "VernacExtend",
            "2b5a20d38295a2cd4d42c60f57ef67dc6284221c"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (SysPrf T x).",
            "VernacExtend",
            "01c3c941de53268285de88b2f7081d3c0957c0d9"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "exists x2.",
            "VernacExtend",
            "c66cfc490b972d4e27c8ead94cd5deb052231b69"
        ],
        [
            "exists x4.",
            "VernacExtend",
            "a176989849305d5fcf5362de2e325c52a0f008e8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply con.",
            "VernacExtend",
            "3ea076a0e49f1998fb9b28e334cff11f2c87ce8f"
        ],
        [
            "unfold Inconsistent in |- *.",
            "VernacExtend",
            "0eb00ce7c934ae4c564ebd33a299653286c3d1be"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply contradiction with x; assumption.",
            "VernacExtend",
            "3255e6ddc38616eb824b6d12bdd30e0ab4de9ffe"
        ],
        [
            "assert (~ (exists g : Formula, In g x2 /\\ ~ mem _ T g)).",
            "VernacExtend",
            "2d9b6f5596faa7de1586c73b5c2bb57bf462146d"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "unfold codeSysPrf, codeX in |- *.",
            "VernacExtend",
            "1de369e55c6672b692353d78c177a1bab34398b7"
        ],
        [
            "rewrite <- H9.",
            "VernacExtend",
            "9575559b4e4b5658029033bee2aac6031ac75e67"
        ],
        [
            "apply codeSysPrfCorrect2.",
            "VernacExtend",
            "29edced64027829fb6037def12c9509b78a9bbf1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear x4 H9.",
            "VernacExtend",
            "d6f858332fe019a70bb78e0d4a9673fa85d1a881"
        ],
        [
            "induction x2 as [| a x2 Hrecx2].",
            "VernacExtend",
            "b6dd0e5b09b7fc18ee5dc7956986a53dd8e21257"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H8.",
            "VernacExtend",
            "676ff04537b52f84641f1c66db30e1386f2f595f"
        ],
        [
            "assert (~ (exists g : Formula, In g x2 /\\ ~ mem (fol.Formula LNN) T g)).",
            "VernacExtend",
            "e31a41b475a7a9c5b7d24c073df81113f4fc373d"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "induction H8 as (x1, H8).",
            "VernacExtend",
            "bfbd379533a03560e76a7185584c0470f8c85ea3"
        ],
        [
            "exists x1.",
            "VernacExtend",
            "41149f92e5f2a0109418d3e02971541f67fbd3df"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "assert (~ ~ (mem (fol.Formula LNN) T a \\/ ~ mem (fol.Formula LNN) T a)).",
            "VernacExtend",
            "506a76d5da6486eb43f911eafff6bd0e4edbe825"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H10 as [H10| H10].",
            "VernacExtend",
            "8a4b4320c0a12bc9900291fc0437a5d95fc68757"
        ],
        [
            "apply Hrecx2.",
            "VernacExtend",
            "8550b123b6b49e1e3852dd7c99637b86f906ebd9"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H12 as [H12| H12].",
            "VernacExtend",
            "4d1026df54d6c5832c266228cecd0b5edc16962d"
        ],
        [
            "rewrite <- H12.",
            "VernacExtend",
            "535d97bd150861302e54cffeb5719d00d6f597bb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "exists a.",
            "VernacExtend",
            "59cc5697e7369be65591d2d5e6ad6fd701682809"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (notH codeSysPf) 0 (codeNatToTerm.natToTermLNN codeX))).",
            "VernacExtend",
            "a85143d6e6aea80227bc6e61aecc4c48a26de93e"
        ],
        [
            "unfold codeSysPf, codeSysPrf.codeSysPf, y in |- *.",
            "VernacExtend",
            "551c9ac48a8c61a5fcb89ad5c0a05f2dbe3ad144"
        ],
        [
            "fold codeSysPrf in |- *.",
            "VernacExtend",
            "57a7773b34c1fa43f5a2759325dcddbf23fea58e"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "apply impTrans with (substituteFormula LNN (existH 1 codeSysPrf) 0 (codeNatToTerm.natToTermLNN codeX)).",
            "VernacExtend",
            "63bfc66a57d2e879dc9eac60089e94143f863ee6"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply nnE.",
            "VernacExtend",
            "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 1 0).",
            "VernacExtend",
            "7b4fb4ca71c63df5b0d3aa5a66a5254d0504ed7a"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 1 (freeVarTerm LNN (codeNatToTerm.natToTermLNN codeX))).",
            "VernacExtend",
            "7154f565104f50083f0aa2f7e0c5d091b568bc7c"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply existSys.",
            "VernacExtend",
            "f1f4cd34be6ae374ffc574b78f854737e4af84cc"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H4).",
            "VernacExtend",
            "b4c40cc77a03f7a6abf1979ed090739fd7a3ebd2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply existSimp.",
            "VernacExtend",
            "ab381d735410973956137577e45710cf7a8bfebe"
        ],
        [
            "apply nnI.",
            "VernacExtend",
            "66b449152f47964e58c25d0d1e0c14d75b459018"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply impE with (notH x).",
            "VernacExtend",
            "7d1ac7088ec17ba4869ffa0a5e6fd70ec5849e85"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Goedel'sIncompleteness1st : wConsistent T -> exists f : Formula, ~ SysPrf T f /\\ ~ SysPrf T (notH f) /\\ (forall v : nat, ~ In v (freeVarFormula LNN f)).",
            "VernacStartTheoremProof",
            "f5ffc02be34a47e9024fa1b2bee9ba70b20de4f8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists G.",
            "VernacExtend",
            "25a75f6ba4faab55e411f45974fce72cd605a38b"
        ],
        [
            "pose freeVarG.",
            "VernacExtend",
            "617c8e3538ac1df973a6be458921f98b4c1c526b"
        ],
        [
            "pose FirstIncompletenessA.",
            "VernacExtend",
            "8b2a8a5a9a72b7f0dc28780f31d81239094cfd9f"
        ],
        [
            "pose FirstIncompletenessB.",
            "VernacExtend",
            "00fe332486830cbea32a4ae274c101ec42e30258"
        ],
        [
            "assert (~Inconsistent LNN T).",
            "VernacExtend",
            "8c6bd0a149c00c44eec8062320e69943ee3bcd25"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (wCon2Con T H).",
            "VernacExtend",
            "743225c6783650619685da48ecbc06e76b89c5bc"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Goedel's_1st_Incompleteness.",
            "VernacEndSegment",
            "155f480e41daf32fff8aecc9d1a22774085adc09"
        ]
    ],
    "proofs": [
        {
            "name": "FirstIncompletenessA",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold G in H.",
                        "VernacExtend",
                        "8a8300ba25c1a044fd0432979fce56f23aec5213"
                    ]
                },
                {
                    "command": [
                        "destruct (FixPointLNN (notH codeSysPf) 0) as [x [H1 H2]].",
                        "VernacExtend",
                        "5daa7de38c2dff5c30826f69bc10689011f64c47"
                    ]
                },
                {
                    "command": [
                        "unfold Inconsistent in |- *.",
                        "VernacExtend",
                        "0eb00ce7c934ae4c564ebd33a299653286c3d1be"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply contradiction with x.",
                        "VernacExtend",
                        "2266ada3188d9d1556a1827a05b9a18c0c28ed99"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply impE with (notH (substituteFormula LNN (notH codeSysPf) 0 (codeNatToTerm.natToTermLNN (code.codeFormula LNN codeLNTFunction codeLNNRelation x)))).",
                        "VernacExtend",
                        "e0379675ad3d0ea88928ef6cd2c737f060842964"
                    ]
                },
                {
                    "command": [
                        "apply cp2.",
                        "VernacExtend",
                        "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply sysExtend with NN.",
                        "VernacExtend",
                        "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaNot LNN).",
                        "VernacExtend",
                        "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
                    ]
                },
                {
                    "command": [
                        "apply nnI.",
                        "VernacExtend",
                        "66b449152f47964e58c25d0d1e0c14d75b459018"
                    ]
                },
                {
                    "command": [
                        "apply codeSysPfCorrect.",
                        "VernacExtend",
                        "cc2e2e55ba2d2a8f8cf9bfb8c0105a69a0c0ed90"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Goedel'sIncompleteness1st",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "exists G.",
                        "VernacExtend",
                        "25a75f6ba4faab55e411f45974fce72cd605a38b"
                    ]
                },
                {
                    "command": [
                        "pose freeVarG.",
                        "VernacExtend",
                        "617c8e3538ac1df973a6be458921f98b4c1c526b"
                    ]
                },
                {
                    "command": [
                        "pose FirstIncompletenessA.",
                        "VernacExtend",
                        "8b2a8a5a9a72b7f0dc28780f31d81239094cfd9f"
                    ]
                },
                {
                    "command": [
                        "pose FirstIncompletenessB.",
                        "VernacExtend",
                        "00fe332486830cbea32a4ae274c101ec42e30258"
                    ]
                },
                {
                    "command": [
                        "assert (~Inconsistent LNN T).",
                        "VernacExtend",
                        "8c6bd0a149c00c44eec8062320e69943ee3bcd25"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct (wCon2Con T H).",
                        "VernacExtend",
                        "743225c6783650619685da48ecbc06e76b89c5bc"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}