{
    "filename": "fixPoint.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import codeSubFormula.",
            "VernacRequire",
            "17a759017d538ee0b31f71d62a29134c3482384b"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import folProof.",
            "VernacRequire",
            "a0193d39f532e35a330dca71bfab163ef1b5dd49"
        ],
        [
            "Require Import Languages.",
            "VernacRequire",
            "a5e243593808f803c7cf563bb9f1d082710ceaa0"
        ],
        [
            "Require Import subAll.",
            "VernacRequire",
            "3bc44800880fcbfa701035610cc9224d4b5ca16f"
        ],
        [
            "Require Import subProp.",
            "VernacRequire",
            "958f8351edff1532d30f0dc5037e19d46aa66886"
        ],
        [
            "Require Import folLogic3.",
            "VernacRequire",
            "5313da917cbd8284650f06a63d4e78e11cf70419"
        ],
        [
            "Require Import folReplace.",
            "VernacRequire",
            "4d2302c9e704187836912b1c7eb0c8d836a6d938"
        ],
        [
            "Require Import LNN.",
            "VernacRequire",
            "b2cf1153971d89cdb9d37dd081751af4b099fcfe"
        ],
        [
            "Require Import codeNatToTerm.",
            "VernacRequire",
            "495de82b82d858a4b27173a47af3c10d38ff8f56"
        ],
        [
            "Require Import PRrepresentable.",
            "VernacRequire",
            "c23e666a11cea7a903f1270ff6a33ef88330e20e"
        ],
        [
            "Require Import ListExt.",
            "VernacRequire",
            "8c4c029b2c43ab5886e4af5e6402bea050085fed"
        ],
        [
            "Require Import Coq.Lists.List.",
            "VernacRequire",
            "3f8620a911f16f9e8918ea7512dbb594c917da38"
        ],
        [
            "Require Import NN.",
            "VernacRequire",
            "c73098c556eb177eea838625bcd046ff391019a4"
        ],
        [
            "Require Import expressible.",
            "VernacRequire",
            "7288ac4451924c4535dae7e4e0e106c648ae3c52"
        ],
        [
            "Definition subStar (a v n : nat) := codeSubFormula a v (codeNatToTerm n).",
            "VernacDefinition",
            "18a4e16da95e3553e955f308d683fdfc36a44d64"
        ],
        [
            "Lemma subStarIsPR : isPR 3 subStar.",
            "VernacStartTheoremProof",
            "5c13612a33a712cb03350fed5e7f25c232c85bfb"
        ],
        [
            "unfold subStar in |- *.",
            "VernacExtend",
            "bebba87ef3e944fab57958c47ae3693c5d811652"
        ],
        [
            "apply compose3_3IsPR with (f1 := fun a v n : nat => a) (f2 := fun a v n : nat => v) (f3 := fun a v n : nat => codeNatToTerm n).",
            "VernacExtend",
            "6c52882438b15009462d654df4d643dfab1841bc"
        ],
        [
            "apply pi1_3IsPR.",
            "VernacExtend",
            "69ded56cb54e46793815f38a229f810bef22ec17"
        ],
        [
            "apply pi2_3IsPR.",
            "VernacExtend",
            "b556a10eda38792ce0fb0989e9246a2b09b60d23"
        ],
        [
            "apply filter001IsPR.",
            "VernacExtend",
            "3683012aa3187645c321886b7ef6c5c1fc255c3c"
        ],
        [
            "apply codeNatToTermIsPR.",
            "VernacExtend",
            "a281c72a948d332d7b6179d72e1bb0a6549521c2"
        ],
        [
            "apply codeSubFormulaIsPR.",
            "VernacExtend",
            "5d0bf0a7be6161c032b98eb84f0dede00ad6da7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section LNN_FixPoint.",
            "VernacBeginSection",
            "d7cdfef892e7fe7176a5c04175348ed51a5fd22a"
        ],
        [
            "Let codeFormula := codeFormula LNN codeLNTFunction codeLNNRelation.",
            "VernacDefinition",
            "641d8c916440b836b6d8c07f086fe3209001bc04"
        ],
        [
            "Lemma FixPointLNN : forall (A : Formula) (v : nat), {B : Formula | SysPrf NN (iffH B (substituteFormula LNN A v (natToTermLNN (codeFormula B)))) /\\ (forall x : nat, In x (freeVarFormula LNN B) <-> In x (list_remove _ eq_nat_dec v (freeVarFormula LNN A)))}.",
            "VernacStartTheoremProof",
            "20c8092ddb6834144c8415b90ca3401ebc0131d9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (subStarFormula := primRecFormula _ (proj1_sig subStarIsPR)) in *.",
            "VernacExtend",
            "b1b3f38320ab751b70143bb33da1710f8b93bd45"
        ],
        [
            "assert (represent : Representable NN 3 subStar subStarFormula).",
            "VernacExtend",
            "abacc67638096fe46810640873dab4941cc41937"
        ],
        [
            "unfold subStarFormula in |- *.",
            "VernacExtend",
            "416c210fb0de152bd036fa01f3253e9465430795"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "set (nv := newVar (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)) in *.",
            "VernacExtend",
            "e8ec10946cadacf7f92c7931c6e9a3be90235304"
        ],
        [
            "assert (0 <> nv).",
            "VernacExtend",
            "0e7378030fb0c6ce52a495eec8110d7cf039d966"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "unfold nv in H.",
            "VernacExtend",
            "b1cd085f452e8f1d759b65278799ea6576a6c116"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (1 <> nv).",
            "VernacExtend",
            "db0386f1a74f5deb61fc5379b23121468e82fd47"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "unfold nv in H0.",
            "VernacExtend",
            "caed7700ab82fd65a538946662244c6515a0803c"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (2 <> nv).",
            "VernacExtend",
            "658d62833e15a969c0d3c558d962135b940bdc10"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "unfold nv in H1.",
            "VernacExtend",
            "2631bbb56b89c1b66e293bcfdd85dc68ccf3974f"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (3 <> nv).",
            "VernacExtend",
            "4340b93f1d4efd23389928ae682a399bacf6a752"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "unfold nv in H2.",
            "VernacExtend",
            "aa8b78322826c1da320f390886eaa9a17d846980"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (3 < nv).",
            "VernacExtend",
            "875631273eda8cc847574116b5feb00009e8b955"
        ],
        [
            "destruct nv as [| n].",
            "VernacExtend",
            "c40176c8bf55b6f1f45fa2a8a78f20251afa22ee"
        ],
        [
            "elim H; auto.",
            "VernacExtend",
            "93275a139e0a54467a849c9ab468d4fd7beb5813"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H0; auto.",
            "VernacExtend",
            "a800ef22adfa848085c725928d1e918101fb7cd9"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H1; auto.",
            "VernacExtend",
            "d50026b5dc31929f05ffbd310861b147378ba238"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H2; auto.",
            "VernacExtend",
            "8a627dcf0fcd94e45a028b6ccd1e368d5ddc7cc5"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "set (Theta := existH v (andH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (var nv)) 2 (natToTerm nv)) 1 (var nv)) 0 (var v)) A)) in *.",
            "VernacExtend",
            "0e64214f4d710fde59465ba1e455943615aa68fa"
        ],
        [
            "exists (substituteFormula LNN Theta nv (natToTerm (codeFormula Theta))).",
            "VernacExtend",
            "ceb221241a620ee68b94abca471588b6b3c90501"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "set (N := natToTermLNN (codeFormula (substituteFormula LNN Theta nv (natToTerm (codeFormula Theta))))) in *.",
            "VernacExtend",
            "af88abc93bb4d92d3e04ee07ab69de7b694b04e2"
        ],
        [
            "unfold Theta at 1 in |- *.",
            "VernacExtend",
            "c35de6119723639547e00ad5170f997aa301cbfe"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec v nv).",
            "VernacExtend",
            "c837b83e49d2a7ecfb9eafaedbba2d1654e63d5c"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction (In_dec eq_nat_dec v (freeVarTerm LNN (natToTerm (codeFormula Theta)))).",
            "VernacExtend",
            "b7bc3502cb6cefe61f7f3ced019d0e92303edebc"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "794d5c218789d9d526e90bdaa3222c0a4bfba498"
        ],
        [
            "apply iffTrans with (existH v (andH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (natToTerm (codeFormula Theta))) 2 (natToTerm nv)) 1 (natToTerm (codeFormula Theta))) 0 (var v)) A)).",
            "VernacExtend",
            "42b644bf32cfa484c1ffb9eac79474eec67691e1"
        ],
        [
            "apply (reduceExist LNN).",
            "VernacExtend",
            "bd94f8999e9295dc5a7009334dbae569a2677268"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "apply (reduceAnd LNN).",
            "VernacExtend",
            "014729a4ced4cf32772264331d77ef7eacda21d7"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H4 as [H4| H4].",
            "VernacExtend",
            "05b5ce1d532afecab651a64afe6667145e595256"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subSubFormula LNN).",
            "VernacExtend",
            "a38f2ff4fd84a3bb408f51bdad67f0803ba7ad3d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In nv (freeVarFormula LNN subStarFormula)).",
            "VernacExtend",
            "20ee319b0888c011166e10fbf8d7c13488a8aecc"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "induction represent as (H6, H7).",
            "VernacExtend",
            "ef28ff5c0da4e0b5f6e9cdb5baf899abf9abd488"
        ],
        [
            "elim (lt_not_le _ _ H3).",
            "VernacExtend",
            "f4a745097e7b105233ffd1f1dda2fd2e6b86663b"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat right.",
            "VernacExtend",
            "0f53208403a49698156a837fdeea29441663e400"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply iffI.",
            "VernacExtend",
            "b0931ca74559ec090d086f9cab407abd4e689d72"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply existSys.",
            "VernacExtend",
            "f1f4cd34be6ae374ffc574b78f854737e4af84cc"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H4).",
            "VernacExtend",
            "5c8621e56555d16295ceed311519d01e133ca795"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H5).",
            "VernacExtend",
            "6cbbe386b1a989e3a87b6393efce25332f616239"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "elim (closedNatToTerm _ _ H5).",
            "VernacExtend",
            "0fc146805b9ae08bf05d4a019dfc41cd88ee3bef"
        ],
        [
            "apply impE with (substituteFormula LNN (equal (var 0) N) 0 (var v)).",
            "VernacExtend",
            "34e36785f51a2c2c3439d59a138e34860df21aaa"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply impE with (substituteFormula LNN A v (var v)).",
            "VernacExtend",
            "b57990fb1345f48bc0b5e8f555334c59fe175bee"
        ],
        [
            "apply (subWithEquals LNN).",
            "VernacExtend",
            "5f53b7a36bc2461829d2e71be83a076e924542e7"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "rewrite (subFormulaId LNN).",
            "VernacExtend",
            "5d46eb9a88f634251d58d6ae0da45f5ce4d33fa0"
        ],
        [
            "eapply andE2.",
            "VernacExtend",
            "c82ce44debfda7a5cd2fde9cabfd460aebba18a5"
        ],
        [
            "apply Axm; left; right; constructor.",
            "VernacExtend",
            "fc933040337f48b416dd8f5aeac8df5d75f902ab"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (natToTerm (codeFormula Theta))) 2 (natToTerm nv)) 1 (natToTerm (codeFormula Theta))) 0 (var v)).",
            "VernacExtend",
            "9f70c4c5c6a2d2a0ee257f53f33e35132a8d929b"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "induction represent as (H4, H5).",
            "VernacExtend",
            "e50b6059b2d4d85e7b1617c7739eaad07be54f73"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "replace (codeFormula (substituteFormula LNN Theta nv (natToTerm (codeFormula Theta)))) with (subStar (codeFormula Theta) nv (codeFormula Theta)).",
            "VernacExtend",
            "af2b3538806824fe1654f3d908e8b84a795b9369"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "unfold subStar in |- *.",
            "VernacExtend",
            "bebba87ef3e944fab57958c47ae3693c5d811652"
        ],
        [
            "rewrite codeNatToTermCorrectLNN.",
            "VernacExtend",
            "04148f93881b849da0007f6b566b94cd110864f6"
        ],
        [
            "unfold codeFormula at 1 in |- *.",
            "VernacExtend",
            "99f7bd7defaef78bbb7ef5dc209307d7b25ca6a5"
        ],
        [
            "rewrite codeSubFormulaCorrect.",
            "VernacExtend",
            "2942294961d93b57caac2eb594398e69db92c545"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply andE1.",
            "VernacExtend",
            "932461eacc6376aaacc9bb8ca9130c6060a6201f"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply existI with N.",
            "VernacExtend",
            "b429f9e1d3fc6375296784a8a7303742c7a57688"
        ],
        [
            "rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "794d5c218789d9d526e90bdaa3222c0a4bfba498"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "eapply impE with (substituteFormula LNN (substituteFormula LNN (equal (var 0) N) 0 (var v)) v N).",
            "VernacExtend",
            "c50ac83f7dba91d5446467f1044e3d1058c6784c"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "apply (reduceSub LNN).",
            "VernacExtend",
            "e3a39e0f7e48c81b41b6e9c99a74d50c31cb9437"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "induction represent as (H4, H5).",
            "VernacExtend",
            "e50b6059b2d4d85e7b1617c7739eaad07be54f73"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "replace (codeFormula (substituteFormula LNN Theta nv (natToTerm (codeFormula Theta)))) with (subStar (codeFormula Theta) nv (codeFormula Theta)).",
            "VernacExtend",
            "af2b3538806824fe1654f3d908e8b84a795b9369"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "unfold subStar in |- *.",
            "VernacExtend",
            "bebba87ef3e944fab57958c47ae3693c5d811652"
        ],
        [
            "rewrite codeNatToTermCorrectLNN.",
            "VernacExtend",
            "04148f93881b849da0007f6b566b94cd110864f6"
        ],
        [
            "unfold codeFormula at 1 in |- *.",
            "VernacExtend",
            "99f7bd7defaef78bbb7ef5dc209307d7b25ca6a5"
        ],
        [
            "rewrite codeSubFormulaCorrect.",
            "VernacExtend",
            "2942294961d93b57caac2eb594398e69db92c545"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "97b852569fb214c48f84fa1c363ddfd15d71c771"
        ],
        [
            "repeat rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "4629f28dee70545df0ac75f1f2738f54ce9f2b26"
        ],
        [
            "repeat rewrite (subTermNil LNN N).",
            "VernacExtend",
            "c6c8aa3545a510841265e1189d3decada716b319"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Theta at 1 in H4.",
            "VernacExtend",
            "88d848e4c6a9c88454c26498b85968d67c8e421e"
        ],
        [
            "unfold existH, andH in H4.",
            "VernacExtend",
            "7930db6d1225a653a98a0f570f880fcfae8db222"
        ],
        [
            "induction represent as (H5, H6).",
            "VernacExtend",
            "fd93f9f6b672bc6e17ca7595a48d6b7fc16ea46b"
        ],
        [
            "repeat match goal with | H1:(?X1 = ?X2),H2:(?X1 <> ?X2) |- _ => elim H2; apply H1 | H1:(?X1 = ?X2),H2:(?X2 <> ?X1) |- _ => elim H2; symmetry in |- *; apply H1 | H:(In ?X3 (freeVarFormula LNN (fol.existH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.forallH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (list_remove nat eq_nat_dec ?X1 (freeVarFormula LNN ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X2)); [ eapply In_list_remove1; apply H | assert (X3 <> X1); [ eapply In_list_remove2; apply H | clear H ] ] | H:(In ?X3 (freeVarFormula LNN (fol.andH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.impH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.notH LNN ?X1))) |- _ => assert (In X3 (freeVarFormula LNN X1)); [ apply H | clear H ] | H:(In _ (_ ++ _)) |- _ => induction (in_app_or _ _ _ H); clear H | H:(In _ (freeVarFormula LNN (substituteFormula LNN ?X1 ?X2 ?X3))) |- _ => induction (freeVarSubFormula3 _ _ _ _ _ H); clear H | H:(In _ (freeVarTerm LNN (natToTerm _))) |- _ => elim (closedNatToTerm _ _ H) | H:(In _ (freeVarTerm LNN Zero)) |- _ => elim H | H:(In _ (freeVarTerm LNN (Succ _))) |- _ => rewrite freeVarSucc in H | H:(In _ (freeVarTerm LNN (var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm LNN (fol.var LNN _))) |- _ => simpl in H; decompose sum H; clear H end.",
            "VernacExtend",
            "97214e50e2a9f0f7efc52b2fb49128d2821d2c65"
        ],
        [
            "elim (le_not_lt _ _ (H5 _ H4)).",
            "VernacExtend",
            "25964826a992b4d0978b78abf1902fe591b26227"
        ],
        [
            "destruct x as [| n].",
            "VernacExtend",
            "29560e449b89cc0464fa7c63eabe3c9a2605a555"
        ],
        [
            "elim H10; auto.",
            "VernacExtend",
            "9bc6a697316cef753b4405330d312b9e5a120184"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H11; auto.",
            "VernacExtend",
            "da0c270af8445945349879cadb859413ed20c6f2"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H12; auto.",
            "VernacExtend",
            "b15eecc11233fc6a0147e5b25b617f21bfe52b05"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H13; auto.",
            "VernacExtend",
            "9247b5786d940bfde42fc1fda1706336ef20fa86"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "apply In_list_remove3; auto.",
            "VernacExtend",
            "95379f7fe846fb561c8956c3b6e937ffd5e99c63"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (In x (freeVarFormula LNN A)); [ eapply In_list_remove1; apply H4 | assert (x <> v); [ eapply In_list_remove2; apply H4 | clear H4 ] ].",
            "VernacExtend",
            "8b31ea5e95b7c578c370573eafdf741606188744"
        ],
        [
            "apply freeVarSubFormula1.",
            "VernacExtend",
            "75270326ea8ab9a0713a00cc871f256fb733566f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite <- H4 in H5.",
            "VernacExtend",
            "29d41132cfaa92f7d928e3df37ee796a68eb65f5"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNN A)).",
            "VernacExtend",
            "cfbcdf72cbf51e3c2d5ef35c3b230deb8d646d11"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat right.",
            "VernacExtend",
            "0f53208403a49698156a837fdeea29441663e400"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold Theta in |- *.",
            "VernacExtend",
            "1ed89e9b99b7c4d97083553050abd7ad63acc301"
        ],
        [
            "apply (In_list_remove3 nat eq_nat_dec x v (freeVarFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (var nv)) 2 (natToTerm nv)) 1 (var nv)) 0 (var v)) ++ freeVarFormula LNN A)).",
            "VernacExtend",
            "f431f0c17f48db7b9baf1e650bb2f712cd05a6c1"
        ],
        [
            "apply in_or_app.",
            "VernacExtend",
            "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LNN_FixPoint.",
            "VernacEndSegment",
            "e6482c42176eefa36e7191eefabee9c980b49308"
        ],
        [
            "Section LNT_FixPoint.",
            "VernacBeginSection",
            "ebf38a57d8b6aca7847b0ef6dafee15100219580"
        ],
        [
            "Require Import PA.",
            "VernacRequire",
            "9de10add6a95d2dc1546875170f57148c8fbecfa"
        ],
        [
            "Require Import NN2PA.",
            "VernacRequire",
            "3eb7a6911b787d4f54c34218a0722ce372265346"
        ],
        [
            "Let codeFormula := codeFormula LNT codeLNTFunction codeLNTRelation.",
            "VernacDefinition",
            "71d1f39c3ca82eb452ea506f79e6b2ec3c30b81e"
        ],
        [
            "Lemma FixPointLNT : forall (A : Formula) (v : nat), {B : Formula | SysPrf PA (iffH B (substituteFormula LNT A v (natToTermLNT (codeFormula B)))) /\\ (forall x : nat, In x (freeVarFormula LNT B) <-> In x (list_remove _ eq_nat_dec v (freeVarFormula LNT A)))}.",
            "VernacStartTheoremProof",
            "5d2cd83aa7b20e000c6119f726eef8146a4c58e7"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (subStarFormula := primRecFormula _ (proj1_sig subStarIsPR)) in *.",
            "VernacExtend",
            "b1b3f38320ab751b70143bb33da1710f8b93bd45"
        ],
        [
            "assert (represent : Representable NN 3 subStar subStarFormula).",
            "VernacExtend",
            "abacc67638096fe46810640873dab4941cc41937"
        ],
        [
            "unfold subStarFormula in |- *.",
            "VernacExtend",
            "416c210fb0de152bd036fa01f3253e9465430795"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "set (nv := newVar (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)) in *.",
            "VernacExtend",
            "0421f5aaafa1ac6b091e7ad699787c86b96e6c44"
        ],
        [
            "assert (0 <> nv).",
            "VernacExtend",
            "0e7378030fb0c6ce52a495eec8110d7cf039d966"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "unfold nv in H.",
            "VernacExtend",
            "b1cd085f452e8f1d759b65278799ea6576a6c116"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (1 <> nv).",
            "VernacExtend",
            "db0386f1a74f5deb61fc5379b23121468e82fd47"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "unfold nv in H0.",
            "VernacExtend",
            "caed7700ab82fd65a538946662244c6515a0803c"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (2 <> nv).",
            "VernacExtend",
            "658d62833e15a969c0d3c558d962135b940bdc10"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "unfold nv in H1.",
            "VernacExtend",
            "2631bbb56b89c1b66e293bcfdd85dc68ccf3974f"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (3 <> nv).",
            "VernacExtend",
            "4340b93f1d4efd23389928ae682a399bacf6a752"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "unfold nv in H2.",
            "VernacExtend",
            "aa8b78322826c1da320f390886eaa9a17d846980"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (3 < nv).",
            "VernacExtend",
            "875631273eda8cc847574116b5feb00009e8b955"
        ],
        [
            "destruct nv as [| n].",
            "VernacExtend",
            "c40176c8bf55b6f1f45fa2a8a78f20251afa22ee"
        ],
        [
            "elim H; auto.",
            "VernacExtend",
            "93275a139e0a54467a849c9ab468d4fd7beb5813"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H0; auto.",
            "VernacExtend",
            "a800ef22adfa848085c725928d1e918101fb7cd9"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H1; auto.",
            "VernacExtend",
            "d50026b5dc31929f05ffbd310861b147378ba238"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H2; auto.",
            "VernacExtend",
            "8a627dcf0fcd94e45a028b6ccd1e368d5ddc7cc5"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "set (Theta := existH v (andH (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (LNN2LNT_formula subStarFormula) 3 (var nv)) 2 (natToTerm nv)) 1 (var nv)) 0 (var v)) A)) in *.",
            "VernacExtend",
            "e1727fea2c92ce0944d0b97563b0e70e89d2b54f"
        ],
        [
            "exists (substituteFormula LNT Theta nv (natToTerm (codeFormula Theta))).",
            "VernacExtend",
            "3d561331d732a38ecae7689ddd35285f6695d319"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "set (N := natToTermLNT (codeFormula (substituteFormula LNT Theta nv (natToTerm (codeFormula Theta))))) in *.",
            "VernacExtend",
            "545814678d2e3a5b9fa64dcb69d83763f6da61cb"
        ],
        [
            "unfold Theta at 1 in |- *.",
            "VernacExtend",
            "c35de6119723639547e00ad5170f997aa301cbfe"
        ],
        [
            "rewrite (subFormulaExist LNT).",
            "VernacExtend",
            "85ec58e3778d0ad9828763082333dee5be4f3e14"
        ],
        [
            "induction (eq_nat_dec v nv).",
            "VernacExtend",
            "c837b83e49d2a7ecfb9eafaedbba2d1654e63d5c"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction (In_dec eq_nat_dec v (freeVarTerm LNT (natToTerm (codeFormula Theta)))).",
            "VernacExtend",
            "0f792a934a8853eb2b127d1e005647f57d1f1191"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaAnd LNT).",
            "VernacExtend",
            "2cc1f3f6daa0f74d965cac403d3edf0a38e065c9"
        ],
        [
            "apply iffTrans with (existH v (andH (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (LNN2LNT_formula subStarFormula) 3 (natToTerm (codeFormula Theta))) 2 (natToTerm nv)) 1 (natToTerm (codeFormula Theta))) 0 (var v)) A)).",
            "VernacExtend",
            "d09a7100d76ca20c12ead95ce114b423113c5171"
        ],
        [
            "apply (reduceExist LNT).",
            "VernacExtend",
            "a99778ac16c51d56238bb23a242d9bd5010d6422"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "apply (reduceAnd LNT).",
            "VernacExtend",
            "dc5c2878b03ac14220653d73ea7f639c06203c49"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subFormulaExch LNT).",
            "VernacExtend",
            "43d2d64a0e19e13c80db306e13a998190c0f5b16"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H4 as [H4| H4].",
            "VernacExtend",
            "05b5ce1d532afecab651a64afe6667145e595256"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subSubFormula LNT).",
            "VernacExtend",
            "46ccae8fa31cdbe37bb7163efc84794d2140bc63"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "rewrite (subTermVar1 LNT).",
            "VernacExtend",
            "3f13e55678639ac351553c3f82bbe27efbe1bbca"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "eapply iffTrans.",
            "VernacExtend",
            "49b496051d221d802a613f3ce65a6b73c5f80186"
        ],
        [
            "apply (subFormulaExch LNT).",
            "VernacExtend",
            "43d2d64a0e19e13c80db306e13a998190c0f5b16"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "apply (subFormulaTrans LNT).",
            "VernacExtend",
            "2c1d20acf5f840b3b75958896235361938838008"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In nv (freeVarFormula LNT (LNN2LNT_formula subStarFormula))).",
            "VernacExtend",
            "ee637ca2f800c9a7164cb61ebbbd51df7df4da3f"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "induction represent as (H6, H7).",
            "VernacExtend",
            "ef28ff5c0da4e0b5f6e9cdb5baf899abf9abd488"
        ],
        [
            "elim (lt_not_le _ _ H3).",
            "VernacExtend",
            "f4a745097e7b105233ffd1f1dda2fd2e6b86663b"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "apply LNN2LNT_freeVarFormula1.",
            "VernacExtend",
            "ad31639606d49165b89543678ede68fe6784f76d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (subFormulaNil LNT).",
            "VernacExtend",
            "b432d424e1fb2cd3a80340720b9e41362e5ea27f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat right.",
            "VernacExtend",
            "0f53208403a49698156a837fdeea29441663e400"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply iffI.",
            "VernacExtend",
            "b0931ca74559ec090d086f9cab407abd4e689d72"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply existSys.",
            "VernacExtend",
            "f1f4cd34be6ae374ffc574b78f854737e4af84cc"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H4).",
            "VernacExtend",
            "5c8621e56555d16295ceed311519d01e133ca795"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H5).",
            "VernacExtend",
            "6cbbe386b1a989e3a87b6393efce25332f616239"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "elim (closedNatToTerm _ _ H5).",
            "VernacExtend",
            "0fc146805b9ae08bf05d4a019dfc41cd88ee3bef"
        ],
        [
            "apply impE with (substituteFormula LNT (equal (var 0) N) 0 (var v)).",
            "VernacExtend",
            "b3cae01740fa255de9208598d239528602fd97fa"
        ],
        [
            "rewrite (subFormulaEqual LNT).",
            "VernacExtend",
            "44ae916d52ec23732c77ff790dd2d33f936c1819"
        ],
        [
            "rewrite (subTermVar1 LNT).",
            "VernacExtend",
            "3f13e55678639ac351553c3f82bbe27efbe1bbca"
        ],
        [
            "rewrite (subTermNil LNT).",
            "VernacExtend",
            "816eb4e6d0418f264e71dc8a995bd57231f9ab9e"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply impE with (substituteFormula LNT A v (var v)).",
            "VernacExtend",
            "3bec5deed1fc81b7acdc070c3166b83a4c1a4a78"
        ],
        [
            "apply (subWithEquals LNT).",
            "VernacExtend",
            "6b7e1e90ffe06d1174b063a469923f19ae1555e7"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "rewrite (subFormulaId LNT).",
            "VernacExtend",
            "73d2244ab262239d5e2d35f0ab046c2bfe288947"
        ],
        [
            "eapply andE2.",
            "VernacExtend",
            "c82ce44debfda7a5cd2fde9cabfd460aebba18a5"
        ],
        [
            "apply Axm; left; right; constructor.",
            "VernacExtend",
            "fc933040337f48b416dd8f5aeac8df5d75f902ab"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply impE with (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (LNN2LNT_formula subStarFormula) 3 (natToTerm (codeFormula Theta))) 2 (natToTerm nv)) 1 (natToTerm (codeFormula Theta))) 0 (var v)).",
            "VernacExtend",
            "4742afd71082f3d9fa74091599a9294f5cfb8e02"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "induction represent as (H4, H5).",
            "VernacExtend",
            "e50b6059b2d4d85e7b1617c7739eaad07be54f73"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "replace (codeFormula (substituteFormula LNT Theta nv (natToTerm (codeFormula Theta)))) with (subStar (codeFormula Theta) nv (codeFormula Theta)).",
            "VernacExtend",
            "4d76580b2b096d84c2882bd640e1704eaa325c5a"
        ],
        [
            "replace (equal (var 0) (natToTermLNT (subStar (codeFormula Theta) nv (codeFormula Theta)))) with (LNN2LNT_formula (LNN.equal (LNN.var 0) (LNN.natToTerm (subStar (codeFormula Theta) nv (codeFormula Theta))))).",
            "VernacExtend",
            "c54bcc349763aac17d1a805440609bdcd8eae571"
        ],
        [
            "apply iffTrans with (LNN2LNT_formula (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (LNN.natToTerm (codeFormula Theta))) 2 (LNN.natToTerm nv)) 1 (LNN.natToTerm (codeFormula Theta)))).",
            "VernacExtend",
            "db28e2b107867fd04b170ac2f1923933cdd79f16"
        ],
        [
            "apply iffSym.",
            "VernacExtend",
            "c9f206ff294c572b2e5126df678bc3f37dbf63e4"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "apply iffRefl.",
            "VernacExtend",
            "0aaf4ca531047f5e0ae634b651a4f5c44f055b9b"
        ],
        [
            "rewrite <- LNN2LNT_iff.",
            "VernacExtend",
            "496e48e028653446936a1feae8f91bb7121f5bd9"
        ],
        [
            "apply NN2PA.",
            "VernacExtend",
            "6385d40c197578fd1788d02e9d31785f27c06052"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "rewrite <- LNN2LNT_natToTerm.",
            "VernacExtend",
            "d0f917d7e3d19bd0ff9c0f6e58d6f0bb29698784"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold subStar in |- *.",
            "VernacExtend",
            "bebba87ef3e944fab57958c47ae3693c5d811652"
        ],
        [
            "rewrite codeNatToTermCorrectLNT.",
            "VernacExtend",
            "a29e804225c3b8d944571482fa0f25e222bc1a54"
        ],
        [
            "unfold codeFormula at 1 in |- *.",
            "VernacExtend",
            "99f7bd7defaef78bbb7ef5dc209307d7b25ca6a5"
        ],
        [
            "rewrite codeSubFormulaCorrect.",
            "VernacExtend",
            "2942294961d93b57caac2eb594398e69db92c545"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply andE1.",
            "VernacExtend",
            "932461eacc6376aaacc9bb8ca9130c6060a6201f"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply existI with N.",
            "VernacExtend",
            "b429f9e1d3fc6375296784a8a7303742c7a57688"
        ],
        [
            "rewrite (subFormulaAnd LNT).",
            "VernacExtend",
            "2cc1f3f6daa0f74d965cac403d3edf0a38e065c9"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "eapply impE with (substituteFormula LNT (substituteFormula LNT (equal (var 0) N) 0 (var v)) v N).",
            "VernacExtend",
            "88608f20e1883e77e259b91ae3897ac8c52da008"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "apply (reduceSub LNT).",
            "VernacExtend",
            "bb1e267350d37a1efb39a14d6e6c591fdebe279b"
        ],
        [
            "apply closedPA.",
            "VernacExtend",
            "d7cdef6800d972204510b4f5225e4d91fb00a44f"
        ],
        [
            "induction represent as (H4, H5).",
            "VernacExtend",
            "e50b6059b2d4d85e7b1617c7739eaad07be54f73"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "replace (codeFormula (substituteFormula LNT Theta nv (natToTerm (codeFormula Theta)))) with (subStar (codeFormula Theta) nv (codeFormula Theta)).",
            "VernacExtend",
            "4d76580b2b096d84c2882bd640e1704eaa325c5a"
        ],
        [
            "replace (equal (var 0) (natToTermLNT (subStar (codeFormula Theta) nv (codeFormula Theta)))) with (LNN2LNT_formula (LNN.equal (LNN.var 0) (LNN.natToTerm (subStar (codeFormula Theta) nv (codeFormula Theta))))).",
            "VernacExtend",
            "c54bcc349763aac17d1a805440609bdcd8eae571"
        ],
        [
            "apply iffTrans with (LNN2LNT_formula (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN subStarFormula 3 (LNN.natToTerm (codeFormula Theta))) 2 (LNN.natToTerm nv)) 1 (LNN.natToTerm (codeFormula Theta)))).",
            "VernacExtend",
            "db28e2b107867fd04b170ac2f1923933cdd79f16"
        ],
        [
            "apply iffSym.",
            "VernacExtend",
            "c9f206ff294c572b2e5126df678bc3f37dbf63e4"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "eapply iffTrans; [ apply LNN2LNT_subFormula | idtac ].",
            "VernacExtend",
            "0f2bedbc5a1f24cdab67e4a784f9efee6beed550"
        ],
        [
            "rewrite LNN2LNT_natToTerm; apply (reduceSub LNT); [ apply closedPA | idtac ].",
            "VernacExtend",
            "d7f6499d055e16071365c4ab2b96434e93c072fb"
        ],
        [
            "apply iffRefl.",
            "VernacExtend",
            "0aaf4ca531047f5e0ae634b651a4f5c44f055b9b"
        ],
        [
            "rewrite <- LNN2LNT_iff.",
            "VernacExtend",
            "496e48e028653446936a1feae8f91bb7121f5bd9"
        ],
        [
            "apply NN2PA.",
            "VernacExtend",
            "6385d40c197578fd1788d02e9d31785f27c06052"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "rewrite <- LNN2LNT_natToTerm.",
            "VernacExtend",
            "d0f917d7e3d19bd0ff9c0f6e58d6f0bb29698784"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold subStar in |- *.",
            "VernacExtend",
            "bebba87ef3e944fab57958c47ae3693c5d811652"
        ],
        [
            "rewrite codeNatToTermCorrectLNT.",
            "VernacExtend",
            "a29e804225c3b8d944571482fa0f25e222bc1a54"
        ],
        [
            "unfold codeFormula at 1 in |- *.",
            "VernacExtend",
            "99f7bd7defaef78bbb7ef5dc209307d7b25ca6a5"
        ],
        [
            "rewrite codeSubFormulaCorrect.",
            "VernacExtend",
            "2942294961d93b57caac2eb594398e69db92c545"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat rewrite (subFormulaEqual LNT).",
            "VernacExtend",
            "43c8856a1d2fe73a2413d42abcd400099caeee7b"
        ],
        [
            "repeat rewrite (subTermVar1 LNT).",
            "VernacExtend",
            "e9ff561461da2729b5b5b9ed577463d2720efa98"
        ],
        [
            "repeat rewrite (subTermNil LNT N).",
            "VernacExtend",
            "149cad27f0ec0b48160d7a88ed2292f361ecff35"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "unfold N in |- *.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Theta at 1 in H4.",
            "VernacExtend",
            "88d848e4c6a9c88454c26498b85968d67c8e421e"
        ],
        [
            "unfold existH, andH in H4.",
            "VernacExtend",
            "7930db6d1225a653a98a0f570f880fcfae8db222"
        ],
        [
            "induction represent as (H5, H6).",
            "VernacExtend",
            "fd93f9f6b672bc6e17ca7595a48d6b7fc16ea46b"
        ],
        [
            "repeat match goal with | H1:(?X1 = ?X2),H2:(?X1 <> ?X2) |- _ => elim H2; apply H1 | H1:(?X1 = ?X2),H2:(?X2 <> ?X1) |- _ => elim H2; symmetry in |- *; apply H1 | H:(In ?X3 (freeVarFormula LNT (fol.existH LNT ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNT X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNT (fol.forallH LNT ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNT X2))); [ apply H | clear H ] | H:(In ?X3 (list_remove nat eq_nat_dec ?X1 (freeVarFormula LNT ?X2))) |- _ => assert (In X3 (freeVarFormula LNT X2)); [ eapply In_list_remove1; apply H | assert (X3 <> X1); [ eapply In_list_remove2; apply H | clear H ] ] | H:(In ?X3 (freeVarFormula LNT (fol.andH LNT ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNT X1 ++ freeVarFormula LNT X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNT (fol.impH LNT ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNT X1 ++ freeVarFormula LNT X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNT (fol.notH LNT ?X1))) |- _ => assert (In X3 (freeVarFormula LNT X1)); [ apply H | clear H ] | H:(In _ (_ ++ _)) |- _ => induction (in_app_or _ _ _ H); clear H | H:(In _ (freeVarFormula LNT (substituteFormula LNT ?X1 ?X2 ?X3))) |- _ => induction (freeVarSubFormula3 _ _ _ _ _ H); clear H | H:(In _ (freeVarTerm LNT (natToTerm _))) |- _ => elim (closedNatToTerm _ _ H) | H:(In _ (freeVarTerm LNT Zero)) |- _ => elim H | H:(In _ (freeVarTerm LNT (Succ _))) |- _ => rewrite freeVarSucc in H | H:(In _ (freeVarTerm LNT (var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm LNT (fol.var LNT _))) |- _ => simpl in H; decompose sum H; clear H end.",
            "VernacExtend",
            "705aae27475dfec11167b5a6635db53866e38b33"
        ],
        [
            "elim (le_not_lt x 3).",
            "VernacExtend",
            "aa103b3433ade80da0bc2de4ffe47ec18a1629f3"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "apply LNN2LNT_freeVarFormula1.",
            "VernacExtend",
            "ad31639606d49165b89543678ede68fe6784f76d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct x as [| n].",
            "VernacExtend",
            "29560e449b89cc0464fa7c63eabe3c9a2605a555"
        ],
        [
            "elim H10; auto.",
            "VernacExtend",
            "9bc6a697316cef753b4405330d312b9e5a120184"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H11; auto.",
            "VernacExtend",
            "da0c270af8445945349879cadb859413ed20c6f2"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H12; auto.",
            "VernacExtend",
            "b15eecc11233fc6a0147e5b25b617f21bfe52b05"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim H13; auto.",
            "VernacExtend",
            "9247b5786d940bfde42fc1fda1706336ef20fa86"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "apply In_list_remove3; auto.",
            "VernacExtend",
            "95379f7fe846fb561c8956c3b6e937ffd5e99c63"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (In x (freeVarFormula LNT A)); [ eapply In_list_remove1; apply H4 | assert (x <> v); [ eapply In_list_remove2; apply H4 | clear H4 ] ].",
            "VernacExtend",
            "10484b40ee478a5d5f91b93ae97ea7a5b168d52c"
        ],
        [
            "apply freeVarSubFormula1.",
            "VernacExtend",
            "75270326ea8ab9a0713a00cc871f256fb733566f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite <- H4 in H5.",
            "VernacExtend",
            "29d41132cfaa92f7d928e3df37ee796a68eb65f5"
        ],
        [
            "elim (newVar1 (v :: 1 :: 2 :: 3 :: 0 :: freeVarFormula LNT A)).",
            "VernacExtend",
            "d51b7d40a1a06c995b98cd83a3544c58838560d5"
        ],
        [
            "fold nv in |- *.",
            "VernacExtend",
            "2c4ba9d3549005f01551be73ab81d61f1191a29f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat right.",
            "VernacExtend",
            "0f53208403a49698156a837fdeea29441663e400"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "unfold Theta in |- *.",
            "VernacExtend",
            "1ed89e9b99b7c4d97083553050abd7ad63acc301"
        ],
        [
            "apply (In_list_remove3 nat eq_nat_dec x v (freeVarFormula LNT (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (substituteFormula LNT (LNN2LNT_formula subStarFormula) 3 (var nv)) 2 (natToTerm nv)) 1 (var nv)) 0 (var v)) ++ freeVarFormula LNT A)).",
            "VernacExtend",
            "0c4546e5fff7387bc684c49040f2fdde649b90d0"
        ],
        [
            "apply in_or_app.",
            "VernacExtend",
            "5d96e3be59ed2c78adfe02ab12e779d3ca3f43c0"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LNT_FixPoint.",
            "VernacEndSegment",
            "f66d10759cbe141789294c3ae181ae645fb3470e"
        ]
    ],
    "proofs": [
        {
            "name": "subStarIsPR",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "unfold subStar in |- *.",
                        "VernacExtend",
                        "bebba87ef3e944fab57958c47ae3693c5d811652"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (f1 := fun a v n : nat => a) (f2 := fun a v n : nat => v) (f3 := fun a v n : nat => codeNatToTerm n).",
                        "VernacExtend",
                        "6c52882438b15009462d654df4d643dfab1841bc"
                    ]
                },
                {
                    "command": [
                        "apply pi1_3IsPR.",
                        "VernacExtend",
                        "69ded56cb54e46793815f38a229f810bef22ec17"
                    ]
                },
                {
                    "command": [
                        "apply pi2_3IsPR.",
                        "VernacExtend",
                        "b556a10eda38792ce0fb0989e9246a2b09b60d23"
                    ]
                },
                {
                    "command": [
                        "apply filter001IsPR.",
                        "VernacExtend",
                        "3683012aa3187645c321886b7ef6c5c1fc255c3c"
                    ]
                },
                {
                    "command": [
                        "apply codeNatToTermIsPR.",
                        "VernacExtend",
                        "a281c72a948d332d7b6179d72e1bb0a6549521c2"
                    ]
                },
                {
                    "command": [
                        "apply codeSubFormulaIsPR.",
                        "VernacExtend",
                        "5d0bf0a7be6161c032b98eb84f0dede00ad6da7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}