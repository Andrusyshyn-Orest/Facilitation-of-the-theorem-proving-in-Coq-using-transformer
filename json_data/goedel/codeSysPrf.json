{
    "filename": "codeSysPrf.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import Ensembles.",
            "VernacRequire",
            "63f80d6be2b42bad6c3542a86c69acf401d90a4a"
        ],
        [
            "Require Import Coq.Lists.List.",
            "VernacRequire",
            "3f8620a911f16f9e8918ea7512dbb594c917da38"
        ],
        [
            "Require Import checkPrf.",
            "VernacRequire",
            "5a29ee489ac8df5f00052a53f5501424e1e39b98"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import Languages.",
            "VernacRequire",
            "a5e243593808f803c7cf563bb9f1d082710ceaa0"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import folProof.",
            "VernacRequire",
            "a0193d39f532e35a330dca71bfab163ef1b5dd49"
        ],
        [
            "Require Import folLogic3.",
            "VernacRequire",
            "5313da917cbd8284650f06a63d4e78e11cf70419"
        ],
        [
            "Require Import folReplace.",
            "VernacRequire",
            "4d2302c9e704187836912b1c7eb0c8d836a6d938"
        ],
        [
            "Require Import PRrepresentable.",
            "VernacRequire",
            "c23e666a11cea7a903f1270ff6a33ef88330e20e"
        ],
        [
            "Require Import expressible.",
            "VernacRequire",
            "7288ac4451924c4535dae7e4e0e106c648ae3c52"
        ],
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import PA.",
            "VernacRequire",
            "9de10add6a95d2dc1546875170f57148c8fbecfa"
        ],
        [
            "Require Import NNtheory.",
            "VernacRequire",
            "7d8bee0fda255fc5c2e89e84c624cdb07c0f723d"
        ],
        [
            "Require Import codeList.",
            "VernacRequire",
            "a1e942e0b454ceca9186de5641825743bd0150b2"
        ],
        [
            "Require Import subProp.",
            "VernacRequire",
            "958f8351edff1532d30f0dc5037e19d46aa66886"
        ],
        [
            "Require Import ListExt.",
            "VernacRequire",
            "8c4c029b2c43ab5886e4af5e6402bea050085fed"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import wellFormed.",
            "VernacRequire",
            "9c415b02cb384d989029d6ce72087b914926bfef"
        ],
        [
            "Require Import prLogic.",
            "VernacRequire",
            "1bf74122c61349de52ce00bc261911cfb4de3d35"
        ],
        [
            "Ltac SimplFreeVar := repeat match goal with | H1:(?X1 = ?X2),H2:(?X1 <> ?X2) |- _ => elim H2; apply H1 | H1:(?X1 = ?X2),H2:(?X2 <> ?X1) |- _ => elim H2; symmetry in |- *; apply H1 | H1:(?X1 <> ?X1) |- _ => elim H1; reflexivity | H:(In ?X3 (freeVarFormula ?X9 (existH ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula X9 X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.existH ?X9 ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula X9 X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (forallH ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula X9 X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.forallH ?X9 ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula X9 X2))); [ apply H | clear H ] | H:(In ?X3 (list_remove nat eq_nat_dec ?X1 (freeVarFormula ?X9 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X2)); [ eapply In_list_remove1; apply H | assert (X3 <> X1); [ eapply In_list_remove2; apply H | clear H ] ] | H:(In ?X3 (freeVarFormula ?X9 (andH ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.andH ?X9 ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (orH ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.orH ?X9 ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (impH ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.impH ?X9 ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula X9 X1 ++ freeVarFormula X9 X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (notH ?X1))) |- _ => assert (In X3 (freeVarFormula X9 X1)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula ?X9 (fol.notH ?X9 ?X1))) |- _ => assert (In X3 (freeVarFormula X9 X1)); [ apply H | clear H ] | H:(In _ (_ ++ _)) |- _ => induction (in_app_or _ _ _ H); clear H | H:(In _ (freeVarFormula ?X9 (substituteFormula ?X9 ?X1 ?X2 ?X3))) |- _ => induction (freeVarSubFormula3 _ _ _ _ _ H); clear H | H:(In _ (freeVarFormula ?X9 (LT ?X1 ?X2))) |- _ => rewrite freeVarLT in H | H:(In _ (freeVarTerm ?X9 (LNT.natToTerm _))) |- _ => elim (LNT.closedNatToTerm _ _ H) | H:(In _ (freeVarTerm ?X9 (natToTerm _))) |- _ => elim (closedNatToTerm _ _ H) | H:(In _ (freeVarTerm ?X9 Zero)) |- _ => elim H | H:(In _ (freeVarTerm ?X9 (Succ _))) |- _ => rewrite freeVarSucc in H | H:(In _ (freeVarTerm ?X9 (var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm ?X9 (LNT.var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm ?X9 (fol.var ?X9 _))) |- _ => simpl in H; decompose sum H; clear H end.",
            "VernacExtend",
            "e22ed6a438f800bf7cd6bc19e254d88fb11bf950"
        ],
        [
            "Section code_SysPrf.",
            "VernacBeginSection",
            "7a86716765c0ec8d022b63ee749514aea8134ecd"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Variable codeR : Relations L -> nat.",
            "VernacAssumption",
            "7d46e7172e4f8afe9c452578494a18d04f3dd4f3"
        ],
        [
            "Variable codeArityF : nat -> nat.",
            "VernacAssumption",
            "247239a6aca1ccb6563a187bf100fc3cb63526ae"
        ],
        [
            "Variable codeArityR : nat -> nat.",
            "VernacAssumption",
            "a256d5c64bca82e39c471a89fd58c5699363ab22"
        ],
        [
            "Hypothesis codeArityFIsPR : isPR 1 codeArityF.",
            "VernacAssumption",
            "003b639d5db3c052e25944bd6e7d66f21169096e"
        ],
        [
            "Hypothesis codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr _ f)).",
            "VernacAssumption",
            "2a0ff7ddf4c082721188bdcaeaf774eba3fca95a"
        ],
        [
            "Hypothesis codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n.",
            "VernacAssumption",
            "3f09454e466cadf4617c26cd2e5b40955f21fe34"
        ],
        [
            "Hypothesis codeArityRIsPR : isPR 1 codeArityR.",
            "VernacAssumption",
            "58841c745f3e49fe40624a36f9031c8f3e8a099a"
        ],
        [
            "Hypothesis codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl _ r)).",
            "VernacAssumption",
            "5f7c32b690fe101c78258f13e87d6ab7f5ce37d9"
        ],
        [
            "Hypothesis codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n.",
            "VernacAssumption",
            "96a65721bbd45bc4a94cb6025c85f0fd79ae501e"
        ],
        [
            "Hypothesis codeFInj : forall f g : Functions L, codeF f = codeF g -> f = g.",
            "VernacAssumption",
            "4b0b91012823ec8b2df957736530fa372d1dd248"
        ],
        [
            "Hypothesis codeRInj : forall R S : Relations L, codeR R = codeR S -> R = S.",
            "VernacAssumption",
            "e4c0a75f6c8e28817a24963d05324e3490fd84e4"
        ],
        [
            "Section LNN.",
            "VernacBeginSection",
            "c78725e8b923c762418497fa65a1c8d9f632db51"
        ],
        [
            "Variable T : System.",
            "VernacAssumption",
            "61341f859d94b5ad138d74bb056a5fff161c13cc"
        ],
        [
            "Hypothesis TextendsNN : Included _ NN T.",
            "VernacAssumption",
            "8bba2dc836586c609942e61a3711f8922a75ca91"
        ],
        [
            "Variable U : fol.System L.",
            "VernacAssumption",
            "41092e3a11717bca21a31f3ef2137ce4ce0b6634"
        ],
        [
            "Variable fU : Formula.",
            "VernacAssumption",
            "15935a5db210a7c96210567f9135b498b85ffbe9"
        ],
        [
            "Variable v0 : nat.",
            "VernacAssumption",
            "ee8e59e21c3303f371fc7265e0c385dce3bc812c"
        ],
        [
            "Hypothesis freeVarfU : forall v : nat, In v (freeVarFormula LNN fU) -> v = v0.",
            "VernacAssumption",
            "cf1871670ba7f4bf59f7a7d1ac8277e4423a4121"
        ],
        [
            "Hypothesis expressU1 : forall f : fol.Formula L, mem _ U f -> SysPrf T (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR f))).",
            "VernacAssumption",
            "823340983daae758eb3eed476754555c8aa1b676"
        ],
        [
            "Hypothesis expressU2 : forall f : fol.Formula L, ~ mem _ U f -> SysPrf T (notH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacAssumption",
            "4d619709b026be93ad562f3423cb5de1da8a26c3"
        ],
        [
            "Definition codeSysPrf : Formula := let nv := newVar (2 :: 1 :: 0 :: v0 :: nil) in existH nv (andH (substituteFormula LNN (substituteFormula LNN (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR))) 0 (Succ (var nv))) 2 (var 0)) (forallH (S nv) (impH (LT (var (S nv)) (var nv)) (orH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 2 (proj1_sig codeInIsPR)) 2 (var (S nv))) 1 (var nv)) 0 Zero) (substituteFormula LNN fU v0 (var (S nv))))))).",
            "VernacDefinition",
            "97264283c218c604973698bdfc92964dfd404eb5"
        ],
        [
            "Lemma codeSysPrfCorrect1 : forall (f : fol.Formula L) (A : list (fol.Formula L)) (p : Prf L A f), (forall g : fol.Formula L, In g A -> mem _ U g) -> SysPrf T (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p))).",
            "VernacStartTheoremProof",
            "5ab9be7f1413071a0667d73dbba10a630388a7b8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrf in |- *.",
            "VernacExtend",
            "4e45bc0cf19e42f041f11ff8eb9dc77a8775eb34"
        ],
        [
            "set (nvl := 2 :: 1 :: 0 :: v0 :: nil) in *.",
            "VernacExtend",
            "5b78bc9aea10ba96c7e03cfe6ebb4f929058410f"
        ],
        [
            "set (nv := newVar nvl) in *.",
            "VernacExtend",
            "f5f93433029a78cbd6ea1f2ac4351d88b8a07d96"
        ],
        [
            "assert (nv <> 0).",
            "VernacExtend",
            "66950267858b00278917180757b031274d943633"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H0; unfold nvl in |- *.",
            "VernacExtend",
            "1750cbe3d8193f2d5fb2add5ce2c9e69f1cde796"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 1).",
            "VernacExtend",
            "e41419fee5ebb39e7df5064dd6a0417cbf225fba"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H1; unfold nvl in |- *.",
            "VernacExtend",
            "8abb70b9c6b44a128b6d918c055704f93c8c07b1"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 2).",
            "VernacExtend",
            "a79b3630eca27c6eab4e11f5a4602a650f153718"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H2; unfold nvl in |- *.",
            "VernacExtend",
            "b9590cf295a6be7026b1f833f2868cb4efb57675"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> v0).",
            "VernacExtend",
            "eea027fd00d79555853a37572545ca492e1496d1"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H3; unfold nvl in |- *.",
            "VernacExtend",
            "d64fb5e68319b1e1652070c07ace904d089aab64"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 0).",
            "VernacExtend",
            "9f45a196abb86d746abc8af3473d5980c11f6a64"
        ],
        [
            "elim H0; assumption.",
            "VernacExtend",
            "f893c02cbb3a00a06056628d1667434bc5c5a86d"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "28ab0bcb3a46a891e7413aafd4f11035fa6261b8"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 1).",
            "VernacExtend",
            "6c086c616eec6b88577c171170e335b74f5cf6d0"
        ],
        [
            "elim H1; assumption.",
            "VernacExtend",
            "87041b56a56e771a88d6cf6008d62e6dffd57c1a"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A f p)))).",
            "VernacExtend",
            "a041e023a480c83132cbe1b302d0fc35361a6fd4"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply existI with (natToTerm (codeList (map (codeFormula L codeF codeR) A))).",
            "VernacExtend",
            "bb36751d6d4fd4695def30ef466bf9936559d18c"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "apply TextendsNN.",
            "VernacExtend",
            "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
        ],
        [
            "set (B := primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR))) in *.",
            "VernacExtend",
            "6f9f4f0f6adc67a81fc0f86f25ccd2665eaf62a6"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 0 (Succ (var nv))) 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "f26e3f7cb67e9f156ce1903257167d9a73f8d363"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In 0 (freeVarFormula LNN (substituteFormula LNN B 0 (Succ (var nv))))).",
            "VernacExtend",
            "893f1095f59b468f92d861ec8cca180cdbc930e1"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H5).",
            "VernacExtend",
            "955b834b6ac09cbf8787870d723ea1f169795ed7"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H6).",
            "VernacExtend",
            "4a8470165d8fa9625c7e6f32738ce0ac43d321e6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H6.",
            "VernacExtend",
            "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
        ],
        [
            "decompose sum H6.",
            "VernacExtend",
            "c04093886f565f3cc3fd2b7418ac9db322a24cdb"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p))) 0 (Succ (var nv))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "e822814e04cf8bd604c0fc272a33b3c148939ca4"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 2 (natToTerm (codeFormula L codeF codeR f))) 0 (Succ (var nv))) 1 (natToTerm (codePrf L codeF codeR A f p))).",
            "VernacExtend",
            "1c57fc770a135fcb43f37c6bb5a1c4499d525556"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H2; assumption.",
            "VernacExtend",
            "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "unfold B in |- *.",
            "VernacExtend",
            "ec3a29869783d5e139f7411ed3039e15b71de971"
        ],
        [
            "clear B.",
            "VernacExtend",
            "f0f2334fd6ad177381c798338ff5279850b962f8"
        ],
        [
            "assert (Representable NN 2 (checkPrf L codeF codeR codeArityF codeArityR) (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR)))).",
            "VernacExtend",
            "8ac536ff04180ec015c17b750ffe6547021cb9b0"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "induction H4 as (H4, H5).",
            "VernacExtend",
            "3a04c50e57a9026919ea24bbfaf80b7cb7d5cdf1"
        ],
        [
            "set (F := primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR))) in *.",
            "VernacExtend",
            "5f2b0dfdd0290ff8dfec6027514835547f21a6c4"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN (equal (var 0) (natToTerm (checkPrf L codeF codeR codeArityF codeArityR (codeFormula L codeF codeR f) (codePrf L codeF codeR A f p)))) 0 (Succ (var nv))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "3f18b7cad70676fe527f384370add5ed059c3416"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "replace (substituteTerm LNN (Succ (var nv)) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) with (natToTerm (S (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "ba7c7adc9ea359e624f1ed8fb13bc2c156e430b6"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite checkPrfCorrect1.",
            "VernacExtend",
            "5571f23f51fccb358622a40272eea9bead9cf380"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "apply codeArityFIsCorrect1.",
            "VernacExtend",
            "9a6135e015e4ab7329a7428b09ba1bc3ed22722d"
        ],
        [
            "apply codeArityRIsCorrect1.",
            "VernacExtend",
            "edde287edc4b60f30382cf688c8b3ed9f349537f"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "generalize nv.",
            "VernacExtend",
            "25d5a18d69adab7a97f49c118d4d8ddd4667d345"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (eq_nat_dec nv0 nv0).",
            "VernacExtend",
            "3ab0e5cd9caa35b10abdcdc52169638ea16f0b67"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim b.",
            "VernacExtend",
            "954e73d8a25006d790022abb5978a50d3a888a56"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "assert (S nv <> 1).",
            "VernacExtend",
            "a78067b2bbcdaf130e5a0441933b129187b3243f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt (S nv) 1).",
            "VernacExtend",
            "a6212b22e7f74a1f37f265173202789b42c4e0b7"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply lt_S.",
            "VernacExtend",
            "47477bda68b8f0c94efef6095ed80a97ae3f2827"
        ],
        [
            "unfold nv in |- *.",
            "VernacExtend",
            "2204d7c5aeeb176b733fe01d3cedbbb57bd51877"
        ],
        [
            "apply newVar2.",
            "VernacExtend",
            "c27168de27da39d03695d542dd120db4bb594e99"
        ],
        [
            "unfold nvl in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b0a868e7bd0148ad67bb16d23160bb195e1b7606"
        ],
        [
            "assert (S nv <> 2).",
            "VernacExtend",
            "7cfd982ac91b2b8c5dcb6cde36057fa710d88f99"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt (S nv) 2).",
            "VernacExtend",
            "9e10df90e35d58bb18579588ac879ed75f3ad2ef"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply lt_S.",
            "VernacExtend",
            "47477bda68b8f0c94efef6095ed80a97ae3f2827"
        ],
        [
            "unfold nv in |- *.",
            "VernacExtend",
            "2204d7c5aeeb176b733fe01d3cedbbb57bd51877"
        ],
        [
            "apply newVar2.",
            "VernacExtend",
            "c27168de27da39d03695d542dd120db4bb594e99"
        ],
        [
            "unfold nvl in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b0a868e7bd0148ad67bb16d23160bb195e1b7606"
        ],
        [
            "assert (S nv <> nv).",
            "VernacExtend",
            "b24232439d93b2157e3993ad12d0677b18fc1d57"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "eapply (n_Sn nv).",
            "VernacExtend",
            "9730361fe97af274aeba1c42148a8b6925b9de18"
        ],
        [
            "symmetry in |- *; assumption.",
            "VernacExtend",
            "5955dba2342bcdccd27ef4f56635d3b4a5a3faa9"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) 0).",
            "VernacExtend",
            "efe8222cc1659bca593482e0408cccfbe7b18dd3"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "b851ab8354b9008dbebb9f627389991cc53fe64e"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) 1).",
            "VernacExtend",
            "b821e913cb8c81e7b1085eb89b413e6824bca162"
        ],
        [
            "elim H4; assumption.",
            "VernacExtend",
            "8e800e8eaec7ed673de2698dd086f814106951d0"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A f p)))).",
            "VernacExtend",
            "1f763e5c5a468b9844a2c9bdd30138087aebcd24"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) nv).",
            "VernacExtend",
            "31332541c7f95ba7be294589ccd378f4b01a6411"
        ],
        [
            "elim H6; assumption.",
            "VernacExtend",
            "d08e996eb1c94e53f134beefe9bd03f846de78db"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codeList (map (codeFormula L codeF codeR) A))))).",
            "VernacExtend",
            "2d5f1225e77ef06eb05a635f739cbcc94f41dcab"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "repeat rewrite (subFormulaImp LNN).",
            "VernacExtend",
            "6d6e4f16be44785c0b3cda5edf5adbb34402710b"
        ],
        [
            "replace (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (LT (var (S nv)) (var nv)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) with (LT (var (S nv)) (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "fa5fad064fe9b01add4b9d39569031420fafb99f"
        ],
        [
            "set (G := list_rec (fun _ => Formula) (equal Zero Zero) (fun (a : fol.Formula L) _ (rec : Formula) => andH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR a))) rec) A) in *.",
            "VernacExtend",
            "589d5ae8ce1e87064f248c61f8a0e00fab743274"
        ],
        [
            "assert (forall v : nat, ~ In v (freeVarFormula LNN G)).",
            "VernacExtend",
            "75cabe7165a3da84354eb7ec76ed3edda7363114"
        ],
        [
            "unfold G in |- *.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize A.",
            "VernacExtend",
            "00c45f7a76a5f7ebf3c3cadbcebf97595045d199"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction A0 as [| a A0 HrecA0].",
            "VernacExtend",
            "86b6655764f63b99f846e981692d04342fc2d171"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (in_app_or _ _ _ H7).",
            "VernacExtend",
            "2d24cf76ebc029820b76a5ffa8f7e2bc89b60168"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H8).",
            "VernacExtend",
            "3623bfd42c4f8bab3821ec9e37afd2421cb93e5d"
        ],
        [
            "absurd (v = v0).",
            "VernacExtend",
            "2a5597356b7d57ff02b85b8d9d013f1bb9965c27"
        ],
        [
            "eapply In_list_remove2.",
            "VernacExtend",
            "7eb1b8eb89512c806e1e243a61da5303249e789b"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "elim (closedNatToTerm _ _ H9).",
            "VernacExtend",
            "732b0c8f7d21880292e8f927f4198fd0c795f426"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply impE with G.",
            "VernacExtend",
            "9a90bbd182f5cba2c61f664ff3ddc360d723e8c1"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "assert (forall v : nat, ~ In_freeVarSys LNN v (Ensembles.Add (fol.Formula LNN) NN G)).",
            "VernacExtend",
            "999f2b48cb2fcc6e1e455e462d1b1ce47bc6d7dd"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H8 as (x, H8).",
            "VernacExtend",
            "bba948576645e64a80ad147764259ed0c9dfed57"
        ],
        [
            "induction H8 as (H8, H9).",
            "VernacExtend",
            "c1e93f79930e76bb048f0cb7aafbc8b202cb1595"
        ],
        [
            "induction H9 as [x H9| x H9].",
            "VernacExtend",
            "ee377123bfb9346317ff762fd3d563401d2a62db"
        ],
        [
            "elim (closedNN v).",
            "VernacExtend",
            "376c43ae354590205220a6299d65f1f5af53fe13"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction H9.",
            "VernacExtend",
            "c0333214b640d0b2d924b3dafb6c15f0e4ac7102"
        ],
        [
            "apply (H7 v).",
            "VernacExtend",
            "928f320f4c7b9320ba8d3a7484a6d870c1771f1d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply forallI.",
            "VernacExtend",
            "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply impE with G.",
            "VernacExtend",
            "9a90bbd182f5cba2c61f664ff3ddc360d723e8c1"
        ],
        [
            "apply impE with (LT (var (S nv)) (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "c4a5283db3a9f17adc2ff55283f02525c7efa37f"
        ],
        [
            "repeat simple apply sysWeaken.",
            "VernacExtend",
            "f6b768ef2cf4e0b49a5386f2e660077710988179"
        ],
        [
            "apply boundedLT.",
            "VernacExtend",
            "dbd7fee1cf2925123251278107e8f9398986436b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite (subFormulaImp LNN).",
            "VernacExtend",
            "18b3212ddac46df49018f1cc85385966eb4d129c"
        ],
        [
            "apply impTrans with G.",
            "VernacExtend",
            "38fd27a214ec9112201ee0356464e1e7dadf1856"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "repeat rewrite (subFormulaOr LNN).",
            "VernacExtend",
            "21beb531874aaedfeb77ce963c9ad8610825695b"
        ],
        [
            "induction (In_dec eq_nat_dec n (map (codeFormula L codeF codeR) A)).",
            "VernacExtend",
            "66723d0729275633679c157f579373b26d904389"
        ],
        [
            "apply orI2.",
            "VernacExtend",
            "94b84b946400b3b9d3473fcba3c2f9d5812eff02"
        ],
        [
            "apply impE with (substituteFormula LNN fU v0 (natToTerm n)).",
            "VernacExtend",
            "4b7bca27604cb15d2a54e22e024dd2c9da68aca5"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "assert (forall v : nat, ~ In v (list_remove nat eq_nat_dec v0 (freeVarFormula LNN fU))).",
            "VernacExtend",
            "b35f24e075d90d556591781a7177dfad69c762d9"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "absurd (v = v0).",
            "VernacExtend",
            "2a5597356b7d57ff02b85b8d9d013f1bb9965c27"
        ],
        [
            "eapply In_list_remove2.",
            "VernacExtend",
            "7eb1b8eb89512c806e1e243a61da5303249e789b"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm n)).",
            "VernacExtend",
            "c67493179f93bc39f4d783a68d2a0bfc4c6d5e62"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H11).",
            "VernacExtend",
            "3b1d5a97ad9970588f497f1cc6c61a42b30fe6c6"
        ],
        [
            "apply (H10 0).",
            "VernacExtend",
            "666c9dfe0105f9e3a0bc32c5c914f62af5eebfc6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H12.",
            "VernacExtend",
            "370c3a9d3731cb09079b40ee4a5c3b318ce6302c"
        ],
        [
            "decompose sum H12.",
            "VernacExtend",
            "da6d5ed5d255238ae346304872c013ed8061a3ec"
        ],
        [
            "discriminate H13.",
            "VernacExtend",
            "f5ad53ad5d772a611d1f96e8141228bd9861e505"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm n)).",
            "VernacExtend",
            "dc1eb0656179f6e0f4aef52b6dc9103df32ea71b"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H11).",
            "VernacExtend",
            "3b1d5a97ad9970588f497f1cc6c61a42b30fe6c6"
        ],
        [
            "apply (H10 1).",
            "VernacExtend",
            "3b94cd48cd79d67b17b624d411d218a74e203919"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H12.",
            "VernacExtend",
            "370c3a9d3731cb09079b40ee4a5c3b318ce6302c"
        ],
        [
            "decompose sum H12.",
            "VernacExtend",
            "da6d5ed5d255238ae346304872c013ed8061a3ec"
        ],
        [
            "apply H4; assumption.",
            "VernacExtend",
            "ed2481e3b356eac580ff85aa054528aba71fc300"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) (S nv) (natToTerm n)).",
            "VernacExtend",
            "0affa85e8beba964f881aa33f64f716cc2a6a5d9"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H11).",
            "VernacExtend",
            "3b1d5a97ad9970588f497f1cc6c61a42b30fe6c6"
        ],
        [
            "apply (H10 nv).",
            "VernacExtend",
            "a1c403d392710da03090989bf7c4b1bfe210da1b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H12.",
            "VernacExtend",
            "370c3a9d3731cb09079b40ee4a5c3b318ce6302c"
        ],
        [
            "decompose sum H12.",
            "VernacExtend",
            "da6d5ed5d255238ae346304872c013ed8061a3ec"
        ],
        [
            "apply H6; assumption.",
            "VernacExtend",
            "09512c198e920333bbb3a788ac8cccd87e2299db"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "absurd (S nv = v0).",
            "VernacExtend",
            "ce3d41f9362ed6a22d287154ef7cc87f53a691ae"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt (S nv) v0).",
            "VernacExtend",
            "2a29d0b683e93e1b3bc13b3fc69f91140cefdea0"
        ],
        [
            "rewrite H12.",
            "VernacExtend",
            "808735886b50c5c4d7707b33984e66555647a2a9"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply lt_S.",
            "VernacExtend",
            "47477bda68b8f0c94efef6095ed80a97ae3f2827"
        ],
        [
            "unfold nv in |- *.",
            "VernacExtend",
            "2204d7c5aeeb176b733fe01d3cedbbb57bd51877"
        ],
        [
            "apply newVar2.",
            "VernacExtend",
            "c27168de27da39d03695d542dd120db4bb594e99"
        ],
        [
            "unfold nvl in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b0a868e7bd0148ad67bb16d23160bb195e1b7606"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "clear H9 H8 H7 H p.",
            "VernacExtend",
            "fb28f9a00f9f6718cd340fe8635237ea925ef061"
        ],
        [
            "induction A as [| a0 A HrecA].",
            "VernacExtend",
            "66a099e63ba104a89c4fa651a909859b98513bb5"
        ],
        [
            "elim a.",
            "VernacExtend",
            "0c6adf0ffd2499090af2d0ebdf1d0d8f99dee374"
        ],
        [
            "simpl in (value of G).",
            "VernacExtend",
            "6e0cbdba2f86dc0ef16233be434371f6319945a6"
        ],
        [
            "simpl in a.",
            "VernacExtend",
            "58be579b520de350ddccdb644f51b35e86a87b4c"
        ],
        [
            "induction a as [H| H].",
            "VernacExtend",
            "cb30e64d8d178ba247f84728ed3be9cdd8fee641"
        ],
        [
            "unfold G in |- *.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "eapply andE1.",
            "VernacExtend",
            "932461eacc6376aaacc9bb8ca9130c6060a6201f"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply impE with (list_rec (fun _ => Formula) (equal Zero Zero) (fun (a : fol.Formula L) (_ : list (fol.Formula L)) (rec : Formula) => andH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR a))) rec) A).",
            "VernacExtend",
            "2075f22c01c8d5f22da08838fde7d29a4abfb195"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply HrecA.",
            "VernacExtend",
            "d073912b63f0aa63c68b1e93d8d95d8363886479"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply andE2.",
            "VernacExtend",
            "c82ce44debfda7a5cd2fde9cabfd460aebba18a5"
        ],
        [
            "unfold G in |- *.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply orI1.",
            "VernacExtend",
            "db0ad01eb30445fcd92e48ef760b299e1669e887"
        ],
        [
            "assert (Representable NN 2 codeIn (primRecFormula 2 (proj1_sig codeInIsPR))).",
            "VernacExtend",
            "b257dae81520af6add0ac1f60f817ad5c80bbc63"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "induction H10 as (H10, H11).",
            "VernacExtend",
            "87c36aba6d29d32c53a4cd1b96de28b2d5a343cd"
        ],
        [
            "set (J := primRecFormula 2 (proj1_sig codeInIsPR)) in *.",
            "VernacExtend",
            "76bc5f05a4bc9a596362749818f43423f3b289c4"
        ],
        [
            "simpl in H11.",
            "VernacExtend",
            "f2ac9771be73bd1822b73a4ad13392ccef382f09"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (natToTerm n)) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero).",
            "VernacExtend",
            "ec4c2620d6583a168d308aa773a775718708cd5f"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm n)).",
            "VernacExtend",
            "a8b700a4b53a10313c1e54ce50377289561b53bc"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H12).",
            "VernacExtend",
            "a36deb5ea39730274789c6cbc9223a68664db1b8"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H13).",
            "VernacExtend",
            "54f71c1e39fbe0132d17e9c3bd95c303c7ca1fad"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm n)).",
            "VernacExtend",
            "4c77445f102a0f666f86d4c67f7db3374f2928de"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H12).",
            "VernacExtend",
            "a36deb5ea39730274789c6cbc9223a68664db1b8"
        ],
        [
            "assert (In 1 (freeVarFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)))).",
            "VernacExtend",
            "9b48e7475a794b4eb3617dc43264f3480020333e"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H14).",
            "VernacExtend",
            "d5082d15f6a950e8551e926b8d77f0b3a24b34c5"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H15).",
            "VernacExtend",
            "9b980b492c154fb1904bba3fd3805e4d5e8a70fc"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H15.",
            "VernacExtend",
            "e5908122717ca060359b239c30d1649eca138a6b"
        ],
        [
            "decompose sum H15.",
            "VernacExtend",
            "ee8240c6a7b3b2dfc92b8a42393214f1c9500f82"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero) (S nv) (natToTerm n)).",
            "VernacExtend",
            "b16c050cf98b27f1fa62b6eefcf44fc69f25163d"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "unfold not in |- *; intros; apply H0; symmetry in |- *; assumption.",
            "VernacExtend",
            "243157f2ba12229b4466ddd98921dbb21a00c94a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero) (S nv) (natToTerm n)).",
            "VernacExtend",
            "d2b793de6d4506db539171758c6b7ffe76032c3a"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In nv (freeVarFormula LNN (substituteFormula LNN J 2 (var (S nv))))).",
            "VernacExtend",
            "9d9222bd069351dcb91b19188128dd038e2a059c"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H13).",
            "VernacExtend",
            "89c7ab5028359a8b5cacbf4633ee957a1943e4ad"
        ],
        [
            "apply (le_not_lt nv 2).",
            "VernacExtend",
            "1099bb953a5cc4429d51dc472e246dba8326860d"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H14.",
            "VernacExtend",
            "315c064431a47ec3c8cc41e58a75c8eb749330ef"
        ],
        [
            "destruct nv as [| n0].",
            "VernacExtend",
            "8ad5e633b3a1cd728fe2a82d263ced58c301ae6f"
        ],
        [
            "elim H0; reflexivity.",
            "VernacExtend",
            "4320c35310a38800a625b1a7c3e58940d517df16"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H1; reflexivity.",
            "VernacExtend",
            "8eae9ab798ce2a4826647ff956f051a001488b0e"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H2; reflexivity.",
            "VernacExtend",
            "d3dd8241b4cae29eb7070aa18c19a8e74e9367c1"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "simpl in H14.",
            "VernacExtend",
            "82c01aa396322d0c85e70b56df831e8695233bf4"
        ],
        [
            "decompose sum H14.",
            "VernacExtend",
            "29888268c9149003a0c638291123cda26c47764f"
        ],
        [
            "apply H6; assumption.",
            "VernacExtend",
            "09512c198e920333bbb3a788ac8cccd87e2299db"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm n)) 0 Zero).",
            "VernacExtend",
            "2abc52684d9c997bf3a2f8eef5980f8da70dcca4"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) (S nv) (natToTerm n)) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero).",
            "VernacExtend",
            "6e90ccaacde87373b68d5dbab16d5985b3f69f8b"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "unfold not in |- *; intros; apply H4; symmetry in |- *; assumption.",
            "VernacExtend",
            "681267dff635df5f8b49ed3b22988a4eaf2965aa"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply (le_not_lt (S nv) 2).",
            "VernacExtend",
            "d2c675b461943fcfe1416d94241f84de786a0e8e"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "destruct nv as [| n0].",
            "VernacExtend",
            "8ad5e633b3a1cd728fe2a82d263ced58c301ae6f"
        ],
        [
            "elim H0; reflexivity.",
            "VernacExtend",
            "4320c35310a38800a625b1a7c3e58940d517df16"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H1; reflexivity.",
            "VernacExtend",
            "8eae9ab798ce2a4826647ff956f051a001488b0e"
        ],
        [
            "repeat apply le_n_S.",
            "VernacExtend",
            "75f4bdfea7cd7c642cae23533841dc1c17b2e324"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply impE with (substituteFormula LNN (equal (var 0) (natToTerm (codeIn n (codeList (map (codeFormula L codeF codeR) A))))) 0 Zero).",
            "VernacExtend",
            "ded48e942e8960ad0a5768fb9f76473ae3d8ceae"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "rewrite codeInCorrect.",
            "VernacExtend",
            "dd48b7b346befe83481fe8e1e05cd1e924730a51"
        ],
        [
            "induction (In_dec eq_nat_dec n (map (codeFormula L codeF codeR) A)).",
            "VernacExtend",
            "66723d0729275633679c157f579373b26d904389"
        ],
        [
            "elim b; assumption.",
            "VernacExtend",
            "392f78d9910b9c0a8d4a355fe8c8d741654ca64c"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply Axm; left; right; constructor.",
            "VernacExtend",
            "fc933040337f48b416dd8f5aeac8df5d75f902ab"
        ],
        [
            "clear p H7.",
            "VernacExtend",
            "fdd8069477367349bdb1088932235b3460119e44"
        ],
        [
            "induction A as [| a A HrecA]; simpl in (value of G).",
            "VernacExtend",
            "a0e2d338846573c3a48d359bf5e6435d49157e60"
        ],
        [
            "unfold G in |- *.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "unfold G in |- *.",
            "VernacExtend",
            "ff39da39f3ba21f96e7114ca5af788dda7a94c87"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply expressU1.",
            "VernacExtend",
            "e6f3e566befdafcb607dccf4e164a3f86ce150ea"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply HrecA.",
            "VernacExtend",
            "d073912b63f0aa63c68b1e93d8d95d8363886479"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (forall (t1 t2 s : Term) (v : nat), substituteFormula LNN (LT t1 t2) v s = LT (substituteTerm LNN t1 v s) (substituteTerm LNN t2 v s)).",
            "VernacExtend",
            "6200ddbe9dbbe9cf3b9b8b768c23d6ba9ace57bc"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat rewrite H7.",
            "VernacExtend",
            "0e3601602633302dca9b8b91b9ad98a34a668b90"
        ],
        [
            "repeat rewrite (subTermVar1 LNN) || rewrite (subTermVar2 LNN); try unfold not in |- *; intros.",
            "VernacExtend",
            "33703a4ae3fe52835d2375d1d21cdb2e87d36520"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "apply H6; auto.",
            "VernacExtend",
            "991b52fa2aa4a421e14189d20a004b7bf8b46321"
        ],
        [
            "apply H4; auto.",
            "VernacExtend",
            "07cffeff5484e6b62a3843cb783b50b5dcc09af8"
        ],
        [
            "discriminate H8.",
            "VernacExtend",
            "4ffac7dfabe86ee563bcd96ad4b16882124344af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPrfCorrect2 : forall (f : fol.Formula L) (A : fol.Formulas L), (exists g : fol.Formula L, In g A /\\ ~ mem _ U g) -> forall p : Prf L A f, SysPrf T (notH (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p)))).",
            "VernacStartTheoremProof",
            "573948abf4167a1a98aff4692b480cfc53c07e81"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrf in |- *.",
            "VernacExtend",
            "4e45bc0cf19e42f041f11ff8eb9dc77a8775eb34"
        ],
        [
            "set (nvl := 2 :: 1 :: 0 :: v0 :: nil) in *.",
            "VernacExtend",
            "5b78bc9aea10ba96c7e03cfe6ebb4f929058410f"
        ],
        [
            "set (nv := newVar nvl) in *.",
            "VernacExtend",
            "f5f93433029a78cbd6ea1f2ac4351d88b8a07d96"
        ],
        [
            "assert (nv <> 0).",
            "VernacExtend",
            "66950267858b00278917180757b031274d943633"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H0; unfold nvl in |- *.",
            "VernacExtend",
            "1750cbe3d8193f2d5fb2add5ce2c9e69f1cde796"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 1).",
            "VernacExtend",
            "e41419fee5ebb39e7df5064dd6a0417cbf225fba"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H1; unfold nvl in |- *.",
            "VernacExtend",
            "8abb70b9c6b44a128b6d918c055704f93c8c07b1"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 2).",
            "VernacExtend",
            "a79b3630eca27c6eab4e11f5a4602a650f153718"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H2; unfold nvl in |- *.",
            "VernacExtend",
            "b9590cf295a6be7026b1f833f2868cb4efb57675"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> v0).",
            "VernacExtend",
            "eea027fd00d79555853a37572545ca492e1496d1"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H3; unfold nvl in |- *.",
            "VernacExtend",
            "d64fb5e68319b1e1652070c07ace904d089aab64"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "set (F := primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR))) in *.",
            "VernacExtend",
            "5f2b0dfdd0290ff8dfec6027514835547f21a6c4"
        ],
        [
            "set (J := primRecFormula 2 (proj1_sig codeInIsPR)) in *.",
            "VernacExtend",
            "76bc5f05a4bc9a596362749818f43423f3b289c4"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 0).",
            "VernacExtend",
            "9f45a196abb86d746abc8af3473d5980c11f6a64"
        ],
        [
            "elim H0; assumption.",
            "VernacExtend",
            "f893c02cbb3a00a06056628d1667434bc5c5a86d"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "28ab0bcb3a46a891e7413aafd4f11035fa6261b8"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 1).",
            "VernacExtend",
            "6c086c616eec6b88577c171170e335b74f5cf6d0"
        ],
        [
            "elim H1; assumption.",
            "VernacExtend",
            "87041b56a56e771a88d6cf6008d62e6dffd57c1a"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A f p)))).",
            "VernacExtend",
            "a041e023a480c83132cbe1b302d0fc35361a6fd4"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply nExist.",
            "VernacExtend",
            "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
        ],
        [
            "set (n := codePrf L codeF codeR A f p) in *.",
            "VernacExtend",
            "308a652afeef540459e261a7aba2844e0d6eea2d"
        ],
        [
            "apply impE with (forallH nv (notH (fol.andH LNN (equal (Succ (var nv)) (natToTerm (checkPrf L codeF codeR codeArityF codeArityR (codeFormula L codeF codeR f) n))) (substituteFormula LNN (substituteFormula LNN (forallH (S nv) (impH (LT (var (S nv)) (var nv)) (orH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) (substituteFormula LNN fU v0 (var (S nv)))))) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))))).",
            "VernacExtend",
            "3a673d3048859b6645ca12470c58e1efa8d1540d"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply (reduceForall LNN).",
            "VernacExtend",
            "be93f3d3eff8d5c9b2e070afda6a5e7a4f434f03"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "apply (reduceNot LNN).",
            "VernacExtend",
            "0e36f93d0e05d4852b0ebb82569f5ff819aa3fdd"
        ],
        [
            "apply (reduceAnd LNN).",
            "VernacExtend",
            "014729a4ced4cf32772264331d77ef7eacda21d7"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)) 0 (Succ (var nv))).",
            "VernacExtend",
            "f87cdde7bc3a7666928be30503af9264829bc108"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 0 (Succ (var nv))) 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
            "VernacExtend",
            "ef080c10f5fecd062cae2633ec8d32664fd7190f"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In 0 (freeVarFormula LNN (substituteFormula LNN F 0 (Succ (var nv))))).",
            "VernacExtend",
            "85debdbdf87b87a6e59044f73bcb0602559e4e9f"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H5).",
            "VernacExtend",
            "955b834b6ac09cbf8787870d723ea1f169795ed7"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H6).",
            "VernacExtend",
            "4a8470165d8fa9625c7e6f32738ce0ac43d321e6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H6.",
            "VernacExtend",
            "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
        ],
        [
            "decompose sum H6.",
            "VernacExtend",
            "c04093886f565f3cc3fd2b7418ac9db322a24cdb"
        ],
        [
            "apply H0; assumption.",
            "VernacExtend",
            "6b55086dea19d45e0fd04d897d6b583689aff105"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 2 (natToTerm (codeFormula L codeF codeR f))) 0 (Succ (var nv))) 1 (natToTerm n)).",
            "VernacExtend",
            "c316f2c39bdec1cf6bb81217c741d7552cc92111"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "simpl in H4.",
            "VernacExtend",
            "31358c428a532f17f4c3cd16100d65b9f5ba8243"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H2; assumption.",
            "VernacExtend",
            "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "simpl in H4.",
            "VernacExtend",
            "31358c428a532f17f4c3cd16100d65b9f5ba8243"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "assert (Representable NN 2 (checkPrf L codeF codeR codeArityF codeArityR) (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR)))).",
            "VernacExtend",
            "8ac536ff04180ec015c17b750ffe6547021cb9b0"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "fold F in H4.",
            "VernacExtend",
            "a4db1f4bb7da2799d1b2137834af0b5b932d26f0"
        ],
        [
            "induction H4 as (H4, H5).",
            "VernacExtend",
            "3a04c50e57a9026919ea24bbfaf80b7cb7d5cdf1"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (equal (var 0) (natToTerm (checkPrf L codeF codeR codeArityF codeArityR (codeFormula L codeF codeR f) n))) 0 (Succ (var nv))).",
            "VernacExtend",
            "7dd8c16839d51c99b349581bdf8dc58e8ff0da88"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "apply iffRefl.",
            "VernacExtend",
            "0aaf4ca531047f5e0ae634b651a4f5c44f055b9b"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffRefl.",
            "VernacExtend",
            "0aaf4ca531047f5e0ae634b651a4f5c44f055b9b"
        ],
        [
            "unfold n in |- *.",
            "VernacExtend",
            "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
        ],
        [
            "rewrite checkPrfCorrect1.",
            "VernacExtend",
            "5571f23f51fccb358622a40272eea9bead9cf380"
        ],
        [
            "decompose record H.",
            "VernacExtend",
            "f936c66bafe09c3d2fcd477b5fef43552dde4d4b"
        ],
        [
            "apply impE with (notH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR x)))).",
            "VernacExtend",
            "44617c2971a93a0a73883c93860f5fed96b7da0d"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "assert (forall v : nat, ~ In v (freeVarFormula LNN (notH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR x)))))).",
            "VernacExtend",
            "9a9831456c952b491376b2d32bfd7169cf12c007"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H4).",
            "VernacExtend",
            "5c8621e56555d16295ceed311519d01e133ca795"
        ],
        [
            "absurd (v = v0).",
            "VernacExtend",
            "2a5597356b7d57ff02b85b8d9d013f1bb9965c27"
        ],
        [
            "eapply In_list_remove2.",
            "VernacExtend",
            "7eb1b8eb89512c806e1e243a61da5303249e789b"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply (closedNatToTerm _ _ H7).",
            "VernacExtend",
            "c061c19a61c6762fe14a093f727e0221b96227e9"
        ],
        [
            "assert (forall v : nat, ~ In_freeVarSys LNN v (Ensembles.Add (fol.Formula LNN) NN (notH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR x)))))).",
            "VernacExtend",
            "61513c774a572cb3b3c59c9528aa12a9ce6f0451"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H7 as (x0, H7); induction H7 as (H7, H8).",
            "VernacExtend",
            "2c6a4607d1f684be191dbcc415d91e8ea894828c"
        ],
        [
            "induction H8 as [x0 H8| x0 H8].",
            "VernacExtend",
            "d066e0f05aaaccc614bda11a9c147601c65fdcc8"
        ],
        [
            "elim (closedNN v).",
            "VernacExtend",
            "376c43ae354590205220a6299d65f1f5af53fe13"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction H8.",
            "VernacExtend",
            "f75c0ebaad012d498c67533d1044a3b37b773c12"
        ],
        [
            "apply (H4 v).",
            "VernacExtend",
            "772b71a6f741d0fc2310de55fc3c3a1ae61f0623"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply forallI.",
            "VernacExtend",
            "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply nAnd.",
            "VernacExtend",
            "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
        ],
        [
            "unfold orH at 1 in |- *.",
            "VernacExtend",
            "3deae474a618657ee46fec4c0dc466cd66b35e62"
        ],
        [
            "unfold fol.orH in |- *.",
            "VernacExtend",
            "8297ac046a66ea105ff1b8bc879172d6a57d514e"
        ],
        [
            "apply impTrans with (equal (Succ (var nv)) (natToTerm (S (codeList (map (codeFormula L codeF codeR) A))))).",
            "VernacExtend",
            "d5eb50922ee794ff4ed9c4afef4f5ea14133363d"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply nnE.",
            "VernacExtend",
            "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "rewrite <- (subFormulaId LNN (notH (substituteFormula LNN (substituteFormula LNN (forallH (S nv) (impH (LT (var (S nv)) (var nv)) (orH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) (substituteFormula LNN fU v0 (var (S nv)))))) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p)))) nv) .",
            "VernacExtend",
            "81b2783f32be56c2cc2723d76161456ba6fa1ae6"
        ],
        [
            "apply impE with (substituteFormula LNN (notH (substituteFormula LNN (substituteFormula LNN (forallH (S nv) (impH (LT (var (S nv)) (var nv)) (orH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) (substituteFormula LNN fU v0 (var (S nv)))))) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A f p)))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))).",
            "VernacExtend",
            "b217b998bf0acc62766db81a28979f5b9668517d"
        ],
        [
            "apply (subWithEquals LNN).",
            "VernacExtend",
            "5f53b7a36bc2461829d2e71be83a076e924542e7"
        ],
        [
            "apply eqSym.",
            "VernacExtend",
            "c72146c5c38717d561dda616c25a51523114224c"
        ],
        [
            "apply impE with (fol.equal LNN (Succ (var nv)) (natToTerm (S (codeList (map (codeFormula L codeF codeR) A))))).",
            "VernacExtend",
            "28b0b7d40b20c87ceb348e38eb758c0a8279beef"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "fold var in |- *.",
            "VernacExtend",
            "567c3d90adea95b225986a673cff6ac5d221f560"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply nn2.",
            "VernacExtend",
            "cc381a83ced1dddb0b44ee921f011a9bbc099103"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "assert (S nv <> 1).",
            "VernacExtend",
            "a78067b2bbcdaf130e5a0441933b129187b3243f"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt (S nv) 1).",
            "VernacExtend",
            "a6212b22e7f74a1f37f265173202789b42c4e0b7"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply lt_S.",
            "VernacExtend",
            "47477bda68b8f0c94efef6095ed80a97ae3f2827"
        ],
        [
            "unfold nv in |- *.",
            "VernacExtend",
            "2204d7c5aeeb176b733fe01d3cedbbb57bd51877"
        ],
        [
            "apply newVar2.",
            "VernacExtend",
            "c27168de27da39d03695d542dd120db4bb594e99"
        ],
        [
            "unfold nvl in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b0a868e7bd0148ad67bb16d23160bb195e1b7606"
        ],
        [
            "assert (S nv <> 2).",
            "VernacExtend",
            "7cfd982ac91b2b8c5dcb6cde36057fa710d88f99"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt (S nv) 2).",
            "VernacExtend",
            "9e10df90e35d58bb18579588ac879ed75f3ad2ef"
        ],
        [
            "rewrite H9.",
            "VernacExtend",
            "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply lt_S.",
            "VernacExtend",
            "47477bda68b8f0c94efef6095ed80a97ae3f2827"
        ],
        [
            "unfold nv in |- *.",
            "VernacExtend",
            "2204d7c5aeeb176b733fe01d3cedbbb57bd51877"
        ],
        [
            "apply newVar2.",
            "VernacExtend",
            "c27168de27da39d03695d542dd120db4bb594e99"
        ],
        [
            "unfold nvl in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "b0a868e7bd0148ad67bb16d23160bb195e1b7606"
        ],
        [
            "assert (S nv <> nv).",
            "VernacExtend",
            "b24232439d93b2157e3993ad12d0677b18fc1d57"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "eapply (n_Sn nv).",
            "VernacExtend",
            "9730361fe97af274aeba1c42148a8b6925b9de18"
        ],
        [
            "symmetry in |- *; assumption.",
            "VernacExtend",
            "5955dba2342bcdccd27ef4f56635d3b4a5a3faa9"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) 0).",
            "VernacExtend",
            "efe8222cc1659bca593482e0408cccfbe7b18dd3"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "b851ab8354b9008dbebb9f627389991cc53fe64e"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) 1).",
            "VernacExtend",
            "b821e913cb8c81e7b1085eb89b413e6824bca162"
        ],
        [
            "elim H8; assumption.",
            "VernacExtend",
            "9b94cbe9afb01cb625d2685eec9ff43ebc574600"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A f p)))).",
            "VernacExtend",
            "1f763e5c5a468b9844a2c9bdd30138087aebcd24"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "rewrite (subFormulaForall LNN).",
            "VernacExtend",
            "26a915fac231a56c47d31341362da11f359870f0"
        ],
        [
            "induction (eq_nat_dec (S nv) nv).",
            "VernacExtend",
            "31332541c7f95ba7be294589ccd378f4b01a6411"
        ],
        [
            "elim H10; assumption.",
            "VernacExtend",
            "37d0f6c7b732fe080be11dca3b4125636aa865a5"
        ],
        [
            "induction (In_dec eq_nat_dec (S nv) (freeVarTerm LNN (natToTerm (codeList (map (codeFormula L codeF codeR) A))))).",
            "VernacExtend",
            "2d5f1225e77ef06eb05a635f739cbcc94f41dcab"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply nForall.",
            "VernacExtend",
            "04cd0867c1340f9b78d141a1cd5cc20c0061f7b3"
        ],
        [
            "apply existI with (natToTerm (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "753bf22f62568db43917d797d9789bc2cef13353"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "repeat rewrite (subFormulaImp LNN).",
            "VernacExtend",
            "6d6e4f16be44785c0b3cda5edf5adbb34402710b"
        ],
        [
            "apply nImp.",
            "VernacExtend",
            "5eee16dcc15d931cd9613e818af5fdc059a18714"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "assert (forall (t1 t2 s : Term) (v : nat), substituteFormula LNN (LT t1 t2) v s = LT (substituteTerm LNN t1 v s) (substituteTerm LNN t2 v s)).",
            "VernacExtend",
            "6200ddbe9dbbe9cf3b9b8b768c23d6ba9ace57bc"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat rewrite H11.",
            "VernacExtend",
            "1e2e64e8e9f03b1509d5f5c872b1f5a878bc1836"
        ],
        [
            "repeat rewrite (subTermVar1 LNN) || rewrite (subTermVar2 LNN); try unfold not in |- *; intros.",
            "VernacExtend",
            "33703a4ae3fe52835d2375d1d21cdb2e87d36520"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply natLT.",
            "VernacExtend",
            "3fff59a53090692fc70a598a3ac6beae43b54f26"
        ],
        [
            "cut (In x A).",
            "VernacExtend",
            "0cdf51881f993158ea360012433c9c77b41bae39"
        ],
        [
            "generalize x A.",
            "VernacExtend",
            "f7f7bec6b60f6a79d468c467229f633b5e154bfe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction A0 as [| a A0 HrecA0].",
            "VernacExtend",
            "86b6655764f63b99f846e981692d04342fc2d171"
        ],
        [
            "elim H12.",
            "VernacExtend",
            "d15ec5d2fcc628d8885facffc1f0ba9082cca4bc"
        ],
        [
            "induction H12 as [H12| H12].",
            "VernacExtend",
            "4d1026df54d6c5832c266228cecd0b5edc16962d"
        ],
        [
            "rewrite H12.",
            "VernacExtend",
            "808735886b50c5c4d7707b33984e66555647a2a9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "apply lt_le_trans with (codeList (map (codeFormula L codeF codeR) A0)).",
            "VernacExtend",
            "6cf30f153a1d53260d890ffe03b1be74a2252729"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_S.",
            "VernacExtend",
            "dfa151dba71c734eeb3c5ffb45ae15b3c0a88486"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "apply H10; auto.",
            "VernacExtend",
            "253cb43a53b9185c49bcda11ee130f3c9dc45d39"
        ],
        [
            "apply H8; auto.",
            "VernacExtend",
            "8bf6d352c2b4640ab713b04aecd144cf9f31dffc"
        ],
        [
            "discriminate H12.",
            "VernacExtend",
            "9a87600c59216187356ea01112f66a2753773011"
        ],
        [
            "repeat rewrite (subFormulaOr LNN).",
            "VernacExtend",
            "21beb531874aaedfeb77ce963c9ad8610825695b"
        ],
        [
            "apply nOr.",
            "VernacExtend",
            "92c183131733af2e45678c033993d5b5d3167470"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "assert (Representable NN 2 codeIn J).",
            "VernacExtend",
            "e475a440def48e1b9bfb9488d062274341aa82a1"
        ],
        [
            "unfold J in |- *; apply primRecRepresentable.",
            "VernacExtend",
            "5339ded5620d56aac7fc58a5d09b305a91891e06"
        ],
        [
            "induction H11 as (H11, H12).",
            "VernacExtend",
            "ed21c23140b658efa358ba9fe4c284587bcbb6b5"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (natToTerm (codeFormula L codeF codeR x))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero)).",
            "VernacExtend",
            "c17dbcd75d8a02eba5bd7f09dee385afc93dcc4e"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "c039262f4c19f35bd79a8e5f579aea71de29f755"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H13).",
            "VernacExtend",
            "89c7ab5028359a8b5cacbf4633ee957a1943e4ad"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H14).",
            "VernacExtend",
            "c2b63cd48c0e730660623cdc8bf1bd7cc68e1575"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply H14.",
            "VernacExtend",
            "315c064431a47ec3c8cc41e58a75c8eb749330ef"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 1 (natToTerm (codePrf L codeF codeR A f p))) 0 Zero) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "cf73beb047ff146401beb1cf514d41d78b5bb1bd"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) 0 Zero) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "39629b1e93f2d2d7273f622d36d640f7d16be7ef"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H13).",
            "VernacExtend",
            "89c7ab5028359a8b5cacbf4633ee957a1943e4ad"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H14).",
            "VernacExtend",
            "c2b63cd48c0e730660623cdc8bf1bd7cc68e1575"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H14.",
            "VernacExtend",
            "82c01aa396322d0c85e70b56df831e8695233bf4"
        ],
        [
            "decompose sum H14.",
            "VernacExtend",
            "29888268c9149003a0c638291123cda26c47764f"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (var nv)) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "20333c045880a1462e100597d716f92509139ed5"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H0; symmetry in |- *; assumption.",
            "VernacExtend",
            "ab74f7a5c1ac5813a68c9dc14cc531901f20ac30"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "ab92519d0e85369b6b4793507e40e5f3e7963d78"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In nv (freeVarFormula LNN (substituteFormula LNN J 2 (var (S nv))))).",
            "VernacExtend",
            "9d9222bd069351dcb91b19188128dd038e2a059c"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H14).",
            "VernacExtend",
            "d5082d15f6a950e8551e926b8d77f0b3a24b34c5"
        ],
        [
            "apply (le_not_lt nv 2).",
            "VernacExtend",
            "1099bb953a5cc4429d51dc472e246dba8326860d"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H15.",
            "VernacExtend",
            "b7865067db5259eafb12346a082417ff349ca746"
        ],
        [
            "destruct nv as [| n0].",
            "VernacExtend",
            "8ad5e633b3a1cd728fe2a82d263ced58c301ae6f"
        ],
        [
            "elim H0; reflexivity.",
            "VernacExtend",
            "4320c35310a38800a625b1a7c3e58940d517df16"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H1; reflexivity.",
            "VernacExtend",
            "8eae9ab798ce2a4826647ff956f051a001488b0e"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H2; reflexivity.",
            "VernacExtend",
            "d3dd8241b4cae29eb7070aa18c19a8e74e9367c1"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "simpl in H15.",
            "VernacExtend",
            "e5908122717ca060359b239c30d1649eca138a6b"
        ],
        [
            "decompose sum H15.",
            "VernacExtend",
            "ee8240c6a7b3b2dfc92b8a42393214f1c9500f82"
        ],
        [
            "apply H10; assumption.",
            "VernacExtend",
            "23b9fe7ed327fab092ceb42025ba9970246ea3c0"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))) 0 Zero).",
            "VernacExtend",
            "7f1596aa268a8cd4276c766a25f64a89bab1ea8b"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN J 2 (var (S nv))) (S nv) (natToTerm (codeFormula L codeF codeR x))) 1 (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) 0 Zero).",
            "VernacExtend",
            "227aebe8ce5b1e710ed6ef92aec2278b8d07b608"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H8; symmetry in |- *; assumption.",
            "VernacExtend",
            "c615fc110e17fcdb40913c4aa3e708fbd8d83510"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply (le_not_lt (S nv) 2).",
            "VernacExtend",
            "d2c675b461943fcfe1416d94241f84de786a0e8e"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "destruct nv as [| n0].",
            "VernacExtend",
            "8ad5e633b3a1cd728fe2a82d263ced58c301ae6f"
        ],
        [
            "elim H8; reflexivity.",
            "VernacExtend",
            "26d0d96f5241970662b66d99d9086946e99c51b5"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "elim H9; reflexivity.",
            "VernacExtend",
            "498e25b4fddca74a79c026587b999f58612dc0af"
        ],
        [
            "repeat apply lt_n_S.",
            "VernacExtend",
            "ab9730846ad0f33fadfc4b1d8de21f992606e3f2"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "simpl in H12.",
            "VernacExtend",
            "370c3a9d3731cb09079b40ee4a5c3b318ce6302c"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (equal (var 0) (natToTerm (codeIn (codeFormula L codeF codeR x) (codeList (map (codeFormula L codeF codeR) A))))) 0 Zero)).",
            "VernacExtend",
            "68b33ea6cf72f41043345e3598a2b56f5318fb82"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite codeInCorrect.",
            "VernacExtend",
            "dd48b7b346befe83481fe8e1e05cd1e924730a51"
        ],
        [
            "induction (In_dec eq_nat_dec (codeFormula L codeF codeR x) (map (codeFormula L codeF codeR) A)).",
            "VernacExtend",
            "36c177d35cfdbf28ffcccc626e4138b22c700b7f"
        ],
        [
            "replace Zero with (natToTerm 0).",
            "VernacExtend",
            "e3a5bfcf063822f111da509ccbc08a54ad15d59b"
        ],
        [
            "apply natNE.",
            "VernacExtend",
            "c9f1ef680220c9ab1f5c7f987ee94ba4bca619d1"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim b.",
            "VernacExtend",
            "954e73d8a25006d790022abb5978a50d3a888a56"
        ],
        [
            "cut (In x A).",
            "VernacExtend",
            "0cdf51881f993158ea360012433c9c77b41bae39"
        ],
        [
            "generalize A x.",
            "VernacExtend",
            "b8c7249d68a37ff9d144f502916d971942c4aa81"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction A0 as [| a A0 HrecA0].",
            "VernacExtend",
            "86b6655764f63b99f846e981692d04342fc2d171"
        ],
        [
            "elim H13.",
            "VernacExtend",
            "49bc6a13b5b986f0172b5f2083b3f22a32c17a32"
        ],
        [
            "induction H13 as [H13| H13].",
            "VernacExtend",
            "f39c36ef6d4a3ebf87dc8e85eff7188782cd35a5"
        ],
        [
            "rewrite H13.",
            "VernacExtend",
            "bc2d32522e887645239b994008e234c058557cd9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply impE with (notH (substituteFormula LNN fU v0 (natToTerm (codeFormula L codeF codeR x)))).",
            "VernacExtend",
            "44617c2971a93a0a73883c93860f5fed96b7da0d"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "assert (forall v : nat, ~ In v (list_remove nat eq_nat_dec v0 (freeVarFormula LNN fU))).",
            "VernacExtend",
            "b35f24e075d90d556591781a7177dfad69c762d9"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "absurd (v = v0).",
            "VernacExtend",
            "2a5597356b7d57ff02b85b8d9d013f1bb9965c27"
        ],
        [
            "eapply In_list_remove2.",
            "VernacExtend",
            "7eb1b8eb89512c806e1e243a61da5303249e789b"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) 1 (natToTerm (codePrf L codeF codeR A f p))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "ef4b93b7b89318a04ce2b731d1cd47b972c683af"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H12).",
            "VernacExtend",
            "a36deb5ea39730274789c6cbc9223a68664db1b8"
        ],
        [
            "apply (H11 0).",
            "VernacExtend",
            "bd8af60f08d3e6cab4c4f94524c78734deafc459"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H13.",
            "VernacExtend",
            "976600890e01c0e0510013da0d9e3caf4de7ee06"
        ],
        [
            "decompose sum H13.",
            "VernacExtend",
            "44548e0889d8f8523bd646b96514852000297528"
        ],
        [
            "discriminate H14.",
            "VernacExtend",
            "dc07124194d62ed43f6c141ddf5973ffa45df830"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) nv (natToTerm (codeList (map (codeFormula L codeF codeR) A)))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "c69fd0c2f2a2f88797e8e045d5c5af89d83bc546"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H12).",
            "VernacExtend",
            "a36deb5ea39730274789c6cbc9223a68664db1b8"
        ],
        [
            "apply (H11 1).",
            "VernacExtend",
            "4db460fe203635cb38dd8c2396d2ad4fc8247918"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H13.",
            "VernacExtend",
            "976600890e01c0e0510013da0d9e3caf4de7ee06"
        ],
        [
            "decompose sum H13.",
            "VernacExtend",
            "44548e0889d8f8523bd646b96514852000297528"
        ],
        [
            "apply H8; assumption.",
            "VernacExtend",
            "df19cbbb8259b05d203bfb898a30426965421383"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN fU v0 (var (S nv))) (S nv) (natToTerm (codeFormula L codeF codeR x))).",
            "VernacExtend",
            "9e6395bb649dc2616c85b1044cfef17bedf1f6df"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H12).",
            "VernacExtend",
            "a36deb5ea39730274789c6cbc9223a68664db1b8"
        ],
        [
            "apply (H11 nv).",
            "VernacExtend",
            "a1c5ac3aa14f9ff7b08a965a956d2fbac3b57869"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H13.",
            "VernacExtend",
            "976600890e01c0e0510013da0d9e3caf4de7ee06"
        ],
        [
            "decompose sum H13.",
            "VernacExtend",
            "44548e0889d8f8523bd646b96514852000297528"
        ],
        [
            "apply H10; assumption.",
            "VernacExtend",
            "23b9fe7ed327fab092ceb42025ba9970246ea3c0"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply expressU2.",
            "VernacExtend",
            "a255ee65605e3c5fa6b377a0e1f1c0dc48fbf4e7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPrfCorrect3 : forall (f : fol.Formula L) (n : nat), (forall (A : list (fol.Formula L)) (p : Prf L A f), n <> codePrf L codeF codeR A f p) -> SysPrf T (notH (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))).",
            "VernacStartTheoremProof",
            "da731406fcf8b32e36e9505a46413746f69c5bb1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrf in |- *.",
            "VernacExtend",
            "4e45bc0cf19e42f041f11ff8eb9dc77a8775eb34"
        ],
        [
            "set (nvl := 2 :: 1 :: 0 :: v0 :: nil) in *.",
            "VernacExtend",
            "5b78bc9aea10ba96c7e03cfe6ebb4f929058410f"
        ],
        [
            "set (nv := newVar nvl) in *.",
            "VernacExtend",
            "f5f93433029a78cbd6ea1f2ac4351d88b8a07d96"
        ],
        [
            "assert (nv <> 0).",
            "VernacExtend",
            "66950267858b00278917180757b031274d943633"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H0; unfold nvl in |- *.",
            "VernacExtend",
            "1750cbe3d8193f2d5fb2add5ce2c9e69f1cde796"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 1).",
            "VernacExtend",
            "e41419fee5ebb39e7df5064dd6a0417cbf225fba"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H1; unfold nvl in |- *.",
            "VernacExtend",
            "8abb70b9c6b44a128b6d918c055704f93c8c07b1"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> 2).",
            "VernacExtend",
            "a79b3630eca27c6eab4e11f5a4602a650f153718"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H2; unfold nvl in |- *.",
            "VernacExtend",
            "b9590cf295a6be7026b1f833f2868cb4efb57675"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "assert (nv <> v0).",
            "VernacExtend",
            "eea027fd00d79555853a37572545ca492e1496d1"
        ],
        [
            "unfold nv, not in |- *; intros; elim (newVar1 nvl).",
            "VernacExtend",
            "433af5d207e0d96bebbb724dbc120fcde6af41e5"
        ],
        [
            "rewrite H3; unfold nvl in |- *.",
            "VernacExtend",
            "d64fb5e68319b1e1652070c07ace904d089aab64"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "set (F := primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR))) in *.",
            "VernacExtend",
            "5f2b0dfdd0290ff8dfec6027514835547f21a6c4"
        ],
        [
            "set (J := primRecFormula 2 (proj1_sig codeInIsPR)) in *.",
            "VernacExtend",
            "76bc5f05a4bc9a596362749818f43423f3b289c4"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 0).",
            "VernacExtend",
            "9f45a196abb86d746abc8af3473d5980c11f6a64"
        ],
        [
            "elim H0; assumption.",
            "VernacExtend",
            "f893c02cbb3a00a06056628d1667434bc5c5a86d"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "28ab0bcb3a46a891e7413aafd4f11035fa6261b8"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec nv 1).",
            "VernacExtend",
            "6c086c616eec6b88577c171170e335b74f5cf6d0"
        ],
        [
            "elim H1; assumption.",
            "VernacExtend",
            "87041b56a56e771a88d6cf6008d62e6dffd57c1a"
        ],
        [
            "induction (In_dec eq_nat_dec nv (freeVarTerm LNN (natToTerm n))).",
            "VernacExtend",
            "6612ec7ace8e9fb8df1e27cba4489fdde14cf9f2"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply nExist.",
            "VernacExtend",
            "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply forallI.",
            "VernacExtend",
            "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
        ],
        [
            "apply closedNN.",
            "VernacExtend",
            "7badd7e4b99efa2189a2d98ca298aaabf889f625"
        ],
        [
            "apply nAnd.",
            "VernacExtend",
            "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
        ],
        [
            "apply orI1.",
            "VernacExtend",
            "db0ad01eb30445fcd92e48ef760b299e1669e887"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)) 0 (Succ (var nv)))).",
            "VernacExtend",
            "863c1f9a417709f2e6c407a764584021ac34223a"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 0 (Succ (var nv))) 2 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
            "VernacExtend",
            "ef080c10f5fecd062cae2633ec8d32664fd7190f"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In 0 (freeVarFormula LNN (substituteFormula LNN F 0 (Succ (var nv))))).",
            "VernacExtend",
            "85debdbdf87b87a6e59044f73bcb0602559e4e9f"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H5).",
            "VernacExtend",
            "955b834b6ac09cbf8787870d723ea1f169795ed7"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H6).",
            "VernacExtend",
            "4a8470165d8fa9625c7e6f32738ce0ac43d321e6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H6.",
            "VernacExtend",
            "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
        ],
        [
            "decompose sum H6.",
            "VernacExtend",
            "c04093886f565f3cc3fd2b7418ac9db322a24cdb"
        ],
        [
            "apply H0; assumption.",
            "VernacExtend",
            "6b55086dea19d45e0fd04d897d6b583689aff105"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN F 2 (natToTerm (codeFormula L codeF codeR f))) 0 (Succ (var nv))) 1 (natToTerm n)).",
            "VernacExtend",
            "c316f2c39bdec1cf6bb81217c741d7552cc92111"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "simpl in H4.",
            "VernacExtend",
            "31358c428a532f17f4c3cd16100d65b9f5ba8243"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H2; assumption.",
            "VernacExtend",
            "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "simpl in H4.",
            "VernacExtend",
            "31358c428a532f17f4c3cd16100d65b9f5ba8243"
        ],
        [
            "decompose sum H4.",
            "VernacExtend",
            "8a2ae8580c260915b5527daa320235236324501a"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "assert (Representable NN 2 (checkPrf L codeF codeR codeArityF codeArityR) (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR)))).",
            "VernacExtend",
            "8ac536ff04180ec015c17b750ffe6547021cb9b0"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "fold F in H4.",
            "VernacExtend",
            "a4db1f4bb7da2799d1b2137834af0b5b932d26f0"
        ],
        [
            "induction H4 as (H4, H5).",
            "VernacExtend",
            "3a04c50e57a9026919ea24bbfaf80b7cb7d5cdf1"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "apply impE with (notH (substituteFormula LNN (equal (var 0) (natToTerm (checkPrf L codeF codeR codeArityF codeArityR (codeFormula L codeF codeR f) n))) 0 (Succ (var nv)))).",
            "VernacExtend",
            "3ec73566f262aea20e113bf4b5bb82340ec71e62"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "induction (eq_nat_dec (checkPrf L codeF codeR codeArityF codeArityR (codeFormula L codeF codeR f) n) 0).",
            "VernacExtend",
            "5a60a48d397d70b4aa3e9a2ab5c0fd59db106465"
        ],
        [
            "rewrite a.",
            "VernacExtend",
            "905c705a182fa776d319d2bbb7fe34c13fe7d244"
        ],
        [
            "apply nn1.",
            "VernacExtend",
            "c903514c0a1c26bc95236b52616257c3109264ed"
        ],
        [
            "decompose record (checkPrfCorrect2 L codeF codeR codeArityF codeArityR codeArityFIsCorrect1 codeArityFIsCorrect2 codeArityRIsCorrect1 codeArityRIsCorrect2 codeFInj codeRInj (codeFormula L codeF codeR f) n b).",
            "VernacExtend",
            "f77e2c03b4cbe5535a81895d8ec726c4bec0f38a"
        ],
        [
            "assert (x = f).",
            "VernacExtend",
            "33a494866aab6a4b6777813bf061d77d80cbf68d"
        ],
        [
            "eapply codeFormulaInj.",
            "VernacExtend",
            "7852cde31d2de1fdfaf1d6936ecd082d0f4ee492"
        ],
        [
            "apply codeFInj.",
            "VernacExtend",
            "5bc66c4fc0d3e1d499e056b7037142ab4b5b8c92"
        ],
        [
            "apply codeRInj.",
            "VernacExtend",
            "61098097bbe9a9c08fc0a3970c96e2deb9f32ddc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- H6 in H.",
            "VernacExtend",
            "3c1e57343a9d7b8c7862164c37d753f154541bf9"
        ],
        [
            "elim (H x0 x1).",
            "VernacExtend",
            "6f2d1f9ccbc989ca6c8f20a0e98c9ccb6ccdc6f2"
        ],
        [
            "symmetry in |- *.",
            "VernacExtend",
            "dc33a39a53e296ef5e59fd831d55212be2a42f22"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma freeVarCodeSysPrf : forall v : nat, In v (freeVarFormula LNN codeSysPrf) -> v <= 1.",
            "VernacStartTheoremProof",
            "ad7f58c14138489303fde70f9d6667273f38c7cd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrf in H.",
            "VernacExtend",
            "97365544e1ec59660c25c24ba8f273611c35694e"
        ],
        [
            "set (nv := newVar (2 :: 1 :: 0 :: v0 :: nil)) in *.",
            "VernacExtend",
            "e47db259c7fa577bbd043dc9fd821bf68f3b1e0e"
        ],
        [
            "unfold existH, andH, forallH, impH, orH in H.",
            "VernacExtend",
            "6fe89f9fa92065a41feb4d7837a0ecd8cc234dde"
        ],
        [
            "repeat match goal with | H1:(?X1 = ?X2),H2:(?X1 <> ?X2) |- _ => elim H2; apply H1 | H1:(?X1 = ?X2),H2:(?X2 <> ?X1) |- _ => elim H2; symmetry in |- *; apply H1 | H:(In ?X3 (freeVarFormula LNN (fol.existH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.forallH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (list_remove nat eq_nat_dec ?X1 (freeVarFormula LNN ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X2)); [ eapply In_list_remove1; apply H | assert (X3 <> X1); [ eapply In_list_remove2; apply H | clear H ] ] | H:(In ?X3 (freeVarFormula LNN (fol.andH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.orH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.impH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.notH LNN ?X1))) |- _ => assert (In X3 (freeVarFormula LNN X1)); [ apply H | clear H ] | H:(In _ (_ ++ _)) |- _ => induction (in_app_or _ _ _ H); clear H | H:(In _ (freeVarFormula LNN (substituteFormula LNN ?X1 ?X2 ?X3))) |- _ => induction (freeVarSubFormula3 _ _ _ _ _ H); clear H | H:(In _ (freeVarFormula LNN (LT ?X1 ?X2))) |- _ => rewrite freeVarLT in H | H:(In _ (freeVarTerm LNN (natToTerm _))) |- _ => elim (closedNatToTerm _ _ H) | H:(In _ (freeVarTerm LNN Zero)) |- _ => elim H | H:(In _ (freeVarTerm LNN (Succ _))) |- _ => rewrite freeVarSucc in H | H:(In _ (freeVarTerm LNN (var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm LNN (fol.var LNN _))) |- _ => simpl in H; decompose sum H; clear H end.",
            "VernacExtend",
            "917ed46c376615752c3b8875221c4a71e965ed51"
        ],
        [
            "assert (Representable NN 2 (checkPrf L codeF codeR codeArityF codeArityR) (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR)))).",
            "VernacExtend",
            "8ac536ff04180ec015c17b750ffe6547021cb9b0"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "induction H0 as (H0, H4).",
            "VernacExtend",
            "cafc51c46729b9b2ef7742a66ee402a81a167ec4"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "induction (le_lt_or_eq _ _ (H0 _ H)).",
            "VernacExtend",
            "99923a6f13607b3683387a9024cade3fb931a4c1"
        ],
        [
            "apply le_S_n.",
            "VernacExtend",
            "8f9d88b4dde1dc61a3f5f18238f0544e5d303ccc"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "elim H2; assumption.",
            "VernacExtend",
            "28f55f650b48d1d7b58713bd8dac64e34c78c188"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assert (Representable NN 2 codeIn (primRecFormula 2 (proj1_sig codeInIsPR))).",
            "VernacExtend",
            "b257dae81520af6add0ac1f60f817ad5c80bbc63"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "induction H0 as (H0, H6).",
            "VernacExtend",
            "2d6aed06a6ac5cd3f741f729196377fcad385f73"
        ],
        [
            "induction (le_lt_or_eq _ _ (H0 _ H)).",
            "VernacExtend",
            "99923a6f13607b3683387a9024cade3fb931a4c1"
        ],
        [
            "apply le_S_n.",
            "VernacExtend",
            "8f9d88b4dde1dc61a3f5f18238f0544e5d303ccc"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim H5; assumption.",
            "VernacExtend",
            "3977e336635137e3cc8ff653076f07bb2af7e538"
        ],
        [
            "elim H3.",
            "VernacExtend",
            "70fb843285201ec5a9b4d417b6f0002c41dde4c6"
        ],
        [
            "apply freeVarfU.",
            "VernacExtend",
            "f62a1608423178c926f1ab3d27ed14547b2d7aac"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeSysPf : Formula := existH 1 codeSysPrf.",
            "VernacDefinition",
            "2f7da913514a69bf7edeab0ddbc92476fe765e9b"
        ],
        [
            "Lemma freeVarCodeSysPf : forall v : nat, In v (freeVarFormula LNN codeSysPf) -> v = 0.",
            "VernacStartTheoremProof",
            "045bbe7359a1eb81da3b7083d584cab3a78ec2e0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPf in H.",
            "VernacExtend",
            "7e38608c8baefd0ae06e6ff9b23978ec56e22316"
        ],
        [
            "destruct v as [| n].",
            "VernacExtend",
            "6c408d4b6fe4848787af1f3ef6e9f691d27d88f9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H).",
            "VernacExtend",
            "3c354814be30c8200c49c62c19feceb0d20c5648"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim (le_not_lt (S (S n)) 1).",
            "VernacExtend",
            "b0088ee26f073eda35c952ff47f5e3a06e074129"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPfCorrect : forall f : fol.Formula L, folProof.SysPrf L U f -> SysPrf T (substituteFormula LNN codeSysPf 0 (natToTerm (codeFormula L codeF codeR f))).",
            "VernacStartTheoremProof",
            "fd5423bfc1e39fef7ded635f00125745854b62c6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H as (x, H).",
            "VernacExtend",
            "d232074075f4e7274913cc4565e332b8e4fccd19"
        ],
        [
            "induction H as (x0, H).",
            "VernacExtend",
            "e46a6f07411e55ef5ba483e7d28382fdafbb42ea"
        ],
        [
            "unfold codeSysPf in |- *.",
            "VernacExtend",
            "614642cdad371c931d13019aef4bb9060e37f26a"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 1 0).",
            "VernacExtend",
            "7b4fb4ca71c63df5b0d3aa5a66a5254d0504ed7a"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 1 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "ee062b7b94189d0fe57e34c761dedecfe51f001a"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "apply existI with (natToTerm (codePrf L codeF codeR _ _ x0)).",
            "VernacExtend",
            "a22a035d595afb298d98a2e0589196cea7e16d52"
        ],
        [
            "apply codeSysPrfCorrect1.",
            "VernacExtend",
            "e6ebcfbd79188217abae47dd1e301d9387123bd4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeSysPrfNot := existH 2 (andH (substituteFormula LNN codeSysPrf 0 (var 2)) (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (var 0))).",
            "VernacDefinition",
            "63387410d66bfb02e54cd454e88d1ab34a81d10c"
        ],
        [
            "Lemma freeVarCodeSysPrfN : forall v : nat, In v (freeVarFormula LNN codeSysPrfNot) -> v <= 1.",
            "VernacStartTheoremProof",
            "5aef6d4430c88428c692a1dcc75ef7a4b405f656"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrfNot in H.",
            "VernacExtend",
            "75f1039ac529ddbf5632028dd14354a828e67adf"
        ],
        [
            "SimplFreeVar.",
            "VernacExtend",
            "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (Representable NN 1 codeNot (primRecFormula 1 (proj1_sig codeNotIsPR))).",
            "VernacExtend",
            "125f103e267383f61dca97303393e21e91bd9ea5"
        ],
        [
            "apply primRecRepresentable.",
            "VernacExtend",
            "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
        ],
        [
            "induction H0 as (H0, H4).",
            "VernacExtend",
            "cafc51c46729b9b2ef7742a66ee402a81a167ec4"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPrfNCorrect1 : forall (f : fol.Formula L) (A : fol.Formulas L) (p : Prf L A (fol.notH L f)), (forall g : fol.Formula L, In g A -> mem _ U g) -> SysPrf T (substituteFormula LNN (substituteFormula LNN codeSysPrfNot 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacStartTheoremProof",
            "49abb2d95afc91d564d1f3af03c1a1e33b0877f6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrfNot in |- *.",
            "VernacExtend",
            "c1d1ce7d3dca1a847c2ec1b45d3993185641de06"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 0).",
            "VernacExtend",
            "e2eccace7f04685f663aa1661442f4e32e0f3052"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "434d8ed8f6031b6b1ce35b469d35eda1c4a7383b"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 1).",
            "VernacExtend",
            "94581c882cf63ea0911c6812e5974fca1625113f"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
            "VernacExtend",
            "ab66678cc4ccba4eb414aac45a71df21bef29b8b"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply existI with (natToTerm (codeFormula L codeF codeR (fol.notH L f))).",
            "VernacExtend",
            "d68ccbc280428b47fa303f364944fccf3f3ba4b7"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply andI.",
            "VernacExtend",
            "f9d3279a8b72d3210f5050fba9800fa4bb631a97"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacExtend",
            "b7f8317245d67e6a2b26bfad65416efed81fa5e7"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "apply TextendsNN.",
            "VernacExtend",
            "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "6af9d63b571e5b80b716fbd1c64c917205ae60b0"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H0).",
            "VernacExtend",
            "91160ceccc9b6c6cb7f614a6d93c06451477fda8"
        ],
        [
            "apply (In_list_remove2 _ _ _ _ _ H1).",
            "VernacExtend",
            "f256668aa75339e9d25f41cc90d4024f190a6cf9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in H1.",
            "VernacExtend",
            "8e8db7ad05fc7a69fb83eaedd7fb1e86ee74784d"
        ],
        [
            "decompose sum H1.",
            "VernacExtend",
            "c34643733e92dd411c20fcba08c172f2a090f9ca"
        ],
        [
            "discriminate H2.",
            "VernacExtend",
            "a34eb414a5dd143442dc6d481a442c7afbcf7604"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacExtend",
            "9950e1afbed2e2dc7d49fa31bd484b19d7703bc4"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "elim (le_not_lt 2 1).",
            "VernacExtend",
            "6d396716531fa19356e88ddba69d667df96bfdc6"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "eapply lt_n_S.",
            "VernacExtend",
            "df51218c9e2cc291e6fbde1f720ea53519013ee0"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "apply codeSysPrfCorrect1.",
            "VernacExtend",
            "e6ebcfbd79188217abae47dd1e301d9387123bd4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "apply TextendsNN.",
            "VernacExtend",
            "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
        ],
        [
            "set (B := primRecFormula 1 (proj1_sig codeNotIsPR)) in *.",
            "VernacExtend",
            "23c7552dfe6f9754df7770c1f7e848db27698165"
        ],
        [
            "assert (rep : Representable NN 1 codeNot B).",
            "VernacExtend",
            "b0f278fb567a33974deb2511c785f80743a9a654"
        ],
        [
            "unfold B in |- *; apply primRecRepresentable.",
            "VernacExtend",
            "d9c38746c70a31c435436efa47818dca642347d9"
        ],
        [
            "apply impE with (substituteFormula LNN (substituteFormula LNN B 1 (natToTerm (codeFormula L codeF codeR f))) 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "d0cdb04a82af0b3cbb705cd9f8e4d09e1f85470d"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "165b30ba06e1d253816a52443d80ceceffcdca43"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In 0 (freeVarFormula LNN (substituteFormula LNN B 0 (var 2)))).",
            "VernacExtend",
            "3be857115a7a406c23b8d2da4454820aced80a9e"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H1).",
            "VernacExtend",
            "89fa6640b4e011099c2b2a9023c5875fe1c4549e"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H2).",
            "VernacExtend",
            "0045562f7319477d93b898857c8a037d9dcfc9a8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "induction H2 as [H2| H2].",
            "VernacExtend",
            "2237c6da2b81b951afe769bc727b63b267d6e7b3"
        ],
        [
            "discriminate H2.",
            "VernacExtend",
            "a34eb414a5dd143442dc6d481a442c7afbcf7604"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "23b2612b01e3b0d370e08e5c99193b2c73a2da53"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H0).",
            "VernacExtend",
            "91160ceccc9b6c6cb7f614a6d93c06451477fda8"
        ],
        [
            "elim (In_list_remove2 _ _ _ _ _ H1).",
            "VernacExtend",
            "1334ec6b5f697fc4408038e798820ca9bc708064"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim (closedNatToTerm _ _ H1).",
            "VernacExtend",
            "94e8e60fdff6f9ecd12fe5825f9f2a6d24a8ff90"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN B 1 (natToTerm (codeFormula L codeF codeR f))) 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "dc313c55c7d9e95923bdabd26f4f2a23a5207133"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "decompose sum H0.",
            "VernacExtend",
            "fceef6fa246d8c2af633f817b87ebf3884c8cd2b"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "assert (In 2 (freeVarFormula LNN (substituteFormula LNN B 1 (natToTerm (codeFormula L codeF codeR f))))).",
            "VernacExtend",
            "1d67e56379b32437071d478c395230be77103d8f"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "induction (freeVarSubFormula3 _ _ _ _ _ H1).",
            "VernacExtend",
            "89fa6640b4e011099c2b2a9023c5875fe1c4549e"
        ],
        [
            "induction rep as (H3, H4).",
            "VernacExtend",
            "b85d3408510507328f387e7e807cfeb51b3c0469"
        ],
        [
            "apply (le_not_lt 2 1).",
            "VernacExtend",
            "1e0bcb58b7ee1cf5be033157a3696eb00e62361d"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "eapply In_list_remove1.",
            "VernacExtend",
            "b6b28153aa75f2c6a57f8178f189dba7003cf48c"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "apply lt_n_S.",
            "VernacExtend",
            "3c5e09f79b5d536a7a60dd2965c3f0ec6c1930e5"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "apply (closedNatToTerm _ _ H2).",
            "VernacExtend",
            "348f7a4a45e8ebdb168d474e05dc1d51a7a13d5a"
        ],
        [
            "induction rep as (H0, H1).",
            "VernacExtend",
            "1a876c5d359e2e3a4e59d026f50778ec7a475cbb"
        ],
        [
            "unfold RepresentableHelp in H1.",
            "VernacExtend",
            "25094f7e994fd5d6392e81f0afe33388375f9dff"
        ],
        [
            "apply impE with (substituteFormula LNN (equal (var 0) (natToTerm (codeNot (codeFormula L codeF codeR f)))) 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "fc071c01d030b17aaf579a167c432172c3a0bb86"
        ],
        [
            "apply iffE2.",
            "VernacExtend",
            "634f5292bea916e4459588d212267ab3a9b42941"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite (codeNotCorrect L codeF codeR).",
            "VernacExtend",
            "4c08e7207ff139406d2451c48211592b2d4de4bb"
        ],
        [
            "apply eqRefl.",
            "VernacExtend",
            "3ad8e37f8390813c8bd02eb3ffc8248edee78d95"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPrfNCorrect2 : forall (f : fol.Formula L) (A : fol.Formulas L), (exists g : fol.Formula L, In g A /\\ ~ mem _ U g) -> forall p : Prf L A (fol.notH L f), SysPrf T (notH (substituteFormula LNN (substituteFormula LNN codeSysPrfNot 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
            "VernacStartTheoremProof",
            "8342ba3996c25be1d747ef61fc56762cce295bb0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrfNot in |- *.",
            "VernacExtend",
            "c1d1ce7d3dca1a847c2ec1b45d3993185641de06"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 0).",
            "VernacExtend",
            "e2eccace7f04685f663aa1661442f4e32e0f3052"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "434d8ed8f6031b6b1ce35b469d35eda1c4a7383b"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 1).",
            "VernacExtend",
            "94581c882cf63ea0911c6812e5974fca1625113f"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
            "VernacExtend",
            "ab66678cc4ccba4eb414aac45a71df21bef29b8b"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply nExist.",
            "VernacExtend",
            "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
        ],
        [
            "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
            "VernacExtend",
            "5fe6b3dd1d5c81ecc97743a0371b8006c803c8f2"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "apply TextendsNN.",
            "VernacExtend",
            "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply forallI.",
            "VernacExtend",
            "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H0 as (x, H0); induction H0 as (H0, H1).",
            "VernacExtend",
            "e83b9e0468f1c35552c4edbd772aebe808ae31dc"
        ],
        [
            "induction H1 as [x H1| x H1].",
            "VernacExtend",
            "b226a433c1754fdc547ba461329bfcb918668f31"
        ],
        [
            "apply (closedNN 2).",
            "VernacExtend",
            "d419eaf6e5900c375d6fa6657bd8d9f736389795"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction H1.",
            "VernacExtend",
            "2e7754b8626e84404f5bc663332beef2a7c01b81"
        ],
        [
            "SimplFreeVar.",
            "VernacExtend",
            "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
        ],
        [
            "elim (le_not_lt 2 1).",
            "VernacExtend",
            "6d396716531fa19356e88ddba69d667df96bfdc6"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply nAnd.",
            "VernacExtend",
            "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
        ],
        [
            "apply orSym.",
            "VernacExtend",
            "d3403cc289defa346f97c6ec641c9202fe407752"
        ],
        [
            "unfold orH, fol.orH in |- *.",
            "VernacExtend",
            "df9e284d2941a26a2515a640a891b231d82600ae"
        ],
        [
            "apply impTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 1 (natToTerm (codeFormula L codeF codeR f))) 0 (var 2)).",
            "VernacExtend",
            "889ba34aad53536f25538253247a37aa5adf26e1"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply impTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (var 0)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacExtend",
            "26f725e5de8428ca7687c7f0bb923f99bc922fc4"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply nnE.",
            "VernacExtend",
            "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacExtend",
            "5f0456b94231206cc7fc4c20644c542c57e6a6b4"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))).",
            "VernacExtend",
            "afda3af60e21b1ba2f91a3a1fe689aab08e73c5e"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "set (B := primRecFormula 1 (proj1_sig codeNotIsPR)) in *.",
            "VernacExtend",
            "23c7552dfe6f9754df7770c1f7e848db27698165"
        ],
        [
            "assert (rep : Representable NN 1 codeNot B).",
            "VernacExtend",
            "b0f278fb567a33974deb2511c785f80743a9a654"
        ],
        [
            "unfold B in |- *; apply primRecRepresentable.",
            "VernacExtend",
            "d9c38746c70a31c435436efa47818dca642347d9"
        ],
        [
            "induction rep as (H0, H1).",
            "VernacExtend",
            "1a876c5d359e2e3a4e59d026f50778ec7a475cbb"
        ],
        [
            "unfold RepresentableHelp in H1.",
            "VernacExtend",
            "25094f7e994fd5d6392e81f0afe33388375f9dff"
        ],
        [
            "apply impTrans with (substituteFormula LNN (equal (var 0) (natToTerm (codeNot (codeFormula L codeF codeR f)))) 0 (var 2)).",
            "VernacExtend",
            "4ac70edd987f4e9f9e078a9bfbf0a44433d1f9d8"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite (codeNotCorrect L) with (a := f).",
            "VernacExtend",
            "d0a73f142660bc872297c7bf79356f0704d73795"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "rewrite <- (subFormulaId LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))) 2) .",
            "VernacExtend",
            "42f838a4f30aeb5faae5be965123a76548c4c1ce"
        ],
        [
            "apply impE with (substituteFormula LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "4f01314ead72fb7f9dc8d47a9acbea4fea6bd699"
        ],
        [
            "eapply (subWithEquals LNN).",
            "VernacExtend",
            "e3b463498cff13201bf05baf1314b491f15afb4c"
        ],
        [
            "apply eqSym.",
            "VernacExtend",
            "c72146c5c38717d561dda616c25a51523114224c"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
            "VernacExtend",
            "5fe6b3dd1d5c81ecc97743a0371b8006c803c8f2"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "6af9d63b571e5b80b716fbd1c64c917205ae60b0"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
            "VernacExtend",
            "9950e1afbed2e2dc7d49fa31bd484b19d7703bc4"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "elim (le_not_lt 2 1).",
            "VernacExtend",
            "6d396716531fa19356e88ddba69d667df96bfdc6"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply codeSysPrfCorrect2.",
            "VernacExtend",
            "29edced64027829fb6037def12c9509b78a9bbf1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSysPrfNCorrect3 : forall (f : fol.Formula L) (n : nat), (forall (A : fol.Formulas L) (p : Prf L A (fol.notH L f)), n <> codePrf L codeF codeR A (fol.notH L f) p) -> SysPrf T (notH (substituteFormula LNN (substituteFormula LNN codeSysPrfNot 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))).",
            "VernacStartTheoremProof",
            "c19818c7bd6931d846c653da61526f72c3641254"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSysPrfNot in |- *.",
            "VernacExtend",
            "c1d1ce7d3dca1a847c2ec1b45d3993185641de06"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 0).",
            "VernacExtend",
            "e2eccace7f04685f663aa1661442f4e32e0f3052"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
            "VernacExtend",
            "434d8ed8f6031b6b1ce35b469d35eda1c4a7383b"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "rewrite (subFormulaExist LNN).",
            "VernacExtend",
            "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
        ],
        [
            "induction (eq_nat_dec 2 1).",
            "VernacExtend",
            "94581c882cf63ea0911c6812e5974fca1625113f"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm n))).",
            "VernacExtend",
            "115d908c90d832deaf9642f6bf385ee40b0c6c92"
        ],
        [
            "elim (closedNatToTerm _ _ a).",
            "VernacExtend",
            "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
        ],
        [
            "clear b b0.",
            "VernacExtend",
            "8fa1a1df003201859709b5a9b725350e0da9d098"
        ],
        [
            "apply nExist.",
            "VernacExtend",
            "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
        ],
        [
            "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n))).",
            "VernacExtend",
            "2087c22d033e389067183e3fe0d5b0b8c77fd541"
        ],
        [
            "apply sysExtend with NN.",
            "VernacExtend",
            "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
        ],
        [
            "apply TextendsNN.",
            "VernacExtend",
            "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply forallI.",
            "VernacExtend",
            "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "induction H0 as (x, H0); induction H0 as (H0, H1).",
            "VernacExtend",
            "e83b9e0468f1c35552c4edbd772aebe808ae31dc"
        ],
        [
            "induction H1 as [x H1| x H1].",
            "VernacExtend",
            "b226a433c1754fdc547ba461329bfcb918668f31"
        ],
        [
            "apply (closedNN 2).",
            "VernacExtend",
            "d419eaf6e5900c375d6fa6657bd8d9f736389795"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction H1.",
            "VernacExtend",
            "2e7754b8626e84404f5bc663332beef2a7c01b81"
        ],
        [
            "fold notH in H0.",
            "VernacExtend",
            "c532cb21a97e234d8ff19a3bf2651e4687fae283"
        ],
        [
            "SimplFreeVar.",
            "VernacExtend",
            "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
        ],
        [
            "elim (le_not_lt 2 1).",
            "VernacExtend",
            "6d396716531fa19356e88ddba69d667df96bfdc6"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "repeat rewrite (subFormulaAnd LNN).",
            "VernacExtend",
            "fae03378578ea3fc0b49d921f494f08bed89ff02"
        ],
        [
            "apply nAnd.",
            "VernacExtend",
            "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
        ],
        [
            "apply orSym.",
            "VernacExtend",
            "d3403cc289defa346f97c6ec641c9202fe407752"
        ],
        [
            "unfold orH, fol.orH in |- *.",
            "VernacExtend",
            "df9e284d2941a26a2515a640a891b231d82600ae"
        ],
        [
            "apply impTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 1 (natToTerm (codeFormula L codeF codeR f))) 0 (var 2)).",
            "VernacExtend",
            "889ba34aad53536f25538253247a37aa5adf26e1"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply impTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (var 0)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
            "VernacExtend",
            "ca08fb187b009221e2b0df3caf99893783fe474f"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "apply nnE.",
            "VernacExtend",
            "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
            "VernacExtend",
            "3af00bee1281233ebf858726273a147ac6ae0364"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))).",
            "VernacExtend",
            "afda3af60e21b1ba2f91a3a1fe689aab08e73c5e"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate H1.",
            "VernacExtend",
            "1a1404b79897a18af2dbe03fbbe51add9f287650"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "set (B := primRecFormula 1 (proj1_sig codeNotIsPR)) in *.",
            "VernacExtend",
            "23c7552dfe6f9754df7770c1f7e848db27698165"
        ],
        [
            "assert (rep : Representable NN 1 codeNot B).",
            "VernacExtend",
            "b0f278fb567a33974deb2511c785f80743a9a654"
        ],
        [
            "unfold B in |- *; apply primRecRepresentable.",
            "VernacExtend",
            "d9c38746c70a31c435436efa47818dca642347d9"
        ],
        [
            "induction rep as (H0, H1).",
            "VernacExtend",
            "1a876c5d359e2e3a4e59d026f50778ec7a475cbb"
        ],
        [
            "unfold RepresentableHelp in H1.",
            "VernacExtend",
            "25094f7e994fd5d6392e81f0afe33388375f9dff"
        ],
        [
            "apply impTrans with (substituteFormula LNN (equal (var 0) (natToTerm (codeNot (codeFormula L codeF codeR f)))) 0 (var 2)).",
            "VernacExtend",
            "4ac70edd987f4e9f9e078a9bfbf0a44433d1f9d8"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite (subFormulaEqual LNN).",
            "VernacExtend",
            "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
        ],
        [
            "rewrite (subTermVar1 LNN).",
            "VernacExtend",
            "b2b86df33753ed30319971e3138abb3bff007512"
        ],
        [
            "rewrite (subTermNil LNN).",
            "VernacExtend",
            "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
        ],
        [
            "rewrite (codeNotCorrect L) with (a := f).",
            "VernacExtend",
            "d0a73f142660bc872297c7bf79356f0704d73795"
        ],
        [
            "apply impI.",
            "VernacExtend",
            "60955e24356265eb0e9ef6255e08bbd113551585"
        ],
        [
            "rewrite <- (subFormulaId LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))) 2).",
            "VernacExtend",
            "b8e50a9fbeacdeb521c79978dc2b504a111704da"
        ],
        [
            "apply impE with (substituteFormula LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "619e51638682a08c585dd07bfd581e22efa2e23d"
        ],
        [
            "eapply (subWithEquals LNN).",
            "VernacExtend",
            "e3b463498cff13201bf05baf1314b491f15afb4c"
        ],
        [
            "apply eqSym.",
            "VernacExtend",
            "c72146c5c38717d561dda616c25a51523114224c"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "rewrite (subFormulaNot LNN).",
            "VernacExtend",
            "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
        ],
        [
            "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n))).",
            "VernacExtend",
            "2087c22d033e389067183e3fe0d5b0b8c77fd541"
        ],
        [
            "apply cp2.",
            "VernacExtend",
            "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
        ],
        [
            "apply sysWeaken.",
            "VernacExtend",
            "6184cd0fa2a41223f187033e88e17cf0d86b61db"
        ],
        [
            "apply iffE1.",
            "VernacExtend",
            "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 1 (natToTerm n)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
            "VernacExtend",
            "e680b92a08ad1d0457eee7632d23a02a83cda838"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaNil LNN).",
            "VernacExtend",
            "a823725e3a04363dcf85ec03dee3a4da7bc94839"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n)).",
            "VernacExtend",
            "b5e79c7eb1dc78a2a36c94014a77994eeebccdf7"
        ],
        [
            "apply (subFormulaExch LNN).",
            "VernacExtend",
            "904e93d6fb382a88b8097503d4facb454d8453bc"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
            "VernacExtend",
            "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
        ],
        [
            "apply (subFormulaTrans LNN).",
            "VernacExtend",
            "2273a7945ea637ee236fdcb6e093b07bf87509d6"
        ],
        [
            "unfold not in |- *; intros; SimplFreeVar.",
            "VernacExtend",
            "ae970221816d0247c05a21a90fde9452c65d1869"
        ],
        [
            "elim (le_not_lt 2 1).",
            "VernacExtend",
            "6d396716531fa19356e88ddba69d667df96bfdc6"
        ],
        [
            "apply freeVarCodeSysPrf.",
            "VernacExtend",
            "311cda8136fb2bc46f39931e2551971d95645724"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "apply Axm; right; constructor.",
            "VernacExtend",
            "fafb5c153ffd727407f5c87d3444711b114dac59"
        ],
        [
            "apply closedNatToTerm.",
            "VernacExtend",
            "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
        ],
        [
            "fold notH in |- *.",
            "VernacExtend",
            "a0e15c80daabb43bf4c8a790c7133e043c7b9c37"
        ],
        [
            "apply codeSysPrfCorrect3.",
            "VernacExtend",
            "309f35915f9d62a88f521addba92c5b42de43a91"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LNN.",
            "VernacEndSegment",
            "8f4c595414f745922a784237c74a2facb8081112"
        ],
        [
            "End code_SysPrf.",
            "VernacEndSegment",
            "b7ac31ea3c2c5f6b88848e1ff6f0e90b4a769cfb"
        ]
    ],
    "proofs": [
        {
            "name": "freeVarCodeSysPrf",
            "line_nb": 928,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSysPrf in H.",
                        "VernacExtend",
                        "97365544e1ec59660c25c24ba8f273611c35694e"
                    ]
                },
                {
                    "command": [
                        "set (nv := newVar (2 :: 1 :: 0 :: v0 :: nil)) in *.",
                        "VernacExtend",
                        "e47db259c7fa577bbd043dc9fd821bf68f3b1e0e"
                    ]
                },
                {
                    "command": [
                        "unfold existH, andH, forallH, impH, orH in H.",
                        "VernacExtend",
                        "6fe89f9fa92065a41feb4d7837a0ecd8cc234dde"
                    ]
                },
                {
                    "command": [
                        "repeat match goal with | H1:(?X1 = ?X2),H2:(?X1 <> ?X2) |- _ => elim H2; apply H1 | H1:(?X1 = ?X2),H2:(?X2 <> ?X1) |- _ => elim H2; symmetry in |- *; apply H1 | H:(In ?X3 (freeVarFormula LNN (fol.existH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.forallH LNN ?X1 ?X2))) |- _ => assert (In X3 (list_remove nat eq_nat_dec X1 (freeVarFormula LNN X2))); [ apply H | clear H ] | H:(In ?X3 (list_remove nat eq_nat_dec ?X1 (freeVarFormula LNN ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X2)); [ eapply In_list_remove1; apply H | assert (X3 <> X1); [ eapply In_list_remove2; apply H | clear H ] ] | H:(In ?X3 (freeVarFormula LNN (fol.andH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.orH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.impH LNN ?X1 ?X2))) |- _ => assert (In X3 (freeVarFormula LNN X1 ++ freeVarFormula LNN X2)); [ apply H | clear H ] | H:(In ?X3 (freeVarFormula LNN (fol.notH LNN ?X1))) |- _ => assert (In X3 (freeVarFormula LNN X1)); [ apply H | clear H ] | H:(In _ (_ ++ _)) |- _ => induction (in_app_or _ _ _ H); clear H | H:(In _ (freeVarFormula LNN (substituteFormula LNN ?X1 ?X2 ?X3))) |- _ => induction (freeVarSubFormula3 _ _ _ _ _ H); clear H | H:(In _ (freeVarFormula LNN (LT ?X1 ?X2))) |- _ => rewrite freeVarLT in H | H:(In _ (freeVarTerm LNN (natToTerm _))) |- _ => elim (closedNatToTerm _ _ H) | H:(In _ (freeVarTerm LNN Zero)) |- _ => elim H | H:(In _ (freeVarTerm LNN (Succ _))) |- _ => rewrite freeVarSucc in H | H:(In _ (freeVarTerm LNN (var _))) |- _ => simpl in H; decompose sum H; clear H | H:(In _ (freeVarTerm LNN (fol.var LNN _))) |- _ => simpl in H; decompose sum H; clear H end.",
                        "VernacExtend",
                        "917ed46c376615752c3b8875221c4a71e965ed51"
                    ]
                },
                {
                    "command": [
                        "assert (Representable NN 2 (checkPrf L codeF codeR codeArityF codeArityR) (primRecFormula 2 (proj1_sig (checkPrfIsPR L codeF codeR codeArityF codeArityR codeArityFIsPR codeArityRIsPR)))).",
                        "VernacExtend",
                        "8ac536ff04180ec015c17b750ffe6547021cb9b0"
                    ]
                },
                {
                    "command": [
                        "apply primRecRepresentable.",
                        "VernacExtend",
                        "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
                    ]
                },
                {
                    "command": [
                        "induction H0 as (H0, H4).",
                        "VernacExtend",
                        "cafc51c46729b9b2ef7742a66ee402a81a167ec4"
                    ]
                },
                {
                    "command": [
                        "clear H4.",
                        "VernacExtend",
                        "b63698fbba7b38f68086944744e776a2fb5bc886"
                    ]
                },
                {
                    "command": [
                        "induction (le_lt_or_eq _ _ (H0 _ H)).",
                        "VernacExtend",
                        "99923a6f13607b3683387a9024cade3fb931a4c1"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n.",
                        "VernacExtend",
                        "8f9d88b4dde1dc61a3f5f18238f0544e5d303ccc"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "elim H2; assumption.",
                        "VernacExtend",
                        "28f55f650b48d1d7b58713bd8dac64e34c78c188"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "assert (Representable NN 2 codeIn (primRecFormula 2 (proj1_sig codeInIsPR))).",
                        "VernacExtend",
                        "b257dae81520af6add0ac1f60f817ad5c80bbc63"
                    ]
                },
                {
                    "command": [
                        "apply primRecRepresentable.",
                        "VernacExtend",
                        "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
                    ]
                },
                {
                    "command": [
                        "induction H0 as (H0, H6).",
                        "VernacExtend",
                        "2d6aed06a6ac5cd3f741f729196377fcad385f73"
                    ]
                },
                {
                    "command": [
                        "induction (le_lt_or_eq _ _ (H0 _ H)).",
                        "VernacExtend",
                        "99923a6f13607b3683387a9024cade3fb931a4c1"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n.",
                        "VernacExtend",
                        "8f9d88b4dde1dc61a3f5f18238f0544e5d303ccc"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "elim H5; assumption.",
                        "VernacExtend",
                        "3977e336635137e3cc8ff653076f07bb2af7e538"
                    ]
                },
                {
                    "command": [
                        "elim H3.",
                        "VernacExtend",
                        "70fb843285201ec5a9b4d417b6f0002c41dde4c6"
                    ]
                },
                {
                    "command": [
                        "apply freeVarfU.",
                        "VernacExtend",
                        "f62a1608423178c926f1ab3d27ed14547b2d7aac"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSysPfCorrect",
            "line_nb": 971,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H as (x, H).",
                        "VernacExtend",
                        "d232074075f4e7274913cc4565e332b8e4fccd19"
                    ]
                },
                {
                    "command": [
                        "induction H as (x0, H).",
                        "VernacExtend",
                        "e46a6f07411e55ef5ba483e7d28382fdafbb42ea"
                    ]
                },
                {
                    "command": [
                        "unfold codeSysPf in |- *.",
                        "VernacExtend",
                        "614642cdad371c931d13019aef4bb9060e37f26a"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaExist LNN).",
                        "VernacExtend",
                        "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec 1 0).",
                        "VernacExtend",
                        "7b4fb4ca71c63df5b0d3aa5a66a5254d0504ed7a"
                    ]
                },
                {
                    "command": [
                        "discriminate a.",
                        "VernacExtend",
                        "954a0001c22cf537896d0b1ad7e9b20fa8968146"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec 1 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
                        "VernacExtend",
                        "ee062b7b94189d0fe57e34c761dedecfe51f001a"
                    ]
                },
                {
                    "command": [
                        "elim (closedNatToTerm _ _ a).",
                        "VernacExtend",
                        "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
                    ]
                },
                {
                    "command": [
                        "apply existI with (natToTerm (codePrf L codeF codeR _ _ x0)).",
                        "VernacExtend",
                        "a22a035d595afb298d98a2e0589196cea7e16d52"
                    ]
                },
                {
                    "command": [
                        "apply codeSysPrfCorrect1.",
                        "VernacExtend",
                        "e6ebcfbd79188217abae47dd1e301d9387123bd4"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "freeVarCodeSysPrfN",
            "line_nb": 986,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSysPrfNot in H.",
                        "VernacExtend",
                        "75f1039ac529ddbf5632028dd14354a828e67adf"
                    ]
                },
                {
                    "command": [
                        "SimplFreeVar.",
                        "VernacExtend",
                        "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
                    ]
                },
                {
                    "command": [
                        "apply freeVarCodeSysPrf.",
                        "VernacExtend",
                        "311cda8136fb2bc46f39931e2551971d95645724"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "assert (Representable NN 1 codeNot (primRecFormula 1 (proj1_sig codeNotIsPR))).",
                        "VernacExtend",
                        "125f103e267383f61dca97303393e21e91bd9ea5"
                    ]
                },
                {
                    "command": [
                        "apply primRecRepresentable.",
                        "VernacExtend",
                        "fc48023cc2308cac60b1697f1bd6a17a5a4d9954"
                    ]
                },
                {
                    "command": [
                        "induction H0 as (H0, H4).",
                        "VernacExtend",
                        "cafc51c46729b9b2ef7742a66ee402a81a167ec4"
                    ]
                },
                {
                    "command": [
                        "clear H4.",
                        "VernacExtend",
                        "b63698fbba7b38f68086944744e776a2fb5bc886"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSysPrfNCorrect2",
            "line_nb": 1113,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSysPrfNot in |- *.",
                        "VernacExtend",
                        "c1d1ce7d3dca1a847c2ec1b45d3993185641de06"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaExist LNN).",
                        "VernacExtend",
                        "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec 2 0).",
                        "VernacExtend",
                        "e2eccace7f04685f663aa1661442f4e32e0f3052"
                    ]
                },
                {
                    "command": [
                        "discriminate a.",
                        "VernacExtend",
                        "954a0001c22cf537896d0b1ad7e9b20fa8968146"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
                        "VernacExtend",
                        "434d8ed8f6031b6b1ce35b469d35eda1c4a7383b"
                    ]
                },
                {
                    "command": [
                        "elim (closedNatToTerm _ _ a).",
                        "VernacExtend",
                        "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
                    ]
                },
                {
                    "command": [
                        "clear b b0.",
                        "VernacExtend",
                        "8fa1a1df003201859709b5a9b725350e0da9d098"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaExist LNN).",
                        "VernacExtend",
                        "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec 2 1).",
                        "VernacExtend",
                        "94581c882cf63ea0911c6812e5974fca1625113f"
                    ]
                },
                {
                    "command": [
                        "discriminate a.",
                        "VernacExtend",
                        "954a0001c22cf537896d0b1ad7e9b20fa8968146"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
                        "VernacExtend",
                        "ab66678cc4ccba4eb414aac45a71df21bef29b8b"
                    ]
                },
                {
                    "command": [
                        "elim (closedNatToTerm _ _ a).",
                        "VernacExtend",
                        "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
                    ]
                },
                {
                    "command": [
                        "clear b b0.",
                        "VernacExtend",
                        "8fa1a1df003201859709b5a9b725350e0da9d098"
                    ]
                },
                {
                    "command": [
                        "apply nExist.",
                        "VernacExtend",
                        "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
                    ]
                },
                {
                    "command": [
                        "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
                        "VernacExtend",
                        "5fe6b3dd1d5c81ecc97743a0371b8006c803c8f2"
                    ]
                },
                {
                    "command": [
                        "apply sysExtend with NN.",
                        "VernacExtend",
                        "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
                    ]
                },
                {
                    "command": [
                        "apply TextendsNN.",
                        "VernacExtend",
                        "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "apply forallI.",
                        "VernacExtend",
                        "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros.",
                        "VernacExtend",
                        "a373869c1c99731a8797825160ba5f5ab7a057a9"
                    ]
                },
                {
                    "command": [
                        "induction H0 as (x, H0); induction H0 as (H0, H1).",
                        "VernacExtend",
                        "e83b9e0468f1c35552c4edbd772aebe808ae31dc"
                    ]
                },
                {
                    "command": [
                        "induction H1 as [x H1| x H1].",
                        "VernacExtend",
                        "b226a433c1754fdc547ba461329bfcb918668f31"
                    ]
                },
                {
                    "command": [
                        "apply (closedNN 2).",
                        "VernacExtend",
                        "d419eaf6e5900c375d6fa6657bd8d9f736389795"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "induction H1.",
                        "VernacExtend",
                        "2e7754b8626e84404f5bc663332beef2a7c01b81"
                    ]
                },
                {
                    "command": [
                        "SimplFreeVar.",
                        "VernacExtend",
                        "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
                    ]
                },
                {
                    "command": [
                        "elim (le_not_lt 2 1).",
                        "VernacExtend",
                        "6d396716531fa19356e88ddba69d667df96bfdc6"
                    ]
                },
                {
                    "command": [
                        "apply freeVarCodeSysPrf.",
                        "VernacExtend",
                        "311cda8136fb2bc46f39931e2551971d95645724"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sn.",
                        "VernacExtend",
                        "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (subFormulaAnd LNN).",
                        "VernacExtend",
                        "fae03378578ea3fc0b49d921f494f08bed89ff02"
                    ]
                },
                {
                    "command": [
                        "apply nAnd.",
                        "VernacExtend",
                        "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
                    ]
                },
                {
                    "command": [
                        "apply orSym.",
                        "VernacExtend",
                        "d3403cc289defa346f97c6ec641c9202fe407752"
                    ]
                },
                {
                    "command": [
                        "unfold orH, fol.orH in |- *.",
                        "VernacExtend",
                        "df9e284d2941a26a2515a640a891b231d82600ae"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 1 (natToTerm (codeFormula L codeF codeR f))) 0 (var 2)).",
                        "VernacExtend",
                        "889ba34aad53536f25538253247a37aa5adf26e1"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (var 0)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
                        "VernacExtend",
                        "26f725e5de8428ca7687c7f0bb923f99bc922fc4"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "apply nnE.",
                        "VernacExtend",
                        "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
                        "VernacExtend",
                        "5f0456b94231206cc7fc4c20644c542c57e6a6b4"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaTrans LNN).",
                        "VernacExtend",
                        "2273a7945ea637ee236fdcb6e093b07bf87509d6"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate H1.",
                        "VernacExtend",
                        "1a1404b79897a18af2dbe03fbbe51add9f287650"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))).",
                        "VernacExtend",
                        "afda3af60e21b1ba2f91a3a1fe689aab08e73c5e"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaNil LNN).",
                        "VernacExtend",
                        "a823725e3a04363dcf85ec03dee3a4da7bc94839"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaExch LNN).",
                        "VernacExtend",
                        "904e93d6fb382a88b8097503d4facb454d8453bc"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate H1.",
                        "VernacExtend",
                        "1a1404b79897a18af2dbe03fbbe51add9f287650"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "set (B := primRecFormula 1 (proj1_sig codeNotIsPR)) in *.",
                        "VernacExtend",
                        "23c7552dfe6f9754df7770c1f7e848db27698165"
                    ]
                },
                {
                    "command": [
                        "assert (rep : Representable NN 1 codeNot B).",
                        "VernacExtend",
                        "b0f278fb567a33974deb2511c785f80743a9a654"
                    ]
                },
                {
                    "command": [
                        "unfold B in |- *; apply primRecRepresentable.",
                        "VernacExtend",
                        "d9c38746c70a31c435436efa47818dca642347d9"
                    ]
                },
                {
                    "command": [
                        "induction rep as (H0, H1).",
                        "VernacExtend",
                        "1a876c5d359e2e3a4e59d026f50778ec7a475cbb"
                    ]
                },
                {
                    "command": [
                        "unfold RepresentableHelp in H1.",
                        "VernacExtend",
                        "25094f7e994fd5d6392e81f0afe33388375f9dff"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (equal (var 0) (natToTerm (codeNot (codeFormula L codeF codeR f)))) 0 (var 2)).",
                        "VernacExtend",
                        "4ac70edd987f4e9f9e078a9bfbf0a44433d1f9d8"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaEqual LNN).",
                        "VernacExtend",
                        "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
                    ]
                },
                {
                    "command": [
                        "rewrite (subTermVar1 LNN).",
                        "VernacExtend",
                        "b2b86df33753ed30319971e3138abb3bff007512"
                    ]
                },
                {
                    "command": [
                        "rewrite (subTermNil LNN).",
                        "VernacExtend",
                        "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
                    ]
                },
                {
                    "command": [
                        "rewrite (codeNotCorrect L) with (a := f).",
                        "VernacExtend",
                        "d0a73f142660bc872297c7bf79356f0704d73795"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (subFormulaId LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))) 2) .",
                        "VernacExtend",
                        "42f838a4f30aeb5faae5be965123a76548c4c1ce"
                    ]
                },
                {
                    "command": [
                        "apply impE with (substituteFormula LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
                        "VernacExtend",
                        "4f01314ead72fb7f9dc8d47a9acbea4fea6bd699"
                    ]
                },
                {
                    "command": [
                        "eapply (subWithEquals LNN).",
                        "VernacExtend",
                        "e3b463498cff13201bf05baf1314b491f15afb4c"
                    ]
                },
                {
                    "command": [
                        "apply eqSym.",
                        "VernacExtend",
                        "c72146c5c38717d561dda616c25a51523114224c"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaNot LNN).",
                        "VernacExtend",
                        "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
                    ]
                },
                {
                    "command": [
                        "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p)))).",
                        "VernacExtend",
                        "5fe6b3dd1d5c81ecc97743a0371b8006c803c8f2"
                    ]
                },
                {
                    "command": [
                        "apply cp2.",
                        "VernacExtend",
                        "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
                        "VernacExtend",
                        "6af9d63b571e5b80b716fbd1c64c917205ae60b0"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaNil LNN).",
                        "VernacExtend",
                        "a823725e3a04363dcf85ec03dee3a4da7bc94839"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm (codePrf L codeF codeR A (fol.notH L f) p))).",
                        "VernacExtend",
                        "9950e1afbed2e2dc7d49fa31bd484b19d7703bc4"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaExch LNN).",
                        "VernacExtend",
                        "904e93d6fb382a88b8097503d4facb454d8453bc"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaTrans LNN).",
                        "VernacExtend",
                        "2273a7945ea637ee236fdcb6e093b07bf87509d6"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "elim (le_not_lt 2 1).",
                        "VernacExtend",
                        "6d396716531fa19356e88ddba69d667df96bfdc6"
                    ]
                },
                {
                    "command": [
                        "apply freeVarCodeSysPrf.",
                        "VernacExtend",
                        "311cda8136fb2bc46f39931e2551971d95645724"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sn.",
                        "VernacExtend",
                        "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "apply codeSysPrfCorrect2.",
                        "VernacExtend",
                        "29edced64027829fb6037def12c9509b78a9bbf1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSysPrfNCorrect3",
            "line_nb": 1218,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSysPrfNot in |- *.",
                        "VernacExtend",
                        "c1d1ce7d3dca1a847c2ec1b45d3993185641de06"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaExist LNN).",
                        "VernacExtend",
                        "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec 2 0).",
                        "VernacExtend",
                        "e2eccace7f04685f663aa1661442f4e32e0f3052"
                    ]
                },
                {
                    "command": [
                        "discriminate a.",
                        "VernacExtend",
                        "954a0001c22cf537896d0b1ad7e9b20fa8968146"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm (codeFormula L codeF codeR f)))).",
                        "VernacExtend",
                        "434d8ed8f6031b6b1ce35b469d35eda1c4a7383b"
                    ]
                },
                {
                    "command": [
                        "elim (closedNatToTerm _ _ a).",
                        "VernacExtend",
                        "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
                    ]
                },
                {
                    "command": [
                        "clear b b0.",
                        "VernacExtend",
                        "8fa1a1df003201859709b5a9b725350e0da9d098"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaExist LNN).",
                        "VernacExtend",
                        "2b6ab404f97182ff4f2eb7ea75e713a967f3c390"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec 2 1).",
                        "VernacExtend",
                        "94581c882cf63ea0911c6812e5974fca1625113f"
                    ]
                },
                {
                    "command": [
                        "discriminate a.",
                        "VernacExtend",
                        "954a0001c22cf537896d0b1ad7e9b20fa8968146"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec 2 (freeVarTerm LNN (natToTerm n))).",
                        "VernacExtend",
                        "115d908c90d832deaf9642f6bf385ee40b0c6c92"
                    ]
                },
                {
                    "command": [
                        "elim (closedNatToTerm _ _ a).",
                        "VernacExtend",
                        "4d6e0e1e36db0a4fb3fc3c3159f41a50d5380617"
                    ]
                },
                {
                    "command": [
                        "clear b b0.",
                        "VernacExtend",
                        "8fa1a1df003201859709b5a9b725350e0da9d098"
                    ]
                },
                {
                    "command": [
                        "apply nExist.",
                        "VernacExtend",
                        "f1a9cd4b5182bb75e60395e8ed455cb9152c854f"
                    ]
                },
                {
                    "command": [
                        "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n))).",
                        "VernacExtend",
                        "2087c22d033e389067183e3fe0d5b0b8c77fd541"
                    ]
                },
                {
                    "command": [
                        "apply sysExtend with NN.",
                        "VernacExtend",
                        "d0475b7a4e669aadc2fe697e74cacebd51694bb0"
                    ]
                },
                {
                    "command": [
                        "apply TextendsNN.",
                        "VernacExtend",
                        "81a3ba2c5b615b157d1872f8c79969c79d59d8ba"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "apply forallI.",
                        "VernacExtend",
                        "1ef9f6cd50c84d0027a28c8ee533843601787f0a"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros.",
                        "VernacExtend",
                        "a373869c1c99731a8797825160ba5f5ab7a057a9"
                    ]
                },
                {
                    "command": [
                        "induction H0 as (x, H0); induction H0 as (H0, H1).",
                        "VernacExtend",
                        "e83b9e0468f1c35552c4edbd772aebe808ae31dc"
                    ]
                },
                {
                    "command": [
                        "induction H1 as [x H1| x H1].",
                        "VernacExtend",
                        "b226a433c1754fdc547ba461329bfcb918668f31"
                    ]
                },
                {
                    "command": [
                        "apply (closedNN 2).",
                        "VernacExtend",
                        "d419eaf6e5900c375d6fa6657bd8d9f736389795"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "induction H1.",
                        "VernacExtend",
                        "2e7754b8626e84404f5bc663332beef2a7c01b81"
                    ]
                },
                {
                    "command": [
                        "fold notH in H0.",
                        "VernacExtend",
                        "c532cb21a97e234d8ff19a3bf2651e4687fae283"
                    ]
                },
                {
                    "command": [
                        "SimplFreeVar.",
                        "VernacExtend",
                        "2c638d57ac9770a2d6be38a3c09907ee24fdb74b"
                    ]
                },
                {
                    "command": [
                        "elim (le_not_lt 2 1).",
                        "VernacExtend",
                        "6d396716531fa19356e88ddba69d667df96bfdc6"
                    ]
                },
                {
                    "command": [
                        "apply freeVarCodeSysPrf.",
                        "VernacExtend",
                        "311cda8136fb2bc46f39931e2551971d95645724"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sn.",
                        "VernacExtend",
                        "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (subFormulaAnd LNN).",
                        "VernacExtend",
                        "fae03378578ea3fc0b49d921f494f08bed89ff02"
                    ]
                },
                {
                    "command": [
                        "apply nAnd.",
                        "VernacExtend",
                        "9431135ebc238f961c6ab741b43bed8fbbdc4b36"
                    ]
                },
                {
                    "command": [
                        "apply orSym.",
                        "VernacExtend",
                        "d3403cc289defa346f97c6ec641c9202fe407752"
                    ]
                },
                {
                    "command": [
                        "unfold orH, fol.orH in |- *.",
                        "VernacExtend",
                        "df9e284d2941a26a2515a640a891b231d82600ae"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 1 (natToTerm (codeFormula L codeF codeR f))) 0 (var 2)).",
                        "VernacExtend",
                        "889ba34aad53536f25538253247a37aa5adf26e1"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (var 0)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
                        "VernacExtend",
                        "ca08fb187b009221e2b0df3caf99893783fe474f"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "apply nnE.",
                        "VernacExtend",
                        "ccdc7f0fec4ccf244bdd43dcbed7dd87f89ab32a"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n)).",
                        "VernacExtend",
                        "3af00bee1281233ebf858726273a147ac6ae0364"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaTrans LNN).",
                        "VernacExtend",
                        "2273a7945ea637ee236fdcb6e093b07bf87509d6"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate H1.",
                        "VernacExtend",
                        "1a1404b79897a18af2dbe03fbbe51add9f287650"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (primRecFormula 1 (proj1_sig codeNotIsPR)) 0 (var 2)) 1 (natToTerm (codeFormula L codeF codeR f))).",
                        "VernacExtend",
                        "afda3af60e21b1ba2f91a3a1fe689aab08e73c5e"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaNil LNN).",
                        "VernacExtend",
                        "a823725e3a04363dcf85ec03dee3a4da7bc94839"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaExch LNN).",
                        "VernacExtend",
                        "904e93d6fb382a88b8097503d4facb454d8453bc"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate H1.",
                        "VernacExtend",
                        "1a1404b79897a18af2dbe03fbbe51add9f287650"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "set (B := primRecFormula 1 (proj1_sig codeNotIsPR)) in *.",
                        "VernacExtend",
                        "23c7552dfe6f9754df7770c1f7e848db27698165"
                    ]
                },
                {
                    "command": [
                        "assert (rep : Representable NN 1 codeNot B).",
                        "VernacExtend",
                        "b0f278fb567a33974deb2511c785f80743a9a654"
                    ]
                },
                {
                    "command": [
                        "unfold B in |- *; apply primRecRepresentable.",
                        "VernacExtend",
                        "d9c38746c70a31c435436efa47818dca642347d9"
                    ]
                },
                {
                    "command": [
                        "induction rep as (H0, H1).",
                        "VernacExtend",
                        "1a876c5d359e2e3a4e59d026f50778ec7a475cbb"
                    ]
                },
                {
                    "command": [
                        "unfold RepresentableHelp in H1.",
                        "VernacExtend",
                        "25094f7e994fd5d6392e81f0afe33388375f9dff"
                    ]
                },
                {
                    "command": [
                        "apply impTrans with (substituteFormula LNN (equal (var 0) (natToTerm (codeNot (codeFormula L codeF codeR f)))) 0 (var 2)).",
                        "VernacExtend",
                        "4ac70edd987f4e9f9e078a9bfbf0a44433d1f9d8"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaEqual LNN).",
                        "VernacExtend",
                        "1bb69cd1ec83bd323b839bd6e1e8350bfa639395"
                    ]
                },
                {
                    "command": [
                        "rewrite (subTermVar1 LNN).",
                        "VernacExtend",
                        "b2b86df33753ed30319971e3138abb3bff007512"
                    ]
                },
                {
                    "command": [
                        "rewrite (subTermNil LNN).",
                        "VernacExtend",
                        "9cd10b12ed1955cf55a88e8a312e5a55a395842e"
                    ]
                },
                {
                    "command": [
                        "rewrite (codeNotCorrect L) with (a := f).",
                        "VernacExtend",
                        "d0a73f142660bc872297c7bf79356f0704d73795"
                    ]
                },
                {
                    "command": [
                        "apply impI.",
                        "VernacExtend",
                        "60955e24356265eb0e9ef6255e08bbd113551585"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (subFormulaId LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))) 2).",
                        "VernacExtend",
                        "b8e50a9fbeacdeb521c79978dc2b504a111704da"
                    ]
                },
                {
                    "command": [
                        "apply impE with (substituteFormula LNN (notH (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 0 (natToTerm (codeFormula L codeF codeR f))) 1 (natToTerm n))) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
                        "VernacExtend",
                        "619e51638682a08c585dd07bfd581e22efa2e23d"
                    ]
                },
                {
                    "command": [
                        "eapply (subWithEquals LNN).",
                        "VernacExtend",
                        "e3b463498cff13201bf05baf1314b491f15afb4c"
                    ]
                },
                {
                    "command": [
                        "apply eqSym.",
                        "VernacExtend",
                        "c72146c5c38717d561dda616c25a51523114224c"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "rewrite (subFormulaNot LNN).",
                        "VernacExtend",
                        "7aa7e0ad3a48b2b18d7f9c729ff42db9f1157485"
                    ]
                },
                {
                    "command": [
                        "apply impE with (fol.notH LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n))).",
                        "VernacExtend",
                        "2087c22d033e389067183e3fe0d5b0b8c77fd541"
                    ]
                },
                {
                    "command": [
                        "apply cp2.",
                        "VernacExtend",
                        "a93b092125c6dc1f67ff420ed2834f9c03e56fcb"
                    ]
                },
                {
                    "command": [
                        "apply sysWeaken.",
                        "VernacExtend",
                        "6184cd0fa2a41223f187033e88e17cf0d86b61db"
                    ]
                },
                {
                    "command": [
                        "apply iffE1.",
                        "VernacExtend",
                        "5ef2c5bdeaee57bc3d3bec2daa1270395936d0ee"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 1 (natToTerm n)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))).",
                        "VernacExtend",
                        "e680b92a08ad1d0457eee7632d23a02a83cda838"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaNil LNN).",
                        "VernacExtend",
                        "a823725e3a04363dcf85ec03dee3a4da7bc94839"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply iffTrans with (substituteFormula LNN (substituteFormula LNN (substituteFormula LNN codeSysPrf 0 (var 2)) 2 (natToTerm (codeFormula L codeF codeR (fol.notH L f)))) 1 (natToTerm n)).",
                        "VernacExtend",
                        "b5e79c7eb1dc78a2a36c94014a77994eeebccdf7"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaExch LNN).",
                        "VernacExtend",
                        "904e93d6fb382a88b8097503d4facb454d8453bc"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "repeat (apply (reduceSub LNN); [ apply closedNN | idtac ]).",
                        "VernacExtend",
                        "a8f88e922cf8e5d88ee5bd5d43bc3cfe6b112789"
                    ]
                },
                {
                    "command": [
                        "apply (subFormulaTrans LNN).",
                        "VernacExtend",
                        "2273a7945ea637ee236fdcb6e093b07bf87509d6"
                    ]
                },
                {
                    "command": [
                        "unfold not in |- *; intros; SimplFreeVar.",
                        "VernacExtend",
                        "ae970221816d0247c05a21a90fde9452c65d1869"
                    ]
                },
                {
                    "command": [
                        "elim (le_not_lt 2 1).",
                        "VernacExtend",
                        "6d396716531fa19356e88ddba69d667df96bfdc6"
                    ]
                },
                {
                    "command": [
                        "apply freeVarCodeSysPrf.",
                        "VernacExtend",
                        "311cda8136fb2bc46f39931e2551971d95645724"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sn.",
                        "VernacExtend",
                        "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
                    ]
                },
                {
                    "command": [
                        "apply Axm; right; constructor.",
                        "VernacExtend",
                        "fafb5c153ffd727407f5c87d3444711b114dac59"
                    ]
                },
                {
                    "command": [
                        "apply closedNatToTerm.",
                        "VernacExtend",
                        "ab6879b4c24fe4725b9b521be10558ba4b21bb8e"
                    ]
                },
                {
                    "command": [
                        "fold notH in |- *.",
                        "VernacExtend",
                        "a0e15c80daabb43bf4c8a790c7133e043c7b9c37"
                    ]
                },
                {
                    "command": [
                        "apply codeSysPrfCorrect3.",
                        "VernacExtend",
                        "309f35915f9d62a88f521addba92c5b42de43a91"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}