{
    "filename": "wellFormed.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import extEqualNat.",
            "VernacRequire",
            "b54dcb28a918e1b7add174b81952c2b30a6e435b"
        ],
        [
            "Require Import codeList.",
            "VernacRequire",
            "a1e942e0b454ceca9186de5641825743bd0150b2"
        ],
        [
            "Section Well_Formed_Term.",
            "VernacBeginSection",
            "82e16790a6f5dee0c970a4d76e716b49af7e04e9"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Variable codeArityF : nat -> nat.",
            "VernacAssumption",
            "247239a6aca1ccb6563a187bf100fc3cb63526ae"
        ],
        [
            "Hypothesis codeArityFIsPR : isPR 1 codeArityF.",
            "VernacAssumption",
            "003b639d5db3c052e25944bd6e7d66f21169096e"
        ],
        [
            "Hypothesis codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr _ f)).",
            "VernacAssumption",
            "2a0ff7ddf4c082721188bdcaeaf774eba3fca95a"
        ],
        [
            "Hypothesis codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n.",
            "VernacAssumption",
            "3f09454e466cadf4617c26cd2e5b40955f21fe34"
        ],
        [
            "Let Term := Term L.",
            "VernacDefinition",
            "38e1762c57b9701000a89090666997db5d597a34"
        ],
        [
            "Let Terms := Terms L.",
            "VernacDefinition",
            "ac274971655c7d87e7a366522fa4f11f94117e84"
        ],
        [
            "Let var := var L.",
            "VernacDefinition",
            "387b134d06ce79979638575c6631443c7143b913"
        ],
        [
            "Let apply := apply L.",
            "VernacDefinition",
            "171f7b3946ad56564d4a09c4656739ed07770a44"
        ],
        [
            "Definition wellFormedTermTerms : nat -> nat := evalStrongRec 0 (fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)).",
            "VernacDefinition",
            "da8d6a0fa75d98627ad828266978cc9d576e3c3b"
        ],
        [
            "Definition wellFormedTerm (t : nat) : nat := cPairPi1 (wellFormedTermTerms t).",
            "VernacDefinition",
            "c0bfa6e0c915a73d3c7d31cbc78ddffafef9dc6b"
        ],
        [
            "Definition wellFormedTerms (ts : nat) : nat := cPairPi2 (wellFormedTermTerms ts).",
            "VernacDefinition",
            "445d7430f5cf621af3b435b6ede70773e00c4bdf"
        ],
        [
            "Lemma lengthTerms : forall (n : nat) (ts : Terms n), codeLength (codeTerms L codeF n ts) = n.",
            "VernacStartTheoremProof",
            "f2929fc5e1937b2a26f978c00422c4820c7ae330"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction ts as [| n t ts Hrects].",
            "VernacExtend",
            "4a72ca30982cf76b6ad63620c27c0db203f25a01"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))); [ idtac | reflexivity ].",
            "VernacExtend",
            "9fabd38fc723a3b5d5ad93d95e66c1b8c66b62b6"
        ],
        [
            "unfold codeLength in |- *.",
            "VernacExtend",
            "f1327ac2e88732f842786d349ace91ca75093d63"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "set (A := fun n0 Hrecs : nat => switchPR n0 (S (codeNth (n0 - S (cPairPi2 (pred n0))) Hrecs)) 0) in *.",
            "VernacExtend",
            "f8cc682b866aa06dfa518a023fe0011c607c224a"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply eq_S.",
            "VernacExtend",
            "8ef0b219ea0189c2d80bb55d03c4c9f24beca469"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "generalize (cPair (codeTerm L codeF t) (codeTerms L codeF n ts)).",
            "VernacExtend",
            "1588772eb4678f2a0ffce844c15af7408699a6da"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n0) (cPairPi2 n0)).",
            "VernacExtend",
            "d008fb48b01b786cfe3358341c177dd41d727068"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermCorrect1 : forall t : Term, wellFormedTerm (codeTerm L codeF t) = 1.",
            "VernacStartTheoremProof",
            "258afb594099a80e52e791c3b73b9a5a9f552f92"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (A := fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)) in *.",
            "VernacExtend",
            "2be70ba9fc74174d13d345b441a3877292b99065"
        ],
        [
            "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => wellFormedTerms (codeTerms L codeF n ts) = 1); simpl in |- *; intros.",
            "VernacExtend",
            "6b40b4ea2c46f937a521e42d005be43d18281385"
        ],
        [
            "unfold codeTerm in |- *.",
            "VernacExtend",
            "e7ce9af3a746913a0ec916c493740f219decb444"
        ],
        [
            "unfold wellFormedTerm in |- *.",
            "VernacExtend",
            "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat rewrite cPairProjections1.",
            "VernacExtend",
            "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "replace (codeTerm L codeF (fol.apply L f t0)) with (cPair (S (codeF f)) (codeTerms L codeF _ t0)); [ idtac | reflexivity ].",
            "VernacExtend",
            "34090095ede3d109617a7d551660fd99104acb59"
        ],
        [
            "unfold wellFormedTerm in |- *.",
            "VernacExtend",
            "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat rewrite cPairProjections1.",
            "VernacExtend",
            "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
        ],
        [
            "rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite codeArityFIsCorrect1.",
            "VernacExtend",
            "2e9851d53f2b7325903df1c7b78179a866aa3d93"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite lengthTerms.",
            "VernacExtend",
            "d458818f9c80fb03e18b8cfce6803080f897c1cd"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite plus_comm.",
            "VernacExtend",
            "f2921c049c57ff33e3248947a1d6b2bcd1257393"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "unfold A in |- *.",
            "VernacExtend",
            "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "replace (codeTerms L codeF (S n) (Tcons L n t0 t1)) with (S (cPair (codeTerm L codeF t0) (codeTerms L codeF n t1))); [ idtac | reflexivity ].",
            "VernacExtend",
            "f3d8688f323a146b33dcfb6ca8d099227fc3c56e"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "unfold wellFormedTerm, wellFormedTermTerms in H.",
            "VernacExtend",
            "d596394f4403ad1e5796d5c1ca3228b60e9bf198"
        ],
        [
            "unfold A in |- *; rewrite H.",
            "VernacExtend",
            "bf6edbc556a7d1a085c808651ffd478fd45c72aa"
        ],
        [
            "unfold wellFormedTerms, wellFormedTermTerms in H0.",
            "VernacExtend",
            "c88cd6bb2c4396b1c3beb14adbb2b88364080dc9"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermsCorrect1 : forall (n : nat) (ts : Terms n), wellFormedTerms (codeTerms L codeF n ts) = 1.",
            "VernacStartTheoremProof",
            "9ada1000048bde4dea80d4f68103d28333b33056"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (A := fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)) in *.",
            "VernacExtend",
            "2be70ba9fc74174d13d345b441a3877292b99065"
        ],
        [
            "induction ts as [| n t ts Hrects].",
            "VernacExtend",
            "4a72ca30982cf76b6ad63620c27c0db203f25a01"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "unfold A in |- *.",
            "VernacExtend",
            "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))); [ idtac | reflexivity ].",
            "VernacExtend",
            "9fabd38fc723a3b5d5ad93d95e66c1b8c66b62b6"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "replace (cPairPi1 (evalStrongRec 0 A (codeTerm L codeF t))) with (wellFormedTerm (codeTerm L codeF t)).",
            "VernacExtend",
            "3609e0a5e4d266d69717b363509bdd05dd69b771"
        ],
        [
            "rewrite (wellFormedTermCorrect1 t).",
            "VernacExtend",
            "4f920b1705735a2ba4568b1b5e8da6ca65bbf896"
        ],
        [
            "unfold wellFormedTerms, wellFormedTermTerms in Hrects.",
            "VernacExtend",
            "ecf3bbd462f2bad0bc9584204ceba91d1f0db785"
        ],
        [
            "unfold A in |- *; rewrite Hrects.",
            "VernacExtend",
            "c41b30dffb9dbe85e434267171316de5a3c4df6d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark wellFormedTermTermsCorrect2 : forall n : nat, (wellFormedTerm n <> 0 -> exists t : Term, codeTerm L codeF t = n) /\\ (wellFormedTerms n <> 0 -> exists m : nat, (exists ts : Terms m, codeTerms L codeF m ts = n)).",
            "VernacStartTheoremProof",
            "1bb322afa757876d9d5a55619911d00c0ff6fada"
        ],
        [
            "assert (multLemma1 : forall a b : nat, a * b <> 0 -> a <> 0).",
            "VernacExtend",
            "c05ab5446e530325aafe1a84a681ad058f9c949d"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (multLemma2 : forall a b : nat, a * b <> 0 -> b <> 0).",
            "VernacExtend",
            "439214b58dedbb3c0e8a0a0c8b368b7464242bb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite mult_comm in H.",
            "VernacExtend",
            "88ad7b6d9a017501016b4bb662a768f49183dbd5"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (forall m n : nat, n < m -> (wellFormedTerm n <> 0 -> exists t : Term, codeTerm L codeF t = n) /\\ (wellFormedTerms n <> 0 -> exists m : nat, (exists ts : Terms m, codeTerms L codeF m ts = n))).",
            "VernacExtend",
            "788541b186f6c2275a3e78419315bc9b73fef91e"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction m as [| m Hrecm].",
            "VernacExtend",
            "93d2b60c268fff5d958c27bdb803738ea66bba5b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (lt_not_le _ _ H).",
            "VernacExtend",
            "1f0dcfc525ad36870fb69998e58845954642906c"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (le_lt_or_eq _ _ (lt_n_Sm_le _ _ H)).",
            "VernacExtend",
            "f23b1ce155198053064660d260659ef1be20a5a3"
        ],
        [
            "apply Hrecm; auto.",
            "VernacExtend",
            "9d6e35c7e33741206392e94c8ba0e13950965a03"
        ],
        [
            "unfold wellFormedTerm in |- *.",
            "VernacExtend",
            "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "set (A := fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)) in *.",
            "VernacExtend",
            "2be70ba9fc74174d13d345b441a3877292b99065"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "assert (cPair (cPairPi1 n) (cPairPi2 n) = n).",
            "VernacExtend",
            "4af53a987bccf82167da99f31b6fca84ff9c5746"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "destruct (cPairPi1 n).",
            "VernacExtend",
            "817f7e25e4ffa2e8bba0d8790c28a6d8d58bee38"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (var (cPairPi2 n)).",
            "VernacExtend",
            "56308f6b7539a2c636ed439f6c27f9b91d5a43ad"
        ],
        [
            "transitivity (cPair 0 (cPairPi2 n)).",
            "VernacExtend",
            "6e74bd0887a518e6609ee887eb47da7348127768"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (eq_nat_dec (codeArityF n0) (S (codeLength (cPairPi2 n)))).",
            "VernacExtend",
            "ed40c632dc1353d349aea69bf8ef69b6a3b93a51"
        ],
        [
            "assert (wellFormedTerms (cPairPi2 n) <> 0).",
            "VernacExtend",
            "d4b1b7f570eb5dbf0042c67c57b677c2b3da62af"
        ],
        [
            "eapply multLemma2.",
            "VernacExtend",
            "d9a8fee424bb19de55ca6f0d7784ef3fdcc24120"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "assert (cPairPi2 n < m).",
            "VernacExtend",
            "0bd4037945ec5581ff67613f45a454026bbc3b1f"
        ],
        [
            "apply lt_le_trans with (cPair (S n0) (cPairPi2 n)).",
            "VernacExtend",
            "0bb2f6073e682e5602011f25064de1991327242c"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "induction (Hrecm _ H4).",
            "VernacExtend",
            "3870a122fc12bbb1ecbbe0eca68516ca124d9053"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "induction (H6 H3).",
            "VernacExtend",
            "edd88e1a250fd3ef99024facee2e978d9317fa0c"
        ],
        [
            "induction H5 as (x0, H5).",
            "VernacExtend",
            "761827eb491a44df8020d1c095b1765b75fd692d"
        ],
        [
            "assert (codeArityF n0 <> 0).",
            "VernacExtend",
            "8aa15f06ca195223e8f4359fbc209f3d2ff73cfb"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite H7 in a.",
            "VernacExtend",
            "f279fe55b14c1153da949d95d19dc7885cd6f3bd"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (codeArityFIsCorrect2 _ H7).",
            "VernacExtend",
            "1fdca51116554a3146b2f16e06ac44fb3f05cfb1"
        ],
        [
            "rewrite <- H8 in a.",
            "VernacExtend",
            "0ff8f03a6a0768bd02e651fe3231614f61e3414c"
        ],
        [
            "rewrite codeArityFIsCorrect1 in a.",
            "VernacExtend",
            "970c86b4b51598a071497f04710f4d32c6db559f"
        ],
        [
            "injection a.",
            "VernacExtend",
            "3343be5bed8180cdfe119723d6c0f2fe521c2126"
        ],
        [
            "clear a.",
            "VernacExtend",
            "1345621158f2a53dd32925dfdcefd78c46dd29d5"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite <- H5 in H9.",
            "VernacExtend",
            "d83302c722a9a1527e44ddb5b8e6a605ce48cbb0"
        ],
        [
            "rewrite lengthTerms in H9.",
            "VernacExtend",
            "92846dd4ecc452b594d1bd5552abe1273e35315c"
        ],
        [
            "cut (codeTerms L codeF x x0 = cPairPi2 n).",
            "VernacExtend",
            "4bd76ac8f2115c8282242c05afd99fa43efef653"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "generalize x0.",
            "VernacExtend",
            "0b37181bec904843a8d67dbb22af8740fab62d37"
        ],
        [
            "clear x0.",
            "VernacExtend",
            "4fb42c1c6b3c233b37b268c02f218eeeddffb9ad"
        ],
        [
            "rewrite <- H9.",
            "VernacExtend",
            "9575559b4e4b5658029033bee2aac6031ac75e67"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (apply x1 x0).",
            "VernacExtend",
            "bf21116c90e614fcf5f5910668ee1f81db3a115e"
        ],
        [
            "transitivity (cPair (S n0) (cPairPi2 n)).",
            "VernacExtend",
            "2a58560411189e60e0b73729c4ad9c396f7fbef2"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite <- H5.",
            "VernacExtend",
            "7e7c68e08488a5f01b85c6a7ae27738d3a8af897"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite beq_nat_not_refl in H2.",
            "VernacExtend",
            "d9b0308d194007bf5c2c8522d6e6c12d4c959a33"
        ],
        [
            "elim H2.",
            "VernacExtend",
            "b5361db8e79787430270ea77170dc29bbb9de7b4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_le_trans with (cPair (S n0) (cPairPi2 n)).",
            "VernacExtend",
            "0bb2f6073e682e5602011f25064de1991327242c"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "destruct n.",
            "VernacExtend",
            "1582bf847770c098bee882393a48b146dcc37a8c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists 0.",
            "VernacExtend",
            "b12b8acd7a1526ef0683513a127984e4864502d9"
        ],
        [
            "exists (Tnil L).",
            "VernacExtend",
            "b24d27d7e75f79f88d5eb627622d3550d710b0d0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (cPairPi1 n < m).",
            "VernacExtend",
            "0f77ab47d4dd2ed13997a6296ddac7b1eea2e955"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n) (cPairPi2 n)).",
            "VernacExtend",
            "9772f5520fd64e67e853ced297edf5e6aba9b726"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assert (cPairPi2 n < m).",
            "VernacExtend",
            "0bd4037945ec5581ff67613f45a454026bbc3b1f"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n) (cPairPi2 n)).",
            "VernacExtend",
            "9772f5520fd64e67e853ced297edf5e6aba9b726"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "induction (Hrecm _ H2).",
            "VernacExtend",
            "14af4ba5aed4a77bd11891cee06cf111c9a54b5c"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "induction (Hrecm _ H3).",
            "VernacExtend",
            "3f6bb8a1af0b5a568127287515006eac526e273d"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "assert (wellFormedTerm (cPairPi1 n) <> 0).",
            "VernacExtend",
            "141696551cc3d479c88c2e7fb42b5a7a42847fb5"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "assert (wellFormedTerms (cPairPi2 n) <> 0).",
            "VernacExtend",
            "d4b1b7f570eb5dbf0042c67c57b677c2b3da62af"
        ],
        [
            "eapply multLemma2.",
            "VernacExtend",
            "d9a8fee424bb19de55ca6f0d7784ef3fdcc24120"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "induction (H4 H5).",
            "VernacExtend",
            "2aba9dab1ba648ffdb3466b1de0835781e415aa6"
        ],
        [
            "induction (H6 H7).",
            "VernacExtend",
            "4203fb15f2b841df9de24430c2ca655824c4b06c"
        ],
        [
            "induction H9 as (x1, H9).",
            "VernacExtend",
            "651c1dee20a91bc15b19370c454049c902b700d8"
        ],
        [
            "exists (S x0).",
            "VernacExtend",
            "f30c6b19e807c410cbc3f66ad08987e5ecb489b6"
        ],
        [
            "exists (Tcons L x0 x x1).",
            "VernacExtend",
            "3ce7c5bcda91a6e4fad3f0b965452921b96813c3"
        ],
        [
            "rewrite <- (cPairProjections n).",
            "VernacExtend",
            "f64fcb9f86576a0029ed098ba3d2a073a67f1d61"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite <- H9.",
            "VernacExtend",
            "9575559b4e4b5658029033bee2aac6031ac75e67"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n) (cPairPi2 n)).",
            "VernacExtend",
            "9772f5520fd64e67e853ced297edf5e6aba9b726"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n) (cPairPi2 n)).",
            "VernacExtend",
            "9772f5520fd64e67e853ced297edf5e6aba9b726"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermCorrect2 : forall n : nat, wellFormedTerm n <> 0 -> exists t : Term, codeTerm L codeF t = n.",
            "VernacStartTheoremProof",
            "fd217d125be628fcd542fc2ed6aef970ecd365e3"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "eapply proj1.",
            "VernacExtend",
            "b303884ad3d1330653b2176412d19fc4d098d4b8"
        ],
        [
            "apply wellFormedTermTermsCorrect2.",
            "VernacExtend",
            "d9c4aa142cd13df56a5595e180db5f0434575b74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermsCorrect2 : forall n : nat, wellFormedTerms n <> 0 -> exists m : nat, (exists ts : Terms m, codeTerms L codeF m ts = n).",
            "VernacStartTheoremProof",
            "8adc88c0ba1e50ad009c38c0bff2b3f25ab4f0e2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "eapply proj2.",
            "VernacExtend",
            "6655dc5781465eefffac4e558dab511e3acfc9d4"
        ],
        [
            "apply wellFormedTermTermsCorrect2.",
            "VernacExtend",
            "d9c4aa142cd13df56a5595e180db5f0434575b74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark wellFormedTermTermsIsPR : isPR 1 wellFormedTermTerms.",
            "VernacStartTheoremProof",
            "b5d5e235e93029ede7057de2cd8447fadab7b8b6"
        ],
        [
            "unfold wellFormedTermTerms in |- *.",
            "VernacExtend",
            "20783edd6f1c90af41f7123cd9658b181fce62e0"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (g := fun t recs : nat => switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1).",
            "VernacExtend",
            "b11cdb0b86c3ee1bdbf72373e46273dbfcc20be3"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun t recs : nat => cPairPi1 t) (f2 := fun t recs : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (f3 := fun t recs : nat => 1).",
            "VernacExtend",
            "84e0a9105021e1afddfea689d06ceb5a446abd1f"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t)))) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)).",
            "VernacExtend",
            "c8f581d151b60df6aeccb0da18efaab1e078ee4f"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t)))).",
            "VernacExtend",
            "0976632258c86b9315991ce3c915a8a75a81b5fe"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => codeArityF (pred (cPairPi1 t))) (f' := fun t : nat => S (codeLength (cPairPi2 t))).",
            "VernacExtend",
            "70457ea4d29a8805296cc3de252141920841fdbf"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => pred (cPairPi1 t)).",
            "VernacExtend",
            "0336d6b870404fc1dc9518d06929d998a0269e08"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => codeLength (cPairPi2 t)).",
            "VernacExtend",
            "506367c6721e6730bbfe71120914acbbaaba1f10"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply codeLengthIsPR.",
            "VernacExtend",
            "f0183684db839de00db84b8ea7e0093d25bccec3"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
            "VernacExtend",
            "d614a65ac413ecc35815e5fc3c5414c484bffa05"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "9eadffc2b52fca69266f1655ef040654847ca2ed"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
            "VernacExtend",
            "c982afba640099fcfebdc10cbe162871f7b6724d"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
            "VernacExtend",
            "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 1).",
            "VernacExtend",
            "b23baeb83b401cb3543a338ae23a5f8c3e580492"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) (f3 := fun t recs : nat => 1).",
            "VernacExtend",
            "334f0995bf809e5262667ef33900c84ddf13ceae"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
            "VernacExtend",
            "f1971737ccff06d4a4f9987d7058a10fcab655ee"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi1 (pred t))) recs).",
            "VernacExtend",
            "31ba85eb98d67b3ce4cc8d0bf59cc1e23549ab11"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi1 (pred t))) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "a94fc8df4ba3a80f7649053c5fc78b91f5016dec"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi1 (pred t))).",
            "VernacExtend",
            "12ff2e5e475f7d08cb53b6496dc024bfc2270092"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi1 (pred t))).",
            "VernacExtend",
            "a15b11f1d26c349a5c34395d162c9070ec98db7f"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => cPairPi1 (pred t)).",
            "VernacExtend",
            "77ea5fe9a3ba393be8cbb69691c385780e90e6a0"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 (pred t))) recs).",
            "VernacExtend",
            "f81e5492c00a44c6832854ae2a92de0b477ad453"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 (pred t))) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "a3ca4a0445d9f1fce0efc2c54e2293d65613dc2b"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 (pred t))).",
            "VernacExtend",
            "93e57755221ff92e574ff83c95be23dc61c2066a"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 (pred t))).",
            "VernacExtend",
            "a10f4b250b35d7c96f4a7ecc6bc2428d9e9d4594"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => cPairPi2 (pred t)).",
            "VernacExtend",
            "679bbf589e33855726e50e51ab8f9c5f4b86aa78"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 1).",
            "VernacExtend",
            "b23baeb83b401cb3543a338ae23a5f8c3e580492"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermIsPR : isPR 1 wellFormedTerm.",
            "VernacStartTheoremProof",
            "10e934c11a93c975a893ed474714634a67636d4d"
        ],
        [
            "unfold wellFormedTerm in |- *.",
            "VernacExtend",
            "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply wellFormedTermTermsIsPR.",
            "VernacExtend",
            "ab0255703a8fb53835a58c018cc6d2009f2dbbbd"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedTermsIsPR : isPR 1 wellFormedTerms.",
            "VernacStartTheoremProof",
            "060aef04a6cd5c8ab7dc6db9217be6b14826d9a5"
        ],
        [
            "unfold wellFormedTerms in |- *.",
            "VernacExtend",
            "4eef9d454af528bfd45048f3570d05b7649e99b0"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply wellFormedTermTermsIsPR.",
            "VernacExtend",
            "ab0255703a8fb53835a58c018cc6d2009f2dbbbd"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Well_Formed_Formula.",
            "VernacBeginSection",
            "dec66eadefd6d5679ab529e5c04f1bde534566a6"
        ],
        [
            "Variable codeR : Relations L -> nat.",
            "VernacAssumption",
            "7d46e7172e4f8afe9c452578494a18d04f3dd4f3"
        ],
        [
            "Variable codeArityR : nat -> nat.",
            "VernacAssumption",
            "a256d5c64bca82e39c471a89fd58c5699363ab22"
        ],
        [
            "Hypothesis codeArityRIsPR : isPR 1 codeArityR.",
            "VernacAssumption",
            "58841c745f3e49fe40624a36f9031c8f3e8a099a"
        ],
        [
            "Hypothesis codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl _ r)).",
            "VernacAssumption",
            "5f7c32b690fe101c78258f13e87d6ab7f5ce37d9"
        ],
        [
            "Hypothesis codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n.",
            "VernacAssumption",
            "96a65721bbd45bc4a94cb6025c85f0fd79ae501e"
        ],
        [
            "Let Formula := Formula L.",
            "VernacDefinition",
            "3d32ab58ebf838c2a87fdc2e6124bfb77b6c785b"
        ],
        [
            "Let equal := equal L.",
            "VernacDefinition",
            "a97cb35845ad0374b8596fd6d66f5c04065714a3"
        ],
        [
            "Let atomic := atomic L.",
            "VernacDefinition",
            "7638f14f126e2c8e95075078253a597eea7fd9ac"
        ],
        [
            "Let impH := impH L.",
            "VernacDefinition",
            "b3d855010528c91b0d1d6c2d64740a3e6e7417a6"
        ],
        [
            "Let notH := notH L.",
            "VernacDefinition",
            "096b324518e16c165cd803fe11de91b995393f24"
        ],
        [
            "Let forallH := forallH L.",
            "VernacDefinition",
            "eaf4bad969f5571f26e0bbda77b3d70e626f3102"
        ],
        [
            "Definition wellFormedFormula : nat -> nat := evalStrongRec 0 (fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f)))).",
            "VernacDefinition",
            "143297970fb36d083ff11823f09c7db8c6fbe254"
        ],
        [
            "Lemma wellFormedFormulaCorrect1 : forall f : Formula, wellFormedFormula (codeFormula L codeF codeR f) = 1.",
            "VernacStartTheoremProof",
            "1afeb32d1676cfda57ad5b1b7e8b551cbcba8f8b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (A := fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f)))) in *.",
            "VernacExtend",
            "1934f165cb500864f49470a6095d991577448058"
        ],
        [
            "unfold wellFormedFormula in |- *.",
            "VernacExtend",
            "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "induction f as [t t0| r t| f1 Hrecf1 f0 Hrecf0| f Hrecf| n f Hrecf]; intros; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *; simpl in |- *; unfold A at 1 in |- *; repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "cdc2ab39037faac08d25470d097c3b2ef1e55b05"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite wellFormedTermCorrect1.",
            "VernacExtend",
            "6bc9dfa21d1f9cbbabe5be686edb2d3264042da2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite wellFormedTermsCorrect1.",
            "VernacExtend",
            "90b0d74ae6379125f4e0ae0f339bf46a536a36ce"
        ],
        [
            "rewrite codeArityRIsCorrect1.",
            "VernacExtend",
            "6da173dea381617cce613489b7df589af3b4106c"
        ],
        [
            "rewrite lengthTerms.",
            "VernacExtend",
            "d458818f9c80fb03e18b8cfce6803080f897c1cd"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f0).",
            "VernacExtend",
            "e3e743dd3b866b58d2464c2339802cf7d708a425"
        ],
        [
            "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f1).",
            "VernacExtend",
            "a605fff6eae5787013a20c5a1a1cbc0086c98a33"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Hrecf1.",
            "VernacExtend",
            "74cdb3b5f159d2dd9ac51c0d29d0b8653642f991"
        ],
        [
            "rewrite Hrecf0.",
            "VernacExtend",
            "a606db4ccdb77e2756c8fd28d9bd0a3d6939f0b8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f).",
            "VernacExtend",
            "e2d5b8cb3e092e7d1f5041a9508e0acf12f58e91"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f).",
            "VernacExtend",
            "e2d5b8cb3e092e7d1f5041a9508e0acf12f58e91"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedFormulaCorrect2 : forall n : nat, wellFormedFormula n <> 0 -> exists f : Formula, codeFormula L codeF codeR f = n.",
            "VernacStartTheoremProof",
            "ab62888a5e891ccf146719dd4c5e25e571428f59"
        ],
        [
            "assert (multLemma1 : forall a b : nat, a * b <> 0 -> a <> 0).",
            "VernacExtend",
            "c05ab5446e530325aafe1a84a681ad058f9c949d"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (multLemma2 : forall a b : nat, a * b <> 0 -> b <> 0).",
            "VernacExtend",
            "439214b58dedbb3c0e8a0a0c8b368b7464242bb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite mult_comm in H.",
            "VernacExtend",
            "88ad7b6d9a017501016b4bb662a768f49183dbd5"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (forall m n : nat, n < m -> wellFormedFormula n <> 0 -> exists f : Formula, codeFormula L codeF codeR f = n).",
            "VernacExtend",
            "5d146b299c761706ac4d8fc23db457ea31373cf5"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction m as [| m Hrecm].",
            "VernacExtend",
            "93d2b60c268fff5d958c27bdb803738ea66bba5b"
        ],
        [
            "intros n H.",
            "VernacExtend",
            "348ce37d2f619b733a523bd998a06fecedcf3fc4"
        ],
        [
            "elim (lt_not_le _ _ H).",
            "VernacExtend",
            "1f0dcfc525ad36870fb69998e58845954642906c"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "intros n H.",
            "VernacExtend",
            "348ce37d2f619b733a523bd998a06fecedcf3fc4"
        ],
        [
            "induction (le_lt_or_eq _ _ (lt_n_Sm_le _ _ H)).",
            "VernacExtend",
            "f23b1ce155198053064660d260659ef1be20a5a3"
        ],
        [
            "apply Hrecm; auto.",
            "VernacExtend",
            "9d6e35c7e33741206392e94c8ba0e13950965a03"
        ],
        [
            "unfold wellFormedFormula in |- *.",
            "VernacExtend",
            "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
        ],
        [
            "set (A := fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f)))) in *.",
            "VernacExtend",
            "1934f165cb500864f49470a6095d991577448058"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "eda71daca7f434fb7282106e854892a85346221f"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "assert (cPair (cPairPi1 n) (cPairPi2 n) = n).",
            "VernacExtend",
            "4af53a987bccf82167da99f31b6fca84ff9c5746"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "destruct (cPairPi1 n).",
            "VernacExtend",
            "817f7e25e4ffa2e8bba0d8790c28a6d8d58bee38"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (wellFormedTerm (cPairPi1 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "0ea4ca84e9bc929ed19621b16168e69e7aa736e7"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "assert (wellFormedTerm (cPairPi2 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "4c65e424a3a8b25be903dc0448c5766c3d26951b"
        ],
        [
            "eapply multLemma2.",
            "VernacExtend",
            "d9a8fee424bb19de55ca6f0d7784ef3fdcc24120"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "induction (wellFormedTermCorrect2 _ H3).",
            "VernacExtend",
            "8d31208ef7b373f039a4d1e5a63a9aef5c8b60ae"
        ],
        [
            "induction (wellFormedTermCorrect2 _ H4).",
            "VernacExtend",
            "1fa31bf4ac9121f55e3f2728ce64b3ba60842d29"
        ],
        [
            "exists (equal x x0).",
            "VernacExtend",
            "1c0d2149c6ec53ecafb9f123d14c557a61020e0c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (cPairPi2 n < m).",
            "VernacExtend",
            "0bd4037945ec5581ff67613f45a454026bbc3b1f"
        ],
        [
            "apply lt_le_trans with (cPair 1 (cPairPi2 n)).",
            "VernacExtend",
            "790012fc74c46401f671aaa8b6af1a29b388c3b5"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assert (cPairPi1 (cPairPi2 n) < m).",
            "VernacExtend",
            "6f554dd57c56d06e43f81339ed93ff9cc3484e2f"
        ],
        [
            "apply le_lt_trans with (cPair (cPairPi1 (cPairPi2 n)) (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "975360b93afe95fa12fe7284c424e3edfef1329c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (cPairPi2 (cPairPi2 n) < m).",
            "VernacExtend",
            "1543ed69bbbee82483c53d027c25e1abdff99e70"
        ],
        [
            "apply le_lt_trans with (cPair (cPairPi1 (cPairPi2 n)) (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "975360b93afe95fa12fe7284c424e3edfef1329c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (evalStrongRec 0 A (cPairPi1 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "c3a3b0ef8d028bf9613ceba5ae1d7beb1b4eb2f9"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "assert (evalStrongRec 0 A (cPairPi2 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "d563d1458d219488361b2761aa26080709647590"
        ],
        [
            "eapply multLemma2.",
            "VernacExtend",
            "d9a8fee424bb19de55ca6f0d7784ef3fdcc24120"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "induction (Hrecm _ H3 H6).",
            "VernacExtend",
            "0c8464f0d2161e20b53836bdebedfc9199367fcb"
        ],
        [
            "induction (Hrecm _ H4 H7).",
            "VernacExtend",
            "f3e818067ca6d6a5d5515313ee43afbd7372b9c7"
        ],
        [
            "exists (impH x x0).",
            "VernacExtend",
            "e00dcdb865d7e5ae14793c27c36894bc1f88a1e9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "rewrite H9.",
            "VernacExtend",
            "7e513e390abfc88b77648f4c54df1434c5ffa9d3"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (cPairPi2 n < m).",
            "VernacExtend",
            "0bd4037945ec5581ff67613f45a454026bbc3b1f"
        ],
        [
            "apply lt_le_trans with (cPair 2 (cPairPi2 n)).",
            "VernacExtend",
            "6bdb7fe2c7737a6de1f57658257150790a2856db"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (Hrecm _ H2 H3).",
            "VernacExtend",
            "c875445f6958e80acfb13a7952d52806a54e039c"
        ],
        [
            "exists (notH x).",
            "VernacExtend",
            "054369bb9849ebaab1ad7f9bd52e0d3ef2765a50"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "destruct n0.",
            "VernacExtend",
            "907b25c8fbf8f33251f3f0e692baa7be0dc4b830"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (cPairPi2 n < m).",
            "VernacExtend",
            "0bd4037945ec5581ff67613f45a454026bbc3b1f"
        ],
        [
            "apply lt_le_trans with (cPair 3 (cPairPi2 n)).",
            "VernacExtend",
            "c844555a430f9f0cce41f2fb83d6389045e24188"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assert (cPairPi2 (cPairPi2 n) < m).",
            "VernacExtend",
            "1543ed69bbbee82483c53d027c25e1abdff99e70"
        ],
        [
            "apply le_lt_trans with (cPair (cPairPi1 (cPairPi2 n)) (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "975360b93afe95fa12fe7284c424e3edfef1329c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (Hrecm _ H3 H4).",
            "VernacExtend",
            "15cf66fd2b42e4f015d059c294395877531f2d15"
        ],
        [
            "exists (forallH (cPairPi1 (cPairPi2 n)) x).",
            "VernacExtend",
            "998f6c4e3b68ffc9aca9791be512de913a3f13df"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (eq_nat_dec (codeArityR n0) (S (codeLength (cPairPi2 n)))).",
            "VernacExtend",
            "ee387186de4bbaccde37daa28d627626017c0390"
        ],
        [
            "assert (codeArityR n0 <> 0).",
            "VernacExtend",
            "1aacd6b86e78f69900847359aa1df7a788696529"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite H2 in a.",
            "VernacExtend",
            "9b8f48da92dc0b83885db22e4f23f075f687564f"
        ],
        [
            "discriminate a.",
            "VernacExtend",
            "954a0001c22cf537896d0b1ad7e9b20fa8968146"
        ],
        [
            "induction (codeArityRIsCorrect2 _ H2).",
            "VernacExtend",
            "74b01be1a184f633880b218c61fdbce39d4f273d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (wellFormedTerms (cPairPi2 n) <> 0).",
            "VernacExtend",
            "d4b1b7f570eb5dbf0042c67c57b677c2b3da62af"
        ],
        [
            "eapply multLemma2.",
            "VernacExtend",
            "d9a8fee424bb19de55ca6f0d7784ef3fdcc24120"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite <- H3 in a.",
            "VernacExtend",
            "f66b97411850166a4f3c8bd3d7197b8fcec18e74"
        ],
        [
            "rewrite codeArityRIsCorrect1 in a.",
            "VernacExtend",
            "3da6ae7c5203ab27992aa53cad5a35dd0aa2c68e"
        ],
        [
            "injection a.",
            "VernacExtend",
            "3343be5bed8180cdfe119723d6c0f2fe521c2126"
        ],
        [
            "clear a.",
            "VernacExtend",
            "1345621158f2a53dd32925dfdcefd78c46dd29d5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (wellFormedTermsCorrect2 _ H5).",
            "VernacExtend",
            "e18fff72614d51d1ed6e8e5ad114ace4c0a95fba"
        ],
        [
            "induction H7 as (x1, H7).",
            "VernacExtend",
            "72ee095aacb7aa0cb10d34ae3a7cb832c6eef6d8"
        ],
        [
            "rewrite <- H7 in H6.",
            "VernacExtend",
            "9af02bda8864b95caae8997ee6ca184dea39eb0f"
        ],
        [
            "rewrite lengthTerms in H6.",
            "VernacExtend",
            "d92e75690b991a8fda9a45ba97e67ec96a63aeb2"
        ],
        [
            "cut (codeTerms L codeF x0 x1 = cPairPi2 n).",
            "VernacExtend",
            "0abe21afc79f2b951a0b87a69d5b877d362344fe"
        ],
        [
            "generalize x1.",
            "VernacExtend",
            "d06363aea195b7c30752ed148577e79f190762e4"
        ],
        [
            "clear H7 x1.",
            "VernacExtend",
            "5f5f385d8857cb4c8535ab61c2f95de6f347f629"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (atomic x x1).",
            "VernacExtend",
            "b2e7df12de624e1652a4311f5e2e84a298e0c089"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H7.",
            "VernacExtend",
            "2b0de906e9dfacfe89c031c2266760d29b5450f6"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl in H2.",
            "VernacExtend",
            "b1e247c43b6623097ab13813b4de664287dd4249"
        ],
        [
            "elim H2.",
            "VernacExtend",
            "b5361db8e79787430270ea77170dc29bbb9de7b4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wellFormedFormulaIsPR : isPR 1 wellFormedFormula.",
            "VernacStartTheoremProof",
            "390c55f89533ebd565e370dd546a961fffef1603"
        ],
        [
            "unfold wellFormedFormula in |- *.",
            "VernacExtend",
            "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "assert (isPR 2 (fun f recs : nat => cPairPi1 f)).",
            "VernacExtend",
            "76c37441160097d337f23f62118c8438f0780954"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 2 (fun f recs : nat => pred (cPairPi1 f))).",
            "VernacExtend",
            "821b4e9be1507f5b84a62a61053d78189d15c860"
        ],
        [
            "apply compose2_1IsPR with (f := fun f recs : nat => cPairPi1 f).",
            "VernacExtend",
            "59e913b13b552b1bb9faa66890991410af3397f2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "assert (isPR 2 (fun f recs : nat => pred (pred (cPairPi1 f)))).",
            "VernacExtend",
            "2dd104c3c82e1960c9c3d97c2063fe2d8b7dd3e7"
        ],
        [
            "apply compose2_1IsPR with (f := fun f recs : nat => pred (cPairPi1 f)).",
            "VernacExtend",
            "d12b814c90d12121531a919825f13d1b08a6054e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "assert (isPR 2 (fun f recs : nat => pred (pred (pred (cPairPi1 f))))).",
            "VernacExtend",
            "6881e0380c110d2ee6e166c7962c0e037b3f6f31"
        ],
        [
            "apply compose2_1IsPR with (f := fun f recs : nat => pred (pred (cPairPi1 f))).",
            "VernacExtend",
            "8e122f853d9119b2b1f96983c0d764be33630bee"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "assert (forall g : nat -> nat, isPR 1 g -> isPR 2 (fun f recs : nat => codeNth (f - S (g f)) recs)).",
            "VernacExtend",
            "7beb13dc141e831d959af3c9bb21728bbec17c00"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => f - S (g f)) (g := fun f recs : nat => recs).",
            "VernacExtend",
            "0af153e4fd30631b7a7f0c64420df0ec2fd2a9b2"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => f - S (g f)).",
            "VernacExtend",
            "5d5659dc4c59963ccf523f865dfaa9276af607df"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (g f)).",
            "VernacExtend",
            "a8d1bc8ff8d7d5648ffed347a84f66f8e79ee455"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => cPairPi1 f) (f2 := fun f recs : nat => switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (f3 := fun f recs : nat => wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "35165011a8229e0d70d2eb4f80abe43b16e7ad60"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (cPairPi1 f)) (f2 := fun f recs : nat => switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
            "VernacExtend",
            "ec18ad5ad5aec5f4c5e4499457005209c9f04fca"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (cPairPi1 f))) (f2 := fun f recs : nat => switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 f)) recs).",
            "VernacExtend",
            "a78cdea15a42c1326e75f1112961de4beb9de63c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (pred (cPairPi1 f)))) (f2 := fun f recs : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
            "VernacExtend",
            "d64dc5133e24c0ed6a055d50e87b78e17ea0bc5a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)).",
            "VernacExtend",
            "03f402e3e31e8e9459da8fcbf4ae84e44f0cfe54"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f)))) (f' := fun f : nat => wellFormedTerms (cPairPi2 f)).",
            "VernacExtend",
            "252792b7e861b6bcba4a12cae6cc0e8c9e58dc65"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (f' := fun f : nat => S (codeLength (cPairPi2 f))).",
            "VernacExtend",
            "c590410f2e3d6334d9ceeea3fc6c271b47ef2449"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => pred (pred (pred (pred (cPairPi1 f))))).",
            "VernacExtend",
            "edcbbf1235df8d2f4aeb91358d06326da43da0d4"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => pred (pred (pred (cPairPi1 f)))); try apply predIsPR.",
            "VernacExtend",
            "712ee9962896fe0b40c1c6bdda24ae03bd08ffa8"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => pred (pred (cPairPi1 f))); try apply predIsPR.",
            "VernacExtend",
            "0cc1c79a36461773e59d398bb0556dece2d4e194"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => pred (cPairPi1 f)); try apply predIsPR.",
            "VernacExtend",
            "d998fc221a12061a66e92aff3933f0c98b795bc4"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => codeLength (cPairPi2 f)).",
            "VernacExtend",
            "5c87f9c5a90e6a26b49b7b7b27d96156ade4fc41"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply codeLengthIsPR.",
            "VernacExtend",
            "f0183684db839de00db84b8ea7e0093d25bccec3"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply wellFormedTermsIsPR.",
            "VernacExtend",
            "9dc764f7ba3410e0d4186ef5aeb9f4e2cbf32264"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply H3 with (g := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "27d9bd7cf29aaafa234a9c6b32d27814e582fb9a"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
            "VernacExtend",
            "577c575ee5d0347efbd61a155a291ff3dc622602"
        ],
        [
            "apply H3 with (g := fun f : nat => cPairPi1 (cPairPi2 f)).",
            "VernacExtend",
            "ac50af3d099efe716a25eb488a7063417b85680c"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply H3 with (g := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "27d9bd7cf29aaafa234a9c6b32d27814e582fb9a"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "06fed5790febcec7ff14fd73e48dd4060960f3de"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => wellFormedTerm (cPairPi1 (cPairPi2 f))) (f' := fun f : nat => wellFormedTerm (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "63ce79e89bd94de76551554baa3d7aa2fa1e652d"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
            "VernacExtend",
            "574d639638c0c8658ff9d2386dea0df6984f8209"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply wellFormedTermIsPR.",
            "VernacExtend",
            "867e283982fb20f5d2de0d694c7bdc426da2daaf"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "cf13d98900b7072887a0e260da9ee6122b2d0283"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply wellFormedTermIsPR.",
            "VernacExtend",
            "867e283982fb20f5d2de0d694c7bdc426da2daaf"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Well_Formed_Formula.",
            "VernacEndSegment",
            "2bd1acc22e048fe3b032790f91a1b87516fa2181"
        ],
        [
            "End Well_Formed_Term.",
            "VernacEndSegment",
            "63602891da48fc8622beabaca2dc40ba43a75f9c"
        ]
    ],
    "proofs": [
        {
            "name": "lengthTerms",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction ts as [| n t ts Hrects].",
                        "VernacExtend",
                        "4a72ca30982cf76b6ad63620c27c0db203f25a01"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "9fabd38fc723a3b5d5ad93d95e66c1b8c66b62b6"
                    ]
                },
                {
                    "command": [
                        "unfold codeLength in |- *.",
                        "VernacExtend",
                        "f1327ac2e88732f842786d349ace91ca75093d63"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "set (A := fun n0 Hrecs : nat => switchPR n0 (S (codeNth (n0 - S (cPairPi2 (pred n0))) Hrecs)) 0) in *.",
                        "VernacExtend",
                        "f8cc682b866aa06dfa518a023fe0011c607c224a"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply eq_S.",
                        "VernacExtend",
                        "8ef0b219ea0189c2d80bb55d03c4c9f24beca469"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "generalize (cPair (codeTerm L codeF t) (codeTerms L codeF n ts)).",
                        "VernacExtend",
                        "1588772eb4678f2a0ffce844c15af7408699a6da"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (cPair (cPairPi1 n0) (cPairPi2 n0)).",
                        "VernacExtend",
                        "d008fb48b01b786cfe3358341c177dd41d727068"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections.",
                        "VernacExtend",
                        "c3175365627fe539261822cb2060e943f0ca0952"
                    ]
                },
                {
                    "command": [
                        "apply le_n.",
                        "VernacExtend",
                        "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedTermCorrect1",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (A := fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)) in *.",
                        "VernacExtend",
                        "2be70ba9fc74174d13d345b441a3877292b99065"
                    ]
                },
                {
                    "command": [
                        "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => wellFormedTerms (codeTerms L codeF n ts) = 1); simpl in |- *; intros.",
                        "VernacExtend",
                        "6b40b4ea2c46f937a521e42d005be43d18281385"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerm in |- *.",
                        "VernacExtend",
                        "e7ce9af3a746913a0ec916c493740f219decb444"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerm in |- *.",
                        "VernacExtend",
                        "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1.",
                        "VernacExtend",
                        "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerm L codeF (fol.apply L f t0)) with (cPair (S (codeF f)) (codeTerms L codeF _ t0)); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "34090095ede3d109617a7d551660fd99104acb59"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerm in |- *.",
                        "VernacExtend",
                        "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1.",
                        "VernacExtend",
                        "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite codeArityFIsCorrect1.",
                        "VernacExtend",
                        "2e9851d53f2b7325903df1c7b78179a866aa3d93"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite lengthTerms.",
                        "VernacExtend",
                        "d458818f9c80fb03e18b8cfce6803080f897c1cd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_comm.",
                        "VernacExtend",
                        "f2921c049c57ff33e3248947a1d6b2bcd1257393"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLt2.",
                        "VernacExtend",
                        "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms in |- *.",
                        "VernacExtend",
                        "4eef9d454af528bfd45048f3570d05b7649e99b0"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *.",
                        "VernacExtend",
                        "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms in |- *.",
                        "VernacExtend",
                        "4eef9d454af528bfd45048f3570d05b7649e99b0"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerms L codeF (S n) (Tcons L n t0 t1)) with (S (cPair (codeTerm L codeF t0) (codeTerms L codeF n t1))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "f3d8688f323a146b33dcfb6ca8d099227fc3c56e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerm, wellFormedTermTerms in H.",
                        "VernacExtend",
                        "d596394f4403ad1e5796d5c1ca3228b60e9bf198"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *; rewrite H.",
                        "VernacExtend",
                        "bf6edbc556a7d1a085c808651ffd478fd45c72aa"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms, wellFormedTermTerms in H0.",
                        "VernacExtend",
                        "c88cd6bb2c4396b1c3beb14adbb2b88364080dc9"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedTermsCorrect1",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (A := fun t recs : nat => cPair (switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1)) in *.",
                        "VernacExtend",
                        "2be70ba9fc74174d13d345b441a3877292b99065"
                    ]
                },
                {
                    "command": [
                        "induction ts as [| n t ts Hrects].",
                        "VernacExtend",
                        "4a72ca30982cf76b6ad63620c27c0db203f25a01"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms in |- *.",
                        "VernacExtend",
                        "4eef9d454af528bfd45048f3570d05b7649e99b0"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *.",
                        "VernacExtend",
                        "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms in |- *.",
                        "VernacExtend",
                        "4eef9d454af528bfd45048f3570d05b7649e99b0"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "eda71daca7f434fb7282106e854892a85346221f"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "ca1b72a752198e5065b07ea4e2d6ea1603ed4c83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "9fabd38fc723a3b5d5ad93d95e66c1b8c66b62b6"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "replace (cPairPi1 (evalStrongRec 0 A (codeTerm L codeF t))) with (wellFormedTerm (codeTerm L codeF t)).",
                        "VernacExtend",
                        "3609e0a5e4d266d69717b363509bdd05dd69b771"
                    ]
                },
                {
                    "command": [
                        "rewrite (wellFormedTermCorrect1 t).",
                        "VernacExtend",
                        "4f920b1705735a2ba4568b1b5e8da6ca65bbf896"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerms, wellFormedTermTerms in Hrects.",
                        "VernacExtend",
                        "ecf3bbd462f2bad0bc9584204ceba91d1f0db785"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *; rewrite Hrects.",
                        "VernacExtend",
                        "c41b30dffb9dbe85e434267171316de5a3c4df6d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedTermTermsIsPR",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "unfold wellFormedTermTerms in |- *.",
                        "VernacExtend",
                        "20783edd6f1c90af41f7123cd9658b181fce62e0"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => switchPR (cPairPi1 t) (charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) 1) (g := fun t recs : nat => switchPR t (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) 1).",
                        "VernacExtend",
                        "b11cdb0b86c3ee1bdbf72373e46273dbfcc20be3"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun t recs : nat => cPairPi1 t) (f2 := fun t recs : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t))) * cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (f3 := fun t recs : nat => 1).",
                        "VernacExtend",
                        "84e0a9105021e1afddfea689d06ceb5a446abd1f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t)))) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)).",
                        "VernacExtend",
                        "c8f581d151b60df6aeccb0da18efaab1e078ee4f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => charFunction 2 beq_nat (codeArityF (pred (cPairPi1 t))) (S (codeLength (cPairPi2 t)))).",
                        "VernacExtend",
                        "0976632258c86b9315991ce3c915a8a75a81b5fe"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => codeArityF (pred (cPairPi1 t))) (f' := fun t : nat => S (codeLength (cPairPi2 t))).",
                        "VernacExtend",
                        "70457ea4d29a8805296cc3de252141920841fdbf"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => pred (cPairPi1 t)).",
                        "VernacExtend",
                        "0336d6b870404fc1dc9518d06929d998a0269e08"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => codeLength (cPairPi2 t)).",
                        "VernacExtend",
                        "506367c6721e6730bbfe71120914acbbaaba1f10"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply codeLengthIsPR.",
                        "VernacExtend",
                        "f0183684db839de00db84b8ea7e0093d25bccec3"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
                        "VernacExtend",
                        "d614a65ac413ecc35815e5fc3c5414c484bffa05"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "9eadffc2b52fca69266f1655ef040654847ca2ed"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
                        "VernacExtend",
                        "c982afba640099fcfebdc10cbe162871f7b6724d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
                        "VernacExtend",
                        "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 1).",
                        "VernacExtend",
                        "b23baeb83b401cb3543a338ae23a5f8c3e580492"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs) * cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)) (f3 := fun t recs : nat => 1).",
                        "VernacExtend",
                        "334f0995bf809e5262667ef33900c84ddf13ceae"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
                        "VernacExtend",
                        "f1971737ccff06d4a4f9987d7058a10fcab655ee"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi1 (pred t))) recs).",
                        "VernacExtend",
                        "31ba85eb98d67b3ce4cc8d0bf59cc1e23549ab11"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi1 (pred t))) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "a94fc8df4ba3a80f7649053c5fc78b91f5016dec"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi1 (pred t))).",
                        "VernacExtend",
                        "12ff2e5e475f7d08cb53b6496dc024bfc2270092"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi1 (pred t))).",
                        "VernacExtend",
                        "a15b11f1d26c349a5c34395d162c9070ec98db7f"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => cPairPi1 (pred t)).",
                        "VernacExtend",
                        "77ea5fe9a3ba393be8cbb69691c385780e90e6a0"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 (pred t))) recs).",
                        "VernacExtend",
                        "f81e5492c00a44c6832854ae2a92de0b477ad453"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 (pred t))) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "a3ca4a0445d9f1fce0efc2c54e2293d65613dc2b"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 (pred t))).",
                        "VernacExtend",
                        "93e57755221ff92e574ff83c95be23dc61c2066a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 (pred t))).",
                        "VernacExtend",
                        "a10f4b250b35d7c96f4a7ecc6bc2428d9e9d4594"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => cPairPi2 (pred t)).",
                        "VernacExtend",
                        "679bbf589e33855726e50e51ab8f9c5f4b86aa78"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 1).",
                        "VernacExtend",
                        "b23baeb83b401cb3543a338ae23a5f8c3e580492"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedTermIsPR",
            "line_nb": 406,
            "steps": [
                {
                    "command": [
                        "unfold wellFormedTerm in |- *.",
                        "VernacExtend",
                        "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermTermsIsPR.",
                        "VernacExtend",
                        "ab0255703a8fb53835a58c018cc6d2009f2dbbbd"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedTermsIsPR",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "unfold wellFormedTerms in |- *.",
                        "VernacExtend",
                        "4eef9d454af528bfd45048f3570d05b7649e99b0"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermTermsIsPR.",
                        "VernacExtend",
                        "ab0255703a8fb53835a58c018cc6d2009f2dbbbd"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedFormulaCorrect1",
            "line_nb": 431,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (A := fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f)))) in *.",
                        "VernacExtend",
                        "1934f165cb500864f49470a6095d991577448058"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedFormula in |- *.",
                        "VernacExtend",
                        "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
                    ]
                },
                {
                    "command": [
                        "fold A in |- *.",
                        "VernacExtend",
                        "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
                    ]
                },
                {
                    "command": [
                        "induction f as [t t0| r t| f1 Hrecf1 f0 Hrecf0| f Hrecf| n f Hrecf]; intros; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *; simpl in |- *; unfold A at 1 in |- *; repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "cdc2ab39037faac08d25470d097c3b2ef1e55b05"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite wellFormedTermCorrect1.",
                        "VernacExtend",
                        "6bc9dfa21d1f9cbbabe5be686edb2d3264042da2"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite wellFormedTermsCorrect1.",
                        "VernacExtend",
                        "90b0d74ae6379125f4e0ae0f339bf46a536a36ce"
                    ]
                },
                {
                    "command": [
                        "rewrite codeArityRIsCorrect1.",
                        "VernacExtend",
                        "6da173dea381617cce613489b7df589af3b4106c"
                    ]
                },
                {
                    "command": [
                        "rewrite lengthTerms.",
                        "VernacExtend",
                        "d458818f9c80fb03e18b8cfce6803080f897c1cd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f0).",
                        "VernacExtend",
                        "e3e743dd3b866b58d2464c2339802cf7d708a425"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f1).",
                        "VernacExtend",
                        "a605fff6eae5787013a20c5a1a1cbc0086c98a33"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecf1.",
                        "VernacExtend",
                        "74cdb3b5f159d2dd9ac51c0d29d0b8653642f991"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecf0.",
                        "VernacExtend",
                        "a606db4ccdb77e2756c8fd28d9bd0a3d6939f0b8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f).",
                        "VernacExtend",
                        "e2d5b8cb3e092e7d1f5041a9508e0acf12f58e91"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply cPairLt2.",
                        "VernacExtend",
                        "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1 with (m := codeFormula L codeF codeR f).",
                        "VernacExtend",
                        "e2d5b8cb3e092e7d1f5041a9508e0acf12f58e91"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wellFormedFormulaIsPR",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "unfold wellFormedFormula in |- *.",
                        "VernacExtend",
                        "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 2 (fun f recs : nat => cPairPi1 f)).",
                        "VernacExtend",
                        "76c37441160097d337f23f62118c8438f0780954"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 2 (fun f recs : nat => pred (cPairPi1 f))).",
                        "VernacExtend",
                        "821b4e9be1507f5b84a62a61053d78189d15c860"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun f recs : nat => cPairPi1 f).",
                        "VernacExtend",
                        "59e913b13b552b1bb9faa66890991410af3397f2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 2 (fun f recs : nat => pred (pred (cPairPi1 f)))).",
                        "VernacExtend",
                        "2dd104c3c82e1960c9c3d97c2063fe2d8b7dd3e7"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun f recs : nat => pred (cPairPi1 f)).",
                        "VernacExtend",
                        "d12b814c90d12121531a919825f13d1b08a6054e"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 2 (fun f recs : nat => pred (pred (pred (cPairPi1 f))))).",
                        "VernacExtend",
                        "6881e0380c110d2ee6e166c7962c0e037b3f6f31"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun f recs : nat => pred (pred (cPairPi1 f))).",
                        "VernacExtend",
                        "8e122f853d9119b2b1f96983c0d764be33630bee"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "assert (forall g : nat -> nat, isPR 1 g -> isPR 2 (fun f recs : nat => codeNth (f - S (g f)) recs)).",
                        "VernacExtend",
                        "7beb13dc141e831d959af3c9bb21728bbec17c00"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => f - S (g f)) (g := fun f recs : nat => recs).",
                        "VernacExtend",
                        "0af153e4fd30631b7a7f0c64420df0ec2fd2a9b2"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => f - S (g f)).",
                        "VernacExtend",
                        "5d5659dc4c59963ccf523f865dfaa9276af607df"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (g f)).",
                        "VernacExtend",
                        "a8d1bc8ff8d7d5648ffed347a84f66f8e79ee455"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => cPairPi1 f) (f2 := fun f recs : nat => switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (f3 := fun f recs : nat => wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "35165011a8229e0d70d2eb4f80abe43b16e7ad60"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (cPairPi1 f)) (f2 := fun f recs : nat => switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (codeNth (f - S (cPairPi2 f)) recs)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs * codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
                        "VernacExtend",
                        "ec18ad5ad5aec5f4c5e4499457005209c9f04fca"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (cPairPi1 f))) (f2 := fun f recs : nat => switchPR (pred (pred (pred (cPairPi1 f)))) (charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 f)) recs).",
                        "VernacExtend",
                        "a78cdea15a42c1326e75f1112961de4beb9de63c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (pred (cPairPi1 f)))) (f2 := fun f recs : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
                        "VernacExtend",
                        "d64dc5133e24c0ed6a055d50e87b78e17ea0bc5a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f))) * wellFormedTerms (cPairPi2 f)).",
                        "VernacExtend",
                        "03f402e3e31e8e9459da8fcbf4ae84e44f0cfe54"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => charFunction 2 beq_nat (codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (S (codeLength (cPairPi2 f)))) (f' := fun f : nat => wellFormedTerms (cPairPi2 f)).",
                        "VernacExtend",
                        "252792b7e861b6bcba4a12cae6cc0e8c9e58dc65"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => codeArityR (pred (pred (pred (pred (cPairPi1 f)))))) (f' := fun f : nat => S (codeLength (cPairPi2 f))).",
                        "VernacExtend",
                        "c590410f2e3d6334d9ceeea3fc6c271b47ef2449"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => pred (pred (pred (pred (cPairPi1 f))))).",
                        "VernacExtend",
                        "edcbbf1235df8d2f4aeb91358d06326da43da0d4"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => pred (pred (pred (cPairPi1 f)))); try apply predIsPR.",
                        "VernacExtend",
                        "712ee9962896fe0b40c1c6bdda24ae03bd08ffa8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => pred (pred (cPairPi1 f))); try apply predIsPR.",
                        "VernacExtend",
                        "0cc1c79a36461773e59d398bb0556dece2d4e194"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => pred (cPairPi1 f)); try apply predIsPR.",
                        "VernacExtend",
                        "d998fc221a12061a66e92aff3933f0c98b795bc4"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => codeLength (cPairPi2 f)).",
                        "VernacExtend",
                        "5c87f9c5a90e6a26b49b7b7b27d96156ade4fc41"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply codeLengthIsPR.",
                        "VernacExtend",
                        "f0183684db839de00db84b8ea7e0093d25bccec3"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermsIsPR.",
                        "VernacExtend",
                        "9dc764f7ba3410e0d4186ef5aeb9f4e2cbf32264"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply H3 with (g := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "27d9bd7cf29aaafa234a9c6b32d27814e582fb9a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
                        "VernacExtend",
                        "577c575ee5d0347efbd61a155a291ff3dc622602"
                    ]
                },
                {
                    "command": [
                        "apply H3 with (g := fun f : nat => cPairPi1 (cPairPi2 f)).",
                        "VernacExtend",
                        "ac50af3d099efe716a25eb488a7063417b85680c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply H3 with (g := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "27d9bd7cf29aaafa234a9c6b32d27814e582fb9a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => wellFormedTerm (cPairPi1 (cPairPi2 f)) * wellFormedTerm (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "06fed5790febcec7ff14fd73e48dd4060960f3de"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => wellFormedTerm (cPairPi1 (cPairPi2 f))) (f' := fun f : nat => wellFormedTerm (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "63ce79e89bd94de76551554baa3d7aa2fa1e652d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
                        "VernacExtend",
                        "574d639638c0c8658ff9d2386dea0df6984f8209"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermIsPR.",
                        "VernacExtend",
                        "867e283982fb20f5d2de0d694c7bdc426da2daaf"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "cf13d98900b7072887a0e260da9ee6122b2d0283"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermIsPR.",
                        "VernacExtend",
                        "867e283982fb20f5d2de0d694c7bdc426da2daaf"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}