{
    "filename": "codeSubTerm.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import extEqualNat.",
            "VernacRequire",
            "b54dcb28a918e1b7add174b81952c2b30a6e435b"
        ],
        [
            "Require Vector.",
            "VernacRequire",
            "145bcbe9535700f6fddf277a7fc43bb4df45a9f9"
        ],
        [
            "Section Code_Substitute_Term.",
            "VernacBeginSection",
            "0bc2a264fc13ab62b8a669d60dae58484cd6e369"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Let Formula := Formula L.",
            "VernacDefinition",
            "3d32ab58ebf838c2a87fdc2e6124bfb77b6c785b"
        ],
        [
            "Let Formulas := Formulas L.",
            "VernacDefinition",
            "3e58c6132e0d63871e6929fdf8514df1ca805073"
        ],
        [
            "Let System := System L.",
            "VernacDefinition",
            "cca6eba541a212b17367017275b463c5608aa66d"
        ],
        [
            "Let Term := Term L.",
            "VernacDefinition",
            "38e1762c57b9701000a89090666997db5d597a34"
        ],
        [
            "Let Terms := Terms L.",
            "VernacDefinition",
            "ac274971655c7d87e7a366522fa4f11f94117e84"
        ],
        [
            "Let var := var L.",
            "VernacDefinition",
            "387b134d06ce79979638575c6631443c7143b913"
        ],
        [
            "Let apply := apply L.",
            "VernacDefinition",
            "171f7b3946ad56564d4a09c4656739ed07770a44"
        ],
        [
            "Definition codeSubTermTerms : nat -> nat -> nat -> nat := evalStrongRec 2 (fun t recs v s : nat => cPair (switchPR (cPairPi1 t) (cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t)) (switchPR t (S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0)).",
            "VernacDefinition",
            "d34e3de857dddd80becd30d38acad6307c30ee37"
        ],
        [
            "Definition codeSubTerm (t s v : nat) : nat := cPairPi1 (codeSubTermTerms t s v).",
            "VernacDefinition",
            "249bf12d855b76d8b7716bd885b2525fda8d1aed"
        ],
        [
            "Definition codeSubTerms (t s v : nat) : nat := cPairPi2 (codeSubTermTerms t s v).",
            "VernacDefinition",
            "090dbd4360b6c8f48f60aebd4bd0705d6a1f00eb"
        ],
        [
            "Lemma codeSubTermCorrect : forall (t : Term) (v : nat) (s : Term), codeSubTerm (codeTerm L codeF t) v (codeTerm L codeF s) = codeTerm L codeF (substituteTerm L t v s).",
            "VernacStartTheoremProof",
            "6c15f9bdcf7367124dc709ad5c9e2dcf6963d49f"
        ],
        [
            "set (g := fun t0 recs v0 s0 : nat => cPair (switchPR (cPairPi1 t0) (cPair (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t0) v0) s0 t0)) (switchPR t0 (S (cPair (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs)))) 0)) in *.",
            "VernacExtend",
            "a189e07fea6d8fc2718eb9c82b794dcbfb8302f6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => codeSubTerms (codeTerms L codeF n ts) v (codeTerm L codeF s) = codeTerms L codeF n (substituteTerms L n ts v s)); intros.",
            "VernacExtend",
            "18fa199e20cbc5abb02da0d05f5818ffbf416e8e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (codeTerm L codeF (fol.var L n)) with (cPair 0 n).",
            "VernacExtend",
            "b933330019b19cfdd9873d320d8bea0f6b2962b0"
        ],
        [
            "unfold codeSubTerm in |- *.",
            "VernacExtend",
            "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (eq_nat_dec v n).",
            "VernacExtend",
            "d994ef5a36c04385f3538e80d3dfac39342b9270"
        ],
        [
            "rewrite a.",
            "VernacExtend",
            "905c705a182fa776d319d2bbb7fe34c13fe7d244"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "transitivity (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) (substituteTerms L (arity L (inr (Relations L) f)) t0 v s))).",
            "VernacExtend",
            "2ff6bb5a12a0a67c43231ef25469218cb2d565a1"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "replace (codeTerm L codeF (fol.apply L f t0)) with (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) t0)).",
            "VernacExtend",
            "305574910dd49704c8575f0e3e7a86e247edb990"
        ],
        [
            "generalize (codeF f) (codeTerms L codeF (arity L (inr (Relations L) f)) t0).",
            "VernacExtend",
            "ac3ba805fb2893d65990cd40e3987cbb76bb7ae6"
        ],
        [
            "clear H t0 f.",
            "VernacExtend",
            "958bcce8706e599bb06330a876f3e7a965b9d32b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSubTerm in |- *.",
            "VernacExtend",
            "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (cPair (S n) n0)) 0 (Vector.nil _)) (fun b : nat => codeNth (cPair (S n) n0 - S n0) b)) (evalStrongRec 2 g n0)).",
            "VernacExtend",
            "b6b1ba44a41e5eca6a1af5f5a26e32d65ac95864"
        ],
        [
            "apply (evalStrongRecHelp2 2).",
            "VernacExtend",
            "02d18707cfd32d9e139581caf85eb9b07278cf21"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "unfold codeSubTerms in |- *.",
            "VernacExtend",
            "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "transitivity (S (cPair (codeTerm L codeF (substituteTerm L t0 v s)) (codeTerms L codeF n (substituteTerms L n t1 v s)))).",
            "VernacExtend",
            "4bd2e8214b3dc9b5f81d69edf94d939c1cc4ce5b"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "replace (codeTerms L codeF (S n) (Tcons L n t0 t1)) with (S (cPair (codeTerm L codeF t0) (codeTerms L codeF n t1))).",
            "VernacExtend",
            "d25d8d9601b499accbaad474d8a346e9995d573e"
        ],
        [
            "generalize (codeTerm L codeF t0) (codeTerms L codeF n t1).",
            "VernacExtend",
            "cb2536daee453f107c4f3a1fbc3f2692d3497572"
        ],
        [
            "clear H0 t1 H t0 n.",
            "VernacExtend",
            "f03544051bd9c3c4c5c1c447811b3f573c405131"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSubTerms at 1 in |- *.",
            "VernacExtend",
            "7de08f9b4e255067c481435fe2f764ab36ec82f7"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n) b)) (evalStrongRec 2 g n)).",
            "VernacExtend",
            "28811c47a99b203730a769d64c09905699f5df60"
        ],
        [
            "apply (evalStrongRecHelp2 2).",
            "VernacExtend",
            "02d18707cfd32d9e139581caf85eb9b07278cf21"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n0) b)) (evalStrongRec 2 g n0)).",
            "VernacExtend",
            "1263deb2bd103f7f624a8094c53ad3b18281b6b5"
        ],
        [
            "apply (evalStrongRecHelp2 2).",
            "VernacExtend",
            "02d18707cfd32d9e139581caf85eb9b07278cf21"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSubTermsCorrect : forall (n : nat) (ts : Terms n) (v : nat) (s : Term), codeSubTerms (codeTerms L codeF n ts) v (codeTerm L codeF s) = codeTerms L codeF n (substituteTerms L n ts v s).",
            "VernacStartTheoremProof",
            "742574d60212e7d9fa1a6268f1326b40aec7c927"
        ],
        [
            "set (g := fun t0 recs v0 s0 : nat => cPair (switchPR (cPairPi1 t0) (cPair (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t0) v0) s0 t0)) (switchPR t0 (S (cPair (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs)))) 0)) in *.",
            "VernacExtend",
            "a189e07fea6d8fc2718eb9c82b794dcbfb8302f6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction ts as [| n t ts Hrects].",
            "VernacExtend",
            "4a72ca30982cf76b6ad63620c27c0db203f25a01"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "unfold codeSubTerms in |- *.",
            "VernacExtend",
            "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "transitivity (S (cPair (codeTerm L codeF (substituteTerm L t v s)) (codeTerms L codeF n (substituteTerms L n ts v s)))).",
            "VernacExtend",
            "e7c23d0e052a3ceed6b505a62050a5ccdb031786"
        ],
        [
            "rewrite <- Hrects.",
            "VernacExtend",
            "48886e32242bc9c4c3c27d5b6de856a5ece8a1b2"
        ],
        [
            "rewrite <- codeSubTermCorrect.",
            "VernacExtend",
            "92717c4aabf1de45c9d00a265e3bf8331a7d26a1"
        ],
        [
            "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))).",
            "VernacExtend",
            "ec67ac031fcac994ce145fbf94f2752c0c30c5ee"
        ],
        [
            "generalize (codeTerm L codeF t) (codeTerms L codeF n ts).",
            "VernacExtend",
            "9db89fdb4bfe6ab0b892473035454b148f9d024f"
        ],
        [
            "clear Hrects ts t n.",
            "VernacExtend",
            "f92d32e542cccb6e10428850a95c493dcddd9cce"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeSubTerms at 1 in |- *.",
            "VernacExtend",
            "7de08f9b4e255067c481435fe2f764ab36ec82f7"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n) b)) (evalStrongRec 2 g n)).",
            "VernacExtend",
            "28811c47a99b203730a769d64c09905699f5df60"
        ],
        [
            "apply (evalStrongRecHelp2 2).",
            "VernacExtend",
            "02d18707cfd32d9e139581caf85eb9b07278cf21"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n0) b)) (evalStrongRec 2 g n0)).",
            "VernacExtend",
            "1263deb2bd103f7f624a8094c53ad3b18281b6b5"
        ],
        [
            "apply (evalStrongRecHelp2 2).",
            "VernacExtend",
            "02d18707cfd32d9e139581caf85eb9b07278cf21"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSubTermTermsIsPR : isPR 3 codeSubTermTerms.",
            "VernacStartTheoremProof",
            "de7e52a8cd26e0c6148e8d44f45ccbf11bbdf063"
        ],
        [
            "unfold codeSubTermTerms in |- *.",
            "VernacExtend",
            "78fa377c5bcc5e51a33e40595f9af67e823579e1"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose4_2IsPR with (f1 := fun t recs v s : nat => switchPR (cPairPi1 t) (cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t)) (f2 := fun t recs v s : nat => switchPR t (S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).",
            "VernacExtend",
            "508847625e4f35e4b0abe9a246c70955bdb96619"
        ],
        [
            "apply compose4_3IsPR with (f1 := fun t recs v s : nat => cPairPi1 t) (f2 := fun t recs v s : nat => cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))) (f3 := fun t recs v s : nat => switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t).",
            "VernacExtend",
            "1eb80b7ba645554a8e7107c46ff3c6393b7a5cf3"
        ],
        [
            "apply filter1000IsPR with (g := cPairPi1).",
            "VernacExtend",
            "401ba0685649013927171673c80a85f56baa6b80"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply filter1100IsPR with (g := fun t recs : nat => cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))).",
            "VernacExtend",
            "3db063876ee98aef1ce768a7e7e674730a418cf3"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 t) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)).",
            "VernacExtend",
            "1bf1a8ec110f25aaac04774c469d284d4f715435"
        ],
        [
            "apply filter10IsPR with (g := cPairPi1).",
            "VernacExtend",
            "a9631436474279cdcc19c6f233a004d4e2f4ccbc"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
            "VernacExtend",
            "d614a65ac413ecc35815e5fc3c5414c484bffa05"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "9eadffc2b52fca69266f1655ef040654847ca2ed"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
            "VernacExtend",
            "c982afba640099fcfebdc10cbe162871f7b6724d"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
            "VernacExtend",
            "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply filter1011IsPR with (g := fun t v s : nat => switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t).",
            "VernacExtend",
            "a7c8f1c8cdfc0d633e2ee002f39181dc64afba22"
        ],
        [
            "apply compose3_3IsPR with (f1 := fun t v s : nat => charFunction 2 beq_nat (cPairPi2 t) v) (f2 := fun t v s : nat => s) (f3 := fun t v s : nat => t).",
            "VernacExtend",
            "44f5f98bbbe874a74d8a5d2e3cfc407796704f27"
        ],
        [
            "apply filter110IsPR with (g := fun t v : nat => charFunction 2 beq_nat (cPairPi2 t) v).",
            "VernacExtend",
            "0bcc0c64251cdf752cbb71dbad2156de989845ef"
        ],
        [
            "apply compose2_2IsPR with (f := fun t v : nat => cPairPi2 t) (g := fun t v : nat => v).",
            "VernacExtend",
            "e2da4149f1f57fb53243ec8cf4f623c5a832f4e3"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply pi3_3IsPR.",
            "VernacExtend",
            "6100d98550fd9fe7006e8e40ada8e774ce795e62"
        ],
        [
            "apply pi1_3IsPR.",
            "VernacExtend",
            "69ded56cb54e46793815f38a229f810bef22ec17"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply filter1100IsPR with (g := fun t recs : nat => switchPR t (S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).",
            "VernacExtend",
            "3799c9e22f28c9afe4878fb506854c299a870ae0"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) (f3 := fun t recs : nat => 0).",
            "VernacExtend",
            "1aad403ec0f62fde80cb01c940c22b4d550465d7"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))).",
            "VernacExtend",
            "f5941649aa2c1b7605e107579d4af2df5b30f514"
        ],
        [
            "assert (forall g : nat -> nat, isPR 1 g -> isPR 2 (fun t recs : nat => g (codeNth (t - S (g (pred t))) recs))).",
            "VernacExtend",
            "c8d6cb5d5fad0cb82129ae8d3e6bdf0dbf2b8af8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (g (pred t))) recs).",
            "VernacExtend",
            "b5ebe5cb7c6028c4c4b6c07969290f5d3ecaa88d"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (g (pred t))) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "e6929f1c7c43ceba4fe6fa027904a03b9b6ca3f9"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (g (pred t))).",
            "VernacExtend",
            "ade8233817f6fab3f80b94f51d0fea7065c1262d"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (g (pred t))).",
            "VernacExtend",
            "512f92ea2f7c61f30c6dab3c098032124a01ddbe"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => g (pred t)).",
            "VernacExtend",
            "6bddd9fdecb544c20736a8a3312768110345f000"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
            "VernacExtend",
            "f1971737ccff06d4a4f9987d7058a10fcab655ee"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "exists (composeFunc 2 0 (PRnil _) zeroFunc).",
            "VernacExtend",
            "6d1f0f8ee83bc990d5d6792d2988e872621e2024"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.",
            "VernacStartTheoremProof",
            "860276d0f5730167ffb542e4973865d5051d642b"
        ],
        [
            "unfold codeSubTerm in |- *.",
            "VernacExtend",
            "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
        ],
        [
            "apply compose3_1IsPR.",
            "VernacExtend",
            "88eafa63a316d49b94e7150b3b74edb7bc923d88"
        ],
        [
            "apply codeSubTermTermsIsPR.",
            "VernacExtend",
            "f52eb6d3824492fbd95fd052f802f666e0ff53d9"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.",
            "VernacStartTheoremProof",
            "fe5f816a2f791137d23a8fb3563df5a1a707ea32"
        ],
        [
            "unfold codeSubTerms in |- *.",
            "VernacExtend",
            "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
        ],
        [
            "apply compose3_1IsPR.",
            "VernacExtend",
            "88eafa63a316d49b94e7150b3b74edb7bc923d88"
        ],
        [
            "apply codeSubTermTermsIsPR.",
            "VernacExtend",
            "f52eb6d3824492fbd95fd052f802f666e0ff53d9"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Code_Substitute_Term.",
            "VernacEndSegment",
            "2629687e538a739d206dd4a4539f121c92c49933"
        ]
    ],
    "proofs": [
        {
            "name": "codeSubTermCorrect",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "set (g := fun t0 recs v0 s0 : nat => cPair (switchPR (cPairPi1 t0) (cPair (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t0) v0) s0 t0)) (switchPR t0 (S (cPair (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs)))) 0)) in *.",
                        "VernacExtend",
                        "a189e07fea6d8fc2718eb9c82b794dcbfb8302f6"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => codeSubTerms (codeTerms L codeF n ts) v (codeTerm L codeF s) = codeTerms L codeF n (substituteTerms L n ts v s)); intros.",
                        "VernacExtend",
                        "18fa199e20cbc5abb02da0d05f5818ffbf416e8e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerm L codeF (fol.var L n)) with (cPair 0 n).",
                        "VernacExtend",
                        "b933330019b19cfdd9873d320d8bea0f6b2962b0"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerm in |- *.",
                        "VernacExtend",
                        "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec v n).",
                        "VernacExtend",
                        "d994ef5a36c04385f3538e80d3dfac39342b9270"
                    ]
                },
                {
                    "command": [
                        "rewrite a.",
                        "VernacExtend",
                        "905c705a182fa776d319d2bbb7fe34c13fe7d244"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite beq_nat_not_refl.",
                        "VernacExtend",
                        "1233302f99cf1c86d83f4544c8d696eababc6902"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "transitivity (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) (substituteTerms L (arity L (inr (Relations L) f)) t0 v s))).",
                        "VernacExtend",
                        "2ff6bb5a12a0a67c43231ef25469218cb2d565a1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerm L codeF (fol.apply L f t0)) with (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) t0)).",
                        "VernacExtend",
                        "305574910dd49704c8575f0e3e7a86e247edb990"
                    ]
                },
                {
                    "command": [
                        "generalize (codeF f) (codeTerms L codeF (arity L (inr (Relations L) f)) t0).",
                        "VernacExtend",
                        "ac3ba805fb2893d65990cd40e3987cbb76bb7ae6"
                    ]
                },
                {
                    "command": [
                        "clear H t0 f.",
                        "VernacExtend",
                        "958bcce8706e599bb06330a876f3e7a965b9d32b"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerm in |- *.",
                        "VernacExtend",
                        "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "fold g in |- *.",
                        "VernacExtend",
                        "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "unfold evalList in |- *.",
                        "VernacExtend",
                        "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (cPair (S n) n0)) 0 (Vector.nil _)) (fun b : nat => codeNth (cPair (S n) n0 - S n0) b)) (evalStrongRec 2 g n0)).",
                        "VernacExtend",
                        "b6b1ba44a41e5eca6a1af5f5a26e32d65ac95864"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 2).",
                        "VernacExtend",
                        "02d18707cfd32d9e139581caf85eb9b07278cf21"
                    ]
                },
                {
                    "command": [
                        "apply cPairLt2.",
                        "VernacExtend",
                        "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerms in |- *.",
                        "VernacExtend",
                        "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "transitivity (S (cPair (codeTerm L codeF (substituteTerm L t0 v s)) (codeTerms L codeF n (substituteTerms L n t1 v s)))).",
                        "VernacExtend",
                        "4bd2e8214b3dc9b5f81d69edf94d939c1cc4ce5b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerms L codeF (S n) (Tcons L n t0 t1)) with (S (cPair (codeTerm L codeF t0) (codeTerms L codeF n t1))).",
                        "VernacExtend",
                        "d25d8d9601b499accbaad474d8a346e9995d573e"
                    ]
                },
                {
                    "command": [
                        "generalize (codeTerm L codeF t0) (codeTerms L codeF n t1).",
                        "VernacExtend",
                        "cb2536daee453f107c4f3a1fbc3f2692d3497572"
                    ]
                },
                {
                    "command": [
                        "clear H0 t1 H t0 n.",
                        "VernacExtend",
                        "f03544051bd9c3c4c5c1c447811b3f573c405131"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerms at 1 in |- *.",
                        "VernacExtend",
                        "7de08f9b4e255067c481435fe2f764ab36ec82f7"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "fold g in |- *.",
                        "VernacExtend",
                        "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n) b)) (evalStrongRec 2 g n)).",
                        "VernacExtend",
                        "28811c47a99b203730a769d64c09905699f5df60"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 2).",
                        "VernacExtend",
                        "02d18707cfd32d9e139581caf85eb9b07278cf21"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n0) b)) (evalStrongRec 2 g n0)).",
                        "VernacExtend",
                        "1263deb2bd103f7f624a8094c53ad3b18281b6b5"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 2).",
                        "VernacExtend",
                        "02d18707cfd32d9e139581caf85eb9b07278cf21"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSubTermsCorrect",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "set (g := fun t0 recs v0 s0 : nat => cPair (switchPR (cPairPi1 t0) (cPair (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t0) v0) s0 t0)) (switchPR t0 (S (cPair (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs)))) 0)) in *.",
                        "VernacExtend",
                        "a189e07fea6d8fc2718eb9c82b794dcbfb8302f6"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction ts as [| n t ts Hrects].",
                        "VernacExtend",
                        "4a72ca30982cf76b6ad63620c27c0db203f25a01"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerms in |- *.",
                        "VernacExtend",
                        "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "transitivity (S (cPair (codeTerm L codeF (substituteTerm L t v s)) (codeTerms L codeF n (substituteTerms L n ts v s)))).",
                        "VernacExtend",
                        "e7c23d0e052a3ceed6b505a62050a5ccdb031786"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hrects.",
                        "VernacExtend",
                        "48886e32242bc9c4c3c27d5b6de856a5ece8a1b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- codeSubTermCorrect.",
                        "VernacExtend",
                        "92717c4aabf1de45c9d00a265e3bf8331a7d26a1"
                    ]
                },
                {
                    "command": [
                        "replace (codeTerms L codeF (S n) (Tcons L n t ts)) with (S (cPair (codeTerm L codeF t) (codeTerms L codeF n ts))).",
                        "VernacExtend",
                        "ec67ac031fcac994ce145fbf94f2752c0c30c5ee"
                    ]
                },
                {
                    "command": [
                        "generalize (codeTerm L codeF t) (codeTerms L codeF n ts).",
                        "VernacExtend",
                        "9db89fdb4bfe6ab0b892473035454b148f9d024f"
                    ]
                },
                {
                    "command": [
                        "clear Hrects ts t n.",
                        "VernacExtend",
                        "f92d32e542cccb6e10428850a95c493dcddd9cce"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTerms at 1 in |- *.",
                        "VernacExtend",
                        "7de08f9b4e255067c481435fe2f764ab36ec82f7"
                    ]
                },
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "fold g in |- *.",
                        "VernacExtend",
                        "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n) b)) (evalStrongRec 2 g n)).",
                        "VernacExtend",
                        "28811c47a99b203730a769d64c09905699f5df60"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 2).",
                        "VernacExtend",
                        "02d18707cfd32d9e139581caf85eb9b07278cf21"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 2 1 (Vector.cons _ (evalStrongRecHelp 2 g (S (cPair n n0))) 0 (Vector.nil _)) (fun b : nat => codeNth (S (cPair n n0) - S n0) b)) (evalStrongRec 2 g n0)).",
                        "VernacExtend",
                        "1263deb2bd103f7f624a8094c53ad3b18281b6b5"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 2).",
                        "VernacExtend",
                        "02d18707cfd32d9e139581caf85eb9b07278cf21"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSubTermTermsIsPR",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "unfold codeSubTermTerms in |- *.",
                        "VernacExtend",
                        "78fa377c5bcc5e51a33e40595f9af67e823579e1"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose4_2IsPR with (f1 := fun t recs v s : nat => switchPR (cPairPi1 t) (cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))) (switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t)) (f2 := fun t recs v s : nat => switchPR t (S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).",
                        "VernacExtend",
                        "508847625e4f35e4b0abe9a246c70955bdb96619"
                    ]
                },
                {
                    "command": [
                        "apply compose4_3IsPR with (f1 := fun t recs v s : nat => cPairPi1 t) (f2 := fun t recs v s : nat => cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))) (f3 := fun t recs v s : nat => switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t).",
                        "VernacExtend",
                        "1eb80b7ba645554a8e7107c46ff3c6393b7a5cf3"
                    ]
                },
                {
                    "command": [
                        "apply filter1000IsPR with (g := cPairPi1).",
                        "VernacExtend",
                        "401ba0685649013927171673c80a85f56baa6b80"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply filter1100IsPR with (g := fun t recs : nat => cPair (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs))).",
                        "VernacExtend",
                        "3db063876ee98aef1ce768a7e7e674730a418cf3"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 t) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)).",
                        "VernacExtend",
                        "1bf1a8ec110f25aaac04774c469d284d4f715435"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := cPairPi1).",
                        "VernacExtend",
                        "a9631436474279cdcc19c6f233a004d4e2f4ccbc"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
                        "VernacExtend",
                        "d614a65ac413ecc35815e5fc3c5414c484bffa05"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "9eadffc2b52fca69266f1655ef040654847ca2ed"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
                        "VernacExtend",
                        "c982afba640099fcfebdc10cbe162871f7b6724d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
                        "VernacExtend",
                        "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply filter1011IsPR with (g := fun t v s : nat => switchPR (charFunction 2 beq_nat (cPairPi2 t) v) s t).",
                        "VernacExtend",
                        "a7c8f1c8cdfc0d633e2ee002f39181dc64afba22"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (f1 := fun t v s : nat => charFunction 2 beq_nat (cPairPi2 t) v) (f2 := fun t v s : nat => s) (f3 := fun t v s : nat => t).",
                        "VernacExtend",
                        "44f5f98bbbe874a74d8a5d2e3cfc407796704f27"
                    ]
                },
                {
                    "command": [
                        "apply filter110IsPR with (g := fun t v : nat => charFunction 2 beq_nat (cPairPi2 t) v).",
                        "VernacExtend",
                        "0bcc0c64251cdf752cbb71dbad2156de989845ef"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t v : nat => cPairPi2 t) (g := fun t v : nat => v).",
                        "VernacExtend",
                        "e2da4149f1f57fb53243ec8cf4f623c5a832f4e3"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply pi3_3IsPR.",
                        "VernacExtend",
                        "6100d98550fd9fe7006e8e40ada8e774ce795e62"
                    ]
                },
                {
                    "command": [
                        "apply pi1_3IsPR.",
                        "VernacExtend",
                        "69ded56cb54e46793815f38a229f810bef22ec17"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply filter1100IsPR with (g := fun t recs : nat => switchPR t (S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).",
                        "VernacExtend",
                        "3799c9e22f28c9afe4878fb506854c299a870ae0"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => S (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) (f3 := fun t recs : nat => 0).",
                        "VernacExtend",
                        "1aad403ec0f62fde80cb01c940c22b4d550465d7"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))).",
                        "VernacExtend",
                        "f5941649aa2c1b7605e107579d4af2df5b30f514"
                    ]
                },
                {
                    "command": [
                        "assert (forall g : nat -> nat, isPR 1 g -> isPR 2 (fun t recs : nat => g (codeNth (t - S (g (pred t))) recs))).",
                        "VernacExtend",
                        "c8d6cb5d5fad0cb82129ae8d3e6bdf0dbf2b8af8"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (g (pred t))) recs).",
                        "VernacExtend",
                        "b5ebe5cb7c6028c4c4b6c07969290f5d3ecaa88d"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (g (pred t))) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "e6929f1c7c43ceba4fe6fa027904a03b9b6ca3f9"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (g (pred t))).",
                        "VernacExtend",
                        "ade8233817f6fab3f80b94f51d0fea7065c1262d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (g (pred t))).",
                        "VernacExtend",
                        "512f92ea2f7c61f30c6dab3c098032124a01ddbe"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => g (pred t)).",
                        "VernacExtend",
                        "6bddd9fdecb544c20736a8a3312768110345f000"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
                        "VernacExtend",
                        "f1971737ccff06d4a4f9987d7058a10fcab655ee"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "exists (composeFunc 2 0 (PRnil _) zeroFunc).",
                        "VernacExtend",
                        "6d1f0f8ee83bc990d5d6792d2988e872621e2024"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSubTermIsPR",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "unfold codeSubTerm in |- *.",
                        "VernacExtend",
                        "e03496aa5bbd8fee7656c17f9e00e3617608ca38"
                    ]
                },
                {
                    "command": [
                        "apply compose3_1IsPR.",
                        "VernacExtend",
                        "88eafa63a316d49b94e7150b3b74edb7bc923d88"
                    ]
                },
                {
                    "command": [
                        "apply codeSubTermTermsIsPR.",
                        "VernacExtend",
                        "f52eb6d3824492fbd95fd052f802f666e0ff53d9"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeSubTermsIsPR",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "unfold codeSubTerms in |- *.",
                        "VernacExtend",
                        "ffc972c5d63609ca3f7d23ae8d0eb0e68d82d7ce"
                    ]
                },
                {
                    "command": [
                        "apply compose3_1IsPR.",
                        "VernacExtend",
                        "88eafa63a316d49b94e7150b3b74edb7bc923d88"
                    ]
                },
                {
                    "command": [
                        "apply codeSubTermTermsIsPR.",
                        "VernacExtend",
                        "f52eb6d3824492fbd95fd052f802f666e0ff53d9"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}