{
    "filename": "codeList.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Export Coq.Lists.List.",
            "VernacRequire",
            "7c1471b13b8fe1735c40c05b21efc17c0f48ab89"
        ],
        [
            "Require Import ListExt.",
            "VernacRequire",
            "8c4c029b2c43ab5886e4af5e6402bea050085fed"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Vector.",
            "VernacRequire",
            "145bcbe9535700f6fddf277a7fc43bb4df45a9f9"
        ],
        [
            "Require Import extEqualNat.",
            "VernacRequire",
            "b54dcb28a918e1b7add174b81952c2b30a6e435b"
        ],
        [
            "Definition codeLength : nat -> nat := evalStrongRec 0 (fun n Hrecs : nat => switchPR n (S (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) 0).",
            "VernacDefinition",
            "a4f8af2363519ef2994a69b9f9db11756354da3b"
        ],
        [
            "Lemma codeLengthCorrect : forall l : list nat, codeLength (codeList l) = length l.",
            "VernacStartTheoremProof",
            "00654e51508cb85bbdd3ec00b73532d524e4140d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction l as [| a l Hrecl].",
            "VernacExtend",
            "fd09d6abd5c50f5308a8699ed52e53f02987fb3d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeLength in |- *.",
            "VernacExtend",
            "f1327ac2e88732f842786d349ace91ca75093d63"
        ],
        [
            "set (f := fun n Hrecs : nat => switchPR n (S (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) 0) in *.",
            "VernacExtend",
            "707cd80fe105795d8ebb6b629e7ecf4cf56818a9"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "unfold f at 1 in |- *.",
            "VernacExtend",
            "08b658f3c9d6682c5c9d104bffebf50a43a10523"
        ],
        [
            "rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "apply eq_S.",
            "VernacExtend",
            "8ef0b219ea0189c2d80bb55d03c4c9f24beca469"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply Hrecl.",
            "VernacExtend",
            "8bd42cb52486995858aeeeb0e7730132f95e798f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "generalize (cPair a (codeList l)).",
            "VernacExtend",
            "e4d1241a65a8586e20011201997f62358428173b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply le_trans with (cPair (cPairPi1 n) (cPairPi2 n)).",
            "VernacExtend",
            "9772f5520fd64e67e853ced297edf5e6aba9b726"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeLengthIsPR : isPR 1 codeLength.",
            "VernacStartTheoremProof",
            "7f7597f794d117b7166cd14a804822a77097ad3b"
        ],
        [
            "unfold codeLength in |- *.",
            "VernacExtend",
            "f1327ac2e88732f842786d349ace91ca75093d63"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun n Hrecs : nat => n) (f2 := fun n Hrecs : nat => S (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) (f3 := fun n Hrecs : nat => 0).",
            "VernacExtend",
            "cd2ea7682520a5c6488f0e346f58e6d4cd14c5c3"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "apply compose2_1IsPR with (f := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "8e3280115de35c3a0fa1870affd5c17bbdf1ff6a"
        ],
        [
            "apply compose2_2IsPR with (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
            "VernacExtend",
            "6e056f41f7214e34cc14e0c52a9b4da9cac0e821"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
            "VernacExtend",
            "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
        ],
        [
            "apply compose1_2IsPR with (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
            "VernacExtend",
            "30ae0433183fc7324188cc760da0c081fb977305"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun n : nat => cPairPi2 (pred n)).",
            "VernacExtend",
            "ad5a304b721b782ce2f43e9df603aa0debe931a4"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeApp : nat -> nat -> nat := evalStrongRec 1 (fun n Hrecs p1 : nat => switchPR n (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))) p1).",
            "VernacDefinition",
            "0f732fcdf023c9bc2e0a69e1821d0ec581786ae4"
        ],
        [
            "Lemma codeAppCorrect : forall l1 l2 : list nat, codeApp (codeList l1) (codeList l2) = codeList (l1 ++ l2).",
            "VernacStartTheoremProof",
            "2f9e0f7d5e90a46db5c4b57a0bca8e31e33b9e6c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeApp in |- *.",
            "VernacExtend",
            "f1a7e4eb6a0cae71406c95268afaf8662de90ae2"
        ],
        [
            "set (f := fun n Hrecs p1 : nat => switchPR n (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))) p1) in *.",
            "VernacExtend",
            "26592bf00af426ccff777e5c43abff23fae86a45"
        ],
        [
            "induction l1 as [| a l1 Hrecl1].",
            "VernacExtend",
            "779d61903a155e72fa3312bb5b79b9ee13e99f55"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold f at 2 in |- *.",
            "VernacExtend",
            "767ef188a6777d3bb03698e42f6b1423d873411e"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "set (n := S (cPair a (codeList l1))) in *.",
            "VernacExtend",
            "7e7a629bc3a2b3e1653e26b220bf8aac46ea7ebf"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "replace (codeList (l1 ++ l2)) with (codeNth (cPair a (codeList l1) - codeList l1) (evalStrongRecHelp 1 f n (codeList l2))).",
            "VernacExtend",
            "d26195cddfec265297ea4f3ad678401e8263057a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (extEqual 1 (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S (codeList l1)) b)) (evalStrongRec 1 f (codeList l1))).",
            "VernacExtend",
            "bc6201d9107fae21bb4f6d6024df3dbe609d1ffd"
        ],
        [
            "apply (evalStrongRecHelp2 1).",
            "VernacExtend",
            "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
        ],
        [
            "unfold n in |- *.",
            "VernacExtend",
            "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeAppIsPR : isPR 2 codeApp.",
            "VernacStartTheoremProof",
            "76bbe058d9e89ef0c463d69f1a828be148e638a8"
        ],
        [
            "unfold codeApp in |- *.",
            "VernacExtend",
            "f1a7e4eb6a0cae71406c95268afaf8662de90ae2"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose3_3IsPR with (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))) (f3 := fun n Hrecs p1 : nat => p1).",
            "VernacExtend",
            "4e4f3d74c232137c9e7bb47ad45388d9dc76cbe0"
        ],
        [
            "apply pi1_3IsPR.",
            "VernacExtend",
            "69ded56cb54e46793815f38a229f810bef22ec17"
        ],
        [
            "apply filter110IsPR with (g := fun n Hrecs : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))).",
            "VernacExtend",
            "b91272e9b9a0d801b4468a07d70b2db113b14fe4"
        ],
        [
            "apply compose2_1IsPR with (g := S) (f := fun n Hrecs : nat => cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
            "VernacExtend",
            "732c8bee94a7a54c47ab6a5f9c768aa543f20470"
        ],
        [
            "apply compose2_2IsPR with (h := cPair) (f := fun n Hrecs : nat => cPairPi1 (pred n)) (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "309040a2f97028db84bb26355ae20fcad0ffd5fe"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
            "VernacExtend",
            "d407e250715fad3e3af9716cfc6b4289b863cfcc"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
            "VernacExtend",
            "241c82ae49dba53d73d5333f382a6c1e5d72b654"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
            "VernacExtend",
            "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
        ],
        [
            "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
            "VernacExtend",
            "a884b8bf17039b0a84ad3525c28c28524f490aed"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (g := S) (f := fun n : nat => cPairPi2 (pred n)).",
            "VernacExtend",
            "dc070832a219cf53326a898798c73e6b6904bd27"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply pi3_3IsPR.",
            "VernacExtend",
            "6100d98550fd9fe7006e8e40ada8e774ce795e62"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeListRemove (a l : nat) : nat := evalStrongRec 1 (fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (codeNth (n - S (cPairPi2 (pred n))) Hrecs) (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)))) (codeList nil)) l a.",
            "VernacDefinition",
            "bebdc318037ce06db611f76bcbbd153fd6d7b6e4"
        ],
        [
            "Lemma codeListRemoveCorrect : forall (a : nat) (l : list nat), codeListRemove a (codeList l) = codeList (list_remove nat eq_nat_dec a l).",
            "VernacStartTheoremProof",
            "88a134c5cc73bd2240170567c186dda2ac817d1f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeListRemove in |- *.",
            "VernacExtend",
            "c082b043981f723d3cb38a0a0b36cbb97c2e71f6"
        ],
        [
            "set (f := fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (codeNth (n - S (cPairPi2 (pred n))) Hrecs) (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)))) (codeList nil)) in *.",
            "VernacExtend",
            "c662b669c5daa207f113db0c51d40703525e0e64"
        ],
        [
            "induction l as [| a0 l Hrecl].",
            "VernacExtend",
            "b063036f8ae5d0fe1b76406eacc1e811736be163"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold f at 2 in |- *.",
            "VernacExtend",
            "767ef188a6777d3bb03698e42f6b1423d873411e"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "set (n := codeList (a0 :: l)) in *.",
            "VernacExtend",
            "cb4e72cbe3b0fd8a87bacc9c6ab0424b9ba20bb7"
        ],
        [
            "set (A := n - S (cPairPi2 (pred n))) in *.",
            "VernacExtend",
            "f72306f5c05e1736a8686c278ada8ca5e8081489"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "assert (extEqual 1 (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S (cPairPi2 (pred n))) b)) (evalStrongRec 1 f (cPairPi2 (pred n)))).",
            "VernacExtend",
            "96e9b5793ca051389067cef483c8ed7226d8853b"
        ],
        [
            "apply (evalStrongRecHelp2 1).",
            "VernacExtend",
            "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold n in |- *.",
            "VernacExtend",
            "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "induction (eq_nat_dec a0 a).",
            "VernacExtend",
            "777179fb192954155aa31f94025156fdcf12548d"
        ],
        [
            "rewrite a1.",
            "VernacExtend",
            "c6546be870b758244a7d9e49708e94339469c18b"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold A in |- *.",
            "VernacExtend",
            "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (codeList (list_remove nat eq_nat_dec a l)) with (codeNth A (evalStrongRecHelp 1 f n a)).",
            "VernacExtend",
            "13c2128e68efe0c99710d26c59fecbc6f40e6420"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A in |- *.",
            "VernacExtend",
            "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeListRemoveIsPR : isPR 2 codeListRemove.",
            "VernacStartTheoremProof",
            "5ffd4d3d2b361ffaa2fac0bad5ca56573d04eb82"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeListRemove in |- *.",
            "VernacExtend",
            "c082b043981f723d3cb38a0a0b36cbb97c2e71f6"
        ],
        [
            "apply swapIsPR.",
            "VernacExtend",
            "df1101069b402c0319f06625614023d04b616873"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (codeNth (n - S (cPairPi2 (pred n))) Hrecs) (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)))) (f3 := fun n Hrecs p1 : nat => codeList nil).",
            "VernacExtend",
            "db6648eecc0c1986da2b685ed041829279f75424"
        ],
        [
            "apply pi1_3IsPR.",
            "VernacExtend",
            "69ded56cb54e46793815f38a229f810bef22ec17"
        ],
        [
            "assert (isPR 3 (fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
            "VernacExtend",
            "31c48138852e000ff42c5590ca8ce66b60fb35d4"
        ],
        [
            "apply filter110IsPR with (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "b89168038a0f8a9501af68164e07095f64e5fd28"
        ],
        [
            "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
            "VernacExtend",
            "241c82ae49dba53d73d5333f382a6c1e5d72b654"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
            "VernacExtend",
            "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
        ],
        [
            "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
            "VernacExtend",
            "a884b8bf17039b0a84ad3525c28c28524f490aed"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun n : nat => cPairPi2 (pred n)).",
            "VernacExtend",
            "ad5a304b721b782ce2f43e9df603aa0debe931a4"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (f2 := fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs) (f3 := fun n Hrecs p1 : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))).",
            "VernacExtend",
            "fea002d9e81f20f92249ba1b8c89f5c1438da940"
        ],
        [
            "apply filter101IsPR with (g := fun n p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1).",
            "VernacExtend",
            "19a767d2a16a35ad77bf12b15b0e98fef28d8e0b"
        ],
        [
            "apply compose2_2IsPR with (f := fun n p1 : nat => cPairPi1 (pred n)) (g := fun n p1 : nat => p1).",
            "VernacExtend",
            "40f83c94d87f16e4ddd936dd2243fa6633901e46"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
            "VernacExtend",
            "d407e250715fad3e3af9716cfc6b4289b863cfcc"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply compose3_1IsPR with (g := S) (f := fun n Hrecs _ : nat => cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
            "VernacExtend",
            "a2e3e27832404777698fd496b6e63a3afaf7d438"
        ],
        [
            "apply compose3_2IsPR with (g := cPair) (f1 := fun n Hrecs _ : nat => cPairPi1 (pred n)) (f2 := fun n Hrecs _ : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "f91ce5555e3db444290f22a3508825ce38f4c337"
        ],
        [
            "apply filter100IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
            "VernacExtend",
            "4f7ea02ac52a44ea55c60cd6725e9bb4dc7645f4"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "exists (composeFunc 3 0 (PRnil _) zeroFunc).",
            "VernacExtend",
            "76ea322d25446fc406686182731c89021d42ff8e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeIn (a l : nat) : nat := evalStrongRec 1 (fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) 1 (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) 0) l a.",
            "VernacDefinition",
            "aa65ed7f0a7d8886cbfb3e2695f79a919dd0f292"
        ],
        [
            "Lemma codeInCorrect : forall (a : nat) (l : list nat), codeIn a (codeList l) = match In_dec eq_nat_dec a l with | left _ => 1 | right _ => 0 end.",
            "VernacStartTheoremProof",
            "c7b73d4bca459fdcfea14057a35145b3fc566b06"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction l as [| a0 l Hrecl]; simpl in |- *.",
            "VernacExtend",
            "8f96e727aca13332cc6089ba8031b2f0f8b0c647"
        ],
        [
            "unfold codeIn, evalStrongRec in |- *.",
            "VernacExtend",
            "b4ed0212456186914f297c2b22243d62ddb7588a"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold codeIn, evalStrongRec in |- *.",
            "VernacExtend",
            "b4ed0212456186914f297c2b22243d62ddb7588a"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "set (f := fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) 1 (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) 0) in *.",
            "VernacExtend",
            "d24ebf776e940c86e380abaea4e868d013694004"
        ],
        [
            "set (m := cPairPi2 (pred (S (cPair a0 (codeList l))))) in *.",
            "VernacExtend",
            "4c114fcbaae11425a2a5e1cf08c45eb542a50e4c"
        ],
        [
            "set (n := S (cPair a0 (codeList l))) in *.",
            "VernacExtend",
            "6b246b467606bb2d218481e28ed5037d20c6f65e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1.",
            "VernacExtend",
            "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
        ],
        [
            "induction (eq_nat_dec a0 a).",
            "VernacExtend",
            "777179fb192954155aa31f94025156fdcf12548d"
        ],
        [
            "rewrite a1.",
            "VernacExtend",
            "c6546be870b758244a7d9e49708e94339469c18b"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (extEqual _ (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S m) b)) (evalStrongRec 1 f m)).",
            "VernacExtend",
            "37a7f6de14336eea1cd65715b4ce60d06df0a477"
        ],
        [
            "apply (evalStrongRecHelp2 1).",
            "VernacExtend",
            "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
        ],
        [
            "unfold m in |- *.",
            "VernacExtend",
            "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
        ],
        [
            "unfold n in |- *.",
            "VernacExtend",
            "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "unfold codeIn in Hrecl.",
            "VernacExtend",
            "0dcda558b91895a2cc8a36dbd495d405b2eeb479"
        ],
        [
            "move f after Hrecl; fold f in Hrecl.",
            "VernacExtend",
            "7bc2d84f2cb61af4ddbae3d65565acbc49111de7"
        ],
        [
            "unfold m, n in |- *.",
            "VernacExtend",
            "0ff12ebfe82335346b3b30eda17315cc96970de3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "rewrite Hrecl.",
            "VernacExtend",
            "a328513bb3b35e223eb11cf215df9e9470d5af7e"
        ],
        [
            "clear H f Hrecl.",
            "VernacExtend",
            "6a3f1c25a12278fda3f90b78d5757f713bf22d35"
        ],
        [
            "induction (In_dec eq_nat_dec a l).",
            "VernacExtend",
            "cc23ab0671281072e4d0a7ddff79504ad38e3d03"
        ],
        [
            "induction (In_dec eq_nat_dec a (a0 :: l)).",
            "VernacExtend",
            "74f89d65c49b871b5d46b57c0860e784a6093170"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim b0.",
            "VernacExtend",
            "4506652c796867e8c9be690f8925bec68461304f"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "induction (In_dec eq_nat_dec a (a0 :: l)).",
            "VernacExtend",
            "74f89d65c49b871b5d46b57c0860e784a6093170"
        ],
        [
            "induction a1 as [H| H].",
            "VernacExtend",
            "597270e60425a0fd290239eb009a4ecf1ae19c55"
        ],
        [
            "elim b; auto.",
            "VernacExtend",
            "4e727fcd59e1474a52ec73620188fd67d9ebc23d"
        ],
        [
            "elim b0; auto.",
            "VernacExtend",
            "b9a3c1c4298185d878ae6d9b9a2e3e931430882e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeInIsPR : isPR 2 codeIn.",
            "VernacStartTheoremProof",
            "189ce598a2120b289195b237ad9758f166939e75"
        ],
        [
            "unfold codeIn in |- *.",
            "VernacExtend",
            "f1f46c195d2ff470d7cacd674de182f386464ce1"
        ],
        [
            "apply swapIsPR.",
            "VernacExtend",
            "df1101069b402c0319f06625614023d04b616873"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) 1 (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) (f3 := fun n Hrecs p1 : nat => 0).",
            "VernacExtend",
            "730f2f259ac23cca1759db56227c519dc497aebd"
        ],
        [
            "apply pi1_3IsPR.",
            "VernacExtend",
            "69ded56cb54e46793815f38a229f810bef22ec17"
        ],
        [
            "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (f2 := fun n Hrecs p1 : nat => 1) (f3 := fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "80e0e3407c69543779cfb7e52578efd3f946ada6"
        ],
        [
            "apply filter101IsPR with (g := fun n p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1).",
            "VernacExtend",
            "19a767d2a16a35ad77bf12b15b0e98fef28d8e0b"
        ],
        [
            "apply compose2_2IsPR with (h := charFunction 2 beq_nat) (f := fun n p1 : nat => cPairPi1 (pred n)) (g := fun n p1 : nat => p1).",
            "VernacExtend",
            "b8475f84ea1717f046b8366b042122912484fec5"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
            "VernacExtend",
            "d407e250715fad3e3af9716cfc6b4289b863cfcc"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply filter100IsPR with (g := fun _ : nat => 1).",
            "VernacExtend",
            "80ed1683612eb3e3881ab3565a9231500e1218b5"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply filter110IsPR with (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
            "VernacExtend",
            "b89168038a0f8a9501af68164e07095f64e5fd28"
        ],
        [
            "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
            "VernacExtend",
            "241c82ae49dba53d73d5333f382a6c1e5d72b654"
        ],
        [
            "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
            "VernacExtend",
            "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
        ],
        [
            "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
            "VernacExtend",
            "a884b8bf17039b0a84ad3525c28c28524f490aed"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (g := S) (f := fun n : nat => cPairPi2 (pred n)).",
            "VernacExtend",
            "dc070832a219cf53326a898798c73e6b6904bd27"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply filter100IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "3fa0a9178776b7252cfaafa2bc5183eeda3b87d6"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeNoDup : nat -> nat := evalStrongRec 0 (fun l recs : nat => switchPR l (switchPR (codeIn (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)) (codeNth (l - S (cPairPi2 (pred l))) recs) (S (cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)))) 0).",
            "VernacDefinition",
            "8de338ef637d156eb189b0795710a49317649002"
        ],
        [
            "Lemma codeNoDupCorrect : forall l : list nat, codeNoDup (codeList l) = codeList (no_dup _ eq_nat_dec l).",
            "VernacStartTheoremProof",
            "220533904a7917931a60211fe2336d1f761c634b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeNoDup in |- *.",
            "VernacExtend",
            "92f61546fa021358894a6c640ec83296ac38b21c"
        ],
        [
            "set (g := fun l0 recs : nat => switchPR l0 (switchPR (codeIn (cPairPi1 (pred l0)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs) (S (cPair (cPairPi1 (pred l0)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)))) 0) in *.",
            "VernacExtend",
            "80ce7c6b80fded8fd349f813f9a37ee05bd253c1"
        ],
        [
            "induction l as [| a l Hrecl].",
            "VernacExtend",
            "fd09d6abd5c50f5308a8699ed52e53f02987fb3d"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "rewrite Hrecl.",
            "VernacExtend",
            "a328513bb3b35e223eb11cf215df9e9470d5af7e"
        ],
        [
            "rewrite codeInCorrect.",
            "VernacExtend",
            "dd48b7b346befe83481fe8e1e05cd1e924730a51"
        ],
        [
            "induction (In_dec eq_nat_dec a (no_dup nat eq_nat_dec l)).",
            "VernacExtend",
            "f7e67877bd0224a96a5dcf0386e82dbb3579839c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2A.",
            "VernacExtend",
            "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeNoDupIsPR : isPR 1 codeNoDup.",
            "VernacStartTheoremProof",
            "9c6ba405d88e6c2d644b8456c493cabc001371c5"
        ],
        [
            "unfold codeNoDup in |- *.",
            "VernacExtend",
            "92f61546fa021358894a6c640ec83296ac38b21c"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun l recs : nat => l) (f2 := fun l recs : nat => switchPR (codeIn (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)) (codeNth (l - S (cPairPi2 (pred l))) recs) (S (cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)))) (f3 := fun l recs : nat => 0).",
            "VernacExtend",
            "c983e408193e966a173a860a5fda2f36009e6c1d"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "assert (isPR 2 (fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs)).",
            "VernacExtend",
            "e040d8f76bb06a6d5e84e053100be8cd98edbd49"
        ],
        [
            "apply callIsPR with (g := fun l : nat => cPairPi2 (pred l)).",
            "VernacExtend",
            "2a6702accb58f7c4ae440aefdaa440f075649b0b"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun l recs : nat => codeIn (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)) (f2 := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs) (f3 := fun l recs : nat => S (cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs))).",
            "VernacExtend",
            "a7ef01c7bef12198566443b0ba02eac579517037"
        ],
        [
            "apply compose2_2IsPR with (f := fun l recs : nat => cPairPi1 (pred l)) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
            "VernacExtend",
            "41b193b5a1ceea9a33caec6d30107c1f12d42417"
        ],
        [
            "apply filter10IsPR with (g := fun l : nat => cPairPi1 (pred l)).",
            "VernacExtend",
            "dc06ff475b521a2b45914f96fe431a5b76261795"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeInIsPR.",
            "VernacExtend",
            "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose2_1IsPR with (f := fun l recs : nat => cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)).",
            "VernacExtend",
            "975a600d4b8dc6615cb54d8a7f6834d58fc80330"
        ],
        [
            "apply compose2_2IsPR with (f := fun l recs : nat => cPairPi1 (pred l)) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
            "VernacExtend",
            "41b193b5a1ceea9a33caec6d30107c1f12d42417"
        ],
        [
            "apply filter10IsPR with (g := fun l : nat => cPairPi1 (pred l)).",
            "VernacExtend",
            "dc06ff475b521a2b45914f96fe431a5b76261795"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "codeLengthIsPR",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "unfold codeLength in |- *.",
                        "VernacExtend",
                        "f1327ac2e88732f842786d349ace91ca75093d63"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun n Hrecs : nat => n) (f2 := fun n Hrecs : nat => S (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) (f3 := fun n Hrecs : nat => 0).",
                        "VernacExtend",
                        "cd2ea7682520a5c6488f0e346f58e6d4cd14c5c3"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "8e3280115de35c3a0fa1870affd5c17bbdf1ff6a"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
                        "VernacExtend",
                        "6e056f41f7214e34cc14e0c52a9b4da9cac0e821"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "30ae0433183fc7324188cc760da0c081fb977305"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun n : nat => cPairPi2 (pred n)).",
                        "VernacExtend",
                        "ad5a304b721b782ce2f43e9df603aa0debe931a4"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeAppCorrect",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeApp in |- *.",
                        "VernacExtend",
                        "f1a7e4eb6a0cae71406c95268afaf8662de90ae2"
                    ]
                },
                {
                    "command": [
                        "set (f := fun n Hrecs p1 : nat => switchPR n (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))) p1) in *.",
                        "VernacExtend",
                        "26592bf00af426ccff777e5c43abff23fae86a45"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| a l1 Hrecl1].",
                        "VernacExtend",
                        "779d61903a155e72fa3312bb5b79b9ee13e99f55"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold f at 2 in |- *.",
                        "VernacExtend",
                        "767ef188a6777d3bb03698e42f6b1423d873411e"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "set (n := S (cPair a (codeList l1))) in *.",
                        "VernacExtend",
                        "7e7a629bc3a2b3e1653e26b220bf8aac46ea7ebf"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "replace (codeList (l1 ++ l2)) with (codeNth (cPair a (codeList l1) - codeList l1) (evalStrongRecHelp 1 f n (codeList l2))).",
                        "VernacExtend",
                        "d26195cddfec265297ea4f3ad678401e8263057a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual 1 (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S (codeList l1)) b)) (evalStrongRec 1 f (codeList l1))).",
                        "VernacExtend",
                        "bc6201d9107fae21bb4f6d6024df3dbe609d1ffd"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 1).",
                        "VernacExtend",
                        "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
                    ]
                },
                {
                    "command": [
                        "unfold n in |- *.",
                        "VernacExtend",
                        "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeAppIsPR",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "unfold codeApp in |- *.",
                        "VernacExtend",
                        "f1a7e4eb6a0cae71406c95268afaf8662de90ae2"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))) (f3 := fun n Hrecs p1 : nat => p1).",
                        "VernacExtend",
                        "4e4f3d74c232137c9e7bb47ad45388d9dc76cbe0"
                    ]
                },
                {
                    "command": [
                        "apply pi1_3IsPR.",
                        "VernacExtend",
                        "69ded56cb54e46793815f38a229f810bef22ec17"
                    ]
                },
                {
                    "command": [
                        "apply filter110IsPR with (g := fun n Hrecs : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))).",
                        "VernacExtend",
                        "b91272e9b9a0d801b4468a07d70b2db113b14fe4"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (g := S) (f := fun n Hrecs : nat => cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
                        "VernacExtend",
                        "732c8bee94a7a54c47ab6a5f9c768aa543f20470"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (h := cPair) (f := fun n Hrecs : nat => cPairPi1 (pred n)) (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "309040a2f97028db84bb26355ae20fcad0ffd5fe"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
                        "VernacExtend",
                        "d407e250715fad3e3af9716cfc6b4289b863cfcc"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
                        "VernacExtend",
                        "241c82ae49dba53d73d5333f382a6c1e5d72b654"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "a884b8bf17039b0a84ad3525c28c28524f490aed"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (g := S) (f := fun n : nat => cPairPi2 (pred n)).",
                        "VernacExtend",
                        "dc070832a219cf53326a898798c73e6b6904bd27"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply pi3_3IsPR.",
                        "VernacExtend",
                        "6100d98550fd9fe7006e8e40ada8e774ce795e62"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeListRemoveCorrect",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeListRemove in |- *.",
                        "VernacExtend",
                        "c082b043981f723d3cb38a0a0b36cbb97c2e71f6"
                    ]
                },
                {
                    "command": [
                        "set (f := fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (codeNth (n - S (cPairPi2 (pred n))) Hrecs) (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)))) (codeList nil)) in *.",
                        "VernacExtend",
                        "c662b669c5daa207f113db0c51d40703525e0e64"
                    ]
                },
                {
                    "command": [
                        "induction l as [| a0 l Hrecl].",
                        "VernacExtend",
                        "b063036f8ae5d0fe1b76406eacc1e811736be163"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold f at 2 in |- *.",
                        "VernacExtend",
                        "767ef188a6777d3bb03698e42f6b1423d873411e"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "set (n := codeList (a0 :: l)) in *.",
                        "VernacExtend",
                        "cb4e72cbe3b0fd8a87bacc9c6ab0424b9ba20bb7"
                    ]
                },
                {
                    "command": [
                        "set (A := n - S (cPairPi2 (pred n))) in *.",
                        "VernacExtend",
                        "f72306f5c05e1736a8686c278ada8ca5e8081489"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual 1 (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S (cPairPi2 (pred n))) b)) (evalStrongRec 1 f (cPairPi2 (pred n)))).",
                        "VernacExtend",
                        "96e9b5793ca051389067cef483c8ed7226d8853b"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 1).",
                        "VernacExtend",
                        "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold n in |- *.",
                        "VernacExtend",
                        "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec a0 a).",
                        "VernacExtend",
                        "777179fb192954155aa31f94025156fdcf12548d"
                    ]
                },
                {
                    "command": [
                        "rewrite a1.",
                        "VernacExtend",
                        "c6546be870b758244a7d9e49708e94339469c18b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *.",
                        "VernacExtend",
                        "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "rewrite beq_nat_not_refl.",
                        "VernacExtend",
                        "1233302f99cf1c86d83f4544c8d696eababc6902"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (codeList (list_remove nat eq_nat_dec a l)) with (codeNth A (evalStrongRecHelp 1 f n a)).",
                        "VernacExtend",
                        "13c2128e68efe0c99710d26c59fecbc6f40e6420"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A in |- *.",
                        "VernacExtend",
                        "3d4031a5dbdaa51031d69f7b1bd339e3135314dd"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeListRemoveIsPR",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeListRemove in |- *.",
                        "VernacExtend",
                        "c082b043981f723d3cb38a0a0b36cbb97c2e71f6"
                    ]
                },
                {
                    "command": [
                        "apply swapIsPR.",
                        "VernacExtend",
                        "df1101069b402c0319f06625614023d04b616873"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (codeNth (n - S (cPairPi2 (pred n))) Hrecs) (S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)))) (f3 := fun n Hrecs p1 : nat => codeList nil).",
                        "VernacExtend",
                        "db6648eecc0c1986da2b685ed041829279f75424"
                    ]
                },
                {
                    "command": [
                        "apply pi1_3IsPR.",
                        "VernacExtend",
                        "69ded56cb54e46793815f38a229f810bef22ec17"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 3 (fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
                        "VernacExtend",
                        "31c48138852e000ff42c5590ca8ce66b60fb35d4"
                    ]
                },
                {
                    "command": [
                        "apply filter110IsPR with (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "b89168038a0f8a9501af68164e07095f64e5fd28"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
                        "VernacExtend",
                        "241c82ae49dba53d73d5333f382a6c1e5d72b654"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "a884b8bf17039b0a84ad3525c28c28524f490aed"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun n : nat => cPairPi2 (pred n)).",
                        "VernacExtend",
                        "ad5a304b721b782ce2f43e9df603aa0debe931a4"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (f2 := fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs) (f3 := fun n Hrecs p1 : nat => S (cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs))).",
                        "VernacExtend",
                        "fea002d9e81f20f92249ba1b8c89f5c1438da940"
                    ]
                },
                {
                    "command": [
                        "apply filter101IsPR with (g := fun n p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1).",
                        "VernacExtend",
                        "19a767d2a16a35ad77bf12b15b0e98fef28d8e0b"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun n p1 : nat => cPairPi1 (pred n)) (g := fun n p1 : nat => p1).",
                        "VernacExtend",
                        "40f83c94d87f16e4ddd936dd2243fa6633901e46"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
                        "VernacExtend",
                        "d407e250715fad3e3af9716cfc6b4289b863cfcc"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply compose3_1IsPR with (g := S) (f := fun n Hrecs _ : nat => cPair (cPairPi1 (pred n)) (codeNth (n - S (cPairPi2 (pred n))) Hrecs)).",
                        "VernacExtend",
                        "a2e3e27832404777698fd496b6e63a3afaf7d438"
                    ]
                },
                {
                    "command": [
                        "apply compose3_2IsPR with (g := cPair) (f1 := fun n Hrecs _ : nat => cPairPi1 (pred n)) (f2 := fun n Hrecs _ : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "f91ce5555e3db444290f22a3508825ce38f4c337"
                    ]
                },
                {
                    "command": [
                        "apply filter100IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
                        "VernacExtend",
                        "4f7ea02ac52a44ea55c60cd6725e9bb4dc7645f4"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "exists (composeFunc 3 0 (PRnil _) zeroFunc).",
                        "VernacExtend",
                        "76ea322d25446fc406686182731c89021d42ff8e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeInCorrect",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction l as [| a0 l Hrecl]; simpl in |- *.",
                        "VernacExtend",
                        "8f96e727aca13332cc6089ba8031b2f0f8b0c647"
                    ]
                },
                {
                    "command": [
                        "unfold codeIn, evalStrongRec in |- *.",
                        "VernacExtend",
                        "b4ed0212456186914f297c2b22243d62ddb7588a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold codeIn, evalStrongRec in |- *.",
                        "VernacExtend",
                        "b4ed0212456186914f297c2b22243d62ddb7588a"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold evalList in |- *.",
                        "VernacExtend",
                        "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
                    ]
                },
                {
                    "command": [
                        "set (f := fun n Hrecs p1 : nat => switchPR n (switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) 1 (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) 0) in *.",
                        "VernacExtend",
                        "d24ebf776e940c86e380abaea4e868d013694004"
                    ]
                },
                {
                    "command": [
                        "set (m := cPairPi2 (pred (S (cPair a0 (codeList l))))) in *.",
                        "VernacExtend",
                        "4c114fcbaae11425a2a5e1cf08c45eb542a50e4c"
                    ]
                },
                {
                    "command": [
                        "set (n := S (cPair a0 (codeList l))) in *.",
                        "VernacExtend",
                        "6b246b467606bb2d218481e28ed5037d20c6f65e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1.",
                        "VernacExtend",
                        "36b3aaaa37226d3a477cb9398e76f49a05b6c3b7"
                    ]
                },
                {
                    "command": [
                        "induction (eq_nat_dec a0 a).",
                        "VernacExtend",
                        "777179fb192954155aa31f94025156fdcf12548d"
                    ]
                },
                {
                    "command": [
                        "rewrite a1.",
                        "VernacExtend",
                        "c6546be870b758244a7d9e49708e94339469c18b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite beq_nat_not_refl.",
                        "VernacExtend",
                        "1233302f99cf1c86d83f4544c8d696eababc6902"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (extEqual _ (evalComposeFunc 1 1 (Vector.cons _ (evalStrongRecHelp 1 f n) 0 (Vector.nil _)) (fun b : nat => codeNth (n - S m) b)) (evalStrongRec 1 f m)).",
                        "VernacExtend",
                        "37a7f6de14336eea1cd65715b4ce60d06df0a477"
                    ]
                },
                {
                    "command": [
                        "apply (evalStrongRecHelp2 1).",
                        "VernacExtend",
                        "6ecbd6e457b46278ae95cfefa96e5b42e0b90a67"
                    ]
                },
                {
                    "command": [
                        "unfold m in |- *.",
                        "VernacExtend",
                        "d8ebcad17c946ddc6f7a233ab999ae013ea9d454"
                    ]
                },
                {
                    "command": [
                        "unfold n in |- *.",
                        "VernacExtend",
                        "a1d1e65e22d15a12c388030f06adcfb7c9c48fd5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "unfold codeIn in Hrecl.",
                        "VernacExtend",
                        "0dcda558b91895a2cc8a36dbd495d405b2eeb479"
                    ]
                },
                {
                    "command": [
                        "move f after Hrecl; fold f in Hrecl.",
                        "VernacExtend",
                        "7bc2d84f2cb61af4ddbae3d65565acbc49111de7"
                    ]
                },
                {
                    "command": [
                        "unfold m, n in |- *.",
                        "VernacExtend",
                        "0ff12ebfe82335346b3b30eda17315cc96970de3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecl.",
                        "VernacExtend",
                        "a328513bb3b35e223eb11cf215df9e9470d5af7e"
                    ]
                },
                {
                    "command": [
                        "clear H f Hrecl.",
                        "VernacExtend",
                        "6a3f1c25a12278fda3f90b78d5757f713bf22d35"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec a l).",
                        "VernacExtend",
                        "cc23ab0671281072e4d0a7ddff79504ad38e3d03"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec a (a0 :: l)).",
                        "VernacExtend",
                        "74f89d65c49b871b5d46b57c0860e784a6093170"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "elim b0.",
                        "VernacExtend",
                        "4506652c796867e8c9be690f8925bec68461304f"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec a (a0 :: l)).",
                        "VernacExtend",
                        "74f89d65c49b871b5d46b57c0860e784a6093170"
                    ]
                },
                {
                    "command": [
                        "induction a1 as [H| H].",
                        "VernacExtend",
                        "597270e60425a0fd290239eb009a4ecf1ae19c55"
                    ]
                },
                {
                    "command": [
                        "elim b; auto.",
                        "VernacExtend",
                        "4e727fcd59e1474a52ec73620188fd67d9ebc23d"
                    ]
                },
                {
                    "command": [
                        "elim b0; auto.",
                        "VernacExtend",
                        "b9a3c1c4298185d878ae6d9b9a2e3e931430882e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeInIsPR",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "unfold codeIn in |- *.",
                        "VernacExtend",
                        "f1f46c195d2ff470d7cacd674de182f386464ce1"
                    ]
                },
                {
                    "command": [
                        "apply swapIsPR.",
                        "VernacExtend",
                        "df1101069b402c0319f06625614023d04b616873"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => n) (f2 := fun n Hrecs p1 : nat => switchPR (charFunction 2 beq_nat (cPairPi1 (pred n)) p1) 1 (codeNth (n - S (cPairPi2 (pred n))) Hrecs)) (f3 := fun n Hrecs p1 : nat => 0).",
                        "VernacExtend",
                        "730f2f259ac23cca1759db56227c519dc497aebd"
                    ]
                },
                {
                    "command": [
                        "apply pi1_3IsPR.",
                        "VernacExtend",
                        "69ded56cb54e46793815f38a229f810bef22ec17"
                    ]
                },
                {
                    "command": [
                        "apply compose3_3IsPR with (g := switchPR) (f1 := fun n Hrecs p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1) (f2 := fun n Hrecs p1 : nat => 1) (f3 := fun n Hrecs p1 : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "80e0e3407c69543779cfb7e52578efd3f946ada6"
                    ]
                },
                {
                    "command": [
                        "apply filter101IsPR with (g := fun n p1 : nat => charFunction 2 beq_nat (cPairPi1 (pred n)) p1).",
                        "VernacExtend",
                        "19a767d2a16a35ad77bf12b15b0e98fef28d8e0b"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (h := charFunction 2 beq_nat) (f := fun n p1 : nat => cPairPi1 (pred n)) (g := fun n p1 : nat => p1).",
                        "VernacExtend",
                        "b8475f84ea1717f046b8366b042122912484fec5"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => cPairPi1 (pred n)).",
                        "VernacExtend",
                        "d407e250715fad3e3af9716cfc6b4289b863cfcc"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply filter100IsPR with (g := fun _ : nat => 1).",
                        "VernacExtend",
                        "80ed1683612eb3e3881ab3565a9231500e1218b5"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply filter110IsPR with (g := fun n Hrecs : nat => codeNth (n - S (cPairPi2 (pred n))) Hrecs).",
                        "VernacExtend",
                        "b89168038a0f8a9501af68164e07095f64e5fd28"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (h := codeNth) (f := fun n Hrecs : nat => n - S (cPairPi2 (pred n))) (g := fun n Hrecs : nat => Hrecs).",
                        "VernacExtend",
                        "241c82ae49dba53d73d5333f382a6c1e5d72b654"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun n : nat => n - S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "6e7cbbe2e8ad6c59a58ce075803522282848d5fe"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (g := minus) (f := fun n : nat => n) (f' := fun n : nat => S (cPairPi2 (pred n))).",
                        "VernacExtend",
                        "a884b8bf17039b0a84ad3525c28c28524f490aed"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (g := S) (f := fun n : nat => cPairPi2 (pred n)).",
                        "VernacExtend",
                        "dc070832a219cf53326a898798c73e6b6904bd27"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply filter100IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "3fa0a9178776b7252cfaafa2bc5183eeda3b87d6"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNoDupCorrect",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeNoDup in |- *.",
                        "VernacExtend",
                        "92f61546fa021358894a6c640ec83296ac38b21c"
                    ]
                },
                {
                    "command": [
                        "set (g := fun l0 recs : nat => switchPR l0 (switchPR (codeIn (cPairPi1 (pred l0)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs) (S (cPair (cPairPi1 (pred l0)) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)))) 0) in *.",
                        "VernacExtend",
                        "80ce7c6b80fded8fd349f813f9a37ee05bd253c1"
                    ]
                },
                {
                    "command": [
                        "induction l as [| a l Hrecl].",
                        "VernacExtend",
                        "fd09d6abd5c50f5308a8699ed52e53f02987fb3d"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "10aba96d20e6adcd5b7ee9aa62d3c216ecba33cf"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecl.",
                        "VernacExtend",
                        "a328513bb3b35e223eb11cf215df9e9470d5af7e"
                    ]
                },
                {
                    "command": [
                        "rewrite codeInCorrect.",
                        "VernacExtend",
                        "dd48b7b346befe83481fe8e1e05cd1e924730a51"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec a (no_dup nat eq_nat_dec l)).",
                        "VernacExtend",
                        "f7e67877bd0224a96a5dcf0386e82dbb3579839c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2A.",
                        "VernacExtend",
                        "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNoDupIsPR",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "unfold codeNoDup in |- *.",
                        "VernacExtend",
                        "92f61546fa021358894a6c640ec83296ac38b21c"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun l recs : nat => l) (f2 := fun l recs : nat => switchPR (codeIn (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)) (codeNth (l - S (cPairPi2 (pred l))) recs) (S (cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)))) (f3 := fun l recs : nat => 0).",
                        "VernacExtend",
                        "c983e408193e966a173a860a5fda2f36009e6c1d"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 2 (fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs)).",
                        "VernacExtend",
                        "e040d8f76bb06a6d5e84e053100be8cd98edbd49"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun l : nat => cPairPi2 (pred l)).",
                        "VernacExtend",
                        "2a6702accb58f7c4ae440aefdaa440f075649b0b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun l recs : nat => codeIn (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)) (f2 := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs) (f3 := fun l recs : nat => S (cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs))).",
                        "VernacExtend",
                        "a7ef01c7bef12198566443b0ba02eac579517037"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun l recs : nat => cPairPi1 (pred l)) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
                        "VernacExtend",
                        "41b193b5a1ceea9a33caec6d30107c1f12d42417"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun l : nat => cPairPi1 (pred l)).",
                        "VernacExtend",
                        "dc06ff475b521a2b45914f96fe431a5b76261795"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeInIsPR.",
                        "VernacExtend",
                        "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun l recs : nat => cPair (cPairPi1 (pred l)) (codeNth (l - S (cPairPi2 (pred l))) recs)).",
                        "VernacExtend",
                        "975a600d4b8dc6615cb54d8a7f6834d58fc80330"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun l recs : nat => cPairPi1 (pred l)) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
                        "VernacExtend",
                        "41b193b5a1ceea9a33caec6d30107c1f12d42417"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun l : nat => cPairPi1 (pred l)).",
                        "VernacExtend",
                        "dc06ff475b521a2b45914f96fe431a5b76261795"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}